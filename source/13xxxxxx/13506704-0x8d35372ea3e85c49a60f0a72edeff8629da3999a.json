{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"sources\": {\r\n    \"SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"Initializable.sol\": {\r\n      \"content\": \"// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/v3.0.0/contracts/Initializable.sol\\n// Added public isInitialized() view of private initialized bool.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n\\n    /**\\n     * @dev Return true if and only if the contract has been initialized\\n     * @return whether the contract has been initialized\\n     */\\n    function isInitialized() public view returns (bool) {\\n        return initialized;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"UpgradeableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {Address} from \\\"Address.sol\\\";\\nimport {Context} from \\\"Context.sol\\\";\\nimport {IERC20} from \\\"IERC20.sol\\\";\\nimport {SafeMath} from \\\"SafeMath.sol\\\";\\n\\nimport {Initializable} from \\\"Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Initializable, Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_initialize(string memory name, string memory symbol) internal initializer {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public virtual view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public override view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public override view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public virtual override view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\")\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function updateNameAndSymbol(string memory __name, string memory __symbol) internal {\\n        _name = __name;\\n        _symbol = __symbol;\\n    }\\n}\\n\"\r\n    },\r\n    \"UpgradeableClaimable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {Context} from \\\"Context.sol\\\";\\n\\nimport {Initializable} from \\\"Initializable.sol\\\";\\n\\n/**\\n * @title UpgradeableClaimable\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. Since\\n * this contract combines Claimable and UpgradableOwnable contracts, ownership\\n * can be later change via 2 step method {transferOwnership} and {claimOwnership}\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract UpgradeableClaimable is Initializable, Context {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting a custom initial owner of choice.\\n     * @param __owner Initial owner of contract to be set.\\n     */\\n    function initialize(address __owner) internal initializer {\\n        _owner = __owner;\\n        emit OwnershipTransferred(address(0), __owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier throws if called by any account other than the pendingOwner.\\n     */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller is not the pending owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to set the pendingOwner address.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _pendingOwner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingOwner address to finalize the transfer.\\n     */\\n    function claimOwnership() public onlyPendingOwner {\\n        emit OwnershipTransferred(_owner, _pendingOwner);\\n        _owner = _pendingOwner;\\n        _pendingOwner = address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"ITrueStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\ninterface ITrueStrategy {\\n    /**\\n     * @dev put `amount` of tokens into the strategy\\n     * As a result of the deposit value of the strategy should increase by at least 98% of amount\\n     */\\n    function deposit(uint256 amount) external;\\n\\n    /**\\n     * @dev pull at least `minAmount` of tokens from strategy and transfer to the pool\\n     */\\n    function withdraw(uint256 minAmount) external;\\n\\n    /**\\n     * @dev withdraw everything from strategy\\n     * As a result of calling withdrawAll(),at least 98% of strategy's value should be transferred to the pool\\n     * Value must become 0\\n     */\\n    function withdrawAll() external;\\n\\n    /// @dev value evaluated to Pool's tokens\\n    function value() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"ILoanToken2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\nimport {ERC20} from \\\"UpgradeableERC20.sol\\\";\\nimport {ITrueFiPool2} from \\\"ITrueFiPool2.sol\\\";\\n\\ninterface ILoanToken2 is IERC20 {\\n    enum Status {Awaiting, Funded, Withdrawn, Settled, Defaulted, Liquidated}\\n\\n    function borrower() external view returns (address);\\n\\n    function amount() external view returns (uint256);\\n\\n    function term() external view returns (uint256);\\n\\n    function apy() external view returns (uint256);\\n\\n    function start() external view returns (uint256);\\n\\n    function lender() external view returns (address);\\n\\n    function debt() external view returns (uint256);\\n\\n    function pool() external view returns (ITrueFiPool2);\\n\\n    function profit() external view returns (uint256);\\n\\n    function status() external view returns (Status);\\n\\n    function getParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function fund() external;\\n\\n    function withdraw(address _beneficiary) external;\\n\\n    function settle() external;\\n\\n    function enterDefault() external;\\n\\n    function liquidate() external;\\n\\n    function redeem(uint256 _amount) external;\\n\\n    function repay(address _sender, uint256 _amount) external;\\n\\n    function repayInFull(address _sender) external;\\n\\n    function reclaim() external;\\n\\n    function allowTransfer(address account, bool _status) external;\\n\\n    function repaid() external view returns (uint256);\\n\\n    function isRepaid() external view returns (bool);\\n\\n    function balance() external view returns (uint256);\\n\\n    function value(uint256 _balance) external view returns (uint256);\\n\\n    function token() external view returns (ERC20);\\n\\n    function version() external pure returns (uint8);\\n}\\n\\n//interface IContractWithPool {\\n//    function pool() external view returns (ITrueFiPool2);\\n//}\\n//\\n//// Had to be split because of multiple inheritance problem\\n//interface ILoanToken2 is ILoanToken, IContractWithPool {\\n//\\n//}\\n\"\r\n    },\r\n    \"ITrueLender2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {ITrueFiPool2} from \\\"ITrueFiPool2.sol\\\";\\nimport {ILoanToken2} from \\\"ILoanToken2.sol\\\";\\n\\ninterface ITrueLender2 {\\n    // @dev calculate overall value of the pools\\n    function value(ITrueFiPool2 pool) external view returns (uint256);\\n\\n    // @dev distribute a basket of tokens for exiting user\\n    function distribute(\\n        address recipient,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) external;\\n\\n    function transferAllLoanTokens(ILoanToken2 loan, address recipient) external;\\n}\\n\"\r\n    },\r\n    \"IERC20WithDecimals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\n\\ninterface IERC20WithDecimals is IERC20 {\\n    function decimals() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"ITrueFiPoolOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {IERC20WithDecimals} from \\\"IERC20WithDecimals.sol\\\";\\n\\n/**\\n * @dev Oracle that converts any token to and from TRU\\n * Used for liquidations and valuing of liquidated TRU in the pool\\n */\\ninterface ITrueFiPoolOracle {\\n    // token address\\n    function token() external view returns (IERC20WithDecimals);\\n\\n    // amount of tokens 1 TRU is worth\\n    function truToToken(uint256 truAmount) external view returns (uint256);\\n\\n    // amount of TRU 1 token is worth\\n    function tokenToTru(uint256 tokenAmount) external view returns (uint256);\\n\\n    // USD price of token with 18 decimals\\n    function tokenToUsd(uint256 tokenAmount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"I1Inch3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\ninterface I1Inch3 {\\n    struct SwapDescription {\\n        address srcToken;\\n        address dstToken;\\n        address srcReceiver;\\n        address dstReceiver;\\n        uint256 amount;\\n        uint256 minReturnAmount;\\n        uint256 flags;\\n        bytes permit;\\n    }\\n\\n    function swap(\\n        address caller,\\n        SwapDescription calldata desc,\\n        bytes calldata data\\n    )\\n        external\\n        returns (\\n            uint256 returnAmount,\\n            uint256 gasLeft,\\n            uint256 chiSpent\\n        );\\n\\n    function unoswap(\\n        address srcToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        bytes32[] calldata /* pools */\\n    ) external payable returns (uint256 returnAmount);\\n}\\n\"\r\n    },\r\n    \"IDeficiencyToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\nimport {ILoanToken2} from \\\"ILoanToken2.sol\\\";\\n\\ninterface IDeficiencyToken is IERC20 {\\n    function loan() external view returns (ILoanToken2);\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function version() external pure returns (uint8);\\n}\\n\"\r\n    },\r\n    \"ISAFU.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {IDeficiencyToken} from \\\"IDeficiencyToken.sol\\\";\\nimport {ILoanToken2} from \\\"ILoanToken2.sol\\\";\\n\\ninterface ISAFU {\\n    function poolDeficit(address pool) external view returns (uint256);\\n\\n    function deficiencyToken(ILoanToken2 loan) external view returns (IDeficiencyToken);\\n\\n    function reclaim(ILoanToken2 loan, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"ITrueFiPool2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {ERC20, IERC20} from \\\"UpgradeableERC20.sol\\\";\\nimport {ITrueLender2, ILoanToken2} from \\\"ITrueLender2.sol\\\";\\nimport {ITrueFiPoolOracle} from \\\"ITrueFiPoolOracle.sol\\\";\\nimport {I1Inch3} from \\\"I1Inch3.sol\\\";\\nimport {ISAFU} from \\\"ISAFU.sol\\\";\\n\\ninterface ITrueFiPool2 is IERC20 {\\n    function initialize(\\n        ERC20 _token,\\n        ITrueLender2 _lender,\\n        ISAFU safu,\\n        address __owner\\n    ) external;\\n\\n    function singleBorrowerInitialize(\\n        ERC20 _token,\\n        ITrueLender2 _lender,\\n        ISAFU safu,\\n        address __owner,\\n        string memory borrowerName,\\n        string memory borrowerSymbol\\n    ) external;\\n\\n    function token() external view returns (ERC20);\\n\\n    function oracle() external view returns (ITrueFiPoolOracle);\\n\\n    function poolValue() external view returns (uint256);\\n\\n    /**\\n     * @dev Ratio of liquid assets in the pool to the pool value\\n     */\\n    function liquidRatio() external view returns (uint256);\\n\\n    /**\\n     * @dev Ratio of liquid assets in the pool after lending\\n     * @param amount Amount of asset being lent\\n     */\\n    function proFormaLiquidRatio(uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Join the pool by depositing tokens\\n     * @param amount amount of tokens to deposit\\n     */\\n    function join(uint256 amount) external;\\n\\n    /**\\n     * @dev borrow from pool\\n     * 1. Transfer TUSD to sender\\n     * 2. Only lending pool should be allowed to call this\\n     */\\n    function borrow(uint256 amount) external;\\n\\n    /**\\n     * @dev pay borrowed money back to pool\\n     * 1. Transfer TUSD from sender\\n     * 2. Only lending pool should be allowed to call this\\n     */\\n    function repay(uint256 currencyAmount) external;\\n\\n    /**\\n     * @dev SAFU buys LoanTokens from the pool\\n     */\\n    function liquidate(ILoanToken2 loan) external;\\n}\\n\"\r\n    },\r\n    \"IPauseableContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @dev interface to allow standard pause function\\n */\\ninterface IPauseableContract {\\n    function setPauseStatus(bool pauseStatus) external;\\n}\\n\"\r\n    },\r\n    \"ITrueCreditAgency.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {ITrueFiPool2} from \\\"ITrueFiPool2.sol\\\";\\n\\ninterface ITrueCreditAgency {\\n    function poolCreditValue(ITrueFiPool2 pool) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"Log.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity 0.6.10;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n    /**\\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromUInt(uint256 x) internal pure returns (int128) {\\n        require(x <= 0x7FFFFFFFFFFFFFFF);\\n        return int128(x << 64);\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function log_2(int128 x) internal pure returns (int128) {\\n        require(x > 0);\\n\\n        int256 msb = 0;\\n        int256 xc = x;\\n        if (xc >= 0x10000000000000000) {\\n            xc >>= 64;\\n            msb += 64;\\n        }\\n        if (xc >= 0x100000000) {\\n            xc >>= 32;\\n            msb += 32;\\n        }\\n        if (xc >= 0x10000) {\\n            xc >>= 16;\\n            msb += 16;\\n        }\\n        if (xc >= 0x100) {\\n            xc >>= 8;\\n            msb += 8;\\n        }\\n        if (xc >= 0x10) {\\n            xc >>= 4;\\n            msb += 4;\\n        }\\n        if (xc >= 0x4) {\\n            xc >>= 2;\\n            msb += 2;\\n        }\\n        if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n        int256 result = (msb - 64) << 64;\\n        uint256 ux = uint256(x) << uint256(127 - msb);\\n        for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n            ux *= ux;\\n            uint256 b = ux >> 255;\\n            ux >>= 127 + b;\\n            result += bit * int256(b);\\n        }\\n\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function ln(int128 x) internal pure returns (int128) {\\n        require(x > 0);\\n\\n        return int128((uint256(log_2(x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128);\\n    }\\n}\\n\"\r\n    },\r\n    \"OneInchExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"SafeMath.sol\\\";\\nimport {I1Inch3} from \\\"I1Inch3.sol\\\";\\nimport {IERC20} from \\\"IERC20.sol\\\";\\nimport {SafeERC20} from \\\"SafeERC20.sol\\\";\\n\\ninterface IUniRouter {\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n}\\n\\nlibrary OneInchExchange {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    uint256 constant ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\\n    uint256 constant REVERSE_MASK = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n    event Swapped(I1Inch3.SwapDescription description, uint256 returnedAmount);\\n\\n    /**\\n     * @dev Forward data to 1Inch contract\\n     * @param _1inchExchange address of 1Inch (currently 0x11111112542d85b3ef69ae05771c2dccff4faa26 for mainnet)\\n     * @param data Data that is forwarded into the 1inch exchange contract. Can be acquired from 1Inch API https://api.1inch.exchange/v3.0/1/swap\\n     * [See more](https://docs.1inch.exchange/api/quote-swap#swap)\\n     *\\n     * @return description - description of the swap\\n     */\\n\\n    function exchange(I1Inch3 _1inchExchange, bytes calldata data)\\n        internal\\n        returns (I1Inch3.SwapDescription memory description, uint256 returnedAmount)\\n    {\\n        if (data[0] == 0x7c) {\\n            // call `swap()`\\n            (, description, ) = abi.decode(data[4:], (address, I1Inch3.SwapDescription, bytes));\\n        } else {\\n            // call `unoswap()`\\n            (address srcToken, uint256 amount, uint256 minReturn, bytes32[] memory pathData) = abi.decode(\\n                data[4:],\\n                (address, uint256, uint256, bytes32[])\\n            );\\n            description.srcToken = srcToken;\\n            description.amount = amount;\\n            description.minReturnAmount = minReturn;\\n            description.flags = 0;\\n            uint256 lastPath = uint256(pathData[pathData.length - 1]);\\n            IUniRouter uniRouter = IUniRouter(address(lastPath & ADDRESS_MASK));\\n            bool isReverse = lastPath & REVERSE_MASK > 0;\\n            description.dstToken = isReverse ? uniRouter.token0() : uniRouter.token1();\\n            description.dstReceiver = address(this);\\n        }\\n\\n        IERC20(description.srcToken).safeApprove(address(_1inchExchange), description.amount);\\n        uint256 balanceBefore = IERC20(description.dstToken).balanceOf(description.dstReceiver);\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = address(_1inchExchange).call(data);\\n        if (!success) {\\n            // Revert with original error message\\n            assembly {\\n                let ptr := mload(0x40)\\n                let size := returndatasize()\\n                returndatacopy(ptr, 0, size)\\n                revert(ptr, size)\\n            }\\n        }\\n\\n        uint256 balanceAfter = IERC20(description.dstToken).balanceOf(description.dstReceiver);\\n        returnedAmount = balanceAfter.sub(balanceBefore);\\n\\n        emit Swapped(description, returnedAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"PoolExtensions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {ILoanToken2} from \\\"ILoanToken2.sol\\\";\\nimport {ITrueLender2} from \\\"ITrueLender2.sol\\\";\\nimport {ISAFU} from \\\"ISAFU.sol\\\";\\n\\n/**\\n * @dev Library that has shared functions between legacy TrueFi Pool and Pool2\\n */\\nlibrary PoolExtensions {\\n    function _liquidate(\\n        ISAFU safu,\\n        ILoanToken2 loan,\\n        ITrueLender2 lender\\n    ) internal {\\n        require(msg.sender == address(safu), \\\"TrueFiPool: Should be called by SAFU\\\");\\n        lender.transferAllLoanTokens(loan, address(safu));\\n    }\\n}\\n\"\r\n    },\r\n    \"TrueFiPool2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"SafeMath.sol\\\";\\nimport {SafeERC20} from \\\"SafeERC20.sol\\\";\\nimport {ERC20} from \\\"UpgradeableERC20.sol\\\";\\nimport {UpgradeableClaimable} from \\\"UpgradeableClaimable.sol\\\";\\n\\nimport {ITrueStrategy} from \\\"ITrueStrategy.sol\\\";\\nimport {ITrueFiPool2, ITrueFiPoolOracle} from \\\"ITrueFiPool2.sol\\\";\\nimport {ITrueLender2, ILoanToken2} from \\\"ITrueLender2.sol\\\";\\nimport {IPauseableContract} from \\\"IPauseableContract.sol\\\";\\nimport {ISAFU} from \\\"ISAFU.sol\\\";\\nimport {IDeficiencyToken} from \\\"IDeficiencyToken.sol\\\";\\nimport {ITrueCreditAgency} from \\\"ITrueCreditAgency.sol\\\";\\n\\nimport {ABDKMath64x64} from \\\"Log.sol\\\";\\nimport {OneInchExchange} from \\\"OneInchExchange.sol\\\";\\nimport {PoolExtensions} from \\\"PoolExtensions.sol\\\";\\n\\n/**\\n * @title TrueFiPool2\\n * @dev Lending pool which may use a strategy to store idle funds\\n * Earn high interest rates on currency deposits through uncollateralized loans\\n *\\n * Funds deposited in this pool are not fully liquid.\\n * Exiting incurs an exit penalty depending on pool liquidity\\n * After exiting, an account will need to wait for LoanTokens to expire and burn them\\n * It is recommended to perform a zap or swap tokens on Uniswap for increased liquidity\\n *\\n * Funds are managed through an external function to save gas on deposits\\n */\\ncontract TrueFiPool2 is ITrueFiPool2, IPauseableContract, ERC20, UpgradeableClaimable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n    using SafeERC20 for IDeficiencyToken;\\n\\n    uint256 private constant BASIS_PRECISION = 10000;\\n\\n    // max slippage on liquidation token swaps\\n    // Measured in basis points, e.g. 10000 = 100%\\n    uint16 public constant TOLERATED_SLIPPAGE = 100; // 1%\\n\\n    // tolerance difference between\\n    // expected and actual transaction results\\n    // when dealing with strategies\\n    // Measured in  basis points, e.g. 10000 = 100%\\n    uint16 public constant TOLERATED_STRATEGY_LOSS = 10; // 0.1%\\n\\n    // ================ WARNING ==================\\n    // ===== THIS CONTRACT IS INITIALIZABLE ======\\n    // === STORAGE VARIABLES ARE DECLARED BELOW ==\\n    // REMOVAL OR REORDER OF VARIABLES WILL RESULT\\n    // ========= IN STORAGE CORRUPTION ===========\\n\\n    uint8 public constant VERSION = 1;\\n\\n    ERC20 public override token;\\n\\n    ITrueStrategy public strategy;\\n    ITrueLender2 public lender;\\n\\n    // fee for deposits\\n    // fee precision: 10000 = 100%\\n    uint256 public joiningFee;\\n    // track claimable fees\\n    uint256 public claimableFees;\\n\\n    mapping(address => uint256) latestJoinBlock;\\n\\n    address private DEPRECATED__liquidationToken;\\n\\n    ITrueFiPoolOracle public override oracle;\\n\\n    // allow pausing of deposits\\n    bool public pauseStatus;\\n\\n    // cache values during sync for gas optimization\\n    bool private inSync;\\n    uint256 private strategyValueCache;\\n    uint256 private loansValueCache;\\n\\n    // who gets all fees\\n    address public beneficiary;\\n\\n    address private DEPRECATED__1Inch;\\n\\n    ISAFU public safu;\\n\\n    ITrueCreditAgency public creditAgency;\\n\\n    // ======= STORAGE DECLARATION END ===========\\n\\n    /**\\n     * @dev Helper function to concatenate two strings\\n     * @param a First part of string to concat\\n     * @param b Second part of string to concat\\n     * @return Concatenated string of `a` and `b`\\n     */\\n    function concat(string memory a, string memory b) internal pure returns (string memory) {\\n        return string(abi.encodePacked(a, b));\\n    }\\n\\n    function initialize(\\n        ERC20 _token,\\n        ITrueLender2 _lender,\\n        ISAFU _safu,\\n        address __owner\\n    ) external override initializer {\\n        ERC20.__ERC20_initialize(concat(\\\"TrueFi \\\", _token.name()), concat(\\\"tf\\\", _token.symbol()));\\n        UpgradeableClaimable.initialize(__owner);\\n\\n        token = _token;\\n        lender = _lender;\\n        safu = _safu;\\n    }\\n\\n    /**\\n     * @dev Initializer for single borrower pools\\n     */\\n    function singleBorrowerInitialize(\\n        ERC20 _token,\\n        ITrueLender2 _lender,\\n        ISAFU _safu,\\n        address __owner,\\n        string memory borrowerName,\\n        string memory borrowerSymbol\\n    ) external override initializer {\\n        ERC20.__ERC20_initialize(\\n            concat(concat(\\\"TrueFi \\\", borrowerName), concat(\\\" \\\", _token.name())),\\n            concat(concat(\\\"tf\\\", borrowerSymbol), _token.symbol())\\n        );\\n        UpgradeableClaimable.initialize(__owner);\\n\\n        token = _token;\\n        lender = _lender;\\n        safu = _safu;\\n    }\\n\\n    /**\\n     * @dev Emitted when fee is changed\\n     * @param newFee New fee\\n     */\\n    event JoiningFeeChanged(uint256 newFee);\\n\\n    /**\\n     * @dev Emitted when beneficiary is changed\\n     * @param newBeneficiary New beneficiary\\n     */\\n    event BeneficiaryChanged(address newBeneficiary);\\n\\n    /**\\n     * @dev Emitted when oracle is changed\\n     * @param newOracle New oracle\\n     */\\n    event OracleChanged(ITrueFiPoolOracle newOracle);\\n\\n    /**\\n     * @dev Emitted when someone joins the pool\\n     * @param staker Account staking\\n     * @param deposited Amount deposited\\n     * @param minted Amount of pool tokens minted\\n     */\\n    event Joined(address indexed staker, uint256 deposited, uint256 minted);\\n\\n    /**\\n     * @dev Emitted when someone exits the pool\\n     * @param staker Account exiting\\n     * @param amount Amount unstaking\\n     */\\n    event Exited(address indexed staker, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when funds are flushed into the strategy\\n     * @param currencyAmount Amount of tokens deposited\\n     */\\n    event Flushed(uint256 currencyAmount);\\n\\n    /**\\n     * @dev Emitted when funds are pulled from the strategy\\n     * @param minTokenAmount Minimal expected amount received tokens\\n     */\\n    event Pulled(uint256 minTokenAmount);\\n\\n    /**\\n     * @dev Emitted when funds are borrowed from pool\\n     * @param borrower Borrower address\\n     * @param amount Amount of funds borrowed from pool\\n     */\\n    event Borrow(address borrower, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when borrower repays the pool\\n     * @param payer Address of borrower\\n     * @param amount Amount repaid\\n     */\\n    event Repaid(address indexed payer, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when fees are collected\\n     * @param beneficiary Account to receive fees\\n     * @param amount Amount of fees collected\\n     */\\n    event Collected(address indexed beneficiary, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when strategy is switched\\n     * @param newStrategy Strategy to switch to\\n     */\\n    event StrategySwitched(ITrueStrategy newStrategy);\\n\\n    /**\\n     * @dev Emitted when joining is paused or unpaused\\n     * @param pauseStatus New pausing status\\n     */\\n    event PauseStatusChanged(bool pauseStatus);\\n\\n    /**\\n     * @dev Emitted when SAFU address is changed\\n     * @param newSafu New SAFU address\\n     */\\n    event SafuChanged(ISAFU newSafu);\\n\\n    /**\\n     * @dev Emitted when pool reclaims deficit from SAFU\\n     * @param loan Loan for which the deficit was reclaimed\\n     * @param deficit Amount reclaimed\\n     */\\n    event DeficitReclaimed(ILoanToken2 loan, uint256 deficit);\\n\\n    /**\\n     * @dev Emitted when Credit Agency address is changed\\n     * @param newCreditAgency New Credit Agency address\\n     */\\n    event CreditAgencyChanged(ITrueCreditAgency newCreditAgency);\\n\\n    /**\\n     * @dev only TrueLender of CreditAgency can perform borrowing or repaying\\n     */\\n    modifier onlyLenderOrTrueCreditAgency() {\\n        require(\\n            msg.sender == address(lender) || msg.sender == address(creditAgency),\\n            \\\"TrueFiPool: Caller is not the lender or creditAgency\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev pool can only be joined when it's unpaused\\n     */\\n    modifier joiningNotPaused() {\\n        require(!pauseStatus, \\\"TrueFiPool: Joining the pool is paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Sync values to avoid making expensive calls multiple times\\n     * Will set inSync to true, allowing getter functions to return cached values\\n     * Wipes cached values to save gas\\n     */\\n    modifier sync() {\\n        // sync\\n        strategyValueCache = strategyValue();\\n        loansValueCache = loansValue();\\n        inSync = true;\\n        _;\\n        // wipe\\n        inSync = false;\\n        strategyValueCache = 0;\\n        loansValueCache = 0;\\n    }\\n\\n    /**\\n     * @dev Allow pausing of deposits in case of emergency\\n     * @param status New deposit status\\n     */\\n    function setPauseStatus(bool status) external override onlyOwner {\\n        pauseStatus = status;\\n        emit PauseStatusChanged(status);\\n    }\\n\\n    /**\\n     * @dev Change SAFU address\\n     */\\n    function setSafuAddress(ISAFU _safu) external onlyOwner {\\n        safu = _safu;\\n        emit SafuChanged(_safu);\\n    }\\n\\n    function setCreditAgency(ITrueCreditAgency _creditAgency) external onlyOwner {\\n        creditAgency = _creditAgency;\\n        emit CreditAgencyChanged(_creditAgency);\\n    }\\n\\n    /**\\n     * @dev Number of decimals for user-facing representations.\\n     * Delegates to the underlying pool token.\\n     */\\n    function decimals() public override view returns (uint8) {\\n        return token.decimals();\\n    }\\n\\n    /**\\n     * @dev Virtual value of liquid assets in the pool\\n     * @return Virtual liquid value of pool assets\\n     */\\n    function liquidValue() public view returns (uint256) {\\n        return currencyBalance().add(strategyValue());\\n    }\\n\\n    /**\\n     * @dev Value of funds deposited into the strategy denominated in underlying token\\n     * @return Virtual value of strategy\\n     */\\n    function strategyValue() public view returns (uint256) {\\n        if (address(strategy) == address(0)) {\\n            return 0;\\n        }\\n        if (inSync) {\\n            return strategyValueCache;\\n        }\\n        return strategy.value();\\n    }\\n\\n    /**\\n     * @dev Calculate pool value in underlying token\\n     * \\\"virtual price\\\" of entire pool - LoanTokens, UnderlyingTokens, strategy value\\n     * @return pool value denominated in underlying token\\n     */\\n    function poolValue() public override view returns (uint256) {\\n        // this assumes defaulted loans are worth their full value\\n        return liquidValue().add(loansValue()).add(deficitValue()).add(creditValue());\\n    }\\n\\n    /**\\n     * @dev Return pool deficiency value, to be returned by safu\\n     * @return pool deficiency value\\n     */\\n    function deficitValue() public view returns (uint256) {\\n        if (address(safu) == address(0)) {\\n            return 0;\\n        }\\n        return safu.poolDeficit(address(this));\\n    }\\n\\n    /**\\n     * @dev Return pool credit line value\\n     * @return pool credit value\\n     */\\n    function creditValue() public view returns (uint256) {\\n        if (address(creditAgency) == address(0)) {\\n            return 0;\\n        }\\n        return creditAgency.poolCreditValue(ITrueFiPool2(this));\\n    }\\n\\n    /**\\n     * @dev Virtual value of loan assets in the pool\\n     * Will return cached value if inSync\\n     * @return Value of loans in pool\\n     */\\n    function loansValue() public view returns (uint256) {\\n        if (inSync) {\\n            return loansValueCache;\\n        }\\n        return lender.value(this);\\n    }\\n\\n    /**\\n     * @dev ensure enough tokens are available\\n     * Check if current available amount of `token` is enough and\\n     * withdraw remainder from strategy\\n     * @param neededAmount amount required\\n     */\\n    function ensureSufficientLiquidity(uint256 neededAmount) internal {\\n        uint256 currentlyAvailableAmount = currencyBalance();\\n        if (currentlyAvailableAmount < neededAmount) {\\n            require(address(strategy) != address(0), \\\"TrueFiPool: Pool has no strategy to withdraw from\\\");\\n            strategy.withdraw(neededAmount.sub(currentlyAvailableAmount));\\n            require(currencyBalance() >= neededAmount, \\\"TrueFiPool: Not enough funds taken from the strategy\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev set pool join fee\\n     * @param fee new fee\\n     */\\n    function setJoiningFee(uint256 fee) external onlyOwner {\\n        require(fee <= BASIS_PRECISION, \\\"TrueFiPool: Fee cannot exceed transaction value\\\");\\n        joiningFee = fee;\\n        emit JoiningFeeChanged(fee);\\n    }\\n\\n    /**\\n     * @dev set beneficiary\\n     * @param newBeneficiary new beneficiary\\n     */\\n    function setBeneficiary(address newBeneficiary) external onlyOwner {\\n        require(newBeneficiary != address(0), \\\"TrueFiPool: Beneficiary address cannot be set to 0\\\");\\n        beneficiary = newBeneficiary;\\n        emit BeneficiaryChanged(newBeneficiary);\\n    }\\n\\n    /**\\n     * @dev Join the pool by depositing tokens\\n     * @param amount amount of token to deposit\\n     */\\n    function join(uint256 amount) external override joiningNotPaused {\\n        uint256 fee = amount.mul(joiningFee).div(BASIS_PRECISION);\\n        uint256 mintedAmount = mint(amount.sub(fee));\\n        claimableFees = claimableFees.add(fee);\\n\\n        // TODO: tx.origin will be depricated in a future ethereum upgrade\\n        latestJoinBlock[tx.origin] = block.number;\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit Joined(msg.sender, amount, mintedAmount);\\n    }\\n\\n    /**\\n     * @dev Exit pool only with liquid tokens\\n     * This function will only transfer underlying token but with a small penalty\\n     * Uses the sync() modifier to reduce gas costs of using strategy and lender\\n     * @param amount amount of pool liquidity tokens to redeem for underlying tokens\\n     */\\n    function liquidExit(uint256 amount) external sync {\\n        require(block.number != latestJoinBlock[tx.origin], \\\"TrueFiPool: Cannot join and exit in same block\\\");\\n        require(amount <= balanceOf(msg.sender), \\\"TrueFiPool: Insufficient funds\\\");\\n\\n        uint256 amountToWithdraw = poolValue().mul(amount).div(totalSupply());\\n        amountToWithdraw = amountToWithdraw.mul(liquidExitPenalty(amountToWithdraw)).div(BASIS_PRECISION);\\n        require(amountToWithdraw <= liquidValue(), \\\"TrueFiPool: Not enough liquidity in pool\\\");\\n\\n        // burn tokens sent\\n        _burn(msg.sender, amount);\\n\\n        ensureSufficientLiquidity(amountToWithdraw);\\n\\n        token.safeTransfer(msg.sender, amountToWithdraw);\\n\\n        emit Exited(msg.sender, amountToWithdraw);\\n    }\\n\\n    /**\\n     * @dev Penalty (in % * 100) applied if liquid exit is performed with this amount\\n     * returns BASIS_PRECISION (10000) if no penalty\\n     */\\n    function liquidExitPenalty(uint256 amount) public view returns (uint256) {\\n        uint256 lv = liquidValue();\\n        uint256 pv = poolValue();\\n        if (amount == pv) {\\n            return BASIS_PRECISION;\\n        }\\n        uint256 liquidRatioBefore = lv.mul(BASIS_PRECISION).div(pv);\\n        uint256 liquidRatioAfter = lv.sub(amount).mul(BASIS_PRECISION).div(pv.sub(amount));\\n        return BASIS_PRECISION.sub(averageExitPenalty(liquidRatioAfter, liquidRatioBefore));\\n    }\\n\\n    /**\\n     * @dev Calculates integral of 5/(x+50)dx times 10000\\n     */\\n    function integrateAtPoint(uint256 x) public pure returns (uint256) {\\n        return uint256(ABDKMath64x64.ln(ABDKMath64x64.fromUInt(x.add(50)))).mul(50000).div(2**64);\\n    }\\n\\n    /**\\n     * @dev Calculates average penalty on interval [from; to]\\n     * @return average exit penalty\\n     */\\n    function averageExitPenalty(uint256 from, uint256 to) public pure returns (uint256) {\\n        require(from <= to, \\\"TrueFiPool: To precedes from\\\");\\n        if (from == BASIS_PRECISION) {\\n            // When all liquid, don't penalize\\n            return 0;\\n        }\\n        if (from == to) {\\n            return uint256(50000).div(from.add(50));\\n        }\\n        return integrateAtPoint(to).sub(integrateAtPoint(from)).div(to.sub(from));\\n    }\\n\\n    /**\\n     * @dev Deposit idle funds into strategy\\n     * @param amount Amount of funds to deposit into strategy\\n     */\\n    function flush(uint256 amount) external onlyOwner {\\n        require(address(strategy) != address(0), \\\"TrueFiPool: Pool has no strategy set up\\\");\\n        require(amount <= currencyBalance(), \\\"TrueFiPool: Insufficient currency balance\\\");\\n\\n        uint256 expectedMinStrategyValue = strategy.value().add(withToleratedStrategyLoss(amount));\\n        token.safeApprove(address(strategy), amount);\\n        strategy.deposit(amount);\\n        require(strategy.value() >= expectedMinStrategyValue, \\\"TrueFiPool: Strategy value expected to be higher\\\");\\n        emit Flushed(amount);\\n    }\\n\\n    /**\\n     * @dev Remove liquidity from strategy\\n     * @param minTokenAmount minimum amount of tokens to withdraw\\n     */\\n    function pull(uint256 minTokenAmount) external onlyOwner {\\n        require(address(strategy) != address(0), \\\"TrueFiPool: Pool has no strategy set up\\\");\\n\\n        uint256 expectedCurrencyBalance = currencyBalance().add(minTokenAmount);\\n        strategy.withdraw(minTokenAmount);\\n        require(currencyBalance() >= expectedCurrencyBalance, \\\"TrueFiPool: Currency balance expected to be higher\\\");\\n\\n        emit Pulled(minTokenAmount);\\n    }\\n\\n    /**\\n     * @dev Remove liquidity from strategy if necessary and transfer to lender\\n     * @param amount amount for lender to withdraw\\n     */\\n    function borrow(uint256 amount) external override onlyLenderOrTrueCreditAgency {\\n        require(amount <= liquidValue(), \\\"TrueFiPool: Insufficient liquidity\\\");\\n        if (amount > 0) {\\n            ensureSufficientLiquidity(amount);\\n        }\\n\\n        token.safeTransfer(msg.sender, amount);\\n\\n        emit Borrow(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev repay debt by transferring tokens to the contract\\n     * @param currencyAmount amount to repay\\n     */\\n    function repay(uint256 currencyAmount) external override onlyLenderOrTrueCreditAgency {\\n        token.safeTransferFrom(msg.sender, address(this), currencyAmount);\\n        emit Repaid(msg.sender, currencyAmount);\\n    }\\n\\n    /**\\n     * @dev Claim fees from the pool\\n     */\\n    function collectFees() external {\\n        require(beneficiary != address(0), \\\"TrueFiPool: Beneficiary is not set\\\");\\n\\n        uint256 amount = claimableFees;\\n        claimableFees = 0;\\n\\n        if (amount > 0) {\\n            token.safeTransfer(beneficiary, amount);\\n        }\\n\\n        emit Collected(beneficiary, amount);\\n    }\\n\\n    /**\\n     * @dev Switches current strategy to a new strategy\\n     * @param newStrategy strategy to switch to\\n     */\\n    function switchStrategy(ITrueStrategy newStrategy) external onlyOwner {\\n        require(strategy != newStrategy, \\\"TrueFiPool: Cannot switch to the same strategy\\\");\\n\\n        ITrueStrategy previousStrategy = strategy;\\n        strategy = newStrategy;\\n\\n        if (address(previousStrategy) != address(0)) {\\n            uint256 expectedMinCurrencyBalance = currencyBalance().add(withToleratedStrategyLoss(previousStrategy.value()));\\n            previousStrategy.withdrawAll();\\n            require(currencyBalance() >= expectedMinCurrencyBalance, \\\"TrueFiPool: All funds should be withdrawn to pool\\\");\\n            require(previousStrategy.value() == 0, \\\"TrueFiPool: Switched strategy should be depleted\\\");\\n        }\\n\\n        emit StrategySwitched(newStrategy);\\n    }\\n\\n    /**\\n     * @dev Function called by SAFU when liquidation happens. It will transfer all tokens of this loan the SAFU\\n     */\\n    function liquidate(ILoanToken2 loan) external override {\\n        PoolExtensions._liquidate(safu, loan, lender);\\n    }\\n\\n    /**\\n     * @dev Function called when loan's debt is repaid to SAFU, pool has a deficit value towards that loan\\n     */\\n    function reclaimDeficit(ILoanToken2 loan) external {\\n        IDeficiencyToken dToken = safu.deficiencyToken(loan);\\n        require(address(dToken) != address(0), \\\"TrueFiPool2: No deficiency token found for loan\\\");\\n        uint256 deficit = dToken.balanceOf(address(this));\\n        dToken.safeApprove(address(safu), deficit);\\n        safu.reclaim(loan, deficit);\\n\\n        emit DeficitReclaimed(loan, deficit);\\n    }\\n\\n    /**\\n     * @dev Change oracle, can only be called by owner\\n     */\\n    function setOracle(ITrueFiPoolOracle newOracle) external onlyOwner {\\n        oracle = newOracle;\\n        emit OracleChanged(newOracle);\\n    }\\n\\n    /**\\n     * @dev Currency token balance\\n     * @return Currency token balance\\n     */\\n    function currencyBalance() public view returns (uint256) {\\n        return token.balanceOf(address(this)).sub(claimableFees);\\n    }\\n\\n    /**\\n     * @dev Utilization of the pool\\n     * @return Utilization in basis points\\n     */\\n    function utilization() public view returns (uint256) {\\n        uint256 pv = poolValue();\\n        return pv.sub(liquidValue()).mul(BASIS_PRECISION).div(pv);\\n    }\\n\\n    /**\\n     * @dev Ratio of liquid assets in the pool to the pool value.\\n     * Equals to 1 - utilization.\\n     * @return Calculated ratio in basis points\\n     */\\n    function liquidRatio() public override view returns (uint256) {\\n        uint256 _poolValue = poolValue();\\n        if (_poolValue == 0) {\\n            return 0;\\n        }\\n        return liquidValue().mul(BASIS_PRECISION).div(_poolValue);\\n    }\\n\\n    /**\\n     * @dev Ratio of liquid assets in the pool after lending\\n     * @param amount Amount of asset being lent\\n     * @return Calculated ratio in basis points\\n     */\\n    function proFormaLiquidRatio(uint256 amount) external override view returns (uint256) {\\n        uint256 _poolValue = poolValue();\\n        if (_poolValue == 0) {\\n            return 0;\\n        }\\n        return (liquidValue().sub(amount)).mul(BASIS_PRECISION).div(_poolValue);\\n    }\\n\\n    /**\\n     * @param depositedAmount Amount of currency deposited\\n     * @return amount minted from this transaction\\n     */\\n    function mint(uint256 depositedAmount) internal returns (uint256) {\\n        if (depositedAmount == 0) {\\n            return depositedAmount;\\n        }\\n        uint256 mintedAmount = depositedAmount;\\n\\n        // first staker mints same amount as deposited\\n        if (totalSupply() > 0) {\\n            mintedAmount = totalSupply().mul(depositedAmount).div(poolValue());\\n        }\\n        // mint pool liquidity tokens\\n        _mint(msg.sender, mintedAmount);\\n\\n        return mintedAmount;\\n    }\\n\\n    /**\\n     * @dev Decrease provided amount percentwise by error\\n     * @param amount Amount to decrease\\n     * @return Calculated value\\n     */\\n    function withToleratedSlippage(uint256 amount) internal pure returns (uint256) {\\n        return amount.mul(BASIS_PRECISION - TOLERATED_SLIPPAGE).div(BASIS_PRECISION);\\n    }\\n\\n    /**\\n     * @dev Decrease provided amount percentwise by error\\n     * @param amount Amount to decrease\\n     * @return Calculated value\\n     */\\n    function withToleratedStrategyLoss(uint256 amount) internal pure returns (uint256) {\\n        return amount.mul(BASIS_PRECISION - TOLERATED_STRATEGY_LOSS).div(BASIS_PRECISION);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Collected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ITrueCreditAgency\",\"name\":\"newCreditAgency\",\"type\":\"address\"}],\"name\":\"CreditAgencyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ILoanToken2\",\"name\":\"loan\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deficit\",\"type\":\"uint256\"}],\"name\":\"DeficitReclaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Exited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"Flushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"name\":\"Joined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"JoiningFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ITrueFiPoolOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseStatus\",\"type\":\"bool\"}],\"name\":\"PauseStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Pulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISAFU\",\"name\":\"newSafu\",\"type\":\"address\"}],\"name\":\"SafuChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ITrueStrategy\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"name\":\"StrategySwitched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOLERATED_SLIPPAGE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOLERATED_STRATEGY_LOSS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"averageExitPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditAgency\",\"outputs\":[{\"internalType\":\"contract ITrueCreditAgency\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deficitValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flush\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract ITrueLender2\",\"name\":\"_lender\",\"type\":\"address\"},{\"internalType\":\"contract ISAFU\",\"name\":\"_safu\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"integrateAtPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joiningFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lender\",\"outputs\":[{\"internalType\":\"contract ITrueLender2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"liquidExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"liquidExitPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILoanToken2\",\"name\":\"loan\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loansValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ITrueFiPoolOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"proFormaLiquidRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokenAmount\",\"type\":\"uint256\"}],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILoanToken2\",\"name\":\"loan\",\"type\":\"address\"}],\"name\":\"reclaimDeficit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safu\",\"outputs\":[{\"internalType\":\"contract ISAFU\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITrueCreditAgency\",\"name\":\"_creditAgency\",\"type\":\"address\"}],\"name\":\"setCreditAgency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setJoiningFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITrueFiPoolOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setPauseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISAFU\",\"name\":\"_safu\",\"type\":\"address\"}],\"name\":\"setSafuAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract ITrueLender2\",\"name\":\"_lender\",\"type\":\"address\"},{\"internalType\":\"contract ISAFU\",\"name\":\"_safu\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"borrowerName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"borrowerSymbol\",\"type\":\"string\"}],\"name\":\"singleBorrowerInitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract ITrueStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITrueStrategy\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"name\":\"switchStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TrueFiPool2","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}