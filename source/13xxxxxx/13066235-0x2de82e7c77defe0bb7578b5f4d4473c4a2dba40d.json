{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/HodlFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport {Create2} from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Spawn} from \\\"../packages/Spawn.sol\\\";\\nimport {IERC20WithDetail} from \\\"../interfaces/IERC20WithDetail.sol\\\";\\nimport {IHodlERC20} from \\\"../interfaces/IHodlERC20.sol\\\";\\n\\n/**\\n * @title HodlSpawner\\n * @notice This contract spawns and initializes eip-1167 minimal proxies that\\n * point to existing logic contracts.\\n * @notice This contract was modified from Spawner.sol\\n * https://github.com/0age/Spawner/blob/master/contracts/Spawner.sol to fit into our factory\\n */\\ncontract HodlSpawner {\\n  // fixed salt value because we will only deploy an Hodl pool with the same init value once\\n  bytes32 private constant SALT = bytes32(0);\\n\\n  /**\\n   * @notice internal function for spawning an eip-1167 minimal proxy using `CREATE2`\\n   * @param logicContract address of the logic contract\\n   * @param initializationCalldata calldata that will be supplied to the `DELEGATECALL`\\n   * from the spawned contract to the logic contract during contract creation\\n   * @return spawnedContract the address of the newly-spawned contract\\n   */\\n  function _spawn(address logicContract, bytes memory initializationCalldata) internal returns (address) {\\n    // place the creation code and constructor args of the contract to spawn in memory\\n    bytes memory initCode = abi.encodePacked(\\n      type(Spawn).creationCode,\\n      abi.encode(logicContract, initializationCalldata)\\n    );\\n\\n    // spawn the contract using `CREATE2`\\n    return Create2.deploy(0, SALT, initCode);\\n  }\\n\\n  /**\\n   * @notice internal view function for finding the address of the standard\\n   * eip-1167 minimal proxy created using `CREATE2` with a given logic contract\\n   * and initialization calldata payload\\n   * @param logicContract address of the logic contract\\n   * @param initializationCalldata calldata that will be supplied to the `DELEGATECALL`\\n   * from the spawned contract to the logic contract during contract creation\\n   * @return target address of the next spawned minimal proxy contract with the\\n   * given parameters.\\n   */\\n  function _computeAddress(address logicContract, bytes memory initializationCalldata)\\n    internal\\n    view\\n    returns (address target)\\n  {\\n    // place the creation code and constructor args of the contract to spawn in memory\\n    bytes memory initCode = abi.encodePacked(\\n      type(Spawn).creationCode,\\n      abi.encode(logicContract, initializationCalldata)\\n    );\\n    // get target address using the constructed initialization code\\n    bytes32 initCodeHash = keccak256(initCode);\\n\\n    target = Create2.computeAddress(SALT, initCodeHash);\\n  }\\n}\\n\\n/**\\n * @title A factory to create hToken\\n * @notice Create new hToken and keep track of all hToken addresses\\n * @dev Calculate contract address before each creation with CREATE2\\n * and deploy eip-1167 minimal proxies for the logic contract\\n */\\ncontract HodlFactory is HodlSpawner, Ownable {\\n  /// @dev mapping from parameters hash to its deployed address\\n  mapping(bytes32 => address) private _idToAddress;\\n\\n  /// @dev if the address is a valid hToken deployed by this factory\\n  mapping(address => bool) private _isValidHToken;\\n\\n  /// @dev mapping of whitelisted asset to prevent people from creating hodling competition with malicious ERC20.\\n  mapping(address => bool) public isWhitelistAsset;\\n\\n  address implementation;\\n\\n  constructor(address _implementation) {\\n    require(_implementation != address(0), \\\"INVALID_IMPL\\\");\\n    implementation = _implementation;\\n  }\\n\\n  event AssetWhitelisted(address asset, bool whitelisted);\\n\\n  /// @notice emitted when the factory creates a new hToken \\\"barrel\\\"\\n  event HodlCreated(\\n    address contractAddress,\\n    address indexed token,\\n    uint256 indexed penalty,\\n    uint256 lockWindow,\\n    uint256 indexed expiry,\\n    uint256 feePortion,\\n    uint256 n,\\n    address feeRecipient,\\n    address creator,\\n    address bonusToken\\n  );\\n\\n  /**\\n   * @dev owner only function to whitelist or un-whitelist an asset.\\n   * the owner should be a governance module\\n   */\\n  function whitelistAsset(address _asset, bool _isWhitelist) external onlyOwner {\\n    isWhitelistAsset[_asset] = _isWhitelist;\\n    emit AssetWhitelisted(_asset, _isWhitelist);\\n  }\\n\\n  /**\\n   * @notice create new HodlERC20 proxy\\n   * @dev deploy an eip-1167 minimal proxy with CREATE2 and register it to the whitelist module\\n   * @param _token token to hold\\n   * @param _penalty penalty 1 out of 1000\\n   * @param _lockWindow duration locked before expiry\\n   * @param _expiry expiry timestamp\\n   * @param _fee fee out of every 1000 penalty\\n   * @param _feeRecipient address that collect fees\\n   * @param _bonusToken extra reward token (optional, set to zero address if using just the base token)\\n   * @return newHodl newly deployed contract address\\n   */\\n  function createHodlERC20(\\n    address _token,\\n    uint256 _penalty,\\n    uint256 _lockWindow,\\n    uint256 _expiry,\\n    uint256 _fee,\\n    uint256 _n,\\n    address _feeRecipient,\\n    address _bonusToken\\n  ) external returns (address newHodl) {\\n    bytes32 id = _getHodlId(_token, _penalty, _lockWindow, _expiry, _fee, _n, _feeRecipient, _bonusToken);\\n    require(_idToAddress[id] == address(0), \\\"CREATED\\\");\\n    require(isWhitelistAsset[_token], \\\"NOT_WHITELISTED\\\");\\n    require(_bonusToken == address(0) || isWhitelistAsset[_bonusToken], \\\"NOT_WHITELISTED\\\");\\n    string memory name;\\n    string memory symbol;\\n\\n    {\\n      // create another scope to avoid stack-too-deep error\\n      IERC20WithDetail token = IERC20WithDetail(_token);\\n      string memory tokenName = token.name();\\n      name = _concat(\\\"Hodl\\\", tokenName);\\n\\n      string memory tokenSymbol = token.symbol();\\n      symbol = _concat(\\\"h\\\", tokenSymbol);\\n    }\\n\\n    bytes memory initializationCalldata = abi.encodeWithSelector(\\n      IHodlERC20(implementation).init.selector,\\n      _token,\\n      _penalty,\\n      _lockWindow,\\n      _expiry,\\n      _fee,\\n      _n,\\n      _feeRecipient,\\n      name,\\n      symbol,\\n      _bonusToken\\n    );\\n\\n    newHodl = _spawn(implementation, initializationCalldata);\\n\\n    _isValidHToken[newHodl] = true;\\n    _idToAddress[id] = newHodl;\\n\\n    emit HodlCreated(newHodl, _token, _penalty, _lockWindow, _expiry, _fee, _n, _feeRecipient, msg.sender, _bonusToken);\\n\\n    return newHodl;\\n  }\\n\\n  /**\\n   * @notice if no hToken has been created with these parameters, it will return address(0)\\n   * @param _token token to hold\\n   * @param _penalty penalty 1 out of 1000\\n   * @param _lockWindow duration locked before expiry\\n   * @param _expiry expiry timestamp\\n   * @param _fee fee out of every 1000 penalty\\n   * @param _feeRecipient address that collects fees\\n   * @param _bonusToken extra token for donations\\n   * @return\\n   */\\n  function getCreatedHToken(\\n    address _token,\\n    uint256 _penalty,\\n    uint256 _lockWindow,\\n    uint256 _expiry,\\n    uint256 _fee,\\n    uint256 _n,\\n    address _feeRecipient,\\n    address _bonusToken\\n  ) external view returns (address) {\\n    bytes32 id = _getHodlId(_token, _penalty, _lockWindow, _expiry, _fee, _n, _feeRecipient, _bonusToken);\\n    return _idToAddress[id];\\n  }\\n\\n  /**\\n   * @notice get the address at which a new hToken with these parameters would be deployed\\n   * @dev return the exact address that will be deployed at with _computeAddress\\n   * @param _token token to hold\\n   * @param _penalty penalty 1 out of 1000\\n   * @param _lockWindow duration locked before expiry\\n   * @param _expiry expiry timestamp\\n   * @param _fee fee out of every 1000 penalty\\n   * @param _feeRecipient address that collect fees\\n   * @param _bonusToken extra token for donations\\n   * @return\\n   */\\n  function getTargetHTokenAddress(\\n    address _token,\\n    uint256 _penalty,\\n    uint256 _lockWindow,\\n    uint256 _expiry,\\n    uint256 _fee,\\n    uint256 _n,\\n    address _feeRecipient,\\n    address _bonusToken\\n  ) external view returns (address) {\\n    address _implementation = implementation;\\n    string memory name;\\n    string memory symbol;\\n\\n    // create another scope to avoid stack-too-deep error\\n    {\\n      IERC20WithDetail token = IERC20WithDetail(_token);\\n      string memory tokenName = token.name();\\n      name = _concat(\\\"Hodl\\\", tokenName);\\n\\n      string memory tokenSymbol = token.symbol();\\n      symbol = _concat(\\\"h\\\", tokenSymbol);\\n    }\\n\\n    bytes memory initializationCalldata = abi.encodeWithSelector(\\n      IHodlERC20(_implementation).init.selector,\\n      _token,\\n      _penalty,\\n      _lockWindow,\\n      _expiry,\\n      _fee,\\n      _n,\\n      _feeRecipient,\\n      name,\\n      symbol,\\n      _bonusToken\\n    );\\n    return _computeAddress(_implementation, initializationCalldata);\\n  }\\n\\n  /**\\n   * @dev hash parameters and get a unique hToken id\\n   * @param _token token to hold\\n   * @param _penalty penalty 1 out of 1000\\n   * @param _lockWindow duration locked before expiry\\n   * @param _expiry expiry timestamp\\n   * @param _fee fee out of every 1000 penalty\\n   * @param _feeRecipient address that collect fees\\n   * @param _bonusToken extra token for donations\\n   * @return id the unique id of an hToken\\n   */\\n  function _getHodlId(\\n    address _token,\\n    uint256 _penalty,\\n    uint256 _lockWindow,\\n    uint256 _expiry,\\n    uint256 _fee,\\n    uint256 _n,\\n    address _feeRecipient,\\n    address _bonusToken\\n  ) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_token, _penalty, _lockWindow, _expiry, _fee, _n, _feeRecipient, _bonusToken));\\n  }\\n\\n  function _concat(string memory a, string memory b) internal pure returns (string memory) {\\n    return string(abi.encodePacked(a, b));\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Create2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint256(_data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/packages/Spawn.sol\": {\r\n      \"content\": \"/* This contract is copied from Spawner package: https://github.com/0age/Spawner */\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title Spawn\\n * @author 0age\\n * @notice This contract provides creation code that is used by Spawner in order\\n * to initialize and deploy eip-1167 minimal proxies for a given logic contract.\\n * SPDX-License-Identifier: MIT\\n */\\ncontract Spawn {\\n  constructor(address logicContract, bytes memory initializationCalldata) payable {\\n    // delegatecall into the logic contract to perform initialization.\\n    (bool ok, ) = logicContract.delegatecall(initializationCalldata);\\n    if (!ok) {\\n      // pass along failure message from delegatecall and revert.\\n      assembly {\\n        returndatacopy(0, 0, returndatasize())\\n        revert(0, returndatasize())\\n      }\\n    }\\n\\n    // place eip-1167 runtime code in memory.\\n    bytes memory runtimeCode = abi.encodePacked(\\n      bytes10(0x363d3d373d3d3d363d73),\\n      logicContract,\\n      bytes15(0x5af43d82803e903d91602b57fd5bf3)\\n    );\\n\\n    // return eip-1167 code to write it to spawned contract runtime.\\n    assembly {\\n      return(add(0x20, runtimeCode), 45) // eip-1167 runtime code, length\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20WithDetail.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20WithDetail is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHodlERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\ninterface IHodlERC20 {\\n  function init(\\n    address _token,\\n    uint256 _penalty,\\n    uint256 _lockWindow,\\n    uint256 _expiry,\\n    uint256 _fee,\\n    uint256 _n,\\n    address _feeRecipient,\\n    string memory _name,\\n    string memory _symbol,\\n    address _bonusToken\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"AssetWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockWindow\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePortion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bonusToken\",\"type\":\"address\"}],\"name\":\"HodlCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_penalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bonusToken\",\"type\":\"address\"}],\"name\":\"createHodlERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newHodl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_penalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bonusToken\",\"type\":\"address\"}],\"name\":\"getCreatedHToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_penalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bonusToken\",\"type\":\"address\"}],\"name\":\"getTargetHTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelistAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelist\",\"type\":\"bool\"}],\"name\":\"whitelistAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HodlFactory","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000073098340df7ee29fa4f0965159d91a5b17dd0261","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}