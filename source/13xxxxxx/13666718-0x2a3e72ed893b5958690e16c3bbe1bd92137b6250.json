{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/transfers/SignatureVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"./AggregatorBase.sol\\\";\\nimport \\\"../interfaces/ISignatureVerifier.sol\\\";\\nimport \\\"../libraries/SignatureUtil.sol\\\";\\n\\ncontract SignatureVerifier is AggregatorBase, ISignatureVerifier {\\n    using SignatureUtil for bytes;\\n    using SignatureUtil for bytes32;\\n\\n    /* ========== STATE VARIABLES ========== */\\n    /// @dev Number of required confirmations per block after the extra check is enabled\\n    uint8 public confirmationThreshold;\\n    /// @dev submissions count in current block\\n    uint40 public submissionsInBlock;\\n    /// @dev Current block\\n    uint40 public currentBlock;\\n\\n    /// @dev Debridge gate address\\n    address public debridgeAddress;\\n\\n    /* ========== ERRORS ========== */\\n\\n    error NotConfirmedByRequiredOracles();\\n    error NotConfirmedThreshold();\\n    error SubmissionNotConfirmed();\\n    error DuplicateSignatures();\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyDeBridgeGate() {\\n        if (msg.sender != debridgeAddress) revert DeBridgeGateBadRole();\\n        _;\\n    }\\n\\n    /* ========== CONSTRUCTOR  ========== */\\n\\n    /// @dev Constructor that initializes the most important configurations.\\n    /// @param _minConfirmations Common confirmations count.\\n    /// @param _confirmationThreshold Confirmations per block after the extra check is enabled.\\n    /// @param _excessConfirmations Confirmations count in case of excess activity.\\n    function initialize(\\n        uint8 _minConfirmations,\\n        uint8 _confirmationThreshold,\\n        uint8 _excessConfirmations,\\n        address _debridgeAddress\\n    ) public initializer {\\n        AggregatorBase.initializeBase(_minConfirmations, _excessConfirmations);\\n        confirmationThreshold = _confirmationThreshold;\\n        debridgeAddress = _debridgeAddress;\\n    }\\n\\n\\n    /// @inheritdoc ISignatureVerifier\\n    function submit(\\n        bytes32 _submissionId,\\n        bytes memory _signatures,\\n        uint8 _excessConfirmations\\n    ) external override onlyDeBridgeGate {\\n        //Need confirmation to confirm submission\\n        uint8 needConfirmations = _excessConfirmations > minConfirmations\\n        ? _excessConfirmations\\n        : minConfirmations;\\n        // Count of required(DSRM) oracles confirmation\\n        uint256 currentRequiredOraclesCount;\\n        // stack variable to aggregate confirmations and write to storage once\\n        uint8 confirmations;\\n        uint256 signaturesCount = _countSignatures(_signatures);\\n        address[] memory validators = new address[](signaturesCount);\\n        for (uint256 i = 0; i < signaturesCount; i++) {\\n            (bytes32 r, bytes32 s, uint8 v) = _signatures.parseSignature(i * 65);\\n            address oracle = ecrecover(_submissionId.getUnsignedMsg(), v, r, s);\\n            if (getOracleInfo[oracle].isValid) {\\n                for (uint256 k = 0; k < i; k++) {\\n                    if (validators[k] == oracle) revert DuplicateSignatures();\\n                }\\n                validators[i] = oracle;\\n\\n                confirmations += 1;\\n                emit Confirmed(_submissionId, oracle);\\n                if (getOracleInfo[oracle].required) {\\n                    currentRequiredOraclesCount += 1;\\n                }\\n                if (\\n                    confirmations >= needConfirmations &&\\n                    currentRequiredOraclesCount >= requiredOraclesCount\\n                ) {\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if (currentRequiredOraclesCount != requiredOraclesCount)\\n            revert NotConfirmedByRequiredOracles();\\n\\n        if (confirmations >= minConfirmations) {\\n            if (currentBlock == uint40(block.number)) {\\n                submissionsInBlock += 1;\\n            } else {\\n                currentBlock = uint40(block.number);\\n                submissionsInBlock = 1;\\n            }\\n            emit SubmissionApproved(_submissionId);\\n        }\\n\\n        if (submissionsInBlock > confirmationThreshold) {\\n            if (confirmations < excessConfirmations) revert NotConfirmedThreshold();\\n        }\\n\\n        if (confirmations < needConfirmations) revert SubmissionNotConfirmed();\\n    }\\n\\n    /* ========== ADMIN ========== */\\n\\n    /// @dev Sets minimal required confirmations.\\n    /// @param _confirmationThreshold Confirmation info.\\n    function setThreshold(uint8 _confirmationThreshold) external onlyAdmin {\\n        if (_confirmationThreshold == 0) revert WrongArgument();\\n        confirmationThreshold = _confirmationThreshold;\\n    }\\n\\n    /// @dev Sets core debridge conrtact address.\\n    /// @param _debridgeAddress Debridge address.\\n    function setDebridgeAddress(address _debridgeAddress) external onlyAdmin {\\n        debridgeAddress = _debridgeAddress;\\n    }\\n\\n    /* ========== VIEW ========== */\\n\\n    /// @dev Check is valid signature\\n    /// @param _submissionId Submission identifier.\\n    /// @param _signature signature by oracle.\\n    function isValidSignature(bytes32 _submissionId, bytes memory _signature)\\n    external\\n    view\\n    returns (bool)\\n    {\\n        (bytes32 r, bytes32 s, uint8 v) = _signature.splitSignature();\\n        address oracle = ecrecover(_submissionId.getUnsignedMsg(), v, r, s);\\n        return getOracleInfo[oracle].isValid;\\n    }\\n\\n    /* ========== INTERNAL ========== */\\n\\n    function _countSignatures(bytes memory _signatures) internal pure returns (uint256) {\\n        return _signatures.length % 65 == 0 ? _signatures.length / 65 : 0;\\n    }\\n\\n    // ============ Version Control ============\\n    /// @dev Get this contract's version\\n    function version() external pure returns (uint256) {\\n        return 101; // 1.0.1\\n    }\\n}\"\r\n    },\r\n    \"contracts/transfers/AggregatorBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"../interfaces/IAggregatorBase.sol\\\";\\n\\ncontract AggregatorBase is Initializable, AccessControlUpgradeable, IAggregatorBase {\\n    /* ========== STATE VARIABLES ========== */\\n\\n    uint8 public minConfirmations; // minimal required confirmations\\n    uint8 public excessConfirmations; // minimal required confirmations in case of too many confirmations\\n    uint8 public requiredOraclesCount; // count of required oracles\\n\\n    address[] public oracleAddresses;\\n    mapping(address => OracleInfo) public getOracleInfo; // oracle address => oracle details\\n\\n    /* ========== ERRORS ========== */\\n\\n    error AdminBadRole();\\n    error OracleBadRole();\\n    error DeBridgeGateBadRole();\\n\\n\\n    error OracleAlreadyExist();\\n    error OracleNotFound();\\n\\n    error WrongArgument();\\n    error LowMinConfirmations();\\n\\n    error SubmittedAlready();\\n\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyAdmin() {\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\\n        _;\\n    }\\n    modifier onlyOracle() {\\n        if (!getOracleInfo[msg.sender].isValid) revert OracleBadRole();\\n        _;\\n    }\\n\\n    /* ========== CONSTRUCTOR  ========== */\\n\\n    /// @dev Constructor that initializes the most important configurations.\\n    /// @param _minConfirmations Common confirmations count.\\n    function initializeBase(uint8 _minConfirmations, uint8 _excessConfirmations) internal {\\n        if (_minConfirmations == 0 || _excessConfirmations < _minConfirmations) revert LowMinConfirmations();\\n        minConfirmations = _minConfirmations;\\n        excessConfirmations = _excessConfirmations;\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /* ========== ADMIN ========== */\\n\\n    /// @dev Sets minimal required confirmations.\\n    /// @param _minConfirmations Confirmation info.\\n    function setMinConfirmations(uint8 _minConfirmations) external onlyAdmin {\\n        if (_minConfirmations < oracleAddresses.length / 2 + 1) revert LowMinConfirmations();\\n        minConfirmations = _minConfirmations;\\n    }\\n\\n    /// @dev Sets minimal required confirmations.\\n    /// @param _excessConfirmations new excessConfirmations count.\\n    function setExcessConfirmations(uint8 _excessConfirmations) external onlyAdmin {\\n        if (_excessConfirmations < minConfirmations) revert LowMinConfirmations();\\n        excessConfirmations = _excessConfirmations;\\n    }\\n\\n    /// @dev Add oracle.\\n    /// @param _oracles Oracles addresses.\\n    /// @param _required Without this oracle, the transfer will not be confirmed\\n    function addOracles(\\n        address[] memory _oracles,\\n        bool[] memory _required\\n    ) external onlyAdmin {\\n        if (_oracles.length != _required.length) revert WrongArgument();\\n        if (minConfirmations < (oracleAddresses.length +  _oracles.length) / 2 + 1) revert LowMinConfirmations();\\n\\n        for (uint256 i = 0; i < _oracles.length; i++) {\\n            OracleInfo storage oracleInfo = getOracleInfo[_oracles[i]];\\n            if (oracleInfo.exist) revert OracleAlreadyExist();\\n\\n            oracleAddresses.push(_oracles[i]);\\n\\n            if (_required[i]) {\\n                requiredOraclesCount += 1;\\n            }\\n\\n            oracleInfo.exist = true;\\n            oracleInfo.isValid = true;\\n            oracleInfo.required = _required[i];\\n\\n            emit AddOracle(_oracles[i], _required[i]);\\n        }\\n    }\\n\\n    /// @dev Update oracle.\\n    /// @param _oracle Oracle address.\\n    /// @param _isValid is valid oracle\\n    /// @param _required Without this oracle, the transfer will not be confirmed\\n    function updateOracle(\\n        address _oracle,\\n        bool _isValid,\\n        bool _required\\n    ) external onlyAdmin {\\n        //If oracle is invalid, it must be not required\\n        if (!_isValid && _required) revert WrongArgument();\\n\\n        OracleInfo storage oracleInfo = getOracleInfo[_oracle];\\n        if (!oracleInfo.exist) revert OracleNotFound();\\n\\n        if (oracleInfo.required && !_required) {\\n            requiredOraclesCount -= 1;\\n        } else if (!oracleInfo.required && _required) {\\n            requiredOraclesCount += 1;\\n        }\\n        if (oracleInfo.isValid && !_isValid) {\\n            // remove oracle from oracleAddresses array without keeping an order\\n            for (uint256 i = 0; i < oracleAddresses.length; i++) {\\n                if (oracleAddresses[i] == _oracle) {\\n                    oracleAddresses[i] = oracleAddresses[oracleAddresses.length - 1];\\n                    oracleAddresses.pop();\\n                    break;\\n                }\\n            }\\n        } else if (!oracleInfo.isValid && _isValid) {\\n            if (minConfirmations < (oracleAddresses.length + 1) / 2 + 1) revert LowMinConfirmations();\\n            oracleAddresses.push(_oracle);\\n        }\\n        oracleInfo.isValid = _isValid;\\n        oracleInfo.required = _required;\\n        emit UpdateOracle(_oracle, _required, _isValid);\\n    }\\n\\n\\n    /* ========== VIEW ========== */\\n\\n    /// @dev Calculates asset identifier.\\n    function getDeployId(\\n        bytes32 _debridgeId,\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_debridgeId, _name, _symbol, _decimals));\\n    }\\n\\n    /// @dev Calculates asset identifier.\\n    /// @param _chainId Current chain id.\\n    /// @param _tokenAddress Address of the asset on the other chain.\\n    function getDebridgeId(uint256 _chainId, bytes memory _tokenAddress)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(_chainId, _tokenAddress));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISignatureVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface ISignatureVerifier {\\n\\n    /* ========== EVENTS ========== */\\n\\n    /// @dev Emitted once the submission is confirmed by one oracle.\\n    event Confirmed(bytes32 submissionId, address operator);\\n    /// @dev Emitted once the submission is confirmed by min required amount of oracles.\\n    event DeployConfirmed(bytes32 deployId, address operator);\\n\\n    /* ========== FUNCTIONS ========== */\\n\\n    /// @dev Check confirmation (validate signatures) for the transfer request.\\n    /// @param _submissionId Submission identifier.\\n    /// @param _signatures Array of signatures by oracles.\\n    /// @param _excessConfirmations override min confirmations count\\n    function submit(\\n        bytes32 _submissionId,\\n        bytes memory _signatures,\\n        uint8 _excessConfirmations\\n    ) external;\\n\\n}\"\r\n    },\r\n    \"contracts/libraries/SignatureUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nlibrary SignatureUtil {\\n    /* ========== ERRORS ========== */\\n\\n    error WrongArgumentLength();\\n    error SignatureInvalidLength();\\n    error SignatureInvalidV();\\n\\n    /// @dev Prepares raw msg that was signed by the oracle.\\n    /// @param _submissionId Submission identifier.\\n    function getUnsignedMsg(bytes32 _submissionId) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _submissionId));\\n    }\\n\\n    /// @dev Splits signature bytes to r,s,v components.\\n    /// @param _signature Signature bytes in format r+s+v.\\n    function splitSignature(bytes memory _signature)\\n        internal\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        if (_signature.length != 65) revert SignatureInvalidLength();\\n        return parseSignature(_signature, 0);\\n    }\\n\\n    function parseSignature(bytes memory _signatures, uint256 offset)\\n        internal\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        assembly {\\n            r := mload(add(_signatures, add(32, offset)))\\n            s := mload(add(_signatures, add(64, offset)))\\n            v := and(mload(add(_signatures, add(65, offset))), 0xff)\\n        }\\n\\n        if (v < 27) v += 27;\\n        if (v != 27 && v != 28) revert SignatureInvalidV();\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _offset)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        if (_bytes.length < _offset + 32) revert WrongArgumentLength();\\n\\n        assembly {\\n            result := mload(add(add(_bytes, 0x20), _offset))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAggregatorBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IAggregatorBase {\\n    /* ========== STRUCTS ========== */\\n\\n    struct OracleInfo {\\n        bool exist; // exist oracle\\n        bool isValid; // is valid oracle\\n        bool required; // without this oracle (DSRM), the transfer will not be confirmed\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event AddOracle(address oracle, bool required); // add oracle by admin\\n    event UpdateOracle(address oracle, bool required, bool isValid); // update oracle by admin\\n    event DeployApproved(bytes32 deployId); // emitted once the submission is confirmed by min required aount of oracles\\n    event SubmissionApproved(bytes32 submissionId); // emitted once the submission is confirmed by min required aount of oracles\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"AdminBadRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeBridgeGateBadRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LowMinConfirmations\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotConfirmedByRequiredOracles\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotConfirmedThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleAlreadyExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleBadRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureInvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureInvalidV\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmissionNotConfirmed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmittedAlready\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongArgument\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"required\",\"type\":\"bool\"}],\"name\":\"AddOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"submissionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"Confirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"deployId\",\"type\":\"bytes32\"}],\"name\":\"DeployApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"deployId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"DeployConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"submissionId\",\"type\":\"bytes32\"}],\"name\":\"SubmissionApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"required\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"UpdateOracle\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_required\",\"type\":\"bool[]\"}],\"name\":\"addOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmationThreshold\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBlock\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excessConfirmations\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_tokenAddress\",\"type\":\"bytes\"}],\"name\":\"getDebridgeId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_debridgeId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"getDeployId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getOracleInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"required\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_minConfirmations\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_confirmationThreshold\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_excessConfirmations\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_debridgeAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_submissionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minConfirmations\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracleAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredOraclesCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_debridgeAddress\",\"type\":\"address\"}],\"name\":\"setDebridgeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_excessConfirmations\",\"type\":\"uint8\"}],\"name\":\"setExcessConfirmations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_minConfirmations\",\"type\":\"uint8\"}],\"name\":\"setMinConfirmations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_confirmationThreshold\",\"type\":\"uint8\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submissionsInBlock\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_submissionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_excessConfirmations\",\"type\":\"uint8\"}],\"name\":\"submit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isValid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_required\",\"type\":\"bool\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"SignatureVerifier","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}