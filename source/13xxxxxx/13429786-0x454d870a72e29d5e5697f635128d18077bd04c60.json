{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/gas/GovernanceGasUpgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { GovernanceVaultUpgrade } from \\\"../vault/GovernanceVaultUpgrade.sol\\\";\\nimport { GasCompensator } from \\\"./GasCompensator.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\n\\n/**\\n * @notice This contract should upgrade governance to be able to compensate gas for certain actions.\\n *         These actions are set to castVote, castDelegatedVote in this contract.\\n * */\\ncontract GovernanceGasUpgrade is GovernanceVaultUpgrade, GasCompensator {\\n  /**\\n   * @notice constructor\\n   * @param _gasCompLogic gas compensation vault address\\n   * @param _userVault tornado vault address\\n   * */\\n  constructor(address _gasCompLogic, address _userVault)\\n    public\\n    GovernanceVaultUpgrade(_userVault)\\n    GasCompensator(_gasCompLogic)\\n  {}\\n\\n  /// @notice check that msg.sender is multisig\\n  modifier onlyMultisig() {\\n    require(msg.sender == returnMultisigAddress(), \\\"only multisig\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice receive ether function, does nothing but receive ether\\n   * */\\n  receive() external payable {}\\n\\n  /**\\n   * @notice function to add a certain amount of ether for gas compensations\\n   * @dev send ether is used in the logic as we don't expect multisig to make a reentrancy attack on governance\\n   * @param gasCompensationsLimit the amount of gas to be compensated\\n   * */\\n  function setGasCompensations(uint256 gasCompensationsLimit) external virtual override onlyMultisig {\\n    require(payable(address(gasCompensationVault)).send(Math.min(gasCompensationsLimit, address(this).balance)));\\n  }\\n\\n  /**\\n   * @notice function to withdraw funds from the gas compensator\\n   * @dev send ether is used in the logic as we don't expect multisig to make a reentrancy attack on governance\\n   * @param amount the amount of ether to withdraw\\n   * */\\n  function withdrawFromHelper(uint256 amount) external virtual override onlyMultisig {\\n    gasCompensationVault.withdrawToGovernance(amount);\\n  }\\n\\n  /**\\n  * @notice function to cast callers votes on a proposal\\n  * @dev IMPORTANT: This function uses the gasCompensation modifier.\\n  *                 as such this function can trigger a payable fallback.\\n                    It is not possible to vote without revert more than once,\\n\\t\\t    without hasAccountVoted being true, eliminating gas refunds in this case.\\n\\t\\t    Gas compensation is also using the low level send(), forwarding 23000 gas \\n\\t\\t    as to disallow further logic execution above that threshold.\\n  * @param proposalId id of proposal account is voting on\\n  * @param support true if yes false if no\\n  * */\\n  function castVote(uint256 proposalId, bool support)\\n    external\\n    virtual\\n    override\\n    gasCompensation(\\n      msg.sender,\\n      !hasAccountVoted(proposalId, msg.sender) && !checkIfQuorumReached(proposalId),\\n      (msg.sender == tx.origin ? 21e3 : 0)\\n    )\\n  {\\n    _castVote(msg.sender, proposalId, support);\\n  }\\n\\n  /**\\n   * @notice function to cast callers votes and votes delegated to the caller\\n   * @param from array of addresses that should have delegated to voter\\n   * @param proposalId id of proposal account is voting on\\n   * @param support true if yes false if no\\n   * */\\n  function castDelegatedVote(\\n    address[] memory from,\\n    uint256 proposalId,\\n    bool support\\n  ) external virtual override {\\n    require(from.length > 0, \\\"Can not be empty\\\");\\n    _castDelegatedVote(from, proposalId, support, !hasAccountVoted(proposalId, msg.sender) && !checkIfQuorumReached(proposalId));\\n  }\\n\\n  /// @notice checker for success on deployment\\n  /// @return returns precise version of governance\\n  function version() external pure virtual override returns (string memory) {\\n    return \\\"2.lottery-and-gas-upgrade\\\";\\n  }\\n\\n  /**\\n   * @notice function to check if quorum has been reached on a given proposal\\n   * @param proposalId id of proposal\\n   * @return true if quorum has been reached\\n   * */\\n  function checkIfQuorumReached(uint256 proposalId) public view returns (bool) {\\n    return (proposals[proposalId].forVotes + proposals[proposalId].againstVotes >= QUORUM_VOTES);\\n  }\\n\\n  /**\\n   * @notice function to check if account has voted on a proposal\\n   * @param proposalId id of proposal account should have voted on\\n   * @param account address of the account\\n   * @return true if acc has voted\\n   * */\\n  function hasAccountVoted(uint256 proposalId, address account) public view returns (bool) {\\n    return proposals[proposalId].receipts[account].hasVoted;\\n  }\\n\\n  /**\\n   * @notice function to retrieve the multisig address\\n   * @dev reasoning: if multisig changes we need governance to approve the next multisig address,\\n   *                 so simply inherit in a governance upgrade from this function and set the new address\\n   * @return the multisig address\\n   * */\\n  function returnMultisigAddress() public pure virtual returns (address) {\\n    return 0xb04E030140b30C27bcdfaafFFA98C57d80eDa7B4;\\n  }\\n\\n  /**\\n   * @notice This should handle the logic of the external function\\n   * @dev IMPORTANT: This function uses the gasCompensation modifier.\\n   *                 as such this function can trigger a payable fallback.\\n   *                 It is not possible to vote without revert more than once,\\n   *        \\t     without hasAccountVoted being true, eliminating gas refunds in this case.\\n   *      \\t     Gas compensation is also using the low level send(), forwarding 23000 gas\\n   *   \\t\\t     as to disallow further logic execution above that threshold.\\n   * @param from array of addresses that should have delegated to voter\\n   * @param proposalId id of proposal account is voting on\\n   * @param support true if yes false if no\\n   * @param gasCompensated true if gas should be compensated (given all internal checks pass)\\n   * */\\n  function _castDelegatedVote(\\n    address[] memory from,\\n    uint256 proposalId,\\n    bool support,\\n    bool gasCompensated\\n  ) internal gasCompensation(msg.sender, gasCompensated, (msg.sender == tx.origin ? 21e3 : 0)) {\\n    for (uint256 i = 0; i < from.length; i++) {\\n      address delegator = from[i];\\n      require(delegatedTo[delegator] == msg.sender || delegator == msg.sender, \\\"Governance: not authorized\\\");\\n      require(!gasCompensated || !hasAccountVoted(proposalId, delegator), \\\"Governance: voted already\\\");\\n      _castVote(delegator, proposalId, support);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/vault/GovernanceVaultUpgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { Governance } from \\\"tornado-governance/contracts/Governance.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { ITornadoVault } from \\\"../interfaces/ITornadoVault.sol\\\";\\n\\n/// @title Version 2 Governance contract of the tornado.cash governance\\ncontract GovernanceVaultUpgrade is Governance {\\n  using SafeMath for uint256;\\n\\n  // vault which stores user TORN\\n  ITornadoVault public immutable userVault;\\n\\n  // call Governance v1 constructor\\n  constructor(address _userVault) public Governance() {\\n    userVault = ITornadoVault(_userVault);\\n  }\\n\\n  /// @notice Withdraws TORN from governance if conditions permit\\n  /// @param amount the amount of TORN to withdraw\\n  function unlock(uint256 amount) public virtual override {\\n    require(getBlockTimestamp() > canWithdrawAfter[msg.sender], \\\"Governance: tokens are locked\\\");\\n    lockedBalance[msg.sender] = lockedBalance[msg.sender].sub(amount, \\\"Governance: insufficient balance\\\");\\n    userVault.withdrawTorn(msg.sender, amount);\\n  }\\n\\n  /// @notice checker for success on deployment\\n  /// @return returns precise version of governance\\n  function version() external pure virtual returns (string memory) {\\n    return \\\"2.vault-migration\\\";\\n  }\\n\\n  /// @notice transfers tokens from the contract to the vault, withdrawals are unlock()\\n  /// @param owner account/contract which (this) spender will send to the user vault\\n  /// @param amount amount which spender will send to the user vault\\n  function _transferTokens(address owner, uint256 amount) internal virtual override {\\n    require(torn.transferFrom(owner, address(userVault), amount), \\\"TORN: transferFrom failed\\\");\\n    lockedBalance[owner] = lockedBalance[owner].add(amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/gas/GasCompensator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ninterface IGasCompensationVault {\\n  function compensateGas(address recipient, uint256 gasAmount) external;\\n\\n  function withdrawToGovernance(uint256 amount) external;\\n}\\n\\n/**\\n * @notice This abstract contract is used to add gas compensation functionality to a contract.\\n * */\\nabstract contract GasCompensator {\\n  using SafeMath for uint256;\\n\\n  /// @notice this vault is necessary for the gas compensation functionality to work\\n  IGasCompensationVault public immutable gasCompensationVault;\\n\\n  constructor(address _gasCompensationVault) public {\\n    gasCompensationVault = IGasCompensationVault(_gasCompensationVault);\\n  }\\n\\n  /**\\n   * @notice modifier which should compensate gas to account if eligible\\n   * @dev Consider reentrancy, repeated calling of the function being compensated, eligibility.\\n   * @param account address to be compensated\\n   * @param eligible if the account is eligible for compensations or not\\n   * @param extra extra amount in gas to be compensated, will be multiplied by basefee\\n   * */\\n  modifier gasCompensation(\\n    address account,\\n    bool eligible,\\n    uint256 extra\\n  ) {\\n    if (eligible) {\\n      uint256 startGas = gasleft();\\n      _;\\n      uint256 gasToCompensate = startGas.sub(gasleft()).add(extra).add(10e3);\\n\\n      gasCompensationVault.compensateGas(account, gasToCompensate);\\n    } else {\\n      _;\\n    }\\n  }\\n\\n  /**\\n   * @notice inheritable unimplemented function to withdraw ether from the vault\\n   * */\\n  function withdrawFromHelper(uint256 amount) external virtual;\\n\\n  /**\\n   * @notice inheritable unimplemented function to deposit ether into the vault\\n   * */\\n  function setGasCompensations(uint256 _gasCompensationsLimit) external virtual;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"tornado-governance/contracts/Governance.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/upgrades-core/contracts/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"torn-token/contracts/ENS.sol\\\";\\nimport \\\"torn-token/contracts/TORN.sol\\\";\\nimport \\\"./Delegation.sol\\\";\\nimport \\\"./Configuration.sol\\\";\\n\\ncontract Governance is Initializable, Configuration, Delegation, EnsResolve {\\n  using SafeMath for uint256;\\n  /// @notice Possible states that a proposal may be in\\n  enum ProposalState { Pending, Active, Defeated, Timelocked, AwaitingExecution, Executed, Expired }\\n\\n  struct Proposal {\\n    // Creator of the proposal\\n    address proposer;\\n    // target addresses for the call to be made\\n    address target;\\n    // The block at which voting begins\\n    uint256 startTime;\\n    // The block at which voting ends: votes must be cast prior to this block\\n    uint256 endTime;\\n    // Current number of votes in favor of this proposal\\n    uint256 forVotes;\\n    // Current number of votes in opposition to this proposal\\n    uint256 againstVotes;\\n    // Flag marking whether the proposal has been executed\\n    bool executed;\\n    // Flag marking whether the proposal voting time has been extended\\n    // Voting time can be extended once, if the proposal outcome has changed during CLOSING_PERIOD\\n    bool extended;\\n    // Receipts of ballots for the entire set of voters\\n    mapping(address => Receipt) receipts;\\n  }\\n\\n  /// @notice Ballot receipt record for a voter\\n  struct Receipt {\\n    // Whether or not a vote has been cast\\n    bool hasVoted;\\n    // Whether or not the voter supports the proposal\\n    bool support;\\n    // The number of votes the voter had, which were cast\\n    uint256 votes;\\n  }\\n\\n  /// @notice The official record of all proposals ever proposed\\n  Proposal[] public proposals;\\n  /// @notice The latest proposal for each proposer\\n  mapping(address => uint256) public latestProposalIds;\\n  /// @notice Timestamp when a user can withdraw tokens\\n  mapping(address => uint256) public canWithdrawAfter;\\n\\n  TORN public torn;\\n\\n  /// @notice An event emitted when a new proposal is created\\n  event ProposalCreated(\\n    uint256 indexed id,\\n    address indexed proposer,\\n    address target,\\n    uint256 startTime,\\n    uint256 endTime,\\n    string description\\n  );\\n\\n  /// @notice An event emitted when a vote has been cast on a proposal\\n  event Voted(uint256 indexed proposalId, address indexed voter, bool indexed support, uint256 votes);\\n\\n  /// @notice An event emitted when a proposal has been executed\\n  event ProposalExecuted(uint256 indexed proposalId);\\n\\n  /// @notice Makes this instance inoperable to prevent selfdestruct attack\\n  /// Proxy will still be able to properly initialize its storage\\n  constructor() public initializer {\\n    torn = TORN(0x000000000000000000000000000000000000dEaD);\\n    _initializeConfiguration();\\n  }\\n\\n  function initialize(bytes32 _torn) public initializer {\\n    torn = TORN(resolve(_torn));\\n    // Create a dummy proposal so that indexes start from 1\\n    proposals.push(\\n      Proposal({\\n        proposer: address(this),\\n        target: 0x000000000000000000000000000000000000dEaD,\\n        startTime: 0,\\n        endTime: 0,\\n        forVotes: 0,\\n        againstVotes: 0,\\n        executed: true,\\n        extended: false\\n      })\\n    );\\n    _initializeConfiguration();\\n  }\\n\\n  function lock(\\n    address owner,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public virtual {\\n    torn.permit(owner, address(this), amount, deadline, v, r, s);\\n    _transferTokens(owner, amount);\\n  }\\n\\n  function lockWithApproval(uint256 amount) public virtual {\\n    _transferTokens(msg.sender, amount);\\n  }\\n\\n  function unlock(uint256 amount) public virtual {\\n    require(getBlockTimestamp() > canWithdrawAfter[msg.sender], \\\"Governance: tokens are locked\\\");\\n    lockedBalance[msg.sender] = lockedBalance[msg.sender].sub(amount, \\\"Governance: insufficient balance\\\");\\n    require(torn.transfer(msg.sender, amount), \\\"TORN: transfer failed\\\");\\n  }\\n\\n  function propose(address target, string memory description) external returns (uint256) {\\n    return _propose(msg.sender, target, description);\\n  }\\n\\n  /**\\n   * @notice Propose implementation\\n   * @param proposer proposer address\\n   * @param target smart contact address that will be executed as result of voting\\n   * @param description description of the proposal\\n   * @return the new proposal id\\n   */\\n  function _propose(\\n    address proposer,\\n    address target,\\n    string memory description\\n  ) internal override(Delegation) returns (uint256) {\\n    uint256 votingPower = lockedBalance[proposer];\\n    require(votingPower >= PROPOSAL_THRESHOLD, \\\"Governance::propose: proposer votes below proposal threshold\\\");\\n    // target should be a contract\\n    require(Address.isContract(target), \\\"Governance::propose: not a contract\\\");\\n\\n    uint256 latestProposalId = latestProposalIds[proposer];\\n    if (latestProposalId != 0) {\\n      ProposalState proposersLatestProposalState = state(latestProposalId);\\n      require(\\n        proposersLatestProposalState != ProposalState.Active && proposersLatestProposalState != ProposalState.Pending,\\n        \\\"Governance::propose: one live proposal per proposer, found an already active proposal\\\"\\n      );\\n    }\\n\\n    uint256 startTime = getBlockTimestamp().add(VOTING_DELAY);\\n    uint256 endTime = startTime.add(VOTING_PERIOD);\\n\\n    Proposal memory newProposal = Proposal({\\n      proposer: proposer,\\n      target: target,\\n      startTime: startTime,\\n      endTime: endTime,\\n      forVotes: 0,\\n      againstVotes: 0,\\n      executed: false,\\n      extended: false\\n    });\\n\\n    proposals.push(newProposal);\\n    uint256 proposalId = proposalCount();\\n    latestProposalIds[newProposal.proposer] = proposalId;\\n\\n    _lockTokens(proposer, endTime.add(VOTE_EXTEND_TIME).add(EXECUTION_EXPIRATION).add(EXECUTION_DELAY));\\n    emit ProposalCreated(proposalId, proposer, target, startTime, endTime, description);\\n    return proposalId;\\n  }\\n\\n  function execute(uint256 proposalId) external virtual payable {\\n    require(state(proposalId) == ProposalState.AwaitingExecution, \\\"Governance::execute: invalid proposal state\\\");\\n    Proposal storage proposal = proposals[proposalId];\\n    proposal.executed = true;\\n\\n    address target = proposal.target;\\n    require(Address.isContract(target), \\\"Governance::execute: not a contract\\\");\\n    (bool success, bytes memory data) = target.delegatecall(abi.encodeWithSignature(\\\"executeProposal()\\\"));\\n    if (!success) {\\n      if (data.length > 0) {\\n        revert(string(data));\\n      } else {\\n        revert(\\\"Proposal execution failed\\\");\\n      }\\n    }\\n\\n    emit ProposalExecuted(proposalId);\\n  }\\n\\n  function castVote(uint256 proposalId, bool support) external virtual {\\n    _castVote(msg.sender, proposalId, support);\\n  }\\n\\n  function _castVote(\\n    address voter,\\n    uint256 proposalId,\\n    bool support\\n  ) internal override(Delegation) {\\n    require(state(proposalId) == ProposalState.Active, \\\"Governance::_castVote: voting is closed\\\");\\n    Proposal storage proposal = proposals[proposalId];\\n    Receipt storage receipt = proposal.receipts[voter];\\n    bool beforeVotingState = proposal.forVotes <= proposal.againstVotes;\\n    uint256 votes = lockedBalance[voter];\\n    require(votes > 0, \\\"Governance: balance is 0\\\");\\n    if (receipt.hasVoted) {\\n      if (receipt.support) {\\n        proposal.forVotes = proposal.forVotes.sub(receipt.votes);\\n      } else {\\n        proposal.againstVotes = proposal.againstVotes.sub(receipt.votes);\\n      }\\n    }\\n\\n    if (support) {\\n      proposal.forVotes = proposal.forVotes.add(votes);\\n    } else {\\n      proposal.againstVotes = proposal.againstVotes.add(votes);\\n    }\\n\\n    if (!proposal.extended && proposal.endTime.sub(getBlockTimestamp()) < CLOSING_PERIOD) {\\n      bool afterVotingState = proposal.forVotes <= proposal.againstVotes;\\n      if (beforeVotingState != afterVotingState) {\\n        proposal.extended = true;\\n        proposal.endTime = proposal.endTime.add(VOTE_EXTEND_TIME);\\n      }\\n    }\\n\\n    receipt.hasVoted = true;\\n    receipt.support = support;\\n    receipt.votes = votes;\\n    _lockTokens(voter, proposal.endTime.add(VOTE_EXTEND_TIME).add(EXECUTION_EXPIRATION).add(EXECUTION_DELAY));\\n    emit Voted(proposalId, voter, support, votes);\\n  }\\n\\n  function _lockTokens(address owner, uint256 timestamp) internal {\\n    if (timestamp > canWithdrawAfter[owner]) {\\n      canWithdrawAfter[owner] = timestamp;\\n    }\\n  }\\n\\n  function _transferTokens(address owner, uint256 amount) internal virtual {\\n    require(torn.transferFrom(owner, address(this), amount), \\\"TORN: transferFrom failed\\\");\\n    lockedBalance[owner] = lockedBalance[owner].add(amount);\\n  }\\n\\n  function getReceipt(uint256 proposalId, address voter) public view returns (Receipt memory) {\\n    return proposals[proposalId].receipts[voter];\\n  }\\n\\n  function state(uint256 proposalId) public view returns (ProposalState) {\\n    require(proposalId <= proposalCount() && proposalId > 0, \\\"Governance::state: invalid proposal id\\\");\\n    Proposal storage proposal = proposals[proposalId];\\n    if (getBlockTimestamp() <= proposal.startTime) {\\n      return ProposalState.Pending;\\n    } else if (getBlockTimestamp() <= proposal.endTime) {\\n      return ProposalState.Active;\\n    } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes + proposal.againstVotes < QUORUM_VOTES) {\\n      return ProposalState.Defeated;\\n    } else if (proposal.executed) {\\n      return ProposalState.Executed;\\n    } else if (getBlockTimestamp() >= proposal.endTime.add(EXECUTION_DELAY).add(EXECUTION_EXPIRATION)) {\\n      return ProposalState.Expired;\\n    } else if (getBlockTimestamp() >= proposal.endTime.add(EXECUTION_DELAY)) {\\n      return ProposalState.AwaitingExecution;\\n    } else {\\n      return ProposalState.Timelocked;\\n    }\\n  }\\n\\n  function proposalCount() public view returns (uint256) {\\n    return proposals.length - 1;\\n  }\\n\\n  function getBlockTimestamp() internal virtual view returns (uint256) {\\n    // solium-disable-next-line security/no-block-members\\n    return block.timestamp;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITornadoVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ITornadoVault {\\n  function withdrawTorn(address recipient, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades-core/contracts/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"torn-token/contracts/ENS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface ENS {\\n  function resolver(bytes32 node) external view returns (Resolver);\\n}\\n\\ninterface Resolver {\\n  function addr(bytes32 node) external view returns (address);\\n}\\n\\ncontract EnsResolve {\\n  function resolve(bytes32 node) public view virtual returns (address) {\\n    ENS Registry = ENS(\\n      getChainId() == 1 ? 0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e : 0x8595bFb0D940DfEDC98943FA8a907091203f25EE\\n    );\\n    return Registry.resolver(node).addr(node);\\n  }\\n\\n  function bulkResolve(bytes32[] memory domains) public view returns (address[] memory result) {\\n    result = new address[](domains.length);\\n    for (uint256 i = 0; i < domains.length; i++) {\\n      result[i] = resolve(domains[i]);\\n    }\\n  }\\n\\n  function getChainId() internal pure returns (uint256) {\\n    uint256 chainId;\\n    assembly {\\n      chainId := chainid()\\n    }\\n    return chainId;\\n  }\\n}\\n\"\r\n    },\r\n    \"torn-token/contracts/TORN.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"./ERC20Permit.sol\\\";\\nimport \\\"./ENS.sol\\\";\\n\\ncontract TORN is ERC20(\\\"TornadoCash\\\", \\\"TORN\\\"), ERC20Burnable, ERC20Permit, Pausable, EnsResolve {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public immutable canUnpauseAfter;\\n  address public immutable governance;\\n  mapping(address => bool) public allowedTransferee;\\n\\n  event Allowed(address target);\\n  event Disallowed(address target);\\n\\n  struct Recipient {\\n    bytes32 to;\\n    uint256 amount;\\n  }\\n\\n  constructor(\\n    bytes32 _governance,\\n    uint256 _pausePeriod,\\n    Recipient[] memory _vestings\\n  ) public {\\n    address _resolvedGovernance = resolve(_governance);\\n    governance = _resolvedGovernance;\\n    allowedTransferee[_resolvedGovernance] = true;\\n\\n    for (uint256 i = 0; i < _vestings.length; i++) {\\n      address to = resolve(_vestings[i].to);\\n      _mint(to, _vestings[i].amount);\\n      allowedTransferee[to] = true;\\n    }\\n\\n    canUnpauseAfter = blockTimestamp().add(_pausePeriod);\\n    _pause();\\n    require(totalSupply() == 10000000 ether, \\\"TORN: incorrect distribution\\\");\\n  }\\n\\n  modifier onlyGovernance() {\\n    require(_msgSender() == governance, \\\"TORN: only governance can perform this action\\\");\\n    _;\\n  }\\n\\n  function changeTransferability(bool decision) public onlyGovernance {\\n    require(blockTimestamp() > canUnpauseAfter, \\\"TORN: cannot change transferability yet\\\");\\n    if (decision) {\\n      _unpause();\\n    } else {\\n      _pause();\\n    }\\n  }\\n\\n  function addToAllowedList(address[] memory target) public onlyGovernance {\\n    for (uint256 i = 0; i < target.length; i++) {\\n      allowedTransferee[target[i]] = true;\\n      emit Allowed(target[i]);\\n    }\\n  }\\n\\n  function removeFromAllowedList(address[] memory target) public onlyGovernance {\\n    for (uint256 i = 0; i < target.length; i++) {\\n      allowedTransferee[target[i]] = false;\\n      emit Disallowed(target[i]);\\n    }\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    super._beforeTokenTransfer(from, to, amount);\\n    require(!paused() || allowedTransferee[from] || allowedTransferee[to], \\\"TORN: paused\\\");\\n    require(to != address(this), \\\"TORN: invalid recipient\\\");\\n  }\\n\\n  /// @dev Method to claim junk and accidentally sent tokens\\n  function rescueTokens(\\n    IERC20 _token,\\n    address payable _to,\\n    uint256 _balance\\n  ) external onlyGovernance {\\n    require(_to != address(0), \\\"TORN: can not send to zero address\\\");\\n\\n    if (_token == IERC20(0)) {\\n      // for Ether\\n      uint256 totalBalance = address(this).balance;\\n      uint256 balance = _balance == 0 ? totalBalance : Math.min(totalBalance, _balance);\\n      _to.transfer(balance);\\n    } else {\\n      // any other erc20\\n      uint256 totalBalance = _token.balanceOf(address(this));\\n      uint256 balance = _balance == 0 ? totalBalance : Math.min(totalBalance, _balance);\\n      require(balance > 0, \\\"TORN: trying to send 0 balance\\\");\\n      _token.safeTransfer(_to, balance);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"tornado-governance/contracts/Delegation.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Core.sol\\\";\\n\\nabstract contract Delegation is Core {\\n  /// @notice Delegatee records\\n  mapping(address => address) public delegatedTo;\\n\\n  event Delegated(address indexed account, address indexed to);\\n  event Undelegated(address indexed account, address indexed from);\\n\\n  function delegate(address to) external {\\n    address previous = delegatedTo[msg.sender];\\n    require(to != msg.sender && to != address(this) && to != address(0) && to != previous, \\\"Governance: invalid delegatee\\\");\\n    if (previous != address(0)) {\\n      emit Undelegated(msg.sender, previous);\\n    }\\n    delegatedTo[msg.sender] = to;\\n    emit Delegated(msg.sender, to);\\n  }\\n\\n  function undelegate() external {\\n    address previous = delegatedTo[msg.sender];\\n    require(previous != address(0), \\\"Governance: tokens are already undelegated\\\");\\n\\n    delegatedTo[msg.sender] = address(0);\\n    emit Undelegated(msg.sender, previous);\\n  }\\n\\n  function proposeByDelegate(\\n    address from,\\n    address target,\\n    string memory description\\n  ) external returns (uint256) {\\n    require(delegatedTo[from] == msg.sender, \\\"Governance: not authorized\\\");\\n    return _propose(from, target, description);\\n  }\\n\\n  function _propose(\\n    address proposer,\\n    address target,\\n    string memory description\\n  ) internal virtual returns (uint256);\\n\\n  function castDelegatedVote(\\n    address[] memory from,\\n    uint256 proposalId,\\n    bool support\\n  ) external virtual {\\n    for (uint256 i = 0; i < from.length; i++) {\\n      require(delegatedTo[from[i]] == msg.sender, \\\"Governance: not authorized\\\");\\n      _castVote(from[i], proposalId, support);\\n    }\\n    if (lockedBalance[msg.sender] > 0) {\\n      _castVote(msg.sender, proposalId, support);\\n    }\\n  }\\n\\n  function _castVote(\\n    address voter,\\n    uint256 proposalId,\\n    bool support\\n  ) internal virtual;\\n}\\n\"\r\n    },\r\n    \"tornado-governance/contracts/Configuration.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ncontract Configuration {\\n  /// @notice Time delay between proposal vote completion and its execution\\n  uint256 public EXECUTION_DELAY;\\n  /// @notice Time before a passed proposal is considered expired\\n  uint256 public EXECUTION_EXPIRATION;\\n  /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\\n  uint256 public QUORUM_VOTES;\\n  /// @notice The number of votes required in order for a voter to become a proposer\\n  uint256 public PROPOSAL_THRESHOLD;\\n  /// @notice The delay before voting on a proposal may take place, once proposed\\n  /// It is needed to prevent reorg attacks that replace the proposal\\n  uint256 public VOTING_DELAY;\\n  /// @notice The duration of voting on a proposal\\n  uint256 public VOTING_PERIOD;\\n  /// @notice If the outcome of a proposal changes during CLOSING_PERIOD, the vote will be extended by VOTE_EXTEND_TIME (no more than once)\\n  uint256 public CLOSING_PERIOD;\\n  /// @notice If the outcome of a proposal changes during CLOSING_PERIOD, the vote will be extended by VOTE_EXTEND_TIME (no more than once)\\n  uint256 public VOTE_EXTEND_TIME;\\n\\n  modifier onlySelf {\\n    require(msg.sender == address(this), \\\"Governance: unauthorized\\\");\\n    _;\\n  }\\n\\n  function _initializeConfiguration() internal {\\n    EXECUTION_DELAY = 2 days;\\n    EXECUTION_EXPIRATION = 3 days;\\n    QUORUM_VOTES = 25000e18; // 0.25% of TORN\\n    PROPOSAL_THRESHOLD = 1000e18; // 0.01% of TORN\\n    VOTING_DELAY = 75 seconds;\\n    VOTING_PERIOD = 3 days;\\n    CLOSING_PERIOD = 1 hours;\\n    VOTE_EXTEND_TIME = 6 hours;\\n  }\\n\\n  function setExecutionDelay(uint256 executionDelay) external onlySelf {\\n    EXECUTION_DELAY = executionDelay;\\n  }\\n\\n  function setExecutionExpiration(uint256 executionExpiration) external onlySelf {\\n    EXECUTION_EXPIRATION = executionExpiration;\\n  }\\n\\n  function setQuorumVotes(uint256 quorumVotes) external onlySelf {\\n    QUORUM_VOTES = quorumVotes;\\n  }\\n\\n  function setProposalThreshold(uint256 proposalThreshold) external onlySelf {\\n    PROPOSAL_THRESHOLD = proposalThreshold;\\n  }\\n\\n  function setVotingDelay(uint256 votingDelay) external onlySelf {\\n    VOTING_DELAY = votingDelay;\\n  }\\n\\n  function setVotingPeriod(uint256 votingPeriod) external onlySelf {\\n    VOTING_PERIOD = votingPeriod;\\n  }\\n\\n  function setClosingPeriod(uint256 closingPeriod) external onlySelf {\\n    CLOSING_PERIOD = closingPeriod;\\n  }\\n\\n  function setVoteExtendTime(uint256 voteExtendTime) external onlySelf {\\n    // VOTE_EXTEND_TIME should be less EXECUTION_DELAY to prevent double voting\\n    require(voteExtendTime < EXECUTION_DELAY, \\\"Governance: incorrect voteExtendTime\\\");\\n    VOTE_EXTEND_TIME = voteExtendTime;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"torn-token/contracts/ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n// Adapted copy from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/files\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to use their tokens\\n * without sending any transactions by setting {IERC20-allowance} with a\\n * signature using the {permit} method, and then spend them via\\n * {IERC20-transferFrom}.\\n *\\n * The {permit} signature mechanism conforms to the {IERC2612Permit} interface.\\n */\\nabstract contract ERC20Permit is ERC20 {\\n  mapping(address => uint256) private _nonces;\\n\\n  bytes32 private constant _PERMIT_TYPEHASH = keccak256(\\n    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n  );\\n\\n  // Mapping of ChainID to domain separators. This is a very gas efficient way\\n  // to not recalculate the domain separator on every call, while still\\n  // automatically detecting ChainID changes.\\n  mapping(uint256 => bytes32) private _domainSeparators;\\n\\n  constructor() internal {\\n    _updateDomainSeparator();\\n  }\\n\\n  /**\\n   * @dev See {IERC2612Permit-permit}.\\n   *\\n   * If https://eips.ethereum.org/EIPS/eip-1344[ChainID] ever changes, the\\n   * EIP712 Domain Separator is automatically recalculated.\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    require(blockTimestamp() <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n    bytes32 hashStruct = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, amount, _nonces[owner], deadline));\\n\\n    bytes32 hash = keccak256(abi.encodePacked(uint16(0x1901), _domainSeparator(), hashStruct));\\n\\n    address signer = ECDSA.recover(hash, v, r, s);\\n    require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n    _nonces[owner]++;\\n    _approve(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev See {IERC2612Permit-nonces}.\\n   */\\n  function nonces(address owner) public view returns (uint256) {\\n    return _nonces[owner];\\n  }\\n\\n  function _updateDomainSeparator() private returns (bytes32) {\\n    uint256 _chainID = chainID();\\n\\n    bytes32 newDomainSeparator = keccak256(\\n      abi.encode(\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n        keccak256(bytes(name())),\\n        keccak256(bytes(\\\"1\\\")), // Version\\n        _chainID,\\n        address(this)\\n      )\\n    );\\n\\n    _domainSeparators[_chainID] = newDomainSeparator;\\n\\n    return newDomainSeparator;\\n  }\\n\\n  // Returns the domain separator, updating it if chainID changes\\n  function _domainSeparator() private returns (bytes32) {\\n    bytes32 domainSeparator = _domainSeparators[chainID()];\\n    if (domainSeparator != 0x00) {\\n      return domainSeparator;\\n    } else {\\n      return _updateDomainSeparator();\\n    }\\n  }\\n\\n  function chainID() public view virtual returns (uint256 _chainID) {\\n    assembly {\\n      _chainID := chainid()\\n    }\\n  }\\n\\n  function blockTimestamp() public view virtual returns (uint256) {\\n    return block.timestamp;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"torn-token/contracts/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n// A copy from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/files\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature`. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   */\\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n    // Check the signature length\\n    if (signature.length != 65) {\\n      revert(\\\"ECDSA: invalid signature length\\\");\\n    }\\n\\n    // Divide the signature in r, s and v variables\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n\\n    // ecrecover takes the signature parameters, and the only way to get them\\n    // currently is to use assembly.\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      r := mload(add(signature, 0x20))\\n      s := mload(add(signature, 0x40))\\n      v := mload(add(signature, 0x41))\\n    }\\n\\n    return recover(hash, v, r, s);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address) {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n    require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n    // If the signature is valid (and not malleable), return the signer address\\n    address signer = ecrecover(hash, v, r, s);\\n    require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n    return signer;\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n   * replicates the behavior of the\\n   * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n   * JSON-RPC method.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n    // 32 is the length in bytes of hash,\\n    // enforced by the type signature above\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n  }\\n}\\n\"\r\n    },\r\n    \"tornado-governance/contracts/Core.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract Core {\\n  /// @notice Locked token balance for each account\\n  mapping(address => uint256) public lockedBalance;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gasCompLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"Undelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOSING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTION_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTION_EXPIRATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSAL_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUORUM_VOTES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTE_EXTEND_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"domains\",\"type\":\"bytes32[]\"}],\"name\":\"bulkResolve\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"result\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canWithdrawAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"castDelegatedVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"checkIfQuorumReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatedTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasCompensationVault\",\"outputs\":[{\"internalType\":\"contract IGasCompensationVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"internalType\":\"struct Governance.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAccountVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_torn\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockWithApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"extended\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"proposeByDelegate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnMultisigAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"closingPeriod\",\"type\":\"uint256\"}],\"name\":\"setClosingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"executionDelay\",\"type\":\"uint256\"}],\"name\":\"setExecutionDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"executionExpiration\",\"type\":\"uint256\"}],\"name\":\"setExecutionExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasCompensationsLimit\",\"type\":\"uint256\"}],\"name\":\"setGasCompensations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalThreshold\",\"type\":\"uint256\"}],\"name\":\"setProposalThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quorumVotes\",\"type\":\"uint256\"}],\"name\":\"setQuorumVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"voteExtendTime\",\"type\":\"uint256\"}],\"name\":\"setVoteExtendTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"votingDelay\",\"type\":\"uint256\"}],\"name\":\"setVotingDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"votingPeriod\",\"type\":\"uint256\"}],\"name\":\"setVotingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum Governance.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"torn\",\"outputs\":[{\"internalType\":\"contract TORN\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"undelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userVault\",\"outputs\":[{\"internalType\":\"contract ITornadoVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GovernanceGasUpgrade","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000fa4c1f3f7d5dd7c12a9adb82cd7dda542e3d59ef0000000000000000000000002f50508a8a3d323b91336fa3ea6ae50e55f32185","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}