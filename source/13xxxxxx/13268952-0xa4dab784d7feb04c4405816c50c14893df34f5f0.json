{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@yield-protocol/utils-v2/contracts/utils/Relay.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"./RevertMsgExtractor.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\n\\n/// @dev Relay is a simple contract to batch several contract calls into one single transaction.\\ncontract Relay is Ownable() {\\n    using IsContract for address;\\n\\n    struct Call {\\n        address target;\\n        bytes data;\\n    }\\n\\n    /// @dev Execute a series of fuction calls\\n    function execute(Call[] calldata functionCalls)\\n        external onlyOwner returns (bytes[] memory results)\\n    {\\n        results = new bytes[](functionCalls.length);\\n        for (uint256 i = 0; i < functionCalls.length; i++){\\n            require(functionCalls[i].target.isContract(), \\\"Call to a non-contract\\\");\\n            (bool success, bytes memory result) = functionCalls[i].target.call(functionCalls[i].data);\\n            if (!success) revert(RevertMsgExtractor.getRevertMsg(result));\\n            results[i] = result;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ncontract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\\n\\n    constructor () {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    /// Can only be called by the current owner.\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/utils/RevertMsgExtractor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/sushiswap/BoringSolidity/blob/441e51c0544cf2451e6116fe00515e71d7c42e2c/contracts/BoringBatchable.sol\\n\\npragma solidity >=0.6.0;\\n\\n\\nlibrary RevertMsgExtractor {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function getRevertMsg(bytes memory returnData)\\n        internal pure\\n        returns (string memory)\\n    {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            returnData := add(returnData, 0x04)\\n        }\\n        return abi.decode(returnData, (string)); // All that remains is the revert string\\n    }\\n}\"\r\n    },\r\n    \"@yield-protocol/utils-v2/contracts/utils/IsContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Taken from Address.sol from OpenZeppelin.\\npragma solidity ^0.8.0;\\n\\n\\nlibrary IsContract {\\n  /// @dev Returns true if `account` is a contract.\\n  function isContract(address account) internal view returns (bool) {\\n      // This method relies on extcodesize, which returns 0 for contracts in\\n      // construction, since the code is only stored at the end of the\\n      // constructor execution.\\n      return account.code.length > 0;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Relay.Call[]\",\"name\":\"functionCalls\",\"type\":\"tuple[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Relay","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}