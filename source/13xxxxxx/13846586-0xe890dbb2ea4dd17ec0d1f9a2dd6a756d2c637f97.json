{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"automates/avaxSmartcoin/IMasterChefJoeV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IMasterChefJoeV2 {\\n  struct UserInfo {\\n    uint256 amount;\\n    uint256 rewardDebt;\\n  }\\n\\n  struct PoolInfo {\\n    address lpToken;\\n    uint256 allocPoint;\\n    uint256 lastRewardTimestamp;\\n    uint256 accJoePerShare;\\n    address rewarder;\\n  }\\n\\n  function joe() external view returns (address);\\n\\n  function poolInfo(uint256 pool) external view returns (PoolInfo memory);\\n\\n  function userInfo(uint256 pool, address user) external view returns (UserInfo memory);\\n\\n  function pendingTokens(uint256 pool, address user)\\n    external\\n    view\\n    returns (\\n      uint256 pendingJoe,\\n      address bonusTokenAddress,\\n      string memory bonusTokenSymbol,\\n      uint256 pendingBonusToken\\n    );\\n\\n  function deposit(uint256 pool, uint256 amount) external;\\n\\n  function withdraw(uint256 pool, uint256 amount) external;\\n\\n  function emergencyWithdraw(uint256 pool) external;\\n}\\n\"\r\n    },\r\n    \"automates/avaxSmartcoin/MasterChefJoeLpRestake.automate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../utils/DFH/Automate.sol\\\";\\nimport \\\"../utils/DFH/IStorage.sol\\\";\\nimport \\\"../utils/Uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../utils/Uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"./IMasterChefJoeV2.sol\\\";\\nimport {ERC20Tools} from \\\"../utils/ERC20Tools.sol\\\";\\n\\n/**\\n * @notice Use with LP token only.\\n */\\ncontract MasterChefJoeLpRestake is Automate {\\n  using ERC20Tools for IERC20;\\n\\n  IMasterChefJoeV2 public staking;\\n\\n  address public liquidityRouter;\\n\\n  uint256 public pool;\\n\\n  uint16 public slippage;\\n\\n  uint16 public deadline;\\n\\n  IERC20 public stakingToken;\\n\\n  IERC20 public rewardToken;\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _info) Automate(_info) {}\\n\\n  function init(\\n    address _staking,\\n    address _liquidityRouter,\\n    uint256 _pool,\\n    uint16 _slippage,\\n    uint16 _deadline\\n  ) external initializer {\\n    require(\\n      !_initialized || address(staking) == _staking,\\n      \\\"MasterChefJoeLpRestake::init: reinitialize staking address forbidden\\\"\\n    );\\n    staking = IMasterChefJoeV2(_staking);\\n    require(\\n      !_initialized || liquidityRouter == _liquidityRouter,\\n      \\\"MasterChefJoeLpRestake::init: reinitialize liquidity router address forbidden\\\"\\n    );\\n    liquidityRouter = _liquidityRouter;\\n    require(!_initialized || pool == _pool, \\\"MasterChefJoeLpRestake::init: reinitialize pool index forbidden\\\");\\n    pool = _pool;\\n    slippage = _slippage;\\n    deadline = _deadline;\\n\\n    if (!_initialized) {\\n      IMasterChefJoeV2.PoolInfo memory poolInfo = staking.poolInfo(pool);\\n      stakingToken = IERC20(poolInfo.lpToken);\\n      rewardToken = IERC20(staking.joe());\\n    }\\n  }\\n\\n  function deposit() external onlyOwner {\\n    IERC20 _stakingToken = stakingToken; // gas optimisation\\n    uint256 balance = _stakingToken.balanceOf(address(this));\\n    _stakingToken.safeApprove(address(staking), balance);\\n    staking.deposit(pool, balance);\\n  }\\n\\n  function refund() external onlyOwner {\\n    IMasterChefJoeV2 _staking = staking; // gas optimisation\\n    address __owner = owner(); // gas optimisation\\n    IMasterChefJoeV2.UserInfo memory userInfo = _staking.userInfo(pool, address(this));\\n    _staking.withdraw(pool, userInfo.amount);\\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\\n  }\\n\\n  function emergencyWithdraw() external onlyOwner {\\n    address __owner = owner(); // gas optimisation\\n    staking.emergencyWithdraw(pool);\\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\\n  }\\n\\n  function _swap(\\n    address[2] memory path,\\n    uint256[2] memory amount,\\n    uint256 _deadline\\n  ) internal returns (uint256) {\\n    if (path[0] == path[1]) return amount[0];\\n\\n    address[] memory _path = new address[](2);\\n    _path[0] = path[0];\\n    _path[1] = path[1];\\n\\n    return\\n      IUniswapV2Router02(liquidityRouter).swapExactTokensForTokens(\\n        amount[0],\\n        amount[1],\\n        _path,\\n        address(this),\\n        _deadline\\n      )[1];\\n  }\\n\\n  function _addLiquidity(\\n    address[2] memory path,\\n    uint256[2] memory amountIn,\\n    uint256[2] memory amountOutMin,\\n    uint256 _deadline\\n  ) internal {\\n    address _liquidityRouter = liquidityRouter; // gas optimisation\\n    IERC20(path[0]).safeApprove(_liquidityRouter, amountIn[0]);\\n    IERC20(path[1]).safeApprove(_liquidityRouter, amountIn[1]);\\n    IUniswapV2Router02(_liquidityRouter).addLiquidity(\\n      path[0],\\n      path[1],\\n      amountIn[0],\\n      amountIn[1],\\n      amountOutMin[0],\\n      amountOutMin[1],\\n      address(this),\\n      _deadline\\n    );\\n  }\\n\\n  function run(\\n    uint256 gasFee,\\n    uint256 _deadline,\\n    uint256[2] memory _outMin\\n  ) external bill(gasFee, \\\"AvaxSmartcoinMasterChefJoeLPRestake\\\") {\\n    IMasterChefJoeV2 _staking = staking; // gas optimization\\n    (uint256 pendingJoe, , , ) = _staking.pendingTokens(pool, address(this));\\n    require(pendingJoe > 0, \\\"MasterChefJoeLpRestake::run: no earned\\\");\\n\\n    _staking.deposit(pool, 0); // get all reward\\n    uint256 rewardAmount = rewardToken.balanceOf(address(this));\\n    rewardToken.safeApprove(liquidityRouter, rewardAmount);\\n\\n    IUniswapV2Pair _stakingToken = IUniswapV2Pair(address(stakingToken));\\n    address[2] memory tokens = [_stakingToken.token0(), _stakingToken.token1()];\\n    uint256[2] memory amountIn = [\\n      _swap([address(rewardToken), tokens[0]], [rewardAmount / 2, _outMin[0]], _deadline),\\n      _swap([address(rewardToken), tokens[1]], [rewardAmount - rewardAmount / 2, _outMin[1]], _deadline)\\n    ];\\n    uint256[2] memory amountOutMin = [uint256(0), uint256(0)];\\n\\n    _addLiquidity([tokens[0], tokens[1]], amountIn, amountOutMin, _deadline);\\n    uint256 stakingAmount = _stakingToken.balanceOf(address(this));\\n    stakingToken.safeApprove(address(_staking), stakingAmount);\\n    _staking.deposit(pool, stakingAmount);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"automates/utils/DFH/Automate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./proxy/ERC1167.sol\\\";\\nimport \\\"./IStorage.sol\\\";\\nimport \\\"./IBalance.sol\\\";\\n\\n// solhint-disable avoid-tx-origin\\nabstract contract Automate {\\n  using ERC1167 for address;\\n\\n  /// @notice Storage contract address.\\n  address internal _info;\\n\\n  /// @notice Contract owner.\\n  address internal _owner;\\n\\n  /// @notice Is contract paused.\\n  bool internal _paused;\\n\\n  /// @notice Protocol fee in USD (-1 if value in global storage).\\n  int256 internal _protocolFee;\\n\\n  /// @notice Is contract already initialized.\\n  bool internal _initialized;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  event ProtocolFeeChanged(int256 protocolFee);\\n\\n  constructor(address __info) {\\n    _info = __info;\\n    _owner = tx.origin;\\n    _protocolFee = -1;\\n  }\\n\\n  /**\\n   * @notice Returns address of Storage contract.\\n   */\\n  function info() public view returns (address) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _info;\\n\\n    return Automate(impl).info();\\n  }\\n\\n  /// @dev Modifier to protect an initializer function from being invoked twice.\\n  modifier initializer() {\\n    if (_owner == address(0)) {\\n      _owner = tx.origin;\\n      _protocolFee = -1;\\n    } else {\\n      require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    }\\n    _;\\n    _initialized = true;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    require(address(this).implementation() == address(this), \\\"Automate: change the owner failed\\\");\\n\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the pauser.\\n   */\\n  modifier onlyPauser() {\\n    if (address(this).implementation() == address(this)) {\\n      address pauser = IStorage(info()).getAddress(keccak256(\\\"DFH:Pauser\\\"));\\n      require(msg.sender == _owner || msg.sender == pauser, \\\"Automate: caller is not the pauser\\\");\\n    } else {\\n      require(msg.sender == _owner, \\\"Automate: caller is not the pauser\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view returns (bool) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _paused;\\n\\n    return _paused || Automate(impl).paused();\\n  }\\n\\n  /**\\n   * @dev Throws if contract unpaused.\\n   */\\n  modifier whenPaused() {\\n    require(paused(), \\\"Automate: not paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if contract paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused(), \\\"Automate: paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Pause contract.\\n   */\\n  function pause() external onlyPauser whenNotPaused {\\n    _paused = true;\\n  }\\n\\n  /**\\n   * @notice Unpause contract.\\n   */\\n  function unpause() external onlyPauser whenPaused {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @return Current protocol fee.\\n   */\\n  function protocolFee() public view returns (uint256) {\\n    address impl = address(this).implementation();\\n    if (impl != address(this) && _protocolFee < 0) {\\n      return Automate(impl).protocolFee();\\n    }\\n\\n    IStorage __info = IStorage(info());\\n    uint256 feeOnUSD = _protocolFee < 0 ? __info.getUint(keccak256(\\\"DFH:Fee:Automate\\\")) : uint256(_protocolFee);\\n    if (feeOnUSD == 0) return 0;\\n\\n    (, int256 price, , , ) = AggregatorV3Interface(__info.getAddress(keccak256(\\\"DFH:Fee:PriceFeed\\\"))).latestRoundData();\\n    require(price > 0, \\\"Automate: invalid price\\\");\\n\\n    return (feeOnUSD * 1e18) / uint256(price);\\n  }\\n\\n  /**\\n   * @notice Change protocol fee.\\n   * @param __protocolFee New protocol fee.\\n   */\\n  function changeProtocolFee(int256 __protocolFee) external {\\n    address impl = address(this).implementation();\\n    require(\\n      (impl == address(this) ? _owner : Automate(impl).owner()) == msg.sender,\\n      \\\"Automate::changeProtocolFee: caller is not the protocol owner\\\"\\n    );\\n\\n    _protocolFee = __protocolFee;\\n    emit ProtocolFeeChanged(__protocolFee);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  function _bill(uint256 gasFee, string memory operation) internal whenNotPaused returns (uint256) {\\n    address account = owner(); // gas optimisation\\n    if (tx.origin == account) return 0; // free if called by the owner\\n\\n    IStorage __info = IStorage(info());\\n\\n    address balance = __info.getAddress(keccak256(\\\"DFH:Contract:Balance\\\"));\\n    require(balance != address(0), \\\"Automate::_bill: balance contract not found\\\");\\n\\n    return IBalance(balance).claim(account, gasFee, protocolFee(), operation);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  modifier bill(uint256 gasFee, string memory operation) {\\n    _bill(gasFee, operation);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Transfer ERC20 token to recipient.\\n   * @param token The address of the token to be transferred.\\n   * @param recipient Token recipient address.\\n   * @param amount Transferred amount of tokens.\\n   */\\n  function transfer(\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyOwner {\\n    IERC20(token).transfer(recipient, amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"automates/utils/DFH/IStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IStorage {\\n  function getBytes(bytes32 key) external view returns (bytes memory);\\n\\n  function getBool(bytes32 key) external view returns (bool);\\n\\n  function getUint(bytes32 key) external view returns (uint256);\\n\\n  function getInt(bytes32 key) external view returns (int256);\\n\\n  function getAddress(bytes32 key) external view returns (address);\\n\\n  function getString(bytes32 key) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"automates/utils/Uniswap/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IUniswapV2Router02 {\\n  function factory() external view returns (address);\\n\\n  function WETH() external view returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"automates/utils/Uniswap/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\ninterface IUniswapV2Pair is IERC20 {\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"automates/utils/ERC20Tools.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary ERC20Tools {\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 allowance = token.allowance(address(this), spender);\\n    if (allowance != 0 && allowance < value) {\\n      token.approve(spender, 0);\\n    }\\n    if (allowance != value) {\\n      token.approve(spender, value);\\n    }\\n  }\\n\\n  function safeApproveAll(IERC20 token, address spender) internal {\\n    safeApprove(token, spender, 2**256 - 1);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"automates/utils/DFH/proxy/ERC1167.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable no-inline-assembly\\nlibrary ERC1167 {\\n  bytes public constant CLONE =\\n    hex\\\"363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\\\";\\n\\n  /**\\n   * @notice Make new proxy contract.\\n   * @param impl Address prototype contract.\\n   * @return proxy Address new proxy contract.\\n   */\\n  function clone(address impl) external returns (address proxy) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, impl))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, ptr, 0x37)\\n    }\\n    require(proxy != address(0), \\\"ERC1167: create failed\\\");\\n  }\\n\\n  /**\\n   * @notice Returns address of prototype contract for proxy.\\n   * @param proxy Address proxy contract.\\n   * @return impl Address prototype contract (current contract address if not proxy).\\n   */\\n  function implementation(address proxy) external view returns (address impl) {\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(proxy)\\n    }\\n\\n    impl = proxy;\\n    if (size <= 45 && size >= 41) {\\n      bool matches = true;\\n      uint256 i;\\n\\n      bytes memory code;\\n      assembly {\\n        code := mload(0x40)\\n        mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        mstore(code, size)\\n        extcodecopy(proxy, add(code, 0x20), 0, size)\\n      }\\n      for (i = 0; matches && i < 9; i++) {\\n        matches = code[i] == CLONE[i];\\n      }\\n      for (i = 0; matches && i < 15; i++) {\\n        if (i == 4) {\\n          matches = code[code.length - i - 1] == bytes1(uint8(CLONE[45 - i - 1]) - uint8(45 - size));\\n        } else {\\n          matches = code[code.length - i - 1] == CLONE[45 - i - 1];\\n        }\\n      }\\n      if (code[9] != bytes1(0x73 - uint8(45 - size))) {\\n        matches = false;\\n      }\\n      uint256 forwardedToBuffer;\\n      if (matches) {\\n        assembly {\\n          forwardedToBuffer := mload(add(code, 30))\\n        }\\n        forwardedToBuffer &= (0x1 << (20 * 8)) - 1;\\n        impl = address(uint160(forwardedToBuffer >> ((45 - size) * 8)));\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"automates/utils/DFH/IBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IBalance {\\n  function claim(\\n    address account,\\n    uint256 gasFee,\\n    uint256 protocolFee,\\n    string memory description\\n  ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"automates/moonriverHuckleberry/MasterChefFinnLpRestake.automate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../utils/DFH/Automate.sol\\\";\\nimport \\\"../utils/DFH/IStorage.sol\\\";\\nimport \\\"../utils/Uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../utils/Uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"./IMasterChefFinnV2.sol\\\";\\nimport {ERC20Tools} from \\\"../utils/ERC20Tools.sol\\\";\\n\\n/**\\n * @notice Use with LP token only.\\n */\\ncontract MasterChefFinnLpRestake is Automate {\\n  using ERC20Tools for IERC20;\\n\\n  IMasterChefFinnV2 public staking;\\n\\n  address public liquidityRouter;\\n\\n  uint256 public pool;\\n\\n  uint16 public slippage;\\n\\n  uint16 public deadline;\\n\\n  IERC20 public stakingToken;\\n\\n  IERC20 public rewardToken;\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _info) Automate(_info) {}\\n\\n  function init(\\n    address _staking,\\n    address _liquidityRouter,\\n    uint256 _pool,\\n    uint16 _slippage,\\n    uint16 _deadline\\n  ) external initializer {\\n    require(\\n      !_initialized || address(staking) == _staking,\\n      \\\"MasterChefFinnLpRestake::init: reinitialize staking address forbidden\\\"\\n    );\\n    staking = IMasterChefFinnV2(_staking);\\n    require(\\n      !_initialized || liquidityRouter == _liquidityRouter,\\n      \\\"MasterChefFinnLpRestake::init: reinitialize liquidity router address forbidden\\\"\\n    );\\n    liquidityRouter = _liquidityRouter;\\n    require(!_initialized || pool == _pool, \\\"MasterChefFinnLpRestake::init: reinitialize pool index forbidden\\\");\\n    pool = _pool;\\n    slippage = _slippage;\\n    deadline = _deadline;\\n\\n    if (!_initialized) {\\n      IMasterChefFinnV2.PoolInfo memory poolInfo = staking.poolInfo(pool);\\n      stakingToken = IERC20(poolInfo.lpToken);\\n      rewardToken = IERC20(staking.finn());\\n    }\\n  }\\n\\n  function deposit() external onlyOwner {\\n    IERC20 _stakingToken = stakingToken; // gas optimisation\\n    uint256 balance = _stakingToken.balanceOf(address(this));\\n    _stakingToken.safeApprove(address(staking), balance);\\n    staking.deposit(pool, balance);\\n  }\\n\\n  function refund() external onlyOwner {\\n    IMasterChefFinnV2 _staking = staking; // gas optimisation\\n    address __owner = owner(); // gas optimisation\\n    IMasterChefFinnV2.UserInfo memory userInfo = _staking.userInfo(pool, address(this));\\n    _staking.withdraw(pool, userInfo.amount);\\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\\n  }\\n\\n  function emergencyWithdraw() external onlyOwner {\\n    address __owner = owner(); // gas optimisation\\n    staking.emergencyWithdraw(pool);\\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\\n  }\\n\\n  function _swap(\\n    address[2] memory path,\\n    uint256[2] memory amount,\\n    uint256 _deadline\\n  ) internal returns (uint256) {\\n    if (path[0] == path[1]) return amount[0];\\n\\n    address[] memory _path = new address[](2);\\n    _path[0] = path[0];\\n    _path[1] = path[1];\\n\\n    return\\n      IUniswapV2Router02(liquidityRouter).swapExactTokensForTokens(\\n        amount[0],\\n        amount[1],\\n        _path,\\n        address(this),\\n        _deadline\\n      )[1];\\n  }\\n\\n  function _addLiquidity(\\n    address[2] memory path,\\n    uint256[2] memory amountIn,\\n    uint256[2] memory amountOutMin,\\n    uint256 _deadline\\n  ) internal {\\n    address _liquidityRouter = liquidityRouter; // gas optimisation\\n    IERC20(path[0]).safeApprove(_liquidityRouter, amountIn[0]);\\n    IERC20(path[1]).safeApprove(_liquidityRouter, amountIn[1]);\\n    IUniswapV2Router02(_liquidityRouter).addLiquidity(\\n      path[0],\\n      path[1],\\n      amountIn[0],\\n      amountIn[1],\\n      amountOutMin[0],\\n      amountOutMin[1],\\n      address(this),\\n      _deadline\\n    );\\n  }\\n\\n  function run(\\n    uint256 gasFee,\\n    uint256 _deadline,\\n    uint256[2] memory _outMin\\n  ) external bill(gasFee, \\\"MoonriverHuckleberryMasterChefFinnLPRestake\\\") {\\n    IMasterChefFinnV2 _staking = staking; // gas optimization\\n    uint256 pendingFinn = _staking.pendingReward(pool, address(this));\\n    require(pendingFinn > 0, \\\"MasterChefFinnLpRestake::run: no earned\\\");\\n\\n    _staking.deposit(pool, 0); // get all reward\\n    uint256 rewardAmount = rewardToken.balanceOf(address(this));\\n    rewardToken.safeApprove(liquidityRouter, rewardAmount);\\n\\n    IUniswapV2Pair _stakingToken = IUniswapV2Pair(address(stakingToken));\\n    address[2] memory tokens = [_stakingToken.token0(), _stakingToken.token1()];\\n    uint256[2] memory amountIn = [\\n      _swap([address(rewardToken), tokens[0]], [rewardAmount / 2, _outMin[0]], _deadline),\\n      _swap([address(rewardToken), tokens[1]], [rewardAmount - rewardAmount / 2, _outMin[1]], _deadline)\\n    ];\\n    uint256[2] memory amountOutMin = [uint256(0), uint256(0)];\\n\\n    _addLiquidity([tokens[0], tokens[1]], amountIn, amountOutMin, _deadline);\\n    uint256 stakingAmount = _stakingToken.balanceOf(address(this));\\n    stakingToken.safeApprove(address(_staking), stakingAmount);\\n    _staking.deposit(pool, stakingAmount);\\n  }\\n}\\n\"\r\n    },\r\n    \"automates/moonriverHuckleberry/IMasterChefFinnV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IMasterChefFinnV2 {\\n  struct UserInfo {\\n    uint256 amount;\\n    uint256 rewardDebt;\\n  }\\n\\n  struct PoolInfo {\\n    address lpToken;\\n    uint256 allocPoint;\\n    uint256 lastRewardTimestamp;\\n    uint256 accRewardPerShare;\\n  }\\n\\n  function finn() external view returns (address);\\n\\n  function poolInfo(uint256 pool) external view returns (PoolInfo memory);\\n\\n  function userInfo(uint256 pool, address user) external view returns (UserInfo memory);\\n\\n  function pendingReward(uint256 pool, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function deposit(uint256 pool, uint256 amount) external;\\n\\n  function withdraw(uint256 pool, uint256 amount) external;\\n\\n  function emergencyWithdraw(uint256 pool) external;\\n}\\n\"\r\n    },\r\n    \"automates/bondappetit/SynthetixUniswapLpRestake.automate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../utils/DFH/Automate.sol\\\";\\nimport \\\"../utils/DFH/IStorage.sol\\\";\\nimport \\\"../utils/Uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../utils/Uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../utils/Synthetix/IStaking.sol\\\";\\nimport {ERC20Tools} from \\\"../utils/ERC20Tools.sol\\\";\\n\\n// solhint-disable not-rely-on-time\\ncontract SynthetixUniswapLpRestake is Automate {\\n  using ERC20Tools for IERC20;\\n\\n  IStaking public staking;\\n\\n  address public liquidityRouter;\\n\\n  uint16 public slippage;\\n\\n  uint16 public deadline;\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _info) Automate(_info) {}\\n\\n  function init(\\n    address _staking,\\n    address _liquidityRouter,\\n    uint16 _slippage,\\n    uint16 _deadline\\n  ) external initializer {\\n    require(\\n      !_initialized || address(staking) == _staking,\\n      \\\"SynthetixUniswapLpRestake::init: reinitialize staking address forbidden\\\"\\n    );\\n    staking = IStaking(_staking);\\n    require(\\n      !_initialized || liquidityRouter == _liquidityRouter,\\n      \\\"SynthetixUniswapLpRestake::init: reinitialize liquidity router address forbidden\\\"\\n    );\\n    liquidityRouter = _liquidityRouter;\\n    slippage = _slippage;\\n    deadline = _deadline;\\n  }\\n\\n  function deposit() external onlyOwner {\\n    IStaking _staking = staking; // gas optimisation\\n    IERC20 stakingToken = IERC20(_staking.stakingToken());\\n    uint256 balance = stakingToken.balanceOf(address(this));\\n    stakingToken.safeApprove(address(_staking), balance);\\n    _staking.stake(balance);\\n  }\\n\\n  function refund() external onlyOwner {\\n    IStaking _staking = staking; // gas optimisation\\n    _staking.exit();\\n\\n    address __owner = owner(); // gas optimisation\\n    IERC20 stakingToken = IERC20(_staking.stakingToken());\\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\\n\\n    IERC20 rewardToken = IERC20(_staking.rewardsToken());\\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\\n  }\\n\\n  function _swap(\\n    address[2] memory path,\\n    uint256[2] memory amount,\\n    uint256 _deadline\\n  ) internal returns (uint256) {\\n    if (path[0] == path[1]) return amount[0];\\n\\n    address[] memory _path = new address[](2);\\n    _path[0] = path[0];\\n    _path[1] = path[1];\\n\\n    return\\n      IUniswapV2Router02(liquidityRouter).swapExactTokensForTokens(\\n        amount[0],\\n        amount[1],\\n        _path,\\n        address(this),\\n        _deadline\\n      )[1];\\n  }\\n\\n  function _addLiquidity(\\n    address[2] memory path,\\n    uint256[4] memory amount,\\n    uint256 _deadline\\n  ) internal {\\n    address _liquidityRouter = liquidityRouter; // gas optimisation\\n    IERC20(path[0]).safeApprove(_liquidityRouter, amount[0]);\\n    IERC20(path[1]).safeApprove(_liquidityRouter, amount[1]);\\n    IUniswapV2Router02(_liquidityRouter).addLiquidity(\\n      path[0],\\n      path[1],\\n      amount[0],\\n      amount[1],\\n      amount[2],\\n      amount[3],\\n      address(this),\\n      _deadline\\n    );\\n  }\\n\\n  function run(\\n    uint256 gasFee,\\n    uint256 _deadline,\\n    uint256[2] memory _outMin\\n  ) external bill(gasFee, \\\"BondappetitSynthetixLPRestake\\\") {\\n    IStaking _staking = staking; // gas optimization\\n    require(_staking.earned(address(this)) > 0, \\\"SynthetixUniswapLpRestake::run: no earned\\\");\\n\\n    _staking.getReward();\\n    address rewardToken = _staking.rewardsToken();\\n    uint256 rewardAmount = IERC20(rewardToken).balanceOf(address(this));\\n    IERC20(rewardToken).safeApprove(liquidityRouter, rewardAmount);\\n\\n    IUniswapV2Pair stakingToken = IUniswapV2Pair(_staking.stakingToken());\\n    address[2] memory tokens = [stakingToken.token0(), stakingToken.token1()];\\n    uint256[4] memory amount = [\\n      _swap([rewardToken, tokens[0]], [rewardAmount / 2, _outMin[0]], _deadline),\\n      _swap([rewardToken, tokens[1]], [rewardAmount - rewardAmount / 2, _outMin[1]], _deadline),\\n      0,\\n      0\\n    ];\\n\\n    _addLiquidity([tokens[0], tokens[1]], amount, _deadline);\\n    uint256 stakingAmount = stakingToken.balanceOf(address(this));\\n    IERC20(stakingToken).safeApprove(address(_staking), stakingAmount);\\n    _staking.stake(stakingAmount);\\n  }\\n}\\n\"\r\n    },\r\n    \"automates/utils/Synthetix/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IStaking {\\n  function rewardsToken() external view returns (address);\\n\\n  function stakingToken() external view returns (address);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function rewardsDuration() external view returns (uint256);\\n\\n  function periodFinish() external view returns (uint256);\\n\\n  function rewardRate() external view returns (uint256);\\n\\n  function balanceOf(address) external view returns (uint256);\\n\\n  function earned(address) external view returns (uint256);\\n\\n  function stake(uint256) external;\\n\\n  function getReward() external;\\n\\n  function withdraw(uint256) external;\\n\\n  function exit() external;\\n\\n  function notifyRewardAmount(uint256) external;\\n}\\n\"\r\n    },\r\n    \"automates/bondappetit/mock/StakingMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../../utils/Synthetix/IStaking.sol\\\";\\n\\n// solhint-disable no-unused-vars\\ncontract StakingMock is IStaking {\\n  address public override rewardsToken;\\n\\n  address public override stakingToken;\\n\\n  uint256 public override periodFinish;\\n\\n  uint256 public override rewardRate;\\n\\n  uint256 public override rewardsDuration;\\n\\n  uint256 public override totalSupply;\\n\\n  mapping(address => uint256) internal _rewards;\\n\\n  mapping(address => uint256) internal _balances;\\n\\n  constructor(\\n    address _rewardsToken,\\n    address _stakingToken,\\n    uint256 _rewardsDuration,\\n    uint256 _rewardRate\\n  ) {\\n    rewardsToken = _rewardsToken;\\n    stakingToken = _stakingToken;\\n    rewardsDuration = _rewardsDuration;\\n    rewardRate = _rewardRate;\\n  }\\n\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  function earned(address account) public view override returns (uint256) {\\n    return _rewards[account];\\n  }\\n\\n  function stake(uint256 amount) external override {\\n    IERC20(stakingToken).transferFrom(msg.sender, address(this), amount);\\n    _balances[msg.sender] += amount;\\n    totalSupply += amount;\\n  }\\n\\n  function withdraw(uint256 amount) public override {\\n    require(balanceOf(msg.sender) >= amount, \\\"withdraw: transfer amount exceeds balance\\\");\\n\\n    _balances[msg.sender] -= amount;\\n    totalSupply -= amount;\\n    IERC20(stakingToken).transfer(msg.sender, amount);\\n  }\\n\\n  function getReward() public override {\\n    uint256 reward = _rewards[msg.sender];\\n    require(reward > 0, \\\"getReward: transfer amount exceeds balance\\\");\\n\\n    _rewards[msg.sender] = 0;\\n    IERC20(rewardsToken).transfer(msg.sender, reward);\\n  }\\n\\n  function exit() external override {\\n    withdraw(balanceOf(msg.sender));\\n    getReward();\\n  }\\n\\n  function notifyRewardAmount(uint256 reward) external override {\\n    IERC20(rewardsToken).transferFrom(msg.sender, address(this), reward);\\n    _rewards[msg.sender] += reward;\\n    periodFinish = block.number + rewardsDuration;\\n  }\\n\\n  function setReward(address account, uint256 amount) external {\\n    _rewards[account] += amount;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"automates/mock/EthStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract EthStaking {\\n  IERC20 public stakingToken;\\n\\n  mapping(address => uint256) public balanceOf;\\n\\n  uint256 public totalSupply;\\n\\n  event Deposit(address account, uint256 amount);\\n\\n  event Withdraw(address account, uint256 amount);\\n\\n  constructor(address _stakingToken) {\\n    stakingToken = IERC20(_stakingToken);\\n  }\\n\\n  function deposit(uint256 amount) external {\\n    stakingToken.transferFrom(msg.sender, address(this), amount);\\n    balanceOf[msg.sender] += amount;\\n    totalSupply += amount;\\n\\n    emit Deposit(msg.sender, amount);\\n  }\\n\\n  function withdraw(uint256 amount) external {\\n    balanceOf[msg.sender] -= amount;\\n    totalSupply -= amount;\\n    stakingToken.transfer(msg.sender, amount);\\n\\n    emit Withdraw(msg.sender, amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"automates/mock/EthAutomate.automate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./EthStaking.sol\\\";\\nimport \\\"../utils/DFH/Automate.sol\\\";\\n\\ncontract EthAutomate is Automate {\\n  EthStaking public staking;\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _info) Automate(_info) {}\\n\\n  event Run(uint256 amount);\\n\\n  function init(address _staking) external initializer {\\n    staking = EthStaking(_staking);\\n  }\\n\\n  function deposit() external onlyOwner {\\n    IERC20 token = IERC20(staking.stakingToken());\\n    uint256 balance = token.balanceOf(address(this));\\n    token.approve(address(staking), balance);\\n    staking.deposit(balance);\\n  }\\n\\n  function refund() external onlyOwner {\\n    staking.withdraw(staking.balanceOf(address(this)));\\n    IERC20 token = IERC20(staking.stakingToken());\\n    token.transfer(owner(), token.balanceOf(address(this)));\\n  }\\n\\n  function run(uint256 gasFee) external bill(gasFee, \\\"MockEthAutomate\\\") {\\n    uint256 balance = staking.balanceOf(address(this));\\n    staking.withdraw(balance);\\n    \\n    IERC20 token = IERC20(staking.stakingToken());\\n    token.approve(address(staking), balance);\\n    staking.deposit(balance);\\n\\n    emit Run(balance);\\n  }\\n}\\n\"\r\n    },\r\n    \"automates/utils/DFH/mock/AutomateMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"../Automate.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n// solhint-disable avoid-tx-origin\\ncontract AutomateMock is Automate {\\n  address public staking;\\n\\n  uint256 public pool;\\n\\n  constructor(address _info) Automate(_info) {}\\n\\n  function init(address _staking, uint256 _pool) external initializer {\\n    require(!_initialized || staking == _staking, \\\"AutomateMock::init: reinitialize staking address forbidden\\\");\\n    staking = _staking;\\n    pool = _pool;\\n  }\\n\\n  function run(\\n    uint256 gasFee,\\n    uint256 x,\\n    uint256 y\\n  ) external bill(gasFee, \\\"AutomateMock.run\\\") returns (uint256) {\\n    return x + y;\\n  }\\n}\\n\"\r\n    },\r\n    \"automates/curve/GaugeUniswapRestake.automate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../utils/DFH/Automate.sol\\\";\\nimport \\\"../utils/Curve/IRegistry.sol\\\";\\nimport \\\"../utils/Curve/IGauge.sol\\\";\\nimport \\\"../utils/Curve/IMinter.sol\\\";\\nimport \\\"../utils/Curve/IPlainPool.sol\\\";\\nimport \\\"../utils/Curve/IMetaPool.sol\\\";\\nimport \\\"../utils/Uniswap/IUniswapV2Router02.sol\\\";\\nimport {ERC20Tools} from \\\"../utils/ERC20Tools.sol\\\";\\n\\n// solhint-disable not-rely-on-time\\ncontract GaugeUniswapRestake is Automate {\\n  using ERC20Tools for IERC20;\\n\\n  IGauge public staking;\\n\\n  address public liquidityRouter;\\n\\n  address public swapToken;\\n\\n  uint16 public slippage;\\n\\n  uint16 public deadline;\\n\\n  IERC20 internal _lpToken;\\n\\n  address internal _pool;\\n\\n  uint8 internal _swapTokenN;\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _info) Automate(_info) {}\\n\\n  function init(\\n    address _staking,\\n    address _liquidityRouter,\\n    address _swapToken,\\n    uint16 _slippage,\\n    uint16 _deadline\\n  ) external initializer {\\n    require(\\n      !_initialized || address(staking) == _staking,\\n      \\\"GaugeUniswapRestake::init: reinitialize staking address forbidden\\\"\\n    );\\n    staking = IGauge(_staking);\\n    require(\\n      !_initialized || liquidityRouter == _liquidityRouter,\\n      \\\"GaugeUniswapRestake::init: reinitialize liquidity router address forbidden\\\"\\n    );\\n    liquidityRouter = _liquidityRouter;\\n    swapToken = _swapToken;\\n    slippage = _slippage;\\n    deadline = _deadline;\\n\\n    if (!_initialized) {\\n      IRegistry registry = IRegistry(_registry());\\n      _lpToken = IERC20(staking.lp_token());\\n      _pool = registry.get_pool_from_lp_token(address(_lpToken));\\n      address[8] memory coins = registry.get_coins(_pool);\\n      uint256 nCoinsPool = registry.get_n_coins(_pool);\\n\\n      for (; _swapTokenN <= nCoinsPool; _swapTokenN++) {\\n        require(_swapTokenN < nCoinsPool, \\\"GaugeUniswapRestake::init: invalid swap token address\\\");\\n        if (coins[_swapTokenN] == _swapToken) break;\\n      }\\n    }\\n  }\\n\\n  function _registry() internal view returns (address) {\\n    return IStorage(info()).getAddress(keccak256(\\\"Curve:Contract:Registry\\\"));\\n  }\\n\\n  function deposit() external onlyOwner {\\n    IERC20 lpToken = _lpToken; // gas optimisation\\n    uint256 balance = lpToken.balanceOf(address(this));\\n    lpToken.safeApprove(address(staking), balance);\\n    staking.deposit(balance);\\n  }\\n\\n  function refund() external onlyOwner {\\n    address __owner = owner(); // gas optimisation\\n\\n    IGauge _staking = staking; // gas optimisation\\n    uint256 stakingBalance = _staking.balanceOf(address(this));\\n    if (stakingBalance > 0) {\\n      _staking.withdraw(stakingBalance);\\n    }\\n    uint256 lpBalance = _lpToken.balanceOf(address(this));\\n    if (lpBalance > 0) {\\n      _lpToken.transfer(__owner, lpBalance);\\n    }\\n\\n    IMinter _minter = IMinter(staking.minter());\\n    _minter.mint(address(_staking));\\n\\n    IERC20 rewardToken = IERC20(_staking.crv_token());\\n    uint256 rewardBalance = rewardToken.balanceOf(address(this));\\n    if (rewardBalance > 0) {\\n      rewardToken.transfer(__owner, rewardBalance);\\n    }\\n  }\\n\\n  function _swap(\\n    address[2] memory path,\\n    uint256 amount,\\n    uint256 minOut,\\n    uint256 _deadline\\n  ) internal returns (uint256) {\\n    address[] memory _path = new address[](2);\\n    _path[0] = path[0];\\n    _path[1] = path[1];\\n\\n    return\\n      IUniswapV2Router02(liquidityRouter).swapExactTokensForTokens(amount, minOut, _path, address(this), _deadline)[1];\\n  }\\n\\n  function calcTokenAmount(uint256 amount) external view returns (uint256) {\\n    address pool = _pool; // gas optimization\\n    IRegistry registry = IRegistry(_registry());\\n\\n    if (registry.get_n_coins(pool) == 3) {\\n      uint256[3] memory amountIn;\\n      amountIn[_swapTokenN] = amount;\\n      return IPlainPool(pool).calc_token_amount(amountIn, true);\\n    } else {\\n      uint256[2] memory amountIn;\\n      amountIn[_swapTokenN] = amount;\\n      return IMetaPool(pool).calc_token_amount(amountIn, true);\\n    }\\n  }\\n\\n  function _addLiquidity(\\n    address pool,\\n    uint256 amount,\\n    uint256 minOut\\n  ) internal {\\n    IRegistry registry = IRegistry(_registry());\\n\\n    if (registry.get_n_coins(pool) == 3) {\\n      uint256[3] memory amountIn;\\n      amountIn[_swapTokenN] = amount;\\n      IPlainPool(pool).add_liquidity(amountIn, minOut);\\n    } else {\\n      uint256[2] memory amountIn;\\n      amountIn[_swapTokenN] = amount;\\n      IMetaPool(pool).add_liquidity(amountIn, minOut);\\n    }\\n  }\\n\\n  function run(\\n    uint256 gasFee,\\n    uint256 _deadline,\\n    uint256 swapOutMin,\\n    uint256 lpOutMin\\n  ) external bill(gasFee, \\\"CurveGaugeUniswapRestake\\\") {\\n    IGauge _staking = staking; // gas optimization\\n\\n    IMinter _minter = IMinter(_staking.minter());\\n    _minter.mint(address(_staking));\\n    address rewardToken = _staking.crv_token();\\n    uint256 rewardAmount = IERC20(rewardToken).balanceOf(address(this));\\n\\n    IERC20(rewardToken).safeApprove(liquidityRouter, rewardAmount);\\n    uint256 amount = _swap([rewardToken, swapToken], rewardAmount, swapOutMin, _deadline);\\n    IERC20(swapToken).safeApprove(_pool, amount);\\n    _addLiquidity(_pool, amount, lpOutMin);\\n\\n    uint256 lpAmount = _lpToken.balanceOf(address(this));\\n    _lpToken.safeApprove(address(_staking), lpAmount);\\n    _staking.deposit(lpAmount);\\n  }\\n}\\n\"\r\n    },\r\n    \"automates/utils/Curve/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IRegistry {\\n  function get_n_coins(address pool) external view returns (uint256);\\n\\n  function get_coins(address pool) external view returns (address[8] memory);\\n\\n  function get_pool_from_lp_token(address) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"automates/utils/Curve/IGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IGauge {\\n  function minter() external view returns (address);\\n\\n  function crv_token() external view returns (address);\\n\\n  function lp_token() external view returns (address);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function deposit(uint256 amount) external;\\n\\n  function deposit(uint256 amount, address recipient) external;\\n\\n  function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"automates/utils/Curve/IMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IMinter {\\n  function minted(address wallet, address gauge) external view returns (uint256);\\n\\n  function mint(address gauge) external;\\n}\\n\"\r\n    },\r\n    \"automates/utils/Curve/IPlainPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IPlainPool {\\n  function calc_token_amount(uint256[3] memory amounts, bool isDeposit) external view returns (uint256);\\n\\n  function add_liquidity(uint256[3] memory amounts, uint256 minMint) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"automates/utils/Curve/IMetaPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IMetaPool {\\n  function calc_token_amount(uint256[2] memory amounts, bool isDeposit) external view returns (uint256);\\n\\n  function add_liquidity(uint256[2] memory amounts, uint256 minMint) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"automates/curve/mock/MetaPoolMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"../../utils/Curve/IMetaPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\ncontract MetaPoolMock is IMetaPool {\\n  address public lpToken;\\n\\n  address[2] public tokens;\\n\\n  constructor(address _lpToken, address[2] memory _tokens) {\\n    lpToken = _lpToken;\\n    tokens = _tokens;\\n  }\\n\\n  function calc_token_amount(uint256[2] memory amounts, bool) external pure override returns (uint256 minted) {\\n    for (uint8 i = 0; i < 2; i++) {\\n      minted += amounts[i];\\n    }\\n  }\\n\\n  function add_liquidity(uint256[2] memory amounts, uint256) external override returns (uint256 minted) {\\n    for (uint8 i = 0; i < 2; i++) {\\n      IERC20 token = IERC20(tokens[i]);\\n      if (amounts[i] > 0) {\\n        require(token.allowance(msg.sender, address(this)) >= amounts[i], \\\"MetaPoolMock::add_liquidity: token not allowance\\\");\\n        token.transferFrom(msg.sender, address(this), amounts[i]);\\n      }\\n      minted += amounts[i];\\n    }\\n    IERC20(lpToken).transfer(msg.sender, minted);\\n  }\\n}\\n\"\r\n    },\r\n    \"automates/curve/mock/PlainPoolMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"../../utils/Curve/IPlainPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\ncontract PlainPoolMock is IPlainPool {\\n  address public lpToken;\\n\\n  address[3] public tokens;\\n\\n  constructor(address _lpToken, address[3] memory _tokens) {\\n    lpToken = _lpToken;\\n    tokens = _tokens;\\n  }\\n\\n  function calc_token_amount(uint256[3] memory amounts, bool) external pure override returns (uint256 minted) {\\n    for (uint8 i = 0; i < 3; i++) {\\n      minted += amounts[i];\\n    }\\n  }\\n\\n  function add_liquidity(uint256[3] memory amounts, uint256) external override returns (uint256 minted) {\\n    for (uint8 i = 0; i < 3; i++) {\\n      IERC20 token = IERC20(tokens[i]);\\n      if (amounts[i] > 0) {\\n        require(token.allowance(msg.sender, address(this)) >= amounts[i], \\\"PlainPoolMock::add_liquidity: token not allowance\\\");\\n        token.transferFrom(msg.sender, address(this), amounts[i]);\\n      }\\n      minted += amounts[i];\\n    }\\n    IERC20(lpToken).transfer(msg.sender, minted);\\n  }\\n}\\n\"\r\n    },\r\n    \"automates/curve/mock/MinterMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../utils/Curve/IMinter.sol\\\";\\n\\ncontract MinterMock is IMinter {\\n  IERC20 public crv;\\n\\n  mapping(address => mapping(address => uint256)) public override minted;\\n\\n  constructor(address _crv) {\\n    crv = IERC20(_crv);\\n  }\\n\\n  function setMinted(\\n    address wallet,\\n    address gauge,\\n    uint256 amount\\n  ) external {\\n    minted[wallet][gauge] = amount;\\n  }\\n\\n  function mint(address gauge) external override {\\n    uint256 amount = minted[msg.sender][gauge];\\n    minted[msg.sender][gauge] = 0;\\n    crv.transfer(msg.sender, amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"automates/curve/mock/GaugeMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"../../utils/Curve/IGauge.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\ncontract GaugeMock is IGauge {\\n  address public override minter;\\n\\n  address public override crv_token;\\n\\n  address public override lp_token;\\n\\n  uint256 public override totalSupply;\\n\\n  mapping(address => uint256) public override balanceOf;\\n\\n  constructor(\\n    address _minter,\\n    address _crvToken,\\n    address _lpToken\\n  ) {\\n    minter = _minter;\\n    crv_token = _crvToken;\\n    lp_token = _lpToken;\\n  }\\n\\n  function deposit(uint256 amount, address recipient) public override {\\n    IERC20(lp_token).transferFrom(msg.sender, address(this), amount);\\n    balanceOf[recipient] += amount;\\n    totalSupply += amount;\\n  }\\n\\n  function deposit(uint256 amount) external override {\\n    deposit(amount, msg.sender);\\n  }\\n\\n  function withdraw(uint256 amount) external override {\\n    balanceOf[msg.sender] -= amount;\\n    totalSupply -= amount;\\n    IERC20(lp_token).transfer(msg.sender, amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"automates/curve/mock/RegistryMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"../../utils/Curve/IRegistry.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\ncontract RegistryMock is IRegistry {\\n  struct Pool {\\n    uint256 n;\\n    address[8] coins;\\n    address lp;\\n  }\\n\\n  mapping(address => Pool) internal _pools;\\n\\n  address[] internal _addedPools;\\n\\n  function addPool(address pool, Pool memory data) external {\\n    _pools[pool] = data;\\n    _addedPools.push(pool);\\n  }\\n\\n  function get_n_coins(address pool) external view override returns (uint256) {\\n    return _pools[pool].n;\\n  }\\n\\n  function get_coins(address pool) external view override returns (address[8] memory) {\\n    return _pools[pool].coins;\\n  }\\n\\n  function get_pool_from_lp_token(address lpToken) external view override returns (address pool) {\\n    for (uint256 i = 0; i < _addedPools.length; i++) {\\n      if (_pools[_addedPools[i]].lp == lpToken) pool = _addedPools[i];\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"automates/utils/DFH/proxy/ProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"./ERC1167.sol\\\";\\n\\ncontract ProxyFactory {\\n  using ERC1167 for address;\\n\\n  event ProxyCreated(address indexed prototype, address indexed proxy);\\n\\n  /**\\n   * @notice Create proxy contract by prototype.\\n   * @param prototype Address of prototype contract.\\n   * @param args Encoded call to the init function.\\n   */\\n  function create(address prototype, bytes memory args) external returns (address proxy) {\\n    proxy = prototype.clone();\\n\\n    if (args.length > 0) {\\n      // solhint-disable-next-line avoid-low-level-calls\\n      (bool success, ) = proxy.call(args);\\n      require(success, \\\"ProxyFactory::create: proxy initialization failed\\\");\\n    }\\n\\n    emit ProxyCreated(prototype, proxy);\\n  }\\n}\\n\"\r\n    },\r\n    \"automates/bondappetit/mock/UniswapV2RouterMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// solhint-disable no-unused-vars\\ncontract UniswapV2RouterMock {\\n  mapping(bytes32 => uint256[]) internal _amountsOut;\\n  address internal _pair;\\n\\n  constructor(address pair) {\\n    _pair = pair;\\n  }\\n\\n  function setAmountsOut(address[] calldata path, uint256[] calldata amountsOut) external {\\n    _amountsOut[keccak256(abi.encodePacked(path))] = amountsOut;\\n  }\\n\\n  function getAmountsOut(uint256, address[] calldata path) external view returns (uint256[] memory amounts) {\\n    amounts = _amountsOut[keccak256(abi.encodePacked(path))];\\n  }\\n\\n  function swapExactTokensForTokens(\\n    uint256,\\n    uint256,\\n    address[] calldata path,\\n    address,\\n    uint256\\n  ) external returns (uint256[] memory amounts) {\\n    amounts = _amountsOut[keccak256(abi.encodePacked(path))];\\n    IERC20(path[path.length - 1]).transfer(msg.sender, amounts[amounts.length - 1]);\\n  }\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256,\\n    uint256,\\n    address,\\n    uint256\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    )\\n  {\\n    IERC20(tokenA).transferFrom(msg.sender, address(this), amountADesired);\\n    IERC20(tokenB).transferFrom(msg.sender, address(this), amountBDesired);\\n    amountA = amountADesired;\\n    amountB = amountBDesired;\\n    liquidity = IERC20(_pair).balanceOf(address(this));\\n    IERC20(_pair).transfer(msg.sender, liquidity);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"automates/utils/ERC20Mock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract ERC20Mock is ERC20 {\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    uint256 initialSupply\\n  ) ERC20(name, symbol) {\\n    if (initialSupply > 0) _mint(_msgSender(), initialSupply);\\n  }\\n\\n  function mint(address account, uint256 amount) external {\\n    _mint(account, amount);\\n  }\\n\\n  function burn(address account, uint256 amount) external {\\n    _burn(account, amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"automates/bondappetit/mock/UniswapV2PairMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"../../utils/ERC20Mock.sol\\\";\\n\\ncontract UniswapV2PairMock is ERC20Mock {\\n  address public token0;\\n  address public token1;\\n\\n  constructor(\\n    address _token0,\\n    address _token1,\\n    uint256 initialSupply\\n  ) ERC20Mock(\\\"Uniswap V2\\\", \\\"UNI-V2\\\", initialSupply) {\\n    token0 = _token0;\\n    token1 = _token1;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"libraries\": {\r\n      \"automates/utils/DFH/proxy/ERC1167.sol\": {\r\n        \"ERC1167\": \"0x7ecFCbdeb6f195030B9Bf2ECc402f6d5433d116D\"\r\n      }\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_info\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"protocolFee\",\"type\":\"int256\"}],\"name\":\"ProtocolFeeChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"__protocolFee\",\"type\":\"int256\"}],\"name\":\"changeProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityRouter\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_slippage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_deadline\",\"type\":\"uint16\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_outMin\",\"type\":\"uint256[2]\"}],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SynthetixUniswapLpRestake","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"0000000000000000000000005ae235502bf1de231afd75364670d50e3c3694a6","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"none"}]}