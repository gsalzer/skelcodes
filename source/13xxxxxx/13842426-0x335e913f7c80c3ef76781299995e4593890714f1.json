{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/KeyUpgrade.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract KeyUpgrade is Ownable {\\n  WMinter public minter;\\n\\n  mapping(uint => uint) public watcherId;\\n  mapping(uint => address) public raribleContracts;\\n  mapping(uint => bool) public isERC721;\\n\\n  uint256 STELLAR_KEY_ID = 38;\\n  uint256 DATA_KEY_ID = 36;\\n\\n  constructor(address _minterAddress, uint256[] memory _raribleTokenIds, uint256[] memory _watcherTokenIds, address[] memory _raribleContracts, bool[] memory _isERC721) {\\n    minter = WMinter(_minterAddress);\\n\\n    for (uint i = 0; i < _raribleTokenIds.length; i++) {\\n      watcherId[_raribleTokenIds[i]] = _watcherTokenIds[i];\\n      raribleContracts[_raribleTokenIds[i]] = _raribleContracts[i];\\n      isERC721[_raribleTokenIds[i]] = _isERC721[i];\\n    }\\n  }\\n\\n  function upgradeKey(uint256 _raribleTokenId, uint256 _amount) external {\\n    require(minter.balanceOf(msg.sender, DATA_KEY_ID) >= _amount, \\\"User does not own enough DATA keys\\\");\\n\\n    transferWatcher(_raribleTokenId, _amount);\\n\\n    uint256[] memory burnIds = new uint256[](1);\\n    uint256[] memory amounts = new uint256[](1);\\n    uint256[] memory mintIds = new uint256[](1);\\n\\n    burnIds[0] = DATA_KEY_ID;\\n    mintIds[0] = STELLAR_KEY_ID;\\n    amounts[0] = _amount;\\n\\n    minter.burnForMint(msg.sender, burnIds, amounts, mintIds, amounts);\\n  }\\n\\n  function transferWatcher(uint256 _raribleTokenId, uint256 _amount) public {\\n    address _raribleContract = raribleContracts[_raribleTokenId];\\n    bool _isERC721 = isERC721[_raribleTokenId];\\n\\n    require(_amount > 0, \\\"Amount must be greater than zero\\\");\\n    require(_raribleContract != address(0), \\\"Address cannot be null\\\");\\n    require(watcherId[_raribleTokenId] != 0, \\\"Invalid Rarible token ID\\\");\\n\\n    if (_isERC721) {\\n      RaribleERC721 raribleERC721 = RaribleERC721(_raribleContract);\\n      \\n      require(raribleERC721.isApprovedForAll(msg.sender, address(this)) == true, \\\"Contract is not authorized\\\");\\n      require(raribleERC721.ownerOf(_raribleTokenId) == msg.sender, \\\"User does not own this NFT\\\");\\n      require(_amount == 1, \\\"ERC721 can only burn 1\\\");\\n\\n      raribleERC721.burn(_raribleTokenId);\\n    } else {\\n      RaribleERC1155 raribleERC1155 = RaribleERC1155(_raribleContract);\\n\\n      require(raribleERC1155.isApprovedForAll(msg.sender, address(this)) == true, \\\"Contract is not authorized\\\");\\n      require(raribleERC1155.balanceOf(msg.sender, _raribleTokenId) >= _amount, \\\"User does not own this quantity of NFTs\\\");\\n\\n      raribleERC1155.burn(msg.sender, _raribleTokenId, _amount);\\n    }\\n\\n    uint256 watcherTokenId = watcherId[_raribleTokenId];\\n    minter.mint(msg.sender, watcherTokenId, _amount);\\n  }\\n\\n  function setWatcher(uint256 _raribleTokenId, uint256 _watcherTokenId, address _raribleContract, bool _isERC721) external onlyOwner() {\\n    watcherId[_raribleTokenId] = _watcherTokenId;\\n    raribleContracts[_raribleTokenId] = _raribleContract;\\n    isERC721[_raribleTokenId] = _isERC721;\\n  }\\n}\\n\\nabstract contract RaribleERC721 {\\n  function isApprovedForAll(address _owner, address _operator) virtual public view returns (bool);\\n  function ownerOf(uint256 _tokenId) virtual public view returns (address);\\n  function burn(uint256 _tokenId) virtual public;\\n}\\n\\nabstract contract RaribleERC1155 {\\n  function isApprovedForAll(address _owner, address _operator) virtual public view returns (bool);\\n  function balanceOf(address _owner, uint256 _id) virtual public view returns (uint256);\\n  function burn(address _owner, uint256 _id, uint256 _value) virtual public;\\n}\\n\\nabstract contract WMinter {\\n  function balanceOf(address _account, uint256 _id) virtual public view returns (uint256);\\n  function balanceOfBatch(address[] memory _accounts, uint256[] memory _ids) virtual public view returns (uint256[] memory);\\n\\n  function mint(address _to, uint256 _id, uint256 _amount) virtual public;\\n  function burnForMint(address _from, uint[] memory _burnIds, uint[] memory _burnAmounts, uint[] memory _mintIds, uint[] memory _mintAmounts) virtual public;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_raribleTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_watcherTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_raribleContracts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isERC721\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isERC721\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"contract WMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raribleContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raribleTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_watcherTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_raribleContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isERC721\",\"type\":\"bool\"}],\"name\":\"setWatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raribleTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferWatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raribleTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"upgradeKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"watcherId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"KeyUpgrade","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000236672ed575e1e479b8e101aeeb920f32361f6f900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}