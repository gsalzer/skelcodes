{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Projects/Chainenable/iTrust/iTrust/contracts/contracts/phase1/3rdParty/BokkyPooBahsDateTimeLibrary.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.5;\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// BokkyPooBah's DateTime Library v1.01\\r\\n//\\r\\n// A gas-efficient Solidity date and time library\\r\\n//\\r\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\r\\n//\\r\\n// Tested date range 1970/01/01 to 2345/12/31\\r\\n//\\r\\n// Conventions:\\r\\n// Unit      | Range         | Notes\\r\\n// :-------- |:-------------:|:-----\\r\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\r\\n// year      | 1970 ... 2345 |\\r\\n// month     | 1 ... 12      |\\r\\n// day       | 1 ... 31      |\\r\\n// hour      | 0 ... 23      |\\r\\n// minute    | 0 ... 59      |\\r\\n// second    | 0 ... 59      |\\r\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\r\\n//\\r\\n//\\r\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\r\\n// ----------------------------------------------------------------------------\\r\\n\\r\\nlibrary BokkyPooBahsDateTimeLibrary {\\r\\n\\r\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\r\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\r\\n    uint constant SECONDS_PER_MINUTE = 60;\\r\\n    int constant OFFSET19700101 = 2440588;\\r\\n\\r\\n    uint constant DOW_MON = 1;\\r\\n    uint constant DOW_TUE = 2;\\r\\n    uint constant DOW_WED = 3;\\r\\n    uint constant DOW_THU = 4;\\r\\n    uint constant DOW_FRI = 5;\\r\\n    uint constant DOW_SAT = 6;\\r\\n    uint constant DOW_SUN = 7;\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\r\\n    // the date conversion algorithm from\\r\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\r\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\r\\n    //\\r\\n    // days = day\\r\\n    //      - 32075\\r\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\r\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\r\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\r\\n    //      - offset\\r\\n    // ------------------------------------------------------------------------\\r\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\r\\n        require(year >= 1970);\\r\\n        int _year = int(year);\\r\\n        int _month = int(month);\\r\\n        int _day = int(day);\\r\\n\\r\\n        int __days = _day\\r\\n          - 32075\\r\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\r\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\r\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\r\\n          - OFFSET19700101;\\r\\n\\r\\n        _days = uint(__days);\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\r\\n    // the date conversion algorithm from\\r\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\r\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\r\\n    //\\r\\n    // int L = days + 68569 + offset\\r\\n    // int N = 4 * L / 146097\\r\\n    // L = L - (146097 * N + 3) / 4\\r\\n    // year = 4000 * (L + 1) / 1461001\\r\\n    // L = L - 1461 * year / 4 + 31\\r\\n    // month = 80 * L / 2447\\r\\n    // dd = L - 2447 * month / 80\\r\\n    // L = month / 11\\r\\n    // month = month + 2 - 12 * L\\r\\n    // year = 100 * (N - 49) + year + L\\r\\n    // ------------------------------------------------------------------------\\r\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\r\\n        int __days = int(_days);\\r\\n\\r\\n        int L = __days + 68569 + OFFSET19700101;\\r\\n        int N = 4 * L / 146097;\\r\\n        L = L - (146097 * N + 3) / 4;\\r\\n        int _year = 4000 * (L + 1) / 1461001;\\r\\n        L = L - 1461 * _year / 4 + 31;\\r\\n        int _month = 80 * L / 2447;\\r\\n        int _day = L - 2447 * _month / 80;\\r\\n        L = _month / 11;\\r\\n        _month = _month + 2 - 12 * L;\\r\\n        _year = 100 * (N - 49) + _year + L;\\r\\n\\r\\n        year = uint(_year);\\r\\n        month = uint(_month);\\r\\n        day = uint(_day);\\r\\n    }\\r\\n\\r\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\r\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\r\\n    }\\r\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\r\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\r\\n    }\\r\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\r\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\r\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        uint secs = timestamp % SECONDS_PER_DAY;\\r\\n        hour = secs / SECONDS_PER_HOUR;\\r\\n        secs = secs % SECONDS_PER_HOUR;\\r\\n        minute = secs / SECONDS_PER_MINUTE;\\r\\n        second = secs % SECONDS_PER_MINUTE;\\r\\n    }\\r\\n\\r\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\r\\n        if (year >= 1970 && month > 0 && month <= 12) {\\r\\n            uint daysInMonth = _getDaysInMonth(year, month);\\r\\n            if (day > 0 && day <= daysInMonth) {\\r\\n                valid = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\r\\n        if (isValidDate(year, month, day)) {\\r\\n            if (hour < 24 && minute < 60 && second < 60) {\\r\\n                valid = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\r\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        leapYear = _isLeapYear(year);\\r\\n    }\\r\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\r\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\r\\n    }\\r\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\r\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\r\\n    }\\r\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\r\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\r\\n    }\\r\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\r\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        daysInMonth = _getDaysInMonth(year, month);\\r\\n    }\\r\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\r\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\r\\n            daysInMonth = 31;\\r\\n        } else if (month != 2) {\\r\\n            daysInMonth = 30;\\r\\n        } else {\\r\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\r\\n        }\\r\\n    }\\r\\n    // 1 = Monday, 7 = Sunday\\r\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\r\\n        uint _days = timestamp / SECONDS_PER_DAY;\\r\\n        dayOfWeek = (_days + 3) % 7 + 1;\\r\\n    }\\r\\n\\r\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\r\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\r\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\r\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\r\\n        uint secs = timestamp % SECONDS_PER_DAY;\\r\\n        hour = secs / SECONDS_PER_HOUR;\\r\\n    }\\r\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\r\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\r\\n        minute = secs / SECONDS_PER_MINUTE;\\r\\n    }\\r\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\r\\n        second = timestamp % SECONDS_PER_MINUTE;\\r\\n    }\\r\\n\\r\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        year += _years;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        month += _months;\\r\\n        year += (month - 1) / 12;\\r\\n        month = (month - 1) % 12 + 1;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _seconds;\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n\\r\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        year -= _years;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\r\\n        year = yearMonth / 12;\\r\\n        month = yearMonth % 12 + 1;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _seconds;\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n\\r\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\r\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\r\\n        _years = toYear - fromYear;\\r\\n    }\\r\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\r\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\r\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\r\\n    }\\r\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\r\\n    }\\r\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\r\\n    }\\r\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\r\\n    }\\r\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        _seconds = toTimestamp - fromTimestamp;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/C/Projects/Chainenable/iTrust/iTrust/contracts/contracts/phase1/iTrustVaultFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport \\\"./vaults/StakingData.sol\\\";\\r\\n\\r\\ncontract ITrustVaultFactory is Initializable {\\r\\n  \\r\\n  address[] internal _VaultProxies;\\r\\n  mapping (address => bool) internal _AdminList;\\r\\n  mapping (address => bool) internal _TrustedSigners;\\r\\n  mapping(address => bool) internal _VaultStatus;\\r\\n  address internal _roundDataImplementationAddress;\\r\\n  address internal _stakeDataImplementationAddress;\\r\\n  address internal _stakingDataAddress;\\r\\n  address internal _burnAddress;\\r\\n  address internal _governanceDistributionAddress;\\r\\n  address internal _governanceTokenAddress;\\r\\n  address internal _stakingCalculationAddress;\\r\\n\\r\\n  function initialize(\\r\\n      address admin, \\r\\n      address trustedSigner, \\r\\n      address roundDataImplementationAddress, \\r\\n      address stakeDataImplementationAddress, \\r\\n      address governanceTokenAddress,\\r\\n      address stakingCalculationAddress\\r\\n    ) initializer external {\\r\\n    require(admin != address(0));\\r\\n    _AdminList[admin] = true;\\r\\n    _AdminList[msg.sender] = true;\\r\\n    _TrustedSigners[trustedSigner] = true;\\r\\n    _roundDataImplementationAddress = roundDataImplementationAddress;\\r\\n    _stakeDataImplementationAddress = stakeDataImplementationAddress;\\r\\n    _governanceTokenAddress = governanceTokenAddress;\\r\\n    _stakingCalculationAddress = stakingCalculationAddress;\\r\\n  }\\r\\n\\r\\n  modifier onlyAdmin() {\\r\\n    require(_AdminList[msg.sender] == true, \\\"Not Factory Admin\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function createVault(\\r\\n    address contractAddress, \\r\\n    bytes memory data\\r\\n  ) external onlyAdmin {\\r\\n    TransparentUpgradeableProxy proxy = new TransparentUpgradeableProxy(contractAddress, msg.sender, data );\\r\\n    require(address(proxy) != address(0));\\r\\n    _VaultProxies.push(address(proxy));\\r\\n    _VaultStatus[address(proxy)] = true;\\r\\n    StakingData stakingDataContract = StakingData(_stakingDataAddress);\\r\\n    stakingDataContract.addVault(address(proxy));\\r\\n  }\\r\\n\\r\\n  function getVaultaddresses() external view returns (address[] memory vaults, bool[] memory status) {\\r\\n\\r\\n    vaults = _VaultProxies;\\r\\n    status = new bool[](vaults.length);\\r\\n\\r\\n    for(uint i = 0; i < vaults.length; i++){\\r\\n      status[i] = _VaultStatus[vaults[i]];\\r\\n    }\\r\\n\\r\\n    return (vaults, status);\\r\\n  }\\r\\n\\r\\n  function pauseVault(address vaultAddress) external onlyAdmin {\\r\\n    _VaultStatus[vaultAddress] = false;\\r\\n  }\\r\\n\\r\\n  function unPauseVault(address vaultAddress) external onlyAdmin {\\r\\n    _VaultStatus[vaultAddress] = true;\\r\\n  }\\r\\n\\r\\n  function addAdminAddress(address newAddress) external onlyAdmin {\\r\\n      require(_AdminList[newAddress] == false, \\\"Already Admin\\\");\\r\\n      _AdminList[newAddress] = true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev revoke admin\\r\\n    */\\r\\n  function revokeAdminAddress(address newAddress) external onlyAdmin {\\r\\n      require(msg.sender != newAddress);\\r\\n      _AdminList[newAddress] = false;\\r\\n  }\\r\\n\\r\\n  function addTrustedSigner(address newAddress) external onlyAdmin{\\r\\n      require(_TrustedSigners[newAddress] == false);\\r\\n      _TrustedSigners[newAddress] = true;\\r\\n  }\\r\\n\\r\\n  function isTrustedSignerAddress(address account) external view returns (bool) {\\r\\n      return _TrustedSigners[account] == true;\\r\\n  }\\r\\n\\r\\n  function updateRoundDataImplementationAddress(address newAddress) external onlyAdmin {\\r\\n      _roundDataImplementationAddress = newAddress;\\r\\n  }\\r\\n\\r\\n  function getRoundDataImplementationAddress() external view returns(address){\\r\\n      return _roundDataImplementationAddress;\\r\\n  }\\r\\n\\r\\n  function updateStakeDataImplementationAddress(address newAddress) external onlyAdmin {\\r\\n      _stakeDataImplementationAddress = newAddress;\\r\\n  }\\r\\n\\r\\n  function getStakeDataImplementationAddress() external view returns(address){\\r\\n      return _stakeDataImplementationAddress;\\r\\n  }\\r\\n\\r\\n  function updateStakingDataAddress(address newAddress) external onlyAdmin {\\r\\n      _stakingDataAddress = newAddress;\\r\\n  }\\r\\n\\r\\n  function getStakingDataAddress() external view returns(address){\\r\\n      return _stakingDataAddress;\\r\\n  }\\r\\n\\r\\n  function isStakingDataAddress(address addressToCheck) external view returns (bool) {\\r\\n      return _stakingDataAddress == addressToCheck;\\r\\n  }\\r\\n\\r\\n  function updateBurnAddress(address newAddress) external onlyAdmin {\\r\\n      _burnAddress = newAddress;\\r\\n  }\\r\\n\\r\\n  function getBurnAddress() external view returns(address){\\r\\n      return _burnAddress;\\r\\n  }\\r\\n\\r\\n  function isBurnAddress(address addressToCheck) external view returns (bool) {\\r\\n      return _burnAddress == addressToCheck;\\r\\n  }\\r\\n\\r\\n  function updateGovernanceDistributionAddress(address newAddress) external onlyAdmin {\\r\\n      _governanceDistributionAddress = newAddress;\\r\\n  }\\r\\n\\r\\n  function getGovernanceDistributionAddress() external view returns(address){\\r\\n      return _governanceDistributionAddress;\\r\\n  }\\r\\n\\r\\n  function updateGovernanceTokenAddress(address newAddress) external onlyAdmin {\\r\\n      _governanceTokenAddress = newAddress;\\r\\n  }\\r\\n\\r\\n  function getGovernanceTokenAddress() external view returns(address){\\r\\n      return _governanceTokenAddress;\\r\\n  }\\r\\n\\r\\n  function updateStakingCalculationsAddress(address newAddress) external onlyAdmin {\\r\\n      _stakingCalculationAddress = newAddress;\\r\\n  }\\r\\n\\r\\n  function getStakingCalculationsAddress() external view returns(address){\\r\\n      return _stakingCalculationAddress;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev revoke admin\\r\\n    */\\r\\n  function revokeTrustedSigner(address newAddress) external onlyAdmin {\\r\\n      require(msg.sender != newAddress);\\r\\n      _TrustedSigners[newAddress] = false;\\r\\n  }\\r\\n\\r\\n  function isAdmin() external view returns (bool) {\\r\\n      return isAddressAdmin(msg.sender);\\r\\n  }\\r\\n\\r\\n  function isAddressAdmin(address account) public view returns (bool) {\\r\\n      return _AdminList[account] == true;\\r\\n  }\\r\\n\\r\\n  function isActiveVault(address vaultAddress) external view returns (bool) {\\r\\n    return _VaultStatus[vaultAddress] == true;\\r\\n  }   \\r\\n}\"\r\n    },\r\n    \"/C/Projects/Chainenable/iTrust/iTrust/contracts/contracts/phase1/libraries/ItrustVaultLib.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\nlibrary ITrustVaultLib {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    struct RewardTokenRoundData{\\r\\n        address tokenAddress;\\r\\n        uint amount;\\r\\n        uint commissionAmount;\\r\\n        uint tokenPerBlock; \\r\\n        uint totalSupply;\\r\\n        bool ignoreUnstakes;\\r\\n    }\\r\\n\\r\\n    struct RewardTokenRound{\\r\\n        mapping(address => RewardTokenRoundData) roundData;\\r\\n        uint startBlock;\\r\\n        uint endBlock;\\r\\n    }\\r\\n\\r\\n    struct AccountStaking {\\r\\n        uint32 startRound;\\r\\n        uint endDate;\\r\\n        uint total;\\r\\n        Staking[] stakes;\\r\\n    }\\r\\n\\r\\n    struct Staking {\\r\\n        uint startTime;\\r\\n        uint startBlock;\\r\\n        uint amount;\\r\\n        uint total;\\r\\n    }\\r\\n\\r\\n    struct UnStaking {\\r\\n        address account; \\r\\n        uint amount;\\r\\n        uint startDateTime;   \\r\\n        uint startBlock;     \\r\\n        uint endBlock;    \\r\\n    }\\r\\n\\r\\n    struct ClaimedReward {\\r\\n        uint amount;\\r\\n        uint lastClaimedRound;\\r\\n    }\\r\\n\\r\\n    function divider(uint numerator, uint denominator, uint precision) internal pure returns(uint) {        \\r\\n        return numerator*(uint(10)**uint(precision))/denominator;\\r\\n    }\\r\\n\\r\\n    function getUnstakingsForBlockRange(\\r\\n        UnStaking[] memory unStakes, \\r\\n        uint startBlock, \\r\\n        uint endBlock) internal pure returns (uint){\\r\\n         // If we have bad data, no supply data or it starts after the block we are looking for then we can return zero\\r\\n        if(endBlock < startBlock \\r\\n            || unStakes.length == 0 \\r\\n            || unStakes[0].startBlock > endBlock)\\r\\n        {         \\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint lastIndex = unStakes.length - 1;\\r\\n        uint diff = 0;\\r\\n        uint stakeEnd;\\r\\n        uint stakeStart;\\r\\n\\r\\n        uint total;\\r\\n        diff = 0;\\r\\n        stakeEnd = 0; \\r\\n        stakeStart = 0;\\r\\n        //last index should now be in our range so loop through until all block numbers are covered\\r\\n      \\r\\n        while(lastIndex >= 0) {  \\r\\n\\r\\n            if( (unStakes[lastIndex].endBlock != 0 && unStakes[lastIndex].endBlock < startBlock)\\r\\n                || unStakes[lastIndex].startBlock > endBlock) {\\r\\n                if(lastIndex == 0){\\r\\n                    break;\\r\\n                } \\r\\n                lastIndex = lastIndex.sub(1);\\r\\n                continue;\\r\\n            }\\r\\n            \\r\\n            stakeEnd = unStakes[lastIndex].endBlock == 0 \\r\\n                ? endBlock : unStakes[lastIndex].endBlock;\\r\\n\\r\\n            stakeEnd = (stakeEnd >= endBlock ? endBlock : stakeEnd);\\r\\n\\r\\n            stakeStart = unStakes[lastIndex].startBlock < startBlock \\r\\n                ? startBlock : unStakes[lastIndex].startBlock;\\r\\n            \\r\\n            diff = (stakeEnd == stakeStart ? 1 : stakeEnd.sub(stakeStart));\\r\\n\\r\\n            total = total.add(unStakes[lastIndex].amount.mul(diff));\\r\\n\\r\\n            if(lastIndex == 0){\\r\\n                break;\\r\\n            } \\r\\n\\r\\n            lastIndex = lastIndex.sub(1); \\r\\n        }\\r\\n \\r\\n        return total;\\r\\n    }\\r\\n\\r\\nfunction getHoldingsForBlockRange(\\r\\n        Staking[] memory stakes,\\r\\n        uint startBlock, \\r\\n        uint endBlock) internal pure returns (uint){\\r\\n        \\r\\n        // If we have bad data, no supply data or it starts after the block we are looking for then we can return zero\\r\\n        if(endBlock < startBlock \\r\\n            || stakes.length == 0 \\r\\n            || stakes[0].startBlock > endBlock){\\r\\n            return 0;\\r\\n        }\\r\\n        uint lastIndex = stakes.length - 1;\\r\\n    \\r\\n        uint diff;\\r\\n        // If the last total supply is before the start we are looking for we can take the last value\\r\\n        if(stakes[lastIndex].startBlock <= startBlock){\\r\\n            diff =  endBlock.sub(startBlock) == 0 ? 1 : endBlock.sub(startBlock);\\r\\n            return stakes[lastIndex].total.mul(diff);\\r\\n        }\\r\\n \\r\\n        // working our way back we need to get the first index that falls into our range\\r\\n        // This could be large so need to think of a better way to get here\\r\\n        while(lastIndex > 0 && stakes[lastIndex].startBlock > endBlock){\\r\\n            lastIndex = lastIndex.sub(1);\\r\\n        }\\r\\n \\r\\n        uint total;\\r\\n        diff = 0;\\r\\n        //last index should now be in our range so loop through until all block numbers are covered\\r\\n        while(stakes[lastIndex].startBlock >= startBlock ) {  \\r\\n            diff = 1;\\r\\n            if(stakes[lastIndex].startBlock <= startBlock){\\r\\n                diff = endBlock.sub(startBlock) == 0 ? 1 : endBlock.sub(startBlock);\\r\\n                total = total.add(stakes[lastIndex].total.mul(diff));\\r\\n                break;\\r\\n            }\\r\\n \\r\\n            diff = endBlock.sub(stakes[lastIndex].startBlock) == 0 \\r\\n                            ? 1 \\r\\n                            : endBlock.sub(stakes[lastIndex].startBlock);\\r\\n            total = total.add(stakes[lastIndex].total.mul(diff));\\r\\n            endBlock = stakes[lastIndex].startBlock;\\r\\n \\r\\n            if(lastIndex == 0){\\r\\n                break;\\r\\n            } \\r\\n \\r\\n            lastIndex = lastIndex.sub(1); \\r\\n        }\\r\\n \\r\\n        // If the last total supply is before the start we are looking for we can take the last value\\r\\n        if(stakes[lastIndex].startBlock <= startBlock && startBlock <= endBlock){\\r\\n            diff =  endBlock.sub(startBlock) == 0 ? 1 : endBlock.sub(startBlock);\\r\\n            total = total.add(stakes[lastIndex].total.mul(diff));\\r\\n\\r\\n        }\\r\\n \\r\\n        return total;\\r\\n    }\\r\\n\\r\\n    function splitSignature(bytes memory sig)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint8, bytes32, bytes32)\\r\\n    {\\r\\n        require(sig.length == 65);\\r\\n\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        uint8 v;\\r\\n\\r\\n        assembly {\\r\\n            // first 32 bytes, after the length prefix\\r\\n            r := mload(add(sig, 32))\\r\\n            // second 32 bytes\\r\\n            s := mload(add(sig, 64))\\r\\n            // final byte (first byte of the next 32 bytes)\\r\\n            v := byte(0, mload(add(sig, 96)))\\r\\n        }\\r\\n\\r\\n        return (v, r, s);\\r\\n    }\\r\\n\\r\\n    function recoverSigner(bytes32 message, bytes memory sig)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address)\\r\\n    {\\r\\n        uint8 v;\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n\\r\\n        (v, r, s) = splitSignature(sig);\\r\\n\\r\\n        return ecrecover(message, v, r, s);\\r\\n    }\\r\\n\\r\\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Projects/Chainenable/iTrust/iTrust/contracts/contracts/phase1/tokens/iTrustGovernanceToken.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20CappedUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\n\\r\\ncontract iTrustGovernanceToken is ERC20CappedUpgradeable, OwnableUpgradeable, PausableUpgradeable {\\r\\n\\r\\n    using SafeMathUpgradeable for uint;\\r\\n\\r\\n    address internal _treasuryAddress;\\r\\n    uint internal _yearOneSupply;\\r\\n    uint internal _yearTwoSupply;\\r\\n    uint internal _yearThreeSupply;\\r\\n    uint internal _yearFourSupply;\\r\\n    uint internal _yearFiveSupply;\\r\\n    \\r\\n    function initialize(\\r\\n        address payable treasuryAddress, \\r\\n        uint cap_,\\r\\n        uint yearOneSupply, \\r\\n        uint yearTwoSupply, \\r\\n        uint yearThreeSupply, \\r\\n        uint yearFourSupply, \\r\\n        uint yearFiveSupply) initializer public {\\r\\n\\r\\n        require(yearOneSupply.add(yearTwoSupply).add(yearThreeSupply).add(yearFourSupply).add(yearFiveSupply) == cap_);\\r\\n\\r\\n        __ERC20_init(\\\"iTrust Governance Token\\\", \\\"$ITG\\\");\\r\\n        __ERC20Capped_init(cap_);\\r\\n        __Ownable_init();\\r\\n        __Pausable_init();\\r\\n\\r\\n        _treasuryAddress = treasuryAddress;\\r\\n        _yearOneSupply = yearOneSupply;\\r\\n        _yearTwoSupply = yearTwoSupply;\\r\\n        _yearThreeSupply = yearThreeSupply;\\r\\n        _yearFourSupply = yearFourSupply;\\r\\n        _yearFiveSupply = yearFiveSupply;\\r\\n\\r\\n        \\r\\n    }\\r\\n\\r\\n    function mintYearOne() external onlyOwner {\\r\\n        require(totalSupply() == 0);\\r\\n        _mint(_treasuryAddress, _yearOneSupply);\\r\\n    }\\r\\n\\r\\n    function mintYearTwo() external onlyOwner {\\r\\n        require(totalSupply() == _yearOneSupply);\\r\\n        _mint(_treasuryAddress, _yearTwoSupply);\\r\\n    }\\r\\n\\r\\n    function mintYearThree() external onlyOwner {\\r\\n        require(totalSupply() == _yearOneSupply.add(_yearTwoSupply));\\r\\n        _mint(_treasuryAddress, _yearThreeSupply);\\r\\n    }\\r\\n\\r\\n    function mintYearFour() external onlyOwner {\\r\\n        require(totalSupply() == _yearOneSupply.add(_yearTwoSupply).add(_yearThreeSupply));\\r\\n        _mint(_treasuryAddress, _yearFourSupply);\\r\\n    }\\r\\n\\r\\n    function mintYearFive() external onlyOwner {\\r\\n        require(totalSupply() == _yearOneSupply.add(_yearTwoSupply).add(_yearThreeSupply).add(_yearFourSupply));\\r\\n        _mint(_treasuryAddress, _yearFiveSupply);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/C/Projects/Chainenable/iTrust/iTrust/contracts/contracts/phase1/vaults/BaseContract.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\n\\r\\nimport { ITrustVaultLib as VaultLib } from \\\"./../libraries/ItrustVaultLib.sol\\\"; \\r\\n\\r\\nabstract contract BaseContract is Initializable, ContextUpgradeable\\r\\n{\\r\\n    uint8 internal constant FALSE = 0;\\r\\n    uint8 internal constant TRUE = 1;\\r\\n\\r\\n    uint8 internal _locked;\\r\\n    address internal _iTrustFactoryAddress;\\r\\n\\r\\n    mapping (address => uint32) internal _CurrentRoundNumbers;\\r\\n    mapping (address => uint) internal _TotalUnstakedWnxm;\\r\\n    mapping (address => uint[]) internal _TotalSupplyKeys;\\r\\n    mapping (address => uint[]) internal _TotalUnstakingKeys;\\r\\n    mapping (address => uint[]) internal _TotalSupplyForDayKeys;\\r\\n   \\r\\n    mapping (address => address[]) public totalRewardTokenAddresses;\\r\\n    mapping (address => address[]) internal _UnstakingAddresses;\\r\\n    mapping (address => address[]) internal _AccountStakesAddresses;\\r\\n\\r\\n    mapping (address => VaultLib.UnStaking[]) internal _UnstakingRequests;\\r\\n    mapping (address => mapping (address => uint32)) internal _RewardStartingRounds;\\r\\n    mapping (address => mapping (address => VaultLib.AccountStaking)) internal _AccountStakes;\\r\\n    mapping (address => mapping (address => VaultLib.UnStaking[])) internal _AccountUnstakings;\\r\\n\\r\\n    mapping (address => mapping (address => uint8)) internal _RewardTokens;\\r\\n    mapping (address => mapping (address => uint)) internal _AccountUnstakingTotals;\\r\\n    mapping (address => mapping (address => uint)) internal _AccountUnstakedTotals;\\r\\n    mapping (address => mapping (uint => uint)) internal _TotalSupplyHistory;\\r\\n    mapping (address => mapping (address => mapping (address => VaultLib.ClaimedReward))) internal _AccountRewards;\\r\\n    mapping (address => mapping (uint => VaultLib.RewardTokenRound)) internal _Rounds;\\r\\n\\r\\n    mapping (address => mapping (uint => uint)) internal _TotalSupplyForDayHistory;\\r\\n    \\r\\n\\r\\n\\r\\n    mapping (address => mapping (uint => VaultLib.UnStaking)) internal _TotalUnstakingHistory;\\r\\n    \\r\\n    function _nonReentrant() internal view {\\r\\n        require(_locked == FALSE);  \\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/C/Projects/Chainenable/iTrust/iTrust/contracts/contracts/phase1/vaults/GovernanceDistribution.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./../iTrustVaultFactory.sol\\\";\\r\\nimport \\\"./../tokens/iTrustGovernanceToken.sol\\\";\\r\\nimport \\\"./Vault.sol\\\";\\r\\nimport {\\r\\n    BokkyPooBahsDateTimeLibrary as DateTimeLib\\r\\n} from \\\"./../3rdParty/BokkyPooBahsDateTimeLibrary.sol\\\";\\r\\n\\r\\ncontract GovernanceDistribution is Initializable, ContextUpgradeable\\r\\n{\\r\\n    using SafeMathUpgradeable for uint;\\r\\n\\r\\n    uint8 internal constant FALSE = 0;\\r\\n    uint8 internal constant TRUE = 1;\\r\\n\\r\\n    uint8 internal _locked;\\r\\n    uint internal _tokenPerHour;\\r\\n    address internal _iTrustFactoryAddress;\\r\\n    uint[] internal _totalSupplyKeys;\\r\\n    mapping (uint => uint) internal _totalSupplyHistory;\\r\\n    mapping (address => uint[]) internal _totalStakedKeys;\\r\\n    mapping (address => mapping (uint => uint)) internal _totalStakedHistory;\\r\\n    mapping (address => uint) internal _lastClaimedTimes;\\r\\n    mapping(address => mapping(string => bool)) _UsedNonces;\\r\\n\\r\\n    function initialize(\\r\\n        address iTrustFactoryAddress,\\r\\n        uint tokenPerDay\\r\\n    ) \\r\\n        initializer \\r\\n        external \\r\\n    {\\r\\n        _iTrustFactoryAddress = iTrustFactoryAddress;\\r\\n        _tokenPerHour = tokenPerDay.div(24);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Public functions\\r\\n     */\\r\\n\\r\\n     function totalStaked(address account) external view returns(uint) {\\r\\n         _onlyAdmin();\\r\\n\\r\\n         if(_totalStakedKeys[account].length == 0){\\r\\n             return 0;\\r\\n         }\\r\\n\\r\\n        return _totalStakedHistory[account][_totalStakedKeys[account][_totalStakedKeys[account].length.sub(1)]];\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view returns(uint) {\\r\\n         _onlyAdmin();\\r\\n\\r\\n         if(_totalSupplyKeys.length == 0){\\r\\n             return 0;\\r\\n         }\\r\\n\\r\\n        return _totalSupplyHistory[_totalSupplyKeys[_totalSupplyKeys.length.sub(1)]];\\r\\n    }\\r\\n\\r\\n    function calculateRewards() external view returns(uint amount, uint claimedUntil) {\\r\\n        (amount, claimedUntil) = _calculateRewards(_msgSender());\\r\\n        return(amount, claimedUntil);\\r\\n    }\\r\\n\\r\\n    function calculateRewardsForAccount(address account) external view returns(uint amount, uint claimedUntil) {\\r\\n        _isTrustedSigner(_msgSender());\\r\\n        (amount, claimedUntil) = _calculateRewards(account);\\r\\n        return(amount, claimedUntil);\\r\\n    }\\r\\n\\r\\n    function removeStake(address account, uint value) external {\\r\\n        _validateStakingDataAddress();\\r\\n        require(_totalStakedKeys[account].length != 0);\\r\\n        uint currentTime = _getStartOfHourTimeStamp(block.timestamp);\\r\\n        uint lastStakedIndex = _totalStakedKeys[account][_totalStakedKeys[account].length.sub(1)];\\r\\n        if(lastStakedIndex > currentTime){\\r\\n            if(_totalStakedKeys[account].length == 1 || _totalStakedKeys[account][_totalStakedKeys[account].length.sub(2)] != currentTime){\\r\\n                _totalStakedKeys[account][_totalStakedKeys[account].length.sub(1)] = currentTime;\\r\\n                _totalStakedHistory[account][currentTime] = _totalStakedKeys[account].length == 1 ? 0 : _totalStakedHistory[account][_totalStakedKeys[account][_totalStakedKeys[account].length.sub(2)]];\\r\\n                _totalStakedKeys[account].push(lastStakedIndex);\\r\\n            }\\r\\n            _totalStakedHistory[account][lastStakedIndex] = _totalStakedHistory[account][lastStakedIndex].sub(value);\\r\\n            lastStakedIndex = _totalStakedKeys[account][_totalStakedKeys[account].length.sub(2)];\\r\\n        }\\r\\n        require(value <= _totalStakedHistory[account][lastStakedIndex]);\\r\\n        uint newValue = _totalStakedHistory[account][lastStakedIndex].sub(value);\\r\\n        if(lastStakedIndex != currentTime){\\r\\n            _totalStakedKeys[account].push(currentTime);\\r\\n        }\\r\\n        _totalStakedHistory[account][currentTime] = newValue;\\r\\n        require(_totalSupplyKeys.length != 0);\\r\\n        uint lastSupplyIndex = _totalSupplyKeys[_totalSupplyKeys.length.sub(1)];\\r\\n        if(lastSupplyIndex > currentTime){\\r\\n            if(_totalSupplyKeys.length == 1 || _totalSupplyKeys[_totalSupplyKeys.length.sub(2)] != currentTime){\\r\\n                _totalSupplyKeys[_totalSupplyKeys.length.sub(1)] = currentTime;\\r\\n                _totalSupplyHistory[currentTime] = _totalSupplyKeys.length == 1 ? 0 : _totalSupplyHistory[_totalSupplyKeys[_totalSupplyKeys.length.sub(2)]];\\r\\n                _totalSupplyKeys.push(lastSupplyIndex);\\r\\n            }\\r\\n            \\r\\n            _totalSupplyHistory[lastSupplyIndex] = _totalSupplyHistory[lastSupplyIndex].sub(value);\\r\\n            lastSupplyIndex = _totalSupplyKeys[_totalSupplyKeys.length.sub(2)];\\r\\n        }\\r\\n        if(lastSupplyIndex != currentTime){\\r\\n            _totalSupplyKeys.push(currentTime);\\r\\n        }\\r\\n        _totalSupplyHistory[currentTime] = _totalSupplyHistory[lastSupplyIndex].sub(value);\\r\\n    }\\r\\n\\r\\n    function addStake(address account, uint value) external {\\r\\n        _validateStakingDataAddress();\\r\\n        uint currentTime = _getStartOfNextHourTimeStamp(block.timestamp);\\r\\n\\r\\n        if(_totalStakedKeys[account].length == 0){\\r\\n            _totalStakedKeys[account].push(currentTime);\\r\\n            _totalStakedHistory[account][currentTime] = value;\\r\\n        } else {\\r\\n            uint lastStakedIndex = _totalStakedKeys[account].length.sub(1);\\r\\n            uint lastTimestamp = _totalStakedKeys[account][lastStakedIndex];\\r\\n\\r\\n            if(lastTimestamp != currentTime){\\r\\n                _totalStakedKeys[account].push(currentTime);\\r\\n            }\\r\\n\\r\\n            _totalStakedHistory[account][currentTime] = _totalStakedHistory[account][lastTimestamp].add(value);\\r\\n        }\\r\\n\\r\\n        if(_totalSupplyKeys.length == 0){\\r\\n            _totalSupplyKeys.push(currentTime);\\r\\n            _totalSupplyHistory[currentTime] = value;\\r\\n        } else {\\r\\n            uint lastSupplyIndex = _totalSupplyKeys.length.sub(1);\\r\\n            uint lastSupplyTimestamp = _totalSupplyKeys[lastSupplyIndex];\\r\\n\\r\\n            if(lastSupplyTimestamp != currentTime){\\r\\n                _totalSupplyKeys.push(currentTime);\\r\\n            }\\r\\n\\r\\n            _totalSupplyHistory[currentTime] = _totalSupplyHistory[lastSupplyTimestamp].add(value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawTokens(uint amount, uint claimedUntil, string memory nonce, bytes memory sig) external {\\r\\n        _nonReentrant();\\r\\n        require(amount != 0);\\r\\n        require(claimedUntil != 0);\\r\\n        require(!_UsedNonces[_msgSender()][nonce]);\\r\\n        _locked = TRUE;\\r\\n        bytes32 abiBytes = keccak256(abi.encodePacked(_msgSender(), amount, claimedUntil, nonce, address(this)));\\r\\n        bytes32 message = _prefixed(abiBytes);\\r\\n\\r\\n        address signer = _recoverSigner(message, sig);\\r\\n        _isTrustedSigner(signer);\\r\\n\\r\\n        _lastClaimedTimes[_msgSender()] = claimedUntil;\\r\\n        _UsedNonces[_msgSender()][nonce] = true;\\r\\n\\r\\n        _getiTrustGovernanceToken().transfer(_msgSender(), amount);\\r\\n        _locked = FALSE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Internal functions\\r\\n     */\\r\\n\\r\\n    function _calculateRewards(address account) internal view returns(uint, uint) {\\r\\n\\r\\n        if(_totalStakedKeys[account].length == 0 || _totalSupplyKeys.length == 0){\\r\\n            return (0, 0);\\r\\n        }\\r\\n\\r\\n        uint currentTime = _getStartOfHourTimeStamp(block.timestamp);\\r\\n        uint claimedUntil = _getStartOfHourTimeStamp(block.timestamp);\\r\\n        uint lastClaimedTimestamp = _lastClaimedTimes[account];\\r\\n\\r\\n        // if 0 they have never staked go back to the first stake\\r\\n        if(lastClaimedTimestamp == 0){\\r\\n            lastClaimedTimestamp = _totalStakedKeys[account][0];\\r\\n        }\\r\\n\\r\\n        uint totalRewards = 0;\\r\\n        uint stakedStartingIndex = _totalStakedKeys[account].length.sub(1);\\r\\n        uint supplyStartingIndex = _totalSupplyKeys.length.sub(1);\\r\\n        uint hourReward = 0;\\r\\n\\r\\n        while(currentTime > lastClaimedTimestamp) {\\r\\n            (hourReward, stakedStartingIndex, supplyStartingIndex) = _getTotalRewardHour(account, currentTime, stakedStartingIndex, supplyStartingIndex);\\r\\n            totalRewards = totalRewards.add(hourReward);\\r\\n            currentTime = DateTimeLib.subHours(currentTime, 1);\\r\\n        }\\r\\n\\r\\n        return (totalRewards, claimedUntil);\\r\\n    }\\r\\n\\r\\n    function _getTotalRewardHour(address account, uint hourTimestamp, uint stakedStartingIndex, uint supplyStartingIndex) internal view returns(uint, uint, uint) {\\r\\n\\r\\n        (uint totalStakedForHour, uint returnedStakedStartingIndex) =  _getTotalStakedForHour(account, hourTimestamp, stakedStartingIndex);\\r\\n        (uint totalSupplyForHour, uint returnedSupplyStartingIndex) =  _getTotalSupplyForHour(hourTimestamp, supplyStartingIndex);\\r\\n        uint reward = 0;\\r\\n        \\r\\n        if(totalSupplyForHour > 0 && totalStakedForHour > 0){\\r\\n            uint govTokenPerTokenPerHour = _divider(_tokenPerHour, totalSupplyForHour, 18); // _tokenPerHour.div(totalSupplyForHour);\\r\\n            reward = reward.add(totalStakedForHour.mul(govTokenPerTokenPerHour).div(1e18)); \\r\\n        }\\r\\n\\r\\n        return (reward, returnedStakedStartingIndex, returnedSupplyStartingIndex);\\r\\n    }\\r\\n\\r\\n    function _getTotalStakedForHour(address account, uint hourTimestamp, uint startingIndex) internal view returns(uint, uint) {\\r\\n\\r\\n        while(startingIndex != 0 && hourTimestamp <= _totalStakedKeys[account][startingIndex]) {\\r\\n            startingIndex = startingIndex.sub(1);\\r\\n        }\\r\\n\\r\\n        // We never got far enough back before hitting 0, meaning we staked after the hour we are looking up\\r\\n        if(hourTimestamp < _totalStakedKeys[account][startingIndex]){\\r\\n            return (0, startingIndex);\\r\\n        }\\r\\n\\r\\n        return (_totalStakedHistory[account][_totalStakedKeys[account][startingIndex]], startingIndex);\\r\\n    }\\r\\n\\r\\n    function _getTotalSupplyForHour(uint hourTimestamp, uint startingIndex) internal view returns(uint, uint) {\\r\\n\\r\\n        \\r\\n\\r\\n        while(startingIndex != 0 && hourTimestamp <= _totalSupplyKeys[startingIndex]) {\\r\\n            startingIndex = startingIndex.sub(1);\\r\\n        }\\r\\n\\r\\n        // We never got far enough back before hitting 0, meaning we staked after the hour we are looking up\\r\\n        if(hourTimestamp < _totalSupplyKeys[startingIndex]){\\r\\n            return (0, startingIndex);\\r\\n        }\\r\\n\\r\\n        return (_totalSupplyHistory[_totalSupplyKeys[startingIndex]], startingIndex);\\r\\n    }\\r\\n\\r\\n    function _getStartOfHourTimeStamp(uint nowDateTime) internal pure returns (uint) {\\r\\n        (uint year, uint month, uint day, uint hour, ,) = DateTimeLib.timestampToDateTime(nowDateTime);\\r\\n        return DateTimeLib.timestampFromDateTime(year, month, day, hour, 0, 0);\\r\\n    }\\r\\n\\r\\n    function _getStartOfNextHourTimeStamp(uint nowDateTime) internal pure returns (uint) {\\r\\n        (uint year, uint month, uint day, uint hour, ,) = DateTimeLib.timestampToDateTime(nowDateTime);\\r\\n        return DateTimeLib.timestampFromDateTime(year, month, day, hour.add(1), 0, 0);\\r\\n    }\\r\\n\\r\\n    function _getITrustVaultFactory() internal view returns(ITrustVaultFactory) {\\r\\n        return ITrustVaultFactory(_iTrustFactoryAddress);\\r\\n    }\\r\\n\\r\\n    function _governanceTokenAddress() internal view returns(address) {\\r\\n        ITrustVaultFactory vaultFactory = ITrustVaultFactory(_iTrustFactoryAddress);\\r\\n        return vaultFactory.getGovernanceTokenAddress();\\r\\n    }\\r\\n\\r\\n    function _getiTrustGovernanceToken() internal view returns(iTrustGovernanceToken) {\\r\\n        return iTrustGovernanceToken(_governanceTokenAddress());\\r\\n    }\\r\\n\\r\\n    function _divider(uint numerator, uint denominator, uint precision) internal pure returns(uint) {        \\r\\n        return numerator*(uint(10)**uint(precision))/denominator;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Validate functions\\r\\n     */\\r\\n\\r\\n     function _nonReentrant() internal view {\\r\\n        require(_locked == FALSE);  \\r\\n    }\\r\\n\\r\\n    function _onlyAdmin() internal view {\\r\\n        require(\\r\\n            _getITrustVaultFactory().isAddressAdmin(_msgSender()),\\r\\n            \\\"Not admin\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _isTrustedSigner(address signer) internal view {\\r\\n        require(\\r\\n            _getITrustVaultFactory().isTrustedSignerAddress(signer),\\r\\n            \\\"Not trusted signer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _validateStakingDataAddress() internal view {\\r\\n        _validateStakingDataAddress(_msgSender());\\r\\n    }\\r\\n\\r\\n    function _validateStakingDataAddress(address contractAddress) internal view {\\r\\n        ITrustVaultFactory vaultFactory = ITrustVaultFactory(_iTrustFactoryAddress);\\r\\n        require(vaultFactory.isStakingDataAddress(contractAddress));\\r\\n    }\\r\\n\\r\\n    function _splitSignature(bytes memory sig)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint8, bytes32, bytes32)\\r\\n    {\\r\\n        require(sig.length == 65);\\r\\n\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        uint8 v;\\r\\n\\r\\n        assembly {\\r\\n            // first 32 bytes, after the length prefix\\r\\n            r := mload(add(sig, 32))\\r\\n            // second 32 bytes\\r\\n            s := mload(add(sig, 64))\\r\\n            // final byte (first byte of the next 32 bytes)\\r\\n            v := byte(0, mload(add(sig, 96)))\\r\\n        }\\r\\n\\r\\n        return (v, r, s);\\r\\n    }\\r\\n\\r\\n    function _recoverSigner(bytes32 message, bytes memory sig)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address)\\r\\n    {\\r\\n        uint8 v;\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n\\r\\n        (v, r, s) = _splitSignature(sig);\\r\\n\\r\\n        return ecrecover(message, v, r, s);\\r\\n    }\\r\\n\\r\\n    function _prefixed(bytes32 hash) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/C/Projects/Chainenable/iTrust/iTrust/contracts/contracts/phase1/vaults/GovernanceDistributionV2.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./../iTrustVaultFactory.sol\\\";\\r\\nimport \\\"./../tokens/iTrustGovernanceToken.sol\\\";\\r\\nimport \\\"./Vault.sol\\\";\\r\\nimport {\\r\\n    BokkyPooBahsDateTimeLibrary as DateTimeLib\\r\\n} from \\\"./../3rdParty/BokkyPooBahsDateTimeLibrary.sol\\\";\\r\\n\\r\\ncontract GovernanceDistributionV2 is Initializable, ContextUpgradeable\\r\\n{\\r\\n    using SafeMathUpgradeable for uint;\\r\\n\\r\\n    uint8 internal constant FALSE = 0;\\r\\n    uint8 internal constant TRUE = 1;\\r\\n\\r\\n    uint8 internal _locked;\\r\\n    uint internal _tokenPerHour;\\r\\n    address internal _iTrustFactoryAddress;\\r\\n    uint[] internal _totalSupplyKeys;\\r\\n    mapping (uint => uint) internal _totalSupplyHistory;\\r\\n    mapping (address => uint[]) internal _totalStakedKeys;\\r\\n    mapping (address => mapping (uint => uint)) internal _totalStakedHistory;\\r\\n    mapping (address => uint) internal _lastClaimedTimes;\\r\\n    mapping(address => mapping(string => bool)) _UsedNonces;\\r\\n\\r\\n    bool internal _configUpdated;\\r\\n    uint internal _latestTokenPerHour;\\r\\n    uint internal _rateUpdateTime;\\r\\n\\r\\n    function initialize(\\r\\n        address iTrustFactoryAddress,\\r\\n        uint tokenPerDay\\r\\n    ) \\r\\n        initializer \\r\\n        external \\r\\n    {\\r\\n        _iTrustFactoryAddress = iTrustFactoryAddress;\\r\\n        _tokenPerHour = tokenPerDay.div(24);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Public functions\\r\\n     */\\r\\n    function updateDayDistribution(uint amountPerDay) external {\\r\\n        _onlyAdmin();\\r\\n        require(!_configUpdated);\\r\\n        \\r\\n        _latestTokenPerHour = amountPerDay.div(24);\\r\\n        _rateUpdateTime = block.timestamp;\\r\\n        _configUpdated = true;\\r\\n    }\\r\\n\\r\\n\\r\\n     function totalStaked(address account) external view returns(uint) {\\r\\n         _onlyAdmin();\\r\\n\\r\\n         if(_totalStakedKeys[account].length == 0){\\r\\n             return 0;\\r\\n         }\\r\\n\\r\\n        return _totalStakedHistory[account][_totalStakedKeys[account][_totalStakedKeys[account].length.sub(1)]];\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view returns(uint) {\\r\\n         _onlyAdmin();\\r\\n\\r\\n         if(_totalSupplyKeys.length == 0){\\r\\n             return 0;\\r\\n         }\\r\\n\\r\\n        return _totalSupplyHistory[_totalSupplyKeys[_totalSupplyKeys.length.sub(1)]];\\r\\n    }\\r\\n\\r\\n    function calculateRewards() external view returns(uint amount, uint claimedUntil) {\\r\\n        (amount, claimedUntil) = _calculateRewards(_msgSender());\\r\\n        return(amount, claimedUntil);\\r\\n    }\\r\\n\\r\\n    function calculateRewardsForAccount(address account) external view returns(uint amount, uint claimedUntil) {\\r\\n        _isTrustedSigner(_msgSender());\\r\\n        (amount, claimedUntil) = _calculateRewards(account);\\r\\n        return(amount, claimedUntil);\\r\\n    }\\r\\n\\r\\n    function removeStake(address account, uint value) external {\\r\\n        _validateStakingDataAddress();\\r\\n        require(_totalStakedKeys[account].length != 0);\\r\\n        uint currentTime = _getStartOfHourTimeStamp(block.timestamp);\\r\\n        uint lastStakedIndex = _totalStakedKeys[account][_totalStakedKeys[account].length.sub(1)];\\r\\n        if(lastStakedIndex > currentTime){\\r\\n            if(_totalStakedKeys[account].length == 1 || _totalStakedKeys[account][_totalStakedKeys[account].length.sub(2)] != currentTime){\\r\\n                _totalStakedKeys[account][_totalStakedKeys[account].length.sub(1)] = currentTime;\\r\\n                _totalStakedHistory[account][currentTime] = _totalStakedKeys[account].length == 1 ? 0 : _totalStakedHistory[account][_totalStakedKeys[account][_totalStakedKeys[account].length.sub(2)]];\\r\\n                _totalStakedKeys[account].push(lastStakedIndex);\\r\\n            }\\r\\n            _totalStakedHistory[account][lastStakedIndex] = _totalStakedHistory[account][lastStakedIndex].sub(value);\\r\\n            lastStakedIndex = _totalStakedKeys[account][_totalStakedKeys[account].length.sub(2)];\\r\\n        }\\r\\n        require(value <= _totalStakedHistory[account][lastStakedIndex]);\\r\\n        uint newValue = _totalStakedHistory[account][lastStakedIndex].sub(value);\\r\\n        if(lastStakedIndex != currentTime){\\r\\n            _totalStakedKeys[account].push(currentTime);\\r\\n        }\\r\\n        _totalStakedHistory[account][currentTime] = newValue;\\r\\n        require(_totalSupplyKeys.length != 0);\\r\\n        uint lastSupplyIndex = _totalSupplyKeys[_totalSupplyKeys.length.sub(1)];\\r\\n        if(lastSupplyIndex > currentTime){\\r\\n            if(_totalSupplyKeys.length == 1 || _totalSupplyKeys[_totalSupplyKeys.length.sub(2)] != currentTime){\\r\\n                _totalSupplyKeys[_totalSupplyKeys.length.sub(1)] = currentTime;\\r\\n                _totalSupplyHistory[currentTime] = _totalSupplyKeys.length == 1 ? 0 : _totalSupplyHistory[_totalSupplyKeys[_totalSupplyKeys.length.sub(2)]];\\r\\n                _totalSupplyKeys.push(lastSupplyIndex);\\r\\n            }\\r\\n            \\r\\n            _totalSupplyHistory[lastSupplyIndex] = _totalSupplyHistory[lastSupplyIndex].sub(value);\\r\\n            lastSupplyIndex = _totalSupplyKeys[_totalSupplyKeys.length.sub(2)];\\r\\n        }\\r\\n        if(lastSupplyIndex != currentTime){\\r\\n            _totalSupplyKeys.push(currentTime);\\r\\n        }\\r\\n        _totalSupplyHistory[currentTime] = _totalSupplyHistory[lastSupplyIndex].sub(value);\\r\\n    }\\r\\n\\r\\n    function addStake(address account, uint value) external {\\r\\n        _validateStakingDataAddress();\\r\\n        uint currentTime = _getStartOfNextHourTimeStamp(block.timestamp);\\r\\n\\r\\n        if(_totalStakedKeys[account].length == 0){\\r\\n            _totalStakedKeys[account].push(currentTime);\\r\\n            _totalStakedHistory[account][currentTime] = value;\\r\\n        } else {\\r\\n            uint lastStakedIndex = _totalStakedKeys[account].length.sub(1);\\r\\n            uint lastTimestamp = _totalStakedKeys[account][lastStakedIndex];\\r\\n\\r\\n            if(lastTimestamp != currentTime){\\r\\n                _totalStakedKeys[account].push(currentTime);\\r\\n            }\\r\\n\\r\\n            _totalStakedHistory[account][currentTime] = _totalStakedHistory[account][lastTimestamp].add(value);\\r\\n        }\\r\\n\\r\\n        if(_totalSupplyKeys.length == 0){\\r\\n            _totalSupplyKeys.push(currentTime);\\r\\n            _totalSupplyHistory[currentTime] = value;\\r\\n        } else {\\r\\n            uint lastSupplyIndex = _totalSupplyKeys.length.sub(1);\\r\\n            uint lastSupplyTimestamp = _totalSupplyKeys[lastSupplyIndex];\\r\\n\\r\\n            if(lastSupplyTimestamp != currentTime){\\r\\n                _totalSupplyKeys.push(currentTime);\\r\\n            }\\r\\n\\r\\n            _totalSupplyHistory[currentTime] = _totalSupplyHistory[lastSupplyTimestamp].add(value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawTokens(uint amount, uint claimedUntil, string memory nonce, bytes memory sig) external {\\r\\n        _nonReentrant();\\r\\n        require(amount != 0);\\r\\n        require(claimedUntil != 0);\\r\\n        require(!_UsedNonces[_msgSender()][nonce]);\\r\\n        _locked = TRUE;\\r\\n        bytes32 abiBytes = keccak256(abi.encodePacked(_msgSender(), amount, claimedUntil, nonce, address(this)));\\r\\n        bytes32 message = _prefixed(abiBytes);\\r\\n\\r\\n        address signer = _recoverSigner(message, sig);\\r\\n        _isTrustedSigner(signer);\\r\\n\\r\\n        _lastClaimedTimes[_msgSender()] = claimedUntil;\\r\\n        _UsedNonces[_msgSender()][nonce] = true;\\r\\n\\r\\n        _getiTrustGovernanceToken().transfer(_msgSender(), amount);\\r\\n        _locked = FALSE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Internal functions\\r\\n     */\\r\\n\\r\\n    function _calculateRewards(address account) internal view returns(uint, uint) {\\r\\n\\r\\n        if(_totalStakedKeys[account].length == 0 || _totalSupplyKeys.length == 0){\\r\\n            return (0, 0);\\r\\n        }\\r\\n\\r\\n        uint currentTime = _getStartOfHourTimeStamp(block.timestamp);\\r\\n        uint claimedUntil = _getStartOfHourTimeStamp(block.timestamp);\\r\\n        uint lastClaimedTimestamp = _lastClaimedTimes[account];\\r\\n\\r\\n        // if 0 they have never staked go back to the first stake\\r\\n        if(lastClaimedTimestamp == 0){\\r\\n            lastClaimedTimestamp = _totalStakedKeys[account][0];\\r\\n        }\\r\\n\\r\\n        uint totalRewards = 0;\\r\\n        uint stakedStartingIndex = _totalStakedKeys[account].length.sub(1);\\r\\n        uint supplyStartingIndex = _totalSupplyKeys.length.sub(1);\\r\\n        uint hourReward = 0;\\r\\n\\r\\n        while(currentTime > lastClaimedTimestamp) {\\r\\n            (hourReward, stakedStartingIndex, supplyStartingIndex) = _getTotalRewardHour(account, currentTime, stakedStartingIndex, supplyStartingIndex);\\r\\n            totalRewards = totalRewards.add(hourReward);\\r\\n            currentTime = DateTimeLib.subHours(currentTime, 1);\\r\\n        }\\r\\n\\r\\n        return (totalRewards, claimedUntil);\\r\\n    }\\r\\n\\r\\n    function _getTotalRewardHour(address account, uint hourTimestamp, uint stakedStartingIndex, uint supplyStartingIndex) internal view returns(uint, uint, uint) {\\r\\n\\r\\n        (uint totalStakedForHour, uint returnedStakedStartingIndex) =  _getTotalStakedForHour(account, hourTimestamp, stakedStartingIndex);\\r\\n        (uint totalSupplyForHour, uint returnedSupplyStartingIndex) =  _getTotalSupplyForHour(hourTimestamp, supplyStartingIndex);\\r\\n        uint reward = 0;\\r\\n        \\r\\n        if(totalSupplyForHour > 0 && totalStakedForHour > 0){\\r\\n            uint tokenPerHour = (hourTimestamp >= _rateUpdateTime && _rateUpdateTime != 0) ? _latestTokenPerHour : _tokenPerHour;\\r\\n            uint govTokenPerTokenPerHour = _divider(tokenPerHour, totalSupplyForHour, 18); // _tokenPerHour.div(totalSupplyForHour);\\r\\n            reward = reward.add(totalStakedForHour.mul(govTokenPerTokenPerHour).div(1e18)); \\r\\n        }\\r\\n\\r\\n        return (reward, returnedStakedStartingIndex, returnedSupplyStartingIndex);\\r\\n    }\\r\\n\\r\\n    function _getTotalStakedForHour(address account, uint hourTimestamp, uint startingIndex) internal view returns(uint, uint) {\\r\\n\\r\\n        while(startingIndex != 0 && hourTimestamp <= _totalStakedKeys[account][startingIndex]) {\\r\\n            startingIndex = startingIndex.sub(1);\\r\\n        }\\r\\n\\r\\n        // We never got far enough back before hitting 0, meaning we staked after the hour we are looking up\\r\\n        if(hourTimestamp < _totalStakedKeys[account][startingIndex]){\\r\\n            return (0, startingIndex);\\r\\n        }\\r\\n\\r\\n        return (_totalStakedHistory[account][_totalStakedKeys[account][startingIndex]], startingIndex);\\r\\n    }\\r\\n\\r\\n    function _getTotalSupplyForHour(uint hourTimestamp, uint startingIndex) internal view returns(uint, uint) {\\r\\n\\r\\n        \\r\\n\\r\\n        while(startingIndex != 0 && hourTimestamp <= _totalSupplyKeys[startingIndex]) {\\r\\n            startingIndex = startingIndex.sub(1);\\r\\n        }\\r\\n\\r\\n        // We never got far enough back before hitting 0, meaning we staked after the hour we are looking up\\r\\n        if(hourTimestamp < _totalSupplyKeys[startingIndex]){\\r\\n            return (0, startingIndex);\\r\\n        }\\r\\n\\r\\n        return (_totalSupplyHistory[_totalSupplyKeys[startingIndex]], startingIndex);\\r\\n    }\\r\\n\\r\\n    function _getStartOfHourTimeStamp(uint nowDateTime) internal pure returns (uint) {\\r\\n        (uint year, uint month, uint day, uint hour, ,) = DateTimeLib.timestampToDateTime(nowDateTime);\\r\\n        return DateTimeLib.timestampFromDateTime(year, month, day, hour, 0, 0);\\r\\n    }\\r\\n\\r\\n    function _getStartOfNextHourTimeStamp(uint nowDateTime) internal pure returns (uint) {\\r\\n        (uint year, uint month, uint day, uint hour, ,) = DateTimeLib.timestampToDateTime(nowDateTime);\\r\\n        return DateTimeLib.timestampFromDateTime(year, month, day, hour.add(1), 0, 0);\\r\\n    }\\r\\n\\r\\n    function _getITrustVaultFactory() internal view returns(ITrustVaultFactory) {\\r\\n        return ITrustVaultFactory(_iTrustFactoryAddress);\\r\\n    }\\r\\n\\r\\n    function _governanceTokenAddress() internal view returns(address) {\\r\\n        ITrustVaultFactory vaultFactory = ITrustVaultFactory(_iTrustFactoryAddress);\\r\\n        return vaultFactory.getGovernanceTokenAddress();\\r\\n    }\\r\\n\\r\\n    function _getiTrustGovernanceToken() internal view returns(iTrustGovernanceToken) {\\r\\n        return iTrustGovernanceToken(_governanceTokenAddress());\\r\\n    }\\r\\n\\r\\n    function _divider(uint numerator, uint denominator, uint precision) internal pure returns(uint) {        \\r\\n        return numerator*(uint(10)**uint(precision))/denominator;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Validate functions\\r\\n     */\\r\\n\\r\\n     function _nonReentrant() internal view {\\r\\n        require(_locked == FALSE);  \\r\\n    }\\r\\n\\r\\n    function _onlyAdmin() internal view {\\r\\n        require(\\r\\n            _getITrustVaultFactory().isAddressAdmin(_msgSender()),\\r\\n            \\\"Not admin\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _isTrustedSigner(address signer) internal view {\\r\\n        require(\\r\\n            _getITrustVaultFactory().isTrustedSignerAddress(signer),\\r\\n            \\\"Not trusted signer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _validateStakingDataAddress() internal view {\\r\\n        _validateStakingDataAddress(_msgSender());\\r\\n    }\\r\\n\\r\\n    function _validateStakingDataAddress(address contractAddress) internal view {\\r\\n        ITrustVaultFactory vaultFactory = ITrustVaultFactory(_iTrustFactoryAddress);\\r\\n        require(vaultFactory.isStakingDataAddress(contractAddress));\\r\\n    }\\r\\n\\r\\n    function _splitSignature(bytes memory sig)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint8, bytes32, bytes32)\\r\\n    {\\r\\n        require(sig.length == 65);\\r\\n\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        uint8 v;\\r\\n\\r\\n        assembly {\\r\\n            // first 32 bytes, after the length prefix\\r\\n            r := mload(add(sig, 32))\\r\\n            // second 32 bytes\\r\\n            s := mload(add(sig, 64))\\r\\n            // final byte (first byte of the next 32 bytes)\\r\\n            v := byte(0, mload(add(sig, 96)))\\r\\n        }\\r\\n\\r\\n        return (v, r, s);\\r\\n    }\\r\\n\\r\\n    function _recoverSigner(bytes32 message, bytes memory sig)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address)\\r\\n    {\\r\\n        uint8 v;\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n\\r\\n        (v, r, s) = _splitSignature(sig);\\r\\n\\r\\n        return ecrecover(message, v, r, s);\\r\\n    }\\r\\n\\r\\n    function _prefixed(bytes32 hash) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/C/Projects/Chainenable/iTrust/iTrust/contracts/contracts/phase1/vaults/StakingCalculation.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\nimport \\\"./../iTrustVaultFactory.sol\\\";\\r\\nimport \\\"./BaseContract.sol\\\";\\r\\nimport \\\"./StakingDataController/StakeData.sol\\\";\\r\\n\\r\\nimport { ITrustVaultLib as VaultLib } from \\\"./../libraries/ItrustVaultLib.sol\\\"; \\r\\n\\r\\ncontract StakingCalculation\\r\\n{\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // function getRoundDataForAccount(\\r\\n    //     VaultLib.Staking[] memory stakes,\\r\\n    //     VaultLib.UnStaking[] memory unstakes,\\r\\n    //     uint startBlock, \\r\\n    //     uint endBlock) external pure \\r\\n    //     returns (uint totalHoldings, uint[] memory stakeBlocks, uint[] memory stakeAmounts, uint[] memory unstakeStartBlocks, uint[] memory unstakeEndBlocks, uint[] memory unstakeAmounts)\\r\\n    // {\\r\\n        \\r\\n    //     totalHoldings = VaultLib.getHoldingsForBlockRange(stakes, startBlock, endBlock);\\r\\n\\r\\n    //     (stakeBlocks, stakeAmounts) = VaultLib.getRoundDataStakesForAccount(stakes, startBlock, endBlock);\\r\\n\\r\\n    //     (unstakeStartBlocks, unstakeEndBlocks, unstakeAmounts) = VaultLib.getRoundDataUnstakesForAccount(unstakes, startBlock, endBlock);\\r\\n\\r\\n    //     return (totalHoldings, stakeBlocks, stakeAmounts, unstakeStartBlocks, unstakeEndBlocks, unstakeAmounts);\\r\\n    // }\\r\\n\\r\\n    function getUnstakingsForBlockRange(\\r\\n        VaultLib.UnStaking[] memory unStakes, \\r\\n        uint startBlock, \\r\\n        uint endBlock) external pure returns (uint){\\r\\n        return VaultLib.getUnstakingsForBlockRange(\\r\\n                        unStakes, \\r\\n                        startBlock, \\r\\n                        endBlock\\r\\n                    );\\r\\n    }\\r\\n\\r\\n    function getHoldingsForBlockRange(\\r\\n        VaultLib.Staking[] memory stakes,\\r\\n        uint startBlock, \\r\\n        uint endBlock) external pure returns (uint){\\r\\n        \\r\\n        return VaultLib.getHoldingsForBlockRange(\\r\\n                    stakes, \\r\\n                    startBlock, \\r\\n                    endBlock);\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/C/Projects/Chainenable/iTrust/iTrust/contracts/contracts/phase1/vaults/StakingData.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./../iTrustVaultFactory.sol\\\";\\r\\nimport \\\"./BaseContract.sol\\\";\\r\\nimport \\\"./StakingDataController/StakeData.sol\\\";\\r\\nimport \\\"./StakingCalculation.sol\\\";\\r\\nimport \\\"./StakingDataController/RoundData.sol\\\";\\r\\n\\r\\ncontract StakingData is BaseContract\\r\\n{\\r\\n    using SafeMathUpgradeable for uint;\\r\\n\\r\\n    function initialize(\\r\\n        address iTrustFactoryAddress\\r\\n    ) \\r\\n        initializer \\r\\n        external \\r\\n    {\\r\\n        _iTrustFactoryAddress = iTrustFactoryAddress;\\r\\n        _locked = FALSE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Public functions\\r\\n     */\\r\\n\\r\\n     function _getTotalSupplyForBlockRange(address vaultAddress, uint endBlock, uint startBlock) internal returns(uint) {\\r\\n\\r\\n        (bool success, bytes memory result) = \\r\\n            _stakeDataImplementationAddress()\\r\\n                .delegatecall(\\r\\n                    abi.encodeWithSelector(\\r\\n                        StakeData.getTotalSupplyForBlockRange.selector,                       \\r\\n                        vaultAddress, \\r\\n                        endBlock,\\r\\n                        startBlock\\r\\n                    )\\r\\n                );\\r\\n        require(success);\\r\\n        return abi.decode(result, (uint256));\\r\\n    }\\r\\n\\r\\n    function _getTotalUnstakingsForBlockRange(address vaultAddress, uint endBlock, uint startBlock) internal returns(uint) {\\r\\n\\r\\n        (bool success, bytes memory result) = \\r\\n            _stakeDataImplementationAddress()\\r\\n                .delegatecall(\\r\\n                    abi.encodeWithSelector(\\r\\n                         StakeData.getTotalUnstakingsForBlockRange.selector,\\r\\n                        vaultAddress, \\r\\n                        endBlock,\\r\\n                        startBlock\\r\\n                    )\\r\\n                );\\r\\n        require(success);\\r\\n        return abi.decode(result, (uint256));\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n     function addVault(address vaultAddress) external  {\\r\\n        _validateFactory();\\r\\n        _CurrentRoundNumbers[vaultAddress] = 1;\\r\\n        _Rounds[vaultAddress][_CurrentRoundNumbers[vaultAddress]].startBlock = block.number;\\r\\n        _updateTotalSupplyForBlock(0);\\r\\n    }\\r\\n\\r\\n    function endRound(address[] calldata tokens, uint[] calldata tokenAmounts,  bool[] calldata ignoreUnstakes, uint commission) external returns(bool) {\\r\\n        _validateVault();\\r\\n\\r\\n        address vaultAddress = _vaultAddress();\\r\\n \\r\\n        uint startBlock = _Rounds[vaultAddress][_CurrentRoundNumbers[vaultAddress]].startBlock;\\r\\n        (bool result, ) = _roundDataImplementationAddress()\\r\\n            .delegatecall(\\r\\n                abi.encodeWithSelector(\\r\\n                RoundData.endRound.selector,\\r\\n                vaultAddress, \\r\\n                tokens, \\r\\n                tokenAmounts, \\r\\n                ignoreUnstakes, \\r\\n                _getTotalSupplyForBlockRange(\\r\\n                    vaultAddress, \\r\\n                    block.number, \\r\\n                    startBlock\\r\\n                ),\\r\\n                _getTotalUnstakingsForBlockRange(\\r\\n                        vaultAddress, \\r\\n                        block.number, \\r\\n                        startBlock\\r\\n                    ), \\r\\n                commission)\\r\\n            );\\r\\n      \\r\\n        require(result);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getCurrentRoundData() external view returns(uint, uint, uint) {\\r\\n        _validateVault();\\r\\n        return _getRoundDataForAddress(_vaultAddress(), _CurrentRoundNumbers[_vaultAddress()]);\\r\\n    }\\r\\n\\r\\n    function getRoundData(uint roundNumberIn) external view returns(uint, uint, uint) {\\r\\n        _validateVault();\\r\\n        return _getRoundDataForAddress(_vaultAddress(), roundNumberIn);\\r\\n    }\\r\\n\\r\\n    function getRoundRewards(uint roundNumber) external  view \\r\\n    returns(\\r\\n        address[] memory rewardTokens,\\r\\n        uint[] memory rewardAmounts,\\r\\n        uint[] memory commisionAmounts,\\r\\n        uint[] memory tokenPerBlock, \\r\\n        uint[] memory totalSupply\\r\\n    ) {\\r\\n        _validateVault();\\r\\n        return _getRoundRewardsForAddress(_vaultAddress(), roundNumber);\\r\\n    }\\r\\n\\r\\n    function startUnstake(address account, uint256 value) external returns(bool) {\\r\\n        _validateVault();\\r\\n        (bool result, ) = _stakeDataImplementationAddress()\\r\\n            .delegatecall(abi.encodeWithSelector(StakeData.startUnstakeForAddress.selector, _vaultAddress(), account, value));\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function getAccountStakes(address account) external view \\r\\n    returns(\\r\\n        uint stakingTotal,\\r\\n        uint unStakingTotal,\\r\\n        uint[] memory unStakingAmounts,\\r\\n        uint[] memory unStakingStarts            \\r\\n    ) {\\r\\n        _validateVault();\\r\\n        return _getAccountStakesForAddress(_vaultAddress(), account);\\r\\n    }\\r\\n\\r\\n    function getAccountStakingTotal(address account) external view returns (uint) {\\r\\n        _validateVault();\\r\\n        return _AccountStakes[_vaultAddress()][account].total.sub(_AccountUnstakingTotals[_vaultAddress()][account]);\\r\\n    }\\r\\n\\r\\n    function getAllAcountUnstakes() external view returns (address[] memory accounts, uint[] memory startTimes, uint[] memory values) {\\r\\n        _validateVault();\\r\\n        return _getAllAcountUnstakesForAddress(_vaultAddress());\\r\\n    }\\r\\n\\r\\n    function getAccountUnstakedTotal(address account) external view  returns (uint) {\\r\\n        _validateVault();\\r\\n        return _AccountUnstakedTotals[_vaultAddress()][account];\\r\\n    }\\r\\n\\r\\n    function authoriseUnstakes(address[] memory account, uint[] memory timestamp) external returns(bool) {\\r\\n        _validateVault();\\r\\n        require(account.length <= 10);        \\r\\n        for(uint8 i = 0; i < account.length; i++) {\\r\\n            _authoriseUnstake(_vaultAddress(), account[i], timestamp[i]);\\r\\n        }        \\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function withdrawUnstakedToken(address account, uint amount) external returns(bool)  {\\r\\n        _validateVault();\\r\\n        _nonReentrant();\\r\\n        _locked = TRUE;\\r\\n\\r\\n        address vaultAddress = _vaultAddress();\\r\\n        require(_AccountUnstakedTotals[vaultAddress][account] > 0);\\r\\n        require(amount <= _AccountUnstakedTotals[vaultAddress][account]);\\r\\n        _AccountUnstakedTotals[vaultAddress][account] = _AccountUnstakedTotals[vaultAddress][account].sub(amount);\\r\\n        _TotalUnstakedWnxm[vaultAddress] = _TotalUnstakedWnxm[vaultAddress].sub(amount);\\r\\n\\r\\n        _locked = FALSE;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function createStake(uint amount, address account) external returns(bool) {\\r\\n        _validateVault();\\r\\n        (bool result, ) = _stakeDataImplementationAddress()\\r\\n            .delegatecall(abi.encodeWithSelector(StakeData.createStake.selector,_vaultAddress(),amount,account));\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function removeStake(uint amount, address account) external returns(bool) {\\r\\n        _validateVault();\\r\\n        (bool result, ) = _stakeDataImplementationAddress()\\r\\n            .delegatecall(abi.encodeWithSelector(StakeData.removeStake.selector, _vaultAddress(), amount, account));\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function calculateRewards(address account) external view returns (address[] memory rewardTokens, uint[] memory rewards) {\\r\\n        _validateVault();\\r\\n        return _calculateRewards(account);\\r\\n    }\\r\\n\\r\\n    function withdrawRewards(address account, address[] memory rewardTokens, uint[] memory rewards) external returns(bool) {\\r\\n        _validateVault();\\r\\n        _nonReentrant();\\r\\n        _locked = TRUE;\\r\\n        _withdrawRewards(_vaultAddress(), rewardTokens, rewards, account);\\r\\n        _locked = FALSE;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateTotalSupplyForDayAndBlock(uint totalSupply) external returns(bool) {\\r\\n        _validateVault();\\r\\n        _updateTotalSupplyForBlock(totalSupply);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getTotalSupplyForAccountBlock(address vaultAddress, uint date) external view returns(uint) {\\r\\n        _validateBurnContract();\\r\\n        return _getTotalSupplyForAccountBlock(vaultAddress, date);\\r\\n    }\\r\\n\\r\\n    function getHoldingsForIndexAndBlockForVault(address vaultAddress, uint index, uint blockNumber) external view returns(address indexAddress, uint addressHoldings) {\\r\\n        _validateBurnContract();\\r\\n        return _getHoldingsForIndexAndBlock(vaultAddress, index, blockNumber);\\r\\n    }\\r\\n\\r\\n    function getNumberOfStakingAddressesForVault(address vaultAddress) external view returns(uint) {\\r\\n        _validateBurnContract();\\r\\n        return _AccountStakesAddresses[vaultAddress].length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Internal functions\\r\\n     */\\r\\n\\r\\n     function _getHoldingsForIndexAndBlock(address vaultAddress, uint index, uint blockNumber) internal view returns(address indexAddress, uint addressHoldings) {\\r\\n        require(_AccountStakesAddresses[vaultAddress].length - 1 >= index);\\r\\n        indexAddress = _AccountStakesAddresses[vaultAddress][index];\\r\\n        bytes memory data = abi.encodeWithSelector(StakingCalculation.getHoldingsForBlockRange.selector, _AccountStakes[vaultAddress][indexAddress].stakes, blockNumber, blockNumber);        \\r\\n        (, bytes memory resultData) = _stakingCalculationsAddress().staticcall(data);\\r\\n        addressHoldings = abi.decode(resultData, (uint256));\\r\\n        return(indexAddress, addressHoldings);\\r\\n    }\\r\\n\\r\\n     function _getTotalSupplyForAccountBlock(address vaultAddress, uint blockNumber) internal view returns(uint) {\\r\\n        uint index =  _getIndexForBlock(vaultAddress, blockNumber, 0);\\r\\n        return _TotalSupplyHistory[vaultAddress][_TotalSupplyKeys[vaultAddress][index]];\\r\\n    }\\r\\n\\r\\n     function _authoriseUnstake(address vaultAddress, address account, uint timestamp) internal {\\r\\n        (bool result, ) = _stakeDataImplementationAddress()\\r\\n            .delegatecall(abi.encodeWithSelector(StakeData.authoriseUnstake.selector, vaultAddress, account, timestamp));            \\r\\n        require(result);\\r\\n    }\\r\\n\\r\\n    function _updateTotalSupplyForBlock(uint totalSupply) public returns(bool) {\\r\\n        if(_TotalSupplyHistory[_vaultAddress()][block.number] == 0){  // Assumes there will never be 0, could use the array itself to check will look at this again\\r\\n            _TotalSupplyKeys[_vaultAddress()].push(block.number);\\r\\n        }\\r\\n\\r\\n        _TotalSupplyHistory[_vaultAddress()][block.number] = totalSupply;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _getRoundDataForAddress(address vaultAddress, uint roundNumberIn) internal view returns(uint roundNumber, uint startBlock, uint endBlock) {\\r\\n        roundNumber = roundNumberIn;\\r\\n        startBlock = _Rounds[vaultAddress][roundNumber].startBlock;\\r\\n        endBlock = _Rounds[vaultAddress][roundNumber].endBlock;\\r\\n        return( \\r\\n            roundNumber,\\r\\n            startBlock,\\r\\n            endBlock\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _getRoundRewardsForAddress(address vaultAddress, uint roundNumber) internal view \\r\\n    returns(\\r\\n        address[] memory rewardTokens,\\r\\n        uint[] memory rewardAmounts,\\r\\n        uint[] memory commissionAmounts,\\r\\n        uint[] memory tokenPerBlock,        \\r\\n        uint[] memory totalSupply\\r\\n    ) {\\r\\n        rewardTokens = new address[](totalRewardTokenAddresses[vaultAddress].length);\\r\\n        rewardAmounts = new uint[](totalRewardTokenAddresses[vaultAddress].length);\\r\\n        commissionAmounts = new uint[](totalRewardTokenAddresses[vaultAddress].length);\\r\\n        tokenPerBlock = new uint[](totalRewardTokenAddresses[vaultAddress].length);\\r\\n        totalSupply  = new uint[](totalRewardTokenAddresses[vaultAddress].length);\\r\\n        for(uint i = 0; i < totalRewardTokenAddresses[vaultAddress].length; i++){\\r\\n            rewardTokens[i] = totalRewardTokenAddresses[vaultAddress][i];\\r\\n            rewardAmounts[i] = _Rounds[vaultAddress][roundNumber].roundData[totalRewardTokenAddresses[vaultAddress][i]].amount;\\r\\n            commissionAmounts[i] = _Rounds[vaultAddress][roundNumber].roundData[totalRewardTokenAddresses[vaultAddress][i]].commissionAmount;\\r\\n            tokenPerBlock[i] = _Rounds[vaultAddress][roundNumber].roundData[totalRewardTokenAddresses[vaultAddress][i]].tokenPerBlock;\\r\\n            totalSupply[i] = _Rounds[vaultAddress][roundNumber].roundData[totalRewardTokenAddresses[vaultAddress][i]].totalSupply;\\r\\n        }\\r\\n        return( \\r\\n            rewardTokens,\\r\\n            rewardAmounts,\\r\\n            commissionAmounts,\\r\\n            tokenPerBlock,\\r\\n            totalSupply\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _getIndexForBlock(address vaultAddress, uint startBlock, uint startIndex) internal view returns(uint) {\\r\\n        uint i = startIndex == 0 ? _TotalSupplyKeys[vaultAddress].length.sub(1) : startIndex;\\r\\n        uint blockForIndex = _TotalSupplyKeys[vaultAddress][i];\\r\\n        \\r\\n        if(_TotalSupplyKeys[vaultAddress][0] > startBlock){\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        if(blockForIndex < startBlock){\\r\\n            return i;\\r\\n        }\\r\\n\\r\\n        while(blockForIndex > startBlock){\\r\\n            i = i.sub(1);\\r\\n            blockForIndex = _TotalSupplyKeys[vaultAddress][i];\\r\\n        }\\r\\n\\r\\n        return i;\\r\\n    }\\r\\n\\r\\n    function _getAccountStakesForAddress(address vaultAddress, address account) internal view \\r\\n    returns(\\r\\n        uint stakingTotal,\\r\\n        uint unStakingTotal,\\r\\n        uint[] memory unStakingAmounts,\\r\\n        uint[] memory unStakingStarts            \\r\\n    ) {\\r\\n        unStakingAmounts = new uint[](_AccountUnstakings[vaultAddress][account].length);\\r\\n        unStakingStarts = new uint[](_AccountUnstakings[vaultAddress][account].length);\\r\\n        for(uint i = 0; i < _AccountUnstakings[vaultAddress][account].length; i++){\\r\\n            if(_AccountUnstakings[vaultAddress][account][i].endBlock == 0){\\r\\n                unStakingAmounts[i] = _AccountUnstakings[vaultAddress][account][i].amount;\\r\\n                unStakingStarts[i] = _AccountUnstakings[vaultAddress][account][i].startDateTime;\\r\\n            }\\r\\n        }\\r\\n        return( \\r\\n            _AccountStakes[vaultAddress][account].total.sub(_AccountUnstakingTotals[vaultAddress][account]),\\r\\n            _AccountUnstakingTotals[vaultAddress][account],\\r\\n            unStakingAmounts,\\r\\n            unStakingStarts\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _getAllAcountUnstakesForAddress(address vaultAddress) internal view returns (address[] memory accounts, uint[] memory startTimes, uint[] memory values) {\\r\\n        accounts = new address[](_UnstakingRequests[vaultAddress].length);\\r\\n        startTimes = new uint[](_UnstakingRequests[vaultAddress].length);\\r\\n        values = new uint[](_UnstakingRequests[vaultAddress].length);\\r\\n        for(uint i = 0; i < _UnstakingRequests[vaultAddress].length; i++) {\\r\\n            if(_UnstakingRequests[vaultAddress][i].endBlock == 0 ) {\\r\\n                accounts[i] = _UnstakingRequests[vaultAddress][i].account;\\r\\n                startTimes[i] = _UnstakingRequests[vaultAddress][i].startDateTime;\\r\\n                values[i] = _UnstakingRequests[vaultAddress][i].amount;\\r\\n            }\\r\\n        }        \\r\\n        return(accounts, startTimes, values);\\r\\n    }\\r\\n\\r\\n    function getUnstakedWxnmTotal() external view returns(uint total) {\\r\\n        _validateVault();\\r\\n        total = _TotalUnstakedWnxm[_vaultAddress()];\\r\\n    }\\r\\n\\r\\n    function _calculateRewards(address account) internal view  returns (address[] memory rewardTokens, uint[] memory rewards) {\\r\\n        rewardTokens = totalRewardTokenAddresses[_vaultAddress()];\\r\\n        rewards = new uint[](rewardTokens.length);\\r\\n\\r\\n        for(uint x = 0; x < totalRewardTokenAddresses[_vaultAddress()].length; x++){            \\r\\n            (rewards[x]) = _calculateReward(_vaultAddress(), account, rewardTokens[x]);            \\r\\n            rewards[x] = rewards[x].div(1 ether);\\r\\n        }\\r\\n\\r\\n        return (rewardTokens, rewards);\\r\\n    }\\r\\n\\r\\n     function _calculateReward(address vaultAddress, address account, address rewardTokenAddress) internal view returns (uint reward){\\r\\n        VaultLib.ClaimedReward memory claimedReward = _AccountRewards[vaultAddress][account][rewardTokenAddress];\\r\\n\\r\\n        if(_RewardStartingRounds[vaultAddress][rewardTokenAddress] == 0){            \\r\\n            return(0);\\r\\n        }\\r\\n\\r\\n        uint futureRoundNumber = _CurrentRoundNumbers[vaultAddress] - 1;// one off as the current hasnt closed\\r\\n        address calcContract = _stakingCalculationsAddress();\\r\\n        while(claimedReward.lastClaimedRound < futureRoundNumber \\r\\n                && _RewardStartingRounds[vaultAddress][rewardTokenAddress] <= futureRoundNumber\\r\\n                && futureRoundNumber != 0 )\\r\\n        {\\r\\n\\r\\n            if(_Rounds[vaultAddress][futureRoundNumber].roundData[rewardTokenAddress].amount == 0){\\r\\n                futureRoundNumber--;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            (, bytes memory resultData) = calcContract.staticcall(abi.encodeWithSignature(\\r\\n                \\\"getHoldingsForBlockRange((uint256,uint256,uint256,uint256)[],uint256,uint256)\\\", \\r\\n                _AccountStakes[vaultAddress][account].stakes, \\r\\n                _Rounds[vaultAddress][futureRoundNumber].startBlock, \\r\\n                _Rounds[vaultAddress][futureRoundNumber].endBlock\\r\\n            ));\\r\\n            uint holdingsForRound = abi.decode(resultData, (uint256));\\r\\n\\r\\n            if (!(_Rounds[vaultAddress][futureRoundNumber].roundData[rewardTokenAddress].ignoreUnstakes)) {\\r\\n                (, bytes memory unstakedResultData) = calcContract.staticcall(abi.encodeWithSignature(\\r\\n                    \\\"getUnstakingsForBlockRange((address,uint256,uint256,uint256,uint256)[],uint256,uint256)\\\", \\r\\n                    _AccountUnstakings[vaultAddress][account], \\r\\n                    _Rounds[vaultAddress][futureRoundNumber].startBlock, \\r\\n                    _Rounds[vaultAddress][futureRoundNumber].endBlock\\r\\n                ));\\r\\n                holdingsForRound = holdingsForRound.sub(abi.decode(unstakedResultData, (uint256)));\\r\\n            }\\r\\n           \\r\\n            holdingsForRound = VaultLib.divider(\\r\\n                     holdingsForRound, \\r\\n                     _Rounds[vaultAddress][futureRoundNumber].roundData[rewardTokenAddress].totalSupply, \\r\\n                     18)\\r\\n                     .mul(_Rounds[vaultAddress][futureRoundNumber].roundData[rewardTokenAddress].amount);\\r\\n            reward = reward.add(holdingsForRound);\\r\\n            futureRoundNumber--;\\r\\n        }\\r\\n\\r\\n        return (reward);\\r\\n    }\\r\\n\\r\\n    function _withdrawRewards(address vaultAddress, address[] memory rewardTokens, uint[] memory rewards, address account) internal {\\r\\n          \\r\\n        for (uint x = 0; x < rewardTokens.length; x++){\\r\\n            _AccountRewards[vaultAddress][account][rewardTokens[x]].amount = _AccountRewards[vaultAddress][account][rewardTokens[x]].amount + rewards[x];\\r\\n            _AccountRewards[vaultAddress][account][rewardTokens[x]].lastClaimedRound = _CurrentRoundNumbers[vaultAddress] - 1;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function _vaultAddress() internal view returns(address) {\\r\\n        return _msgSender();\\r\\n    }\\r\\n\\r\\n    function _roundDataImplementationAddress() internal view returns(address) {\\r\\n        ITrustVaultFactory vaultFactory = ITrustVaultFactory(_iTrustFactoryAddress);\\r\\n        return vaultFactory.getRoundDataImplementationAddress();\\r\\n    }\\r\\n\\r\\n    function _stakeDataImplementationAddress() internal view returns(address) {\\r\\n        ITrustVaultFactory vaultFactory = ITrustVaultFactory(_iTrustFactoryAddress);\\r\\n        return vaultFactory.getStakeDataImplementationAddress();\\r\\n    }\\r\\n\\r\\n    function _stakingCalculationsAddress() internal view returns(address) {\\r\\n        ITrustVaultFactory vaultFactory = ITrustVaultFactory(_iTrustFactoryAddress);\\r\\n        return address(vaultFactory.getStakingCalculationsAddress());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Validate functions\\r\\n     */\\r\\n\\r\\n    function _validateVault() internal view {\\r\\n        ITrustVaultFactory vaultFactory = ITrustVaultFactory(_iTrustFactoryAddress);\\r\\n        require(vaultFactory.isActiveVault(_vaultAddress()));\\r\\n    }\\r\\n\\r\\n    function _validateBurnContract() internal view {\\r\\n        ITrustVaultFactory vaultFactory = ITrustVaultFactory(_iTrustFactoryAddress);\\r\\n        require(vaultFactory.isBurnAddress(_msgSender()));\\r\\n    }\\r\\n\\r\\n    function _validateFactory() internal view {\\r\\n        require(_msgSender() == _iTrustFactoryAddress);\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/C/Projects/Chainenable/iTrust/iTrust/contracts/contracts/phase1/vaults/StakingDataController/RoundData.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"./../BaseContract.sol\\\";\\r\\n\\r\\ncontract RoundData is BaseContract\\r\\n{\\r\\n    using SafeMathUpgradeable for uint;\\r\\n    \\r\\n    function endRound(\\r\\n        address vaultAddress, \\r\\n        address[] memory tokens, \\r\\n        uint[] memory tokenAmounts, \\r\\n        bool[] memory ignoreUnstakes,        \\r\\n        uint totalSupplyForBlockRange, \\r\\n        uint totalUnstakings,\\r\\n        uint commissionValue) \\r\\n        external \\r\\n    {\\r\\n        require( _Rounds[vaultAddress][_CurrentRoundNumbers[vaultAddress]].startBlock < block.number);       \\r\\n        uint32 roundNumber = _CurrentRoundNumbers[vaultAddress];\\r\\n        uint rewardAmount;\\r\\n        uint commissionAmount;\\r\\n        uint tokensPerBlock; //Amoun\\r\\n\\r\\n        for (uint i=0; i < tokens.length; i++) {    \\r\\n              \\r\\n            rewardAmount = tokenAmounts[i].sub(tokenAmounts[i].mul(commissionValue).div(10000));\\r\\n            commissionAmount = tokenAmounts[i].mul(commissionValue).div(10000);\\r\\n            tokensPerBlock = VaultLib.divider(rewardAmount, _getAdjustedTotalSupply(totalSupplyForBlockRange, totalUnstakings, ignoreUnstakes[i]), 18);\\r\\n            VaultLib.RewardTokenRoundData memory tokenData = VaultLib.RewardTokenRoundData(\\r\\n                {\\r\\n                    tokenAddress: tokens[i],\\r\\n                    amount: rewardAmount,\\r\\n                    commissionAmount: commissionAmount,\\r\\n                    tokenPerBlock: tokensPerBlock,//.div(1e18),\\r\\n                    totalSupply: _getAdjustedTotalSupply(totalSupplyForBlockRange, totalUnstakings, ignoreUnstakes[i]),  \\r\\n                    ignoreUnstakes: ignoreUnstakes[i]\\r\\n                }\\r\\n            );\\r\\n\\r\\n            _Rounds[vaultAddress][roundNumber].roundData[tokens[i]] = tokenData;            \\r\\n           \\r\\n            if(_RewardTokens[vaultAddress][tokens[i]] != TRUE){\\r\\n                _RewardStartingRounds[vaultAddress][tokens[i]] = roundNumber;\\r\\n                totalRewardTokenAddresses[vaultAddress].push(tokens[i]);\\r\\n                _RewardTokens[vaultAddress][tokens[i]] = TRUE;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //do this last\\r\\n         _Rounds[vaultAddress][_CurrentRoundNumbers[vaultAddress]].endBlock = block.number;\\r\\n        _CurrentRoundNumbers[vaultAddress]++;\\r\\n        _Rounds[vaultAddress][_CurrentRoundNumbers[vaultAddress]].startBlock = block.number;\\r\\n        \\r\\n    }\\r\\n\\r\\n    function _getAdjustedTotalSupply(uint totalSupply, uint totalUnstaking, bool ignoreUnstaking) internal pure returns(uint) {\\r\\n        if(ignoreUnstaking) {\\r\\n            return totalSupply;\\r\\n        }\\r\\n        return (totalUnstaking > totalSupply ? 0 : totalSupply.sub(totalUnstaking));\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/C/Projects/Chainenable/iTrust/iTrust/contracts/contracts/phase1/vaults/StakingDataController/StakeData.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./../BaseContract.sol\\\";\\r\\nimport \\\"./../GovernanceDistribution.sol\\\";\\r\\n\\r\\ncontract StakeData is BaseContract\\r\\n{    \\r\\n    using SafeMathUpgradeable for uint;\\r\\n\\r\\n    function startUnstakeForAddress(address vaultAddress, address account, uint256 value) external  {\\r\\n        require( \\r\\n            ( _AccountStakes[vaultAddress][account].total.sub(_AccountUnstakingTotals[vaultAddress][account]) ) \\r\\n            >= value);\\r\\n\\r\\n        _AccountUnstakingTotals[vaultAddress][account] =_AccountUnstakingTotals[vaultAddress][account].add(value);\\r\\n        VaultLib.UnStaking memory unstaking = VaultLib.UnStaking(account, value, block.timestamp, block.number, 0 );\\r\\n        _AccountUnstakings[vaultAddress][account].push(unstaking);\\r\\n        _UnstakingRequests[vaultAddress].push(unstaking);\\r\\n        _UnstakingAddresses[vaultAddress].push(account);\\r\\n        _TotalUnstakingKeys[vaultAddress].push(block.number);\\r\\n        _TotalUnstakingHistory[vaultAddress][block.number]  = unstaking;\\r\\n    }\\r\\n\\r\\n    function authoriseUnstake(address vaultAddress, address account, uint timestamp) external {\\r\\n        uint amount = 0;        \\r\\n        for(uint i = 0; i < _AccountUnstakings[vaultAddress][account].length; i++){\\r\\n            if(_AccountUnstakings[vaultAddress][account][i].startDateTime == timestamp) {\\r\\n                amount = _AccountUnstakings[vaultAddress][account][i].amount;\\r\\n                _AccountUnstakedTotals[vaultAddress][account] = _AccountUnstakedTotals[vaultAddress][account] + amount;\\r\\n                _AccountUnstakings[vaultAddress][account][i].endBlock = block.number;\\r\\n                _AccountUnstakingTotals[vaultAddress][account] = _AccountUnstakingTotals[vaultAddress][account] - amount;\\r\\n                _TotalUnstakedWnxm[vaultAddress] = _TotalUnstakedWnxm[vaultAddress].add(amount);\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for(uint i = 0; i < _UnstakingRequests[vaultAddress].length; i++){\\r\\n            if(_UnstakingRequests[vaultAddress][i].startDateTime == timestamp &&\\r\\n                _UnstakingRequests[vaultAddress][i].amount == amount &&\\r\\n                _UnstakingRequests[vaultAddress][i].endBlock == 0 &&\\r\\n                _UnstakingAddresses[vaultAddress][i] == account) \\r\\n            {\\r\\n                    delete _UnstakingAddresses[vaultAddress][i];\\r\\n                    _UnstakingRequests[vaultAddress][i].endBlock = block.number;\\r\\n                    _TotalUnstakingHistory[vaultAddress]\\r\\n                        [_UnstakingRequests[vaultAddress][i].startBlock].endBlock = block.number;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        _AccountStakes[vaultAddress][account].total = _AccountStakes[vaultAddress][account].total.sub(amount);\\r\\n        _AccountStakes[vaultAddress][account].stakes.push(VaultLib.Staking(block.timestamp, block.number, amount, _AccountStakes[vaultAddress][account].total));\\r\\n        _governanceDistributionContract().removeStake(account, amount);\\r\\n        \\r\\n    }\\r\\n\\r\\n    function createStake(address vaultAddress, uint amount, address account) external {\\r\\n\\r\\n        if( _AccountStakes[vaultAddress][account].startRound == 0) {\\r\\n            _AccountStakes[vaultAddress][account].startRound = _CurrentRoundNumbers[vaultAddress];\\r\\n            _AccountStakesAddresses[vaultAddress].push(account);\\r\\n        }\\r\\n\\r\\n        _AccountStakes[vaultAddress][account].total = _AccountStakes[vaultAddress][account].total.add(amount);\\r\\n        // block number is being used to record the block at which staking started for governance token distribution\\r\\n        _AccountStakes[vaultAddress][account].stakes.push(\\r\\n            VaultLib.Staking(block.timestamp, block.number, amount, _AccountStakes[vaultAddress][account].total)\\r\\n        );\\r\\n        _governanceDistributionContract().addStake(account, amount);\\r\\n    }\\r\\n\\r\\n    function removeStake(address vaultAddress, uint amount, address account) external {\\r\\n\\r\\n        if( _AccountStakes[vaultAddress][account].startRound == 0) {\\r\\n            _AccountStakes[vaultAddress][account].startRound = _CurrentRoundNumbers[vaultAddress];\\r\\n             _AccountStakesAddresses[vaultAddress].push(account);\\r\\n        }\\r\\n\\r\\n        require(_AccountStakes[vaultAddress][account].total >= amount);\\r\\n\\r\\n        _AccountStakes[vaultAddress][account].total = _AccountStakes[vaultAddress][account].total.sub(amount);\\r\\n        // block number is being used to record the block at which staking started for governance token distribution\\r\\n        _AccountStakes[vaultAddress][account].stakes.push(\\r\\n            VaultLib.Staking(block.timestamp, block.number, amount, _AccountStakes[vaultAddress][account].total)\\r\\n        );\\r\\n        _governanceDistributionContract().removeStake(account, amount);\\r\\n    }\\r\\n\\r\\n    function _governanceDistributionAddress() internal view returns(address) {\\r\\n        ITrustVaultFactory vaultFactory = ITrustVaultFactory(_iTrustFactoryAddress);\\r\\n        return vaultFactory.getGovernanceDistributionAddress();\\r\\n    }\\r\\n\\r\\n    function _governanceDistributionContract() internal view returns(GovernanceDistribution) {\\r\\n        return GovernanceDistribution(_governanceDistributionAddress());\\r\\n    }\\r\\n\\r\\n    function getTotalUnstakingsForBlockRange(address vaultAddress, uint endBlock, uint startBlock) external view returns(uint) {\\r\\n         // If we have bad data, no supply data or it starts after the block we are looking for then we can return zero\\r\\n        if(endBlock < startBlock \\r\\n            || _TotalUnstakingKeys[vaultAddress].length == 0 \\r\\n            || _TotalUnstakingKeys[vaultAddress][0] > endBlock){\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint lastIndex = _TotalUnstakingKeys[vaultAddress].length - 1;\\r\\n        uint total;\\r\\n        uint diff;\\r\\n        uint stakeEnd;\\r\\n        uint stakeStart;\\r\\n        if(_TotalUnstakingHistory[vaultAddress][_TotalUnstakingKeys[vaultAddress][lastIndex]].endBlock < startBlock\\r\\n            && lastIndex == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        \\r\\n        //last index should now be in our range so loop through until all block numbers are covered\\r\\n        while( lastIndex >= 0 ) {\\r\\n\\r\\n            if( _TotalUnstakingHistory[vaultAddress][_TotalUnstakingKeys[vaultAddress][lastIndex]].endBlock < startBlock &&\\r\\n                _TotalUnstakingHistory[vaultAddress][_TotalUnstakingKeys[vaultAddress][lastIndex]].endBlock != 0 )\\r\\n            {\\r\\n                if (lastIndex == 0) {\\r\\n                    break;\\r\\n                }\\r\\n                lastIndex = lastIndex.sub(1);\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            stakeEnd = _TotalUnstakingHistory[vaultAddress][_TotalUnstakingKeys[vaultAddress][lastIndex]].endBlock == 0 \\r\\n                ? endBlock : _TotalUnstakingHistory[vaultAddress][_TotalUnstakingKeys[vaultAddress][lastIndex]].endBlock;\\r\\n\\r\\n            stakeEnd = (stakeEnd >= endBlock ? endBlock : stakeEnd);\\r\\n\\r\\n            stakeStart = _TotalUnstakingHistory[vaultAddress][_TotalUnstakingKeys[vaultAddress][lastIndex]].startBlock < startBlock \\r\\n                ? startBlock : _TotalUnstakingHistory[vaultAddress][_TotalUnstakingKeys[vaultAddress][lastIndex]].startBlock;\\r\\n            \\r\\n            diff = (stakeEnd == stakeStart ? 1 : stakeEnd.sub(stakeStart));\\r\\n           \\r\\n            total = total.add(_TotalUnstakingHistory[vaultAddress][_TotalUnstakingKeys[vaultAddress][lastIndex]].amount.mul(diff));\\r\\n           \\r\\n\\r\\n            if(lastIndex == 0){\\r\\n                break;\\r\\n            } \\r\\n\\r\\n            lastIndex = lastIndex.sub(1); \\r\\n        }\\r\\n\\r\\n        return total;\\r\\n    }\\r\\n\\r\\n    function getTotalSupplyForBlockRange(address vaultAddress, uint endBlock, uint startBlock) external view returns(uint) {\\r\\n\\r\\n        // If we have bad data, no supply data or it starts after the block we are looking for then we can return zero\\r\\n        if(endBlock < startBlock \\r\\n            || _TotalSupplyKeys[vaultAddress].length == 0 \\r\\n            || _TotalSupplyKeys[vaultAddress][0] > endBlock){\\r\\n            return 0;\\r\\n        }\\r\\n        uint lastIndex = _TotalSupplyKeys[vaultAddress].length - 1;\\r\\n        \\r\\n        // If the last total supply is before the start we are looking for we can take the last value\\r\\n        if(_TotalSupplyKeys[vaultAddress][lastIndex] <= startBlock){\\r\\n            return _TotalSupplyHistory[vaultAddress][_TotalSupplyKeys[vaultAddress][lastIndex]].mul(endBlock.sub(startBlock));\\r\\n        }\\r\\n\\r\\n        // working our way back we need to get the first index that falls into our range\\r\\n        // This could be large so need to think of a better way to get here\\r\\n        while(lastIndex > 0 && _TotalSupplyKeys[vaultAddress][lastIndex] > endBlock){\\r\\n            if(lastIndex == 0){\\r\\n                break;\\r\\n            } \\r\\n            lastIndex = lastIndex.sub(1);\\r\\n        }\\r\\n\\r\\n        uint total;\\r\\n        uint diff;\\r\\n        //last index should now be in our range so loop through until all block numbers are covered\\r\\n       \\r\\n        while(_TotalSupplyKeys[vaultAddress][lastIndex] >= startBlock) {  \\r\\n            diff = 0;\\r\\n            if(_TotalSupplyKeys[vaultAddress][lastIndex] <= startBlock){\\r\\n                diff = endBlock.sub(startBlock) == 0 ? 1 : endBlock.sub(startBlock);\\r\\n                total = total.add(_TotalSupplyHistory[vaultAddress][_TotalSupplyKeys[vaultAddress][lastIndex]].mul(diff));\\r\\n                break;\\r\\n            }\\r\\n            \\r\\n            diff = endBlock.sub(_TotalSupplyKeys[vaultAddress][lastIndex]) == 0 ? 1 : endBlock.sub(_TotalSupplyKeys[vaultAddress][lastIndex]);\\r\\n            total = total.add(_TotalSupplyHistory[vaultAddress][_TotalSupplyKeys[vaultAddress][lastIndex]].mul(diff));\\r\\n            endBlock = _TotalSupplyKeys[vaultAddress][lastIndex];\\r\\n\\r\\n            if(lastIndex == 0){\\r\\n                break;\\r\\n            } \\r\\n\\r\\n            lastIndex = lastIndex.sub(1); \\r\\n        }\\r\\n\\r\\n        // If the last total supply is before the start we are looking for we can take the last value\\r\\n        if(_TotalSupplyKeys[vaultAddress][lastIndex] <= startBlock && startBlock < endBlock){\\r\\n            total = total.add(_TotalSupplyHistory[vaultAddress][_TotalSupplyKeys[vaultAddress][lastIndex]].mul(endBlock.sub(startBlock)));\\r\\n        }\\r\\n \\r\\n        return total;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/C/Projects/Chainenable/iTrust/iTrust/contracts/contracts/phase1/vaults/Vault.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"./StakingData.sol\\\";\\r\\nimport \\\"./../iTrustVaultFactory.sol\\\";\\r\\nimport { ITrustVaultLib as VaultLib } from \\\"./../libraries/ItrustVaultLib.sol\\\"; \\r\\ncontract Vault is  \\r\\n    ERC20Upgradeable \\r\\n{\\r\\n    using SafeMathUpgradeable for uint;\\r\\n\\r\\n    uint8 internal constant FALSE = 0;\\r\\n    uint8 internal constant TRUE = 1;\\r\\n    uint8 internal _Locked;\\r\\n\\r\\n    uint internal _RewardCommission;\\r\\n    uint internal _AdminFee;    \\r\\n    address internal _NXMAddress;\\r\\n    address internal _WNXMAddress;\\r\\n    address payable internal _VaultWalletAddress;\\r\\n    address payable internal _TreasuryAddress;\\r\\n    address internal _StakingDataAddress;\\r\\n    address internal _BurnDataAddress;\\r\\n    address internal _iTrustFactoryAddress;\\r\\n    mapping (address => uint256) internal _ReentrantCheck;\\r\\n    mapping(address => mapping(string => bool)) internal _UsedNonces;\\r\\n\\r\\n    event Stake(address indexed account, address indexed tokenAddress, uint amount, uint balance, uint totalStaked);\\r\\n    event UnstakedRequest(address indexed  account, uint amount, uint balance, uint totalStaked);\\r\\n    event UnstakedApproved(address indexed  account, uint amount, uint balance, uint totalStaked);\\r\\n    event TransferITV(\\r\\n        address indexed  fromAccount, \\r\\n        address indexed toAccount, \\r\\n        uint amount, \\r\\n        uint fromBalance, \\r\\n        uint fromTotalStaked,\\r\\n        uint toBalance, \\r\\n        uint toTotalStaked);\\r\\n    \\r\\n    function initialize(\\r\\n        address nxmAddress,\\r\\n        address wnxmAddress,\\r\\n        address vaultWalletAddress,\\r\\n        address stakingDataAddress,\\r\\n        address burnDataAddress,\\r\\n        string memory tokenName,\\r\\n        string memory tokenSymbol,\\r\\n        uint adminFee,\\r\\n        uint commission,\\r\\n        address treasuryAddress\\r\\n    ) \\r\\n        initializer \\r\\n        external \\r\\n    {\\r\\n        __ERC20_init(tokenName, tokenSymbol); \\r\\n        _Locked = FALSE;\\r\\n        _NXMAddress = nxmAddress;\\r\\n        _WNXMAddress = wnxmAddress;\\r\\n        _VaultWalletAddress = payable(vaultWalletAddress);\\r\\n        _StakingDataAddress = stakingDataAddress;\\r\\n        _BurnDataAddress = burnDataAddress;\\r\\n        _AdminFee = adminFee;\\r\\n        _iTrustFactoryAddress = _msgSender();\\r\\n        _RewardCommission = commission;\\r\\n        _TreasuryAddress = payable(treasuryAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Public functions\\r\\n     */\\r\\n\\r\\n    function getAdminFee() external view returns (uint) {\\r\\n        return _AdminFee;\\r\\n    }\\r\\n\\r\\n    function SetAdminFee(uint newFee) external {\\r\\n        _onlyAdmin();\\r\\n        _AdminFee = newFee;\\r\\n    }\\r\\n\\r\\n    function setCommission(uint newCommission) external {\\r\\n        _onlyAdmin();\\r\\n        _RewardCommission = newCommission;\\r\\n    }\\r\\n\\r\\n    function setTreasury(address newTreasury) external {\\r\\n        _onlyAdmin();\\r\\n        _TreasuryAddress = payable(newTreasury);\\r\\n    }\\r\\n\\r\\n    function depositNXM(uint256 value) external  {\\r\\n        _valueCheck(value);\\r\\n        _nonReentrant();\\r\\n        _Locked = TRUE;\\r\\n        IERC20Upgradeable nxmToken = IERC20Upgradeable(_NXMAddress);        \\r\\n\\r\\n        _mint(\\r\\n            _msgSender(),\\r\\n            value\\r\\n        );\\r\\n        \\r\\n        require(_getStakingDataContract().createStake(value, _msgSender()));\\r\\n        require(nxmToken.transferFrom(_msgSender(), _VaultWalletAddress, value));        \\r\\n        emit Stake(\\r\\n            _msgSender(), \\r\\n            _NXMAddress, \\r\\n            value,\\r\\n            balanceOf(_msgSender()),\\r\\n            _getStakingDataContract().getAccountStakingTotal(_msgSender()));\\r\\n\\r\\n        _Locked = FALSE;\\r\\n    }\\r\\n\\r\\n    function _depositRewardToken(address token, uint amount) internal {        \\r\\n        require(token != address(0));   \\r\\n        uint commission = 0;\\r\\n        uint remain = amount;\\r\\n        if (_RewardCommission != 0) {\\r\\n            commission = amount.mul(_RewardCommission).div(10000);\\r\\n            remain = amount.sub(commission);            \\r\\n        }       \\r\\n\\r\\n        IERC20Upgradeable tokenContract = IERC20Upgradeable(token);\\r\\n        if (commission != 0) {\\r\\n            require(tokenContract.transferFrom(msg.sender, _TreasuryAddress, commission));  \\r\\n        }\\r\\n        require(tokenContract.transferFrom(msg.sender, address(this), remain));  \\r\\n    }\\r\\n\\r\\n    function endRound(address[] calldata tokens, uint[] calldata tokenAmounts, bool[] calldata ignoreUnstakes) external {\\r\\n        _onlyAdmin();\\r\\n        require(tokens.length == tokenAmounts.length);\\r\\n        \\r\\n        require(_getStakingDataContract().endRound(tokens, tokenAmounts, ignoreUnstakes, _RewardCommission));\\r\\n        for(uint i = 0; i < tokens.length; i++) {\\r\\n            _depositRewardToken(tokens[i], tokenAmounts[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getCurrentRoundData() external view returns(uint roundNumber, uint startBlock, uint endBlock) {\\r\\n        _onlyAdmin();\\r\\n       \\r\\n        return _getStakingDataContract().getCurrentRoundData();\\r\\n    }\\r\\n\\r\\n    function getRoundData(uint roundNumberIn) external view returns(uint roundNumber, uint startBlock, uint endBlock) {\\r\\n        _onlyAdmin();\\r\\n        \\r\\n        return _getStakingDataContract().getRoundData(roundNumberIn);\\r\\n    }\\r\\n\\r\\n    function getRoundRewards(uint roundNumber) external view \\r\\n    returns(\\r\\n        address[] memory rewardTokens,\\r\\n        uint[] memory rewardAmounts ,\\r\\n        uint[] memory commissionAmounts,\\r\\n        uint[] memory tokenPerDay,\\r\\n        uint[] memory totalSupply              \\r\\n    ) {\\r\\n        _onlyAdmin();\\r\\n        \\r\\n        return _getStakingDataContract().getRoundRewards(roundNumber);\\r\\n    }\\r\\n\\r\\n    function depositWNXM(uint256 value) external {\\r\\n        _valueCheck(value);\\r\\n        _nonReentrant();\\r\\n        _Locked = TRUE;\\r\\n        IERC20Upgradeable wnxmToken = IERC20Upgradeable(_WNXMAddress);\\r\\n        \\r\\n        _mint(\\r\\n            _msgSender(),\\r\\n            value\\r\\n        );\\r\\n\\r\\n        require(_getStakingDataContract().createStake(value, _msgSender()));\\r\\n        require(wnxmToken.transferFrom(_msgSender(), _VaultWalletAddress, value));        \\r\\n        emit Stake(\\r\\n            _msgSender(), \\r\\n            _WNXMAddress, \\r\\n            value,\\r\\n            balanceOf(_msgSender()),\\r\\n            _getStakingDataContract().getAccountStakingTotal(_msgSender()));\\r\\n        _Locked = FALSE;\\r\\n    }\\r\\n\\r\\n    function startUnstake(uint256 value) external payable  {\\r\\n        _nonReentrant();\\r\\n        _Locked = TRUE;\\r\\n        uint adminFee = _AdminFee;\\r\\n        if(adminFee != 0) {\\r\\n            require(msg.value == _AdminFee);\\r\\n        }\\r\\n        \\r\\n        require(_getStakingDataContract().startUnstake(_msgSender(), value));\\r\\n        if(adminFee != 0) {\\r\\n            (bool sent, ) = _VaultWalletAddress.call{value: adminFee}(\\\"\\\");\\r\\n            require(sent);\\r\\n        }\\r\\n        emit UnstakedRequest(\\r\\n            _msgSender(), \\r\\n            value,\\r\\n            balanceOf(_msgSender()),\\r\\n            _getStakingDataContract().getAccountStakingTotal(_msgSender()));\\r\\n\\r\\n        _Locked = FALSE;\\r\\n    }\\r\\n\\r\\n    function getAccountStakes() external  view \\r\\n    returns(\\r\\n        uint stakingTotal,\\r\\n        uint unStakingTotal,\\r\\n        uint[] memory unStakingAmounts,\\r\\n        uint[] memory unStakingStarts            \\r\\n    ) {       \\r\\n        return _getStakingDataContract().getAccountStakes(_msgSender());\\r\\n    }\\r\\n\\r\\n    function getAllAcountUnstakes() external view returns (address[] memory accounts, uint[] memory startTimes, uint[] memory values) {\\r\\n        _onlyAdmin();\\r\\n        return _getStakingDataContract().getAllAcountUnstakes();\\r\\n    }\\r\\n\\r\\n    function getAccountUnstakedTotal() external view  returns (uint) {\\r\\n        return _getStakingDataContract().getAccountUnstakedTotal(_msgSender());\\r\\n    }\\r\\n\\r\\n    function getUnstakedwNXMTotal() external view returns (uint) {\\r\\n        return _getStakingDataContract().getUnstakedWxnmTotal();\\r\\n    }\\r\\n\\r\\n\\r\\n    function authoriseUnstakes(address[] memory account, uint[] memory timestamp, uint[] memory amounts) external {\\r\\n        _onlyAdmin();        \\r\\n        require(_getStakingDataContract().authoriseUnstakes(account, timestamp));  \\r\\n        //for each unstake burn\\r\\n        for(uint i = 0; i < account.length; i++) {\\r\\n            _burn(account[i], amounts[i]); \\r\\n            emit UnstakedApproved(\\r\\n                account[i], \\r\\n                amounts[i],\\r\\n                balanceOf(account[i]),\\r\\n                _getStakingDataContract().getAccountStakingTotal(account[i]));\\r\\n        }             \\r\\n    }\\r\\n\\r\\n    function withdrawUnstakedwNXM(uint amount) external {\\r\\n        _nonReentrant();\\r\\n        _Locked = TRUE;\\r\\n        IERC20Upgradeable wnxm = IERC20Upgradeable(_WNXMAddress);\\r\\n       \\r\\n        uint balance = wnxm.balanceOf(address(this));\\r\\n        \\r\\n        require(amount <= balance);\\r\\n        require(_getStakingDataContract().withdrawUnstakedToken(_msgSender(), amount));\\r\\n\\r\\n        require(wnxm.transfer(msg.sender, amount));\\r\\n       \\r\\n      //  emit ClaimUnstaked(msg.sender, amount);\\r\\n        _Locked = FALSE;\\r\\n    }\\r\\n\\r\\n    function isAdmin() external view returns (bool) {\\r\\n        ITrustVaultFactory vaultFactory = ITrustVaultFactory(_iTrustFactoryAddress);\\r\\n        return vaultFactory.isAddressAdmin(_msgSender());\\r\\n    }\\r\\n    function calculateRewards() external view returns (address[] memory rewardTokens, uint[] memory rewards) {        \\r\\n        return _getStakingDataContract().calculateRewards(_msgSender());\\r\\n    }\\r\\n\\r\\n    function calculateRewardsForAccount(address account) external view returns (address[] memory rewardTokens, uint[] memory rewards) {\\r\\n        _isTrustedSigner(_msgSender());\\r\\n       \\r\\n        return _getStakingDataContract().calculateRewards(account);\\r\\n    }\\r\\n\\r\\n    function withdrawRewards(address[] memory tokens, uint[] memory rewards, string memory nonce, bytes memory sig) external returns (bool) {\\r\\n        require(!_UsedNonces[_msgSender()][nonce]);\\r\\n        _nonReentrant();\\r\\n        _Locked = TRUE;\\r\\n        bool toClaim = false;\\r\\n        for(uint x = 0; x < tokens.length; x++){\\r\\n            if(rewards[x] != 0) {\\r\\n                toClaim = true;\\r\\n            }\\r\\n        }\\r\\n        require(toClaim == true);\\r\\n        bytes32 abiBytes = keccak256(abi.encodePacked(_msgSender(), tokens, rewards, nonce, address(this)));\\r\\n        bytes32 message = VaultLib.prefixed(abiBytes);\\r\\n\\r\\n        address signer = VaultLib.recoverSigner(message, sig);\\r\\n        _isTrustedSigner(signer);\\r\\n\\r\\n       \\r\\n        require(_getStakingDataContract().withdrawRewards(_msgSender(), tokens, rewards));\\r\\n        _UsedNonces[_msgSender()][nonce] = true;\\r\\n\\r\\n        for(uint x = 0; x < tokens.length; x++){\\r\\n            if(rewards[x] != 0) {\\r\\n                IERC20Upgradeable token = IERC20Upgradeable(tokens[x]); \\r\\n                require(token.balanceOf(address(this)) >= rewards[x]);\\r\\n                require(token.transfer(_msgSender() ,rewards[x]));\\r\\n            }\\r\\n        }\\r\\n        _Locked = FALSE;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function burnTokensForAccount(address account, uint tokensToBurn) external returns(bool) {\\r\\n        _nonReentrant();\\r\\n        _validBurnSender();\\r\\n        require(tokensToBurn > 0);\\r\\n        _Locked = TRUE;\\r\\n         _burn(account, tokensToBurn);\\r\\n        require(_getStakingDataContract().removeStake(tokensToBurn, account));\\r\\n        _Locked = FALSE;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20Upgradeable-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) { \\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n                \\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20Upgradeable-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);   \\r\\n        _approve(sender, _msgSender(), allowance(_msgSender(), sender).sub(amount));     \\r\\n        return true;    \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev required to be allow for receiving ETH claim payouts\\r\\n     */\\r\\n    receive() external payable {}\\r\\n\\r\\n    /**\\r\\n     * Private functions\\r\\n     */\\r\\n\\r\\n     /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal override {\\r\\n        super._mint(account, amount);\\r\\n        _updateTotalSupplyForBlock();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal override {\\r\\n        super._burn(account, amount);\\r\\n        _updateTotalSupplyForBlock();\\r\\n    }\\r\\n\\r\\n    function _getStakingDataContract() internal view returns (StakingData){\\r\\n        return StakingData(_StakingDataAddress);\\r\\n    }\\r\\n    function _updateTotalSupplyForBlock() internal {\\r\\n        require(_getStakingDataContract().updateTotalSupplyForDayAndBlock(totalSupply()));\\r\\n    }\\r\\n\\r\\n\\r\\n     /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\\r\\n\\r\\n        require(_getStakingDataContract().removeStake(amount, sender));\\r\\n        require(_getStakingDataContract().createStake(amount, recipient));\\r\\n        \\r\\n        super._transfer(sender, recipient, amount);\\r\\n        emit TransferITV(\\r\\n            sender,\\r\\n            recipient,\\r\\n            amount,            \\r\\n            balanceOf(sender),\\r\\n            _getStakingDataContract().getAccountStakingTotal(sender),\\r\\n            balanceOf(recipient),\\r\\n            _getStakingDataContract().getAccountStakingTotal(recipient));            \\r\\n        _updateTotalSupplyForBlock();\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * Private validation functions\\r\\n     */\\r\\n\\r\\n    function _valueCheck(uint value) internal pure {\\r\\n        require(value != 0, \\\"!\\\");\\r\\n    }\\r\\n\\r\\n    function _onlyAdmin() internal view {\\r\\n        ITrustVaultFactory vaultFactory = ITrustVaultFactory(_iTrustFactoryAddress);\\r\\n        require(\\r\\n            vaultFactory.isAddressAdmin(_msgSender()),\\r\\n            \\\"NTA\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _validBurnSender() internal view {\\r\\n        require(\\r\\n            _BurnDataAddress == _msgSender(),\\r\\n            \\\"NTB\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _isTrustedSigner(address signer) internal view {\\r\\n        ITrustVaultFactory vaultFactory = ITrustVaultFactory(_iTrustFactoryAddress);\\r\\n        require(\\r\\n            vaultFactory.isTrustedSignerAddress(signer),\\r\\n            \\\"NTS\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    function _nonReentrant() internal view {\\r\\n        require(_Locked == FALSE);\\r\\n    }  \\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20CappedUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC20Upgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20CappedUpgradeable is Initializable, ERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    uint256 private _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    function __ERC20Capped_init(uint256 cap_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20Capped_init_unchained(cap_);\\n    }\\n\\n    function __ERC20Capped_init_unchained(uint256 cap_) internal initializer {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - minted tokens must not cause the total supply to go over the cap.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) { // When minting tokens\\n            require(totalSupply().add(amount) <= _cap, \\\"ERC20Capped: cap exceeded\\\");\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n * \\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n * \\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     * \\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal virtual view returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     * \\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     * \\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./UpgradeableProxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n * \\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n * \\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n * \\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n * \\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is UpgradeableProxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\\n     */\\n    constructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _setAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _admin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     * \\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _admin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     * \\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     * \\n     * Emits an {AdminChanged} event.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external ifAdmin {\\n        require(newAdmin != address(0), \\\"TransparentUpgradeableProxy: new admin is the zero address\\\");\\n        emit AdminChanged(_admin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeTo(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeTo(newImplementation);\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success,) = newImplementation.delegatecall(data);\\n        require(success);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view returns (address adm) {\\n        bytes32 slot = _ADMIN_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            adm := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        bytes32 slot = _ADMIN_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newAdmin)\\n        }\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal override virtual {\\n        require(msg.sender != _admin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/UpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n * \\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\\n * {TransparentUpgradeableProxy}.\\n */\\ncontract UpgradeableProxy is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     * \\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) public payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _setImplementation(_logic);\\n        if(_data.length > 0) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success,) = _logic.delegatecall(_data);\\n            require(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal override view returns (address impl) {\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Upgrades the proxy to a new implementation.\\n     * \\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableProxy: new implementation is not a contract\\\");\\n\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calculateRewardsForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"iTrustFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenPerDay\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPerDay\",\"type\":\"uint256\"}],\"name\":\"updateDayDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedUntil\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nonce\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GovernanceDistributionV2","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}