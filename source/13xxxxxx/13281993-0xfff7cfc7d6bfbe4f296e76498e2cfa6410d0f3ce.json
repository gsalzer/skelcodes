{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, throws on overflow.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface ERC721TokenReceiver {\r\n    function onERC721Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _tokenId,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ninterface ChromaInterface {\r\n    function toHex(uint256 _id) external view returns (string memory);\r\n}\r\n\r\ncontract ChromaticCanvas is IERC721 {\r\n    using SafeMath for uint256;\r\n\r\n    bytes4 internal constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    mapping(bytes4 => bool) internal supportedInterfaces;\r\n    mapping(uint256 => address) public idToOwner;\r\n    mapping(uint256 => address) internal idToApproval;\r\n    mapping(address => mapping(address => bool)) internal ownerToOperators;\r\n    mapping(address => uint256[]) public ownerToIds;\r\n    mapping(uint256 => uint256) public idToOwnerIndex;\r\n\r\n    string internal nftName = \"Chromatic Canvas\";\r\n    string internal nftSymbol = unicode\"â–¡\";\r\n\r\n    uint256 public numTokens = 0;\r\n\r\n    address public chroma;\r\n\r\n    bool private reentrancyLock = false;\r\n\r\n    /* Prevent a contract function from being reentrant-called. */\r\n    modifier reentrancyGuard() {\r\n        if (reentrancyLock) {\r\n            revert();\r\n        }\r\n        reentrancyLock = true;\r\n        _;\r\n        reentrancyLock = false;\r\n    }\r\n\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(\r\n            tokenOwner == msg.sender ||\r\n                idToApproval[_tokenId] == msg.sender ||\r\n                ownerToOperators[tokenOwner][msg.sender],\r\n            \"Cannot transfer.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier canOperate(uint256 _tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(\r\n            tokenOwner == msg.sender ||\r\n                ownerToOperators[tokenOwner][msg.sender],\r\n            \"Cannot operate.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier validNFToken(uint256 _tokenId) {\r\n        require(idToOwner[_tokenId] != address(0), \"Invalid token.\");\r\n        _;\r\n    }\r\n\r\n    constructor(address payable _adminAddress, address _chroma) {\r\n        adminAddress = _adminAddress;\r\n        chroma = _chroma;\r\n\r\n        supportedInterfaces[0x01ffc9a7] = true; // ERC165\r\n        supportedInterfaces[0x80ac58cd] = true; // ERC721\r\n        supportedInterfaces[0x780e9d63] = true; // ERC721 Enumerable\r\n        supportedInterfaces[0x5b5e139f] = true; // ERC721 Metadata\r\n    }\r\n\r\n    function _addNFToken(address _to, uint256 _tokenId) internal {\r\n        idToOwner[_tokenId] = _to;\r\n        ownerToIds[_to].push(_tokenId);\r\n        idToOwnerIndex[_tokenId] = ownerToIds[_to].length.sub(1);\r\n    }\r\n\r\n    function _removeNFToken(address _from, uint256 _tokenId) internal {\r\n        require(idToOwner[_tokenId] == _from, \"Incorrect owner.\");\r\n        delete idToOwner[_tokenId];\r\n\r\n        uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];\r\n        uint256 lastTokenIndex = ownerToIds[_from].length.sub(1);\r\n\r\n        if (lastTokenIndex != tokenToRemoveIndex) {\r\n            uint256 lastToken = ownerToIds[_from][lastTokenIndex];\r\n            ownerToIds[_from][tokenToRemoveIndex] = lastToken;\r\n            idToOwnerIndex[lastToken] = tokenToRemoveIndex;\r\n        }\r\n\r\n        ownerToIds[_from].pop();\r\n    }\r\n\r\n    function _getOwnerNFTCount(address _owner) internal view returns (uint256) {\r\n        return ownerToIds[_owner].length;\r\n    }\r\n\r\n    function _safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) private canTransfer(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == _from, \"Incorrect owner.\");\r\n        require(_to != address(0));\r\n\r\n        _transfer(_to, _tokenId);\r\n\r\n        if (isContract(_to)) {\r\n            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(\r\n                msg.sender,\r\n                _from,\r\n                _tokenId,\r\n                _data\r\n            );\r\n            require(retval == MAGIC_ON_ERC721_RECEIVED);\r\n        }\r\n    }\r\n\r\n    function _clearApproval(uint256 _tokenId) private {\r\n        if (idToApproval[_tokenId] != address(0)) {\r\n            delete idToApproval[_tokenId];\r\n        }\r\n    }\r\n\r\n    //////////////////////////\r\n    ////    Enumerable    ////\r\n    //////////////////////////\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return numTokens;\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(_index < ownerToIds[_owner].length);\r\n        return ownerToIds[_owner][_index];\r\n    }\r\n\r\n    //////////////////////////\r\n    ////  Administration  ////\r\n    //////////////////////////\r\n    address payable public adminAddress;\r\n    uint256 public maxHeight = 64;\r\n    uint256 public maxWidth = 64;\r\n    uint256 public canvasCreationPrice = 0;\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminAddress, \"Only admin.\");\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address payable _newAdmin) external onlyAdmin {\r\n        adminAddress = _newAdmin;\r\n    }\r\n\r\n    function setMaxDimensions(uint256 _maxHeight, uint256 _maxWidth)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        require(\r\n            _maxHeight <= uint128(-1) && _maxWidth <= uint128(-1),\r\n            \"exceeds max possible\"\r\n        );\r\n        maxHeight = _maxHeight;\r\n        maxWidth = _maxWidth;\r\n    }\r\n\r\n    function setCanvasCreationPrice(uint256 _price) external onlyAdmin {\r\n        canvasCreationPrice = _price;\r\n        emit CanvasCreationPriceChanged(_price);\r\n    }\r\n\r\n    //////////////////////////\r\n    //// ERC 721 and 165  ////\r\n    //////////////////////////\r\n    function isContract(address _addr)\r\n        internal\r\n        view\r\n        returns (bool addressCheck)\r\n    {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        } // solhint-disable-line\r\n        addressCheck = size > 0;\r\n    }\r\n\r\n    function supportsInterface(bytes4 _interfaceID)\r\n        external\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return supportedInterfaces[_interfaceID];\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes calldata _data\r\n    ) external override {\r\n        _safeTransferFrom(_from, _to, _tokenId, _data);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) external override {\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) external override canTransfer(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == _from, \"Wrong from address.\");\r\n        require(_to != address(0), \"Cannot send to 0x0.\");\r\n        _transfer(_to, _tokenId);\r\n    }\r\n\r\n    function approve(address _approved, uint256 _tokenId)\r\n        external\r\n        override\r\n        canOperate(_tokenId)\r\n        validNFToken(_tokenId)\r\n    {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(_approved != tokenOwner);\r\n        idToApproval[_tokenId] = _approved;\r\n        emit Approval(tokenOwner, _approved, _tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(address _operator, bool _approved)\r\n        external\r\n        override\r\n    {\r\n        ownerToOperators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    function balanceOf(address _owner)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(_owner != address(0));\r\n        return _getOwnerNFTCount(_owner);\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId)\r\n        external\r\n        view\r\n        override\r\n        returns (address _owner)\r\n    {\r\n        require(idToOwner[_tokenId] != address(0));\r\n        _owner = idToOwner[_tokenId];\r\n    }\r\n\r\n    function getApproved(uint256 _tokenId)\r\n        external\r\n        view\r\n        override\r\n        validNFToken(_tokenId)\r\n        returns (address)\r\n    {\r\n        return idToApproval[_tokenId];\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address _operator)\r\n        external\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return ownerToOperators[_owner][_operator];\r\n    }\r\n\r\n    function _transfer(address _to, uint256 _tokenId) internal {\r\n        address from = idToOwner[_tokenId];\r\n        _clearApproval(_tokenId);\r\n\r\n        _removeNFToken(from, _tokenId);\r\n        _addNFToken(_to, _tokenId);\r\n        _unlockCanvas(_tokenId);\r\n\r\n        emit Transfer(from, _to, _tokenId);\r\n    }\r\n\r\n    //////////////////////////\r\n    ////      Canvas      ////\r\n    //////////////////////////\r\n\r\n    event CanvasCreated(\r\n        uint256 indexed canvasId,\r\n        uint256 baseChromaId,\r\n        uint256 height,\r\n        uint256 width,\r\n        string name,\r\n        string author\r\n    );\r\n    event BaseChromaChanged(uint256 indexed canvasId, uint256 baseChromaId);\r\n    event ChromaAddedToCanvas(uint256 indexed canvasId, uint256 chromaId);\r\n    event ChromaRemovedFromCanvas(uint256 indexed canvasId, uint256 chromaId);\r\n    event LocationAddedToChroma(\r\n        uint256 indexed canvasId,\r\n        uint256 chromaId,\r\n        uint256 key,\r\n        uint256 y,\r\n        uint256 x\r\n    );\r\n    event LocationRemovedFromChroma(\r\n        uint256 indexed canvasId,\r\n        uint256 chromaId,\r\n        uint256 key\r\n    );\r\n    event CanvasLocked(uint256 indexed canvasId, address owner);\r\n    event CanvasUnlocked(uint256 indexed canvasId, address owner);\r\n    event CanvasDestroyed(uint256 indexed canvasId, address destroyer);\r\n    event CanvasCreationPriceChanged(uint256 newPrice);\r\n    event NameChanged(uint256 indexed canvasId, string name);\r\n    event AuthorChanged(uint256 indexed canvasId, string author);\r\n\r\n    uint256 public tokenIndex = 0;\r\n\r\n    mapping(uint256 => string) public idToName;\r\n    mapping(uint256 => string) public idToAuthor;\r\n\r\n    mapping(uint256 => uint128[2]) public idToDimensions;\r\n    mapping(uint256 => uint256[]) public canvasToChroma;\r\n    mapping(uint256 => uint256) public chromaToCanvasIndex;\r\n    mapping(uint256 => uint256) public chromaToCanvas;\r\n    mapping(uint256 => address) public lockedBy;\r\n\r\n    mapping(uint256 => uint256) public baseChroma;\r\n    mapping(uint256 => mapping(uint256 => uint256)) public locationToChroma;\r\n    mapping(uint256 => mapping(uint256 => uint256))\r\n        public locationToChromaIndex;\r\n    mapping(uint256 => uint256[]) public chromaToLocations;\r\n\r\n    modifier notLocked(uint256 _canvasId) {\r\n        require(lockedBy[_canvasId] == address(0), \"must be unlocked\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCanvasOwner(uint256 _canvasId) {\r\n        require(idToOwner[_canvasId] == msg.sender, \"must be owner\");\r\n        _;\r\n    }\r\n\r\n    function lockUntilTransfer(uint256 _canvasId)\r\n        external\r\n        onlyCanvasOwner(_canvasId)\r\n    {\r\n        lockedBy[_canvasId] = msg.sender;\r\n        emit CanvasLocked(_canvasId, msg.sender);\r\n    }\r\n\r\n    function _unlockCanvas(uint256 _canvasId) internal {\r\n        require(lockedBy[_canvasId] != address(0), \"must be locked\");\r\n        require(\r\n            lockedBy[_canvasId] != idToOwner[_canvasId],\r\n            \"must be transferred\"\r\n        );\r\n        lockedBy[_canvasId] = address(0);\r\n        emit CanvasUnlocked(_canvasId, msg.sender);\r\n    }\r\n\r\n    function changeName(uint256 _canvasId, string calldata _name)\r\n        external\r\n        onlyCanvasOwner(_canvasId)\r\n        notLocked(_canvasId)\r\n    {\r\n        idToName[_canvasId] = _name;\r\n        emit NameChanged(_canvasId, _name);\r\n    }\r\n\r\n    function changeAuthor(uint256 _canvasId, string calldata _author)\r\n        external\r\n        onlyCanvasOwner(_canvasId)\r\n        notLocked(_canvasId)\r\n    {\r\n        idToAuthor[_canvasId] = _author;\r\n        emit AuthorChanged(_canvasId, _author);\r\n    }\r\n\r\n    function createCanvas(\r\n        uint256 _baseChromaId,\r\n        uint128 _height,\r\n        uint128 _width,\r\n        string calldata _name,\r\n        string calldata _author\r\n    ) external payable reentrancyGuard {\r\n        require(\r\n            msg.value >= canvasCreationPrice,\r\n            \"Insufficient funds to purchase.\"\r\n        );\r\n        if (msg.value > canvasCreationPrice) {\r\n            msg.sender.transfer(msg.value.sub(canvasCreationPrice));\r\n        }\r\n        adminAddress.transfer(canvasCreationPrice);\r\n        IERC721(chroma).transferFrom(msg.sender, address(this), _baseChromaId);\r\n        require(\r\n            _height > 0 && _width > 0,\r\n            \"both dimensions must be larger than 0\"\r\n        );\r\n        require(\r\n            _height <= maxHeight && _width <= maxWidth,\r\n            \"exceeds max dimension\"\r\n        );\r\n        numTokens += 1;\r\n        tokenIndex += 1;\r\n        uint256 id = tokenIndex;\r\n        _addNFToken(msg.sender, id);\r\n        baseChroma[id] = _baseChromaId;\r\n        idToName[id] = _name;\r\n        idToAuthor[id] = _author;\r\n        idToDimensions[id] = [_height, _width];\r\n        // idToHeight[id] = _height;\r\n        // idToWidth[id] = _width;\r\n        emit CanvasCreated(id, _baseChromaId, _height, _width, _name, _author);\r\n        emit Transfer(address(0), msg.sender, id);\r\n    }\r\n\r\n    function destroyCanvas(uint256 _canvasId)\r\n        external\r\n        onlyCanvasOwner(_canvasId)\r\n        notLocked(_canvasId)\r\n    {\r\n        while (canvasToChroma[_canvasId].length != 0) {\r\n            _removeChromaFromCanvas(\r\n                canvasToChroma[_canvasId][canvasToChroma[_canvasId].length - 1]\r\n            );\r\n        }\r\n\r\n        IERC721(chroma).transferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            baseChroma[_canvasId]\r\n        );\r\n        baseChroma[_canvasId] = 0;\r\n        _clearApproval(_canvasId);\r\n        _removeNFToken(msg.sender, _canvasId);\r\n        numTokens = numTokens - 1;\r\n        emit Transfer(msg.sender, address(0), _canvasId);\r\n        emit CanvasDestroyed(_canvasId, msg.sender);\r\n    }\r\n\r\n    function changeBaseChroma(uint256 _baseChromaId, uint256 _canvasId)\r\n        external\r\n        onlyCanvasOwner(_canvasId)\r\n        notLocked(_canvasId)\r\n    {\r\n        IERC721(chroma).transferFrom(msg.sender, address(this), _baseChromaId);\r\n        IERC721(chroma).transferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            baseChroma[_canvasId]\r\n        );\r\n        baseChroma[_canvasId] = _baseChromaId;\r\n        emit BaseChromaChanged(_canvasId, _baseChromaId);\r\n    }\r\n\r\n    function addChromaToCanvas(\r\n        uint256 _canvasId,\r\n        uint256 _chromaId,\r\n        uint128[][] calldata _locations\r\n    ) external onlyCanvasOwner(_canvasId) notLocked(_canvasId) {\r\n        IERC721(chroma).transferFrom(msg.sender, address(this), _chromaId);\r\n\r\n        uint128[2] storage dimensions = idToDimensions[_canvasId];\r\n        uint128 height = dimensions[0];\r\n        uint128 width = dimensions[1];\r\n\r\n        for (uint256 i = 0; i < _locations.length; i++) {\r\n            uint256 y = _locations[i][0];\r\n            uint256 x = _locations[i][1];\r\n            require(y < height && x < width, \"out of bounds\");\r\n            uint256 key = (y << 128) + x;\r\n            _addChromaToLocation(_canvasId, _chromaId, key);\r\n            emit LocationAddedToChroma(_canvasId, _chromaId, key, y, x);\r\n        }\r\n        chromaToCanvas[_chromaId] = _canvasId;\r\n        canvasToChroma[_canvasId].push(_chromaId);\r\n        chromaToCanvasIndex[_chromaId] = canvasToChroma[_canvasId].length.sub(\r\n            1\r\n        );\r\n        emit ChromaAddedToCanvas(_canvasId, _chromaId);\r\n    }\r\n\r\n    function addChromaLocations(\r\n        uint256 _canvasId,\r\n        uint256 _chromaId,\r\n        uint128[][] calldata _locations\r\n    ) external onlyCanvasOwner(_canvasId) notLocked(_canvasId) {\r\n        require(\r\n            chromaToCanvas[_chromaId] == _canvasId ||\r\n                _chromaId == baseChroma[_canvasId],\r\n            \"chroma not in canvas\"\r\n        );\r\n        if (_chromaId == baseChroma[_canvasId]) {\r\n            _removeChromaFromLocation(_canvasId, _locations);\r\n            return;\r\n        }\r\n\r\n        uint128[2] storage dimensions = idToDimensions[_canvasId];\r\n        uint128 height = dimensions[0];\r\n        uint128 width = dimensions[1];\r\n\r\n        for (uint256 i = 0; i < _locations.length; i++) {\r\n            uint256 y = _locations[i][0];\r\n            uint256 x = _locations[i][1];\r\n            require(y < height && x < width, \"out of bounds\");\r\n            uint256 key = (y << 128) + x;\r\n            _addChromaToLocation(_canvasId, _chromaId, key);\r\n            emit LocationAddedToChroma(_canvasId, _chromaId, key, y, x);\r\n        }\r\n    }\r\n\r\n    function removeChromaFromCanvas(uint256 _canvasId, uint256 _chromaId)\r\n        external\r\n        onlyCanvasOwner(_canvasId)\r\n        notLocked(_canvasId)\r\n    {\r\n        require(chromaToCanvas[_chromaId] == _canvasId, \"chroma not in canvas\");\r\n        _removeChromaFromCanvas(_chromaId);\r\n    }\r\n\r\n    function _removeChromaFromCanvas(uint256 _chromaId) internal {\r\n        delete chromaToLocations[_chromaId];\r\n        uint256 canvasId = chromaToCanvas[_chromaId];\r\n        chromaToCanvas[_chromaId] = 0;\r\n\r\n        uint256 chromaToRemoveIndex = chromaToCanvasIndex[_chromaId];\r\n        uint256 lastTokenIndex = canvasToChroma[canvasId].length.sub(1);\r\n\r\n        if (lastTokenIndex != chromaToRemoveIndex) {\r\n            uint256 lastToken = canvasToChroma[canvasId][lastTokenIndex];\r\n            canvasToChroma[canvasId][chromaToRemoveIndex] = lastToken;\r\n            chromaToCanvasIndex[lastToken] = chromaToRemoveIndex;\r\n        }\r\n        canvasToChroma[canvasId].pop();\r\n\r\n        IERC721(chroma).transferFrom(address(this), msg.sender, _chromaId);\r\n        emit ChromaRemovedFromCanvas(canvasId, _chromaId);\r\n    }\r\n\r\n    function _addChromaToLocation(\r\n        uint256 _canvasId,\r\n        uint256 _chromaId,\r\n        uint256 key\r\n    ) internal {\r\n        if (locationToChroma[_canvasId][key] == _chromaId) {\r\n            // chroma already in location\r\n            return;\r\n        } else if (\r\n            locationToChroma[_canvasId][key] != 0 &&\r\n            chromaToCanvas[locationToChroma[_canvasId][key]] == _canvasId\r\n        ) {\r\n            // another chroma is in location\r\n            _removeChromaFromLocation(\r\n                _canvasId,\r\n                locationToChroma[_canvasId][key],\r\n                key\r\n            );\r\n        }\r\n        locationToChroma[_canvasId][key] = _chromaId;\r\n        chromaToLocations[_chromaId].push(key);\r\n        locationToChromaIndex[_canvasId][key] = chromaToLocations[_chromaId]\r\n            .length\r\n            .sub(1);\r\n    }\r\n\r\n    function _removeChromaFromLocation(\r\n        uint256 _canvasId,\r\n        uint128[][] calldata _locations\r\n    ) internal {\r\n        uint128[2] storage dimensions = idToDimensions[_canvasId];\r\n        uint128 height = dimensions[0];\r\n        uint128 width = dimensions[1];\r\n        for (uint256 i = 0; i < _locations.length; i++) {\r\n            uint256 y = _locations[i][0];\r\n            uint256 x = _locations[i][1];\r\n            require(y < height && x < width, \"out of bounds\");\r\n            uint256 key = (y << 128) + x;\r\n            uint256 chromaId = locationToChroma[_canvasId][key];\r\n            require(chromaId != 0);\r\n            _removeChromaFromLocation(_canvasId, chromaId, key);\r\n        }\r\n    }\r\n\r\n    function _removeChromaFromLocation(\r\n        uint256 _canvasId,\r\n        uint256 _chromaId,\r\n        uint256 key\r\n    ) internal {\r\n        delete locationToChroma[_canvasId][key];\r\n\r\n        uint256 locationToRemoveIndex = locationToChromaIndex[_canvasId][key];\r\n        uint256 lastChromaIndex = chromaToLocations[_chromaId].length.sub(1);\r\n\r\n        if (lastChromaIndex != locationToRemoveIndex) {\r\n            uint256 lastToken = chromaToLocations[_chromaId][lastChromaIndex];\r\n            chromaToLocations[_chromaId][locationToRemoveIndex] = lastToken;\r\n            locationToChromaIndex[_canvasId][lastToken] = locationToRemoveIndex;\r\n        }\r\n        chromaToLocations[_chromaId].pop();\r\n        if (chromaToLocations[_chromaId].length == 0) {\r\n            _removeChromaFromCanvas(_chromaId);\r\n        }\r\n        emit LocationRemovedFromChroma(_canvasId, _chromaId, key);\r\n    }\r\n\r\n    function idToHeight(uint256 _id) public view returns (uint128) {\r\n        return idToDimensions[_id][0];\r\n    }\r\n\r\n    function idToWidth(uint256 _id) public view returns (uint128) {\r\n        return idToDimensions[_id][1];\r\n    }\r\n\r\n    function getOwnedTokenIds(address owner)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256 length = ownerToIds[owner].length;\r\n        uint256[] memory owned = new uint256[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            owned[i] = ownerToIds[owner][i];\r\n        }\r\n        return owned;\r\n    }\r\n\r\n    function getOwnedTokenIdsSegment(\r\n        address owner,\r\n        uint256 startIndex,\r\n        uint256 count\r\n    ) public view returns (uint256[] memory) {\r\n        uint256[] memory owned = new uint256[](count);\r\n        for (uint256 i = startIndex; i < startIndex + count; i++) {\r\n            owned[i - startIndex] = ownerToIds[owner][i];\r\n        }\r\n        return owned;\r\n    }\r\n\r\n    function getChromaCount(uint256 _canvasId) public view returns (uint256) {\r\n        return canvasToChroma[_canvasId].length;\r\n    }\r\n\r\n    function getChromaInCanvas(uint256 _canvasId)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256 length = canvasToChroma[_canvasId].length;\r\n        uint256[] memory chromaIds = new uint256[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            chromaIds[i] = canvasToChroma[_canvasId][i];\r\n        }\r\n        return chromaIds;\r\n    }\r\n\r\n    function getChromaInCanvasSegment(\r\n        uint256 _canvasId,\r\n        uint256 startIndex,\r\n        uint256 count\r\n    ) public view returns (uint256[] memory) {\r\n        uint256[] memory chromaIds = new uint256[](count);\r\n        for (uint256 i = startIndex; i < startIndex + count; i++) {\r\n            chromaIds[i - startIndex] = canvasToChroma[_canvasId][i];\r\n        }\r\n        return chromaIds;\r\n    }\r\n\r\n    function getChromaLocations(uint256 _chromaId)\r\n        public\r\n        view\r\n        returns (uint128[2][] memory)\r\n    {\r\n        uint256 length = chromaToLocations[_chromaId].length;\r\n        uint128[2][] memory locations = new uint128[2][](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            uint256 key = chromaToLocations[_chromaId][i];\r\n            locations[i] = [\r\n                uint128(key >> 128),\r\n                uint128(key & 0xffffffffffffffff)\r\n            ];\r\n        }\r\n        return locations;\r\n    }\r\n\r\n    function getChromaLocationsSegment(\r\n        uint256 _chromaId,\r\n        uint256 startIndex,\r\n        uint256 count\r\n    ) public view returns (uint128[2][] memory) {\r\n        uint128[2][] memory locations = new uint128[2][](count);\r\n        for (uint256 i = startIndex; i < startIndex + count; i++) {\r\n            uint256 key = chromaToLocations[_chromaId][i];\r\n            locations[i - startIndex] = [\r\n                uint128(key >> 128),\r\n                uint128(key & 0xffffffffffffffff)\r\n            ];\r\n        }\r\n        return locations;\r\n    }\r\n\r\n    function getChromaInCanvasInHex(uint256 _canvasId)\r\n        public\r\n        view\r\n        returns (string[] memory)\r\n    {\r\n        uint256 length = canvasToChroma[_canvasId].length;\r\n        string[] memory chromaHexValues = new string[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            chromaHexValues[i] = ChromaInterface(chroma).toHex(\r\n                canvasToChroma[_canvasId][i]\r\n            );\r\n        }\r\n        return chromaHexValues;\r\n    }\r\n\r\n    function getBaseChromaHex(uint256 _canvasId)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        return ChromaInterface(chroma).toHex(baseChroma[_canvasId]);\r\n    }\r\n\r\n    function getData(uint256 _canvasId)\r\n        public\r\n        view\r\n        returns (string[][] memory)\r\n    {\r\n        uint128[2] storage dimensions = idToDimensions[_canvasId];\r\n        uint128 height = dimensions[0];\r\n        uint128 width = dimensions[1];\r\n        string memory baseChromaHex = ChromaInterface(chroma).toHex(\r\n            baseChroma[_canvasId]\r\n        );\r\n        string[][] memory canvas = new string[][](height);\r\n        for (uint256 y = 0; y < height; y++) {\r\n            string[] memory row = new string[](width);\r\n            for (uint256 x = 0; x < width; x++) {\r\n                row[x] = baseChromaHex;\r\n            }\r\n            canvas[y] = row;\r\n        }\r\n\r\n        uint256[] storage chromaIds = canvasToChroma[_canvasId];\r\n        for (uint256 i = 0; i < chromaIds.length; i++) {\r\n            uint256 chromaId = chromaIds[i];\r\n            uint256[] storage locations = chromaToLocations[chromaId];\r\n            string memory chromaHex = ChromaInterface(chroma).toHex(chromaId);\r\n            for (uint256 j = 0; j < locations.length; j++) {\r\n                uint128 y = uint128(locations[j] >> 128);\r\n                uint128 x = uint128(locations[j] & 0xffffffffffffffff);\r\n                canvas[y][x] = chromaHex;\r\n            }\r\n        }\r\n        return canvas;\r\n    }\r\n\r\n    //////////////////////////\r\n    ////     Metadata     ////\r\n    //////////////////////////\r\n\r\n    /**\r\n     * @dev Returns a descriptive name for a collection of NFTokens.\r\n     * @return _name Representing name.\r\n     */\r\n    function name() external view returns (string memory _name) {\r\n        _name = nftName;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an abbreviated name for NFTokens.\r\n     * @return _symbol Representing symbol.\r\n     */\r\n    function symbol() external view returns (string memory _symbol) {\r\n        _symbol = nftSymbol;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chroma\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"canvasId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"}],\"name\":\"AuthorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"canvasId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseChromaId\",\"type\":\"uint256\"}],\"name\":\"BaseChromaChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"canvasId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseChromaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"width\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"}],\"name\":\"CanvasCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"CanvasCreationPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"canvasId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destroyer\",\"type\":\"address\"}],\"name\":\"CanvasDestroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"canvasId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CanvasLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"canvasId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CanvasUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"canvasId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chromaId\",\"type\":\"uint256\"}],\"name\":\"ChromaAddedToCanvas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"canvasId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chromaId\",\"type\":\"uint256\"}],\"name\":\"ChromaRemovedFromCanvas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"canvasId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chromaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"LocationAddedToChroma\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"canvasId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chromaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"LocationRemovedFromChroma\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"canvasId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_canvasId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chromaId\",\"type\":\"uint256\"},{\"internalType\":\"uint128[][]\",\"name\":\"_locations\",\"type\":\"uint128[][]\"}],\"name\":\"addChromaLocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_canvasId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chromaId\",\"type\":\"uint256\"},{\"internalType\":\"uint128[][]\",\"name\":\"_locations\",\"type\":\"uint128[][]\"}],\"name\":\"addChromaToCanvas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"baseChroma\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canvasCreationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"canvasToChroma\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_canvasId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_author\",\"type\":\"string\"}],\"name\":\"changeAuthor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseChromaId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_canvasId\",\"type\":\"uint256\"}],\"name\":\"changeBaseChroma\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_canvasId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chroma\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chromaToCanvas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chromaToCanvasIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chromaToLocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseChromaId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_height\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_width\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_author\",\"type\":\"string\"}],\"name\":\"createCanvas\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_canvasId\",\"type\":\"uint256\"}],\"name\":\"destroyCanvas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_canvasId\",\"type\":\"uint256\"}],\"name\":\"getBaseChromaHex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_canvasId\",\"type\":\"uint256\"}],\"name\":\"getChromaCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_canvasId\",\"type\":\"uint256\"}],\"name\":\"getChromaInCanvas\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_canvasId\",\"type\":\"uint256\"}],\"name\":\"getChromaInCanvasInHex\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_canvasId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getChromaInCanvasSegment\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chromaId\",\"type\":\"uint256\"}],\"name\":\"getChromaLocations\",\"outputs\":[{\"internalType\":\"uint128[2][]\",\"name\":\"\",\"type\":\"uint128[2][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chromaId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getChromaLocationsSegment\",\"outputs\":[{\"internalType\":\"uint128[2][]\",\"name\":\"\",\"type\":\"uint128[2][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_canvasId\",\"type\":\"uint256\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"string[][]\",\"name\":\"\",\"type\":\"string[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnedTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getOwnedTokenIdsSegment\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAuthor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToDimensions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"idToHeight\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToOwnerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"idToWidth\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locationToChroma\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locationToChromaIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_canvasId\",\"type\":\"uint256\"}],\"name\":\"lockUntilTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWidth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerToIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_canvasId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chromaId\",\"type\":\"uint256\"}],\"name\":\"removeChromaFromCanvas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setCanvasCreationPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWidth\",\"type\":\"uint256\"}],\"name\":\"setMaxDimensions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChromaticCanvas","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d462c185735d3b90c06ba95f3f6d28959c28c72a000000000000000000000000a62fed17dc7fea3e972d7b57adbde921d26e5eba","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://30c463f2326df9d7718249b164c0e8675676746ec58bf4141626a2529a72088d"}]}