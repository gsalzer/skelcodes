{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.8.0;\r\n\r\n// Sources flattened with hardhat v2.6.2 https://hardhat.org\r\n\r\n// File contracts/Curve/IStableSwap3Pool.sol\r\n\r\n\r\ninterface IStableSwap3Pool {\r\n\t// Deployment\r\n\tfunction __init__(address _owner, address[3] memory _coins, address _pool_token, uint256 _A, uint256 _fee, uint256 _admin_fee) external;\r\n\r\n\t// ERC20 Standard\r\n\tfunction decimals() external view returns (uint);\r\n\tfunction transfer(address _to, uint _value) external returns (uint256);\r\n\tfunction transferFrom(address _from, address _to, uint _value) external returns (bool);\r\n\tfunction approve(address _spender, uint _value) external returns (bool);\r\n\tfunction totalSupply() external view returns (uint);\r\n\tfunction mint(address _to, uint256 _value) external returns (bool);\r\n\tfunction burnFrom(address _to, uint256 _value) external returns (bool);\r\n\tfunction balanceOf(address _owner) external view returns (uint256);\r\n\r\n\t// 3Pool\r\n\tfunction A() external view returns (uint);\r\n\tfunction get_virtual_price() external view returns (uint);\r\n\tfunction calc_token_amount(uint[3] memory amounts, bool deposit) external view returns (uint);\r\n\tfunction add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external;\r\n\tfunction get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\r\n\tfunction get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns (uint256);\r\n\tfunction exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\r\n\tfunction remove_liquidity(uint256 _amount, uint256[3] memory min_amounts) external;\r\n\tfunction remove_liquidity_imbalance(uint256[3] memory amounts, uint256 max_burn_amount) external;\r\n\tfunction calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\r\n\tfunction remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_amount) external;\r\n\t\r\n\t// Admin functions\r\n\tfunction ramp_A(uint256 _future_A, uint256 _future_time) external;\r\n\tfunction stop_ramp_A() external;\r\n\tfunction commit_new_fee(uint256 new_fee, uint256 new_admin_fee) external;\r\n\tfunction apply_new_fee() external;\r\n\tfunction commit_transfer_ownership(address _owner) external;\r\n\tfunction apply_transfer_ownership() external;\r\n\tfunction revert_transfer_ownership() external;\r\n\tfunction admin_balances(uint256 i) external returns (uint256);\r\n\tfunction withdraw_admin_fees() external;\r\n\tfunction donate_admin_fees() external;\r\n\tfunction kill_me() external;\r\n\tfunction unkill_me() external;\r\n}\r\n\r\n\r\n// File contracts/Curve/IMetaImplementationUSD.sol\r\n\r\n\r\ninterface IMetaImplementationUSD {\r\n\r\n\t// Deployment\r\n\tfunction __init__() external;\r\n\tfunction initialize(string memory _name, string memory _symbol, address _coin, uint _decimals, uint _A, uint _fee, address _admin) external;\r\n\r\n\t// ERC20 Standard\r\n\tfunction decimals() external view returns (uint);\r\n\tfunction transfer(address _to, uint _value) external returns (uint256);\r\n\tfunction transferFrom(address _from, address _to, uint _value) external returns (bool);\r\n\tfunction approve(address _spender, uint _value) external returns (bool);\r\n\tfunction balanceOf(address _owner) external view returns (uint256);\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\r\n\t// StableSwap Functionality\r\n\tfunction get_previous_balances() external view returns (uint[2] memory);\r\n\tfunction get_twap_balances(uint[2] memory _first_balances, uint[2] memory _last_balances, uint _time_elapsed) external view returns (uint[2] memory);\r\n\tfunction get_price_cumulative_last() external view returns (uint[2] memory);\r\n\tfunction admin_fee() external view returns (uint);\r\n\tfunction A() external view returns (uint);\r\n\tfunction A_precise() external view returns (uint);\r\n\tfunction get_virtual_price() external view returns (uint);\r\n\tfunction calc_token_amount(uint[2] memory _amounts, bool _is_deposit) external view returns (uint);\r\n\tfunction calc_token_amount(uint[2] memory _amounts, bool _is_deposit, bool _previous) external view returns (uint);\r\n\tfunction add_liquidity(uint[2] memory _amounts, uint _min_mint_amount) external returns (uint);\r\n\tfunction add_liquidity(uint[2] memory _amounts, uint _min_mint_amount, address _receiver) external returns (uint);\r\n\tfunction get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\r\n\tfunction get_dy(int128 i, int128 j, uint256 dx, uint256[2] memory _balances) external view returns (uint256);\r\n\tfunction get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns (uint256);\r\n\tfunction get_dy_underlying(int128 i, int128 j, uint256 dx, uint256[2] memory _balances) external view returns (uint256);\r\n\tfunction exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\r\n\tfunction exchange(int128 i, int128 j, uint256 dx, uint256 min_dy, address _receiver) external returns (uint256);\r\n\tfunction exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\r\n\tfunction exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy, address _receiver) external returns (uint256);\r\n\tfunction remove_liquidity(uint256 _burn_amount, uint256[2] memory _min_amounts) external returns (uint256[2] memory);\r\n\tfunction remove_liquidity(uint256 _burn_amount, uint256[2] memory _min_amounts, address _receiver) external returns (uint256[2] memory);\r\n\tfunction remove_liquidity_imbalance(uint256[2] memory _amounts, uint256 _max_burn_amount) external returns (uint256);\r\n\tfunction remove_liquidity_imbalance(uint256[2] memory _amounts, uint256 _max_burn_amount, address _receiver) external returns (uint256);\r\n\tfunction calc_withdraw_one_coin(uint256 _burn_amount, int128 i) external view returns (uint256);\r\n\tfunction calc_withdraw_one_coin(uint256 _burn_amount, int128 i, bool _previous) external view returns (uint256);\r\n\tfunction remove_liquidity_one_coin(uint256 _burn_amount, int128 i, uint256 _min_received) external returns (uint256);\r\n\tfunction remove_liquidity_one_coin(uint256 _burn_amount, int128 i, uint256 _min_received, address _receiver) external returns (uint256);\r\n\tfunction ramp_A(uint256 _future_A, uint256 _future_time) external;\r\n\tfunction stop_ramp_A() external;\r\n\tfunction admin_balances(uint256 i) external view returns (uint256);\r\n\tfunction withdraw_admin_fees() external;\r\n}\r\n\r\n\r\n// File contracts/Misc_AMOs/morganle/ITC.sol\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ITC {\r\n  function CONTRACT_ADMIN_ROLE() external view returns(bytes32);\r\n  function SCALE_FACTOR() external view returns(uint256);\r\n  function core() external view returns(address);\r\n  function deposit(uint256 pid, uint256 amount, uint64 lockLength) external;\r\n  function depositInfo(uint256, address, uint256) external view returns(uint256 amount, uint128 unlockBlock, uint128 multiplier);\r\n  function emergencyWithdraw(uint256 pid, address to) external;\r\n  function getTotalStakedInPool(uint256 pid, address user) external view returns(uint256);\r\n  function governorAddPoolMultiplier(uint256 _pid, uint64 lockLength, uint64 newRewardsMultiplier) external;\r\n  function harvest(uint256 pid, address to) external;\r\n  function isContractAdmin(address _admin) external view returns(bool);\r\n  function lockPool(uint256 _pid) external;\r\n  function numPools() external view returns(uint256);\r\n  function openUserDeposits(uint256 pid, address user) external view returns(uint256);\r\n  function pause() external;\r\n  function paused() external view returns(bool);\r\n  function pendingRewards(uint256 _pid, address _user) external view returns(uint256);\r\n  function resetRewards(uint256 _pid) external;\r\n  function rewardMultipliers(uint256, uint128) external view returns(uint128);\r\n  function rewarder(uint256) external view returns(address);\r\n  function set(uint256 _pid, uint120 _allocPoint, address _rewarder, bool overwrite) external;\r\n  function setContractAdminRole(bytes32 newContractAdminRole) external;\r\n  function setCore(address newCore) external;\r\n  function stakedToken(uint256) external view returns(address);\r\n  function totalAllocPoint() external view returns(uint256);\r\n  function unlockPool(uint256 _pid) external;\r\n  function unpause() external;\r\n  function updateBlockReward(uint256 newBlockReward) external;\r\n  function updatePool(uint256 pid) external;\r\n  function userInfo(uint256, address) external view returns(int256 rewardDebt, uint256 virtualAmount);\r\n  function withdrawAllAndHarvest(uint256 pid, address to) external;\r\n  function withdrawFromDeposit(uint256 pid, uint256 amount, address to, uint256 index) external;\r\n}\r\n\r\n\r\n// File contracts/Uniswap/TransferHelper.sol\r\n\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Common/Context.sol\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Math/SafeMath.sol\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ERC20/IERC20.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/Utils/Address.sol\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ERC20/ERC20.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\n \r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory __name, string memory __symbol) public {\r\n        _name = __name;\r\n        _symbol = __symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.approve(address spender, uint256 amount)\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for `accounts`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\r\n\r\n        _approve(account, _msgSender(), decreasedAllowance);\r\n        _burn(account, amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal virtual {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of `from`'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// File contracts/Frax/IFrax.sol\r\n\r\n\r\ninterface IFrax {\r\n  function COLLATERAL_RATIO_PAUSER() external view returns (bytes32);\r\n  function DEFAULT_ADMIN_ADDRESS() external view returns (address);\r\n  function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\r\n  function addPool(address pool_address ) external;\r\n  function allowance(address owner, address spender ) external view returns (uint256);\r\n  function approve(address spender, uint256 amount ) external returns (bool);\r\n  function balanceOf(address account ) external view returns (uint256);\r\n  function burn(uint256 amount ) external;\r\n  function burnFrom(address account, uint256 amount ) external;\r\n  function collateral_ratio_paused() external view returns (bool);\r\n  function controller_address() external view returns (address);\r\n  function creator_address() external view returns (address);\r\n  function decimals() external view returns (uint8);\r\n  function decreaseAllowance(address spender, uint256 subtractedValue ) external returns (bool);\r\n  function eth_usd_consumer_address() external view returns (address);\r\n  function eth_usd_price() external view returns (uint256);\r\n  function frax_eth_oracle_address() external view returns (address);\r\n  function frax_info() external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256);\r\n  function frax_pools(address ) external view returns (bool);\r\n  function frax_pools_array(uint256 ) external view returns (address);\r\n  function frax_price() external view returns (uint256);\r\n  function frax_step() external view returns (uint256);\r\n  function fxs_address() external view returns (address);\r\n  function fxs_eth_oracle_address() external view returns (address);\r\n  function fxs_price() external view returns (uint256);\r\n  function genesis_supply() external view returns (uint256);\r\n  function getRoleAdmin(bytes32 role ) external view returns (bytes32);\r\n  function getRoleMember(bytes32 role, uint256 index ) external view returns (address);\r\n  function getRoleMemberCount(bytes32 role ) external view returns (uint256);\r\n  function globalCollateralValue() external view returns (uint256);\r\n  function global_collateral_ratio() external view returns (uint256);\r\n  function grantRole(bytes32 role, address account ) external;\r\n  function hasRole(bytes32 role, address account ) external view returns (bool);\r\n  function increaseAllowance(address spender, uint256 addedValue ) external returns (bool);\r\n  function last_call_time() external view returns (uint256);\r\n  function minting_fee() external view returns (uint256);\r\n  function name() external view returns (string memory);\r\n  function owner_address() external view returns (address);\r\n  function pool_burn_from(address b_address, uint256 b_amount ) external;\r\n  function pool_mint(address m_address, uint256 m_amount ) external;\r\n  function price_band() external view returns (uint256);\r\n  function price_target() external view returns (uint256);\r\n  function redemption_fee() external view returns (uint256);\r\n  function refreshCollateralRatio() external;\r\n  function refresh_cooldown() external view returns (uint256);\r\n  function removePool(address pool_address ) external;\r\n  function renounceRole(bytes32 role, address account ) external;\r\n  function revokeRole(bytes32 role, address account ) external;\r\n  function setController(address _controller_address ) external;\r\n  function setETHUSDOracle(address _eth_usd_consumer_address ) external;\r\n  function setFRAXEthOracle(address _frax_oracle_addr, address _weth_address ) external;\r\n  function setFXSAddress(address _fxs_address ) external;\r\n  function setFXSEthOracle(address _fxs_oracle_addr, address _weth_address ) external;\r\n  function setFraxStep(uint256 _new_step ) external;\r\n  function setMintingFee(uint256 min_fee ) external;\r\n  function setOwner(address _owner_address ) external;\r\n  function setPriceBand(uint256 _price_band ) external;\r\n  function setPriceTarget(uint256 _new_price_target ) external;\r\n  function setRedemptionFee(uint256 red_fee ) external;\r\n  function setRefreshCooldown(uint256 _new_cooldown ) external;\r\n  function setTimelock(address new_timelock ) external;\r\n  function symbol() external view returns (string memory);\r\n  function timelock_address() external view returns (address);\r\n  function toggleCollateralRatio() external;\r\n  function totalSupply() external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount ) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount ) external returns (bool);\r\n  function weth_address() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/Frax/IFraxAMOMinter.sol\r\n\r\n\r\ninterface IFraxAMOMinter {\r\n  function FRAX() external view returns(address);\r\n  function FXS() external view returns(address);\r\n  function acceptOwnership() external;\r\n  function addAMO(address amo_address, bool sync_too) external;\r\n  function allAMOAddresses() external view returns(address[] memory);\r\n  function allAMOsLength() external view returns(uint256);\r\n  function amoProfit(address amo_address) external view returns(int256);\r\n  function amos(address) external view returns(bool);\r\n  function amos_array(uint256) external view returns(address);\r\n  function burnFXS(uint256 amount) external;\r\n  function burnFraxFromAMO(uint256 frax_amount) external;\r\n  function burnFxsFromAMO(uint256 fxs_amount) external;\r\n  function col_idx() external view returns(uint256);\r\n  function collatDollarBalance() external view returns(uint256);\r\n  function collatDollarBalanceStored() external view returns(uint256);\r\n  function collat_borrow_cap() external view returns(int256);\r\n  function collat_borrowed_balances(address) external view returns(int256);\r\n  function collat_borrowed_sum() external view returns(int256);\r\n  function collateral_address() external view returns(address);\r\n  function collateral_token() external view returns(address);\r\n  function custodian_address() external view returns(address);\r\n  function fraxDollarBalanceStored() external view returns(uint256);\r\n  function giveCollatToAMO(address destination_amo, uint256 collat_amount) external;\r\n  function min_cr() external view returns(uint256);\r\n  function mintFraxForAMO(address destination_amo, uint256 frax_amount) external;\r\n  function mint_balances(address) external view returns(int256);\r\n  function mint_cap() external view returns(int256);\r\n  function mint_sum() external view returns(int256);\r\n  function missing_decimals() external view returns(uint256);\r\n  function nominateNewOwner(address _owner) external;\r\n  function nominatedOwner() external view returns(address);\r\n  function override_collat_balance() external view returns(bool);\r\n  function override_collat_balance_amount() external view returns(uint256);\r\n  function owner() external view returns(address);\r\n  function pool() external view returns(address);\r\n  function receiveCollatFromAMO(uint256 usdc_amount) external;\r\n  function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\r\n  function removeAMO(address amo_address, bool sync_too) external;\r\n  function setCustodian(address _custodian_address) external;\r\n  function setFraxPool(address _pool_address) external;\r\n  function setMinimumCollateralRatio(uint256 _min_cr) external;\r\n  function setMintCap(uint256 _mint_cap) external;\r\n  function setOverrideCollatBalance(bool _state, uint256 _balance) external;\r\n  function setTimelock(address new_timelock) external;\r\n  function syncDollarBalances() external;\r\n  function timelock_address() external view returns(address);\r\n  function unspentProfitGlobal() external view returns(int256);\r\n}\r\n\r\n\r\n// File contracts/Proxy/Initializable.sol\r\n\r\n\r\n// solhint-disable-next-line compiler-version\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Staking/Owned.sol\r\n\r\n\r\n// https://docs.synthetix.io/contracts/Owned\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    constructor (address _owner) public {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n        _;\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\n\r\n// File contracts/Misc_AMOs/CurveMetapoolLockerAMO.sol\r\n\r\n\r\n// ====================================================================\r\n// |     ______                   _______                             |\r\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\r\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\  |\r\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\r\n// | /_/   /_/   \\__,_/_/|_|  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/   |\r\n// |                                                                  |\r\n// ====================================================================\r\n// ====================== CurveMetapoolLockerAMO ======================\r\n// ====================================================================\r\n// Frax Finance: https://github.com/FraxFinance\r\n\r\n// Primary Author(s)\r\n// Travis Moore: https://github.com/FortisFortuna\r\n// Jason Huan: https://github.com/jasonhuan\r\n\r\n// Reviewer(s) / Contributor(s)\r\n// Sam Kazemian: https://github.com/samkazemian\r\n// Dennis: github.com/denett\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CurveMetapoolLockerAMO is Owned {\r\n    using SafeMath for uint256;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    IMetaImplementationUSD private metapool_token;\r\n    IStableSwap3Pool private three_pool;\r\n    ITC private tc;\r\n    ERC20 private three_pool_erc20;\r\n    IFrax private FRAX;\r\n    ERC20 private collateral_token;\r\n    IFraxAMOMinter private amo_minter;\r\n\r\n    address private collateral_token_address;\r\n    address private reward_token_address;\r\n    address private metapool_token_address;\r\n    address private tc_address;\r\n    uint256 private immutable tc_pid = 1;\r\n\r\n    address public timelock_address;\r\n    address public custodian_address;\r\n\r\n    // Number of decimals under 18, for collateral token\r\n    uint256 private missing_decimals;\r\n\r\n    // Precision related\r\n    uint256 private PRICE_PRECISION;\r\n\r\n    // Min ratio of collat <-> 3crv conversions via add_liquidity / remove_liquidity; 1e6\r\n    uint256 public liq_slippage_3crv;\r\n\r\n    // Min ratio of (FRAX + 3CRV) <-> FRAX3CRV-f-2 metapool conversions via add_liquidity / remove_liquidity; 1e6\r\n    uint256 public slippage_metapool;\r\n\r\n    // Convergence window\r\n    uint256 public convergence_window; // 0.1 cent\r\n\r\n    // Default will use global_collateral_ratio()\r\n    bool public custom_floor;    \r\n    uint256 public frax_floor;\r\n\r\n    // Discount\r\n    bool public set_discount;\r\n    uint256 public discount_rate;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor (\r\n        address _owner_address,\r\n        address _amo_minter_address\r\n    ) Owned(_owner_address) {\r\n        owner = _owner_address;\r\n        FRAX = IFrax(0x853d955aCEf822Db058eb8505911ED77F175b99e);\r\n        collateral_token = ERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n        reward_token_address = 0xc7283b66Eb1EB5FB86327f08e1B5816b0720212B;\r\n        missing_decimals = uint(18).sub(collateral_token.decimals());\r\n        amo_minter = IFraxAMOMinter(_amo_minter_address);\r\n\r\n        metapool_token_address = 0x06cb22615BA53E60D67Bf6C341a0fD5E718E1655;\r\n        metapool_token = IMetaImplementationUSD(metapool_token_address);\r\n        three_pool = IStableSwap3Pool(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\r\n        three_pool_erc20 = ERC20(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\r\n\r\n        tc_address = 0x9e1076cC0d19F9B0b8019F384B0a29E48Ee46f7f;\r\n        tc = ITC(tc_address);\r\n\r\n        // Other variable initializations\r\n        PRICE_PRECISION = 1e6;\r\n        liq_slippage_3crv = 800000;\r\n        slippage_metapool = 950000;\r\n        convergence_window = 1e15;\r\n        custom_floor = false;  \r\n        set_discount = false;\r\n\r\n        // Get the custodian and timelock addresses from the minter\r\n        custodian_address = amo_minter.custodian_address();\r\n        timelock_address = amo_minter.timelock_address();\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyByOwnGov() {\r\n        require(msg.sender == timelock_address || msg.sender == owner, \"Not owner or timelock\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyByOwnGovCust() {\r\n        require(msg.sender == timelock_address || msg.sender == owner || msg.sender == custodian_address, \"Not owner, tlck, or custd\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyByMinter() {\r\n        require(msg.sender == address(amo_minter), \"Not minter\");\r\n        _;\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function showAllocations() public view returns (uint256[6] memory return_arr) {\r\n        // ------------LP Balance------------\r\n        // Free LP\r\n        uint256 lp_free = metapool_token.balanceOf(address(this));\r\n        uint256 lp_total_val = (lp_free * metapool_token.get_virtual_price()) / 1e18;\r\n\r\n        // Staked in the vault\r\n        uint256 lp_value_in_vault = usdValueInVault();\r\n        lp_total_val += lp_value_in_vault;\r\n\r\n        // ------------Collateral Balance------------\r\n        // Free Collateral\r\n        uint256 free_collateral = collateral_token.balanceOf(address(this));\r\n\r\n        // Free Collateral, in E18\r\n        uint256 free_collateral_E18 = free_collateral * (10 ** missing_decimals);\r\n\r\n        // ------------Total Balances------------\r\n        // Total USD value\r\n        uint256 total_value_E18 = free_collateral_E18 + lp_total_val;\r\n\r\n        return [\r\n            lp_free, // [0] Free LP\r\n            lp_value_in_vault, // [1] Staked LP in the vault\r\n            lp_total_val, // [2] Free + Staked LP\r\n            free_collateral, // [3] Free Collateral\r\n            free_collateral_E18, // [4] Free Collateral, in E18\r\n            total_value_E18 // [5] Total USD value\r\n        ];\r\n    }\r\n\r\n    function dollarBalances() public view returns (uint256 frax_val_e18, uint256 collat_val_e18) {\r\n        // Get the allocations\r\n        uint256[6] memory allocations = showAllocations();\r\n\r\n        frax_val_e18 = allocations[5];\r\n\r\n        // Allocations[2] is NOT multiplied by the CR because only USDC will ever go into it\r\n        // In other AMOs, if you put FRAX in, you should multiply the FRAX part by the CR\r\n        collat_val_e18 = allocations[4] + allocations[2];\r\n    }\r\n\r\n    // Amount of FRAX3CRV deposited in the vault contract\r\n    function stakedBalance() public view returns (uint256) {\r\n        return tc.getTotalStakedInPool(tc_pid, address(this));\r\n    }\r\n\r\n    function usdValueInVault() public view returns (uint256) {\r\n        uint256 vaultBalance = stakedBalance();\r\n        return (vaultBalance * metapool_token.get_virtual_price()) / 1e18;\r\n    }\r\n\r\n    // Backwards compatibility\r\n    function mintedBalance() public view returns (int256) {\r\n        return amo_minter.mint_balances(address(this));\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function metapoolDeposit(uint256 _collateral_amount) external onlyByOwnGov returns (uint256 metapool_LP_received) {\r\n        uint256 threeCRV_received = 0;\r\n\r\n        // Approve the collateral to be added to 3pool\r\n        collateral_token.approve(address(three_pool), _collateral_amount);\r\n\r\n        // Convert collateral into 3pool\r\n        uint256[3] memory three_pool_collaterals;\r\n        three_pool_collaterals[1] = _collateral_amount;\r\n        uint256 min_3pool_out = (_collateral_amount * (10 ** missing_decimals)).mul(liq_slippage_3crv).div(PRICE_PRECISION);\r\n        three_pool.add_liquidity(three_pool_collaterals, min_3pool_out);\r\n\r\n        // Approve the 3pool for the metapool\r\n        threeCRV_received = three_pool_erc20.balanceOf(address(this));\r\n\r\n        // WEIRD ISSUE: NEED TO DO three_pool_erc20.approve(address(three_pool), 0); first before every time\r\n        // May be related to https://github.com/vyperlang/vyper/blob/3e1ff1eb327e9017c5758e24db4bdf66bbfae371/examples/tokens/ERC20.vy#L85\r\n        three_pool_erc20.approve(metapool_token_address, 0);\r\n        three_pool_erc20.approve(metapool_token_address, threeCRV_received);\r\n\r\n\r\n        // Add the FRAX and the collateral to the metapool\r\n        uint256 min_lp_out = (threeCRV_received * slippage_metapool) / PRICE_PRECISION;\r\n        metapool_LP_received = metapool_token.add_liquidity([0, threeCRV_received], min_lp_out);\r\n\r\n        return metapool_LP_received;\r\n    }\r\n\r\n    function metapoolWithdraw3pool(uint256 metapool_lp_in) public onlyByOwnGov {\r\n        // Withdraw 3pool from the metapool\r\n        uint256 min_3pool_out = metapool_lp_in.mul(slippage_metapool).div(PRICE_PRECISION);\r\n        metapool_token.remove_liquidity_one_coin(metapool_lp_in, 1, min_3pool_out);\r\n    }\r\n\r\n    function three_pool_to_collateral(uint256 _3pool_in) public onlyByOwnGov {\r\n        // Convert the 3pool into the collateral\r\n        // WEIRD ISSUE: NEED TO DO three_pool_erc20.approve(address(three_pool), 0); first before every time\r\n        // May be related to https://github.com/vyperlang/vyper/blob/3e1ff1eb327e9017c5758e24db4bdf66bbfae371/examples/tokens/ERC20.vy#L85\r\n        three_pool_erc20.approve(address(three_pool), 0);\r\n        three_pool_erc20.approve(address(three_pool), _3pool_in);\r\n        uint256 min_collat_out = _3pool_in.mul(liq_slippage_3crv).div(PRICE_PRECISION * (10 ** missing_decimals));\r\n        three_pool.remove_liquidity_one_coin(_3pool_in, 1, min_collat_out);\r\n    }\r\n\r\n    function metapoolWithdrawAndConvert3pool(uint256 metapool_lp_in) external onlyByOwnGov {\r\n        metapoolWithdraw3pool(metapool_lp_in);\r\n        three_pool_to_collateral(three_pool_erc20.balanceOf(address(this)));\r\n    }\r\n\r\n    /* ========== Main Functions ========== */\r\n\r\n    // Deposit Metapool LP tokens into the vault\r\n    function depositToVault(uint256 metapool_lp_in, uint64 lock_length) external onlyByOwnGovCust {\r\n        // Approve the metapool LP tokens for the vault contract\r\n        metapool_token.approve(tc_address, metapool_lp_in);\r\n        \r\n        // Deposit the metapool LP into the vault contract\r\n        tc.deposit(tc_pid, metapool_lp_in, lock_length);\r\n    }\r\n\r\n    // Withdraw a specific Metapool LP deposit from the vault back to this contract\r\n    function withdrawFromVault(uint256 metapool_lp_out, uint256 deposit_idx) external onlyByOwnGovCust {\r\n        tc.withdrawFromDeposit(tc_pid, metapool_lp_out, address(this), deposit_idx);\r\n    }\r\n\r\n    // Withdraw all Metapool LP from the vault back to this contract\r\n    function withdrawAllAndHarvest() external onlyByOwnGovCust {\r\n        tc.withdrawAllAndHarvest(tc_pid, address(this));\r\n    }\r\n\r\n    /* ========== Rewards ========== */\r\n\r\n    // Collect rewards\r\n    function harvest() external onlyByOwnGovCust {\r\n        tc.harvest(tc_pid, address(this));\r\n    }\r\n\r\n    function withdrawRewards() external onlyByOwnGovCust {\r\n        // Withdraw CRV\r\n        TransferHelper.safeTransfer(0xD533a949740bb3306d119CC777fa900bA034cd52, msg.sender, ERC20(0xD533a949740bb3306d119CC777fa900bA034cd52).balanceOf(address(this)));\r\n\r\n        // Withdraw the reward tokens\r\n        TransferHelper.safeTransfer(reward_token_address, msg.sender, ERC20(reward_token_address).balanceOf(address(this)));\r\n    }\r\n\r\n    /* ========== Burns and givebacks ========== */\r\n\r\n    // Give USDC profits back. Goes through the minter\r\n    function giveCollatBack(uint256 collat_amount) external onlyByOwnGovCust {\r\n        collateral_token.approve(address(amo_minter), collat_amount);\r\n        amo_minter.receiveCollatFromAMO(collat_amount);\r\n    }\r\n   \r\n    /* ========== RESTRICTED GOVERNANCE FUNCTIONS ========== */\r\n\r\n    function setAMOMinter(address _amo_minter_address) external onlyByOwnGov {\r\n        amo_minter = IFraxAMOMinter(_amo_minter_address);\r\n\r\n        // Get the custodian and timelock addresses from the minter\r\n        custodian_address = amo_minter.custodian_address();\r\n        timelock_address = amo_minter.timelock_address();\r\n\r\n        // Make sure the new addresses are not address(0)\r\n        require(custodian_address != address(0) && timelock_address != address(0), \"Invalid custodian or timelock\");\r\n    }\r\n\r\n    function setConvergenceWindow(uint256 _window) external onlyByOwnGov {\r\n        convergence_window = _window;\r\n    }\r\n\r\n    // in terms of 1e6 (overriding global_collateral_ratio)\r\n    function setDiscountRate(bool _state, uint256 _discount_rate) external onlyByOwnGov {\r\n        set_discount = _state;\r\n        discount_rate = _discount_rate;\r\n    }\r\n\r\n    function setSlippages(uint256 _liq_slippage_3crv, uint256 _slippage_metapool) external onlyByOwnGov {\r\n        liq_slippage_3crv = _liq_slippage_3crv;\r\n        slippage_metapool = _slippage_metapool;\r\n    }\r\n\r\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyByOwnGov {\r\n        // Can only be triggered by owner or governance, not custodian\r\n        // Tokens are sent to the custodian, as a sort of safeguard\r\n        TransferHelper.safeTransfer(address(tokenAddress), msg.sender, tokenAmount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_amo_minter_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convergence_window\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"custodian_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"custom_floor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"metapool_lp_in\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lock_length\",\"type\":\"uint64\"}],\"name\":\"depositToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discount_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dollarBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"frax_val_e18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collat_val_e18\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frax_floor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collat_amount\",\"type\":\"uint256\"}],\"name\":\"giveCollatBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liq_slippage_3crv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateral_amount\",\"type\":\"uint256\"}],\"name\":\"metapoolDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"metapool_LP_received\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"metapool_lp_in\",\"type\":\"uint256\"}],\"name\":\"metapoolWithdraw3pool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"metapool_lp_in\",\"type\":\"uint256\"}],\"name\":\"metapoolWithdrawAndConvert3pool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_amo_minter_address\",\"type\":\"address\"}],\"name\":\"setAMOMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_window\",\"type\":\"uint256\"}],\"name\":\"setConvergenceWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_discount_rate\",\"type\":\"uint256\"}],\"name\":\"setDiscountRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liq_slippage_3crv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage_metapool\",\"type\":\"uint256\"}],\"name\":\"setSlippages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"set_discount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showAllocations\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"return_arr\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage_metapool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_3pool_in\",\"type\":\"uint256\"}],\"name\":\"three_pool_to_collateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdValueInVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllAndHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"metapool_lp_out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_idx\",\"type\":\"uint256\"}],\"name\":\"withdrawFromVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CurveMetapoolLockerAMO","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"000000000000000000000000234d953a9404bf9dbc3b526271d440cd2870bcd200000000000000000000000036a0b6a5f7b318a2b4af75fffb1b51a5c78deb8c","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a21e583fb181e15d56d69be1e0dd704c6e5a81b340660921e6f0e301d252fde2"}]}