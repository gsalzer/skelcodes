{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"solidity/contracts/GenericProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '../interfaces/IGenericProxy.sol';\\nimport './Governable.sol';\\n\\n// solhint-disable avoid-low-level-calls\\ncontract GenericProxy is IGenericProxy, Governable {\\n  function call(\\n    uint256 _targetBlock,\\n    uint256 _reward,\\n    address _target1,\\n    bytes calldata _data1\\n  ) external payable override onlyGovernor {\\n    if (block.number != _targetBlock) revert IllegalBlock();\\n\\n    (bool success, ) = _target1.call(_data1);\\n    if (!success) revert CallError();\\n\\n    block.coinbase.transfer(_reward);\\n  }\\n\\n  function justCall(address _target, bytes calldata _data) external override onlyGovernor {\\n    (bool success, ) = _target.call(_data);\\n    if (!success) revert CallError();\\n  }\\n\\n  function call(\\n    uint256 _targetBlock,\\n    uint256 _reward,\\n    address _target1,\\n    bytes calldata _data1,\\n    address _target2,\\n    bytes calldata _data2\\n  ) external payable override onlyGovernor {\\n    if (block.number != _targetBlock) revert IllegalBlock();\\n\\n    (bool success, ) = _target1.call(_data1);\\n    if (!success) revert CallError();\\n\\n    (success, ) = _target2.call(_data2);\\n    if (!success) revert CallError();\\n\\n    block.coinbase.transfer(_reward);\\n  }\\n\\n  function call(\\n    uint256 _targetBlock,\\n    uint256 _reward,\\n    address _target1,\\n    bytes calldata _data1,\\n    address _target2,\\n    bytes calldata _data2,\\n    address _target3,\\n    bytes calldata _data3\\n  ) external payable override onlyGovernor {\\n    if (block.number != _targetBlock) revert IllegalBlock();\\n\\n    (bool success, ) = _target1.call(_data1);\\n    if (!success) revert CallError();\\n\\n    (success, ) = _target2.call(_data2);\\n    if (!success) revert CallError();\\n\\n    (success, ) = _target3.call(_data3);\\n    if (!success) revert CallError();\\n\\n    block.coinbase.transfer(_reward);\\n  }\\n\\n  function call(\\n    uint256 _targetBlock,\\n    uint256 _reward,\\n    address[] calldata _targets,\\n    bytes[] calldata _data\\n  ) external payable override onlyGovernor {\\n    if (block.number != _targetBlock) revert IllegalBlock();\\n\\n    for (uint32 _index = 0; _index < _targets.length; _index++) {\\n      (bool success, ) = _targets[_index].call(_data[_index]);\\n      if (!success) revert CallError();\\n    }\\n\\n    block.coinbase.transfer(_reward);\\n  }\\n\\n  function callWithPriorityFee(\\n    uint256 _targetBlock,\\n    uint256 _priorityFee,\\n    address[] calldata _targets,\\n    bytes[] calldata _data\\n  ) external payable override onlyGovernor {\\n    uint256 _initialGas = gasleft();\\n    if (block.number != _targetBlock) revert IllegalBlock();\\n\\n    for (uint32 _index = 0; _index < _targets.length; _index++) {\\n      (bool success, ) = _targets[_index].call(_data[_index]);\\n      if (!success) revert CallError();\\n    }\\n\\n    uint256 _reward = _priorityFee * (_initialGas - gasleft());\\n\\n    block.coinbase.transfer(_reward);\\n  }\\n\\n  function depositETH() external payable override {}\\n\\n  function withdrawETH(address payable _to, uint256 _amount) external override onlyGovernor {\\n    _to.transfer(_amount);\\n  }\\n\\n  receive() external payable override {}\\n}\\n\"\r\n    },\r\n    \"solidity/interfaces/IGenericProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport './IGovernable.sol';\\n\\ninterface IGenericProxy is IGovernable {\\n  // errors\\n  error CallError();\\n  error IllegalBlock();\\n\\n  // methods\\n  function call(\\n    uint256 _targetBlock,\\n    uint256 _reward,\\n    address _target1,\\n    bytes calldata _data1\\n  ) external payable;\\n\\n  function justCall(address _target, bytes calldata _data) external;\\n\\n  function call(\\n    uint256 _targetBlock,\\n    uint256 _reward,\\n    address _target1,\\n    bytes calldata _data1,\\n    address _target2,\\n    bytes calldata _data2\\n  ) external payable;\\n\\n  function call(\\n    uint256 _targetBlock,\\n    uint256 _reward,\\n    address _target1,\\n    bytes calldata _data1,\\n    address _target2,\\n    bytes calldata _data2,\\n    address _target3,\\n    bytes calldata _data3\\n  ) external payable;\\n\\n  function call(\\n    uint256 _targetBlock,\\n    uint256 _reward,\\n    address[] calldata _targets,\\n    bytes[] calldata _data\\n  ) external payable;\\n\\n  function callWithPriorityFee(\\n    uint256 _targetBlock,\\n    uint256 _priorityFee,\\n    address[] calldata _targets,\\n    bytes[] calldata _data\\n  ) external payable;\\n\\n  function depositETH() external payable;\\n\\n  function withdrawETH(address payable _to, uint256 _amount) external;\\n\\n  receive() external payable;\\n}\\n\"\r\n    },\r\n    \"solidity/contracts/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '../interfaces/IGovernable.sol';\\n\\ncontract Governable is IGovernable {\\n  address public override governor;\\n  address public override pendingGovernor;\\n\\n  constructor() {\\n    governor = msg.sender;\\n  }\\n\\n  function setPendingGovernor(address _pendingGovernor) external override onlyGovernor {\\n    if (_pendingGovernor == address(0)) revert NoGovernorZeroAddress();\\n    pendingGovernor = _pendingGovernor;\\n    emit PendingGovernorSet(governor, pendingGovernor);\\n  }\\n\\n  function acceptPendingGovernor() external override {\\n    if (msg.sender != pendingGovernor) revert OnlyPendingGovernor();\\n    emit PendingGovernorAccepted(governor, pendingGovernor);\\n    governor = pendingGovernor;\\n    pendingGovernor = address(0);\\n  }\\n\\n  modifier onlyGovernor {\\n    if (msg.sender != governor) revert OnlyGovernor();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"solidity/interfaces/IGovernable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IGovernable {\\n  // events\\n  event PendingGovernorSet(address _governor, address _pendingGovernor);\\n  event PendingGovernorAccepted(address _previousGovernor, address _newGovernor);\\n\\n  // errors\\n  error NoGovernorZeroAddress();\\n  error OnlyGovernor();\\n  error OnlyPendingGovernor();\\n\\n  // variables\\n  function governor() external view returns (address _governor);\\n\\n  function pendingGovernor() external view returns (address _pendingGovernor);\\n\\n  // methods\\n  function setPendingGovernor(address _pendingGovernor) external;\\n\\n  function acceptPendingGovernor() external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"CallError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalBlock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoGovernorZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPendingGovernor\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_previousGovernor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target1\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data1\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target1\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data1\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_target2\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data2\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_target3\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data3\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target1\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data1\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_target2\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data2\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"call\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priorityFee\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"callWithPriorityFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"justCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GenericProxy","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}