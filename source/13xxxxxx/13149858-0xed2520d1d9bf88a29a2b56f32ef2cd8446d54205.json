{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/wrappers/ArbitrumMessengerWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @unsupported: ovm\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/arbitrum/messengers/IInbox.sol\\\";\\nimport \\\"../interfaces/arbitrum/messengers/IBridge.sol\\\";\\nimport \\\"../interfaces/arbitrum/messengers/IOutbox.sol\\\";\\nimport \\\"./MessengerWrapper.sol\\\";\\n\\n/**\\n * @dev A MessengerWrapper for Arbitrum - https://developer.offchainlabs.com/\\n * @notice Deployed on layer-1\\n */\\n\\ncontract ArbitrumMessengerWrapper is MessengerWrapper {\\n\\n    modifier onlyGovernance {\\n        require(governance == msg.sender, \\\"ARB_MSG_WPR: Caller is not governance\\\");\\n        _;\\n    }\\n\\n    IInbox public immutable l1MessengerAddress;\\n    address public l2BridgeAddress;\\n    uint256 public maxSubmissionCost;\\n    address public l1MessengerWrapperAlias;\\n    uint256 public maxGas;\\n    uint256 public gasPriceBid;\\n    address public governance;\\n    uint160 constant offset = uint160(0x1111000000000000000000000000000000001111);\\n\\n    constructor(\\n        address _l1BridgeAddress,\\n        address _l2BridgeAddress,\\n        IInbox _l1MessengerAddress,\\n        uint256 _maxSubmissionCost,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        address _governance\\n        \\n    )\\n        public\\n        MessengerWrapper(_l1BridgeAddress)\\n    {\\n        l2BridgeAddress = _l2BridgeAddress;\\n        l1MessengerAddress = _l1MessengerAddress;\\n        maxSubmissionCost = _maxSubmissionCost;\\n        l1MessengerWrapperAlias = applyL1ToL2Alias(address(this));\\n        maxGas = _maxGas;\\n        gasPriceBid = _gasPriceBid;\\n        governance = _governance;\\n    }\\n\\n    /** \\n     * @dev Sends a message to the l2BridgeAddress from layer-1\\n     * @param _calldata The data that l2BridgeAddress will be called with\\n     */\\n    function sendCrossDomainMessage(bytes memory _calldata) public override onlyL1Bridge {\\n        l1MessengerAddress.createRetryableTicket(\\n            l2BridgeAddress,\\n            0,\\n            maxSubmissionCost,\\n            l1MessengerWrapperAlias,\\n            l1MessengerWrapperAlias,\\n            maxGas,\\n            gasPriceBid,\\n            _calldata\\n        );\\n    }\\n\\n    function verifySender(address l1BridgeCaller, bytes memory /*_data*/) public override {\\n        // Reference: https://github.com/OffchainLabs/arbitrum/blob/5c06d89daf8fa6088bcdba292ffa6ed0c72afab2/packages/arb-bridge-peripherals/contracts/tokenbridge/ethereum/L1ArbitrumMessenger.sol#L89\\n        IBridge arbBridge = l1MessengerAddress.bridge();\\n        IOutbox outbox = IOutbox(arbBridge.activeOutbox());\\n        address l2ToL1Sender = outbox.l2ToL1Sender();\\n\\n        require(l1BridgeCaller == address(outbox), \\\"ARB_MSG_WPR: Caller is not outbox\\\");\\n        require(l2ToL1Sender == l2BridgeAddress, \\\"ARB_MSG_WPR: Invalid cross-domain sender\\\");\\n    }\\n\\n    /**\\n     * @dev Claim funds that exist on the l2 messenger wrapper alias address\\n     * @notice Do not use state variables here as this is to be used when passing in precise values\\n     */\\n    function claimL2Funds(\\n        address _recipient,\\n        uint256 _l2CallValue,\\n        uint256 _maxSubmissionCost,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid\\n    )\\n        public\\n        onlyGovernance\\n    {\\n        l1MessengerAddress.createRetryableTicket(\\n            _recipient,\\n            _l2CallValue,\\n            _maxSubmissionCost,\\n            _recipient,\\n            _recipient,\\n            _maxGas,\\n            _gasPriceBid,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /// @notice Utility function that converts the msg.sender viewed in the L2 to the\\n    /// address in the L1 that submitted a tx to the inbox\\n    /// @param l1Address L2 address as viewed in msg.sender\\n    /// @return The address in the L1 that triggered the tx to L2\\n    function applyL1ToL2Alias(address l1Address) internal pure returns (address) {\\n        return address(uint160(l1Address) + offset);\\n    }\\n\\n    /* ========== External Config Management Functions ========== */\\n\\n    function setMaxSubmissionCost(uint256 _newMaxSubmissionCost) external onlyGovernance {\\n        maxSubmissionCost = _newMaxSubmissionCost;\\n    }\\n\\n    function setL1MessengerWrapperAlias(address _newL1MessengerWrapperAlias) external onlyGovernance {\\n        l1MessengerWrapperAlias = _newL1MessengerWrapperAlias;\\n    }\\n\\n    function setMaxGas(uint256 _newMaxGas) external onlyGovernance {\\n        maxGas = _newMaxGas;\\n    }\\n\\n    function setGasPriceBid(uint256 _newGasPriceBid) external onlyGovernance {\\n        gasPriceBid = _newGasPriceBid;\\n    }\\n\\n    function setGovernance(address _newGovernance) external onlyGovernance {\\n        governance = _newGovernance;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/arbitrum/messengers/IInbox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./IBridge.sol\\\";\\n\\ninterface IInbox {\\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\\n    function bridge() external view returns (IBridge);\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 l2CallValue,\\n        uint256 maxSubmissionCost,\\n        address excessFeeRefundAddress,\\n        address callValueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/arbitrum/messengers/IBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface IBridge {\\n    function activeOutbox() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/arbitrum/messengers/IOutbox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface IOutbox {\\n    function l2ToL1Sender() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/wrappers/MessengerWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IMessengerWrapper.sol\\\";\\n\\nabstract contract MessengerWrapper is IMessengerWrapper {\\n    address public immutable l1BridgeAddress;\\n\\n    constructor(address _l1BridgeAddress) internal {\\n        l1BridgeAddress = _l1BridgeAddress;\\n    }\\n\\n    modifier onlyL1Bridge {\\n        require(msg.sender == l1BridgeAddress, \\\"MW: Sender must be the L1 Bridge\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMessengerWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IMessengerWrapper {\\n    function sendCrossDomainMessage(bytes memory _calldata) external;\\n    function verifySender(address l1BridgeCaller, bytes memory _data) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"contract IInbox\",\"name\":\"_l1MessengerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2CallValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"}],\"name\":\"claimL2Funds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPriceBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1BridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1MessengerAddress\",\"outputs\":[{\"internalType\":\"contract IInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1MessengerWrapperAlias\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2BridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSubmissionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"sendCrossDomainMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newGasPriceBid\",\"type\":\"uint256\"}],\"name\":\"setGasPriceBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newL1MessengerWrapperAlias\",\"type\":\"address\"}],\"name\":\"setL1MessengerWrapperAlias\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxGas\",\"type\":\"uint256\"}],\"name\":\"setMaxGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"setMaxSubmissionCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1BridgeCaller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ArbitrumMessengerWrapper","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"50000","ConstructorArguments":"00000000000000000000000072209fe68386b37a40d6bca04f78356fd342491f000000000000000000000000cb4ceefce514b2d910d3ac529076d18e3add37750000000000000000000000004dbd4fc535ac27206064b68ffcf827b0a60bab3f0000000000000000000000000000000000000000000000000000000e6e51bf7d000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000002540be400000000000000000000000000f56e305024b195383245a075737d16dbdb8487fb","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}