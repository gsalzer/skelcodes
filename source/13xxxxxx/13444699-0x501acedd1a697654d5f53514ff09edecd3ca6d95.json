{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FarmController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport \\\"./Governable.sol\\\";\\nimport \\\"./interface/IOptionsFarming.sol\\\";\\nimport \\\"./interface/IFarm.sol\\\";\\nimport \\\"./interface/IFarmController.sol\\\";\\n\\n\\n/**\\n * @title FarmController\\n * @author solace.fi\\n * @notice Controls the allocation of rewards across multiple farms.\\n */\\ncontract FarmController is IFarmController, Governable {\\n\\n    uint256 internal _rewardPerSecond;\\n\\n    IOptionsFarming internal _optionsFarming;\\n\\n    /// @notice Total allocation points across all farms.\\n    uint256 internal _totalAllocPoints = 0;\\n\\n    /// @notice The number of farms that have been created.\\n    uint256 internal _numFarms = 0;\\n\\n    /// @notice Given a farm ID, return its address.\\n    /// @dev Indexable 1-numFarms, 0 is null farm\\n    mapping(uint256 => address) internal _farmAddresses;\\n\\n    /// @notice Given a farm address, returns its ID.\\n    /// @dev Returns 0 for not farms and unregistered farms.\\n    mapping(address => uint256) internal _farmIndices;\\n\\n    /// @notice Given a farm ID, how many points the farm was allocated.\\n    mapping(uint256 => uint256) internal _allocPoints;\\n\\n    /**\\n     * @notice Constructs the `FarmController` contract.\\n     * @param governance_ The address of the [governor](/docs/protocol/governance).\\n     * @param optionsFarming_ The address of the [`OptionsFarming`](./OptionsFarming) contract.\\n     * @param rewardPerSecond_ Amount of reward to distribute per second.\\n     */\\n    constructor(address governance_, address optionsFarming_, uint256 rewardPerSecond_) Governable(governance_) {\\n        require(optionsFarming_ != address(0x0), \\\"zero address optionsfarming\\\");\\n        _optionsFarming = IOptionsFarming(payable(optionsFarming_));\\n        _rewardPerSecond = rewardPerSecond_;\\n    }\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /// @notice Rewards distributed per second across all farms.\\n    function rewardPerSecond() external view override returns (uint256) {\\n        return _rewardPerSecond;\\n    }\\n\\n    /// @notice Total allocation points across all farms.\\n    function totalAllocPoints() external view override returns (uint256) {\\n        return _totalAllocPoints;\\n    }\\n\\n    /// @notice The number of farms that have been created.\\n    function numFarms() external view override returns (uint256) {\\n        return _numFarms;\\n    }\\n\\n    /// @notice Given a farm ID, return its address.\\n    /// @dev Indexable 1-numFarms, 0 is null farm.\\n    function farmAddresses(uint256 farmID) external view override returns (address) {\\n        return _farmAddresses[farmID];\\n    }\\n\\n    /// @notice Given a farm address, returns its ID.\\n    /// @dev Returns 0 for not farms and unregistered farms.\\n    function farmIndices(address farmAddress) external view override returns (uint256) {\\n        return _farmIndices[farmAddress];\\n    }\\n\\n    /// @notice Given a farm ID, how many points the farm was allocated.\\n    function allocPoints(uint256 farmID) external view override returns (uint256) {\\n        return _allocPoints[farmID];\\n    }\\n\\n    /**\\n     * @notice Calculates the accumulated balance of rewards for the specified user.\\n     * @param user The user for whom unclaimed rewards will be shown.\\n     * @return reward Total amount of withdrawable rewards.\\n     */\\n    function pendingRewards(address user) external view override returns (uint256 reward) {\\n        reward = 0;\\n        uint256 numFarms_ = _numFarms; // copy to memory to save gas\\n        for(uint256 farmID = 1; farmID <= numFarms_; ++farmID) {\\n            IFarm farm = IFarm(_farmAddresses[farmID]);\\n            reward += farm.pendingRewards(user);\\n        }\\n        return reward;\\n    }\\n\\n    /***************************************\\n    MUTATOR FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Updates all farms to be up to date to the current second.\\n     */\\n    function massUpdateFarms() external override {\\n        uint256 numFarms_ = _numFarms; // copy to memory to save gas\\n        for(uint256 farmID = 1; farmID <= numFarms_; ++farmID) {\\n            IFarm(_farmAddresses[farmID]).updateFarm();\\n        }\\n    }\\n\\n    /***************************************\\n    OPTIONS CREATION FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Withdraw your rewards from all farms and create an [`Option`](./OptionsFarming).\\n     * @return optionID The ID of the new [`Option`](./OptionsFarming).\\n     */\\n    function farmOptionMulti() external override returns (uint256 optionID) {\\n        // withdraw rewards from all farms\\n        uint256 rewardAmount = 0;\\n        uint256 numFarms_ = _numFarms; // copy to memory to save gas\\n        for(uint256 farmID = 1; farmID <= numFarms_; ++farmID) {\\n            IFarm farm = IFarm(_farmAddresses[farmID]);\\n            uint256 rewards = farm.withdrawRewardsForUser(msg.sender);\\n            rewardAmount += rewards;\\n        }\\n        // create an option\\n        optionID = _optionsFarming.createOption(msg.sender, rewardAmount);\\n        return optionID;\\n    }\\n\\n    /**\\n     * @notice Creates an [`Option`](./OptionsFarming) for the given `rewardAmount`.\\n     * Must be called by a farm.\\n     * @param recipient The recipient of the option.\\n     * @param rewardAmount The amount to reward in the Option.\\n     * @return optionID The ID of the new [`Option`](./OptionsFarming).\\n     */\\n    function createOption(address recipient, uint256 rewardAmount) external override returns (uint256 optionID) {\\n        require(_farmIndices[msg.sender] != 0, \\\"!farm\\\");\\n        // create an option\\n        optionID = _optionsFarming.createOption(recipient, rewardAmount);\\n        return optionID;\\n    }\\n\\n    /***************************************\\n    GOVERNANCE FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Registers a farm.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * Cannot register a farm more than once.\\n     * @param farmAddress The farm's address.\\n     * @param allocPoints_ How many points to allocate this farm.\\n     * @return farmID The farm ID.\\n     */\\n    function registerFarm(address farmAddress, uint256 allocPoints_) external override onlyGovernance returns (uint256 farmID) {\\n        // note that each farm will be assigned a number of rewards to distribute per second,\\n        // but there are no checks in case the farm exceeds that amount.\\n        // check the farm logic before registering it\\n        require(_farmIndices[farmAddress] == 0, \\\"already registered\\\");\\n        require(IFarm(farmAddress).farmType() > 0, \\\"not a farm\\\");\\n        farmID = ++_numFarms; // starts at 1\\n        _farmAddresses[farmID] = farmAddress;\\n        _farmIndices[farmAddress] = farmID;\\n        _setAllocPoints(farmID, allocPoints_);\\n        emit FarmRegistered(farmID, farmAddress);\\n    }\\n\\n    /**\\n     * @notice Sets a farm's allocation points.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param farmID The farm to set allocation points.\\n     * @param allocPoints_ How many points to allocate this farm.\\n     */\\n    function setAllocPoints(uint256 farmID, uint256 allocPoints_) external override onlyGovernance {\\n        require(farmID != 0 && farmID <= _numFarms, \\\"farm does not exist\\\");\\n        _setAllocPoints(farmID, allocPoints_);\\n    }\\n\\n    /**\\n     * @notice Sets the reward distribution across all farms.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param rewardPerSecond_ Amount of reward to distribute per second.\\n     */\\n    function setRewardPerSecond(uint256 rewardPerSecond_) external override onlyGovernance {\\n        // accounting\\n        _rewardPerSecond = rewardPerSecond_;\\n        _updateRewards();\\n        emit RewardsSet(rewardPerSecond_);\\n    }\\n\\n    /***************************************\\n    HELPER FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n    * @notice Sets a farm's allocation points.\\n    * @param farmID The farm to set allocation points.\\n    * @param allocPoints_ How many points to allocate this farm.\\n    */\\n    function _setAllocPoints(uint256 farmID, uint256 allocPoints_) internal {\\n      _totalAllocPoints = _totalAllocPoints - _allocPoints[farmID] + allocPoints_;\\n      _allocPoints[farmID] = allocPoints_;\\n      _updateRewards();\\n    }\\n\\n    /**\\n     * @notice Updates each farm's second rewards.\\n     */\\n    function _updateRewards() internal {\\n        uint256 numFarms_ = _numFarms; // copy to memory to save gas\\n        uint256 rewardPerSecond_ = _rewardPerSecond;\\n        uint256 totalAllocPoints_ = _totalAllocPoints;\\n        for(uint256 farmID = 1; farmID <= numFarms_; ++farmID) {\\n            uint256 secondReward = (totalAllocPoints_ == 0) ? 0 : (rewardPerSecond_ * _allocPoints[farmID] / totalAllocPoints_);\\n            IFarm(_farmAddresses[farmID]).setRewards(secondReward);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport \\\"./interface/IGovernable.sol\\\";\\n\\n/**\\n * @title Governable\\n * @author solace.fi\\n * @notice Enforces access control for important functions to [**governor**](/docs/protocol/governance).\\n *\\n * Many contracts contain functionality that should only be accessible to a privileged user. The most common access control pattern is [OpenZeppelin's `Ownable`](https://docs.openzeppelin.com/contracts/4.x/access-control#ownership-and-ownable). We instead use `Governable` with a few key differences:\\n   * - Transferring the governance role is a two step process. The current governance must [`setPendingGovernance(pendingGovernance_)`](#setPendingGovernance) then the new governance must [`acceptGovernance()`](#acceptgovernance). This is to safeguard against accidentally setting ownership to the wrong address and locking yourself out of your contract.\\n * - `governance` is a constructor argument instead of `msg.sender`. This is especially useful when deploying contracts via a [`SingletonFactory`](./interface/ISingletonFactory).\\n * - We use `lockGovernance()` instead of `renounceOwnership()`. `renounceOwnership()` is a prerequisite for the reinitialization bug because it sets `owner = address(0x0)`. We also use the `governanceIsLocked()` flag.\\n */\\ncontract Governable is IGovernable {\\n\\n    /***************************************\\n    GLOBAL VARIABLES\\n    ***************************************/\\n\\n    // Governor.\\n    address private _governance;\\n\\n    // governance to take over.\\n    address private _pendingGovernance;\\n\\n    bool private _locked;\\n\\n    /**\\n     * @notice Constructs the governable contract.\\n     * @param governance_ The address of the [governor](/docs/protocol/governance).\\n     */\\n    constructor(address governance_) {\\n        require(governance_ != address(0x0), \\\"zero address governance\\\");\\n        _governance = governance_;\\n        _pendingGovernance = address(0x0);\\n        _locked = false;\\n    }\\n\\n    /***************************************\\n    MODIFIERS\\n    ***************************************/\\n\\n    // can only be called by governor\\n    // can only be called while unlocked\\n    modifier onlyGovernance() {\\n        require(!_locked, \\\"governance locked\\\");\\n        require(msg.sender == _governance, \\\"!governance\\\");\\n        _;\\n    }\\n\\n    // can only be called by pending governor\\n    // can only be called while unlocked\\n    modifier onlyPendingGovernance() {\\n        require(!_locked, \\\"governance locked\\\");\\n        require(msg.sender == _pendingGovernance, \\\"!pending governance\\\");\\n        _;\\n    }\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /// @notice Address of the current governor.\\n    function governance() external view override returns (address) {\\n        return _governance;\\n    }\\n\\n    /// @notice Address of the governor to take over.\\n    function pendingGovernance() external view override returns (address) {\\n        return _pendingGovernance;\\n    }\\n\\n    /// @notice Returns true if governance is locked.\\n    function governanceIsLocked() external view override returns (bool) {\\n        return _locked;\\n    }\\n\\n    /***************************************\\n    MUTATOR FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Initiates transfer of the governance role to a new governor.\\n     * Transfer is not complete until the new governor accepts the role.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param pendingGovernance_ The new governor.\\n     */\\n    function setPendingGovernance(address pendingGovernance_) external override onlyGovernance {\\n        _pendingGovernance = pendingGovernance_;\\n        emit GovernancePending(pendingGovernance_);\\n    }\\n\\n    /**\\n     * @notice Accepts the governance role.\\n     * Can only be called by the pending governor.\\n     */\\n    function acceptGovernance() external override onlyPendingGovernance {\\n        // sanity check against transferring governance to the zero address\\n        // if someone figures out how to sign transactions from the zero address\\n        // consider the entirety of ethereum to be rekt\\n        require(_pendingGovernance != address(0x0), \\\"zero governance\\\");\\n        address oldGovernance = _governance;\\n        _governance = _pendingGovernance;\\n        _pendingGovernance = address(0x0);\\n        emit GovernanceTransferred(oldGovernance, _governance);\\n    }\\n\\n    /**\\n     * @notice Permanently locks this contract's governance role and any of its functions that require the role.\\n     * This action cannot be reversed.\\n     * Before you call it, ask yourself:\\n     *   - Is the contract self-sustaining?\\n     *   - Is there a chance you will need governance privileges in the future?\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     */\\n    function lockGovernance() external override onlyGovernance {\\n        _locked = true;\\n        // intentionally not using address(0x0), see re-initialization exploit\\n        _governance = address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n        _pendingGovernance = address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n        emit GovernanceTransferred(msg.sender, address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF));\\n        emit GovernanceLocked();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IOptionsFarming.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport \\\"./IERC721Enhanced.sol\\\";\\n\\n\\n/**\\n * @title IOptionsFarming\\n * @author solace.fi\\n * @notice Distributes options to farmers.\\n *\\n * Rewards are accumulated by farmers for participating in farms. Rewards can be redeemed for options with 1:1 reward:[**SOLACE**](./SOLACE). Options can be exercised by paying `strike price` **ETH** before `expiry` to receive `rewardAmount` [**SOLACE**](./SOLACE).\\n *\\n * The `strike price` is calculated by either:\\n *   - The current market price of [**SOLACE**](./SOLACE) * `swap rate` as determined by the [**SOLACE**](./SOLACE)-**ETH** Uniswap pool.\\n *   - The floor price of [**SOLACE**](./SOLACE)/**USD** converted to **ETH** using a **ETH**-**USD** Uniswap pool.\\n */\\ninterface IOptionsFarming is IERC721Enhanced {\\n\\n    /***************************************\\n    EVENTS\\n    ***************************************/\\n\\n    /// @notice Emitted when an option is created.\\n    event OptionCreated(uint256 optionID);\\n    /// @notice Emitted when an option is exercised.\\n    event OptionExercised(uint256 optionID);\\n    /// @notice Emitted when solace is set.\\n    event SolaceSet(address solace);\\n    /// @notice Emitted when farm controller is set.\\n    event FarmControllerSet(address farmController);\\n    /// @notice Emitted when [**SOLACE**](../SOLACE)-**ETH** pool is set.\\n    event SolaceEthPoolSet(address solaceEthPool);\\n    /// @notice Emitted when **ETH**-**USD** pool is set.\\n    event EthUsdPoolSet(address ethUsdPool);\\n    /// @notice Emitted when [**SOLACE**](../SOLACE)-**ETH** twap interval is set.\\n    event SolaceEthTwapIntervalSet(uint32 twapInterval);\\n    /// @notice Emitted when **ETH**-**USD** twap interval is set.\\n    event EthUsdTwapIntervalSet(uint32 twapInterval);\\n    /// @notice Emitted when expiry duration is set.\\n    event ExpiryDurationSet(uint256 expiryDuration);\\n    /// @notice Emitted when swap rate is set.\\n    event SwapRateSet(uint16 swapRate);\\n    /// @notice Emitted when fund receiver is set.\\n    event ReceiverSet(address receiver);\\n    /// @notice Emitted when the solace-usd price floor is set.\\n    event PriceFloorSet(uint256 priceFloor);\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /// @notice Native [**SOLACE**](../SOLACE) Token.\\n    function solace() external view returns (address solace_);\\n\\n    /// @notice The [`FarmController(../FarmController).\\n    function farmController() external view returns (address controller_);\\n\\n    /// @notice The receiver for options payments.\\n    function receiver() external view returns (address receiver_);\\n\\n    /// @notice Amount of time in seconds into the future that new options will expire.\\n    function expiryDuration() external view returns (uint256 expiryDuration_);\\n\\n    /// @notice Total number of options ever created.\\n    function numOptions() external view returns (uint256 numOptions_);\\n\\n    /// @notice The uniswap [**SOLACE**](../SOLACE)-**ETH** pool for calculating twap.\\n    function solaceEthPool() external view returns (address solaceEthPool_);\\n\\n    /// @notice The uniswap **ETH**-**USD** pool for calculating twap.\\n    function ethUsdPool() external view returns (address ethUsdPool_);\\n\\n    /// @notice Interval in seconds to calculate time weighted average price in strike price.\\n    /// Used in [**SOLACE**](../SOLACE)-**ETH** twap.\\n    function solaceEthTwapInterval() external view returns (uint32 twapInterval_);\\n\\n    /// @notice Interval in seconds to calculate time weighted average price in strike price.\\n    /// Used in **ETH**-**USD** twap.\\n    function ethUsdTwapInterval() external view returns (uint32 twapInterval_);\\n\\n    /// @notice The relative amount of the eth value that a user must pay, measured in BPS.\\n    /// Only applies to the [**SOLACE**](../SOLACE)-**ETH** pool.\\n    function swapRate() external view returns (uint16 swapRate_);\\n\\n    /// @notice The floor price of [**SOLACE**](./SOLACE) measured in **USD**.\\n    /// Specifically, whichever stablecoin is in the **ETH**-**USD** pool.\\n    function priceFloor() external view returns (uint256 priceFloor_);\\n\\n    /**\\n     * @notice The amount of [**SOLACE**](./SOLACE) that a user is owed if any.\\n     * @param user The user.\\n     * @return amount The amount.\\n     */\\n    function unpaidSolace(address user) external view returns (uint256 amount);\\n\\n    struct Option {\\n        uint256 rewardAmount; // The amount of SOLACE out.\\n        uint256 strikePrice;  // The amount of ETH in.\\n        uint256 expiry;       // The expiration timestamp.\\n    }\\n\\n    /**\\n     * @notice Get information about an option.\\n     * @param optionID The ID of the option to query.\\n     * @return rewardAmount The amount of [**SOLACE**](../SOLACE) out.\\n     * @return strikePrice The amount of **ETH** in.\\n     * @return expiry The expiration timestamp.\\n     */\\n    function getOption(uint256 optionID) external view returns (uint256 rewardAmount, uint256 strikePrice, uint256 expiry);\\n\\n    /**\\n     * @notice Calculate the strike price for an amount of [**SOLACE**](../SOLACE).\\n     * @param rewardAmount Amount of [**SOLACE**](../SOLACE).\\n     * @return strikePrice Strike Price in **ETH**.\\n     */\\n    function calculateStrikePrice(uint256 rewardAmount) external view returns (uint256 strikePrice);\\n\\n    /***************************************\\n    MUTATOR FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Creates an option for the given `rewardAmount`.\\n     * Must be called by the [`FarmController(./FarmController).\\n     * @param recipient The recipient of the option.\\n     * @param rewardAmount The amount to reward in the Option.\\n     * @return optionID The ID of the newly minted option.\\n     */\\n    function createOption(address recipient, uint256 rewardAmount) external returns (uint256 optionID);\\n\\n    /**\\n     * @notice Exercises an Option.\\n     * `msg.sender` must pay `option.strikePrice` **ETH**.\\n     * `msg.sender` will receive `option.rewardAmount` [**SOLACE**](../SOLACE).\\n     * Can only be called by the Option owner or approved.\\n     * Can only be called before `option.expiry`.\\n     * @param optionID The ID of the Option to exercise.\\n     */\\n    function exerciseOption(uint256 optionID) external payable;\\n\\n    /**\\n     * @notice Exercises an Option in part.\\n     * `msg.sender` will pay `msg.value` **ETH**.\\n     * `msg.sender` will receive a fair amount of [**SOLACE**](../SOLACE).\\n     * Can only be called by the Option owner or approved.\\n     * Can only be called before `option.expiry`.\\n     * @param optionID The ID of the Option to exercise.\\n     */\\n    function exerciseOptionInPart(uint256 optionID) external payable;\\n\\n    /**\\n     * @notice Transfers the unpaid [**SOLACE**](../SOLACE) to the user.\\n     */\\n    function withdraw() external;\\n\\n    /**\\n     * @notice Sends this contract's **ETH** balance to `receiver`.\\n     */\\n    function sendValue() external;\\n\\n    /***************************************\\n    GOVERNANCE FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n    * @notice Sets the [**SOLACE**](../SOLACE) native token.\\n    * Can only be called by the current [**governor**](/docs/protocol/governance).\\n    * @param solace_ The address of the [**SOLACE**](../SOLACE) contract.\\n    */\\n    function setSolace(address solace_) external;\\n\\n    /**\\n     * @notice Sets the [`FarmController(../FarmController) contract.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param controller The address of the new [`FarmController(../FarmController).\\n     */\\n    function setFarmController(address controller) external;\\n\\n    /**\\n     * @notice Sets the recipient for Option payments.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param receiver The new recipient.\\n     */\\n    function setReceiver(address payable receiver) external;\\n\\n    /**\\n     * @notice Sets the time into the future that new Options will expire.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param expiryDuration_ The duration in seconds.\\n     */\\n    function setExpiryDuration(uint256 expiryDuration_) external;\\n\\n    /**\\n     * @notice Sets the [**SOLACE**](../SOLACE)-**ETH** pool for twap calculations.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param pool The address of the pool.\\n     * @param solaceIsToken0 True if [**SOLACE**](./SOLACE) is token0 in the pool, false otherwise.\\n     * @param interval The interval of the twap.\\n     */\\n    function setSolaceEthPool(address pool, bool solaceIsToken0, uint32 interval) external;\\n\\n    /**\\n     * @notice Sets the **ETH**-**USD** pool for twap calculations.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param pool The address of the pool.\\n     * @param usdIsToken0 True if **USD** is token0 in the pool, false otherwise.\\n     * @param interval The interval of the twap.\\n     * @param priceFloor_ The floor price in the **USD** stablecoin.\\n     */\\n    function setEthUsdPool(address pool, bool usdIsToken0, uint32 interval, uint256 priceFloor_) external;\\n\\n    /**\\n     * @notice Sets the interval for [**SOLACE**](../SOLACE)-**ETH** twap calculations.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param interval The interval of the twap.\\n     */\\n    function setSolaceEthTwapInterval(uint32 interval) external;\\n\\n    /**\\n     * @notice Sets the interval for **ETH**-**USD** twap calculations.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param interval The interval of the twap.\\n     */\\n    function setEthUsdTwapInterval(uint32 interval) external;\\n\\n    /**\\n     * @notice Sets the swap rate for prices in the [**SOLACE**](../SOLACE)-**ETH** pool.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param swapRate_ The new swap rate.\\n     */\\n    function setSwapRate(uint16 swapRate_) external;\\n\\n    /**\\n     * @notice Sets the floor price of [**SOLACE**](./SOLACE) measured in **USD**.\\n     * Specifically, whichever stablecoin is in the **ETH**-**USD** pool.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param priceFloor_ The new floor price.\\n     */\\n    function setPriceFloor(uint256 priceFloor_) external;\\n\\n    /***************************************\\n    FALLBACK FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Fallback function to allow contract to receive **ETH**.\\n     */\\n    receive() external payable;\\n\\n    /**\\n     * @notice Fallback function to allow contract to receive **ETH**.\\n     */\\n    fallback () external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport \\\"./IFarmController.sol\\\";\\n\\n\\n/**\\n * @title IFarm\\n * @author solace.fi\\n * @notice Rewards investors in [**SOLACE**](../SOLACE).\\n */\\ninterface IFarm {\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /// @notice [`IFarmController`](../FarmController) contract.\\n    function farmController() external view returns (address);\\n\\n    /// @notice A unique enumerator that identifies the farm type.\\n    function farmType() external view returns (uint256);\\n\\n    /// @notice Amount of rewards distributed per second.\\n    function rewardPerSecond() external view returns (uint256);\\n\\n    /// @notice When the farm will start.\\n    function startTime() external view returns (uint256);\\n\\n    /// @notice When the farm will end.\\n    function endTime() external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the accumulated rewards for specified user.\\n     * @param user The user for whom unclaimed tokens will be shown.\\n     * @return reward Total amount of withdrawable rewards.\\n     */\\n    function pendingRewards(address user) external view returns (uint256 reward);\\n\\n    /**\\n     * @notice Calculates the reward amount distributed between two timestamps.\\n     * @param from The start of the period to measure rewards for.\\n     * @param to The end of the period to measure rewards for.\\n     * @return amount The reward amount distributed in the given period.\\n     */\\n    function getRewardAmountDistributed(uint256 from, uint256 to) external view returns (uint256 amount);\\n\\n    /***************************************\\n    MUTATOR FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Converts the senders unpaid rewards into an [`Option`](../OptionsFarming).\\n     * @return optionID The ID of the newly minted [`Option`](../OptionsFarming).\\n     */\\n    function withdrawRewards() external returns (uint256 optionID);\\n\\n    /**\\n     * @notice Withdraw a users rewards without unstaking their tokens.\\n     * Can only be called by [`FarmController`](../FarmController).\\n     * @param user User to withdraw rewards for.\\n     * @return rewardAmount The amount of rewards the user earned on this farm.\\n     */\\n    function withdrawRewardsForUser(address user) external returns (uint256 rewardAmount);\\n\\n    /**\\n     * @notice Updates farm information to be up to date to the current time.\\n     */\\n    function updateFarm() external;\\n\\n    /***************************************\\n    GOVERNANCE FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Sets the amount of rewards to distribute per second.\\n     * Only affects future rewards.\\n     * Can only be called by [`FarmController`](../FarmController).\\n     * @param rewardPerSecond_ Amount to distribute per second.\\n     */\\n    function setRewards(uint256 rewardPerSecond_) external;\\n\\n    /**\\n     * @notice Sets the farm's end time. Used to extend the duration.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param endTime_ The new end time.\\n     */\\n    function setEnd(uint256 endTime_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IFarmController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n\\n/**\\n * @title IFarmController\\n * @author solace.fi\\n * @notice Controls the allocation of rewards across multiple farms.\\n */\\ninterface IFarmController {\\n\\n    /***************************************\\n    EVENTS\\n    ***************************************/\\n\\n    /// @notice Emitted when a farm is registered.\\n    event FarmRegistered(uint256 indexed farmID, address indexed farmAddress);\\n    /// @notice Emitted when reward per second is changed.\\n    event RewardsSet(uint256 rewardPerSecond);\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /// @notice Rewards distributed per second across all farms.\\n    function rewardPerSecond() external view returns (uint256);\\n\\n    /// @notice Total allocation points across all farms.\\n    function totalAllocPoints() external view returns (uint256);\\n\\n    /// @notice The number of farms that have been created.\\n    function numFarms() external view returns (uint256);\\n\\n    /// @notice Given a farm ID, return its address.\\n    /// @dev Indexable 1-numFarms, 0 is null farm.\\n    function farmAddresses(uint256 farmID) external view returns (address);\\n\\n    /// @notice Given a farm address, returns its ID.\\n    /// @dev Returns 0 for not farms and unregistered farms.\\n    function farmIndices(address farmAddress) external view returns (uint256);\\n\\n    /// @notice Given a farm ID, how many points the farm was allocated.\\n    function allocPoints(uint256 farmID) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the accumulated balance of rewards for the specified user.\\n     * @param user The user for whom unclaimed rewards will be shown.\\n     * @return reward Total amount of withdrawable rewards.\\n     */\\n    function pendingRewards(address user) external view returns (uint256 reward);\\n\\n    /***************************************\\n    MUTATOR FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Updates all farms to be up to date to the current second.\\n     */\\n    function massUpdateFarms() external;\\n\\n    /***************************************\\n    OPTIONS CREATION FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Withdraw your rewards from all farms and create an [`Option`](../OptionsFarming).\\n     * @return optionID The ID of the new [`Option`](./OptionsFarming).\\n     */\\n    function farmOptionMulti() external returns (uint256 optionID);\\n\\n    /**\\n     * @notice Creates an [`Option`](../OptionsFarming) for the given `rewardAmount`.\\n     * Must be called by a farm.\\n     * @param recipient The recipient of the option.\\n     * @param rewardAmount The amount to reward in the Option.\\n     * @return optionID The ID of the new [`Option`](./OptionsFarming).\\n     */\\n    function createOption(address recipient, uint256 rewardAmount) external returns (uint256 optionID);\\n\\n    /***************************************\\n    GOVERNANCE FUNCTIONS\\n    ***************************************/\\n\\n    /**\\n     * @notice Registers a farm.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * Cannot register a farm more than once.\\n     * @param farmAddress The farm's address.\\n     * @param allocPoints How many points to allocate this farm.\\n     * @return farmID The farm ID.\\n     */\\n    function registerFarm(address farmAddress, uint256 allocPoints) external returns (uint256 farmID);\\n\\n    /**\\n     * @notice Sets a farm's allocation points.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param farmID The farm to set allocation points.\\n     * @param allocPoints_ How many points to allocate this farm.\\n     */\\n    function setAllocPoints(uint256 farmID, uint256 allocPoints_) external;\\n\\n    /**\\n     * @notice Sets the reward distribution across all farms.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param rewardPerSecond_ Amount of reward to distribute per second.\\n     */\\n    function setRewardPerSecond(uint256 rewardPerSecond_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IGovernable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n/**\\n * @title IGovernable\\n * @author solace.fi\\n * @notice Enforces access control for important functions to [**governor**](/docs/protocol/governance).\\n *\\n * Many contracts contain functionality that should only be accessible to a privileged user. The most common access control pattern is [OpenZeppelin's `Ownable`](https://docs.openzeppelin.com/contracts/4.x/access-control#ownership-and-ownable). We instead use `Governable` with a few key differences:\\n * - Transferring the governance role is a two step process. The current governance must [`setPendingGovernance(pendingGovernance_)`](#setPendingGovernance) then the new governance must [`acceptGovernance()`](#acceptgovernance). This is to safeguard against accidentally setting ownership to the wrong address and locking yourself out of your contract.\\n * - `governance` is a constructor argument instead of `msg.sender`. This is especially useful when deploying contracts via a [`SingletonFactory`](./ISingletonFactory).\\n * - We use `lockGovernance()` instead of `renounceOwnership()`. `renounceOwnership()` is a prerequisite for the reinitialization bug because it sets `owner = address(0x0)`. We also use the `governanceIsLocked()` flag.\\n */\\ninterface IGovernable {\\n\\n    /***************************************\\n    EVENTS\\n    ***************************************/\\n\\n    /// @notice Emitted when pending Governance is set.\\n    event GovernancePending(address pendingGovernance);\\n    /// @notice Emitted when Governance is set.\\n    event GovernanceTransferred(address oldGovernance, address newGovernance);\\n    /// @notice Emitted when Governance is locked.\\n    event GovernanceLocked();\\n\\n    /***************************************\\n    VIEW FUNCTIONS\\n    ***************************************/\\n\\n    /// @notice Address of the current governor.\\n    function governance() external view returns (address);\\n\\n    /// @notice Address of the governor to take over.\\n    function pendingGovernance() external view returns (address);\\n\\n    /// @notice Returns true if governance is locked.\\n    function governanceIsLocked() external view returns (bool);\\n\\n    /***************************************\\n    MUTATORS\\n    ***************************************/\\n\\n    /**\\n     * @notice Initiates transfer of the governance role to a new governor.\\n     * Transfer is not complete until the new governor accepts the role.\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     * @param pendingGovernance_ The new governor.\\n     */\\n    function setPendingGovernance(address pendingGovernance_) external;\\n\\n    /**\\n     * @notice Accepts the governance role.\\n     * Can only be called by the new governor.\\n     */\\n    function acceptGovernance() external;\\n\\n    /**\\n     * @notice Permanently locks this contract's governance role and any of its functions that require the role.\\n     * This action cannot be reversed.\\n     * Before you call it, ask yourself:\\n     *   - Is the contract self-sustaining?\\n     *   - Is there a chance you will need governance privileges in the future?\\n     * Can only be called by the current [**governor**](/docs/protocol/governance).\\n     */\\n    function lockGovernance() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC721Enhanced.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// code borrowed from OpenZeppelin and @uniswap/v3-periphery\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @title ERC721Enhanced\\n * @author solace.fi\\n * @notice An extension of `ERC721`.\\n *\\n * The base is OpenZeppelin's `ERC721Enumerable` which also includes the `Metadata` extension. This extension includes simpler transfers, gasless approvals, and better enumeration.\\n */\\ninterface IERC721Enhanced is IERC721Enumerable {\\n\\n    /***************************************\\n    SIMPLER TRANSFERS\\n    ***************************************/\\n\\n    /**\\n     * @notice Transfers `tokenID` from `msg.sender` to `to`.\\n     * @dev This was excluded from the official `ERC721` standard in favor of `transferFrom(address from, address to, uint256 tokenID)`. We elect to include it.\\n     * @param to The receipient of the token.\\n     * @param tokenID The token to transfer.\\n     */\\n    function transfer(address to, uint256 tokenID) external;\\n\\n    /**\\n     * @notice Safely transfers `tokenID` from `msg.sender` to `to`.\\n     * @dev This was excluded from the official `ERC721` standard in favor of `safeTransferFrom(address from, address to, uint256 tokenID)`. We elect to include it.\\n     * @param to The receipient of the token.\\n     * @param tokenID The token to transfer.\\n     */\\n    function safeTransfer(address to, uint256 tokenID) external;\\n\\n    /***************************************\\n    GASLESS APPROVALS\\n    ***************************************/\\n\\n    /**\\n     * @notice Approve of a specific `tokenID` for spending by `spender` via signature.\\n     * @param spender The account that is being approved.\\n     * @param tokenID The ID of the token that is being approved for spending.\\n     * @param deadline The deadline timestamp by which the call must be mined for the approve to work.\\n     * @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`.\\n     * @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`.\\n     * @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`.\\n     */\\n    function permit(\\n        address spender,\\n        uint256 tokenID,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Returns the current nonce for `tokenID`. This value must be\\n     * included whenever a signature is generated for `permit`.\\n     * Every successful call to `permit` increases ``tokenID``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     * @param tokenID ID of the token to request nonce.\\n     * @return nonce Nonce of the token.\\n     */\\n    function nonces(uint256 tokenID) external view returns (uint256 nonce);\\n\\n    /**\\n     * @notice The permit typehash used in the `permit` signature.\\n     * @return typehash The typehash for the `permit`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function PERMIT_TYPEHASH() external view returns (bytes32 typehash);\\n\\n    /**\\n     * @notice The domain separator used in the encoding of the signature for `permit`, as defined by `EIP712`.\\n     * @return seperator The domain seperator for `permit`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32 seperator);\\n\\n    /***************************************\\n    BETTER ENUMERATION\\n    ***************************************/\\n\\n    /**\\n     * @notice Lists all tokens.\\n     * Order not specified.\\n     * @dev This function is more useful off chain than on chain.\\n     * @return tokenIDs The list of token IDs.\\n     */\\n    function listTokens() external view returns (uint256[] memory tokenIDs);\\n\\n    /**\\n     * @notice Lists the tokens owned by `owner`.\\n     * Order not specified.\\n     * @dev This function is more useful off chain than on chain.\\n     * @return tokenIDs The list of token IDs.\\n     */\\n    function listTokensOfOwner(address owner) external view returns (uint256[] memory tokenIDs);\\n\\n    /**\\n     * @notice Determines if a token exists or not.\\n     * @param tokenID The ID of the token to query.\\n     * @return status True if the token exists, false if it doesn't.\\n     */\\n    function exists(uint256 tokenID) external view returns (bool status);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"optionsFarming_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"farmID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"}],\"name\":\"FarmRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GovernanceLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernance\",\"type\":\"address\"}],\"name\":\"GovernancePending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGovernance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"RewardsSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"farmID\",\"type\":\"uint256\"}],\"name\":\"allocPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"createOption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"farmID\",\"type\":\"uint256\"}],\"name\":\"farmAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"}],\"name\":\"farmIndices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmOptionMulti\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceIsLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdateFarms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numFarms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoints_\",\"type\":\"uint256\"}],\"name\":\"registerFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"farmID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"farmID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoints_\",\"type\":\"uint256\"}],\"name\":\"setAllocPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingGovernance_\",\"type\":\"address\"}],\"name\":\"setPendingGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond_\",\"type\":\"uint256\"}],\"name\":\"setRewardPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FarmController","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"000000000000000000000000501ace0e8d16b92236763e2ded7ae3bc2dffa276000000000000000000000000501aceb9772d1efe5f8ea46fe5004fad039e067a000000000000000000000000000000000000000000000000100fefe7a2eca128","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}