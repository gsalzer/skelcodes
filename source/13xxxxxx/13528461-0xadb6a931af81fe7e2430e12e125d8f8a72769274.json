{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/bloq/IAddressList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressList {\\n    function add(address a) external returns (bool);\\n\\n    function addValue(address a, uint256 v) external returns (bool);\\n\\n    function addMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function addValueMulti(address[] calldata addrs, uint256[] calldata values) external returns (uint256);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function removeMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function at(uint256 index) external view returns (address, uint256);\\n\\n    function length() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vesper/IVesperPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../bloq/IAddressList.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function deposit() external payable;\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function poolRewards() external returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function resetApproval() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawETH(uint256 _amount) external;\\n\\n    function whitelistedWithdraw(uint256 _amount) external;\\n\\n    function governor() external view returns (address);\\n\\n    function keepers() external view returns (IAddressList);\\n\\n    function maintainers() external view returns (IAddressList);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee,\\n            uint256 _debtRate,\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio\\n        );\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/pool/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/// @title Errors library\\nlibrary Errors {\\n    string public constant INVALID_COLLATERAL_AMOUNT = \\\"1\\\"; // Collateral must be greater than 0\\n    string public constant INVALID_SHARE_AMOUNT = \\\"2\\\"; // Share must be greater than 0\\n    string public constant INVALID_INPUT_LENGTH = \\\"3\\\"; // Input array length must be greater than 0\\n    string public constant INPUT_LENGTH_MISMATCH = \\\"4\\\"; // Input array length mismatch with another array length\\n    string public constant NOT_WHITELISTED_ADDRESS = \\\"5\\\"; // Caller is not whitelisted to withdraw without fee\\n    string public constant MULTI_TRANSFER_FAILED = \\\"6\\\"; // Multi transfer of tokens has failed\\n    string public constant FEE_COLLECTOR_NOT_SET = \\\"7\\\"; // Fee Collector is not set\\n    string public constant NOT_ALLOWED_TO_SWEEP = \\\"8\\\"; // Token is not allowed to sweep\\n    string public constant INSUFFICIENT_BALANCE = \\\"9\\\"; // Insufficient balance to performs operations to follow\\n    string public constant INPUT_ADDRESS_IS_ZERO = \\\"10\\\"; // Input address is zero\\n    string public constant FEE_LIMIT_REACHED = \\\"11\\\"; // Fee must be less than MAX_BPS\\n    string public constant ALREADY_INITIALIZED = \\\"12\\\"; // Data structure, contract, or logic already initialized and can not be called again\\n    string public constant ADD_IN_LIST_FAILED = \\\"13\\\"; // Cannot add address in address list\\n    string public constant REMOVE_FROM_LIST_FAILED = \\\"14\\\"; // Cannot remove address from address list\\n    string public constant STRATEGY_IS_ACTIVE = \\\"15\\\"; // Strategy is already active, an inactive strategy is required\\n    string public constant STRATEGY_IS_NOT_ACTIVE = \\\"16\\\"; // Strategy is not active, an active strategy is required\\n    string public constant INVALID_STRATEGY = \\\"17\\\"; // Given strategy is not a strategy of this pool\\n    string public constant DEBT_RATIO_LIMIT_REACHED = \\\"18\\\"; // Debt ratio limit reached. It must be less than MAX_BPS\\n    string public constant TOTAL_DEBT_IS_NOT_ZERO = \\\"19\\\"; // Strategy total debt must be 0\\n    string public constant LOSS_TOO_HIGH = \\\"20\\\"; // Strategy reported loss must be less than current debt\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolAccountant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\n\\ncontract PoolAccountantStorageV1 {\\n    address public pool; // Address of Vesper pool\\n    uint256 public totalDebtRatio; // Total debt ratio. This will keep some buffer amount in pool\\n    uint256 public totalDebt; // Total debt. Sum of debt of all strategies.\\n    address[] public strategies; // Array of strategies\\n    address[] public withdrawQueue; // Array of strategy in the order in which funds should be withdrawn.\\n\\n    struct StrategyConfig {\\n        bool active;\\n        uint256 interestFee; // Strategy fee\\n        uint256 debtRate; // Strategy can not borrow large amount in short durations. Can set big limit for trusted strategy\\n        uint256 lastRebalance; // Timestamp of last rebalance\\n        uint256 totalDebt; // Total outstanding debt strategy has\\n        uint256 totalLoss; // Total loss that strategy has realized\\n        uint256 totalProfit; // Total gain that strategy has realized\\n        uint256 debtRatio; // % of asset allocation\\n    }\\n\\n    mapping(address => StrategyConfig) public strategy; // Strategy address to its configuration\\n}\\n\\n/// @title Accountant for Vesper pools which keep records of strategies.\\ncontract PoolAccountant is Initializable, PoolAccountantStorageV1, Context {\\n    using SafeERC20 for IERC20;\\n\\n    string public constant VERSION = \\\"3.0.5\\\";\\n    uint256 public constant MAX_BPS = 10_000;\\n\\n    event EarningReported(\\n        address indexed strategy,\\n        uint256 profit,\\n        uint256 loss,\\n        uint256 payback,\\n        uint256 strategyDebt,\\n        uint256 poolDebt,\\n        uint256 creditLine\\n    );\\n    event StrategyAdded(address indexed strategy, uint256 interestFee, uint256 debtRatio, uint256 debtRate);\\n    event StrategyMigrated(\\n        address indexed oldStrategy,\\n        address indexed newStrategy,\\n        uint256 interestFee,\\n        uint256 debtRatio,\\n        uint256 debtRate\\n    );\\n    event UpdatedInterestFee(address indexed strategy, uint256 interestFee);\\n    event UpdatedStrategyDebtParams(address indexed strategy, uint256 debtRatio, uint256 debtRate);\\n\\n    /**\\n     * @dev This init function meant to be called after proxy deployment.\\n     * @dev DO NOT CALL it with proxy deploy\\n     * @param _pool Address of Vesper pool proxy\\n     */\\n    function init(address _pool) public initializer {\\n        require(_pool != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\\n        pool = _pool;\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(IVesperPool(pool).governor() == _msgSender(), \\\"not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(IVesperPool(pool).keepers().contains(_msgSender()), \\\"not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyMaintainer() {\\n        require(IVesperPool(pool).maintainers().contains(_msgSender()), \\\"not-a-maintainer\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(pool == _msgSender(), \\\"not-a-pool\\\");\\n        _;\\n    }\\n\\n    ////////////////////////////// Only Governor //////////////////////////////\\n\\n    /**\\n     * @notice Add strategy. Once strategy is added it can call rebalance and\\n     * borrow fund from pool and invest that fund in provider/lender.\\n     * @param _strategy Strategy address\\n     * @param _interestFee Fee on earnings from this strategy\\n     * @param _debtRatio Pool fund allocation to this strategy\\n     * @param _debtRate Debt rate per block\\n     */\\n    function addStrategy(\\n        address _strategy,\\n        uint256 _interestFee,\\n        uint256 _debtRatio,\\n        uint256 _debtRate\\n    ) public onlyGovernor {\\n        require(_strategy != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\\n        require(!strategy[_strategy].active, Errors.STRATEGY_IS_ACTIVE);\\n        totalDebtRatio = totalDebtRatio + _debtRatio;\\n        require(totalDebtRatio <= MAX_BPS, Errors.DEBT_RATIO_LIMIT_REACHED);\\n        require(_interestFee <= MAX_BPS, Errors.FEE_LIMIT_REACHED);\\n        StrategyConfig memory newStrategy =\\n            StrategyConfig({\\n                active: true,\\n                interestFee: _interestFee,\\n                debtRatio: _debtRatio,\\n                totalDebt: 0,\\n                totalProfit: 0,\\n                totalLoss: 0,\\n                debtRate: _debtRate,\\n                lastRebalance: block.number\\n            });\\n        strategy[_strategy] = newStrategy;\\n        strategies.push(_strategy);\\n        withdrawQueue.push(_strategy);\\n        emit StrategyAdded(_strategy, _interestFee, _debtRatio, _debtRate);\\n    }\\n\\n    /**\\n     * @dev Revoke and remove strategy from array. Update withdraw queue.\\n     * Withdraw queue order should not change after remove.\\n     * Strategy can be removed only after it has paid all debt.\\n     * Use migrate strategy if debt is not paid and want to upgrade strategy.\\n     */\\n    function removeStrategy(uint256 _index) external onlyGovernor {\\n        address _strategy = strategies[_index];\\n        require(strategy[_strategy].active, Errors.STRATEGY_IS_NOT_ACTIVE);\\n        require(strategy[_strategy].totalDebt == 0, Errors.TOTAL_DEBT_IS_NOT_ZERO);\\n        totalDebtRatio = totalDebtRatio - strategy[_strategy].debtRatio;\\n        delete strategy[_strategy];\\n        strategies[_index] = strategies[strategies.length - 1];\\n        strategies.pop();\\n        address[] memory _withdrawQueue = new address[](strategies.length);\\n        uint256 j;\\n        // After above update, withdrawQueue.length > strategies.length\\n        for (uint256 i = 0; i < withdrawQueue.length; i++) {\\n            if (withdrawQueue[i] != _strategy) {\\n                _withdrawQueue[j] = withdrawQueue[i];\\n                j++;\\n            }\\n        }\\n        withdrawQueue = _withdrawQueue;\\n    }\\n\\n    /**\\n     * @notice Update interest fee of strategy\\n     * @param _strategy Strategy address for which interest fee is being updated\\n     * @param _interestFee New interest fee\\n     */\\n    function updateInterestFee(address _strategy, uint256 _interestFee) external onlyGovernor {\\n        require(strategy[_strategy].active, Errors.STRATEGY_IS_NOT_ACTIVE);\\n        require(_interestFee <= MAX_BPS, Errors.FEE_LIMIT_REACHED);\\n        strategy[_strategy].interestFee = _interestFee;\\n        emit UpdatedInterestFee(_strategy, _interestFee);\\n    }\\n\\n    ///////////////////////////// Only Keeper /////////////////////////////\\n    /**\\n     * @notice Update debtRate per block.\\n     * @param _strategy Strategy address for which debt rate is being updated\\n     * @param _debtRate New debt rate\\n     */\\n    function updateDebtRate(address _strategy, uint256 _debtRate) external onlyKeeper {\\n        require(strategy[_strategy].active, Errors.STRATEGY_IS_NOT_ACTIVE);\\n        strategy[_strategy].debtRate = _debtRate;\\n        emit UpdatedStrategyDebtParams(_strategy, strategy[_strategy].debtRatio, _debtRate);\\n    }\\n\\n    /**\\n     * @dev Transfer given ERC20 token to pool\\n     * @param _fromToken Token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external virtual onlyKeeper {\\n        IERC20(_fromToken).safeTransfer(pool, IERC20(_fromToken).balanceOf(address(this)));\\n    }\\n\\n    ///////////////////////////// Only Maintainer /////////////////////////////\\n    /**\\n     * @notice Update debt ratio.\\n     * @dev A strategy is retired when debtRatio is 0\\n     * @param _strategy Strategy address for which debt ratio is being updated\\n     * @param _debtRatio New debt ratio\\n     */\\n    function updateDebtRatio(address _strategy, uint256 _debtRatio) external onlyMaintainer {\\n        require(strategy[_strategy].active, Errors.STRATEGY_IS_NOT_ACTIVE);\\n        totalDebtRatio = totalDebtRatio - strategy[_strategy].debtRatio + _debtRatio;\\n        require(totalDebtRatio <= MAX_BPS, Errors.DEBT_RATIO_LIMIT_REACHED);\\n        strategy[_strategy].debtRatio = _debtRatio;\\n        emit UpdatedStrategyDebtParams(_strategy, _debtRatio, strategy[_strategy].debtRate);\\n    }\\n\\n    /**\\n     * @notice Update withdraw queue. Withdraw queue is list of strategy in the order in which\\n     * funds should be withdrawn.\\n     * @dev Pool always keep some buffer amount to satisfy withdrawal request, any withdrawal\\n     * request higher than buffer will withdraw from withdraw queue. So withdrawQueue[0] will\\n     * be the first strategy where withdrawal request will be send.\\n     * @param _withdrawQueue Ordered list of strategy.\\n     */\\n    function updateWithdrawQueue(address[] memory _withdrawQueue) external onlyMaintainer {\\n        uint256 _length = _withdrawQueue.length;\\n        require(_length == withdrawQueue.length && _length == strategies.length, Errors.INPUT_LENGTH_MISMATCH);\\n        for (uint256 i = 0; i < _length; i++) {\\n            require(strategy[_withdrawQueue[i]].active, Errors.STRATEGY_IS_NOT_ACTIVE);\\n        }\\n        withdrawQueue = _withdrawQueue;\\n    }\\n\\n    //////////////////////////////// Only Pool ////////////////////////////////\\n\\n    /**\\n     * @notice Migrate existing strategy to new strategy.\\n     * @dev Migrating strategy aka old and new strategy should be of same type.\\n     * @dev New strategy will replace old strategy in strategy mapping,\\n     * strategies array, withdraw queue.\\n     * @param _old Address of strategy being migrated\\n     * @param _new Address of new strategy\\n     */\\n    function migrateStrategy(address _old, address _new) external onlyPool {\\n        require(strategy[_old].active, Errors.STRATEGY_IS_NOT_ACTIVE);\\n        require(!strategy[_new].active, Errors.STRATEGY_IS_ACTIVE);\\n        StrategyConfig memory _newStrategy =\\n            StrategyConfig({\\n                active: true,\\n                interestFee: strategy[_old].interestFee,\\n                debtRatio: strategy[_old].debtRatio,\\n                totalDebt: strategy[_old].totalDebt,\\n                totalProfit: 0,\\n                totalLoss: 0,\\n                debtRate: strategy[_old].debtRate,\\n                lastRebalance: strategy[_old].lastRebalance\\n            });\\n        delete strategy[_old];\\n        strategy[_new] = _newStrategy;\\n\\n        // Strategies and withdrawQueue has same length but we still want\\n        // to iterate over them in different loop.\\n        for (uint256 i = 0; i < strategies.length; i++) {\\n            if (strategies[i] == _old) {\\n                strategies[i] = _new;\\n                break;\\n            }\\n        }\\n        for (uint256 i = 0; i < withdrawQueue.length; i++) {\\n            if (withdrawQueue[i] == _old) {\\n                withdrawQueue[i] = _new;\\n                break;\\n            }\\n        }\\n        emit StrategyMigrated(\\n            _old,\\n            _new,\\n            strategy[_new].interestFee,\\n            strategy[_new].debtRatio,\\n            strategy[_new].debtRate\\n        );\\n    }\\n\\n    /**\\n     * @dev Strategy call this in regular interval.\\n     * @param _profit yield generated by strategy. Strategy get performance fee on this amount\\n     * @param _loss  Reduce debt ,also reduce debtRatio, increase loss in record.\\n     * @param _payback strategy willing to payback outstanding above debtLimit. no performance fee on this amount.\\n     *  when governance has reduced debtRatio of strategy, strategy will report profit and payback amount separately.\\n     */\\n    function reportEarning(\\n        address _strategy,\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    )\\n        external\\n        onlyPool\\n        returns (\\n            uint256 _actualPayback,\\n            uint256 _creditLine,\\n            uint256 _fee\\n        )\\n    {\\n        require(strategy[_strategy].active, Errors.STRATEGY_IS_NOT_ACTIVE);\\n        require(IVesperPool(pool).token().balanceOf(_strategy) >= (_profit + _payback), Errors.INSUFFICIENT_BALANCE);\\n        if (_loss != 0) {\\n            _reportLoss(_strategy, _loss);\\n        }\\n\\n        uint256 _overLimitDebt = _excessDebt(_strategy);\\n        _actualPayback = _min(_overLimitDebt, _payback);\\n        if (_actualPayback != 0) {\\n            strategy[_strategy].totalDebt -= _actualPayback;\\n            totalDebt -= _actualPayback;\\n        }\\n        _creditLine = _availableCreditLimit(_strategy);\\n        if (_creditLine != 0) {\\n            strategy[_strategy].totalDebt += _creditLine;\\n            totalDebt += _creditLine;\\n        }\\n        if (_profit != 0) {\\n            strategy[_strategy].totalProfit += _profit;\\n            _fee = (_profit * strategy[_strategy].interestFee) / MAX_BPS;\\n        }\\n        strategy[_strategy].lastRebalance = block.number;\\n        emit EarningReported(\\n            _strategy,\\n            _profit,\\n            _loss,\\n            _actualPayback,\\n            strategy[_strategy].totalDebt,\\n            totalDebt,\\n            _creditLine\\n        );\\n        return (_actualPayback, _creditLine, _fee);\\n    }\\n\\n    /**\\n     * @notice Update strategy loss.\\n     * @param _strategy Strategy which incur loss\\n     * @param _loss Loss of strategy\\n     */\\n    function reportLoss(address _strategy, uint256 _loss) external onlyPool {\\n        require(strategy[_strategy].active, Errors.STRATEGY_IS_NOT_ACTIVE);\\n        _reportLoss(_strategy, _loss);\\n    }\\n\\n    /**\\n     * @notice Decrease debt of strategy, also decrease totalDebt\\n     * @dev In case of withdraw from strategy, pool will decrease debt by amount withdrawn\\n     * @param _strategy Strategy Address\\n     * @param _decreaseBy Amount by which strategy debt will be decreased\\n     */\\n    function decreaseDebt(address _strategy, uint256 _decreaseBy) external onlyPool {\\n        // A strategy may send more than its debt. This should never fail\\n        _decreaseBy = _min(strategy[_strategy].totalDebt, _decreaseBy);\\n        strategy[_strategy].totalDebt -= _decreaseBy;\\n        totalDebt -= _decreaseBy;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Get available credit limit of strategy. This is the amount strategy can borrow from pool\\n     * @dev Available credit limit is calculated based on current debt of pool and strategy, current debt limit of pool and strategy.\\n     * credit available = min(pool's debt limit, strategy's debt limit, max debt per rebalance)\\n     * when some strategy do not pay back outstanding debt, this impact credit line of other strategy if totalDebt of pool >= debtLimit of pool\\n     * @param _strategy Strategy address\\n     */\\n    function availableCreditLimit(address _strategy) external view returns (uint256) {\\n        return _availableCreditLimit(_strategy);\\n    }\\n\\n    /**\\n     * @notice Debt above current debt limit\\n     * @param _strategy Address of strategy\\n     */\\n    function excessDebt(address _strategy) external view returns (uint256) {\\n        return _excessDebt(_strategy);\\n    }\\n\\n    /// @notice Return strategies array\\n    function getStrategies() external view returns (address[] memory) {\\n        return strategies;\\n    }\\n\\n    /// @notice Return withdrawQueue\\n    function getWithdrawQueue() external view returns (address[] memory) {\\n        return withdrawQueue;\\n    }\\n\\n    /**\\n     * @notice Get total debt of given strategy\\n     * @param _strategy Strategy address\\n     */\\n    function totalDebtOf(address _strategy) external view returns (uint256) {\\n        return strategy[_strategy].totalDebt;\\n    }\\n\\n    /**\\n     * @dev When strategy report loss, its debtRatio decreases to get fund back quickly.\\n     * Reduction is debt ratio is reduction in credit limit\\n     */\\n    function _reportLoss(address _strategy, uint256 _loss) internal {\\n        uint256 _currentDebt = strategy[_strategy].totalDebt;\\n        require(_currentDebt >= _loss, Errors.LOSS_TOO_HIGH);\\n        strategy[_strategy].totalLoss += _loss;\\n        strategy[_strategy].totalDebt -= _loss;\\n        totalDebt -= _loss;\\n        uint256 _deltaDebtRatio =\\n            _min((_loss * MAX_BPS) / IVesperPool(pool).totalValue(), strategy[_strategy].debtRatio);\\n        strategy[_strategy].debtRatio -= _deltaDebtRatio;\\n        totalDebtRatio -= _deltaDebtRatio;\\n    }\\n\\n    function _availableCreditLimit(address _strategy) internal view returns (uint256) {\\n        if (IVesperPool(pool).stopEverything()) {\\n            return 0;\\n        }\\n        uint256 _totalValue = IVesperPool(pool).totalValue();\\n        uint256 _maxDebt = (strategy[_strategy].debtRatio * _totalValue) / MAX_BPS;\\n        uint256 _currentDebt = strategy[_strategy].totalDebt;\\n        if (_currentDebt >= _maxDebt) {\\n            return 0;\\n        }\\n        uint256 _poolDebtLimit = (totalDebtRatio * _totalValue) / MAX_BPS;\\n        if (totalDebt >= _poolDebtLimit) {\\n            return 0;\\n        }\\n        uint256 _available = _maxDebt - _currentDebt;\\n        _available = _min(_min(IVesperPool(pool).tokensHere(), _available), _poolDebtLimit - totalDebt);\\n        _available = _min(\\n            (block.number - strategy[_strategy].lastRebalance) * strategy[_strategy].debtRate,\\n            _available\\n        );\\n        return _available;\\n    }\\n\\n    function _excessDebt(address _strategy) internal view returns (uint256) {\\n        uint256 _currentDebt = strategy[_strategy].totalDebt;\\n        if (IVesperPool(pool).stopEverything()) {\\n            return _currentDebt;\\n        }\\n        uint256 _maxDebt = (strategy[_strategy].debtRatio * IVesperPool(pool).totalValue()) / MAX_BPS;\\n        return _currentDebt > _maxDebt ? (_currentDebt - _maxDebt) : 0;\\n    }\\n\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payback\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategyDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creditLine\",\"type\":\"uint256\"}],\"name\":\"EarningReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRate\",\"type\":\"uint256\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldStrategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newStrategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRate\",\"type\":\"uint256\"}],\"name\":\"StrategyMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedInterestFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRate\",\"type\":\"uint256\"}],\"name\":\"UpdatedStrategyDebtParams\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_interestFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtRate\",\"type\":\"uint256\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"availableCreditLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decreaseBy\",\"type\":\"uint256\"}],\"name\":\"decreaseDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"excessDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawQueue\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"migrateStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"name\":\"reportEarning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_actualPayback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_creditLine\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"}],\"name\":\"reportLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"interestFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRebalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLoss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"totalDebtOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtRate\",\"type\":\"uint256\"}],\"name\":\"updateDebtRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtRatio\",\"type\":\"uint256\"}],\"name\":\"updateDebtRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_interestFee\",\"type\":\"uint256\"}],\"name\":\"updateInterestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_withdrawQueue\",\"type\":\"address[]\"}],\"name\":\"updateWithdrawQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawQueue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PoolAccountant","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}