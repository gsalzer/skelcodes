{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Harvest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@jpegmint/contracts/harvest/ERC721Harvest.sol\\\";\\n\\n/**____________________________________________________________________\\n|   ________________________________________________________________   |\\n|  |                                                                |  |\\n|  |                                                                |  |\\n|  |                           ▓▓                ▒▒░░░░░░           |  |\\n|  |                           ▓▓            ░░    ▒▒░░░░           |  |\\n|  |                         ░░▓▓            ░░░░  ░░               |  |\\n|  |                         ░░▓▓      ░░░░░░  ░░░░▒▒░░▒▒           |  |\\n|  |                         ░░▓▓          ░░  ▒▒  ░░▒▒▒▒           |  |\\n|  |       ▓▓▓▓            ░░░░▓▓  ░░  ░░░░░░░░░░▒▒░░               |  |\\n|  |         ▓▓██▓▓        ░░░░░░    ░░    ░░  ▒▒░░▒▒               |  |\\n|  |           ▓▓██▓▓      ░░░░░░░░░░░░░░░░▒▒▒▒░░▒▒                 |  |\\n|  |           ▓▓██▓▓▓▓  ░░░░░░  ░░  ░░    ▒▒░░▒▒▒▒                 |  |\\n|  |             ██▓▓▓▓  ░░▒▒  ░░░░▒▒░░▒▒▒▒░░▒▒▒▒                   |  |\\n|  |             ▓▓██▓▓▓▓░░  ░░░░▒▒░░▒▒    ▒▒░░▒▒                   |  |\\n|  |             ▓▓██▓▓▓▓  ░░░░  ░░▒▒▒▒▒▒▒▒░░▒▒                     |  |\\n|  |               ▓▓▓▓▓▓▒▒  ▒▒▒▒▒▒  ▒▒▒▒▒▒▒▒▒▒                     |  |\\n|  |               ▓▓▓▓▓▓░░  ▒▒░░▒▒  ▒▒▒▒▒▒▒▒▒▒                     |  |\\n|  |               ▓▓▓▓▓▓  ▒▒▒▒  ▒▒░░▒▒░░░░▒▒                       |  |\\n|  |             ▓▓██▓▓░░▒▒░░▒▒▒▒▒▒▒▒░░▒▒▒▒██████▓▓                 |  |\\n|  |             ▓▓██▓▓░░▒▒▒▒░░▒▒░░▒▒▒▒▒▒▒▒██▓▓▓▓▓▓▓▓▓▓▓▓           |  |\\n|  |             ▓▓██▓▓░░▒▒▒▒▒▒▒▒▒▒░░▒▒████▓▓████▓▓▓▓▓▓▓▓▓▓         |  |\\n|  |             ▓▓██▓▓████▒▒▒▒░░▒▒▒▒████████▓▓▓▓        ▓▓         |  |\\n|  |             ▓▓██▓▓████▒▒▒▒▒▒▒▒████▓▓▓▓                         |  |\\n|  |               ▓▓██▓▓██▒▒▒▒▒▒████                               |  |\\n|  |               ▓▓██▓▓██▒▒████                                   |  |\\n|  |                 ▓▓██▓▓██                                       |  |\\n|  |                                                                |  |\\n|  |                                                                |  |\\n|  |    ██╗  ██╗ █████╗ ██████╗ ██╗   ██╗███████╗███████╗████████╗  |  |\\n|  |    ██║  ██║██╔══██╗██╔══██╗██║   ██║██╔════╝██╔════╝╚══██╔══╝  |  |\\n|  |    ███████║███████║██████╔╝██║   ██║█████╗  ███████╗   ██║     |  |\\n|  |    ██╔══██║██╔══██║██╔══██╗╚██╗ ██╔╝██╔══╝  ╚════██║   ██║     |  |\\n|  |    ██║  ██║██║  ██║██║  ██║ ╚████╔╝ ███████╗███████║   ██║     |  |\\n|  |    ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝  ╚═══╝  ╚══════╝╚══════╝   ╚═╝     |  |\\n|  |________________________________________________________________|  |\\n|_____________________________________________________________________*/\\n\\n                 contract Harvest is ERC721Harvest {}                    \\n\"\r\n    },\r\n    \"@jpegmint/contracts/harvest/ERC721Harvest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\ncontract ERC721Harvest is IERC721Receiver {\\n    \\n// Amount per token purchased\\n    uint256 public constant AMOUNT_PER_TOKEN = 1 gwei;\\n\\n// Contract owner\\n    address public owner;\\n\\n// Initialization\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    receive() external payable {}\\n\\n// Ownable\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"X\\\");\\n        _;\\n    }\\n    \\n    function transferOwnership(address newOwner) external onlyOwner {\\n        owner = newOwner;\\n    }\\n\\n// Harvest\\n\\n    modifier hasAvailableBalance(uint256 howMany) {\\n        require(address(this).balance > AMOUNT_PER_TOKEN * howMany, \\\"$\\\");\\n        _;\\n    }\\n\\n    function sellTokenIds(address erc721Contract, uint256[] memory tokenIds)\\n        external\\n        hasAvailableBalance(tokenIds.length)\\n    {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _receiveToken(erc721Contract, tokenIds[i]);\\n        }\\n\\n        _payForTransaction(msg.sender, tokenIds.length);\\n    }\\n\\n    function onERC721Received(address operator, address, uint256, bytes calldata)\\n        external\\n        override\\n        hasAvailableBalance(1)\\n        returns (bytes4)\\n    {\\n        _payForTransaction(operator, 1);\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function _receiveToken(address erc721Contract, uint256 tokenId) internal {\\n        IERC721(erc721Contract).transferFrom(msg.sender, address(this), tokenId);\\n    }\\n\\n    function _payForTransaction(address to, uint256 howMany) internal {\\n        (bool sent, ) = payable(to).call{ value: AMOUNT_PER_TOKEN * howMany }(\\\"\\\");\\n        require(sent, \\\"$\\\");\\n    }\\n\\n// Recover\\n\\n    function recover(address erc721Contract, uint256 tokenId, address to) external onlyOwner {\\n        IERC721(erc721Contract).transferFrom(address(this), to, tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"AMOUNT_PER_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"sellTokenIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Harvest","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}