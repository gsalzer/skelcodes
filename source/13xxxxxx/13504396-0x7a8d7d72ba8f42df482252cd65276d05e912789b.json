{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title IsContractBatcher\r\n * @dev Identifies whether an address is contract\r\n */\r\ncontract IsContractBatcher {\r\n    \r\n    /**\r\n     * @dev Check whether an address is a contract\r\n     * @param _addr an Ethereum address\r\n     * @return bool true if _addr is a contract\r\n     */\r\n    function isContract(address _addr) public view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(_addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev batch isContract\r\n     * @param _addrs an array of Ethereum addresses\r\n     * @return blockNumber block number \r\n     * @return areContracts an array of isContract calls corresponding to each address in _addrs\r\n     */\r\n    function isContractBatch(address[] memory _addrs) public view returns (uint256 blockNumber, bool[] memory areContracts) {\r\n        blockNumber = block.number;\r\n        \r\n        uint numberOfAddresses = _addrs.length;\r\n        areContracts = new bool[](numberOfAddresses);\r\n        \r\n        for(uint256 i = 0; i < numberOfAddresses; i++) {\r\n            areContracts[i] = isContract(_addrs[i]);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"isContractBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"areContracts\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"IsContractBatcher","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0820b5c1b2229cb68a4d80f94e83a6f99e36a93ecdd38c8d03d061214031c5f1"}]}