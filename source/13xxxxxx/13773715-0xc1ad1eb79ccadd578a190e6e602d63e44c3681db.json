{"status":"1","message":"OK","result":[{"SourceCode":"// File contracts/timelib.sol\r\n\r\n//SPDX-License-Identifier:  MIT AND BSD-4-Clause\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// BokkyPooBah's DateTime Library v1.01\r\n//\r\n// A gas-efficient Solidity date and time library\r\n//\r\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\r\n//\r\n// Tested date range 1970/01/01 to 2345/12/31\r\n//\r\n// Conventions:\r\n// Unit      | Range         | Notes\r\n// :-------- |:-------------:|:-----\r\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\r\n// year      | 1970 ... 2345 |\r\n// month     | 1 ... 12      |\r\n// day       | 1 ... 31      |\r\n// hour      | 0 ... 23      |\r\n// minute    | 0 ... 59      |\r\n// second    | 0 ... 59      |\r\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\r\n//\r\n//\r\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary BokkyPooBahsDateTimeLibrary {\r\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\r\n    uint256 constant SECONDS_PER_MINUTE = 60;\r\n    int256 constant OFFSET19700101 = 2440588;\r\n\r\n    uint256 constant DOW_MON = 1;\r\n    uint256 constant DOW_TUE = 2;\r\n    uint256 constant DOW_WED = 3;\r\n    uint256 constant DOW_THU = 4;\r\n    uint256 constant DOW_FRI = 5;\r\n    uint256 constant DOW_SAT = 6;\r\n    uint256 constant DOW_SUN = 7;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Calculate the number of days from 1970/01/01 to year/month/day using\r\n    // the date conversion algorithm from\r\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\r\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\r\n    //\r\n    // days = day\r\n    //      - 32075\r\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\r\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\r\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\r\n    //      - offset\r\n    // ------------------------------------------------------------------------\r\n    function _daysFromDate(\r\n        uint256 year,\r\n        uint256 month,\r\n        uint256 day\r\n    ) internal pure returns (uint256 _days) {\r\n        require(year >= 1970);\r\n        int256 _year = int256(year);\r\n        int256 _month = int256(month);\r\n        int256 _day = int256(day);\r\n\r\n        int256 __days = _day -\r\n            32075 +\r\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\r\n            4 +\r\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\r\n            12 -\r\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\r\n            4 -\r\n            OFFSET19700101;\r\n\r\n        _days = uint256(__days);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Calculate year/month/day from the number of days since 1970/01/01 using\r\n    // the date conversion algorithm from\r\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\r\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\r\n    //\r\n    // int L = days + 68569 + offset\r\n    // int N = 4 * L / 146097\r\n    // L = L - (146097 * N + 3) / 4\r\n    // year = 4000 * (L + 1) / 1461001\r\n    // L = L - 1461 * year / 4 + 31\r\n    // month = 80 * L / 2447\r\n    // dd = L - 2447 * month / 80\r\n    // L = month / 11\r\n    // month = month + 2 - 12 * L\r\n    // year = 100 * (N - 49) + year + L\r\n    // ------------------------------------------------------------------------\r\n    function _daysToDate(uint256 _days)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 year,\r\n            uint256 month,\r\n            uint256 day\r\n        )\r\n    {\r\n        int256 __days = int256(_days);\r\n\r\n        int256 L = __days + 68569 + OFFSET19700101;\r\n        int256 N = (4 * L) / 146097;\r\n        L = L - (146097 * N + 3) / 4;\r\n        int256 _year = (4000 * (L + 1)) / 1461001;\r\n        L = L - (1461 * _year) / 4 + 31;\r\n        int256 _month = (80 * L) / 2447;\r\n        int256 _day = L - (2447 * _month) / 80;\r\n        L = _month / 11;\r\n        _month = _month + 2 - 12 * L;\r\n        _year = 100 * (N - 49) + _year + L;\r\n\r\n        year = uint256(_year);\r\n        month = uint256(_month);\r\n        day = uint256(_day);\r\n    }\r\n\r\n    function timestampFromDate(\r\n        uint256 year,\r\n        uint256 month,\r\n        uint256 day\r\n    ) internal pure returns (uint256 timestamp) {\r\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\r\n    }\r\n\r\n    function timestampFromDateTime(\r\n        uint256 year,\r\n        uint256 month,\r\n        uint256 day,\r\n        uint256 hour,\r\n        uint256 minute,\r\n        uint256 second\r\n    ) internal pure returns (uint256 timestamp) {\r\n        timestamp =\r\n            _daysFromDate(year, month, day) *\r\n            SECONDS_PER_DAY +\r\n            hour *\r\n            SECONDS_PER_HOUR +\r\n            minute *\r\n            SECONDS_PER_MINUTE +\r\n            second;\r\n    }\r\n\r\n    function timestampToDate(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 year,\r\n            uint256 month,\r\n            uint256 day\r\n        )\r\n    {\r\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n\r\n    function timestampToDateTime(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 year,\r\n            uint256 month,\r\n            uint256 day,\r\n            uint256 hour,\r\n            uint256 minute,\r\n            uint256 second\r\n        )\r\n    {\r\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        uint256 secs = timestamp % SECONDS_PER_DAY;\r\n        hour = secs / SECONDS_PER_HOUR;\r\n        secs = secs % SECONDS_PER_HOUR;\r\n        minute = secs / SECONDS_PER_MINUTE;\r\n        second = secs % SECONDS_PER_MINUTE;\r\n    }\r\n\r\n    function isValidDate(\r\n        uint256 year,\r\n        uint256 month,\r\n        uint256 day\r\n    ) internal pure returns (bool valid) {\r\n        if (year >= 1970 && month > 0 && month <= 12) {\r\n            uint256 daysInMonth = _getDaysInMonth(year, month);\r\n            if (day > 0 && day <= daysInMonth) {\r\n                valid = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function isValidDateTime(\r\n        uint256 year,\r\n        uint256 month,\r\n        uint256 day,\r\n        uint256 hour,\r\n        uint256 minute,\r\n        uint256 second\r\n    ) internal pure returns (bool valid) {\r\n        if (isValidDate(year, month, day)) {\r\n            if (hour < 24 && minute < 60 && second < 60) {\r\n                valid = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function isLeapYear(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (bool leapYear)\r\n    {\r\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        leapYear = _isLeapYear(year);\r\n    }\r\n\r\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\r\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\r\n    }\r\n\r\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\r\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\r\n    }\r\n\r\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\r\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\r\n    }\r\n\r\n    function getDaysInMonth(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 daysInMonth)\r\n    {\r\n        (uint256 year, uint256 month, ) = _daysToDate(\r\n            timestamp / SECONDS_PER_DAY\r\n        );\r\n        daysInMonth = _getDaysInMonth(year, month);\r\n    }\r\n\r\n    function _getDaysInMonth(uint256 year, uint256 month)\r\n        internal\r\n        pure\r\n        returns (uint256 daysInMonth)\r\n    {\r\n        if (\r\n            month == 1 ||\r\n            month == 3 ||\r\n            month == 5 ||\r\n            month == 7 ||\r\n            month == 8 ||\r\n            month == 10 ||\r\n            month == 12\r\n        ) {\r\n            daysInMonth = 31;\r\n        } else if (month != 2) {\r\n            daysInMonth = 30;\r\n        } else {\r\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\r\n        }\r\n    }\r\n\r\n    // 1 = Monday, 7 = Sunday\r\n    function getDayOfWeek(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 dayOfWeek)\r\n    {\r\n        uint256 _days = timestamp / SECONDS_PER_DAY;\r\n        dayOfWeek = ((_days + 3) % 7) + 1;\r\n    }\r\n\r\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\r\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n\r\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\r\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n\r\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\r\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n\r\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\r\n        uint256 secs = timestamp % SECONDS_PER_DAY;\r\n        hour = secs / SECONDS_PER_HOUR;\r\n    }\r\n\r\n    function getMinute(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 minute)\r\n    {\r\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\r\n        minute = secs / SECONDS_PER_MINUTE;\r\n    }\r\n\r\n    function getSecond(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 second)\r\n    {\r\n        second = timestamp % SECONDS_PER_MINUTE;\r\n    }\r\n\r\n    function addYears(uint256 timestamp, uint256 _years)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\r\n            timestamp / SECONDS_PER_DAY\r\n        );\r\n        year += _years;\r\n        uint256 daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp =\r\n            _daysFromDate(year, month, day) *\r\n            SECONDS_PER_DAY +\r\n            (timestamp % SECONDS_PER_DAY);\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n\r\n    function addMonths(uint256 timestamp, uint256 _months)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\r\n            timestamp / SECONDS_PER_DAY\r\n        );\r\n        month += _months;\r\n        year += (month - 1) / 12;\r\n        month = ((month - 1) % 12) + 1;\r\n        uint256 daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp =\r\n            _daysFromDate(year, month, day) *\r\n            SECONDS_PER_DAY +\r\n            (timestamp % SECONDS_PER_DAY);\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n\r\n    function addDays(uint256 timestamp, uint256 _days)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n\r\n    function addHours(uint256 timestamp, uint256 _hours)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n\r\n    function addMinutes(uint256 timestamp, uint256 _minutes)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n\r\n    function addSeconds(uint256 timestamp, uint256 _seconds)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp + _seconds;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n\r\n    function subYears(uint256 timestamp, uint256 _years)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\r\n            timestamp / SECONDS_PER_DAY\r\n        );\r\n        year -= _years;\r\n        uint256 daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp =\r\n            _daysFromDate(year, month, day) *\r\n            SECONDS_PER_DAY +\r\n            (timestamp % SECONDS_PER_DAY);\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n\r\n    function subMonths(uint256 timestamp, uint256 _months)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\r\n            timestamp / SECONDS_PER_DAY\r\n        );\r\n        uint256 yearMonth = year * 12 + (month - 1) - _months;\r\n        year = yearMonth / 12;\r\n        month = (yearMonth % 12) + 1;\r\n        uint256 daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp =\r\n            _daysFromDate(year, month, day) *\r\n            SECONDS_PER_DAY +\r\n            (timestamp % SECONDS_PER_DAY);\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n\r\n    function subDays(uint256 timestamp, uint256 _days)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n\r\n    function subHours(uint256 timestamp, uint256 _hours)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n\r\n    function subMinutes(uint256 timestamp, uint256 _minutes)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n\r\n    function subSeconds(uint256 timestamp, uint256 _seconds)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp - _seconds;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n\r\n    function diffYears(uint256 fromTimestamp, uint256 toTimestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 _years)\r\n    {\r\n        require(fromTimestamp <= toTimestamp);\r\n        (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\r\n        (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\r\n        _years = toYear - fromYear;\r\n    }\r\n\r\n    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 _months)\r\n    {\r\n        require(fromTimestamp <= toTimestamp);\r\n        (uint256 fromYear, uint256 fromMonth, ) = _daysToDate(\r\n            fromTimestamp / SECONDS_PER_DAY\r\n        );\r\n        (uint256 toYear, uint256 toMonth, ) = _daysToDate(\r\n            toTimestamp / SECONDS_PER_DAY\r\n        );\r\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\r\n    }\r\n\r\n    function diffDays(uint256 fromTimestamp, uint256 toTimestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 _days)\r\n    {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\r\n    }\r\n\r\n    function diffHours(uint256 fromTimestamp, uint256 toTimestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 _hours)\r\n    {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\r\n    }\r\n\r\n    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 _minutes)\r\n    {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\r\n    }\r\n\r\n    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 _seconds)\r\n    {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _seconds = toTimestamp - fromTimestamp;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/math.sol\r\n\r\n/*\r\n * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with signed\r\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\r\n * basically a simple fraction whose numerator is signed 128-bit integer and\r\n * denominator is 2^64.  As long as denominator is always the same, there is no\r\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\r\n * represented by int128 type holding only the numerator.\r\n */\r\nlibrary ABDKMath64x64 {\r\n    /*\r\n     * Minimum value signed 64.64-bit fixed point number may have.\r\n     */\r\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\r\n\r\n    /*\r\n     * Maximum value signed 64.64-bit fixed point number may have.\r\n     */\r\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    /**\r\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\r\n     * number.  Revert on overflow.\r\n     *\r\n     * @param x signed 256-bit integer number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function fromInt(int256 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\r\n            return int128(x << 64);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\r\n     * rounding down.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64-bit integer number\r\n     */\r\n    function toInt(int128 x) internal pure returns (int64) {\r\n        unchecked {\r\n            return int64(x >> 64);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\r\n     * number.  Revert on overflow.\r\n     *\r\n     * @param x unsigned 256-bit integer number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function fromUInt(uint256 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x <= 0x7FFFFFFFFFFFFFFF);\r\n            return int128(int256(x << 64));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\r\n     * number rounding down.  Revert on underflow.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return unsigned 64-bit integer number\r\n     */\r\n    function toUInt(int128 x) internal pure returns (uint64) {\r\n        unchecked {\r\n            require(x >= 0);\r\n            return uint64(uint128(x >> 64));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\r\n     * number rounding down.  Revert on overflow.\r\n     *\r\n     * @param x signed 128.128-bin fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function from128x128(int256 x) internal pure returns (int128) {\r\n        unchecked {\r\n            int256 result = x >> 64;\r\n            require(result >= MIN_64x64 && result <= MAX_64x64);\r\n            return int128(result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\r\n     * number.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 128.128 fixed point number\r\n     */\r\n    function to128x128(int128 x) internal pure returns (int256) {\r\n        unchecked {\r\n            return int256(x) << 64;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate x + y.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @param y signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function add(int128 x, int128 y) internal pure returns (int128) {\r\n        unchecked {\r\n            int256 result = int256(x) + y;\r\n            require(result >= MIN_64x64 && result <= MAX_64x64);\r\n            return int128(result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate x - y.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @param y signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function sub(int128 x, int128 y) internal pure returns (int128) {\r\n        unchecked {\r\n            int256 result = int256(x) - y;\r\n            require(result >= MIN_64x64 && result <= MAX_64x64);\r\n            return int128(result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate x * y rounding down.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @param y signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function mul(int128 x, int128 y) internal pure returns (int128) {\r\n        unchecked {\r\n            int256 result = (int256(x) * y) >> 64;\r\n            require(result >= MIN_64x64 && result <= MAX_64x64);\r\n            return int128(result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\r\n     * number and y is signed 256-bit integer number.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64 fixed point number\r\n     * @param y signed 256-bit integer number\r\n     * @return signed 256-bit integer number\r\n     */\r\n    function muli(int128 x, int256 y) internal pure returns (int256) {\r\n        unchecked {\r\n            if (x == MIN_64x64) {\r\n                require(\r\n                    y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\r\n                        y <= 0x1000000000000000000000000000000000000000000000000\r\n                );\r\n                return -y << 63;\r\n            } else {\r\n                bool negativeResult = false;\r\n                if (x < 0) {\r\n                    x = -x;\r\n                    negativeResult = true;\r\n                }\r\n                if (y < 0) {\r\n                    y = -y; // We rely on overflow behavior here\r\n                    negativeResult = !negativeResult;\r\n                }\r\n                uint256 absoluteResult = mulu(x, uint256(y));\r\n                if (negativeResult) {\r\n                    require(\r\n                        absoluteResult <=\r\n                            0x8000000000000000000000000000000000000000000000000000000000000000\r\n                    );\r\n                    return -int256(absoluteResult); // We rely on overflow behavior here\r\n                } else {\r\n                    require(\r\n                        absoluteResult <=\r\n                            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\r\n                    );\r\n                    return int256(absoluteResult);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\r\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64 fixed point number\r\n     * @param y unsigned 256-bit integer number\r\n     * @return unsigned 256-bit integer number\r\n     */\r\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\r\n        unchecked {\r\n            if (y == 0) return 0;\r\n\r\n            require(x >= 0);\r\n\r\n            uint256 lo = (uint256(int256(x)) *\r\n                (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\r\n            uint256 hi = uint256(int256(x)) * (y >> 128);\r\n\r\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n            hi <<= 64;\r\n\r\n            require(\r\n                hi <=\r\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -\r\n                        lo\r\n            );\r\n            return hi + lo;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\r\n     * zero.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @param y signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function div(int128 x, int128 y) internal pure returns (int128) {\r\n        unchecked {\r\n            require(y != 0);\r\n            int256 result = (int256(x) << 64) / y;\r\n            require(result >= MIN_64x64 && result <= MAX_64x64);\r\n            return int128(result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\r\n     * integer numbers.  Revert on overflow or when y is zero.\r\n     *\r\n     * @param x signed 256-bit integer number\r\n     * @param y signed 256-bit integer number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function divi(int256 x, int256 y) internal pure returns (int128) {\r\n        unchecked {\r\n            require(y != 0);\r\n\r\n            bool negativeResult = false;\r\n            if (x < 0) {\r\n                x = -x; // We rely on overflow behavior here\r\n                negativeResult = true;\r\n            }\r\n            if (y < 0) {\r\n                y = -y; // We rely on overflow behavior here\r\n                negativeResult = !negativeResult;\r\n            }\r\n            uint128 absoluteResult = divuu(uint256(x), uint256(y));\r\n            if (negativeResult) {\r\n                require(absoluteResult <= 0x80000000000000000000000000000000);\r\n                return -int128(absoluteResult); // We rely on overflow behavior here\r\n            } else {\r\n                require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n                return int128(absoluteResult); // We rely on overflow behavior here\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n     * integer numbers.  Revert on overflow or when y is zero.\r\n     *\r\n     * @param x unsigned 256-bit integer number\r\n     * @param y unsigned 256-bit integer number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function divu(uint256 x, uint256 y) internal pure returns (int128) {\r\n        unchecked {\r\n            require(y != 0);\r\n            uint128 result = divuu(x, y);\r\n            require(result <= uint128(MAX_64x64));\r\n            return int128(result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate -x.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function neg(int128 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x != MIN_64x64);\r\n            return -x;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate |x|.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function abs(int128 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x != MIN_64x64);\r\n            return x < 0 ? -x : x;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\r\n     * zero.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function inv(int128 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x != 0);\r\n            int256 result = int256(0x100000000000000000000000000000000) / x;\r\n            require(result >= MIN_64x64 && result <= MAX_64x64);\r\n            return int128(result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @param y signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function avg(int128 x, int128 y) internal pure returns (int128) {\r\n        unchecked {\r\n            return int128((int256(x) + int256(y)) >> 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\r\n     * Revert on overflow or in case x * y is negative.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @param y signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function gavg(int128 x, int128 y) internal pure returns (int128) {\r\n        unchecked {\r\n            int256 m = int256(x) * int256(y);\r\n            require(m >= 0);\r\n            require(\r\n                m <\r\n                    0x4000000000000000000000000000000000000000000000000000000000000000\r\n            );\r\n            return int128(sqrtu(uint256(m)));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\r\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @param y uint256 value\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\r\n        unchecked {\r\n            bool negative = x < 0 && y & 1 == 1;\r\n\r\n            uint256 absX = uint128(x < 0 ? -x : x);\r\n            uint256 absResult;\r\n            absResult = 0x100000000000000000000000000000000;\r\n\r\n            if (absX <= 0x10000000000000000) {\r\n                absX <<= 63;\r\n                while (y != 0) {\r\n                    if (y & 0x1 != 0) {\r\n                        absResult = (absResult * absX) >> 127;\r\n                    }\r\n                    absX = (absX * absX) >> 127;\r\n\r\n                    if (y & 0x2 != 0) {\r\n                        absResult = (absResult * absX) >> 127;\r\n                    }\r\n                    absX = (absX * absX) >> 127;\r\n\r\n                    if (y & 0x4 != 0) {\r\n                        absResult = (absResult * absX) >> 127;\r\n                    }\r\n                    absX = (absX * absX) >> 127;\r\n\r\n                    if (y & 0x8 != 0) {\r\n                        absResult = (absResult * absX) >> 127;\r\n                    }\r\n                    absX = (absX * absX) >> 127;\r\n\r\n                    y >>= 4;\r\n                }\r\n\r\n                absResult >>= 64;\r\n            } else {\r\n                uint256 absXShift = 63;\r\n                if (absX < 0x1000000000000000000000000) {\r\n                    absX <<= 32;\r\n                    absXShift -= 32;\r\n                }\r\n                if (absX < 0x10000000000000000000000000000) {\r\n                    absX <<= 16;\r\n                    absXShift -= 16;\r\n                }\r\n                if (absX < 0x1000000000000000000000000000000) {\r\n                    absX <<= 8;\r\n                    absXShift -= 8;\r\n                }\r\n                if (absX < 0x10000000000000000000000000000000) {\r\n                    absX <<= 4;\r\n                    absXShift -= 4;\r\n                }\r\n                if (absX < 0x40000000000000000000000000000000) {\r\n                    absX <<= 2;\r\n                    absXShift -= 2;\r\n                }\r\n                if (absX < 0x80000000000000000000000000000000) {\r\n                    absX <<= 1;\r\n                    absXShift -= 1;\r\n                }\r\n\r\n                uint256 resultShift = 0;\r\n                while (y != 0) {\r\n                    require(absXShift < 64);\r\n\r\n                    if (y & 0x1 != 0) {\r\n                        absResult = (absResult * absX) >> 127;\r\n                        resultShift += absXShift;\r\n                        if (absResult > 0x100000000000000000000000000000000) {\r\n                            absResult >>= 1;\r\n                            resultShift += 1;\r\n                        }\r\n                    }\r\n                    absX = (absX * absX) >> 127;\r\n                    absXShift <<= 1;\r\n                    if (absX >= 0x100000000000000000000000000000000) {\r\n                        absX >>= 1;\r\n                        absXShift += 1;\r\n                    }\r\n\r\n                    y >>= 1;\r\n                }\r\n\r\n                require(resultShift < 64);\r\n                absResult >>= 64 - resultShift;\r\n            }\r\n            int256 result = negative ? -int256(absResult) : int256(absResult);\r\n            require(result >= MIN_64x64 && result <= MAX_64x64);\r\n            return int128(result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function sqrt(int128 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x >= 0);\r\n            return int128(sqrtu(uint256(int256(x)) << 64));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate binary logarithm of x.  Revert if x <= 0.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function log_2(int128 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x > 0);\r\n\r\n            int256 msb = 0;\r\n            int256 xc = x;\r\n            if (xc >= 0x10000000000000000) {\r\n                xc >>= 64;\r\n                msb += 64;\r\n            }\r\n            if (xc >= 0x100000000) {\r\n                xc >>= 32;\r\n                msb += 32;\r\n            }\r\n            if (xc >= 0x10000) {\r\n                xc >>= 16;\r\n                msb += 16;\r\n            }\r\n            if (xc >= 0x100) {\r\n                xc >>= 8;\r\n                msb += 8;\r\n            }\r\n            if (xc >= 0x10) {\r\n                xc >>= 4;\r\n                msb += 4;\r\n            }\r\n            if (xc >= 0x4) {\r\n                xc >>= 2;\r\n                msb += 2;\r\n            }\r\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\r\n\r\n            int256 result = (msb - 64) << 64;\r\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\r\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\r\n                ux *= ux;\r\n                uint256 b = ux >> 255;\r\n                ux >>= 127 + b;\r\n                result += bit * int256(b);\r\n            }\r\n\r\n            return int128(result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate natural logarithm of x.  Revert if x <= 0.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function ln(int128 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x > 0);\r\n\r\n            return\r\n                int128(\r\n                    int256(\r\n                        (uint256(int256(log_2(x))) *\r\n                            0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128\r\n                    )\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate binary exponent of x.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function exp_2(int128 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x < 0x400000000000000000); // Overflow\r\n\r\n            if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n            uint256 result = 0x80000000000000000000000000000000;\r\n\r\n            if (x & 0x8000000000000000 > 0)\r\n                result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\r\n            if (x & 0x4000000000000000 > 0)\r\n                result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\r\n            if (x & 0x2000000000000000 > 0)\r\n                result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\r\n            if (x & 0x1000000000000000 > 0)\r\n                result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\r\n            if (x & 0x800000000000000 > 0)\r\n                result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\r\n            if (x & 0x400000000000000 > 0)\r\n                result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\r\n            if (x & 0x200000000000000 > 0)\r\n                result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\r\n            if (x & 0x100000000000000 > 0)\r\n                result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\r\n            if (x & 0x80000000000000 > 0)\r\n                result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\r\n            if (x & 0x40000000000000 > 0)\r\n                result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\r\n            if (x & 0x20000000000000 > 0)\r\n                result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\r\n            if (x & 0x10000000000000 > 0)\r\n                result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\r\n            if (x & 0x8000000000000 > 0)\r\n                result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\r\n            if (x & 0x4000000000000 > 0)\r\n                result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\r\n            if (x & 0x2000000000000 > 0)\r\n                result = (result * 0x1000162E525EE054754457D5995292026) >> 128;\r\n            if (x & 0x1000000000000 > 0)\r\n                result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\r\n            if (x & 0x800000000000 > 0)\r\n                result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\r\n            if (x & 0x400000000000 > 0)\r\n                result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\r\n            if (x & 0x200000000000 > 0)\r\n                result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\r\n            if (x & 0x100000000000 > 0)\r\n                result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\r\n            if (x & 0x80000000000 > 0)\r\n                result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\r\n            if (x & 0x40000000000 > 0)\r\n                result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\r\n            if (x & 0x20000000000 > 0)\r\n                result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\r\n            if (x & 0x10000000000 > 0)\r\n                result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\r\n            if (x & 0x8000000000 > 0)\r\n                result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\r\n            if (x & 0x4000000000 > 0)\r\n                result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\r\n            if (x & 0x2000000000 > 0)\r\n                result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\r\n            if (x & 0x1000000000 > 0)\r\n                result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\r\n            if (x & 0x800000000 > 0)\r\n                result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\r\n            if (x & 0x400000000 > 0)\r\n                result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\r\n            if (x & 0x200000000 > 0)\r\n                result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\r\n            if (x & 0x100000000 > 0)\r\n                result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\r\n            if (x & 0x80000000 > 0)\r\n                result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\r\n            if (x & 0x40000000 > 0)\r\n                result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\r\n            if (x & 0x20000000 > 0)\r\n                result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\r\n            if (x & 0x10000000 > 0)\r\n                result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\r\n            if (x & 0x8000000 > 0)\r\n                result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\r\n            if (x & 0x4000000 > 0)\r\n                result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\r\n            if (x & 0x2000000 > 0)\r\n                result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\r\n            if (x & 0x1000000 > 0)\r\n                result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\r\n            if (x & 0x800000 > 0)\r\n                result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\r\n            if (x & 0x400000 > 0)\r\n                result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\r\n            if (x & 0x200000 > 0)\r\n                result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\r\n            if (x & 0x100000 > 0)\r\n                result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\r\n            if (x & 0x80000 > 0)\r\n                result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\r\n            if (x & 0x40000 > 0)\r\n                result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\r\n            if (x & 0x20000 > 0)\r\n                result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\r\n            if (x & 0x10000 > 0)\r\n                result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\r\n            if (x & 0x8000 > 0)\r\n                result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\r\n            if (x & 0x4000 > 0)\r\n                result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\r\n            if (x & 0x2000 > 0)\r\n                result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\r\n            if (x & 0x1000 > 0)\r\n                result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\r\n            if (x & 0x800 > 0)\r\n                result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\r\n            if (x & 0x400 > 0)\r\n                result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\r\n            if (x & 0x200 > 0)\r\n                result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\r\n            if (x & 0x100 > 0)\r\n                result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\r\n            if (x & 0x80 > 0)\r\n                result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\r\n            if (x & 0x40 > 0)\r\n                result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\r\n            if (x & 0x20 > 0)\r\n                result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\r\n            if (x & 0x10 > 0)\r\n                result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\r\n            if (x & 0x8 > 0)\r\n                result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\r\n            if (x & 0x4 > 0)\r\n                result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\r\n            if (x & 0x2 > 0)\r\n                result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\r\n            if (x & 0x1 > 0)\r\n                result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\r\n\r\n            result >>= uint256(int256(63 - (x >> 64)));\r\n            require(result <= uint256(int256(MAX_64x64)));\r\n\r\n            return int128(int256(result));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate natural exponent of x.  Revert on overflow.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function exp(int128 x) internal pure returns (int128) {\r\n        unchecked {\r\n            require(x < 0x400000000000000000); // Overflow\r\n\r\n            if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n            return\r\n                exp_2(\r\n                    int128(\r\n                        (int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128\r\n                    )\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n     * integer numbers.  Revert on overflow or when y is zero.\r\n     *\r\n     * @param x unsigned 256-bit integer number\r\n     * @param y unsigned 256-bit integer number\r\n     * @return unsigned 64.64-bit fixed point number\r\n     */\r\n    function divuu(uint256 x, uint256 y) private pure returns (uint128) {\r\n        unchecked {\r\n            require(y != 0);\r\n\r\n            uint256 result;\r\n\r\n            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n                result = (x << 64) / y;\r\n            else {\r\n                uint256 msb = 192;\r\n                uint256 xc = x >> 192;\r\n                if (xc >= 0x100000000) {\r\n                    xc >>= 32;\r\n                    msb += 32;\r\n                }\r\n                if (xc >= 0x10000) {\r\n                    xc >>= 16;\r\n                    msb += 16;\r\n                }\r\n                if (xc >= 0x100) {\r\n                    xc >>= 8;\r\n                    msb += 8;\r\n                }\r\n                if (xc >= 0x10) {\r\n                    xc >>= 4;\r\n                    msb += 4;\r\n                }\r\n                if (xc >= 0x4) {\r\n                    xc >>= 2;\r\n                    msb += 2;\r\n                }\r\n                if (xc >= 0x2) msb += 1; // No need to shift xc anymore\r\n\r\n                result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\r\n                require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n                uint256 hi = result * (y >> 128);\r\n                uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n                uint256 xh = x >> 192;\r\n                uint256 xl = x << 64;\r\n\r\n                if (xl < lo) xh -= 1;\r\n                xl -= lo; // We rely on overflow behavior here\r\n                lo = hi << 128;\r\n                if (xl < lo) xh -= 1;\r\n                xl -= lo; // We rely on overflow behavior here\r\n\r\n                assert(xh == hi >> 128);\r\n\r\n                result += xl / y;\r\n            }\r\n\r\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n            return uint128(result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\r\n     * number.\r\n     *\r\n     * @param x unsigned 256-bit integer number\r\n     * @return unsigned 128-bit integer number\r\n     */\r\n    function sqrtu(uint256 x) private pure returns (uint128) {\r\n        unchecked {\r\n            if (x == 0) return 0;\r\n            else {\r\n                uint256 xx = x;\r\n                uint256 r = 1;\r\n                if (xx >= 0x100000000000000000000000000000000) {\r\n                    xx >>= 128;\r\n                    r <<= 64;\r\n                }\r\n                if (xx >= 0x10000000000000000) {\r\n                    xx >>= 64;\r\n                    r <<= 32;\r\n                }\r\n                if (xx >= 0x100000000) {\r\n                    xx >>= 32;\r\n                    r <<= 16;\r\n                }\r\n                if (xx >= 0x10000) {\r\n                    xx >>= 16;\r\n                    r <<= 8;\r\n                }\r\n                if (xx >= 0x100) {\r\n                    xx >>= 8;\r\n                    r <<= 4;\r\n                }\r\n                if (xx >= 0x10) {\r\n                    xx >>= 4;\r\n                    r <<= 2;\r\n                }\r\n                if (xx >= 0x8) {\r\n                    r <<= 1;\r\n                }\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1;\r\n                r = (r + x / r) >> 1; // Seven iterations should be enough\r\n                uint256 r1 = x / r;\r\n                return uint128(r < r1 ? r : r1);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.3\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.3.3\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.3.3\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/stakingStableCoin.sol\r\n\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\ncontract evaiStableCoinFund is ReentrancyGuard {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    struct stakeType {\r\n        bool active;\r\n        uint8 Type;\r\n        uint80 percentageReturn;\r\n        uint80 bonusTerm;\r\n        uint80 bonusMultiplier;\r\n        uint128 minAmount;\r\n        uint128 maxAmount;\r\n    }\r\n\r\n    struct stake {\r\n        bool active;\r\n        bool partialWithdrawn;\r\n        bool settled;\r\n        uint8 Type;\r\n        address ownerAddress;\r\n        uint32 startOfTerm;\r\n        uint32 endOfTerm;\r\n        uint32 id;\r\n        uint32 linkedStakeID;\r\n        uint64 evaiAmount;\r\n        uint64 settlementAmount;\r\n        uint64 stakeReturns;\r\n    }\r\n\r\n    IERC20 evaiToken;\r\n    uint8 currentStakeType;\r\n    address owner;\r\n    uint32 currentStakeID;\r\n    uint64 currentStakedEvaiAmount;\r\n    uint64 totalProfitsDistrubuted;\r\n    uint64 totalStakedEvaiAmount;\r\n    bool acceptingStakes;\r\n    uint32 acceptingStakesEndTime;\r\n\r\n    event AddStake(\r\n        uint8 _Type,\r\n        address _stakeOwner,\r\n        uint32 _startofTerm,\r\n        uint32 _stakeID,\r\n        uint64 _evaiAmount\r\n    );\r\n\r\n    event ReStake(\r\n        uint8 _Type,\r\n        address _stakeOwner,\r\n        uint32 _startOfTerm,\r\n        uint32 _stakeID,\r\n        uint64 _evaiAmount,\r\n        uint32 _linkedStakeID\r\n    );\r\n\r\n    event WithdrawStake(\r\n        bool _active,\r\n        bool _partialWithdrawn,\r\n        bool _settled,\r\n        uint32 _stakeID,\r\n        uint32 _endOfTerm,\r\n        uint64 _settlementAmount\r\n    );\r\n\r\n    mapping(uint32 => stake) stakeByID;\r\n    mapping(address => uint32[]) stakeByOwnerAddress;\r\n    mapping(uint32 => stakeType) stakeTypes;\r\n    mapping(uint32 => bool) stakeTypeAlreadyExists;\r\n\r\n    constructor(address _token) {\r\n        evaiToken = IERC20(_token);\r\n        owner = msg.sender;\r\n        acceptingStakes = false;\r\n        acceptingStakesEndTime = uint32(block.timestamp);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function evaiTransfer(uint32 _stakeID) private {\r\n        // Transfer the evai tokens to the stake owner.\r\n        evaiToken.transfer(msg.sender, stakeByID[_stakeID].settlementAmount);\r\n    }\r\n\r\n    function setInitialState(\r\n        uint32 _currentStakeID,\r\n        uint64 _currentStakedEvaiAmount,\r\n        uint64 _totalProfitsDistrubuted,\r\n        uint64 _totalStakedEvaiAmount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        currentStakeID = _currentStakeID;\r\n        currentStakedEvaiAmount = _currentStakedEvaiAmount;\r\n        totalProfitsDistrubuted = _totalProfitsDistrubuted;\r\n        totalStakedEvaiAmount = _totalStakedEvaiAmount;\r\n    }\r\n\r\n    function addManualStake(\r\n        stake calldata _stake\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        stakeByID[_stake.id] = _stake;\r\n        stakeByOwnerAddress[_stake.ownerAddress].push(_stake.id);\r\n    }\r\n\r\n    function removeManualStake(uint32 _stakeID)\r\n        external\r\n        onlyOwner\r\n    {\r\n\r\n        require(stakeByID[_stakeID].active, \"Stake does not exist\");\r\n\r\n        // Remove the stake from the stakeByOwnerAddress mapping.\r\n        uint32[] memory userStakes = stakeByOwnerAddress[stakeByID[_stakeID].ownerAddress];\r\n        uint32[] memory newStakes = new uint32[](userStakes.length - 1);\r\n        uint newStakeId = 0;\r\n        for (uint i = 0; i < userStakes.length; ++i) {\r\n            if (userStakes[i] != _stakeID) {\r\n                newStakes[newStakeId++] = _stakeID;\r\n            }\r\n        }\r\n        stakeByOwnerAddress[stakeByID[_stakeID].ownerAddress] = newStakes;\r\n\r\n        // Remove the stake from the stakeByID mapping.\r\n        delete stakeByID[_stakeID];\r\n\r\n    }\r\n\r\n    function getCurrentCountOfStakeTypes()\r\n        external\r\n        view\r\n        onlyOwner\r\n        returns (uint32 currentStakeTypes)\r\n    {\r\n        return currentStakeType;\r\n    }\r\n\r\n    function getCurrentStakeID()\r\n        external\r\n        view\r\n        onlyOwner\r\n        returns (uint32 currentStakeId)\r\n    {\r\n        return currentStakeID;\r\n    }\r\n\r\n    function getStakeType(uint32 _stakeType)\r\n        external\r\n        view\r\n        onlyOwner\r\n        returns (stakeType memory)\r\n    {\r\n        return stakeTypes[_stakeType];\r\n    }\r\n\r\n    function getBalance() external view onlyOwner returns (uint256) {\r\n        return evaiToken.balanceOf(address(this));\r\n    }\r\n\r\n    function getStakesByAddress(address _user)\r\n        external\r\n        view\r\n        onlyOwner\r\n        returns (uint32[] memory)\r\n    {\r\n        require(\r\n            _user != address(0),\r\n            \"EVAIFUND:Address can't be a zero address\"\r\n        );\r\n        return stakeByOwnerAddress[_user];\r\n    }\r\n\r\n    function getTotalStaked()\r\n        external\r\n        view\r\n        returns (uint64 totalEvaiAmountStaked)\r\n    {\r\n        return totalStakedEvaiAmount;\r\n    }\r\n\r\n    function getTotalProfitsDistributed()\r\n        external\r\n        view\r\n        returns (uint64 totalProfits)\r\n    {\r\n        return totalProfitsDistrubuted;\r\n    }\r\n\r\n    function getCurrentStakedAmount()\r\n        external\r\n        view\r\n        returns (uint64 currentStakedEvai)\r\n    {\r\n        return currentStakedEvaiAmount;\r\n    }\r\n\r\n    function getMyStakes() external view returns (uint32[] memory) {\r\n        return stakeByOwnerAddress[msg.sender];\r\n    }\r\n\r\n    function getStakeDetailsByStakeID(uint32 _stakeID)\r\n        external\r\n        view\r\n        returns (stake memory)\r\n    {\r\n        require(\r\n            msg.sender == owner ||\r\n                msg.sender == stakeByID[_stakeID].ownerAddress,\r\n            \"Unauthorized User.\"\r\n        );\r\n        return stakeByID[_stakeID];\r\n    }\r\n\r\n    function addStakeType(\r\n        bool _active,\r\n        uint80 _percentageReturn,\r\n        uint80 _bonusTerm,\r\n        uint80 _bonusMultiplier,\r\n        uint128 _minAmount,\r\n        uint128 _maxAmount\r\n    ) external onlyOwner {\r\n        currentStakeType += 1;\r\n        stakeTypes[currentStakeType].Type = currentStakeType;\r\n        stakeTypes[currentStakeType].active = _active;\r\n        stakeTypes[currentStakeType].percentageReturn = _percentageReturn;\r\n        stakeTypes[currentStakeType].bonusTerm = _bonusTerm;\r\n        stakeTypes[currentStakeType].bonusMultiplier = _bonusMultiplier;\r\n        stakeTypes[currentStakeType].minAmount = _minAmount;\r\n        stakeTypes[currentStakeType].maxAmount = _maxAmount;\r\n        stakeTypeAlreadyExists[currentStakeType] = true;\r\n    }\r\n\r\n    function updateStakeType(\r\n        uint8 _stakeType,\r\n        bool _active,\r\n        uint80 _percentageReturn,\r\n        uint80 _bonusTerm,\r\n        uint80 _bonusMultiplier,\r\n        uint128 _minAmount,\r\n        uint128 _maxAmount\r\n    ) external onlyOwner {\r\n        require(\r\n            stakeTypeAlreadyExists[_stakeType] == true,\r\n            \"This stakeType doesn't exists\"\r\n        );\r\n        stakeTypes[currentStakeType].active = _active;\r\n        stakeTypes[_stakeType].percentageReturn = _percentageReturn;\r\n        stakeTypes[_stakeType].bonusTerm = _bonusTerm;\r\n        stakeTypes[currentStakeType].bonusMultiplier = _bonusMultiplier;\r\n        stakeTypes[_stakeType].minAmount = _minAmount;\r\n        stakeTypes[_stakeType].maxAmount = _maxAmount;\r\n    }\r\n\r\n    function updateAcceptingStakes(bool _acceptingStakes) external onlyOwner {\r\n        acceptingStakes = _acceptingStakes;\r\n        if (_acceptingStakes == false) {\r\n            acceptingStakesEndTime = uint32(block.timestamp);\r\n        } else {\r\n            acceptingStakesEndTime = 0;\r\n        }\r\n    }\r\n\r\n    function claimToInvest() external onlyOwner {\r\n        evaiToken.approve(address(this), evaiToken.balanceOf(address(this)));\r\n        evaiToken.transfer(owner, evaiToken.balanceOf(address(this)));\r\n    }\r\n\r\n    function evaisetStakeAttributesAndUpdateGlobalVariables(\r\n        uint64 _amount,\r\n        uint8 _type,\r\n        uint32 _ID\r\n    ) private {\r\n        // set stake attributes\r\n        stakeByID[_ID].active = true;\r\n        stakeByID[_ID].Type = _type;\r\n        stakeByID[_ID].ownerAddress = msg.sender;\r\n        stakeByID[_ID].startOfTerm = uint32(block.timestamp);\r\n        stakeByID[_ID].id = currentStakeID;\r\n        stakeByID[_ID].evaiAmount = _amount;\r\n        stakeByOwnerAddress[msg.sender].push(_ID);\r\n        totalStakedEvaiAmount += _amount;\r\n        currentStakedEvaiAmount += _amount;\r\n    }\r\n\r\n    function emitWithdrawStake(uint32 _stakeID) private {\r\n        stakeByID[_stakeID].endOfTerm = uint32(block.timestamp);\r\n        // emit WithdrawStake event\r\n        emit WithdrawStake(\r\n            stakeByID[_stakeID].active,\r\n            stakeByID[_stakeID].partialWithdrawn,\r\n            stakeByID[_stakeID].settled,\r\n            _stakeID,\r\n            stakeByID[_stakeID].endOfTerm,\r\n            stakeByID[_stakeID].settlementAmount\r\n        );\r\n    }\r\n\r\n    function addStake(uint64 _amount, uint8 _type) external nonReentrant {\r\n        require(acceptingStakes, \"Can't add a stake at this time, contract disabled for maintenance\");\r\n        require(\r\n            stakeTypes[_type].active,\r\n            \"Can't add a stake with the provided stakeType\"\r\n        );\r\n        require(stakeTypeAlreadyExists[_type], \"The Stake type doesn't exist\");\r\n\r\n        require(\r\n            _amount >= stakeTypes[_type].minAmount &&\r\n                _amount <= stakeTypes[_type].maxAmount,\r\n            \"Staked amount is more than maximum amount specified for the stake\"\r\n        );\r\n\r\n        require(\r\n            evaiToken.balanceOf(msg.sender) >= _amount,\r\n            \"Insufficient Evai Balance. Please buy more EVAI Tokens.\"\r\n        );\r\n        // stakeID counter update\r\n        currentStakeID += 1;\r\n        //Transfer evai tokens from the msg.sender(stake owner) to the contract\r\n        evaisetStakeAttributesAndUpdateGlobalVariables(\r\n            _amount,\r\n            _type,\r\n            currentStakeID\r\n        );\r\n        evaiToken.transferFrom(msg.sender, address(this), _amount);\r\n\r\n        emit AddStake(\r\n            _type,\r\n            stakeByID[currentStakeID].ownerAddress,\r\n            stakeByID[currentStakeID].startOfTerm,\r\n            stakeByID[currentStakeID].id,\r\n            stakeByID[currentStakeID].evaiAmount\r\n        );\r\n    }\r\n\r\n    function reStake(\r\n        uint64 _amount,\r\n        uint8 _type,\r\n        uint32 _linkedStakeID\r\n    ) internal {\r\n        require(stakeTypeAlreadyExists[_type], \"The Stake type doesn't exist\");\r\n        // stakeID counter update\r\n        currentStakeID += 1;\r\n        evaisetStakeAttributesAndUpdateGlobalVariables(\r\n            _amount,\r\n            _type,\r\n            currentStakeID\r\n        );\r\n        stakeByID[currentStakeID].linkedStakeID = _linkedStakeID;\r\n\r\n        emit ReStake(\r\n            _type,\r\n            stakeByID[currentStakeID].ownerAddress,\r\n            stakeByID[currentStakeID].startOfTerm,\r\n            stakeByID[currentStakeID].id,\r\n            stakeByID[currentStakeID].evaiAmount,\r\n            stakeByID[currentStakeID].linkedStakeID\r\n        );\r\n    }\r\n\r\n    function withdraw(\r\n        uint32 _stakeID,\r\n        bool _full,\r\n        uint64 _withdrawAmount\r\n    ) external nonReentrant {\r\n        require(\r\n            stakeByID[_stakeID].ownerAddress == msg.sender,\r\n            \"Unauthorized Stake owner\"\r\n        );\r\n        require(stakeByID[_stakeID].active == true, \"Stake was settled\");\r\n        uint256 elapsedTime = BokkyPooBahsDateTimeLibrary.diffDays(\r\n            uint256(stakeByID[_stakeID].startOfTerm),\r\n            uint256(block.timestamp)\r\n        );\r\n        uint256 totalReturns;\r\n        uint256 stakeReturns;\r\n        uint256 rewardEndTime;\r\n        if (elapsedTime < stakeTypes[stakeByID[_stakeID].Type].bonusTerm) {\r\n            totalReturns = compound(\r\n                (stakeByID[_stakeID].evaiAmount),\r\n                (stakeTypes[stakeByID[_stakeID].Type].percentageReturn),\r\n                elapsedTime\r\n            );\r\n            stakeReturns = totalReturns - stakeByID[_stakeID].evaiAmount;\r\n        } else if (\r\n            elapsedTime == stakeTypes[stakeByID[_stakeID].Type].bonusTerm\r\n        ) {\r\n            totalReturns = (stakeByID[_stakeID].evaiAmount *\r\n                (stakeTypes[stakeByID[_stakeID].Type].bonusMultiplier));\r\n            stakeReturns = totalReturns - (stakeByID[_stakeID].evaiAmount);\r\n        } else if (\r\n            elapsedTime > stakeTypes[stakeByID[_stakeID].Type].bonusTerm\r\n        ) {\r\n            uint256 daysForYearInProgress = elapsedTime.mod(\r\n                uint256(stakeTypes[stakeByID[_stakeID].Type].bonusTerm)\r\n            );\r\n            uint256 completedYears = (elapsedTime.sub(daysForYearInProgress))\r\n                .div(uint256(stakeTypes[stakeByID[_stakeID].Type].bonusTerm));\r\n\r\n            rewardEndTime = BokkyPooBahsDateTimeLibrary.addDays(\r\n                uint256(stakeByID[_stakeID].startOfTerm),\r\n                uint256(\r\n                    (completedYears + 1) *\r\n                        uint256(stakeTypes[stakeByID[_stakeID].Type].bonusTerm)\r\n                )\r\n            );\r\n\r\n            if (rewardEndTime < uint256(block.timestamp)) {\r\n                // Calculated elapsed time again\r\n                elapsedTime = BokkyPooBahsDateTimeLibrary.diffDays(\r\n                    uint256(stakeByID[_stakeID].startOfTerm),\r\n                    rewardEndTime\r\n                );\r\n\r\n                daysForYearInProgress = elapsedTime.mod(\r\n                    uint256(stakeTypes[stakeByID[_stakeID].Type].bonusTerm)\r\n                );\r\n                completedYears = (elapsedTime.sub(daysForYearInProgress)).div(\r\n                    uint256(stakeTypes[stakeByID[_stakeID].Type].bonusTerm)\r\n                );\r\n            }\r\n\r\n            uint256 bMul = uint256(\r\n                stakeTypes[stakeByID[_stakeID].Type].bonusMultiplier\r\n            );\r\n\r\n            uint256 postBonusBalance = calculatePostBonusBalance(\r\n                uint256(stakeByID[_stakeID].evaiAmount),\r\n                completedYears,\r\n                bMul\r\n            );\r\n\r\n            uint256 pReturns = stakeTypes[stakeByID[_stakeID].Type]\r\n                .percentageReturn;\r\n\r\n            totalReturns = compound(\r\n                postBonusBalance,\r\n                pReturns,\r\n                daysForYearInProgress\r\n            );\r\n            stakeReturns = totalReturns - (stakeByID[_stakeID].evaiAmount);\r\n        }\r\n\r\n        if (_full == true) {\r\n            stakeByID[_stakeID].partialWithdrawn = false;\r\n            stakeByID[_stakeID].settlementAmount = uint64(totalReturns);\r\n            stakeByID[_stakeID].stakeReturns = uint64(stakeReturns);\r\n        } else {\r\n            require(\r\n                _withdrawAmount <= uint64(totalReturns),\r\n                \"Amount to claim is higher than returns\"\r\n            );\r\n            stakeByID[_stakeID].settlementAmount = _withdrawAmount;\r\n        }\r\n\r\n        if (\r\n            _full == true &&\r\n            stakeByID[_stakeID].settlementAmount <=\r\n            evaiToken.balanceOf(address(this))\r\n        ) {\r\n            //Update the global variables\r\n            currentStakedEvaiAmount -= stakeByID[_stakeID].evaiAmount;\r\n            totalProfitsDistrubuted += stakeByID[_stakeID].stakeReturns;\r\n            // set the stake attributes\r\n            stakeByID[_stakeID].active = false;\r\n            stakeByID[_stakeID].settled = true;\r\n            evaiTransfer(_stakeID);\r\n            emitWithdrawStake(_stakeID);\r\n        } else if (\r\n            _full == true &&\r\n            stakeByID[_stakeID].settlementAmount >=\r\n            evaiToken.balanceOf(address(this))\r\n        ) {\r\n            // set the stake attributes\r\n            stakeByID[_stakeID].active = false;\r\n            emitWithdrawStake(_stakeID);\r\n        } else if (\r\n            _full == false &&\r\n            stakeByID[_stakeID].settlementAmount <=\r\n            evaiToken.balanceOf(address(this))\r\n        ) {\r\n            // Update the global variables\r\n            currentStakedEvaiAmount -= stakeByID[_stakeID].evaiAmount;\r\n            // set the stake attributes\r\n            stakeByID[_stakeID].active = false;\r\n            stakeByID[_stakeID].partialWithdrawn = true;\r\n            stakeByID[_stakeID].settled = true;\r\n            evaiTransfer(_stakeID);\r\n            emitWithdrawStake(_stakeID);\r\n            // restake with the remaining amount\r\n            uint8 Type = stakeByID[_stakeID].Type;\r\n            uint256 reStakeAmount = totalReturns -\r\n                (stakeByID[_stakeID].settlementAmount);\r\n            reStake(uint64(reStakeAmount), Type, _stakeID);\r\n        } else if (\r\n            _full == false &&\r\n            stakeByID[_stakeID].settlementAmount >=\r\n            evaiToken.balanceOf(address(this))\r\n        ) {\r\n            // set the stake attributes\r\n            stakeByID[_stakeID].active = false;\r\n            stakeByID[_stakeID].partialWithdrawn = true;\r\n            emitWithdrawStake(_stakeID);\r\n        }\r\n    }\r\n\r\n    function compound(\r\n        uint256 principal,\r\n        uint256 ratio,\r\n        uint256 n\r\n    ) public pure returns (uint256) {\r\n        return\r\n            ABDKMath64x64.mulu(\r\n                ABDKMath64x64.pow(\r\n                    ABDKMath64x64.add(\r\n                        ABDKMath64x64.fromUInt(1),\r\n                        ABDKMath64x64.divu(ratio, 100 * 10**6)\r\n                    ),\r\n                    n\r\n                ),\r\n                principal\r\n            );\r\n    }\r\n\r\n    function calculatePostBonusBalance(\r\n        uint256 amount,\r\n        uint256 completedYears,\r\n        uint256 bonusMultiplier\r\n    ) public pure returns (uint256) {\r\n        return\r\n            compound(amount, ((bonusMultiplier - 10**6) * 100), completedYears);\r\n    }\r\n\r\n    function settleStakes(uint32[] memory _stakeIDs) external onlyOwner {\r\n        for (uint256 i = 0; i < _stakeIDs.length; i++) {\r\n            if (\r\n                stakeByID[_stakeIDs[i]].active == true &&\r\n                stakeByID[_stakeIDs[i]].partialWithdrawn == false\r\n            ) {\r\n                currentStakedEvaiAmount -= stakeByID[_stakeIDs[i]]\r\n                    .settlementAmount;\r\n                stakeByID[_stakeIDs[i]].active = false;\r\n                stakeByID[_stakeIDs[i]].settled = true;\r\n\r\n                evaiToken.approve(\r\n                    stakeByID[_stakeIDs[i]].ownerAddress,\r\n                    stakeByID[_stakeIDs[i]].settlementAmount\r\n                );\r\n\r\n                evaiToken.transfer(\r\n                    stakeByID[_stakeIDs[i]].ownerAddress,\r\n                    stakeByID[_stakeIDs[i]].settlementAmount\r\n                );\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_Type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stakeOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_startofTerm\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_stakeID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_evaiAmount\",\"type\":\"uint64\"}],\"name\":\"AddStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_Type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stakeOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_startOfTerm\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_stakeID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_evaiAmount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_linkedStakeID\",\"type\":\"uint32\"}],\"name\":\"ReStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_partialWithdrawn\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_settled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_stakeID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_endOfTerm\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_settlementAmount\",\"type\":\"uint64\"}],\"name\":\"WithdrawStake\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"partialWithdrawn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"Type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startOfTerm\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endOfTerm\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"linkedStakeID\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"evaiAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"settlementAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakeReturns\",\"type\":\"uint64\"}],\"internalType\":\"struct evaiStableCoinFund.stake\",\"name\":\"_stake\",\"type\":\"tuple\"}],\"name\":\"addManualStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_amount\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"},{\"internalType\":\"uint80\",\"name\":\"_percentageReturn\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"_bonusTerm\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"_bonusMultiplier\",\"type\":\"uint80\"},{\"internalType\":\"uint128\",\"name\":\"_minAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxAmount\",\"type\":\"uint128\"}],\"name\":\"addStakeType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"completedYears\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusMultiplier\",\"type\":\"uint256\"}],\"name\":\"calculatePostBonusBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimToInvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"compound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentCountOfStakeTypes\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"currentStakeTypes\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentStakeID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"currentStakeId\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentStakedAmount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"currentStakedEvai\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyStakes\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_stakeID\",\"type\":\"uint32\"}],\"name\":\"getStakeDetailsByStakeID\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"partialWithdrawn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"Type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startOfTerm\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endOfTerm\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"linkedStakeID\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"evaiAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"settlementAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stakeReturns\",\"type\":\"uint64\"}],\"internalType\":\"struct evaiStableCoinFund.stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_stakeType\",\"type\":\"uint32\"}],\"name\":\"getStakeType\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"Type\",\"type\":\"uint8\"},{\"internalType\":\"uint80\",\"name\":\"percentageReturn\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"bonusTerm\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"bonusMultiplier\",\"type\":\"uint80\"},{\"internalType\":\"uint128\",\"name\":\"minAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct evaiStableCoinFund.stakeType\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakesByAddress\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalProfitsDistributed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"totalProfits\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"totalEvaiAmountStaked\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_stakeID\",\"type\":\"uint32\"}],\"name\":\"removeManualStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_currentStakeID\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_currentStakedEvaiAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_totalProfitsDistrubuted\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_totalStakedEvaiAmount\",\"type\":\"uint64\"}],\"name\":\"setInitialState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_stakeIDs\",\"type\":\"uint32[]\"}],\"name\":\"settleStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_acceptingStakes\",\"type\":\"bool\"}],\"name\":\"updateAcceptingStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"},{\"internalType\":\"uint80\",\"name\":\"_percentageReturn\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"_bonusTerm\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"_bonusMultiplier\",\"type\":\"uint80\"},{\"internalType\":\"uint128\",\"name\":\"_minAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxAmount\",\"type\":\"uint128\"}],\"name\":\"updateStakeType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_stakeID\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_full\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"_withdrawAmount\",\"type\":\"uint64\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"evaiStableCoinFund","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000050f09629d0afdf40398a3f317cc676ca9132055c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6db16fbbde263090fdb449aeaf28fa7992f5ef78106a31234bd72f825d69ab44"}]}