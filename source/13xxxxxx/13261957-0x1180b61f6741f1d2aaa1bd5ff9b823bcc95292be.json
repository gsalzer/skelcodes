{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./interfaces/IAssetManager.sol\\\";\\nimport \\\"./interfaces/erc20/IERC20Metadata.sol\\\";\\n\\nimport \\\"./libraries/SafeMathExtends.sol\\\";\\nimport \\\"./storage/SmartPoolStorage.sol\\\";\\nimport \\\"./base/BasicVault.sol\\\";\\npragma abicoder v2;\\n/// @title Vault Contract - The implmentation of vault contract\\n/// @notice This contract extends Basic Vault and defines the join and redeem activities\\ncontract Vault is BasicVault {\\n\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using SafeMathExtends for uint256;\\n    using Address for address;\\n\\n    event PoolJoined(address indexed investor, uint256 amount);\\n    event PoolExited(address indexed investor, uint256 amount);\\n\\n    /// @notice deny contract\\n    modifier notAllowContract() {\\n        require(!address(msg.sender).isContract(), \\\"is contract\\\");\\n        _;\\n    }\\n    /// @notice not in lup\\n    modifier notInLup() {\\n        bool inLup = block.timestamp <= lup();\\n        require(!inLup, \\\"in lup\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol\\n    ) BasicVault(name, symbol){\\n\\n    }\\n\\n    /// @notice lock-up period\\n    function lup() public view returns (uint256){\\n        return SmartPoolStorage.load().lup;\\n    }\\n\\n    /// @notice lock-up period\\n    /// @param _lup period value\\n    function setLup(uint256 _lup) external onlyAdminOrGovernance {\\n        SmartPoolStorage.load().lup = _lup;\\n    }\\n\\n    /// @notice Bind join and redeem address with asset management contract\\n    /// @dev Make the accuracy of the vault consistent with the accuracy of the bound token; it can only be bound once and cannot be modified\\n    /// @param token Join and redeem vault token address\\n    /// @param am Asset managemeent address\\n    function bind(\\n        string memory name,\\n        string memory symbol,\\n        address token,\\n        address am) external onlyGovernance {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = IERC20Metadata(token).decimals();\\n        SmartPoolStorage.load().token = token;\\n        SmartPoolStorage.load().am = am;\\n        SmartPoolStorage.load().bind = true;\\n        SmartPoolStorage.load().suspend = false;\\n        SmartPoolStorage.load().allowJoin = true;\\n        SmartPoolStorage.load().allowExit = true;\\n    }\\n\\n    /// @notice Subscript vault\\n    /// @dev When subscribing to the vault, fee will be collected, and contract access is not allowed\\n    /// @param amount Subscription amount\\n    function joinPool(uint256 amount) external isAllowJoin notAllowContract {\\n        address investor = msg.sender;\\n        require(amount <= ioToken().balanceOf(investor) && amount > 0, \\\"Insufficient balance\\\");\\n        uint256 vaultAmount = convertToShare(amount);\\n        //take management fee\\n        takeOutstandingManagementFee();\\n        //take join fee\\n        uint256 fee = _takeJoinFee(investor, vaultAmount);\\n        uint256 realVaultAmount = vaultAmount.sub(fee);\\n        _mint(investor, realVaultAmount);\\n        ioToken().safeTransferFrom(investor, AM(), amount);\\n        emit PoolJoined(investor, realVaultAmount);\\n    }\\n\\n    /// @notice Redeem vault\\n    /// @dev When the vault is redeemed, fees will be collected, and contract access is not allowed\\n    /// @param amount Redeem amount\\n    function exitPool(uint256 amount) external isAllowExit notInLup notAllowContract {\\n        address investor = msg.sender;\\n        require(balanceOf(investor) >= amount && amount > 0, \\\"Insufficient balance\\\");\\n        //take exit fee\\n        uint256 exitFee = _takeExitFee(investor, amount);\\n        uint256 exitAmount = amount.sub(exitFee);\\n        //take performance fee\\n        takeOutstandingPerformanceFee(investor);\\n        //replace exitAmount\\n        uint256 balance = balanceOf(investor);\\n        exitAmount = balance < exitAmount ? balance : exitAmount;\\n        uint256 scale = exitAmount.bdiv(totalSupply());\\n        uint256 cashAmount = convertToCash(exitAmount);\\n        //take management fee\\n        takeOutstandingManagementFee();\\n        // withdraw cash\\n        IAssetManager(AM()).withdraw(investor, cashAmount, scale);\\n        _burn(investor, exitAmount);\\n        emit PoolExited(investor, exitAmount);\\n    }\\n\\n    /// @notice Redeem the underlying assets of the vault\\n    /// @dev When the vault is redeemed, fees will be collected, and contract access is not allowed\\n    /// @param amount Redeem amount\\n    function exitPoolOfUnderlying(uint256 amount) external isAllowExit notInLup notAllowContract {\\n        address investor = msg.sender;\\n        require(balanceOf(investor) >= amount && amount > 0, \\\"Insufficient balance\\\");\\n        //take exit fee\\n        uint256 exitFee = _takeExitFee(investor, amount);\\n        uint256 exitAmount = amount.sub(exitFee);\\n        //take performance fee\\n        takeOutstandingPerformanceFee(investor);\\n        //replace exitAmount\\n        uint256 balance = balanceOf(investor);\\n        exitAmount = balance < exitAmount ? balance : exitAmount;\\n        uint256 scale = exitAmount.bdiv(totalSupply());\\n        //take management fee\\n        takeOutstandingManagementFee();\\n        //harvest underlying\\n        IAssetManager(AM()).withdrawOfUnderlying(investor, scale);\\n        _burn(investor, exitAmount);\\n        emit PoolExited(investor, exitAmount);\\n    }\\n\\n    /// @notice Vault token address for joining and redeeming\\n    /// @dev This is address is created when the vault is first created.\\n    /// @return Vault token address\\n    function ioToken() public view returns (IERC20){\\n        return IERC20(SmartPoolStorage.load().token);\\n    }\\n\\n    /// @notice Vault mangement contract address\\n    /// @dev The vault management contract address is bind to the vault when the vault is created\\n    /// @return Vault management contract address\\n    function AM() public view returns (address){\\n        return SmartPoolStorage.load().am;\\n    }\\n\\n\\n    /// @notice Convert vault amount to cash amount\\n    /// @dev This converts the user vault amount to cash amount when a user redeems the vault\\n    /// @param vaultAmount Redeem vault amount\\n    /// @return Cash amount\\n    function convertToCash(uint256 vaultAmount) public virtual override view returns (uint256){\\n        uint256 cash = 0;\\n        uint256 totalSupply = totalSupply();\\n        uint256 _assets = assets();\\n        if (totalSupply == 0 || _assets == 0) {\\n            cash = 0;\\n        } else {\\n            cash = _assets.mul(vaultAmount).div(totalSupply);\\n        }\\n        return cash;\\n    }\\n\\n    /// @notice Convert cash amount to share amount\\n    /// @dev This converts cash amount to share amount when a user buys the vault\\n    /// @param cashAmount Join cash amount\\n    /// @return share amount\\n    function convertToShare(uint256 cashAmount) public virtual override view returns (uint256){\\n        uint256 totalSupply = totalSupply();\\n        uint256 _assets = assets();\\n        if (totalSupply == 0 || _assets == 0) {\\n            return cashAmount;\\n        } else {\\n            return cashAmount.mul(totalSupply).div(_assets);\\n        }\\n    }\\n\\n    /// @notice Vault total asset\\n    /// @dev This calculates vault net worth or AUM\\n    /// @return Vault total asset\\n    function assets() public view returns (uint256){\\n        return IAssetManager(AM()).assets();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/BasicVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./GovIdentity.sol\\\";\\nimport \\\"../storage/SmartPoolStorage.sol\\\";\\nimport \\\"./StandardERC20.sol\\\";\\npragma abicoder v2;\\n/// @title Basic Vault - Abstract Vault definition\\n/// @notice This contract extends ERC20, defines basic vault functions and rewrites ERC20 transferFrom function\\nabstract contract BasicVault is StandardERC20, GovIdentity {\\n\\n    using SafeMath for uint256;\\n\\n    event CapChanged(address indexed setter, uint256 oldCap, uint256 newCap);\\n    event TakeFee(SmartPoolStorage.FeeType ft, address owner, uint256 fee);\\n    event FeeChanged(address indexed setter, uint256 oldRatio, uint256 oldDenominator, uint256 newRatio, uint256 newDenominator);\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_\\n    )StandardERC20(name_, symbol_) {\\n        super._init();\\n    }\\n\\n    /// @notice restricted vault issuance\\n    modifier withinCap() {\\n        _;\\n        uint256 cap = SmartPoolStorage.load().cap;\\n        bool check = cap == 0 || totalSupply() <= cap ? true : false;\\n        require(check, \\\"Cap limit\\\");\\n    }\\n\\n    /// @notice Prohibition of vault circulation\\n    modifier deny() {\\n        require(!SmartPoolStorage.load().suspend, \\\"suspend\\\");\\n        _;\\n    }\\n\\n    /// @notice is allow join\\n    modifier isAllowJoin() {\\n        require(checkAllowJoin(), \\\"not allowJoin\\\");\\n        _;\\n    }\\n\\n    /// @notice is allow exit\\n    modifier isAllowExit() {\\n        require(checkAllowExit(), \\\"not allowExit\\\");\\n        _;\\n    }\\n\\n    /// @notice Check allow join\\n    /// @return bool\\n    function checkAllowJoin()public view returns(bool){\\n        return SmartPoolStorage.load().allowJoin;\\n    }\\n\\n    /// @notice Check allow exit\\n    /// @return bool\\n    function checkAllowExit()public view returns(bool){\\n        return SmartPoolStorage.load().allowExit;\\n    }\\n\\n    /// @notice Update weighted average net worth\\n    /// @dev This function is used by the new transferFrom/transfer function\\n    /// @param account Account address\\n    /// @param addAmount Newly added vault amount\\n    /// @param newNet New weighted average net worth\\n    function _updateAvgNet(address account, uint256 addAmount, uint256 newNet) internal {\\n        uint256 balance = balanceOf(account);\\n        uint256 oldNet = SmartPoolStorage.load().nets[account];\\n        uint256 total = balance.add(addAmount);\\n        if (total != 0) {\\n            uint256 nextNet = oldNet.mul(balance).add(newNet.mul(addAmount)).div(total);\\n            SmartPoolStorage.load().nets[account] = nextNet;\\n        }\\n    }\\n\\n\\n    /// @notice Overwrite transfer function\\n    /// @dev The purpose is to update weighted average net worth\\n    /// @param sender Sender address\\n    /// @param recipient Recipient address\\n    /// @param amount Transfer amount\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override deny {\\n        uint256 newNet = SmartPoolStorage.load().nets[sender];\\n        _updateAvgNet(recipient, amount, newNet);\\n        super._transfer(sender, recipient, amount);\\n        if (balanceOf(sender) == 0) {\\n            SmartPoolStorage.load().nets[sender] = 0;\\n        }\\n    }\\n\\n    /// @notice Overwrite mint function\\n    /// @dev the purpose is to set the initial net worth of the vault. It also limit the max vault cap\\n    /// @param recipient Recipient address\\n    /// @param amount Mint amount\\n    function _mint(address recipient, uint256 amount) internal virtual override withinCap deny {\\n        uint256 newNet = globalNetValue();\\n        if (newNet == 0) newNet = 1e18;\\n        _updateAvgNet(recipient, amount, newNet);\\n        super._mint(recipient, amount);\\n    }\\n\\n    /// @notice Overwrite burn function\\n    /// @dev The purpose is to set the net worth of vault to 0 when the balance of the account is 0\\n    /// @param account Account address\\n    /// @param amount Burn amount\\n    function _burn(address account, uint256 amount) internal virtual override deny {\\n        super._burn(account, amount);\\n        if (balanceOf(account) == 0) {\\n            SmartPoolStorage.load().nets[account] = 0;\\n        }\\n    }\\n\\n    /// @notice Overwrite vault transferFrom function\\n    /// @dev The overwrite is to simplify the transaction behavior, and the authorization operation behavior can be avoided when the vault transaction payer is the function initiator\\n    /// @param sender Sender address\\n    /// @param recipient Recipient address\\n    /// @param amount Transfer amount\\n    /// @return Transfer result\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        require(\\n            _msgSender() == sender || amount <= allowance(sender, _msgSender()),\\n            \\\"ERR_KTOKEN_BAD_CALLER\\\"\\n        );\\n        _transfer(sender, recipient, amount);\\n        if (_msgSender() != sender) {\\n            _approve(sender, _msgSender(), allowance(sender, _msgSender()).sub(amount, \\\"BasicVault: transfer amount exceeds allowance\\\"));\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Vault cap\\n    /// @dev The max number of vault to be issued\\n    /// @return Max vault cap\\n    function getCap() public view returns (uint256){\\n        return SmartPoolStorage.load().cap;\\n    }\\n\\n    /// @notice Set max vault cap\\n    /// @dev To set max vault cap\\n    /// @param cap Max vault cap\\n    function setCap(uint256 cap) external onlyAdminOrGovernance() {\\n        uint256 oldCap = SmartPoolStorage.load().cap;\\n        SmartPoolStorage.load().cap = cap;\\n        emit CapChanged(msg.sender, oldCap, cap);\\n    }\\n\\n    /// @notice The net worth of the vault from the time the last fee collected\\n    /// @dev This is used to calculate the performance fee\\n    /// @param account Account address\\n    /// @return The net worth of the vault\\n    function accountNetValue(address account) public view returns (uint256){\\n        return SmartPoolStorage.load().nets[account];\\n    }\\n\\n    /// @notice The current vault net worth\\n    /// @dev This is used to update and calculate account net worth\\n    /// @return The net worth of the vault\\n    function globalNetValue() public view returns (uint256){\\n        return convertToCash(1e18);\\n    }\\n\\n    /// @notice Get fee by type\\n    /// @dev (0=JOIN_FEE,1=EXIT_FEE,2=MANAGEMENT_FEE,3=PERFORMANCE_FEE,4=TURNOVER_FEE)\\n    /// @param ft Fee type\\n    function getFee(SmartPoolStorage.FeeType ft) public view returns (SmartPoolStorage.Fee memory){\\n        return SmartPoolStorage.load().fees[ft];\\n    }\\n\\n    /// @notice Set fee by type\\n    /// @dev Only Governance address can set fees (0=JOIN_FEE,1=EXIT_FEE,2=MANAGEMENT_FEE,3=PERFORMANCE_FEE,4=TURNOVER_FEE)\\n    /// @param ft Fee type\\n    /// @param ratio Fee ratio\\n    /// @param denominator The max ratio limit\\n    /// @param minLine The minimum line to charge a fee\\n    function setFee(SmartPoolStorage.FeeType ft, uint256 ratio, uint256 denominator, uint256 minLine) external onlyAdminOrGovernance {\\n        require(ratio <= denominator, \\\"ratio<=denominator\\\");\\n        SmartPoolStorage.Fee storage fee = SmartPoolStorage.load().fees[ft];\\n        require(fee.denominator == 0, \\\"already initialized \\\");\\n        emit FeeChanged(msg.sender, fee.ratio, fee.denominator, ratio, denominator);\\n        fee.ratio = ratio;\\n        fee.denominator = denominator;\\n        fee.minLine = minLine;\\n        fee.lastTimestamp = block.timestamp;\\n    }\\n\\n    /// @notice Collect outstanding management fee\\n    /// @dev The outstanding management fee is calculated from the time the last fee is collected.\\n    function takeOutstandingManagementFee() public returns (uint256){\\n        SmartPoolStorage.Fee storage fee = SmartPoolStorage.load().fees[SmartPoolStorage.FeeType.MANAGEMENT_FEE];\\n        uint256 outstandingFee = calcManagementFee();\\n        if (outstandingFee == 0 || outstandingFee < fee.minLine) return 0;\\n        _mint(getRewards(), outstandingFee);\\n        fee.lastTimestamp = block.timestamp;\\n        emit TakeFee(SmartPoolStorage.FeeType.MANAGEMENT_FEE, address(0), outstandingFee);\\n        return outstandingFee;\\n    }\\n\\n    /// @notice Collect performance fee\\n    /// @dev Performance fee is calculated by each address. The new net worth of the address is updated each time the performance is collected.\\n    /// @param target Account address to collect performance fee\\n    function takeOutstandingPerformanceFee(address target) public returns (uint256){\\n        if (target == getRewards()) return 0;\\n        uint256 netValue = globalNetValue();\\n        SmartPoolStorage.Fee storage fee = SmartPoolStorage.load().fees[SmartPoolStorage.FeeType.PERFORMANCE_FEE];\\n        uint256 outstandingFee = calcPerformanceFee(target, netValue);\\n        if (outstandingFee == 0 || outstandingFee < fee.minLine) return 0;\\n        _transfer(target, getRewards(), outstandingFee);\\n        fee.lastTimestamp = block.timestamp;\\n        SmartPoolStorage.load().nets[target] = netValue;\\n        emit TakeFee(SmartPoolStorage.FeeType.PERFORMANCE_FEE, target, outstandingFee);\\n        return outstandingFee;\\n    }\\n\\n    /// @notice Collect Join fee\\n    /// @dev The join fee is collected each time a user buys the vault\\n    /// @param target Account address to collect join fee\\n    /// @param vaultAmount Vault amount\\n    function _takeJoinFee(address target, uint256 vaultAmount) internal returns (uint256){\\n        if (target == getRewards()) return 0;\\n        SmartPoolStorage.Fee memory fee = getFee(SmartPoolStorage.FeeType.JOIN_FEE);\\n        uint256 payFee = calcRatioFee(SmartPoolStorage.FeeType.JOIN_FEE, vaultAmount);\\n        if (payFee == 0 || payFee < fee.minLine) return 0;\\n        _mint(getRewards(), payFee);\\n        emit TakeFee(SmartPoolStorage.FeeType.JOIN_FEE, target, payFee);\\n        return payFee;\\n    }\\n\\n    /// @notice Collect Redeem fee\\n    /// @dev The redeem fee is collected when a user redeems the vault\\n    /// @param target Account address to collect redeem fee\\n    /// @param vaultAmount Vault amount\\n    function _takeExitFee(address target, uint256 vaultAmount) internal returns (uint256){\\n        if (target == getRewards()) return 0;\\n        SmartPoolStorage.Fee memory fee = getFee(SmartPoolStorage.FeeType.EXIT_FEE);\\n        uint256 payFee = calcRatioFee(SmartPoolStorage.FeeType.EXIT_FEE, vaultAmount);\\n        if (payFee == 0 || payFee < fee.minLine) return 0;\\n        _transfer(target, getRewards(), payFee);\\n        emit TakeFee(SmartPoolStorage.FeeType.EXIT_FEE, target, payFee);\\n        return payFee;\\n    }\\n\\n    /// @notice Calculate management fee\\n    /// @dev Outstanding management fee is calculated from the time the last fee is collected.\\n    function calcManagementFee() public view returns (uint256){\\n        SmartPoolStorage.Fee memory fee = getFee(SmartPoolStorage.FeeType.MANAGEMENT_FEE);\\n        uint256 denominator = fee.denominator == 0 ? 1000 : fee.denominator;\\n        if (fee.lastTimestamp == 0) return 0;\\n        uint256 diff = block.timestamp.sub(fee.lastTimestamp);\\n        return totalSupply().mul(diff).mul(fee.ratio).div(denominator * 365.25 days);\\n    }\\n\\n    /// @notice Calculate performance fee\\n    /// @dev Performance fee is calculated by each address. The new net worth line of the address is updated each time the performance is collected.\\n    /// @param target Account address to collect performance fee\\n    /// @param newNet New net worth\\n    function calcPerformanceFee(address target, uint256 newNet) public view returns (uint256){\\n        if (newNet == 0) return 0;\\n        uint256 balance = balanceOf(target);\\n        uint256 oldNet = accountNetValue(target);\\n        uint256 diff = newNet > oldNet ? newNet.sub(oldNet) : 0;\\n        SmartPoolStorage.Fee memory fee = getFee(SmartPoolStorage.FeeType.PERFORMANCE_FEE);\\n        uint256 denominator = fee.denominator == 0 ? 1000 : fee.denominator;\\n        uint256 cash = diff.mul(balance).mul(fee.ratio).div(denominator);\\n        return cash.div(newNet);\\n    }\\n\\n    /// @notice Calculate the fee by ratio\\n    /// @dev This is used to calculate join and redeem fee\\n    /// @param ft Fee type\\n    /// @param vaultAmount vault amount\\n    function calcRatioFee(SmartPoolStorage.FeeType ft, uint256 vaultAmount) public view returns (uint256){\\n        if (vaultAmount == 0) return 0;\\n        SmartPoolStorage.Fee memory fee = getFee(ft);\\n        uint256 denominator = fee.denominator == 0 ? 1000 : fee.denominator;\\n        uint256 amountRatio = vaultAmount.div(denominator);\\n        return amountRatio.mul(fee.ratio);\\n    }\\n\\n    /// @notice vault maintenance\\n    /// @dev stop and open vault circulation\\n    /// @param _value status value\\n    function maintain(bool _value) external onlyAdminOrGovernance {\\n        SmartPoolStorage.load().suspend = _value;\\n    }\\n\\n    /// @notice vault allowJoin\\n    /// @dev stop and open vault circulation\\n    /// @param _value status value\\n    function allowJoin(bool _value) external onlyAdminOrGovernance {\\n        SmartPoolStorage.load().allowJoin = _value;\\n    }\\n\\n    /// @notice vault allowExit\\n    /// @dev stop and open vault circulation\\n    /// @param _value status value\\n    function allowExit(bool _value) external onlyAdminOrGovernance {\\n        SmartPoolStorage.load().allowExit = _value;\\n    }\\n\\n    /// @notice Convert vault amount to cash amount\\n    /// @dev This converts the user vault amount to cash amount when a user redeems the vault\\n    /// @param vaultAmount Redeem vault amount\\n    /// @return Cash amount\\n    function convertToCash(uint256 vaultAmount) public virtual view returns (uint256);\\n\\n    /// @notice Convert cash amount to share amount\\n    /// @dev This converts cash amount to share amount when a user buys the vault\\n    /// @param cashAmount Join cash amount\\n    /// @return share amount\\n    function convertToShare(uint256 cashAmount) public virtual view returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/storage/SmartPoolStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nlibrary SmartPoolStorage {\\n\\n    bytes32 public constant sSlot = keccak256(\\\"SmartPoolStorage.storage.location\\\");\\n\\n    struct Storage {\\n        mapping(FeeType => Fee) fees;\\n        mapping(address => uint256) nets;\\n        address token;\\n        address am;\\n        uint256 cap;\\n        uint256 lup;\\n        bool bind;\\n        bool suspend;\\n        bool allowJoin;\\n        bool allowExit;\\n    }\\n\\n    struct Fee {\\n        uint256 ratio;\\n        uint256 denominator;\\n        uint256 lastTimestamp;\\n        uint256 minLine;\\n    }\\n\\n    enum FeeType{\\n        JOIN_FEE, EXIT_FEE, MANAGEMENT_FEE, PERFORMANCE_FEE,TURNOVER_FEE\\n    }\\n\\n    function load() internal pure returns (Storage storage s) {\\n        bytes32 loc = sSlot;\\n        assembly {\\n            s.slot := loc\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMathExtends.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\n// a library for performing various math operations\\n\\nlibrary SafeMathExtends {\\n\\n    uint256 internal constant BONE = 10 ** 18;\\n\\n    // Add two numbers together checking for overflows\\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    // subtract two numbers and return diffecerence when it underflows\\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    // Subtract two numbers checking for underflows\\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (uint256 c, bool flag) = bsubSign(a, b);\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    // Multiply two 18 decimals numbers\\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c1 = c0 + (BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c2 = c1 / BONE;\\n        return c2;\\n    }\\n\\n    // Divide two 18 decimals numbers\\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\n        uint256 c0 = a * BONE;\\n        require(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\");\\n        // bmul overflow\\n        uint256 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\");\\n        //  badd require\\n        uint256 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/erc20/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IERC20Metadata {\\n\\n    function name() external view returns(string memory);\\n\\n    function symbol() external view returns(string memory);\\n\\n    function decimals() external view returns(uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAssetManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\n/// @title Asset Manager - The asset manager interface\\n/// @notice This contract is used to manage value asset\\ninterface IAssetManager {\\n\\n    /// @notice Total asset\\n    /// @dev This function calculates the net worth or AUM\\n    /// @return Total asset\\n    function assets()external view returns(uint256);\\n\\n    /// @notice Withdraw asset\\n    /// @dev Only value contract can withdraw asset\\n    /// @param to Withdraw address\\n    /// @param amount Withdraw amount\\n    /// @param scale Withdraw percentage\\n    function withdraw(address to,uint256 amount,uint256 scale)external;\\n\\n    /// @notice Withdraw underlying asset\\n    /// @dev Only value contract can withdraw underlying asset\\n    /// @param to Withdraw address\\n    /// @param scale Withdraw percentage\\n    function withdrawOfUnderlying(address to,uint256 scale)external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/base/StandardERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract StandardERC20  is Context, IERC20 {\\n\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string internal _name;\\n    string internal _symbol;\\n    uint8 internal _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"contracts/base/GovIdentity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"../storage/GovIdentityStorage.sol\\\";\\n\\n/// @title manager role\\n/// @notice provide a unified identity address pool\\ncontract GovIdentity {\\n\\n    constructor() {\\n        _init();\\n    }\\n\\n    function _init() internal{\\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\\n        identity.governance = msg.sender;\\n        identity.rewards = msg.sender;\\n        identity.strategist[msg.sender]=true;\\n        identity.admin[msg.sender]=true;\\n    }\\n\\n    modifier onlyAdmin() {\\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\\n        require(isAdmin(msg.sender), \\\"!admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategist() {\\n        require(isStrategist(msg.sender), \\\"!strategist\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\\n        require(msg.sender == identity.governance, \\\"!governance\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategistOrGovernance() {\\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\\n        require(identity.strategist[msg.sender] || msg.sender == identity.governance, \\\"!governance and !strategist\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminOrGovernance() {\\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\\n        require(identity.admin[msg.sender] || msg.sender == identity.governance, \\\"!governance and !admin\\\");\\n        _;\\n    }\\n\\n    function setGovernance(address _governance) public onlyGovernance{\\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\\n        identity.governance = _governance;\\n    }\\n\\n    function setRewards(address _rewards) public onlyGovernance{\\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\\n        identity.rewards = _rewards;\\n    }\\n\\n    function setStrategist(address _strategist,bool enable) public onlyGovernance{\\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\\n        identity.strategist[_strategist]=enable;\\n    }\\n\\n    function setAdmin(address _admin,bool enable) public onlyGovernance{\\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\\n        identity.admin[_admin]=enable;\\n    }\\n\\n    function getGovernance() public view returns(address){\\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\\n        return identity.governance;\\n    }\\n\\n    function getRewards() public view returns(address){\\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\\n        return identity.rewards ;\\n    }\\n\\n    function isStrategist(address _strategist) public view returns(bool){\\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\\n        return identity.strategist[_strategist];\\n    }\\n\\n    function isAdmin(address _admin) public view returns(bool){\\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\\n        return identity.admin[_admin];\\n    }\\n\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storage/GovIdentityStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nlibrary GovIdentityStorage {\\n\\n  bytes32 public constant govSlot = keccak256(\\\"GovIdentityStorage.storage.location\\\");\\n\\n  struct Identity{\\n    address governance;\\n    address rewards;\\n    mapping(address=>bool) strategist;\\n    mapping(address=>bool) admin;\\n  }\\n\\n  function load() internal pure returns (Identity storage gov) {\\n    bytes32 loc = govSlot;\\n    assembly {\\n      gov.slot := loc\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"CapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDenominator\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum SmartPoolStorage.FeeType\",\"name\":\"ft\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TakeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountNetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"allowExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"allowJoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"am\",\"type\":\"address\"}],\"name\":\"bind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcManagementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newNet\",\"type\":\"uint256\"}],\"name\":\"calcPerformanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SmartPoolStorage.FeeType\",\"name\":\"ft\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vaultAmount\",\"type\":\"uint256\"}],\"name\":\"calcRatioFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAllowExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAllowJoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultAmount\",\"type\":\"uint256\"}],\"name\":\"convertToCash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cashAmount\",\"type\":\"uint256\"}],\"name\":\"convertToShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exitPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exitPoolOfUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SmartPoolStorage.FeeType\",\"name\":\"ft\",\"type\":\"uint8\"}],\"name\":\"getFee\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLine\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartPoolStorage.Fee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalNetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ioToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"isStrategist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"maintain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SmartPoolStorage.FeeType\",\"name\":\"ft\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLine\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lup\",\"type\":\"uint256\"}],\"name\":\"setLup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOutstandingManagementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"takeOutstandingPerformanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Vault","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000010556e696f6365616e205661756c742031000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003554f310000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}