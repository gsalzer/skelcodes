{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"@jbox/sol/contracts/FundingCycles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@paulrberg/contracts/math/PRBMath.sol\\\";\\n\\nimport \\\"./interfaces/IFundingCycles.sol\\\";\\nimport \\\"./interfaces/IPrices.sol\\\";\\nimport \\\"./abstract/TerminalUtility.sol\\\";\\n\\n/** \\n  @notice Manage funding cycle configurations, accounting, and scheduling.\\n*/\\ncontract FundingCycles is TerminalUtility, IFundingCycles {\\n    // --- private stored contants --- //\\n\\n    // The number of seconds in a day.\\n    uint256 private constant SECONDS_IN_DAY = 86400;\\n\\n    // --- private stored properties --- //\\n\\n    // Stores the reconfiguration properties of each funding cycle, packed into one storage slot.\\n    mapping(uint256 => uint256) private _packedConfigurationPropertiesOf;\\n\\n    // Stores the properties added by the mechanism to manage and schedule each funding cycle, packed into one storage slot.\\n    mapping(uint256 => uint256) private _packedIntrinsicPropertiesOf;\\n\\n    // Stores the metadata for each funding cycle, packed into one storage slot.\\n    mapping(uint256 => uint256) private _metadataOf;\\n\\n    // Stores the amount that each funding cycle can tap funding cycle.\\n    mapping(uint256 => uint256) private _targetOf;\\n\\n    // Stores the amount that has been tapped within each funding cycle.\\n    mapping(uint256 => uint256) private _tappedOf;\\n\\n    // --- public stored constants --- //\\n\\n    /// @notice The weight used for each project's first funding cycle.\\n    uint256 public constant override BASE_WEIGHT = 1E24;\\n\\n    /// @notice The maximum value that a cycle limit can be set to.\\n    uint256 public constant override MAX_CYCLE_LIMIT = 32;\\n\\n    // --- public stored properties --- //\\n\\n    /// @notice The ID of the latest funding cycle for each project.\\n    mapping(uint256 => uint256) public override latestIdOf;\\n\\n    /// @notice The total number of funding cycles created, which is used for issuing funding cycle IDs.\\n    /// @dev Funding cycles have IDs > 0.\\n    uint256 public override count = 0;\\n\\n    // --- external views --- //\\n\\n    /**\\n        @notice \\n        Get the funding cycle with the given ID.\\n\\n        @param _fundingCycleId The ID of the funding cycle to get.\\n\\n        @return _fundingCycle The funding cycle.\\n    */\\n    function get(uint256 _fundingCycleId)\\n        external\\n        view\\n        override\\n        returns (FundingCycle memory)\\n    {\\n        // The funding cycle should exist.\\n        require(\\n            _fundingCycleId > 0 && _fundingCycleId <= count,\\n            \\\"FundingCycle::get: NOT_FOUND\\\"\\n        );\\n\\n        return _getStruct(_fundingCycleId);\\n    }\\n\\n    /**\\n        @notice \\n        The funding cycle that's next up for a project, and therefor not currently accepting payments.\\n\\n        @dev \\n        This runs roughly similar logic to `_configurable`.\\n\\n        @param _projectId The ID of the project being looked through.\\n\\n        @return _fundingCycle The queued funding cycle.\\n    */\\n    function queuedOf(uint256 _projectId)\\n        external\\n        view\\n        override\\n        returns (FundingCycle memory)\\n    {\\n        // The project must have funding cycles.\\n        if (latestIdOf[_projectId] == 0) return _getStruct(0);\\n\\n        // Get a reference to the standby funding cycle.\\n        uint256 _fundingCycleId = _standby(_projectId);\\n\\n        // If it exists, return it.\\n        if (_fundingCycleId > 0) return _getStruct(_fundingCycleId);\\n\\n        // Get a reference to the eligible funding cycle.\\n        _fundingCycleId = _eligible(_projectId);\\n\\n        // If an eligible funding cycle exists...\\n        if (_fundingCycleId > 0) {\\n            // Get the necessary properties for the standby funding cycle.\\n            FundingCycle memory _fundingCycle = _getStruct(_fundingCycleId);\\n\\n            // There's no queued if the current has a duration of 0.\\n            if (_fundingCycle.duration == 0) return _getStruct(0);\\n\\n            // Check to see if the correct ballot is approved for this funding cycle.\\n            // If so, return a funding cycle based on it.\\n            if (_isApproved(_fundingCycle))\\n                return _mockFundingCycleBasedOn(_fundingCycle, false);\\n\\n            // If it hasn't been approved, set the ID to be its base funding cycle, which carries the last approved configuration.\\n            _fundingCycleId = _fundingCycle.basedOn;\\n        } else {\\n            // No upcoming funding cycle found that is eligible to become active,\\n            // so use the ID of the latest active funding cycle, which carries the last approved configuration.\\n            _fundingCycleId = latestIdOf[_projectId];\\n        }\\n\\n        // A funding cycle must exist.\\n        if (_fundingCycleId == 0) return _getStruct(0);\\n\\n        // Return a mock of what its second next up funding cycle would be.\\n        // Use second next because the next would be a mock of the current funding cycle.\\n        return _mockFundingCycleBasedOn(_getStruct(_fundingCycleId), false);\\n    }\\n\\n    /**\\n        @notice \\n        The funding cycle that is currently active for the specified project.\\n\\n        @dev \\n        This runs very similar logic to `_tappable`.\\n\\n        @param _projectId The ID of the project being looked through.\\n\\n        @return fundingCycle The current funding cycle.\\n    */\\n    function currentOf(uint256 _projectId)\\n        external\\n        view\\n        override\\n        returns (FundingCycle memory fundingCycle)\\n    {\\n        // The project must have funding cycles.\\n        if (latestIdOf[_projectId] == 0) return _getStruct(0);\\n\\n        // Check for an active funding cycle.\\n        uint256 _fundingCycleId = _eligible(_projectId);\\n\\n        // If no active funding cycle is found, check if there is a standby funding cycle.\\n        // If one exists, it will become active one it has been tapped.\\n        if (_fundingCycleId == 0) _fundingCycleId = _standby(_projectId);\\n\\n        // Keep a reference to the eligible funding cycle.\\n        FundingCycle memory _fundingCycle;\\n\\n        // If a standy funding cycle exists...\\n        if (_fundingCycleId > 0) {\\n            // Get the necessary properties for the standby funding cycle.\\n            _fundingCycle = _getStruct(_fundingCycleId);\\n\\n            // Check to see if the correct ballot is approved for this funding cycle, and that it has started.\\n            if (\\n                _fundingCycle.start <= block.timestamp &&\\n                _isApproved(_fundingCycle)\\n            ) return _fundingCycle;\\n\\n            // If it hasn't been approved, set the ID to be the based funding cycle,\\n            // which carries the last approved configuration.\\n            _fundingCycleId = _fundingCycle.basedOn;\\n        } else {\\n            // No upcoming funding cycle found that is eligible to become active,\\n            // so us the ID of the latest active funding cycle, which carries the last approved configuration.\\n            _fundingCycleId = latestIdOf[_projectId];\\n        }\\n\\n        // The funding cycle cant be 0.\\n        if (_fundingCycleId == 0) return _getStruct(0);\\n\\n        // The funding cycle to base a current one on.\\n        _fundingCycle = _getStruct(_fundingCycleId);\\n\\n        // Return a mock of what the next funding cycle would be like,\\n        // which would become active one it has been tapped.\\n        return _mockFundingCycleBasedOn(_fundingCycle, true);\\n    }\\n\\n    /** \\n      @notice \\n      The currency ballot state of the project.\\n\\n      @param _projectId The ID of the project to check for a pending reconfiguration.\\n\\n      @return The current ballot's state.\\n    */\\n    function currentBallotStateOf(uint256 _projectId)\\n        external\\n        view\\n        override\\n        returns (BallotState)\\n    {\\n        // The project must have funding cycles.\\n        require(\\n            latestIdOf[_projectId] > 0,\\n            \\\"FundingCycles::currentBallotStateOf: NOT_FOUND\\\"\\n        );\\n\\n        // Get a reference to the latest funding cycle ID.\\n        uint256 _fundingCycleId = latestIdOf[_projectId];\\n\\n        // Get the necessary properties for the latest funding cycle.\\n        FundingCycle memory _fundingCycle = _getStruct(_fundingCycleId);\\n\\n        // If the latest funding cycle is the first, or if it has already started, it must be approved.\\n        if (_fundingCycle.basedOn == 0) return BallotState.Standby;\\n\\n        return\\n            _ballotState(\\n                _fundingCycleId,\\n                _fundingCycle.configured,\\n                _fundingCycle.basedOn\\n            );\\n    }\\n\\n    // --- external transactions --- //\\n\\n    /** \\n      @param _terminalDirectory A directory of a project's current Juicebox terminal to receive payments in.\\n    */\\n    constructor(ITerminalDirectory _terminalDirectory)\\n        TerminalUtility(_terminalDirectory)\\n    {}\\n\\n    /**\\n        @notice \\n        Configures the next eligible funding cycle for the specified project.\\n\\n        @dev\\n        Only a project's current terminal can configure its funding cycles.\\n\\n        @param _projectId The ID of the project being reconfigured.\\n        @param _properties The funding cycle configuration.\\n          @dev _properties.target The amount that the project wants to receive in each funding cycle. 18 decimals.\\n          @dev _properties.currency The currency of the `_target`. Send 0 for ETH or 1 for USD.\\n          @dev _properties.duration The duration of the funding cycle for which the `_target` amount is needed. Measured in days. \\n            Set to 0 for no expiry and to be able to reconfigure anytime.\\n          @dev _cycleLimit The number of cycles that this configuration should last for before going back to the last permanent. This does nothing for a project's first funding cycle.\\n          @dev _properties.discountRate A number from 0-200 indicating how valuable a contribution to this funding cycle is compared to previous funding cycles.\\n            If it's 0, each funding cycle will have equal weight.\\n            If the number is 100, a contribution to the next funding cycle will only give you 90% of tickets given to a contribution of the same amount during the current funding cycle.\\n            If the number is 200, a contribution to the next funding cycle will only give you 80% of tickets given to a contribution of the same amoutn during the current funding cycle.\\n            If the number is 201, an non-recurring funding cycle will get made.\\n          @dev _ballot The new ballot that will be used to approve subsequent reconfigurations.\\n        @param _metadata Data to associate with this funding cycle configuration.\\n        @param _fee The fee that this configuration will incure when tapping.\\n        @param _configureActiveFundingCycle If a funding cycle that has already started should be configurable.\\n\\n        @return fundingCycle The funding cycle that the configuration will take effect during.\\n    */\\n    function configure(\\n        uint256 _projectId,\\n        FundingCycleProperties calldata _properties,\\n        uint256 _metadata,\\n        uint256 _fee,\\n        bool _configureActiveFundingCycle\\n    )\\n        external\\n        override\\n        onlyTerminal(_projectId)\\n        returns (FundingCycle memory fundingCycle)\\n    {\\n        // Duration must fit in a uint16.\\n        require(\\n            _properties.duration <= type(uint16).max,\\n            \\\"FundingCycles::configure: BAD_DURATION\\\"\\n        );\\n\\n        // Currency must be less than the limit.\\n        require(\\n            _properties.cycleLimit <= MAX_CYCLE_LIMIT,\\n            \\\"FundingCycles::configure: BAD_CYCLE_LIMIT\\\"\\n        );\\n\\n        // Discount rate token must be less than or equal to 100%.\\n        require(\\n            _properties.discountRate <= 201,\\n            \\\"FundingCycles::configure: BAD_DISCOUNT_RATE\\\"\\n        );\\n\\n        // Currency must fit into a uint8.\\n        require(\\n            _properties.currency <= type(uint8).max,\\n            \\\"FundingCycles::configure: BAD_CURRENCY\\\"\\n        );\\n\\n        // Fee must be less than or equal to 100%.\\n        require(_fee <= 200, \\\"FundingCycles::configure: BAD_FEE\\\");\\n\\n        // Set the configuration timestamp is now.\\n        uint256 _configured = block.timestamp;\\n\\n        // Gets the ID of the funding cycle to reconfigure.\\n        uint256 _fundingCycleId = _configurable(\\n            _projectId,\\n            _configured,\\n            _configureActiveFundingCycle\\n        );\\n\\n        // Store the configuration.\\n        _packAndStoreConfigurationProperties(\\n            _fundingCycleId,\\n            _configured,\\n            _properties.cycleLimit,\\n            _properties.ballot,\\n            _properties.duration,\\n            _properties.currency,\\n            _fee,\\n            _properties.discountRate\\n        );\\n\\n        // Set the target amount.\\n        _targetOf[_fundingCycleId] = _properties.target;\\n\\n        // Set the metadata.\\n        _metadataOf[_fundingCycleId] = _metadata;\\n\\n        emit Configure(\\n            _fundingCycleId,\\n            _projectId,\\n            _configured,\\n            _properties,\\n            _metadata,\\n            msg.sender\\n        );\\n\\n        return _getStruct(_fundingCycleId);\\n    }\\n\\n    /** \\n      @notice \\n      Tap funds from a project's currently tappable funding cycle.\\n\\n      @dev\\n      Only a project's current terminal can tap funds for its funding cycles.\\n\\n      @param _projectId The ID of the project being tapped.\\n      @param _amount The amount being tapped.\\n\\n      @return fundingCycle The tapped funding cycle.\\n    */\\n    function tap(uint256 _projectId, uint256 _amount)\\n        external\\n        override\\n        onlyTerminal(_projectId)\\n        returns (FundingCycle memory fundingCycle)\\n    {\\n        // Get a reference to the funding cycle being tapped.\\n        uint256 fundingCycleId = _tappable(_projectId);\\n\\n        // Get a reference to how much has already been tapped from this funding cycle.\\n        uint256 _tapped = _tappedOf[fundingCycleId];\\n\\n        // Amount must be within what is still tappable.\\n        require(\\n            _amount <= _targetOf[fundingCycleId] - _tapped,\\n            \\\"FundingCycles::tap: INSUFFICIENT_FUNDS\\\"\\n        );\\n\\n        // The new amount that has been tapped.\\n        uint256 _newTappedAmount = _tapped + _amount;\\n\\n        // Store the new amount.\\n        _tappedOf[fundingCycleId] = _newTappedAmount;\\n\\n        emit Tap(\\n            fundingCycleId,\\n            _projectId,\\n            _amount,\\n            _newTappedAmount,\\n            msg.sender\\n        );\\n\\n        return _getStruct(fundingCycleId);\\n    }\\n\\n    // --- private helper functions --- //\\n\\n    /**\\n        @notice \\n        Returns the configurable funding cycle for this project if it exists, otherwise creates one.\\n\\n        @param _projectId The ID of the project to find a configurable funding cycle for.\\n        @param _configured The time at which the configuration is occuring.\\n        @param _configureActiveFundingCycle If the active funding cycle should be configurable. Otherwise the next funding cycle will be used.\\n\\n        @return fundingCycleId The ID of the configurable funding cycle.\\n    */\\n    function _configurable(\\n        uint256 _projectId,\\n        uint256 _configured,\\n        bool _configureActiveFundingCycle\\n    ) private returns (uint256 fundingCycleId) {\\n        // If there's not yet a funding cycle for the project, return the ID of a newly created one.\\n        if (latestIdOf[_projectId] == 0)\\n            return _init(_projectId, _getStruct(0), block.timestamp, false);\\n\\n        // Get the standby funding cycle's ID.\\n        fundingCycleId = _standby(_projectId);\\n\\n        // If it exists, make sure its updated, then return it.\\n        if (fundingCycleId > 0) {\\n            // Get the funding cycle that the specified one is based on.\\n            FundingCycle memory _baseFundingCycle = _getStruct(\\n                _getStruct(fundingCycleId).basedOn\\n            );\\n\\n            // The base's ballot must have ended.\\n            _updateFundingCycle(\\n                fundingCycleId,\\n                _baseFundingCycle,\\n                _getTimeAfterBallot(_baseFundingCycle, _configured),\\n                false\\n            );\\n            return fundingCycleId;\\n        }\\n\\n        // Get the active funding cycle's ID.\\n        fundingCycleId = _eligible(_projectId);\\n\\n        // If the ID of an eligible funding cycle exists, it's approved, and active funding cycles are configurable, return it.\\n        if (fundingCycleId > 0) {\\n            if (!_isIdApproved(fundingCycleId)) {\\n                // If it hasn't been approved, set the ID to be the based funding cycle,\\n                // which carries the last approved configuration.\\n                fundingCycleId = _getStruct(fundingCycleId).basedOn;\\n            } else if (_configureActiveFundingCycle) {\\n                return fundingCycleId;\\n            }\\n        } else {\\n            // Get the ID of the latest funding cycle which has the latest reconfiguration.\\n            fundingCycleId = latestIdOf[_projectId];\\n        }\\n\\n        // Determine if the configurable funding cycle can only take effect on or after a certain date.\\n        uint256 _mustStartOnOrAfter;\\n\\n        // Base off of the active funding cycle if it exists.\\n        FundingCycle memory _fundingCycle = _getStruct(fundingCycleId);\\n\\n        // Make sure the funding cycle is recurring.\\n        require(\\n            _fundingCycle.discountRate < 201,\\n            \\\"FundingCycles::_configurable: NON_RECURRING\\\"\\n        );\\n\\n        if (_configureActiveFundingCycle) {\\n            // If the duration is zero, always go back to the original start.\\n            if (_fundingCycle.duration == 0) {\\n                _mustStartOnOrAfter = _fundingCycle.start;\\n            } else {\\n                // Set to the start time of the current active start time.\\n                uint256 _timeFromStartMultiple = (block.timestamp -\\n                    _fundingCycle.start) %\\n                    (_fundingCycle.duration * SECONDS_IN_DAY);\\n                _mustStartOnOrAfter = block.timestamp - _timeFromStartMultiple;\\n            }\\n        } else {\\n            // The ballot must have ended.\\n            _mustStartOnOrAfter = _getTimeAfterBallot(\\n                _fundingCycle,\\n                _configured\\n            );\\n        }\\n\\n        // Return the newly initialized configurable funding cycle.\\n        fundingCycleId = _init(\\n            _projectId,\\n            _fundingCycle,\\n            _mustStartOnOrAfter,\\n            false\\n        );\\n    }\\n\\n    /**\\n        @notice \\n        Returns the funding cycle that can be tapped at the time of the call.\\n\\n        @param _projectId The ID of the project to find a configurable funding cycle for.\\n\\n        @return fundingCycleId The ID of the tappable funding cycle.\\n    */\\n    function _tappable(uint256 _projectId)\\n        private\\n        returns (uint256 fundingCycleId)\\n    {\\n        // Check for the ID of an eligible funding cycle.\\n        fundingCycleId = _eligible(_projectId);\\n\\n        // No eligible funding cycle found, check for the ID of a standby funding cycle.\\n        // If this one exists, it will become eligible one it has started.\\n        if (fundingCycleId == 0) fundingCycleId = _standby(_projectId);\\n\\n        // Keep a reference to the funding cycle eligible for being tappable.\\n        FundingCycle memory _fundingCycle;\\n\\n        // If the ID of an eligible funding cycle exists,\\n        // check to see if it has been approved by the based funding cycle's ballot.\\n        if (fundingCycleId > 0) {\\n            // Get the necessary properties for the funding cycle.\\n            _fundingCycle = _getStruct(fundingCycleId);\\n\\n            // Check to see if the cycle is approved. If so, return it.\\n            if (\\n                _fundingCycle.start <= block.timestamp &&\\n                _isApproved(_fundingCycle)\\n            ) return fundingCycleId;\\n\\n            // If it hasn't been approved, set the ID to be the base funding cycle,\\n            // which carries the last approved configuration.\\n            fundingCycleId = _fundingCycle.basedOn;\\n        } else {\\n            // No upcoming funding cycle found that is eligible to become active, clone the latest active funding cycle.\\n            // which carries the last approved configuration.\\n            fundingCycleId = latestIdOf[_projectId];\\n        }\\n\\n        // The funding cycle cant be 0.\\n        require(fundingCycleId > 0, \\\"FundingCycles::_tappable: NOT_FOUND\\\");\\n\\n        // Set the eligible funding cycle.\\n        _fundingCycle = _getStruct(fundingCycleId);\\n\\n        // Funding cycles with a discount rate of 100% are non-recurring.\\n        require(\\n            _fundingCycle.discountRate < 201,\\n            \\\"FundingCycles::_tappable: NON_RECURRING\\\"\\n        );\\n\\n        // The time when the funding cycle immediately after the eligible funding cycle starts.\\n        uint256 _nextImmediateStart = _fundingCycle.start +\\n            (_fundingCycle.duration * SECONDS_IN_DAY);\\n\\n        // The distance from now until the nearest past multiple of the cycle duration from its start.\\n        // A duration of zero means the reconfiguration can start right away.\\n        uint256 _timeFromImmediateStartMultiple = _fundingCycle.duration == 0\\n            ? 0\\n            : (block.timestamp - _nextImmediateStart) %\\n                (_fundingCycle.duration * SECONDS_IN_DAY);\\n\\n        // Return the tappable funding cycle.\\n        fundingCycleId = _init(\\n            _projectId,\\n            _fundingCycle,\\n            block.timestamp - _timeFromImmediateStartMultiple,\\n            true\\n        );\\n    }\\n\\n    /**\\n        @notice \\n        Initializes a funding cycle with the appropriate properties.\\n\\n        @param _projectId The ID of the project to which the funding cycle being initialized belongs.\\n        @param _baseFundingCycle The funding cycle to base the initialized one on.\\n        @param _mustStartOnOrAfter The time before which the initialized funding cycle can't start.\\n        @param _copy If non-intrinsic properties should be copied from the base funding cycle.\\n\\n        @return newFundingCycleId The ID of the initialized funding cycle.\\n    */\\n    function _init(\\n        uint256 _projectId,\\n        FundingCycle memory _baseFundingCycle,\\n        uint256 _mustStartOnOrAfter,\\n        bool _copy\\n    ) private returns (uint256 newFundingCycleId) {\\n        // Increment the count of funding cycles.\\n        count++;\\n\\n        // Set the project's latest funding cycle ID to the new count.\\n        latestIdOf[_projectId] = count;\\n\\n        // If there is no base, initialize a first cycle.\\n        if (_baseFundingCycle.id == 0) {\\n            // Set fresh intrinsic properties.\\n            _packAndStoreIntrinsicProperties(\\n                count,\\n                _projectId,\\n                BASE_WEIGHT,\\n                1,\\n                0,\\n                block.timestamp\\n            );\\n        } else {\\n            // Update the intrinsic properties of the funding cycle being initialized.\\n            _updateFundingCycle(\\n                count,\\n                _baseFundingCycle,\\n                _mustStartOnOrAfter,\\n                _copy\\n            );\\n        }\\n\\n        // Get a reference to the funding cycle with updated intrinsic properties.\\n        FundingCycle memory _fundingCycle = _getStruct(count);\\n\\n        emit Init(\\n            count,\\n            _fundingCycle.projectId,\\n            _fundingCycle.number,\\n            _fundingCycle.basedOn,\\n            _fundingCycle.weight,\\n            _fundingCycle.start\\n        );\\n\\n        return _fundingCycle.id;\\n    }\\n\\n    /**\\n        @notice \\n        The project's funding cycle that hasn't yet started, if one exists.\\n\\n        @param _projectId The ID of project to look through.\\n\\n        @return fundingCycleId The ID of the standby funding cycle.\\n    */\\n    function _standby(uint256 _projectId)\\n        private\\n        view\\n        returns (uint256 fundingCycleId)\\n    {\\n        // Get a reference to the project's latest funding cycle.\\n        fundingCycleId = latestIdOf[_projectId];\\n\\n        // If there isn't one, theres also no standy funding cycle.\\n        if (fundingCycleId == 0) return 0;\\n\\n        // Get the necessary properties for the latest funding cycle.\\n        FundingCycle memory _fundingCycle = _getStruct(fundingCycleId);\\n\\n        // There is no upcoming funding cycle if the latest funding cycle has already started.\\n        if (block.timestamp >= _fundingCycle.start) return 0;\\n    }\\n\\n    /**\\n        @notice \\n        The project's funding cycle that has started and hasn't yet expired.\\n\\n        @param _projectId The ID of the project to look through.\\n\\n        @return fundingCycleId The ID of the active funding cycle.\\n    */\\n    function _eligible(uint256 _projectId)\\n        private\\n        view\\n        returns (uint256 fundingCycleId)\\n    {\\n        // Get a reference to the project's latest funding cycle.\\n        fundingCycleId = latestIdOf[_projectId];\\n\\n        // If the latest funding cycle doesn't exist, return an undefined funding cycle.\\n        if (fundingCycleId == 0) return 0;\\n\\n        // Get the necessary properties for the latest funding cycle.\\n        FundingCycle memory _fundingCycle = _getStruct(fundingCycleId);\\n\\n        // If the latest is expired, return an undefined funding cycle.\\n        // A duration of 0 can not be expired.\\n        if (\\n            _fundingCycle.duration > 0 &&\\n            block.timestamp >=\\n            _fundingCycle.start + (_fundingCycle.duration * SECONDS_IN_DAY)\\n        ) return 0;\\n\\n        // The first funding cycle when running on local can be in the future for some reason.\\n        // This will have no effect in production.\\n        if (\\n            _fundingCycle.basedOn == 0 || block.timestamp >= _fundingCycle.start\\n        ) return fundingCycleId;\\n\\n        // The base cant be expired.\\n        FundingCycle memory _baseFundingCycle = _getStruct(\\n            _fundingCycle.basedOn\\n        );\\n\\n        // If the current time is past the end of the base, return 0.\\n        // A duration of 0 is always eligible.\\n        if (\\n            _baseFundingCycle.duration > 0 &&\\n            block.timestamp >=\\n            _baseFundingCycle.start +\\n                (_baseFundingCycle.duration * SECONDS_IN_DAY)\\n        ) return 0;\\n\\n        // Return the funding cycle immediately before the latest.\\n        fundingCycleId = _fundingCycle.basedOn;\\n    }\\n\\n    /** \\n        @notice \\n        A view of the funding cycle that would be created based on the provided one if the project doesn't make a reconfiguration.\\n\\n        @param _baseFundingCycle The funding cycle to make the calculation for.\\n        @param _allowMidCycle Allow the mocked funding cycle to already be mid cycle.\\n\\n        @return The next funding cycle, with an ID set to 0.\\n    */\\n    function _mockFundingCycleBasedOn(\\n        FundingCycle memory _baseFundingCycle,\\n        bool _allowMidCycle\\n    ) internal view returns (FundingCycle memory) {\\n        // Can't mock a non recurring funding cycle.\\n        if (_baseFundingCycle.discountRate == 201) return _getStruct(0);\\n\\n        // If the base has a limit, find the last permanent funding cycle, which is needed to make subsequent calculations.\\n        // Otherwise, the base is already the latest permanent funding cycle.\\n        FundingCycle memory _latestPermanentFundingCycle = _baseFundingCycle\\n        .cycleLimit > 0\\n            ? _latestPermanentCycleBefore(_baseFundingCycle)\\n            : _baseFundingCycle;\\n\\n        // The distance of the current time to the start of the next possible funding cycle.\\n        uint256 _timeFromImmediateStartMultiple;\\n\\n        if (_allowMidCycle && _baseFundingCycle.duration > 0) {\\n            // Get the end time of the last cycle.\\n            uint256 _cycleEnd = _baseFundingCycle.start +\\n                (_baseFundingCycle.cycleLimit *\\n                    _baseFundingCycle.duration *\\n                    SECONDS_IN_DAY);\\n\\n            // If the cycle end time is in the past, the mock should start at a multiple of the last permanent cycle since the cycle ended.\\n            if (\\n                _baseFundingCycle.cycleLimit > 0 && _cycleEnd < block.timestamp\\n            ) {\\n                _timeFromImmediateStartMultiple = _latestPermanentFundingCycle\\n                .duration == 0\\n                    ? 0\\n                    : ((block.timestamp - _cycleEnd) %\\n                        (_latestPermanentFundingCycle.duration *\\n                            SECONDS_IN_DAY));\\n            } else {\\n                _timeFromImmediateStartMultiple =\\n                    _baseFundingCycle.duration *\\n                    SECONDS_IN_DAY;\\n            }\\n        } else {\\n            _timeFromImmediateStartMultiple = 0;\\n        }\\n\\n        // Derive what the start time should be.\\n        uint256 _start = _deriveStart(\\n            _baseFundingCycle,\\n            _latestPermanentFundingCycle,\\n            block.timestamp - _timeFromImmediateStartMultiple\\n        );\\n\\n        // Derive what the cycle limit should be.\\n        uint256 _cycleLimit = _deriveCycleLimit(_baseFundingCycle, _start);\\n\\n        // Copy the last permanent funding cycle if the bases' limit is up.\\n        FundingCycle memory _fundingCycleToCopy = _cycleLimit == 0\\n            ? _latestPermanentFundingCycle\\n            : _baseFundingCycle;\\n\\n        return\\n            FundingCycle(\\n                0,\\n                _fundingCycleToCopy.projectId,\\n                _deriveNumber(\\n                    _baseFundingCycle,\\n                    _latestPermanentFundingCycle,\\n                    _start\\n                ),\\n                _fundingCycleToCopy.id,\\n                _fundingCycleToCopy.configured,\\n                _cycleLimit,\\n                _deriveWeight(\\n                    _baseFundingCycle,\\n                    _latestPermanentFundingCycle,\\n                    _start\\n                ),\\n                _fundingCycleToCopy.ballot,\\n                _start,\\n                _fundingCycleToCopy.duration,\\n                _fundingCycleToCopy.target,\\n                _fundingCycleToCopy.currency,\\n                _fundingCycleToCopy.fee,\\n                _fundingCycleToCopy.discountRate,\\n                0,\\n                _fundingCycleToCopy.metadata\\n            );\\n    }\\n\\n    /** \\n      @notice\\n      Updates intrinsic properties for a funding cycle given a base cycle.\\n\\n      @param _fundingCycleId The ID of the funding cycle to make sure is update.\\n      @param _baseFundingCycle The cycle that the one being updated is based on.\\n      @param _mustStartOnOrAfter The time before which the initialized funding cycle can't start.\\n      @param _copy If non-intrinsic properties should be copied from the base funding cycle.\\n    */\\n    function _updateFundingCycle(\\n        uint256 _fundingCycleId,\\n        FundingCycle memory _baseFundingCycle,\\n        uint256 _mustStartOnOrAfter,\\n        bool _copy\\n    ) private {\\n        // Get the latest permanent funding cycle.\\n        FundingCycle memory _latestPermanentFundingCycle = _baseFundingCycle\\n        .cycleLimit > 0\\n            ? _latestPermanentCycleBefore(_baseFundingCycle)\\n            : _baseFundingCycle;\\n\\n        // Derive the correct next start time from the base.\\n        uint256 _start = _deriveStart(\\n            _baseFundingCycle,\\n            _latestPermanentFundingCycle,\\n            _mustStartOnOrAfter\\n        );\\n\\n        // Derive the correct weight.\\n        uint256 _weight = _deriveWeight(\\n            _baseFundingCycle,\\n            _latestPermanentFundingCycle,\\n            _start\\n        );\\n\\n        // Derive the correct number.\\n        uint256 _number = _deriveNumber(\\n            _baseFundingCycle,\\n            _latestPermanentFundingCycle,\\n            _start\\n        );\\n\\n        // Copy if needed.\\n        if (_copy) {\\n            // Derive what the cycle limit should be.\\n            uint256 _cycleLimit = _deriveCycleLimit(_baseFundingCycle, _start);\\n\\n            // Copy the last permanent funding cycle if the bases' limit is up.\\n            FundingCycle memory _fundingCycleToCopy = _cycleLimit == 0\\n                ? _latestPermanentFundingCycle\\n                : _baseFundingCycle;\\n\\n            // Save the configuration efficiently.\\n            _packAndStoreConfigurationProperties(\\n                _fundingCycleId,\\n                _fundingCycleToCopy.configured,\\n                _cycleLimit,\\n                _fundingCycleToCopy.ballot,\\n                _fundingCycleToCopy.duration,\\n                _fundingCycleToCopy.currency,\\n                _fundingCycleToCopy.fee,\\n                _fundingCycleToCopy.discountRate\\n            );\\n\\n            _metadataOf[count] = _metadataOf[_fundingCycleToCopy.id];\\n            _targetOf[count] = _targetOf[_fundingCycleToCopy.id];\\n        }\\n\\n        // Update the intrinsic properties.\\n        _packAndStoreIntrinsicProperties(\\n            _fundingCycleId,\\n            _baseFundingCycle.projectId,\\n            _weight,\\n            _number,\\n            _baseFundingCycle.id,\\n            _start\\n        );\\n    }\\n\\n    /**\\n      @notice \\n      Efficiently stores a funding cycle's provided intrinsic properties.\\n\\n      @param _fundingCycleId The ID of the funding cycle to pack and store.\\n      @param _projectId The ID of the project to which the funding cycle belongs.\\n      @param _weight The weight of the funding cycle.\\n      @param _number The number of the funding cycle.\\n      @param _basedOn The ID of the based funding cycle.\\n      @param _start The start time of this funding cycle.\\n\\n     */\\n    function _packAndStoreIntrinsicProperties(\\n        uint256 _fundingCycleId,\\n        uint256 _projectId,\\n        uint256 _weight,\\n        uint256 _number,\\n        uint256 _basedOn,\\n        uint256 _start\\n    ) private {\\n        // weight in bytes 0-79 bytes.\\n        uint256 packed = _weight;\\n        // projectId in bytes 80-135 bytes.\\n        packed |= _projectId << 80;\\n        // basedOn in bytes 136-183 bytes.\\n        packed |= _basedOn << 136;\\n        // start in bytes 184-231 bytes.\\n        packed |= _start << 184;\\n        // number in bytes 232-255 bytes.\\n        packed |= _number << 232;\\n\\n        // Set in storage.\\n        _packedIntrinsicPropertiesOf[_fundingCycleId] = packed;\\n    }\\n\\n    /**\\n      @notice \\n      Efficiently stores a funding cycles provided configuration properties.\\n\\n      @param _fundingCycleId The ID of the funding cycle to pack and store.\\n      @param _configured The timestamp of the configuration.\\n      @param _cycleLimit The number of cycles that this configuration should last for before going back to the last permanent.\\n      @param _ballot The ballot to use for future reconfiguration approvals. \\n      @param _duration The duration of the funding cycle.\\n      @param _currency The currency of the funding cycle.\\n      @param _fee The fee of the funding cycle.\\n      @param _discountRate The discount rate of the based funding cycle.\\n     */\\n    function _packAndStoreConfigurationProperties(\\n        uint256 _fundingCycleId,\\n        uint256 _configured,\\n        uint256 _cycleLimit,\\n        IFundingCycleBallot _ballot,\\n        uint256 _duration,\\n        uint256 _currency,\\n        uint256 _fee,\\n        uint256 _discountRate\\n    ) private {\\n        // ballot in bytes 0-159 bytes.\\n        uint256 packed = uint160(address(_ballot));\\n        // configured in bytes 160-207 bytes.\\n        packed |= _configured << 160;\\n        // duration in bytes 208-223 bytes.\\n        packed |= _duration << 208;\\n        // basedOn in bytes 224-231 bytes.\\n        packed |= _currency << 224;\\n        // fee in bytes 232-239 bytes.\\n        packed |= _fee << 232;\\n        // discountRate in bytes 240-247 bytes.\\n        packed |= _discountRate << 240;\\n        // cycleLimit in bytes 248-255 bytes.\\n        packed |= _cycleLimit << 248;\\n\\n        // Set in storage.\\n        _packedConfigurationPropertiesOf[_fundingCycleId] = packed;\\n    }\\n\\n    /**\\n        @notice \\n        Unpack a funding cycle's packed stored values into an easy-to-work-with funding cycle struct.\\n\\n        @param _id The ID of the funding cycle to get a struct of.\\n\\n        @return _fundingCycle The funding cycle struct.\\n    */\\n    function _getStruct(uint256 _id)\\n        private\\n        view\\n        returns (FundingCycle memory _fundingCycle)\\n    {\\n        // Return an empty funding cycle if the ID specified is 0.\\n        if (_id == 0) return _fundingCycle;\\n\\n        _fundingCycle.id = _id;\\n\\n        uint256 _packedIntrinsicProperties = _packedIntrinsicPropertiesOf[_id];\\n\\n        _fundingCycle.weight = uint256(uint80(_packedIntrinsicProperties));\\n        _fundingCycle.projectId = uint256(\\n            uint56(_packedIntrinsicProperties >> 80)\\n        );\\n        _fundingCycle.basedOn = uint256(\\n            uint48(_packedIntrinsicProperties >> 136)\\n        );\\n        _fundingCycle.start = uint256(\\n            uint48(_packedIntrinsicProperties >> 184)\\n        );\\n        _fundingCycle.number = uint256(\\n            uint24(_packedIntrinsicProperties >> 232)\\n        );\\n\\n\\n            uint256 _packedConfigurationProperties\\n         = _packedConfigurationPropertiesOf[_id];\\n        _fundingCycle.ballot = IFundingCycleBallot(\\n            address(uint160(_packedConfigurationProperties))\\n        );\\n        _fundingCycle.configured = uint256(\\n            uint48(_packedConfigurationProperties >> 160)\\n        );\\n        _fundingCycle.duration = uint256(\\n            uint16(_packedConfigurationProperties >> 208)\\n        );\\n        _fundingCycle.currency = uint256(\\n            uint8(_packedConfigurationProperties >> 224)\\n        );\\n        _fundingCycle.fee = uint256(\\n            uint8(_packedConfigurationProperties >> 232)\\n        );\\n        _fundingCycle.discountRate = uint256(\\n            uint8(_packedConfigurationProperties >> 240)\\n        );\\n        _fundingCycle.cycleLimit = uint256(\\n            uint8(_packedConfigurationProperties >> 248)\\n        );\\n        _fundingCycle.target = _targetOf[_id];\\n        _fundingCycle.tapped = _tappedOf[_id];\\n        _fundingCycle.metadata = _metadataOf[_id];\\n    }\\n\\n    /** \\n        @notice \\n        The date that is the nearest multiple of the specified funding cycle's duration from its end.\\n\\n        @param _baseFundingCycle The funding cycle to make the calculation for.\\n        @param _latestPermanentFundingCycle The latest funding cycle in the same project as `_baseFundingCycle` to not have a limit.\\n        @param _mustStartOnOrAfter A date that the derived start must be on or come after.\\n\\n        @return start The next start time.\\n    */\\n    function _deriveStart(\\n        FundingCycle memory _baseFundingCycle,\\n        FundingCycle memory _latestPermanentFundingCycle,\\n        uint256 _mustStartOnOrAfter\\n    ) internal pure returns (uint256 start) {\\n        // A subsequent cycle to one with a duration of 0 should start as soon as possible.\\n        if (_baseFundingCycle.duration == 0) return _mustStartOnOrAfter;\\n\\n        // Save a reference to the duration measured in seconds.\\n        uint256 _durationInSeconds = _baseFundingCycle.duration *\\n            SECONDS_IN_DAY;\\n\\n        // The time when the funding cycle immediately after the specified funding cycle starts.\\n        uint256 _nextImmediateStart = _baseFundingCycle.start +\\n            _durationInSeconds;\\n\\n        // If the next immediate start is now or in the future, return it.\\n        if (_nextImmediateStart >= _mustStartOnOrAfter)\\n            return _nextImmediateStart;\\n\\n        uint256 _cycleLimit = _baseFundingCycle.cycleLimit;\\n\\n        uint256 _timeFromImmediateStartMultiple;\\n        // Only use base\\n        if (\\n            _mustStartOnOrAfter <=\\n            _baseFundingCycle.start + _durationInSeconds * _cycleLimit\\n        ) {\\n            // Otherwise, use the closest multiple of the duration from the old end.\\n            _timeFromImmediateStartMultiple =\\n                (_mustStartOnOrAfter - _nextImmediateStart) %\\n                _durationInSeconds;\\n        } else {\\n            // If the cycle has ended, make the calculation with the latest permanent funding cycle.\\n            _timeFromImmediateStartMultiple = _latestPermanentFundingCycle\\n            .duration == 0\\n                ? 0\\n                : ((_mustStartOnOrAfter -\\n                    (_baseFundingCycle.start +\\n                        (_durationInSeconds * _cycleLimit))) %\\n                    (_latestPermanentFundingCycle.duration * SECONDS_IN_DAY));\\n\\n            // Use the duration of the permanent funding cycle from here on out.\\n            _durationInSeconds =\\n                _latestPermanentFundingCycle.duration *\\n                SECONDS_IN_DAY;\\n        }\\n\\n        // Otherwise use an increment of the duration from the most recent start.\\n        start = _mustStartOnOrAfter - _timeFromImmediateStartMultiple;\\n\\n        // Add increments of duration as necessary to satisfy the threshold.\\n        while (_mustStartOnOrAfter > start) start = start + _durationInSeconds;\\n    }\\n\\n    /** \\n        @notice \\n        The accumulated weight change since the specified funding cycle.\\n\\n        @param _baseFundingCycle The funding cycle to make the calculation with.\\n        @param _latestPermanentFundingCycle The latest funding cycle in the same project as `_fundingCycle` to not have a limit.\\n        @param _start The start time to derive a weight for.\\n\\n        @return weight The next weight.\\n    */\\n    function _deriveWeight(\\n        FundingCycle memory _baseFundingCycle,\\n        FundingCycle memory _latestPermanentFundingCycle,\\n        uint256 _start\\n    ) internal pure returns (uint256 weight) {\\n        // A subsequent cycle to one with a duration of 0 should have the next possible weight.\\n        if (_baseFundingCycle.duration == 0)\\n            return\\n                PRBMath.mulDiv(\\n                    _baseFundingCycle.weight,\\n                    1000 - _baseFundingCycle.discountRate,\\n                    1000\\n                );\\n\\n        // The difference between the start of the base funding cycle and the proposed start.\\n        uint256 _startDistance = _start - _baseFundingCycle.start;\\n\\n        // The number of seconds that the base funding cycle is limited to.\\n        uint256 _limitLength = _baseFundingCycle.cycleLimit == 0 ||\\n            _baseFundingCycle.basedOn == 0\\n            ? 0\\n            : _baseFundingCycle.cycleLimit *\\n                (_baseFundingCycle.duration * SECONDS_IN_DAY);\\n\\n        // The weight should be based off the base funding cycle's weight.\\n        weight = _baseFundingCycle.weight;\\n\\n        // If there's no limit or if the limit is greater than the start distance,\\n        // apply the discount rate of the base.\\n        if (_limitLength == 0 || _limitLength > _startDistance) {\\n            // If the discount rate is 0, return the same weight.\\n            if (_baseFundingCycle.discountRate == 0) return weight;\\n\\n            uint256 _discountMultiple = _startDistance /\\n                (_baseFundingCycle.duration * SECONDS_IN_DAY);\\n\\n            for (uint256 i = 0; i < _discountMultiple; i++) {\\n                // The number of times to apply the discount rate.\\n                // Base the new weight on the specified funding cycle's weight.\\n                weight = PRBMath.mulDiv(\\n                    weight,\\n                    1000 - _baseFundingCycle.discountRate,\\n                    1000\\n                );\\n            }\\n        } else {\\n            // If the time between the base start at the given start is longer than\\n            // the limit, the discount rate for the limited base has to be applied first,\\n            // and then the discount rate for the last permanent should be applied to\\n            // the remaining distance.\\n\\n            // Use up the limited discount rate up until the limit.\\n            if (_baseFundingCycle.discountRate > 0) {\\n                for (uint256 i = 0; i < _baseFundingCycle.cycleLimit; i++) {\\n                    weight = PRBMath.mulDiv(\\n                        weight,\\n                        1000 - _baseFundingCycle.discountRate,\\n                        1000\\n                    );\\n                }\\n            }\\n\\n            if (_latestPermanentFundingCycle.discountRate > 0) {\\n                // The number of times to apply the latest permanent discount rate.\\n\\n\\n                    uint256 _permanentDiscountMultiple\\n                 = _latestPermanentFundingCycle.duration == 0\\n                    ? 0\\n                    : (_startDistance - _limitLength) /\\n                        (_latestPermanentFundingCycle.duration *\\n                            SECONDS_IN_DAY);\\n\\n                for (uint256 i = 0; i < _permanentDiscountMultiple; i++) {\\n                    // base the weight on the result of the previous calculation.\\n                    weight = PRBMath.mulDiv(\\n                        weight,\\n                        1000 - _latestPermanentFundingCycle.discountRate,\\n                        1000\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /** \\n        @notice \\n        The number of the next funding cycle given the specified funding cycle.\\n\\n        @param _baseFundingCycle The funding cycle to make the calculation with.\\n        @param _latestPermanentFundingCycle The latest funding cycle in the same project as `_fundingCycle` to not have a limit.\\n        @param _start The start time to derive a number for.\\n\\n        @return number The next number.\\n    */\\n    function _deriveNumber(\\n        FundingCycle memory _baseFundingCycle,\\n        FundingCycle memory _latestPermanentFundingCycle,\\n        uint256 _start\\n    ) internal pure returns (uint256 number) {\\n        // A subsequent cycle to one with a duration of 0 should be the next number.\\n        if (_baseFundingCycle.duration == 0)\\n            return _baseFundingCycle.number + 1;\\n\\n        // The difference between the start of the base funding cycle and the proposed start.\\n        uint256 _startDistance = _start - _baseFundingCycle.start;\\n\\n        // The number of seconds that the base funding cycle is limited to.\\n        uint256 _limitLength = _baseFundingCycle.cycleLimit == 0\\n            ? 0\\n            : _baseFundingCycle.cycleLimit *\\n                (_baseFundingCycle.duration * SECONDS_IN_DAY);\\n\\n        if (_limitLength == 0 || _limitLength > _startDistance) {\\n            // If there's no limit or if the limit is greater than the start distance,\\n            // get the result by finding the number of base cycles that fit in the start distance.\\n            number =\\n                _baseFundingCycle.number +\\n                (_startDistance /\\n                    (_baseFundingCycle.duration * SECONDS_IN_DAY));\\n        } else {\\n            // If the time between the base start at the given start is longer than\\n            // the limit, first calculate the number of cycles that passed under the limit,\\n            // and add any cycles that have passed of the latest permanent funding cycle afterwards.\\n\\n            number =\\n                _baseFundingCycle.number +\\n                (_limitLength / (_baseFundingCycle.duration * SECONDS_IN_DAY));\\n\\n            number =\\n                number +\\n                (\\n                    _latestPermanentFundingCycle.duration == 0\\n                        ? 0\\n                        : ((_startDistance - _limitLength) /\\n                            (_latestPermanentFundingCycle.duration *\\n                                SECONDS_IN_DAY))\\n                );\\n        }\\n    }\\n\\n    /** \\n        @notice \\n        The limited number of times a funding cycle configuration can be active given the specified funding cycle.\\n\\n        @param _fundingCycle The funding cycle to make the calculation with.\\n        @param _start The start time to derive cycles remaining for.\\n\\n        @return start The inclusive nunmber of cycles remaining.\\n    */\\n    function _deriveCycleLimit(\\n        FundingCycle memory _fundingCycle,\\n        uint256 _start\\n    ) internal pure returns (uint256) {\\n        if (_fundingCycle.cycleLimit <= 1 || _fundingCycle.duration == 0)\\n            return 0;\\n        uint256 _cycles = ((_start - _fundingCycle.start) /\\n            (_fundingCycle.duration * SECONDS_IN_DAY));\\n\\n        if (_cycles >= _fundingCycle.cycleLimit) return 0;\\n        return _fundingCycle.cycleLimit - _cycles;\\n    }\\n\\n    /** \\n      @notice \\n      Checks to see if the funding cycle of the provided ID is approved according to the correct ballot.\\n\\n      @param _fundingCycleId The ID of the funding cycle to get an approval flag for.\\n\\n      @return The approval flag.\\n    */\\n    function _isIdApproved(uint256 _fundingCycleId)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        FundingCycle memory _fundingCycle = _getStruct(_fundingCycleId);\\n        return _isApproved(_fundingCycle);\\n    }\\n\\n    /** \\n      @notice \\n      Checks to see if the provided funding cycle is approved according to the correct ballot.\\n\\n      @param _fundingCycle The ID of the funding cycle to get an approval flag for.\\n\\n      @return The approval flag.\\n    */\\n    function _isApproved(FundingCycle memory _fundingCycle)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return\\n            _ballotState(\\n                _fundingCycle.id,\\n                _fundingCycle.configured,\\n                _fundingCycle.basedOn\\n            ) == BallotState.Approved;\\n    }\\n\\n    /**\\n        @notice \\n        A funding cycle configuration's currency status.\\n\\n        @param _id The ID of the funding cycle configuration to check the status of.\\n        @param _configuration The timestamp of when the configuration took place.\\n        @param _ballotFundingCycleId The ID of the funding cycle which is configured with the ballot that should be used.\\n\\n        @return The funding cycle's configuration status.\\n    */\\n    function _ballotState(\\n        uint256 _id,\\n        uint256 _configuration,\\n        uint256 _ballotFundingCycleId\\n    ) private view returns (BallotState) {\\n        // If there is no ballot funding cycle, auto approve.\\n        if (_ballotFundingCycleId == 0) return BallotState.Approved;\\n\\n        // Get the ballot funding cycle.\\n        FundingCycle memory _ballotFundingCycle = _getStruct(\\n            _ballotFundingCycleId\\n        );\\n\\n        // If the configuration is the same as the ballot's funding cycle,\\n        // the ballot isn't applicable. Auto approve since the ballot funding cycle is approved.\\n        if (_ballotFundingCycle.configured == _configuration)\\n            return BallotState.Approved;\\n\\n        // If there is no ballot, the ID is auto approved.\\n        // Otherwise, return the ballot's state.\\n        return\\n            _ballotFundingCycle.ballot == IFundingCycleBallot(address(0))\\n                ? BallotState.Approved\\n                : _ballotFundingCycle.ballot.state(_id, _configuration);\\n    }\\n\\n    /** \\n      @notice \\n      Finds the last funding cycle that was permanent in relation to the specified funding cycle.\\n\\n      @dev\\n      Determined what the latest funding cycle with a `cycleLimit` of 0 is, or isn't based on any previous funding cycle.\\n\\n\\n      @param _fundingCycle The funding cycle to find the most recent permanent cycle compared to.\\n\\n      @return fundingCycle The most recent permanent funding cycle.\\n    */\\n    function _latestPermanentCycleBefore(FundingCycle memory _fundingCycle)\\n        private\\n        view\\n        returns (FundingCycle memory fundingCycle)\\n    {\\n        if (_fundingCycle.basedOn == 0) return _fundingCycle;\\n        fundingCycle = _getStruct(_fundingCycle.basedOn);\\n        if (fundingCycle.cycleLimit == 0) return fundingCycle;\\n        return _latestPermanentCycleBefore(fundingCycle);\\n    }\\n\\n    /** \\n      @notice\\n      The time after the ballot of the provided funding cycle has expired.\\n\\n      @dev\\n      If the ballot ends in the past, the current block timestamp will be returned.\\n\\n      @param _fundingCycle The ID funding cycle to make the caluclation the ballot of.\\n      @param _from The time from which the ballot duration should be calculated.\\n\\n      @return The time when the ballot duration ends.\\n    */\\n    function _getTimeAfterBallot(\\n        FundingCycle memory _fundingCycle,\\n        uint256 _from\\n    ) private view returns (uint256) {\\n        // The ballot must have ended.\\n        uint256 _ballotExpiration = _fundingCycle.ballot !=\\n            IFundingCycleBallot(address(0))\\n            ? _from + _fundingCycle.ballot.duration()\\n            : 0;\\n\\n        return\\n            block.timestamp > _ballotExpiration\\n                ? block.timestamp\\n                : _ballotExpiration;\\n    }\\n}\\n\"\r\n    },\r\n    \"@jbox/sol/contracts/abstract/JuiceboxProject.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./../interfaces/ITerminalV1.sol\\\";\\n\\n/** \\n  @notice A contract that inherits from JuiceboxProject can use Juicebox as a business-model-as-a-service.\\n  @dev The owner of the contract makes admin decisions such as:\\n    - Which address is the funding cycle owner, which can tap funds from the funding cycle.\\n    - Should this project's Tickets be migrated to a new TerminalV1. \\n*/\\nabstract contract JuiceboxProject is IERC721Receiver, Ownable {\\n    /// @notice The direct deposit terminals.\\n    ITerminalDirectory public immutable terminalDirectory;\\n\\n    /// @notice The ID of the project that should be used to forward this contract's received payments.\\n    uint256 public projectId;\\n\\n    /** \\n      @param _projectId The ID of the project that should be used to forward this contract's received payments.\\n      @param _terminalDirectory A directory of a project's current Juicebox terminal to receive payments in.\\n    */\\n    constructor(uint256 _projectId, ITerminalDirectory _terminalDirectory) {\\n        projectId = _projectId;\\n        terminalDirectory = _terminalDirectory;\\n    }\\n\\n    receive() external payable {}\\n\\n    /** \\n      @notice Withdraws funds stored in this contract.\\n      @param _beneficiary The address to send the funds to.\\n      @param _amount The amount to send.\\n    */\\n    function withdraw(address payable _beneficiary, uint256 _amount)\\n        external\\n        onlyOwner\\n    {\\n        Address.sendValue(_beneficiary, _amount);\\n    }\\n\\n    /** \\n      @notice Allows the project that is being managed to be set.\\n      @param _projectId The ID of the project that is being managed.\\n    */\\n    function setProjectId(uint256 _projectId) external onlyOwner {\\n        projectId = _projectId;\\n    }\\n\\n    /** \\n      @notice Make a payment to this project.\\n      @param _beneficiary The address who will receive tickets from this fee.\\n      @param _memo A memo that will be included in the published event.\\n      @param _preferUnstakedTickets Whether ERC20's should be claimed automatically if they have been issued.\\n    */\\n    function pay(\\n        address _beneficiary,\\n        string calldata _memo,\\n        bool _preferUnstakedTickets\\n    ) external payable {\\n        require(projectId != 0, \\\"JuiceboxProject::pay: PROJECT_NOT_FOUND\\\");\\n\\n        // Get the terminal for this contract's project.\\n        ITerminal _terminal = terminalDirectory.terminalOf(projectId);\\n\\n        // There must be a terminal.\\n        require(\\n            _terminal != ITerminal(address(0)),\\n            \\\"JuiceboxProject::pay: TERMINAL_NOT_FOUND\\\"\\n        );\\n\\n        _terminal.pay{value: msg.value}(\\n            projectId,\\n            _beneficiary,\\n            _memo,\\n            _preferUnstakedTickets\\n        );\\n    }\\n\\n    /** \\n        @notice Transfer the ownership of the project to a new owner.  \\n        @dev This contract will no longer be able to reconfigure or tap funds from this project.\\n        @param _projects The projects contract.\\n        @param _newOwner The new project owner.\\n        @param _projectId The ID of the project to transfer ownership of.\\n        @param _data Arbitrary data to include in the transaction.\\n    */\\n    function transferProjectOwnership(\\n        IProjects _projects,\\n        address _newOwner,\\n        uint256 _projectId,\\n        bytes calldata _data\\n    ) external onlyOwner {\\n        _projects.safeTransferFrom(address(this), _newOwner, _projectId, _data);\\n    }\\n\\n    /** \\n      @notice Allows this contract to receive a project.\\n    */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) public pure override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function setOperator(\\n        IOperatorStore _operatorStore,\\n        address _operator,\\n        uint256 _projectId,\\n        uint256[] calldata _permissionIndexes\\n    ) external onlyOwner {\\n        _operatorStore.setOperator(_operator, _projectId, _permissionIndexes);\\n    }\\n\\n    function setOperators(\\n        IOperatorStore _operatorStore,\\n        address[] calldata _operators,\\n        uint256[] calldata _projectIds,\\n        uint256[][] calldata _permissionIndexes\\n    ) external onlyOwner {\\n        _operatorStore.setOperators(\\n            _operators,\\n            _projectIds,\\n            _permissionIndexes\\n        );\\n    }\\n\\n    /** \\n      @notice Take a fee for this project from this contract.\\n      @param _amount The payment amount.\\n      @param _beneficiary The address who will receive tickets from this fee.\\n      @param _memo A memo that will be included in the published event.\\n      @param _preferUnstakedTickets Whether ERC20's should be claimed automatically if they have been issued.\\n    */\\n    function _takeFee(\\n        uint256 _amount,\\n        address _beneficiary,\\n        string memory _memo,\\n        bool _preferUnstakedTickets\\n    ) internal {\\n        require(projectId != 0, \\\"JuiceboxProject::takeFee: PROJECT_NOT_FOUND\\\");\\n        // Find the terminal for this contract's project.\\n        ITerminal _terminal = terminalDirectory.terminalOf(projectId);\\n\\n        // There must be a terminal.\\n        require(\\n            _terminal != ITerminal(address(0)),\\n            \\\"JuiceboxProject::takeFee: TERMINAL_NOT_FOUND\\\"\\n        );\\n\\n        // There must be enough funds in the contract to take the fee.\\n        require(\\n            address(this).balance >= _amount,\\n            \\\"JuiceboxProject::takeFee: INSUFFICIENT_FUNDS\\\"\\n        );\\n\\n        // Send funds to the terminal.\\n        _terminal.pay{value: _amount}(\\n            projectId,\\n            _beneficiary,\\n            _memo,\\n            _preferUnstakedTickets\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@jbox/sol/contracts/abstract/TerminalUtility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./../interfaces/ITerminalUtility.sol\\\";\\n\\nabstract contract TerminalUtility is ITerminalUtility {\\n    modifier onlyTerminal(uint256 _projectId) {\\n        require(\\n            address(terminalDirectory.terminalOf(_projectId)) == msg.sender,\\n            \\\"TerminalUtility: UNAUTHORIZED\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice The direct deposit terminals.\\n    ITerminalDirectory public immutable override terminalDirectory;\\n\\n    /** \\n      @param _terminalDirectory A directory of a project's current Juicebox terminal to receive payments in.\\n    */\\n    constructor(ITerminalDirectory _terminalDirectory) {\\n        terminalDirectory = _terminalDirectory;\\n    }\\n}\\n\"\r\n    },\r\n    \"@jbox/sol/contracts/interfaces/IDirectPaymentAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./ITerminalDirectory.sol\\\";\\nimport \\\"./ITerminal.sol\\\";\\n\\ninterface IDirectPaymentAddress {\\n    event Forward(\\n        address indexed payer,\\n        uint256 indexed projectId,\\n        address beneficiary,\\n        uint256 value,\\n        string memo,\\n        bool preferUnstakedTickets\\n    );\\n\\n    function terminalDirectory() external returns (ITerminalDirectory);\\n\\n    function projectId() external returns (uint256);\\n\\n    function memo() external returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@jbox/sol/contracts/interfaces/IFundingCycleBallot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./ITerminalV1.sol\\\";\\n\\nenum BallotState {\\n    Approved,\\n    Active,\\n    Failed,\\n    Standby\\n}\\n\\ninterface IFundingCycleBallot {\\n    function duration() external view returns (uint256);\\n\\n    function state(uint256 _fundingCycleId, uint256 _configured)\\n        external\\n        view\\n        returns (BallotState);\\n}\\n\"\r\n    },\r\n    \"@jbox/sol/contracts/interfaces/IFundingCycles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IPrices.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IFundingCycleBallot.sol\\\";\\n\\n/// @notice The funding cycle structure represents a project stewarded by an address, and accounts for which addresses have helped sustain the project.\\nstruct FundingCycle {\\n    // A unique number that's incremented for each new funding cycle, starting with 1.\\n    uint256 id;\\n    // The ID of the project contract that this funding cycle belongs to.\\n    uint256 projectId;\\n    // The number of this funding cycle for the project.\\n    uint256 number;\\n    // The ID of a previous funding cycle that this one is based on.\\n    uint256 basedOn;\\n    // The time when this funding cycle was last configured.\\n    uint256 configured;\\n    // The number of cycles that this configuration should last for before going back to the last permanent.\\n    uint256 cycleLimit;\\n    // A number determining the amount of redistribution shares this funding cycle will issue to each sustainer.\\n    uint256 weight;\\n    // The ballot contract to use to determine a subsequent funding cycle's reconfiguration status.\\n    IFundingCycleBallot ballot;\\n    // The time when this funding cycle will become active.\\n    uint256 start;\\n    // The number of seconds until this funding cycle's surplus is redistributed.\\n    uint256 duration;\\n    // The amount that this funding cycle is targeting in terms of the currency.\\n    uint256 target;\\n    // The currency that the target is measured in.\\n    uint256 currency;\\n    // The percentage of each payment to send as a fee to the Juicebox admin.\\n    uint256 fee;\\n    // A percentage indicating how much more weight to give a funding cycle compared to its predecessor.\\n    uint256 discountRate;\\n    // The amount of available funds that have been tapped by the project in terms of the currency.\\n    uint256 tapped;\\n    // A packed list of extra data. The first 8 bytes are reserved for versioning.\\n    uint256 metadata;\\n}\\n\\nstruct FundingCycleProperties {\\n    uint256 target;\\n    uint256 currency;\\n    uint256 duration;\\n    uint256 cycleLimit;\\n    uint256 discountRate;\\n    IFundingCycleBallot ballot;\\n}\\n\\ninterface IFundingCycles {\\n    event Configure(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 reconfigured,\\n        FundingCycleProperties _properties,\\n        uint256 metadata,\\n        address caller\\n    );\\n\\n    event Tap(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        uint256 newTappedAmount,\\n        address caller\\n    );\\n\\n    event Init(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        uint256 number,\\n        uint256 previous,\\n        uint256 weight,\\n        uint256 start\\n    );\\n\\n    function latestIdOf(uint256 _projectId) external view returns (uint256);\\n\\n    function count() external view returns (uint256);\\n\\n    function BASE_WEIGHT() external view returns (uint256);\\n\\n    function MAX_CYCLE_LIMIT() external view returns (uint256);\\n\\n    function get(uint256 _fundingCycleId)\\n        external\\n        view\\n        returns (FundingCycle memory);\\n\\n    function queuedOf(uint256 _projectId)\\n        external\\n        view\\n        returns (FundingCycle memory);\\n\\n    function currentOf(uint256 _projectId)\\n        external\\n        view\\n        returns (FundingCycle memory);\\n\\n    function currentBallotStateOf(uint256 _projectId)\\n        external\\n        view\\n        returns (BallotState);\\n\\n    function configure(\\n        uint256 _projectId,\\n        FundingCycleProperties calldata _properties,\\n        uint256 _metadata,\\n        uint256 _fee,\\n        bool _configureActiveFundingCycle\\n    ) external returns (FundingCycle memory fundingCycle);\\n\\n    function tap(uint256 _projectId, uint256 _amount)\\n        external\\n        returns (FundingCycle memory fundingCycle);\\n}\\n\"\r\n    },\r\n    \"@jbox/sol/contracts/interfaces/IModAllocator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IModAllocator {\\n    event Allocate(\\n        uint256 indexed projectId,\\n        uint256 indexed forProjectId,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    function allocate(\\n        uint256 _projectId,\\n        uint256 _forProjectId,\\n        address _beneficiary\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"@jbox/sol/contracts/interfaces/IModStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IOperatorStore.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IModAllocator.sol\\\";\\n\\nstruct PaymentMod {\\n    bool preferUnstaked;\\n    uint16 percent;\\n    uint48 lockedUntil;\\n    address payable beneficiary;\\n    IModAllocator allocator;\\n    uint56 projectId;\\n}\\n\\nstruct TicketMod {\\n    bool preferUnstaked;\\n    uint16 percent;\\n    uint48 lockedUntil;\\n    address payable beneficiary;\\n}\\n\\ninterface IModStore {\\n    event SetPaymentMod(\\n        uint256 indexed projectId,\\n        uint256 indexed configuration,\\n        PaymentMod mods,\\n        address caller\\n    );\\n\\n    event SetTicketMod(\\n        uint256 indexed projectId,\\n        uint256 indexed configuration,\\n        TicketMod mods,\\n        address caller\\n    );\\n\\n    function projects() external view returns (IProjects);\\n\\n    function paymentModsOf(uint256 _projectId, uint256 _configuration)\\n        external\\n        view\\n        returns (PaymentMod[] memory);\\n\\n    function ticketModsOf(uint256 _projectId, uint256 _configuration)\\n        external\\n        view\\n        returns (TicketMod[] memory);\\n\\n    function setPaymentMods(\\n        uint256 _projectId,\\n        uint256 _configuration,\\n        PaymentMod[] memory _mods\\n    ) external;\\n\\n    function setTicketMods(\\n        uint256 _projectId,\\n        uint256 _configuration,\\n        TicketMod[] memory _mods\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@jbox/sol/contracts/interfaces/IOperatorStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IOperatorStore {\\n    event SetOperator(\\n        address indexed operator,\\n        address indexed account,\\n        uint256 indexed domain,\\n        uint256[] permissionIndexes,\\n        uint256 packed\\n    );\\n\\n    function permissionsOf(\\n        address _operator,\\n        address _account,\\n        uint256 _domain\\n    ) external view returns (uint256);\\n\\n    function hasPermission(\\n        address _operator,\\n        address _account,\\n        uint256 _domain,\\n        uint256 _permissionIndex\\n    ) external view returns (bool);\\n\\n    function hasPermissions(\\n        address _operator,\\n        address _account,\\n        uint256 _domain,\\n        uint256[] calldata _permissionIndexes\\n    ) external view returns (bool);\\n\\n    function setOperator(\\n        address _operator,\\n        uint256 _domain,\\n        uint256[] calldata _permissionIndexes\\n    ) external;\\n\\n    function setOperators(\\n        address[] calldata _operators,\\n        uint256[] calldata _domains,\\n        uint256[][] calldata _permissionIndexes\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@jbox/sol/contracts/interfaces/IPrices.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\n\\ninterface IPrices {\\n    event AddFeed(uint256 indexed currency, AggregatorV3Interface indexed feed);\\n\\n    function feedDecimalAdjuster(uint256 _currency) external returns (uint256);\\n\\n    function targetDecimals() external returns (uint256);\\n\\n    function feedFor(uint256 _currency)\\n        external\\n        returns (AggregatorV3Interface);\\n\\n    function getETHPriceFor(uint256 _currency) external view returns (uint256);\\n\\n    function addFeed(AggregatorV3Interface _priceFeed, uint256 _currency)\\n        external;\\n}\\n\"\r\n    },\r\n    \"@jbox/sol/contracts/interfaces/IProjects.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./ITerminal.sol\\\";\\nimport \\\"./IOperatorStore.sol\\\";\\n\\ninterface IProjects is IERC721 {\\n    event Create(\\n        uint256 indexed projectId,\\n        address indexed owner,\\n        bytes32 indexed handle,\\n        string uri,\\n        ITerminal terminal,\\n        address caller\\n    );\\n\\n    event SetHandle(\\n        uint256 indexed projectId,\\n        bytes32 indexed handle,\\n        address caller\\n    );\\n\\n    event SetUri(uint256 indexed projectId, string uri, address caller);\\n\\n    event TransferHandle(\\n        uint256 indexed projectId,\\n        address indexed to,\\n        bytes32 indexed handle,\\n        bytes32 newHandle,\\n        address caller\\n    );\\n\\n    event ClaimHandle(\\n        address indexed account,\\n        uint256 indexed projectId,\\n        bytes32 indexed handle,\\n        address caller\\n    );\\n\\n    event ChallengeHandle(\\n        bytes32 indexed handle,\\n        uint256 challengeExpiry,\\n        address caller\\n    );\\n\\n    event RenewHandle(\\n        bytes32 indexed handle,\\n        uint256 indexed projectId,\\n        address caller\\n    );\\n\\n    function count() external view returns (uint256);\\n\\n    function uriOf(uint256 _projectId) external view returns (string memory);\\n\\n    function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n    function projectFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n    function transferAddressFor(bytes32 _handle)\\n        external\\n        returns (address receiver);\\n\\n    function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\n\\n    function exists(uint256 _projectId) external view returns (bool);\\n\\n    function create(\\n        address _owner,\\n        bytes32 _handle,\\n        string calldata _uri,\\n        ITerminal _terminal\\n    ) external returns (uint256 id);\\n\\n    function setHandle(uint256 _projectId, bytes32 _handle) external;\\n\\n    function setUri(uint256 _projectId, string calldata _uri) external;\\n\\n    function transferHandle(\\n        uint256 _projectId,\\n        address _to,\\n        bytes32 _newHandle\\n    ) external returns (bytes32 _handle);\\n\\n    function claimHandle(\\n        bytes32 _handle,\\n        address _for,\\n        uint256 _projectId\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@jbox/sol/contracts/interfaces/ITerminal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./ITerminalDirectory.sol\\\";\\n\\ninterface ITerminal {\\n    event Pay(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        string note,\\n        address caller\\n    );\\n\\n    event AddToBalance(\\n        uint256 indexed projectId,\\n        uint256 value,\\n        address caller\\n    );\\n\\n    event AllowMigration(ITerminal allowed);\\n\\n    event Migrate(\\n        uint256 indexed projectId,\\n        ITerminal indexed to,\\n        uint256 _amount,\\n        address caller\\n    );\\n\\n    function terminalDirectory() external view returns (ITerminalDirectory);\\n\\n    function migrationIsAllowed(ITerminal _terminal)\\n        external\\n        view\\n        returns (bool);\\n\\n    function pay(\\n        uint256 _projectId,\\n        address _beneficiary,\\n        string calldata _memo,\\n        bool _preferUnstakedTickets\\n    ) external payable returns (uint256 fundingCycleId);\\n\\n    function addToBalance(uint256 _projectId) external payable;\\n\\n    function allowMigration(ITerminal _contract) external;\\n\\n    function migrate(uint256 _projectId, ITerminal _to) external;\\n}\\n\"\r\n    },\r\n    \"@jbox/sol/contracts/interfaces/ITerminalDirectory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IDirectPaymentAddress.sol\\\";\\nimport \\\"./ITerminal.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\n\\ninterface ITerminalDirectory {\\n    event DeployAddress(\\n        uint256 indexed projectId,\\n        string memo,\\n        address indexed caller\\n    );\\n\\n    event SetTerminal(\\n        uint256 indexed projectId,\\n        ITerminal indexed terminal,\\n        address caller\\n    );\\n\\n    event SetPayerPreferences(\\n        address indexed account,\\n        address beneficiary,\\n        bool preferUnstakedTickets\\n    );\\n\\n    function projects() external view returns (IProjects);\\n\\n    function terminalOf(uint256 _projectId) external view returns (ITerminal);\\n\\n    function beneficiaryOf(address _account) external returns (address);\\n\\n    function unstakedTicketsPreferenceOf(address _account)\\n        external\\n        returns (bool);\\n\\n    function addressesOf(uint256 _projectId)\\n        external\\n        view\\n        returns (IDirectPaymentAddress[] memory);\\n\\n    function deployAddress(uint256 _projectId, string calldata _memo) external;\\n\\n    function setTerminal(uint256 _projectId, ITerminal _terminal) external;\\n\\n    function setPayerPreferences(\\n        address _beneficiary,\\n        bool _preferUnstakedTickets\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@jbox/sol/contracts/interfaces/ITerminalUtility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./ITerminalDirectory.sol\\\";\\n\\ninterface ITerminalUtility {\\n    function terminalDirectory() external view returns (ITerminalDirectory);\\n}\\n\"\r\n    },\r\n    \"@jbox/sol/contracts/interfaces/ITerminalV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./ITicketBooth.sol\\\";\\nimport \\\"./IFundingCycles.sol\\\";\\nimport \\\"./IYielder.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IModStore.sol\\\";\\nimport \\\"./ITerminal.sol\\\";\\nimport \\\"./IOperatorStore.sol\\\";\\nimport \\\"./IPrices.sol\\\";\\n\\nstruct FundingCycleMetadata {\\n    uint256 reservedRate;\\n    uint256 bondingCurveRate;\\n    uint256 reconfigurationBondingCurveRate;\\n}\\n\\ninterface ITerminalV1 {\\n    event Configure(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        address caller\\n    );\\n\\n    event Tap(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        uint256 currency,\\n        uint256 netTransferAmount,\\n        uint256 beneficiaryTransferAmount,\\n        uint256 govFeeAmount,\\n        address caller\\n    );\\n    event Redeem(\\n        address indexed holder,\\n        address indexed beneficiary,\\n        uint256 indexed _projectId,\\n        uint256 amount,\\n        uint256 returnAmount,\\n        address caller\\n    );\\n\\n    event PrintReserveTickets(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        address indexed beneficiary,\\n        uint256 count,\\n        uint256 beneficiaryTicketAmount,\\n        address caller\\n    );\\n\\n    event DistributeToPayoutMod(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        PaymentMod mod,\\n        uint256 modCut,\\n        address caller\\n    );\\n    event DistributeToTicketMod(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        TicketMod mod,\\n        uint256 modCut,\\n        address caller\\n    );\\n    event AppointGovernance(address governance);\\n\\n    event AcceptGovernance(address governance);\\n\\n    event PrintPreminedTickets(\\n        uint256 indexed projectId,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        uint256 currency,\\n        string memo,\\n        address caller\\n    );\\n\\n    event Deposit(uint256 amount);\\n\\n    event EnsureTargetLocalWei(uint256 target);\\n\\n    event SetYielder(IYielder newYielder);\\n\\n    event SetFee(uint256 _amount);\\n\\n    event SetTargetLocalWei(uint256 amount);\\n\\n    function governance() external view returns (address payable);\\n\\n    function pendingGovernance() external view returns (address payable);\\n\\n    function projects() external view returns (IProjects);\\n\\n    function fundingCycles() external view returns (IFundingCycles);\\n\\n    function ticketBooth() external view returns (ITicketBooth);\\n\\n    function prices() external view returns (IPrices);\\n\\n    function modStore() external view returns (IModStore);\\n\\n    function reservedTicketBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function canPrintPreminedTickets(uint256 _projectId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function balanceOf(uint256 _projectId) external view returns (uint256);\\n\\n    function currentOverflowOf(uint256 _projectId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function claimableOverflowOf(\\n        address _account,\\n        uint256 _amount,\\n        uint256 _projectId\\n    ) external view returns (uint256);\\n\\n    function fee() external view returns (uint256);\\n\\n    function deploy(\\n        address _owner,\\n        bytes32 _handle,\\n        string calldata _uri,\\n        FundingCycleProperties calldata _properties,\\n        FundingCycleMetadata calldata _metadata,\\n        PaymentMod[] memory _paymentMods,\\n        TicketMod[] memory _ticketMods\\n    ) external;\\n\\n    function configure(\\n        uint256 _projectId,\\n        FundingCycleProperties calldata _properties,\\n        FundingCycleMetadata calldata _metadata,\\n        PaymentMod[] memory _paymentMods,\\n        TicketMod[] memory _ticketMods\\n    ) external returns (uint256);\\n\\n    function printPreminedTickets(\\n        uint256 _projectId,\\n        uint256 _amount,\\n        uint256 _currency,\\n        address _beneficiary,\\n        string memory _memo,\\n        bool _preferUnstakedTickets\\n    ) external;\\n\\n    function tap(\\n        uint256 _projectId,\\n        uint256 _amount,\\n        uint256 _currency,\\n        uint256 _minReturnedWei\\n    ) external returns (uint256);\\n\\n    function redeem(\\n        address _account,\\n        uint256 _projectId,\\n        uint256 _amount,\\n        uint256 _minReturnedWei,\\n        address payable _beneficiary,\\n        bool _preferUnstaked\\n    ) external returns (uint256 returnAmount);\\n\\n    function printReservedTickets(uint256 _projectId)\\n        external\\n        returns (uint256 reservedTicketsToPrint);\\n\\n    function setFee(uint256 _fee) external;\\n\\n    function appointGovernance(address payable _pendingGovernance) external;\\n\\n    function acceptGovernance() external;\\n}\\n\"\r\n    },\r\n    \"@jbox/sol/contracts/interfaces/ITicketBooth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IOperatorStore.sol\\\";\\nimport \\\"./ITickets.sol\\\";\\n\\ninterface ITicketBooth {\\n    event Issue(\\n        uint256 indexed projectId,\\n        string name,\\n        string symbol,\\n        address caller\\n    );\\n    event Print(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        bool convertedTickets,\\n        bool preferUnstakedTickets,\\n        address controller\\n    );\\n\\n    event Redeem(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        uint256 stakedTickets,\\n        bool preferUnstaked,\\n        address controller\\n    );\\n\\n    event Stake(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    event Unstake(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    event Lock(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    event Unlock(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    event Transfer(\\n        address indexed holder,\\n        uint256 indexed projectId,\\n        address indexed recipient,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    function ticketsOf(uint256 _projectId) external view returns (ITickets);\\n\\n    function projects() external view returns (IProjects);\\n\\n    function lockedBalanceOf(address _holder, uint256 _projectId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function lockedBalanceBy(\\n        address _operator,\\n        address _holder,\\n        uint256 _projectId\\n    ) external view returns (uint256);\\n\\n    function stakedBalanceOf(address _holder, uint256 _projectId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function stakedTotalSupplyOf(uint256 _projectId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n    function balanceOf(address _holder, uint256 _projectId)\\n        external\\n        view\\n        returns (uint256 _result);\\n\\n    function issue(\\n        uint256 _projectId,\\n        string calldata _name,\\n        string calldata _symbol\\n    ) external;\\n\\n    function print(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount,\\n        bool _preferUnstakedTickets\\n    ) external;\\n\\n    function redeem(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount,\\n        bool _preferUnstaked\\n    ) external;\\n\\n    function stake(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    ) external;\\n\\n    function unstake(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    ) external;\\n\\n    function lock(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    ) external;\\n\\n    function unlock(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount\\n    ) external;\\n\\n    function transfer(\\n        address _holder,\\n        uint256 _projectId,\\n        uint256 _amount,\\n        address _recipient\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@jbox/sol/contracts/interfaces/ITickets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITickets is IERC20 {\\n    function print(address _account, uint256 _amount) external;\\n\\n    function redeem(address _account, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"@jbox/sol/contracts/interfaces/IYielder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./ITerminalV1.sol\\\";\\n\\n// In constructure, give unlimited access for TerminalV1 to take money from this.\\ninterface IYielder {\\n    function deposited() external view returns (uint256);\\n\\n    function getCurrentBalance() external view returns (uint256);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 _amount, address payable _beneficiary) external;\\n\\n    function withdrawAll(address payable _beneficiary)\\n        external\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@paulrberg/contracts/math/PRBMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\"\r\n    },\r\n    \"contracts/Brainstorm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@jbox/sol/contracts/FundingCycles.sol';\\nimport '@jbox/sol/contracts/abstract/JuiceboxProject.sol';\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\ncontract Brainstorm is JuiceboxProject, ERC721 {\\n  event Submit(\\n    uint256 indexed round,\\n    uint256 indexed number,\\n    uint256 value,\\n    address author,\\n    address caller\\n  );\\n\\n  event Mint(uint256 round, address author, string quote, uint256 payout, address caller);\\n  event ChangeSumbitionPrice(uint256 indexed price, address caller);\\n  event ChangePayout(uint256 indexed amount, address caller);\\n\\n  // The funding cycles contract. Each funding cycle is a round.\\n  FundingCycles public fundingCycles;\\n\\n  // Quotes from each round.\\n  mapping(uint256 => string[]) private _quotes;\\n\\n  // The winner from each round.\\n  mapping(uint256 => uint256) public winners;\\n\\n  // The authors of each quote. Authors can't be overwritten.\\n  mapping(string => address payable) public authors;\\n\\n  // The price of submition that gets routed to the treasury.\\n  uint256 public submitionPrice = 1000000000000000;\\n\\n  // The payout to the winner.\\n  uint256 public payout = 100000000000000000;\\n\\n  // All quotes for a round.\\n  function quotes(uint256 _round) external view returns (string[] memory) {\\n    return _quotes[_round];\\n  }\\n\\n  // The number of quotes of a round.\\n  function quoteCount(uint256 _round) external view returns (uint256) {\\n    return _quotes[_round].length;\\n  }\\n\\n  // A chunk of quotes for a round.\\n  function quotes(\\n    uint256 _round,\\n    uint256 _from,\\n    uint256 _length\\n  ) external view returns (string[] memory page) {\\n    require(_length > 0, '0x00: BAD_ARGS');\\n    for (uint256 _i = 0; _i < _length; _i++) page[_i] = _quotes[_round][_from + _i];\\n  }\\n\\n  // The current round.\\n  function currentRound() public view returns (uint256) {\\n    return fundingCycles.currentOf(projectId).number;\\n  }\\n\\n  constructor(\\n    uint256 _projectId,\\n    ITerminalDirectory _terminalDirectory,\\n    FundingCycles _fundingCycles\\n  ) JuiceboxProject(_projectId, _terminalDirectory) ERC721('Brainstorm', 'BRAINSTORM') {\\n    fundingCycles = _fundingCycles;\\n  }\\n\\n  // The author will get the payout from the DAO if the quote is chosen as the winner.\\n  function submit(string memory _quote, address payable _author) external payable {\\n    // Price must be equal to the submission price.\\n    require(msg.value >= submitionPrice, '0x01: PRICE_TOO_LOW');\\n\\n    // Can't submit the same quote again.\\n    require(authors[_quote] == address(0), '0x02: DUPLICATE');\\n\\n    // Get the current funding cycle number.\\n    uint256 _round = currentRound();\\n\\n    // Take fee into BrainDAO Juicebox treasury\\n    _takeFee(\\n      msg.value,\\n      msg.sender,\\n      string(\\n        abi.encodePacked(\\n          'Round ',\\n          _uint2str(_round),\\n          ' #',\\n          _uint2str(_quotes[_round].length + 1),\\n          ':\\\\r',\\n          '\\\"',\\n          _quote,\\n          '\\\"'\\n        )\\n      ),\\n      false\\n    );\\n\\n    // Add the quote to the round.\\n    _quotes[_round].push(_quote);\\n\\n    // Set the author for the quote.\\n    authors[_quote] = _author;\\n\\n    emit Submit(_round, _quotes[_round].length, msg.value, _author, msg.sender);\\n  }\\n\\n  // The owner of the contract can mint a winner for each round.\\n  function mint(uint256 _round, uint256 _number) external payable onlyOwner {\\n    require(msg.value == payout, '0x03: INSUFFICIENT_PAYOUT');\\n\\n    // Get the current funding cycle number.\\n    uint256 _currentRound = currentRound();\\n\\n    // Must mint for a round that's already over.\\n    require(_round < _currentRound, '0x04: NOT_OVER');\\n\\n    // Must mint an existing quote.\\n    require(_number > 0 && _quotes[_round].length >= _number, '0x05: BAD_NUMBER');\\n\\n    // Get the winning quote.\\n    string memory _winningQuote = _quotes[_round][_number - 1];\\n\\n    // Get the winning author.\\n    address payable _author = authors[_winningQuote];\\n\\n    // Store the winner for the round.\\n    winners[_round] = _number;\\n\\n    // Mint the winning quote for the round.\\n    _safeMint(owner(), _round);\\n\\n    // Send the payout to the winner.\\n    Address.sendValue(_author, msg.value);\\n\\n    emit Mint(_round, _author, _winningQuote, msg.value, msg.sender);\\n  }\\n\\n  // The owner can change the submission price.\\n  function changeSubmitionPrice(uint256 _newPrice) external onlyOwner {\\n    submitionPrice = _newPrice;\\n    emit ChangeSumbitionPrice(_newPrice, msg.sender);\\n  }\\n\\n  // The owner can change the submission price.\\n  function changePayout(uint256 _newPayout) external onlyOwner {\\n    payout = _newPayout;\\n    emit ChangePayout(_newPayout, msg.sender);\\n  }\\n\\n  //https://stackoverflow.com/questions/47129173/how-to-convert-uint-to-string-in-solidity\\n  function _uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return '0';\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n}\\n\"\r\n    },\r\n    \"prb-math/contracts/PRBMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculting the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculting the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explictly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE = 78156646155174841979727994598816262306175212592076161876661508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Now use Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y÷1e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)÷denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"_terminalDirectory\",\"type\":\"address\"},{\"internalType\":\"contract FundingCycles\",\"name\":\"_fundingCycles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ChangePayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ChangeSumbitionPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"quote\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Submit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"authors\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPayout\",\"type\":\"uint256\"}],\"name\":\"changePayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changeSubmitionPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingCycles\",\"outputs\":[{\"internalType\":\"contract FundingCycles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_preferUnstakedTickets\",\"type\":\"bool\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"quoteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"quotes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"page\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"quotes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_permissionIndexes\",\"type\":\"uint256[]\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_projectIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_permissionIndexes\",\"type\":\"uint256[][]\"}],\"name\":\"setOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"setProjectId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_quote\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_author\",\"type\":\"address\"}],\"name\":\"submit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminalDirectory\",\"outputs\":[{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferProjectOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Brainstorm","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000001500000000000000000000000046c9999a2edcd5aa177ed7e8af90c68b7d75ba46000000000000000000000000f507b2a1dd7439201eb07f11e1d62afb29216e2e","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}