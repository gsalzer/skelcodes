{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@ensdomains/ens-contracts/contracts/registry/ENS.sol\": {\r\n      \"content\": \"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external virtual;\\n    function setOwner(bytes32 node, address owner) external virtual;\\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\\n    function setApprovalForAll(address operator, bool approved) external virtual;\\n    function owner(bytes32 node) external virtual view returns (address);\\n    function resolver(bytes32 node) external virtual view returns (address);\\n    function ttl(bytes32 node) external virtual view returns (uint64);\\n    function recordExists(bytes32 node) external virtual view returns (bool);\\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ens/ENSLabelBooker.sol\": {\r\n      \"content\": \"pragma solidity >=0.8.4;\\n\\nimport '@ensdomains/ens-contracts/contracts/registry/ENS.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport {IENSLabelBooker} from './interfaces/IENSLabelBooker.sol';\\n\\ncontract ENSLabelBooker is Ownable, IENSLabelBooker {\\n  ENS public immutable ENS_REGISTRY;\\n  bytes32 public immutable ROOT_NODE;\\n  address public _registrar;\\n\\n  mapping(bytes32 => address) private _bookings;\\n\\n  modifier onlyOwnerOrRegistrar() {\\n    require(\\n      owner() == _msgSender() || _registrar == _msgSender(),\\n      'ENS_LABEL_BOOKER: CALL_NOT_AUTHORIZED'\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @dev Constructor.\\n   * @param ensAddr The address of the ENS registry.\\n   * @param node The node that this registrar administers.\\n   */\\n  constructor(\\n    ENS ensAddr,\\n    bytes32 node,\\n    address owner\\n  ) {\\n    ENS_REGISTRY = ensAddr;\\n    ROOT_NODE = node;\\n    transferOwnership(owner);\\n  }\\n\\n  /**\\n   * @notice Get the address of a booking.\\n   *         The zero address means the booking does not exist.\\n   * @param label The booked label.\\n   * @return The address associated to the booking.\\n   */\\n  function getBooking(string memory label)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    bytes32 labelHash = keccak256(bytes(label));\\n    return _getBooking(labelHash);\\n  }\\n\\n  /**\\n   * @notice Book a label with an address for a later claim.\\n   * @dev Can only be called by the contract owner or the registrar.\\n   * @param label The label to book.\\n   * @param bookingAddress The address which can claim the label.\\n   */\\n  function book(string memory label, address bookingAddress)\\n    external\\n    override\\n    onlyOwnerOrRegistrar\\n  {\\n    bytes32 labelHash = keccak256(bytes(label));\\n    _book(labelHash, bookingAddress);\\n  }\\n\\n  /**\\n   * @notice Batch book operations given a list of labels and bookingAddresses.\\n   * @dev Can only be called by the contract owner or the registrar.\\n   *      Input lists must have the same length.\\n   * @param labels The list of label to book.\\n   * @param bookingAddresses The list of address which can claim the associated label.\\n   */\\n  function batchBook(string[] memory labels, address[] memory bookingAddresses)\\n    external\\n    override\\n    onlyOwnerOrRegistrar\\n  {\\n    require(\\n      labels.length == bookingAddresses.length,\\n      'ENS_LABEL_BOOKER: INVALID_PARAMS'\\n    );\\n    for (uint256 i; i < labels.length; i++) {\\n      bytes32 labelHash = keccak256(bytes(labels[i]));\\n      _book(labelHash, bookingAddresses[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Update the address of a book address.\\n   * @dev Can only be called by the contract owner or the registrar.\\n   * @param label The label of the book.\\n   * @param bookingAddress The address which can claim the label.\\n   */\\n  function updateBooking(string memory label, address bookingAddress)\\n    external\\n    override\\n    onlyOwnerOrRegistrar\\n  {\\n    bytes32 labelHash = keccak256(bytes(label));\\n    _updateBooking(labelHash, bookingAddress);\\n  }\\n\\n  /**\\n   * @notice Update the addresses of books.\\n   * @dev Can only be called by the contract owner or the registrar.\\n   *      Input lists must have the same length.\\n   * @param labels The list of label to book.\\n   * @param bookingAddresses The list of address which can claim the associated label.\\n   */\\n  function batchUpdateBooking(\\n    string[] memory labels,\\n    address[] memory bookingAddresses\\n  ) external override onlyOwner {\\n    require(\\n      labels.length == bookingAddresses.length,\\n      'ENS_LABEL_BOOKER: INVALID_PARAMS'\\n    );\\n    for (uint256 i; i < labels.length; i++) {\\n      bytes32 labelHash = keccak256(bytes(labels[i]));\\n      _updateBooking(labelHash, bookingAddresses[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Delete a booking.\\n   * @dev Can only be called by the contract owner or the registrar.\\n   * @param label The booked label.\\n   */\\n  function deleteBooking(string memory label)\\n    external\\n    override\\n    onlyOwnerOrRegistrar\\n  {\\n    bytes32 labelHash = keccak256(bytes(label));\\n    _deleteBooking(labelHash);\\n  }\\n\\n  /**\\n   * @notice Delete a list of bookings.\\n   * @dev Can only be called by the contract owner or the registrar.\\n   * @param labels The list of labels of the bookings.\\n   */\\n  function batchDeleteBooking(string[] memory labels)\\n    external\\n    override\\n    onlyOwnerOrRegistrar\\n  {\\n    for (uint256 i; i < labels.length; i++) {\\n      bytes32 labelHash = keccak256(bytes(labels[i]));\\n      _deleteBooking(labelHash);\\n    }\\n  }\\n\\n  /**\\n   * @notice Delete a list of bookings.\\n   * @dev Can only be called by the contract owner.\\n   * @param registrar The new registrar that uses this contract as labelBooker Lib\\n   */\\n  function setRegistrar(address registrar) external override onlyOwner {\\n    _registrar = registrar;\\n    emit NewRegistrar(registrar);\\n  }\\n\\n  /**\\n   * @dev Get the address of a booking.\\n   * @param labelHash The hash of the label associated to the booking.\\n   * @return The address associated to the booking.\\n   */\\n  function _getBooking(bytes32 labelHash) internal view returns (address) {\\n    return _bookings[labelHash];\\n  }\\n\\n  /**\\n   * @dev Delete a booking\\n   * @param labelHash The hash of the label associated to the booking.\\n   */\\n  function _deleteBooking(bytes32 labelHash) internal {\\n    bytes32 childNode = keccak256(abi.encodePacked(ROOT_NODE, labelHash));\\n    _bookings[labelHash] = address(0);\\n    emit BookingDeleted(uint256(childNode));\\n  }\\n\\n  /**\\n   * @dev Create a booking\\n   * @param labelHash The hash of the label associated to the booking.\\n   * @param bookingAddress The address associated to the booking.\\n   */\\n  function _book(bytes32 labelHash, address bookingAddress) internal {\\n    require(\\n      bookingAddress != address(0),\\n      'ENS_LABEL_BOOKER: INVALID_BOOKING_ADDRESS'\\n    );\\n    require(\\n      _bookings[labelHash] == address(0),\\n      'ENS_LABEL_BOOKER: LABEL_ALREADY_BOOKED'\\n    );\\n    address subdomainOwner = ENS_REGISTRY.owner(\\n      keccak256(abi.encodePacked(ROOT_NODE, labelHash))\\n    );\\n    require(\\n      subdomainOwner == address(0x0),\\n      'ENS_LABEL_BOOKER: SUBDOMAINS_ALREADY_REGISTERED'\\n    );\\n    bytes32 childNode = keccak256(abi.encodePacked(ROOT_NODE, labelHash));\\n    _bookings[labelHash] = bookingAddress;\\n    emit NameBooked(uint256(childNode), bookingAddress);\\n  }\\n\\n  /**\\n   * @dev Update the address of a booking\\n   * @param labelHash The hash of the label associated to the booking.\\n   * @param bookingAddress The new address associated to the booking.\\n   */\\n  function _updateBooking(bytes32 labelHash, address bookingAddress) internal {\\n    require(bookingAddress != address(0), 'ENS_LABEL_BOOKER: INVALID_ADDRESS');\\n    require(\\n      _bookings[labelHash] != address(0),\\n      'ENS_LABEL_BOOKER: LABEL_NOT_BOOKED'\\n    );\\n    bytes32 childNode = keccak256(abi.encodePacked(ROOT_NODE, labelHash));\\n    _bookings[labelHash] = bookingAddress;\\n    emit BookingUpdated(uint256(childNode), bookingAddress);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/ens/interfaces/IENSLabelBooker.sol\": {\r\n      \"content\": \"pragma solidity >=0.8.4;\\n\\ninterface IENSLabelBooker {\\n  // Logged when a booking is created.\\n  event NameBooked(uint256 indexed id, address indexed bookingAddress);\\n  // Logged when a booking is updated.\\n  event BookingUpdated(uint256 indexed id, address indexed bookingAddress);\\n  // Logged when a booking is deleted.\\n  event BookingDeleted(uint256 indexed id);\\n  event NewRegistrar(address indexed registrar);\\n\\n  /**\\n   * @notice Get the address of a booking.\\n   * @param label The booked label.\\n   * @return The address associated to the booking\\n   */\\n  function getBooking(string memory label) external view returns (address);\\n\\n  /**\\n   * @notice Book a name.\\n   * @param label The label to book.\\n   * @param bookingAddress The address associated to the booking.\\n   *\\n   * Emits a {NameBooked} event.\\n   */\\n  function book(string memory label, address bookingAddress) external;\\n\\n  /**\\n   * @notice Books a list of names.\\n   * @param labels The list of label to book.\\n   * @param bookingAddresses The list of addresses associated to the bookings.\\n   *\\n   * Emits a {NameBooked} event for each booking.\\n   */\\n  function batchBook(string[] memory labels, address[] memory bookingAddresses)\\n    external;\\n\\n  /**\\n   * @notice Update a booking.\\n   * @param label The booked label.\\n   * @param bookingAddress The new address associated to the booking.\\n   *\\n   * Emits a {BookingUpdated} event.\\n   */\\n  function updateBooking(string memory label, address bookingAddress) external;\\n\\n  /**\\n   * @notice Update a list of bookings.\\n   * @param labels The list of labels of the bookings.\\n   * @param bookingAddresses The list of new addresses associated to the bookings.\\n   *\\n   * Emits a {BookingUpdated} event for each updated booking.\\n   */\\n  function batchUpdateBooking(\\n    string[] memory labels,\\n    address[] memory bookingAddresses\\n  ) external;\\n\\n  /**\\n   * @notice Delete a booking.\\n   * @param label The booked label.\\n   *\\n   * Emits a {BookingDeleted} event.\\n   */\\n  function deleteBooking(string memory label) external;\\n\\n  /**\\n   * @notice Delete a list of bookings.\\n   * @param labels The list of labels of the bookings.\\n   *\\n   * Emits a {BookingDeleted} event for each deleted booking.\\n   */\\n  function batchDeleteBooking(string[] memory labels) external;\\n\\n  /**\\n   * @notice Set the registrar, that can use this lib.\\n   * @param registrar the newt registrar.\\n   *\\n   * Emits a {NewRegistrar} event\\n   */\\n  function setRegistrar(address registrar) external;\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"ensAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BookingDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bookingAddress\",\"type\":\"address\"}],\"name\":\"BookingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bookingAddress\",\"type\":\"address\"}],\"name\":\"NameBooked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"}],\"name\":\"NewRegistrar\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ENS_REGISTRY\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_NODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_registrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"bookingAddresses\",\"type\":\"address[]\"}],\"name\":\"batchBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"}],\"name\":\"batchDeleteBooking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"bookingAddresses\",\"type\":\"address[]\"}],\"name\":\"batchUpdateBooking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bookingAddress\",\"type\":\"address\"}],\"name\":\"book\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"deleteBooking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"getBooking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"}],\"name\":\"setRegistrar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bookingAddress\",\"type\":\"address\"}],\"name\":\"updateBooking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ENSLabelBooker","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000c2e074ec69a0dfb2997ba6c7d2e1e433c99d8edd0cf295e2314840cf7f62ca9b23c2d6004e72c706022297ae716ab000000000000000000000000522f4638f7802a04bf2c2a8ebc4279541f4fa90d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}