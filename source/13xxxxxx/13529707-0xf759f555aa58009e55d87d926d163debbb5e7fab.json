{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GiveawayRegistry/TokenSets/Predefined/ArtDrop/TokenSetArtDropOGs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../TokenSet.sol\\\";\\n\\ncontract TokenSetArtDropOGs is TokenSet {\\n\\n    /**\\n     * Unordered List\\n     */\\n    constructor(\\n        address _registry,\\n        uint16 _traitId\\n        ) \\n        TokenSet (\\n            \\\"OGs with ArtDrop Trait\\\",\\n            _registry,\\n            _traitId\\n        ) {\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/GiveawayRegistry/TokenSets/TokenSet.sol\": {\r\n      \"content\": \"// TODO: refactor to use permille calls\\n//\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IECRegistry {\\n    function getImplementer(uint16 traitID) external view returns (address);\\n    function addressCanModifyTrait(address, uint16) external view returns (bool);\\n    function addressCanModifyTraits(address, uint16[] memory) external view returns (bool);\\n    function hasTrait(uint16 traitID, uint16 tokenID) external view returns (bool);\\n    function setTrait(uint16 traitID, uint16 tokenID, bool) external;\\n}\\n\\ncontract TokenSet is Ownable {\\n\\n    IECRegistry                 public ECRegistry;\\n    uint16            immutable public traitId;\\n    bytes32                     public name;\\n    uint16                      public actualSize;\\n    mapping(uint16 => uint16)   public data;\\n    uint8                       public setType = 1;\\n\\n\\n    /**\\n     * Virtual data set, ordering not guaranteed because removal \\n     * just replaces position with last item and decreases collection size\\n     */\\n    constructor(bytes32 _name, address _registry, uint16 _traitId) {\\n        name = _name;\\n        ECRegistry = IECRegistry(_registry);\\n        traitId = _traitId;\\n    }\\n\\n    /**\\n     * @notice Add a token to the end of the list\\n     */\\n    function add(uint16 _id) public onlyAllowed {\\n        data[actualSize] = _id;\\n        actualSize++;\\n    }\\n\\n    /**\\n     * @notice Add a token to the end of the list\\n     */\\n    function batchAdd(uint16[] calldata _id) public onlyAllowed {\\n        for(uint16 i = 0; i < _id.length; i++) {\\n            data[actualSize++] = _id[i];\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove the token at virtual position\\n     */\\n    function remove(uint32 _pos, uint16 _permille) public onlyAllowed {\\n        // copy value of last item in set to position and decrease length by 1\\n        actualSize--;\\n        data[getInternalPosition(_pos, _permille)] = data[actualSize];\\n    }\\n\\n    /**\\n     * @notice Get the token at actual position\\n     */\\n    function getAtIndex(uint16 _index) public view returns (uint16) {\\n        return data[_index];\\n    }\\n\\n    /**\\n     * @notice Get the token at virtual position\\n     */\\n    function get(uint32 _pos, uint16 _permille) public view returns (uint16) {\\n        return data[getInternalPosition(_pos, _permille)];\\n    }\\n\\n    /**\\n     * @notice Retrieve list size\\n     */\\n    function size(uint16 _permille) public view returns (uint256) {\\n        return actualSize * _permille;\\n    }\\n\\n    /**\\n     * @notice Retrieve internal position for a virtual position\\n     */\\n    function getInternalPosition(uint32 _pos, uint16 _permille) public view returns(uint16) {\\n        uint256 realPosition = _pos / _permille;\\n        require(realPosition < actualSize, \\\"TokenSet: Index out of bounds.\\\");\\n        return uint16(realPosition);\\n    }\\n\\n    modifier onlyAllowed() {\\n        require(\\n            ECRegistry.addressCanModifyTrait(msg.sender, traitId),\\n            \\\"TokenSet: Not Authorised\\\" \\n        );\\n        _;\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_traitId\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ECRegistry\",\"outputs\":[{\"internalType\":\"contract IECRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actualSize\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_id\",\"type\":\"uint16[]\"}],\"name\":\"batchAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_pos\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_permille\",\"type\":\"uint16\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"}],\"name\":\"getAtIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_pos\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_permille\",\"type\":\"uint16\"}],\"name\":\"getInternalPosition\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_pos\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_permille\",\"type\":\"uint16\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_permille\",\"type\":\"uint16\"}],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenSetArtDropOGs","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004fcb9b38cac63957c8877667b0adb9207c890a130000000000000000000000000000000000000000000000000000000000000003","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}