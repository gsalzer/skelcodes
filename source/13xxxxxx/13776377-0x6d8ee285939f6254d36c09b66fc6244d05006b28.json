{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"ISTAKING.sol\":{\"content\":\"/**\\n* @dev Public interface for the staking functions \\n*/\\ninterface ISTAKING{\\n    /**\\n    * @dev Stakes a certain amount of tokens, this will attempt to transfer the given amount from the caller.\\n    * It will count the actual number of tokens trasferred as being staked\\n    * MUST trigger Staked event.\\n    **/\\n    function stake(uint256 amount) external returns (uint256);\\n\\n    /**\\n    * @dev Stakes a certain amount of tokens on behalf of address `user`, \\n    * this will attempt to transfer the given amount from the caller.\\n    * caller must have approved this contract, previously. \\n    * It will count the actual number of tokens trasferred as being staked\\n    * MUST trigger Staked event.\\n    * Returns the number of tokens actually staked\\n    **/\\n    function stakeFor(address voter, address staker, uint256 amount) external returns (uint256);\\n\\n    /**\\n    * @dev Unstakes a certain amount of tokens, this SHOULD return the given amount of tokens to the caller, \\n    * MUST trigger Unstaked event.\\n    */\\n    function unstake(uint256 amount) external;\\n\\n    /**\\n    * @dev Unstakes a certain amount of tokens currently staked on behalf of address `user`, \\n    * this SHOULD return the given amount of tokens to the caller\\n    * caller is responsible for returning tokens to `user` if applicable.\\n    * MUST trigger Unstaked event.\\n    */\\n    function unstakeFor(address voter, address staker, uint256 amount) external;\\n\\n    /**\\n    * @dev Returns the current total of tokens staked for address addr.\\n    */\\n    function totalStakedFor(address addr) external view returns (uint256);\\n\\n    /**\\n    * @dev Returns the current tokens staked by address `delegate` for address `user`.\\n    */\\n    function stakedFor(address user, address delegate) external view returns (uint256);\\n\\n    /**\\n    * @dev Returns the number of current total tokens staked.\\n    */\\n    function totalStaked() external view returns (uint256);\\n\\n    /**\\n    * @dev address of the token being used by the staking interface\\n    */\\n    function token() external view returns (address);\\n\\n    /** Event\\n    * `voter` the address that will cast votes weighted by the number of tokens staked for `voter`\\n    * `staker` the address staking for `voter` - tokens are transferred from \\u0026 returned to `staker`\\n    *  `proxy` is the Staking Proxy contract that is approved by `staker` to perform the token transfer\\n    * `amount` is the value of tokens to be staked\\n    **/\\n    event Staked(address indexed voter, address indexed staker, address proxy, uint256 amount);\\n    /** Event\\n    * `voter` the address that will cast votes weighted by the number of tokens staked for `voter`\\n    * `staker` the address staking for `voter` - tokens are transferred from \\u0026 returned to `staker`\\n    *  `proxy` is the Staking Proxy contract that is approved by `staker` to perform the token transfer\\n    * `amount` is the value of tokens to be staked\\n    **/\\n    event Unstaked(address indexed voter, address indexed staker, address proxy, uint256 amount);\\n}\"},\"ISTAKINGPROXY.sol\":{\"content\":\"interface ISTAKINGPROXY{\\n    /**\\n    * @dev a callback to perform the actual transfer of tokens to the actual staking contract \\n    * Precondition: the user doing the staking MUST approve this contract or we\\u0027ll revert\\n    **/\\n    function proxyTransfer(address from, uint256 amount) external;\\n}\"},\"ITOKENLOCK.sol\":{\"content\":\"/**\\n* @dev Inteface for the token lock features in this contract\\n*/\\ninterface ITOKENLOCK {\\n    /**\\n     * @dev Emitted when the token lock is initialized  \\n     * `tokenHolder` is the address the lock pertains to\\n     *  `amountLocked` is the amount of tokens locked \\n     *  `time` is the (initial) time at which tokens were locked\\n     *  `unlockPeriod` is the time interval at which tokens become unlockedPerPeriod\\n     *  `unlockedPerPeriod` is the amount of token unlocked earch unlockPeriod\\n     */\\n    event  NewTokenLock(address tokenHolder, uint256 amountLocked, uint256 time, uint256 unlockPeriod, uint256 unlockedPerPeriod);\\n    /**\\n     * @dev Emitted when the token lock is updated  to be more strict\\n     * `tokenHolder` is the address the lock pertains to\\n     *  `amountLocked` is the amount of tokens locked \\n     *  `time` is the (initial) time at which tokens were locked\\n     *  `unlockPeriod` is the time interval at which tokens become unlockedPerPeriod\\n     *  `unlockedPerPeriod` is the amount of token unlocked earch unlockPeriod\\n     */\\n    event  UpdateTokenLock(address tokenHolder, uint256 amountLocked, uint256 time, uint256 unlockPeriod, uint256 unlockedPerPeriod);\\n    \\n    /**\\n     * @dev Lock `baseTokensLocked_` held by the caller with `unlockedPerEpoch_` tokens unlocking each `unlockEpoch_`\\n     *\\n     *\\n     * Emits an {NewTokenLock} event indicating the updated terms of the token lockup.\\n     *\\n     * Requires msg.sender to:\\n     *\\n     * - Must not be a prevoius lock for this address. If so, it must be first cleared with a call to {clearLock}.\\n     * - Must have at least a balance of `baseTokensLocked_` to lock\\n     * - Must provide non-zero `unlockEpoch_`\\n     * - Must have at least `unlockedPerEpoch_` tokens to unlock \\n     *  - `unlockedPerEpoch_` must be greater than zero\\n     */\\n    \\n    function newTokenLock(uint256 baseTokensLocked_, uint256 unlockEpoch_, uint256 unlockedPerEpoch_) external;\\n    \\n    /**\\n     * @dev Reset the lock state\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must not have any tokens locked, currently\\n     */\\n    function clearLock() external;\\n    \\n    /**\\n     * @dev Returns the amount of tokens that are unlocked i.e. transferrable by `who`\\n     *\\n     */\\n    function balanceUnlocked(address who) external view returns (uint256 amount);\\n    /**\\n     * @dev Returns the amount of tokens that are locked and not transferrable by `who`\\n     *\\n     */\\n    function balanceLocked(address who) external view returns (uint256 amount);\\n\\n    /**\\n     * @dev Reduce the amount of token unlocked each period by `subtractedValue`\\n     * \\n     * Emits an {UpdateTokenLock} event indicating the updated terms of the token lockup.\\n     * \\n     * Requires: \\n     *  - msg.sender must have tokens currently locked\\n     *  - `subtractedValue` is greater than 0\\n     *  - cannot reduce the unlockedPerEpoch to 0\\n     *\\n     *  NOTE: As a side effect resets the baseTokensLocked and lockTime for msg.sender \\n     */\\n    function decreaseUnlockAmount(uint256 subtractedValue) external;\\n    /**\\n     * @dev Increase the duration of the period at which tokens are unlocked by `addedValue`\\n     * this will have the net effect of slowing the rate at which tokens are unlocked\\n     * \\n     * Emits an {UpdateTokenLock} event indicating the updated terms of the token lockup.\\n     * \\n     * Requires: \\n     *  - msg.sender must have tokens currently locked\\n     *  - `addedValue` is greater than 0\\n     * \\n     *  NOTE: As a side effect resets the baseTokensLocked and lockTime for msg.sender \\n     */\\n    function increaseUnlockTime(uint256 addedValue) external;\\n    /**\\n     * @dev Increase the number of tokens locked by `addedValue`\\n     * i.e. locks up more tokens.\\n     * \\n     *      \\n     * Emits an {UpdateTokenLock} event indicating the updated terms of the token lockup.\\n     * \\n     * Requires: \\n     *  - msg.sender must have tokens currently locked\\n     *  - `addedValue` is greater than zero\\n     *  - msg.sender must have sufficient unlocked tokens to lock\\n     * \\n     *  NOTE: As a side effect resets the baseTokensLocked and lockTime for msg.sender \\n     *\\n     */\\n    function increaseTokensLocked(uint256 addedValue) external;\\n\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"},\"VotingPower.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\nimport \\\"./ISTAKING.sol\\\";\\nimport \\\"./ISTAKINGPROXY.sol\\\";\\nimport \\\"./ITOKENLOCK.sol\\\";\\n\\n\\nstruct Stake{\\n    uint256 totalStake;\\n    mapping (address =\\u003e uint256) stakedAmount;\\n}\\n\\n/** \\n* @dev Computes voting power based on staked and locked tokens.\\n* The deployer is responsible for supplying a token_ implementing ERC20 and ILOCKER. \\n* The deployer is trusted to know \\u0026 have verified the token code token code is appropriate.\\n* A scaling factor is specified as a uint8 array of bytes which serves to \\n* reduce or increase the voting power of a class of token holder (locked tokens). \\n* The scaling factor changes over time, and is looked up based on the current epoch\\n*/\\ncontract VotingPower is ReentrancyGuard, ISTAKING{\\n    //the token used for staking. Implements ILOCKER. It is trusted \\u0026 known code.\\n    IERC20 immutable _token;\\n    //store the number of tokens staked by each address\\n    mapping (address =\\u003e Stake) public stakes;\\n\\n    //keep track of the sum of staked tokens\\n    uint256 private _totalStaked;\\n\\n    using SafeERC20 for IERC20;\\n\\n    //locked tokens have their voting power scaled by this percentage.\\n    bytes voteScalingPercent;\\n    //the time at which this contract was deployed (unix time)\\n    uint256 creationTime;\\n    //the time each voting epoch lasts in seconds\\n    uint256 epochLength;\\n\\n    /**\\n    * @dev initialize the contract\\n    * @param token_ is the token that is staked or locked to get voting power\\n    * @param scaling_ is an array of uint8 (bytes) percent voting power discounts for each epoch\\n    * @param epoch_ is the duration of one epoch in seconds\\n    **/\\n    constructor(address token_, bytes memory scaling_, uint256 epoch_){\\n        require(epoch_ \\u003e 0);\\n        _token = IERC20(token_);\\n        creationTime = block.timestamp;\\n        voteScalingPercent = scaling_;\\n        epochLength = epoch_;\\n    }\\n\\n    /**\\n    * @dev Returns the voting power for `who`\\n    * @param who the address whose votingPower to compute\\n    * @return the voting power for `who`\\n    **/\\n    function votingPower(address who) public view returns (uint256) {\\n        return _votingPowerStaked(who) + _votingPowerLocked(who);\\n    }\\n\\n    /**\\n    * @dev Returns the voting power for `who` due to staked tokens\\n    * @param who the address whose votingPower to compute\\n    * @return the voting power for who    \\n    **/\\n    function _votingPowerStaked(address who) internal view returns (uint256) {\\n        return stakes[who].totalStake;\\n    }\\n    /**\\n    * @dev Returns the voting power for `who` due to locked tokens\\n    * @param who the address whose votingPower to compute\\n    * @return the voting power for who    \\n    * Locked tokens scaled discounted voting power as defined by voteScalingPercent\\n    **/\\n    function _votingPowerLocked(address who) internal view returns (uint256) {\\n        uint256 epoch = _currentEpoch();\\n        if(epoch \\u003e= voteScalingPercent.length){\\n            return ITOKENLOCK(address(_token)).balanceLocked(who);\\n        }\\n        return ITOKENLOCK(address(_token)).balanceLocked(who) * (uint8)(voteScalingPercent[epoch])/100.0;\\n    }\\n    /**\\n    * @dev Returns the current epoch used to look up the scaling factor\\n    * @return the current epoch\\n    **/\\n    function _currentEpoch() internal view returns (uint256) {\\n        return (block.timestamp - creationTime)/epochLength;\\n    }\\n\\n    /**\\n    * @dev Stakes the specified `amount` of tokens, this will attempt to transfer the given amount from the caller.\\n    * It will count the actual number of tokens trasferred as being staked\\n    * MUST trigger Staked event.\\n    * Returns the number of tokens actually staked\\n    **/\\n    function stake(uint256 amount) external override nonReentrant returns (uint256){\\n        require(amount \\u003e 0, \\\"Cannot Stake 0\\\");\\n        uint256 previousAmount = IERC20(_token).balanceOf(address(this));\\n        _token.safeTransferFrom( msg.sender, address(this), amount);\\n        uint256 transferred = IERC20(_token).balanceOf(address(this)) - previousAmount;\\n        require(transferred \\u003e 0);\\n        stakes[msg.sender].totalStake = stakes[msg.sender].totalStake + transferred;\\n        stakes[msg.sender].stakedAmount[msg.sender] = stakes[msg.sender].stakedAmount[msg.sender] + transferred;\\n        _totalStaked = _totalStaked + transferred;\\n        emit Staked(msg.sender, msg.sender, msg.sender, transferred);\\n        return transferred;\\n    }\\n\\n    /**\\n    * @dev Stakes the specified `amount` of tokens from `staker` on behalf of address `voter`, \\n    * this will attempt to transfer the given amount from the caller.\\n    * Must be called from an ISTAKINGPROXY contract that has been approved by `staker`.\\n    * Tokens will be staked towards the voting power of address `voter` allowing one address to delegate voting power to another. \\n    * It will count the actual number of tokens trasferred as being staked\\n    * MUST trigger Staked event.\\n    * Returns the number of tokens actually staked\\n    **/\\n    function stakeFor(address voter, address staker, uint256 amount) external override nonReentrant returns (uint256){\\n        require(amount \\u003e 0, \\\"Cannot Stake 0\\\");\\n        uint256 previousAmount = IERC20(_token).balanceOf(address(this));\\n        //_token.safeTransferFrom( msg.sender, address(this), amount);\\n        ISTAKINGPROXY(msg.sender).proxyTransfer(staker, amount);\\n        //verify that amount that the proxy contract transferred the amount\\n        uint256 transferred = IERC20(_token).balanceOf(address(this)) - previousAmount;\\n        require(transferred \\u003e 0);\\n        stakes[voter].totalStake = stakes[voter].totalStake + transferred;\\n        stakes[voter].stakedAmount[msg.sender] = stakes[voter].stakedAmount[msg.sender] + transferred;\\n        _totalStaked = _totalStaked + transferred;\\n        emit Staked(voter, staker, msg.sender, transferred);\\n        return transferred;\\n    }\\n    /**\\n    * @dev Unstakes the specified `amount` of tokens, this SHOULD return the given amount of tokens to the caller, \\n    * MUST trigger Unstaked event.\\n    */\\n    function unstake(uint256 amount) external override nonReentrant{\\n        require(amount \\u003e 0, \\\"Cannot UnStake 0\\\");\\n        require(amount \\u003c= stakes[msg.sender].stakedAmount[msg.sender], \\\"INSUFFICENT TOKENS TO UNSTAKE\\\");\\n        _token.safeTransfer( msg.sender, amount);\\n        stakes[msg.sender].totalStake = stakes[msg.sender].totalStake - amount;\\n        stakes[msg.sender].stakedAmount[msg.sender] = stakes[msg.sender].stakedAmount[msg.sender] - amount;\\n        _totalStaked = _totalStaked - amount;\\n        emit Unstaked(msg.sender,msg.sender, msg.sender, amount);\\n    }\\n\\n    /**\\n    * @dev Unstakes the specified `amount` of tokens currently staked by `staker` on behalf of `voter`, \\n    * this SHOULD return the given amount of tokens to the calling contract\\n    * calling contract is responsible for returning tokens to `staker` if applicable.\\n    * MUST trigger Unstaked event.\\n    */\\n    function unstakeFor(address voter, address staker, uint256 amount) external override nonReentrant{\\n        require(amount \\u003e 0, \\\"Cannot UnStake 0\\\");\\n        require(amount \\u003c= stakes[voter].stakedAmount[msg.sender], \\\"INSUFFICENT TOKENS TO UNSTAKE\\\");\\n        //_token.safeTransfer( msg.sender, amount);\\n        _token.safeTransfer(staker, amount);\\n        stakes[voter].totalStake = stakes[voter].totalStake - amount;\\n        stakes[voter].stakedAmount[msg.sender] = stakes[voter].stakedAmount[msg.sender] - amount;\\n        _totalStaked = _totalStaked - amount;\\n        emit Unstaked(voter, staker, msg.sender, amount);\\n    }\\n\\n    /**\\n    * @dev Returns the current total of tokens staked for address `addr`.\\n    */\\n    function totalStakedFor(address addr) external override view returns (uint256){\\n        return stakes[addr].totalStake;\\n    }\\n\\n    /**\\n    * @dev Returns the current tokens staked by address `staker` for address `voter`.\\n    */\\n    function stakedFor(address voter, address staker) external override view returns (uint256){\\n        return stakes[voter].stakedAmount[staker];\\n    }\\n    /**\\n    * @dev Returns the number of current total tokens staked.\\n    */\\n    function totalStaked() external override view returns (uint256){\\n        return _totalStaked;\\n    }\\n    /**\\n    * @dev address of the token being used by the staking interface\\n    */\\n    function token() external override view returns (address){\\n        return address(_token);\\n    }\\n   \\n    \\n\\n}\\n\\n\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"scaling_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"totalStakedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"votingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VotingPower","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001b890fd37cd50bea59346fc2f8ddb7cd9f5fabd500000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000093a80000000000000000000000000000000000000000000000000000000000000001c0c0f1215181b1e2124272a2d303336393c3f424245484b4e5154575a00000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://92bccdb43951d36e73e23742739b7cd52375010212e2da1b33f9ecd4ab9b7fb3"}]}