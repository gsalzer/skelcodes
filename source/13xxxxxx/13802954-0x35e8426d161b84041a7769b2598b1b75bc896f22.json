{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"War.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721Receiver.sol\\\";\\nimport \\\"IERC721.sol\\\";\\nimport \\\"Ownable.sol\\\";\\nimport \\\"HONOR.sol\\\";\\n\\ncontract War is Ownable, IERC721Receiver {\\n    // struct to store a stake's token, owner, and earning values\\n    struct Stake {\\n        uint16 tokenId;\\n        uint80 value;\\n        address owner;\\n    }\\n\\n    event TokenStaked(address owner, uint256 tokenId, uint256 value);\\n    event HONORClaimed(uint256 tokenId, uint256 earned, bool unstaked);\\n\\n    // reference to the SamuraiDoge NFT contract\\n    IERC721 samuraidoge;\\n    // reference to the $HONOR contract for minting $HONOR earnings\\n    HONOR honor;\\n\\n    // maps tokenId to stake\\n    mapping(uint256 => Stake) public war;\\n\\n    // maps address to number of tokens staked\\n    mapping(address => uint256) public numTokensStaked;\\n\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // samuraidoge earn 10 $HONOR per day\\n    uint256 public constant DAILY_HONOR_RATE = 10 ether;\\n\\n    // number of SamuraiDoge staked in the War\\n    uint256 public totalSamuraiDogeStaked;\\n\\n    // the last time $HONOR can be claimed\\n    uint256 public lastClaimTimestamp;\\n\\n    // whether staking is active\\n    bool public stakeIsActive = true;\\n\\n    // Bonus $HONOR for elligible tokens\\n    uint256 public tokensElligibleForBonus;\\n    uint256 public bonusAmount;\\n    mapping(uint256 => bool) public bonusClaimed;\\n\\n    /**\\n     * @param _samuraidoge reference to the SamuraiDoge NFT contract\\n     * @param _honor reference to the $HONOR token\\n     * @param _claimPeriod Period (in seconds) from contract creation when staked SamuraiDoges can earn $HON\\n     * @param _tokensElligibleForBonus Number of tokens elligible for bonus $HON (ordered by tokenId)\\n     * @param _bonusAmount Amount of $HON (in Wei) to be given out as bonus\\n     */\\n    constructor(\\n        address _samuraidoge,\\n        address _honor,\\n        uint256 _claimPeriod,\\n        uint256 _tokensElligibleForBonus,\\n        uint256 _bonusAmount\\n    ) {\\n        samuraidoge = IERC721(_samuraidoge);\\n        honor = HONOR(_honor);\\n        lastClaimTimestamp = block.timestamp + _claimPeriod;\\n        tokensElligibleForBonus = _tokensElligibleForBonus;\\n        bonusAmount = _bonusAmount;\\n    }\\n\\n    /** STAKING */\\n\\n    /**\\n     * adds SamuraiDoges to the War\\n     * @param tokenIds the IDs of the SamuraiDoge to stake\\n     */\\n    function addManyToWar(uint16[] calldata tokenIds) external {\\n        require(stakeIsActive, \\\"Staking is paused\\\");\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(\\n                samuraidoge.ownerOf(tokenIds[i]) == msg.sender,\\n                \\\"Not your token\\\"\\n            );\\n            samuraidoge.transferFrom(msg.sender, address(this), tokenIds[i]);\\n            _addSamuraiDogeToWar(msg.sender, tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * adds a single SamuraiDoge to the War\\n     * @param owner the address of the staker\\n     * @param tokenId the ID of the SamuraiDoge to add to the War\\n     */\\n    function _addSamuraiDogeToWar(address owner, uint256 tokenId) internal {\\n        war[tokenId] = Stake({\\n            owner: owner,\\n            tokenId: uint16(tokenId),\\n            value: uint80(block.timestamp)\\n        });\\n        _addTokenToOwnerEnumeration(owner, tokenId);\\n        totalSamuraiDogeStaked += 1;\\n        numTokensStaked[owner] += 1;\\n        emit TokenStaked(owner, tokenId, block.timestamp);\\n    }\\n\\n    /** CLAIMING / UNSTAKING */\\n\\n    /**\\n     * realize $HONOR earnings and optionally unstake tokens from the War\\n     * @param tokenIds the IDs of the tokens to claim earnings from\\n     * @param unstake whether or not to unstake ALL of the tokens listed in tokenIds\\n     */\\n    function claimManyFromWar(uint16[] calldata tokenIds, bool unstake)\\n        external\\n    {\\n        uint256 owed = 0;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            owed += _claimHonorFromWar(tokenIds[i], unstake);\\n        }\\n        if (owed == 0) return;\\n        honor.stakingMint(msg.sender, owed);\\n    }\\n\\n    /**\\n     * realize $HONOR earnings for a single SamuraiDoge and optionally unstake it\\n     * @param tokenId the ID of the SamuraiDoge to claim earnings from\\n     * @param unstake whether or not to unstake the SamuraiDoge\\n     * @return owed - the amount of $HONOR earned\\n     */\\n    function _claimHonorFromWar(uint256 tokenId, bool unstake)\\n        internal\\n        returns (uint256)\\n    {\\n        Stake memory stake = war[tokenId];\\n        if (stake.owner == address(0)) {\\n            // Unstaked SD tokens\\n            require(\\n                samuraidoge.ownerOf(tokenId) == msg.sender,\\n                \\\"Not your token\\\"\\n            );\\n            uint256 owed = _getClaimableHonor(tokenId);\\n            bonusClaimed[tokenId] = true;\\n            emit HONORClaimed(tokenId, owed, unstake);\\n            return owed;\\n        } else {\\n            // Staked SD tokens\\n            require(stake.owner == msg.sender, \\\"Not your token\\\");\\n            uint256 owed = _getClaimableHonor(tokenId);\\n            if (_elligibleForBonus(tokenId)) {\\n                bonusClaimed[tokenId] = true;\\n            }\\n            if (unstake) {\\n                // Send back SamuraiDoge to owner\\n                samuraidoge.safeTransferFrom(\\n                    address(this),\\n                    msg.sender,\\n                    tokenId,\\n                    \\\"\\\"\\n                );\\n                _removeTokenFromOwnerEnumeration(stake.owner, stake.tokenId);\\n                delete war[tokenId];\\n                totalSamuraiDogeStaked -= 1;\\n                numTokensStaked[msg.sender] -= 1;\\n            } else {\\n                // Reset stake\\n                war[tokenId] = Stake({\\n                    owner: msg.sender,\\n                    tokenId: uint16(tokenId),\\n                    value: uint80(block.timestamp)\\n                });\\n            }\\n            emit HONORClaimed(tokenId, owed, unstake);\\n            return owed;\\n        }\\n    }\\n\\n    /** GET CLAIMABLE AMOUNT */\\n\\n    /**\\n     * Calculate total claimable $HONOR earnings from staked SamuraiDoges\\n     * @param tokenIds the IDs of the tokens to claim earnings from\\n     */\\n    function getClaimableHonorForMany(uint16[] calldata tokenIds)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 owed = 0;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            owed += _getClaimableHonor(tokenIds[i]);\\n        }\\n        return owed;\\n    }\\n\\n    /**\\n     * Check if a SamuraiDoge token is elligible for bonus\\n     * @param tokenId the ID of the token to check for elligibility\\n     */\\n    function _elligibleForBonus(uint256 tokenId) internal view returns (bool) {\\n        return tokenId < tokensElligibleForBonus && !bonusClaimed[tokenId];\\n    }\\n\\n    /**\\n     * Calculate claimable $HONOR earnings from a single staked SamuraiDoge\\n     * @param tokenId the ID of the token to claim earnings from\\n     */\\n    function _getClaimableHonor(uint256 tokenId)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 owed = 0;\\n        if (tokenId < tokensElligibleForBonus && !bonusClaimed[tokenId]) {\\n            owed += bonusAmount;\\n        }\\n        Stake memory stake = war[tokenId];\\n        if (stake.value == 0) {} else if (\\n            block.timestamp < lastClaimTimestamp\\n        ) {\\n            owed +=\\n                ((block.timestamp - stake.value) * DAILY_HONOR_RATE) /\\n                1 days;\\n        } else if (stake.value > lastClaimTimestamp) {\\n            // $HONOR production stopped already\\n        } else {\\n            owed =\\n                ((lastClaimTimestamp - stake.value) * DAILY_HONOR_RATE) /\\n                1 days; // stop earning additional $HONOR after lastClaimTimeStamp\\n        }\\n        return owed;\\n    }\\n\\n    /** ENUMERABLE */\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {numTokensStaked} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(index < numTokensStaked[owner], \\\"Owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param owner address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address owner, uint256 tokenId)\\n        private\\n    {\\n        uint256 length = numTokensStaked[owner];\\n        _ownedTokens[owner][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param owner address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address owner, uint256 tokenId)\\n        private\\n    {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = numTokensStaked[owner] - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[owner][lastTokenIndex];\\n\\n            _ownedTokens[owner][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[owner][lastTokenIndex];\\n    }\\n\\n    /** UTILS */\\n\\n    /**\\n     * @dev Returns the owner address of a staked SamuraiDoge token\\n     * @param tokenId the ID of the token to check for owner\\n     */\\n    function ownerOf(uint256 tokenId) public view returns (address) {\\n        Stake memory stake = war[tokenId];\\n        return stake.owner;\\n    }\\n\\n    /**\\n     * @dev Returns whether a SamuraiDoge token is staked\\n     * @param tokenId the ID of the token to check for staking\\n     */\\n    function isStaked(uint256 tokenId) public view returns (bool) {\\n        Stake memory stake = war[tokenId];\\n        return stake.owner != address(0);\\n    }\\n\\n    /** ADMIN */\\n\\n    /**\\n     * enables owner to pause / unpause staking\\n     */\\n    function setStakingStatus(bool _status) external onlyOwner {\\n        stakeIsActive = _status;\\n    }\\n\\n    /**\\n     * allows owner to unstake tokens from the War, return the tokens to the tokens' owner, and claim $HON earnings\\n     * @param tokenIds the IDs of the tokens to claim earnings from\\n     * @param tokenOwner the address of the SamuraiDoge tokens owner\\n     */\\n    function rescueManyFromWar(uint16[] calldata tokenIds, address tokenOwner)\\n        external\\n        onlyOwner\\n    {\\n        uint256 owed = 0;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            owed += _rescueFromWar(tokenIds[i], tokenOwner);\\n        }\\n        if (owed == 0) return;\\n        honor.stakingMint(tokenOwner, owed);\\n    }\\n\\n    /**\\n     * unstake a single SamuraiDoge from War and claim $HON earnings\\n     * @param tokenId the ID of the SamuraiDoge to rescue\\n     * @param tokenOwner the address of the SamuraiDoge token owner\\n     * @return owed - the amount of $HONOR earned\\n     */\\n    function _rescueFromWar(uint256 tokenId, address tokenOwner)\\n        internal\\n        returns (uint256)\\n    {\\n        Stake memory stake = war[tokenId];\\n        require(stake.owner == tokenOwner, \\\"Not your token\\\");\\n        uint256 owed = _getClaimableHonor(tokenId);\\n        if (_elligibleForBonus(tokenId)) {\\n            bonusClaimed[tokenId] = true;\\n        }\\n        // Send back SamuraiDoge to owner\\n        samuraidoge.safeTransferFrom(address(this), tokenOwner, tokenId, \\\"\\\");\\n        _removeTokenFromOwnerEnumeration(stake.owner, stake.tokenId);\\n        delete war[tokenId];\\n        totalSamuraiDogeStaked -= 1;\\n        numTokensStaked[tokenOwner] -= 1;\\n        emit HONORClaimed(tokenId, owed, true);\\n        return owed;\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address from,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        require(from == address(0x0), \\\"Cannot send tokens to War directly\\\");\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"HONOR.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\nimport \\\"ERC20.sol\\\";\\nimport \\\"Ownable.sol\\\";\\n\\ncontract HONOR is ERC20, Ownable {\\n    // a mapping from an address to whether or not it can mint / burn\\n    mapping(address => bool) public controllers;\\n\\n    // Staking supply\\n    uint256 public constant MAXIMUM_STAKING_SUPPLY = 184120000 ether;\\n\\n    // Community fund supply\\n    uint256 public constant MAXIMUM_COMMUNITY_FUND_SUPPLY = 100000000 ether;\\n\\n    // Public sale supply\\n    uint256 public constant MAXIMUM_PUBLIC_SALES_SUPPLY = 30000000 ether;\\n\\n    // Team reserve supply\\n    uint256 public constant MAXIMUM_TEAM_RESERVE_SUPPLY = 60500000 ether;\\n\\n    // Minted amount\\n    uint256 public totalStakingSupply;\\n    uint256 public totalCommunityFundSupply;\\n    uint256 public totalPublicSalesSupply;\\n    uint256 public totalTeamReserveSupply;\\n\\n    constructor() ERC20(\\\"HONOR\\\", \\\"HON\\\") {}\\n\\n    /**\\n     * mints $HONOR from staking supply to a recipient\\n     * @param to the recipient of the $HONOR\\n     * @param amount the amount of $HONOR to mint\\n     */\\n    function stakingMint(address to, uint256 amount) external {\\n        require(controllers[msg.sender], \\\"Only controllers can mint\\\");\\n        require(\\n            totalStakingSupply + amount <= MAXIMUM_STAKING_SUPPLY,\\n            \\\"Maximum staking supply exceeded\\\"\\n        );\\n        _mint(to, amount);\\n        totalStakingSupply += amount;\\n    }\\n\\n    /**\\n     * mints $HONOR from community fund supply to a recipient\\n     * @param to the recipient of the $HONOR\\n     * @param amount the amount of $HONOR to mint\\n     */\\n    function communityFundMint(address to, uint256 amount) external {\\n        require(controllers[msg.sender], \\\"Only controllers can mint\\\");\\n        require(\\n            totalCommunityFundSupply + amount <= MAXIMUM_COMMUNITY_FUND_SUPPLY,\\n            \\\"Maximum community fund supply exceeded\\\"\\n        );\\n        _mint(to, amount);\\n        totalCommunityFundSupply += amount;\\n    }\\n\\n    /**\\n     * mints $HONOR from public sales supply to a recipient\\n     * @param to the recipient of the $HONOR\\n     * @param amount the amount of $HONOR to mint\\n     */\\n    function publicSalesMint(address to, uint256 amount) external {\\n        require(controllers[msg.sender], \\\"Only controllers can mint\\\");\\n        require(\\n            totalPublicSalesSupply + amount <= MAXIMUM_PUBLIC_SALES_SUPPLY,\\n            \\\"Maximum public sales supply exceeded\\\"\\n        );\\n        _mint(to, amount);\\n        totalPublicSalesSupply += amount;\\n    }\\n\\n    /**\\n     * mints $HONOR from team reserve supply to a recipient\\n     * @param to the recipient of the $HONOR\\n     * @param amount the amount of $HONOR to mint\\n     */\\n    function teamReserveMint(address to, uint256 amount) external {\\n        require(controllers[msg.sender], \\\"Only controllers can mint\\\");\\n        require(\\n            totalTeamReserveSupply + amount <= MAXIMUM_TEAM_RESERVE_SUPPLY,\\n            \\\"Maximum team reserve supply exceeded\\\"\\n        );\\n        _mint(to, amount);\\n        totalTeamReserveSupply += amount;\\n    }\\n\\n    /**\\n     * burns $HONOR from a holder\\n     * @param from the holder of the $HONOR\\n     * @param amount the amount of $HONOR to burn\\n     */\\n    function burn(address from, uint256 amount) external {\\n        require(controllers[msg.sender], \\\"Only controllers can burn\\\");\\n        _burn(from, amount);\\n    }\\n\\n    /**\\n     * enables an address to mint / burn\\n     * @param controller the address to enable\\n     */\\n    function addController(address controller) external onlyOwner {\\n        controllers[controller] = true;\\n    }\\n\\n    /**\\n     * disables an address from minting / burning\\n     * @param controller the address to disable\\n     */\\n    function removeController(address controller) external onlyOwner {\\n        controllers[controller] = false;\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IERC20Metadata.sol\\\";\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"War.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_samuraidoge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_honor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensElligibleForBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"name\":\"HONORClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAILY_HONOR_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"addManyToWar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"}],\"name\":\"claimManyFromWar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"getClaimableHonorForMany\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"rescueManyFromWar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setStakingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensElligibleForBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSamuraiDogeStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"war\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint80\",\"name\":\"value\",\"type\":\"uint80\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"War","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008af7abb1c69bf0a8d3b49b252fff2843596504a2000000000000000000000000e79b2e8aa396b3a2bdf905b4c48cb01da07d4e190000000000000000000000000000000000000000000000000000000009660180000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000001043561a8829300000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}