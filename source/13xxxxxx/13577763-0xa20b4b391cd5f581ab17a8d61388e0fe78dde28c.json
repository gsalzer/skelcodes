{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.7 https://hardhat.org\r\n\r\n// File contracts/interfaces/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/ABCTreasury.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/// @author Medici\r\n/// @title Treasury contract for Abacus\r\ncontract ABCTreasury {\r\n    \r\n    /* ======== UINT ======== */\r\n\r\n    uint public nftsPriced;\r\n    uint public profitGenerated;\r\n    uint public tokensClaimed;\r\n\r\n    /* ======== ADDRESS ======== */\r\n\r\n    address public auction;\r\n    address public pricingSessionFactory;\r\n    address public admin;\r\n    address public ABCToken;\r\n    address public multisig;\r\n\r\n    /* ======== CONSTRUCTOR ======== */\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    /* ======== ADMIN FUNCTIONS ======== */\r\n\r\n    /// @notice set ABC token contract address \r\n    /// @param _ABCToken desired ABC token to be stored and referenced in contract\r\n    function setABCTokenAddress(address _ABCToken) onlyAdmin external {\r\n        require(ABCToken == address(0));\r\n        ABCToken = _ABCToken;\r\n    }\r\n\r\n    function setMultisig(address _multisig) onlyAdmin external {\r\n        multisig = _multisig;\r\n    }\r\n\r\n    /// @notice allow admin to withdraw funds to multisig in the case of emergency (ONLY USED IN THE CASE OF EMERGENCY)\r\n    /// @param _amountAbc value of ABC to be withdrawn from the treasury to multisig (ONLY USED IN THE CASE OF EMERGENCY)\r\n    /// @param _amountEth value of ETH to be withdrawn from the treasury to multisig (ONLY USED IN THE CASE OF EMERGENCY)\r\n    function withdraw(uint _amountAbc, uint _amountEth) onlyAdmin external {\r\n        IERC20(ABCToken).transfer(multisig, _amountAbc);\r\n        (bool sent, ) = payable(multisig).call{value: _amountEth}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    /// @notice set newAdmin (or burn admin when the time comes)\r\n    /// @param _newAdmin desired admin address to be stored and referenced in contract\r\n    function setAdmin(address _newAdmin) onlyAdmin external {\r\n        admin = _newAdmin;\r\n    }\r\n\r\n    /// @notice set pricing factory address to allow for updates\r\n    /// @param _pricingFactory desired pricing session principle address to be stored and referenced in contract\r\n    function setPricingFactory(address _pricingFactory) onlyAdmin external {\r\n        pricingSessionFactory = _pricingFactory;\r\n    }\r\n\r\n    /// @notice set auction contract for bounty auction period\r\n    /// @param _auction desired auction address to be stored and referenced in contract\r\n    function setAuction(address _auction) onlyAdmin external {\r\n        auction = _auction;\r\n    }\r\n\r\n    /* ======== CHILD FUNCTIONS ======== */\r\n    \r\n    /// @notice send ABC to users that earn \r\n    /// @param recipient the user that will be receiving ABC \r\n    /// @param _amount the amount of ABC to be transferred to the recipient\r\n    function sendABCToken(address recipient, uint _amount) external {\r\n        require(msg.sender == pricingSessionFactory || msg.sender == admin || msg.sender == auction);\r\n        IERC20(ABCToken).transfer(recipient, _amount);\r\n        tokensClaimed += _amount;\r\n    }\r\n\r\n    /// @notice Allows Factory contract to update the profit generated value\r\n    /// @param _amount the amount of profit to update profitGenerated count\r\n    function updateProfitGenerated(uint _amount) isFactory external { \r\n        profitGenerated += _amount;\r\n    }\r\n    \r\n    /// @notice Allows Factory contract to update the amount of NFTs that have been priced\r\n    function updateNftPriced() isFactory external {\r\n        nftsPriced++;\r\n    }\r\n\r\n    /* ======== FALLBACKS ======== */\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n    /* ======== MODIFIERS ======== */\r\n\r\n    ///@notice check that msg.sender is admin\r\n    modifier onlyAdmin() {\r\n        require(admin == msg.sender, \"not admin\");\r\n        _;\r\n    }\r\n    \r\n    ///@notice check that msg.sender is factory\r\n    modifier isFactory() {\r\n        require(msg.sender == pricingSessionFactory, \"not factory\");\r\n        _;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ABCToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftsPriced\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricingSessionFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendABCToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ABCToken\",\"type\":\"address\"}],\"name\":\"setABCTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auction\",\"type\":\"address\"}],\"name\":\"setAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multisig\",\"type\":\"address\"}],\"name\":\"setMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pricingFactory\",\"type\":\"address\"}],\"name\":\"setPricingFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateNftPriced\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateProfitGenerated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountAbc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountEth\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ABCTreasury","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://af41e265e301cb3238bb055411dc8861cb1de335d489fd85287c2aaf9e1fa478"}]}