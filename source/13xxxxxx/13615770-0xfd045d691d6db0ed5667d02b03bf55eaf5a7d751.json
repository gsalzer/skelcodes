{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: Unlicensed\r\n\r\n\r\n// https://t.me/saitamamooneth\r\n// https://saitamamoon.io/\r\n// https://discord.gg/KzEYs4RT\r\n\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&***(@@@@@@@@@@@@@@@(/**&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @@@@@@(**@@@@@@@@@@@@@@@@@***********#@@@@@@#*(@@@@@&  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@&*****************@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    ..&   @@@@@@@@@@@@@@@@@@@@@@@@@***************@   &..   #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@%*@         .   @@@@@@@@@@@@@@@@@@@@@@@@**********@   /         @@*@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@/#@@@@           (    &@@@@@@@@@@@@@@@@@@@@@******(    &           **@@@*@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@*@@@@@@@            .       &@@@@@&*.   ,/&@@@@#(       .           (*****@@%*@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@,,@@@@@@@@@&            .                                ..            @********@@*@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@*@@@@@@@@@@@@@            .&                            .  @.            #**********%@*@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@#&@@@@@@@@@@@@@(          ,                                     ,          &##**********@@*@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@*@@@@@@@@@@@@@@@@@         &                                     @         %###**********..@@/@@@@@@@@@@@@\r\n//@@@@@@@@@@@@*@@@@@@@@@@@@@@@@@.                                                           .*************...@*@@@@@@@@@@@\r\n//@@@@@@@@@@@*@@@@@@@@@@@@@@@@@@@@#.                                                    ..&**************,*...@#@@@@@@@@@@\r\n//@@@@@@@@@@*@@@@@@@@@@@@@@@@@@@@@,                                                       /(*******************@@#@@@@@@@@\r\n//@@@@@@@@@*@@@@@@@@@@@@@@@@@@,                                                               %/****************(@(@@@@@@@\r\n//@@@@@@@@*@@@@@@@@@@@@@@@@*           ,        .   .                   .                        %(*****(#######*#@@@@@@@@\r\n//@@@@@@@*@@@@@@@@@@@@@@@@@@@@@        .       .@@#@*                   (@(@&        (        @*******############@/@@@@@@\r\n//@@@@@@&@@@@@@@@@@@@@@@@@@@          ..          @&@@@               @@@&@          .           @***##############@*@@@@@\r\n//@@@@@@*@@@@@@@@@@@@@@@@                (                                         /               (/(#############*@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@                   .                                     ,                   @############/*@*@@@@\r\n//@@@@@*@@@@@@@@@@@@@@@ ..../              .@.                                 .&.              ,.... /*(#######****@*@@@@\r\n//@@@@@*@@@@@@@@@@@@@@@.@@@@               ,                                     .               &###.**************%&@@@@\r\n//@@@@@*@@@@@@@@@@@@@@@@@@@                   &                              .%                   #######************&@@@@\r\n//@@@@@*@@@@@@@@@@@@@@@@@@                      & //                     #..%                      #######**********%&@@@@\r\n//@@@@@*@@@@@@@@@@@@@@@@&                          /      ,@@@@@@@       @                          @######*********%/@@@@\r\n//@@@@@#@@@@@@@@@@@@@@@..*,                        @     #@@@@@@@@@      @                        *,..@####*********@*@@@@\r\n//@@@@@@(@@@@@@@@@@@@@@@@@*                         &       @@@@@      .@                         &########*********@*@@@@\r\n//@@@@@@*@@@@@@@@@@@@@@@@@/                          @,.      /      ./@                          &##########/*****@(@@@@@\r\n//@@@@@@@*@@@@@@@@@@@@@@@@@                          ../.@/...@...(@.%..                          &################@/@@@@@\r\n//@@@@@@@%@@@@@@@@@@@@@@@@@       *                  ..............(....                 ,.       %#****##########@*@@@@@@\r\n//@@@@@@@@*@@@@@@@@@@@@@@@@ .@   #,              & #  &*.............#/ .* *              /(   %. @****##########@*@@@@@@@\r\n//@@@@@@@@@*@@@@@@@@@@@@@@@@@&#    .           #  .         ....             *          .,    @#**@(**##########@*@@@@@@@@\r\n//@@@@@@@@@@*@%@@@@@@@@@@@@@@@.                                                               /#******#########@*@@@@@@@@@\r\n//@@@@@@@@@@@(@*******@@@@@@@ .@              ,                               *              @. *******######&@*@@@@@@@@@@\r\n//@@@@@@@@@@@@@*@******#########                .                                            @##*********###@&#@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@/&#*****######@*            **#  .                            %**             &***********@@*@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@*@/****(####.               .                               .               (*********@@*@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@*@@*****.      .@       ,% .#                           #. @        @.      .#****@@*@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@*@@****@.*.               ....     /(       ##     ..*                /..@***/@@*@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@%@&                       ....%.             .%...                       .@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@          **                  #....*. ....  ......@                  %.         #@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@    *.         .(            .&(.................(&             &          /     @@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@   .@                 *      .#.................../       %         ,       @.  ,@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@.     .        /       .........................       %        &     *@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@&@...@ @   .         .@@@@@@@@@@@@@@@@@@@@@@@@@.             @ @...@&@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,*@@@.  ...@@@@@@@@((*********/(@@@@@@@@..   .@@@*,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//              .oOOOo.                                               Oo      oO\r\n//              o     o         o                                     O O    o o\r\n//              O.                   O                                o  o  O  O\r\n//               `OOoo.             oOo                               O   Oo   O\r\n//                    `O .oOoO' O    o   .oOoO' `oOOoOO. .oOoO'       O        o .oOo. .oOo. 'OoOo.\r\n//                     o O   o  o    O   O   o   O  o  o O   o        o        O O   o O   o  o   O\r\n//              O.    .O o   O  O    o   o   O   o  O  O o   O        o        O o   O o   O  O   o\r\n//               `oooO'  `OoO'o o'   `oO `OoO'o  O  o  o `OoO'o       O        o `OoO' `OoO'  o   O\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = now + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(\r\n            _previousOwner == msg.sender,\r\n            \"You don't have permission to unlock\"\r\n        );\r\n        require(now > _lockTime, \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract SaitamaMoon is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => bool) bots;\r\n    mapping(address => uint256) private rOwned;\r\n    mapping(address => uint256) private tOwned;\r\n    mapping(address => mapping(address => uint256)) private allowances;\r\n\r\n    mapping(address => bool) private isExcludedFromFees;\r\n\r\n    mapping(address => bool) private isExcludedFromReflections;\r\n    address[] private _excluded;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private tTotal = 1000000000 * 10**6 * 10**9;\r\n    uint256 private rTotal = (MAX - (MAX % tTotal));\r\n    uint256 private tFeeTotal;\r\n\r\n    uint256 public numHolders = 0;\r\n    uint256 public burnedTotal = 0;\r\n\r\n    uint256 public reflectionTax = 0; // set to 2 after launch\r\n    uint256 private previousReflectionTax = reflectionTax;\r\n\r\n    uint256 public marketingTax = 0;  //set to 6 after launch\r\n    uint256 private previousMarketingTax = marketingTax;\r\n\r\n    uint256 public burnTax = 0;  //set to 2 after launch\r\n    uint256 private previousBurnTax = burnTax;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    address payable private marketingFeeBeneficiary;\r\n\r\n    bool inSwap;\r\n    bool public swapEnabled = false;\r\n\r\n    uint256 public maxTransactionAmount = 5000000 * 10**6 * 10**9;\r\n    uint256 private numTokensToSellForMarketing = 500000 * 10**6 * 10**9;\r\n\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event BurnedTokens(uint256 tokensBurned);\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() public {\r\n        rOwned[_msgSender()] = rTotal;\r\n\r\n        //exclude owner and this contract from fee\r\n        marketingFeeBeneficiary = payable(owner());\r\n        isExcludedFromFees[owner()] = true;\r\n        isExcludedFromFees[address(this)] = true;\r\n        excludeFromReward(0x000000000000000000000000000000000000dEaD);\r\n\r\n        emit Transfer(address(0), _msgSender(), tTotal);\r\n    }\r\n\r\n    function setRouterAddress(address _router) external onlyOwner {\r\n        uniswapV2Router = IUniswapV2Router02(_router);\r\n    }\r\n\r\n    function setPairAddress(address _pair) external onlyOwner {\r\n        uniswapV2Pair = _pair;\r\n    }\r\n\r\n    function updateMarketingFeeBeneficiary(address _newBeneficiary) external {\r\n        require(msg.sender == marketingFeeBeneficiary, \"Forbidden\");\r\n        marketingFeeBeneficiary = payable(_newBeneficiary);\r\n    }\r\n\r\n    function updateTokensRequiredForEthSwap(uint256 _tokensRequired) external {\r\n        require(msg.sender == marketingFeeBeneficiary, \"Forbidden\");\r\n        numTokensToSellForMarketing = _tokensRequired;\r\n    }\r\n\r\n    function updateBots(address[] memory _addresses, bool _add)\r\n        external\r\n        onlyOwner\r\n    {\r\n        if (_add) {\r\n            for (uint256 i = 0; i < _addresses.length; i++) {\r\n                bots[_addresses[i]] = true;\r\n            }\r\n        } else {\r\n            for (uint256 i = 0; i < _addresses.length; i++) {\r\n                bots[_addresses[i]] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return \"Saitama Moon\";\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return \"SAITAMAMOON\";\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (isExcludedFromReflections[account]) {\r\n            return tOwned[account];\r\n        }\r\n        return tokenFromReflection(rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _amount) external onlyOwner {\r\n        require(_amount <= burnedTotal);\r\n        burnedTotal = burnedTotal.sub(_amount);\r\n        tOwned[0x000000000000000000000000000000000000dEaD] = tOwned[\r\n            0x000000000000000000000000000000000000dEaD\r\n        ].add(_amount);\r\n        emit Transfer(\r\n            address(this),\r\n            0x000000000000000000000000000000000000dEaD,\r\n            _amount\r\n        );\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return isExcludedFromReflections[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return tFeeTotal;\r\n    }\r\n\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(\r\n            !isExcludedFromReflections[sender],\r\n            \"Excluded addresses cannot call this function\"\r\n        );\r\n        (uint256 rAmount, , , , , , ) = _getValues(tAmount);\r\n        rOwned[sender] = rOwned[sender].sub(rAmount);\r\n        rTotal = rTotal.sub(rAmount);\r\n        tFeeTotal = tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount <= tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount, , , , , , ) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (, uint256 rTransferAmount, , , , , ) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        require(\r\n            !isExcludedFromReflections[account],\r\n            \"Account is already excluded\"\r\n        );\r\n        if (rOwned[account] > 0) {\r\n            tOwned[account] = tokenFromReflection(rOwned[account]);\r\n        }\r\n        isExcludedFromReflections[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(\r\n            isExcludedFromReflections[account],\r\n            \"Account is already excluded\"\r\n        );\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                tOwned[account] = 0;\r\n                isExcludedFromReflections[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        isExcludedFromFees[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        isExcludedFromFees[account] = false;\r\n    }\r\n\r\n    function setReflectionFeePercent(uint256 taxFee) external onlyOwner {\r\n        reflectionTax = taxFee;\r\n    }\r\n\r\n    function setMarketingFeePercent(uint256 liquidityFee) external onlyOwner {\r\n        marketingTax = liquidityFee;\r\n    }\r\n\r\n    function setBurnFeePercent(uint256 _burnTax) external onlyOwner {\r\n        burnTax = _burnTax;\r\n    }\r\n\r\n    function setMaxTransactionPercent(uint256 _maxTxPercent)\r\n        external\r\n        onlyOwner\r\n    {\r\n        maxTransactionAmount = tTotal.mul(_maxTxPercent).div(10**2);\r\n    }\r\n\r\n    function setSwapEnabled(bool _enabled) public onlyOwner {\r\n        swapEnabled = _enabled;\r\n        emit SwapEnabledUpdated(_enabled);\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function reflectionFee(uint256 rFee, uint256 tFee) private {\r\n        rTotal = rTotal.sub(rFee);\r\n        tFeeTotal = tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tMarketing,\r\n            uint256 tBurn\r\n        ) = getTaxedValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\r\n            tAmount,\r\n            tFee,\r\n            tMarketing,\r\n            tBurn,\r\n            _getRate()\r\n        );\r\n        return (\r\n            rAmount,\r\n            rTransferAmount,\r\n            rFee,\r\n            tTransferAmount,\r\n            tFee,\r\n            tMarketing,\r\n            tBurn\r\n        );\r\n    }\r\n\r\n    function getTaxedValues(uint256 _untaxedAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rFee = calculateReflectionFee(_untaxedAmount);\r\n        uint256 marketingFee = calculateMarketingFee(_untaxedAmount);\r\n        uint256 burnFee = calculateBurnFee(_untaxedAmount);\r\n        uint256 taxedAmount = _untaxedAmount\r\n            .sub(rFee)\r\n            .sub(marketingTax)\r\n            .sub(burnFee);\r\n        return (taxedAmount, rFee, marketingFee, burnFee);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tMarketing,\r\n        uint256 tBurn,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rReflection = tFee.mul(currentRate);\r\n        uint256 rMarketing = tMarketing.mul(currentRate);\r\n        uint256 rBurn = tBurn.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rReflection).sub(rMarketing).sub(\r\n            rBurn\r\n        );\r\n        return (rAmount, rTransferAmount, rReflection);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = rTotal;\r\n        uint256 tSupply = tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (\r\n                rOwned[_excluded[i]] > rSupply || tOwned[_excluded[i]] > tSupply\r\n            ) return (rTotal, tTotal);\r\n            rSupply = rSupply.sub(rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < rTotal.div(tTotal)) return (rTotal, tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function takeMarketingFee(uint256 tLiquidity) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        rOwned[address(this)] = rOwned[address(this)].add(rLiquidity);\r\n        if (isExcludedFromReflections[address(this)])\r\n            tOwned[address(this)] = tOwned[address(this)].add(tLiquidity);\r\n    }\r\n\r\n    function takeBurnFee(uint256 _fee) private {\r\n        burnedTotal = burnedTotal.add(_fee);\r\n\r\n        emit BurnedTokens(_fee);\r\n    }\r\n\r\n    function calculateReflectionFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _amount.mul(reflectionTax).div(10**2);\r\n    }\r\n\r\n    function calculateMarketingFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _amount.mul(marketingTax).div(10**2);\r\n    }\r\n\r\n    function calculateBurnFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(burnTax).div(10**2);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (reflectionTax == 0 && marketingTax == 0 && burnTax == 0) return;\r\n\r\n        previousReflectionTax = reflectionTax;\r\n        previousMarketingTax = marketingTax;\r\n        previousBurnTax = burnTax;\r\n\r\n        reflectionTax = 0;\r\n        marketingTax = 0;\r\n        burnTax = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        reflectionTax = previousReflectionTax;\r\n        marketingTax = previousMarketingTax;\r\n        burnTax = previousBurnTax;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return isExcludedFromFees[account];\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        if (balanceOf(to) == 0 && amount > 0) {\r\n            numHolders += 1;\r\n        }\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(!(bots[from] || bots[to]), \"Saitama: Blacklisted from trades\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if (from != owner() && to != owner())\r\n            require(\r\n                amount <= maxTransactionAmount,\r\n                \"Transfer amount exceeds the maxTxAmount.\"\r\n            );\r\n\r\n        if (\r\n            (balanceOf(address(this)) >= numTokensToSellForMarketing) &&\r\n            !inSwap &&\r\n            from != uniswapV2Pair &&\r\n            swapEnabled\r\n        ) {\r\n            swapTokensForEth(numTokensToSellForMarketing);\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(\r\n            from,\r\n            to,\r\n            amount,\r\n            !(isExcludedFromFees[from] || isExcludedFromFees[to])\r\n        );\r\n        if (balanceOf(from) == 0 && amount > 0) {\r\n            numHolders -= 1;\r\n        }\r\n    }\r\n\r\n    function manualSwapTokensForEth(uint256 _tokenAmount) external lockTheSwap {\r\n        require(msg.sender == marketingFeeBeneficiary, \"Forbidden\");\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), _tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            marketingFeeBeneficiary,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            marketingFeeBeneficiary,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function recoverETH() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) {\r\n            removeAllFee();\r\n        }\r\n\r\n        if (\r\n            isExcludedFromReflections[sender] &&\r\n            !isExcludedFromReflections[recipient]\r\n        ) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (\r\n            !isExcludedFromReflections[sender] &&\r\n            isExcludedFromReflections[recipient]\r\n        ) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (\r\n            !isExcludedFromReflections[sender] &&\r\n            !isExcludedFromReflections[recipient]\r\n        ) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (\r\n            isExcludedFromReflections[sender] &&\r\n            isExcludedFromReflections[recipient]\r\n        ) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n        if (!takeFee) {\r\n            restoreAllFee();\r\n        }\r\n    }\r\n\r\n    function _transferBothExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tBurn\r\n        ) = _getValues(tAmount);\r\n        tOwned[sender] = tOwned[sender].sub(tAmount);\r\n        rOwned[sender] = rOwned[sender].sub(rAmount);\r\n        tOwned[recipient] = tOwned[recipient].add(tTransferAmount);\r\n        rOwned[recipient] = rOwned[recipient].add(rTransferAmount);\r\n        takeMarketingFee(tLiquidity);\r\n        takeBurnFee(tBurn);\r\n        reflectionFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tBurn\r\n        ) = _getValues(tAmount);\r\n        rOwned[sender] = rOwned[sender].sub(rAmount);\r\n        rOwned[recipient] = rOwned[recipient].add(rTransferAmount);\r\n        takeMarketingFee(tLiquidity);\r\n        takeBurnFee(tBurn);\r\n        reflectionFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tBurn\r\n        ) = _getValues(tAmount);\r\n        rOwned[sender] = rOwned[sender].sub(rAmount);\r\n        tOwned[recipient] = tOwned[recipient].add(tTransferAmount);\r\n        rOwned[recipient] = rOwned[recipient].add(rTransferAmount);\r\n        takeMarketingFee(tLiquidity);\r\n        takeBurnFee(tBurn);\r\n        reflectionFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 burnFee\r\n        ) = _getValues(tAmount);\r\n        tOwned[sender] = tOwned[sender].sub(tAmount);\r\n        rOwned[sender] = rOwned[sender].sub(rAmount);\r\n        rOwned[recipient] = rOwned[recipient].add(rTransferAmount);\r\n        takeBurnFee(burnFee);\r\n        takeMarketingFee(tLiquidity);\r\n        reflectionFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBurned\",\"type\":\"uint256\"}],\"name\":\"BurnedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"manualSwapTokensForEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnTax\",\"type\":\"uint256\"}],\"name\":\"setBurnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setMarketingFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setReflectionFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"}],\"name\":\"updateBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBeneficiary\",\"type\":\"address\"}],\"name\":\"updateMarketingFeeBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensRequired\",\"type\":\"uint256\"}],\"name\":\"updateTokensRequiredForEthSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SaitamaMoon","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bd1501f509d8f6705cb3911c12db1ae29b10b16ba3820468cea0c211fe3c0ffb"}]}