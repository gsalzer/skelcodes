{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ncontract registration {\r\n    address private owner;\r\n    uint256 private registrationCost;\r\n    mapping(address => bool) private registeredUsers;\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"Caller is not the owner.\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        registrationCost = 0.05 ether;\r\n    }\r\n\r\n    function changeOwner(address newOwner) external isOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function changeRegistrationCost(uint256 newRegistrationCost) external isOwner {\r\n        registrationCost = newRegistrationCost;\r\n    }\r\n\r\n    receive() external payable {\r\n        register();\r\n    }\r\n\r\n    function register() public payable {\r\n        require(!registeredUsers[msg.sender], \"Address already registered.\");\r\n        require(msg.value >= registrationCost, \"Insufficient registration fee.\");\r\n\r\n        registeredUsers[msg.sender] = true;\r\n    }\r\n\r\n    function withdraw(address payable receiver, uint256 amount) external isOwner {\r\n        receiver.transfer(amount);\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function getRegistrationCost() external view returns (uint256) {\r\n        return registrationCost;\r\n    }\r\n\r\n    function isRegistered() external view returns (bool) {\r\n        return registeredUsers[msg.sender];\r\n    }\r\n\r\n    function isAddressRegistered(address account) external view returns (bool) {\r\n        return registeredUsers[account];\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRegistrationCost\",\"type\":\"uint256\"}],\"name\":\"changeRegistrationCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistrationCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAddressRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"registration","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d81fb1dd712af4d4973da5f85a5ac4a65d9cb2fb2d1a376366911fd4e332620d"}]}