{"status":"1","message":"OK","result":[{"SourceCode":"{\"Fix64V1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n/* Copyright (c) 2021 Kohi Art Community, Inc. All rights reserved. */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"MathV1.sol\\\";\\r\\n\\r\\n/*\\r\\n    Provides mathematical operations and representation in Q31.Q32 format.\\r\\n\\r\\n    exp: Adapted from Petteri Aimonen\\u0027s libfixmath\\r\\n    \\r\\n    See: https://github.com/PetteriAimonen/libfixmath\\r\\n         https://github.com/PetteriAimonen/libfixmath/blob/master/LICENSE\\r\\n\\r\\n    other functions: Adapted from André Slupik\\u0027s FixedMath.NET\\r\\n                     https://github.com/asik/FixedMath.Net/blob/master/LICENSE.txt\\r\\n         \\r\\n    THIRD PARTY NOTICES:\\r\\n    ====================\\r\\n\\r\\n    libfixmath is Copyright (c) 2011-2021 Flatmush \\u003cFlatmush@gmail.com\\u003e,\\r\\n    Petteri Aimonen \\u003cPetteri.Aimonen@gmail.com\\u003e, \\u0026 libfixmath AUTHORS\\r\\n\\r\\n    Permission is hereby granted, free of charge, to any person obtaining a copy\\r\\n    of this software and associated documentation files (the \\\"Software\\\"), to deal\\r\\n    in the Software without restriction, including without limitation the rights\\r\\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\r\\n    copies of the Software, and to permit persons to whom the Software is\\r\\n    furnished to do so, subject to the following conditions:\\r\\n\\r\\n    The above copyright notice and this permission notice shall be included in all\\r\\n    copies or substantial portions of the Software.\\r\\n\\r\\n    THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n    SOFTWARE.\\r\\n\\r\\n    Copyright 2012 André Slupik\\r\\n\\r\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n    you may not use this file except in compliance with the License.\\r\\n    You may obtain a copy of the License at\\r\\n\\r\\n        http://www.apache.org/licenses/LICENSE-2.0\\r\\n\\r\\n    Unless required by applicable law or agreed to in writing, software\\r\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n    See the License for the specific language governing permissions and\\r\\n    limitations under the License.\\r\\n\\r\\n    This project uses code from the log2fix library, which is under the following license:           \\r\\n    The MIT License (MIT)\\r\\n\\r\\n    Copyright (c) 2015 Dan Moulding\\r\\n    \\r\\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), \\r\\n    to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, \\r\\n    and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\r\\n    \\r\\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\r\\n    THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \\r\\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\r\\n    IN THE SOFTWARE.\\r\\n*/\\r\\n\\r\\nlibrary Fix64V1 {\\r\\n    int64 public constant FRACTIONAL_PLACES = 32;\\r\\n    int64 public constant ONE = 4294967296; // 1 \\u003c\\u003c FRACTIONAL_PLACES\\r\\n    int64 public constant TWO = ONE * 2;\\r\\n    int64 public constant PI = 0x3243F6A88;\\r\\n    int64 public constant TWO_PI = 0x6487ED511;\\r\\n    int64 public constant MAX_VALUE = type(int64).max;\\r\\n    int64 public constant MIN_VALUE = type(int64).min;\\r\\n    int64 public constant PI_OVER_2 = 0x1921FB544;\\r\\n\\r\\n    function countLeadingZeros(uint64 x) internal pure returns (int64) {        \\r\\n        int64 result = 0;\\r\\n        while ((x \\u0026 0xF000000000000000) == 0) {\\r\\n            result += 4;\\r\\n            x \\u003c\\u003c= 4;\\r\\n        }\\r\\n        while ((x \\u0026 0x8000000000000000) == 0) {\\r\\n            result += 1;\\r\\n            x \\u003c\\u003c= 1;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function div(int64 x, int64 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (int64)\\r\\n    {\\r\\n        if (y == 0) {\\r\\n            revert(\\\"attempted to divide by zero\\\");\\r\\n        }\\r\\n\\r\\n        int64 xl = x;\\r\\n        int64 yl = y;        \\r\\n\\r\\n        uint64 remainder = uint64(xl \\u003e= 0 ? xl : -xl);\\r\\n        uint64 divider = uint64((yl \\u003e= 0 ? yl : -yl));\\r\\n        uint64 quotient = 0;\\r\\n        int64 bitPos = 64 / 2 + 1;\\r\\n\\r\\n        while ((divider \\u0026 0xF) == 0 \\u0026\\u0026 bitPos \\u003e= 4) {\\r\\n            divider \\u003e\\u003e= 4;\\r\\n            bitPos -= 4;\\r\\n        }\\r\\n\\r\\n        while (remainder != 0 \\u0026\\u0026 bitPos \\u003e= 0) {\\r\\n            int64 shift = countLeadingZeros(remainder);\\r\\n            if (shift \\u003e bitPos) {\\r\\n                shift = bitPos;\\r\\n            }\\r\\n            remainder \\u003c\\u003c= uint64(shift);\\r\\n            bitPos -= shift;\\r\\n\\r\\n            uint64 d = remainder / divider;\\r\\n            remainder = remainder % divider;\\r\\n            quotient += d \\u003c\\u003c uint64(bitPos);\\r\\n\\r\\n            if ((d \\u0026 ~(uint64(0xFFFFFFFFFFFFFFFF) \\u003e\\u003e uint64(bitPos)) != 0)) {\\r\\n                return\\r\\n                    ((xl ^ yl) \\u0026 MIN_VALUE) == 0\\r\\n                        ? MAX_VALUE\\r\\n                        : MIN_VALUE;\\r\\n            }\\r\\n\\r\\n            remainder \\u003c\\u003c= 1;\\r\\n            --bitPos;\\r\\n        }\\r\\n\\r\\n        ++quotient;\\r\\n        int64 result = int64(quotient \\u003e\\u003e 1);\\r\\n        if (((xl ^ yl) \\u0026 MIN_VALUE) != 0) {\\r\\n            result = -result;\\r\\n        }\\r\\n\\r\\n        return int64(result);\\r\\n    }\\r\\n\\r\\n    function mul(int64 x, int64 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (int64)\\r\\n    {\\r\\n        int64 xl = x;\\r\\n        int64 yl = y;\\r\\n\\r\\n        uint64 xlo = (uint64)((xl \\u0026 (int64)(0x00000000FFFFFFFF)));\\r\\n        int64 xhi = xl \\u003e\\u003e 32; // FRACTIONAL_PLACES\\r\\n        uint64 ylo = (uint64)(yl \\u0026 (int64)(0x00000000FFFFFFFF));\\r\\n        int64 yhi = yl \\u003e\\u003e 32; // FRACTIONAL_PLACES\\r\\n\\r\\n        uint64 lolo = xlo * ylo;\\r\\n        int64 lohi = int64(xlo) * yhi;\\r\\n        int64 hilo = xhi * int64(ylo);\\r\\n        int64 hihi = xhi * yhi;\\r\\n\\r\\n        uint64 loResult = lolo \\u003e\\u003e 32; // FRACTIONAL_PLACES\\r\\n        int64 midResult1 = lohi;\\r\\n        int64 midResult2 = hilo;\\r\\n        int64 hiResult = hihi \\u003c\\u003c 32; // FRACTIONAL_PLACES\\r\\n\\r\\n        int64 sum = int64(loResult) + midResult1 + midResult2 + hiResult;\\r\\n\\r\\n        return int64(sum);\\r\\n    }\\r\\n\\r\\n    function mul_256(int x, int y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (int)\\r\\n    {\\r\\n        int xl = x;\\r\\n        int yl = y;\\r\\n\\r\\n        uint xlo = uint((xl \\u0026 int(0x00000000FFFFFFFF)));\\r\\n        int xhi = xl \\u003e\\u003e 32; // FRACTIONAL_PLACES\\r\\n        uint ylo = uint(yl \\u0026 int(0x00000000FFFFFFFF));\\r\\n        int yhi = yl \\u003e\\u003e 32; // FRACTIONAL_PLACES\\r\\n\\r\\n        uint lolo = xlo * ylo;\\r\\n        int lohi = int(xlo) * yhi;\\r\\n        int hilo = xhi * int(ylo);\\r\\n        int hihi = xhi * yhi;\\r\\n\\r\\n        uint loResult = lolo \\u003e\\u003e 32; // FRACTIONAL_PLACES\\r\\n        int midResult1 = lohi;\\r\\n        int midResult2 = hilo;\\r\\n        int hiResult = hihi \\u003c\\u003c 32; // FRACTIONAL_PLACES\\r\\n\\r\\n        int sum = int(loResult) + midResult1 + midResult2 + hiResult;\\r\\n\\r\\n        return sum;\\r\\n    }\\r\\n\\r\\n    function floor(int x) internal pure returns (int64) {\\r\\n        return int64(x \\u0026 0xFFFFFFFF00000000);\\r\\n    }\\r\\n\\r\\n    function round(int x) internal pure returns (int) {\\r\\n        int fractionalPart = x \\u0026 0x00000000FFFFFFFF;\\r\\n        int integralPart = floor(x);\\r\\n        if (fractionalPart \\u003c 0x80000000) return integralPart;\\r\\n        if (fractionalPart \\u003e 0x80000000) return integralPart + ONE;\\r\\n        if ((integralPart \\u0026 ONE) == 0) return integralPart;\\r\\n        return integralPart + ONE;\\r\\n    }\\r\\n\\r\\n    function sub(int64 x, int64 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (int64)\\r\\n    {\\r\\n        int64 xl = x;\\r\\n        int64 yl = y;\\r\\n        int64 diff = xl - yl;\\r\\n        if (((xl ^ yl) \\u0026 (xl ^ diff) \\u0026 MIN_VALUE) != 0) diff = xl \\u003c 0 ? MIN_VALUE : MAX_VALUE;\\r\\n        return diff;\\r\\n    }\\r\\n\\r\\n    function add(int64 x, int64 y)\\r\\n        internal\\r\\n        pure\\r\\n        returns (int64)\\r\\n    {\\r\\n        int64 xl = x;\\r\\n        int64 yl = y;\\r\\n        int64 sum = xl + yl;\\r\\n        if ((~(xl ^ yl) \\u0026 (xl ^ sum) \\u0026 MIN_VALUE) != 0) sum = xl \\u003e 0 ? MAX_VALUE : MIN_VALUE;\\r\\n        return sum;\\r\\n    }\\r\\n\\r\\n    function sign(int64 x) internal pure returns (int8) {\\r\\n        return x == int8(0) ? int8(0) : x \\u003e int8(0) ? int8(1) : int8(-1);\\r\\n    }\\r\\n\\r\\n    function abs(int64 x) internal pure returns (int64) {\\r\\n        int64 mask = x \\u003e\\u003e 63;\\r\\n        return (x + mask) ^ mask;\\r\\n    }\\r\\n}\\r\\n\"},\"GeometryV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n/* Copyright (c) 2021 Kohi Art Community, Inc. All rights reserved. */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"TypesV1.sol\\\";\\r\\n\\r\\nlibrary GeometryV1 {\\r\\n        \\r\\n    struct Triangle2D {\\r\\n        TypesV1.Point2D v0;\\r\\n        TypesV1.Point2D v1;\\r\\n        TypesV1.Point2D v2;\\r\\n        uint32 strokeColor;\\r\\n        uint32 fillColor;\\r\\n        TypesV1.Chunk2D chunk;\\r\\n    }\\r\\n\\r\\n    struct Line2D {\\r\\n        TypesV1.Point2D v0;\\r\\n        TypesV1.Point2D v1;\\r\\n        uint32 color;\\r\\n        TypesV1.Chunk2D chunk;\\r\\n    }\\r\\n\\r\\n    struct Polygon2D {\\r\\n        TypesV1.Point2D[40960] vertices;\\r\\n        uint32 vertexCount;\\r\\n        uint32 strokeColor;\\r\\n        uint32 fillColor;\\r\\n        TypesV1.Chunk2D chunk;\\r\\n    }\\r\\n\\r\\n    function edge(\\r\\n        TypesV1.Point2D memory a,\\r\\n        TypesV1.Point2D memory b,\\r\\n        TypesV1.Point2D memory c\\r\\n    ) external pure returns (int256) {\\r\\n        return ((b.y - a.y) * (c.x - a.x)) - ((b.x - a.x) * (c.y - a.y));\\r\\n    }\\r\\n\\r\\n    function getBoundingBox(TypesV1.Point2D[] memory vertices)\\r\\n        external\\r\\n        pure\\r\\n        returns (TypesV1.Point2D memory tl, TypesV1.Point2D memory br)\\r\\n    {\\r\\n        int256 xMax = vertices[0].x;\\r\\n        int256 xMin = vertices[0].x;\\r\\n        int256 yMax = vertices[0].y;\\r\\n        int256 yMin = vertices[0].y;\\r\\n\\r\\n        for (uint256 i; i \\u003c vertices.length; i++) {\\r\\n            TypesV1.Point2D memory p = vertices[i];\\r\\n\\r\\n            if (p.x \\u003e xMax) xMax = p.x;\\r\\n            if (p.x \\u003c xMin) xMin = p.x;\\r\\n            if (p.y \\u003e yMax) yMax = p.y;\\r\\n            if (p.y \\u003c yMin) yMin = p.y;\\r\\n        }\\r\\n\\r\\n        return (TypesV1.Point2D(xMin, yMin), TypesV1.Point2D(xMax, yMax));\\r\\n    }\\r\\n}\"},\"GraphicsV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n/* Copyright (c) 2021 Kohi Art Community, Inc. All rights reserved. */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary GraphicsV1 {\\r\\n    \\r\\n    function setPixel(\\r\\n        uint32[16384 /* 128 * 128 */] memory result,\\r\\n        uint256 width,\\r\\n        int256 x,\\r\\n        int256 y,\\r\\n        uint32 color\\r\\n    ) internal pure {\\r\\n        uint256 p = uint256(int256(width) * y + x);\\r\\n        result[p] = blend(result[p], color);\\r\\n    }\\r\\n\\r\\n    function blend(uint32 bg, uint32 fg) internal pure returns (uint32) {\\r\\n        uint32 r1 = bg \\u003e\\u003e 16;\\r\\n        uint32 g1 = bg \\u003e\\u003e 8;\\r\\n        uint32 b1 = bg;\\r\\n        \\r\\n        uint32 a2 = fg \\u003e\\u003e 24;\\r\\n        uint32 r2 = fg \\u003e\\u003e 16;\\r\\n        uint32 g2 = fg \\u003e\\u003e 8;\\r\\n        uint32 b2 = fg;\\r\\n        \\r\\n        uint32 alpha = (a2 \\u0026 0xFF) + 1;\\r\\n        uint32 inverseAlpha = 257 - alpha;\\r\\n\\r\\n        uint32 r = (alpha * (r2 \\u0026 0xFF) + inverseAlpha * (r1 \\u0026 0xFF)) \\u003e\\u003e 8;\\r\\n        uint32 g = (alpha * (g2 \\u0026 0xFF) + inverseAlpha * (g1 \\u0026 0xFF)) \\u003e\\u003e 8;\\r\\n        uint32 b = (alpha * (b2 \\u0026 0xFF) + inverseAlpha * (b1 \\u0026 0xFF)) \\u003e\\u003e 8;\\r\\n\\r\\n        uint32 rgb = 0;\\r\\n        rgb |= uint32(0xFF) \\u003c\\u003c 24;\\r\\n        rgb |= r \\u003c\\u003c 16;\\r\\n        rgb |= g \\u003c\\u003c 8;\\r\\n        rgb |= b;\\r\\n\\r\\n        return rgb;\\r\\n    }\\r\\n\\r\\n    function setOpacity(uint32 color, uint32 opacity) internal pure returns (uint32) {\\r\\n\\r\\n        require(opacity \\u003e 0 \\u0026\\u0026 opacity \\u003c= 255, \\\"opacity must be between 0 and 255\\\");\\r\\n        \\r\\n        uint32 r = color \\u003e\\u003e 16 \\u0026 0xFF;\\r\\n        uint32 g = color \\u003e\\u003e 8 \\u0026 0xFF;\\r\\n        uint32 b = color \\u0026 0xFF;\\r\\n\\r\\n        uint32 rgb = 0;\\r\\n        rgb |= opacity \\u003c\\u003c 24;\\r\\n        rgb |= r \\u003c\\u003c 16;\\r\\n        rgb |= g \\u003c\\u003c 8;\\r\\n        rgb |= b;\\r\\n\\r\\n        return uint32(rgb);     \\r\\n    }\\r\\n}\"},\"MathV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n/* Copyright (c) 2021 Kohi Art Community, Inc. All rights reserved. */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary MathV1 {\\r\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return a \\u003e= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return a \\u003c b ? a : b;\\r\\n    }\\r\\n\\r\\n    function max3(\\r\\n        int256 a,\\r\\n        int256 b,\\r\\n        int256 c\\r\\n    ) internal pure returns (int256) {\\r\\n        int256 d = b \\u003e= c ? b : c;\\r\\n        return a \\u003e= d ? a : d;\\r\\n    }\\r\\n\\r\\n    function min3(\\r\\n        int256 a,\\r\\n        int256 b,\\r\\n        int256 c\\r\\n    ) internal pure returns (int256) {\\r\\n        int256 d = b \\u003c c ? b : c;\\r\\n        return a \\u003c d ? a : d;\\r\\n    }\\r\\n\\r\\n    function abs(int256 x) internal pure returns (int256) {\\r\\n        return x \\u003e= 0 ? x : -x;\\r\\n    }\\r\\n\\r\\n    function sign(int256 x) internal pure returns (int8) {\\r\\n        return x == 0 ? int8(0) : x \\u003e 0 ? int8(1) : int8(-1);\\r\\n    }\\r\\n}\"},\"ProcessingV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n/* Copyright (c) 2021 Kohi Art Community, Inc. All rights reserved. */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"TypesV1.sol\\\";\\r\\nimport \\\"GraphicsV1.sol\\\";\\r\\nimport \\\"GeometryV1.sol\\\";\\r\\nimport \\\"RandomV1.sol\\\";\\r\\nimport \\\"MathV1.sol\\\";\\r\\n\\r\\nlibrary ProcessingV1 {\\r\\n    uint32 internal constant BG_COLOR = 0xFFD3D3D3;\\r\\n    uint32 internal constant FILL_COLOR = 0xFFFFFFFF;\\r\\n    uint32 internal constant STROKE_COLOR = 0x00000000;\\r\\n    uint32 internal constant MAX_POLYGON_NODES = 400;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the color used for the background of the drawing surface.\\r\\n     * @notice https://processing.org/reference/background_.html\\r\\n     */\\r\\n    function background(\\r\\n        uint32[16384] /* 128 * 128 */\\r\\n            memory result,\\r\\n        uint32 color,\\r\\n        TypesV1.Chunk2D memory chunk\\r\\n    ) internal pure {\\r\\n        for (uint256 x = 0; x \\u003c chunk.chunkWidth; x++) {\\r\\n            for (uint256 y = 0; y \\u003c chunk.chunkHeight; y++) {\\r\\n                GraphicsV1.setPixel(\\r\\n                    result,\\r\\n                    chunk.chunkWidth,\\r\\n                    int256(x),\\r\\n                    int256(y),\\r\\n                    color\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice A triangle is a plane created by connecting three points. The first two arguments specify the first point, the middle two arguments specify the second point, and the last two arguments specify the third point.\\r\\n     * @notice https://processing.org/reference/triangle_.html\\r\\n     * @dev Renders a filled triangle, using the Barycentric rasterization algorithm.\\r\\n     */\\r\\n    function triangle(\\r\\n        uint32[16384] /* 128 * 128 */\\r\\n            memory result,\\r\\n        GeometryV1.Triangle2D memory f\\r\\n    ) internal pure {\\r\\n        TypesV1.Point2D memory p;\\r\\n\\r\\n        uint256 minX = f.chunk.startX;\\r\\n        uint256 maxX = (f.chunk.startX + f.chunk.chunkWidth) - 1;\\r\\n        uint256 minY = f.chunk.startY;\\r\\n        uint256 maxY = (f.chunk.startY + f.chunk.chunkHeight) - 1;\\r\\n\\r\\n        while (GeometryV1.edge(f.v0, f.v1, f.v2) \\u003c 0) {\\r\\n            TypesV1.Point2D memory temp = f.v1;\\r\\n            f.v1 = f.v2;\\r\\n            f.v2 = temp;\\r\\n        }\\r\\n\\r\\n        for (p.x = int256(minX); p.x \\u003c= int256(maxX); p.x++) {\\r\\n            for (p.y = int256(minY); p.y \\u003c= int256(maxY); p.y++) {\\r\\n                int256 w0 = GeometryV1.edge(f.v1, f.v2, p);\\r\\n                int256 w1 = GeometryV1.edge(f.v2, f.v0, p);\\r\\n                int256 w2 = GeometryV1.edge(f.v0, f.v1, p);\\r\\n\\r\\n                if (w0 \\u003e= 0 \\u0026\\u0026 w1 \\u003e= 0 \\u0026\\u0026 w2 \\u003e= 0) {\\r\\n                    GraphicsV1.setPixel(\\r\\n                        result,\\r\\n                        f.chunk.chunkWidth,\\r\\n                        int256(p.x - int32(f.chunk.startX)),\\r\\n                        int256(p.y - int32(f.chunk.startY)),\\r\\n                        f.fillColor\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (f.strokeColor == f.fillColor) return;\\r\\n\\r\\n        {\\r\\n            line(result, GeometryV1.Line2D(f.v0, f.v1, f.strokeColor, f.chunk));\\r\\n            line(result, GeometryV1.Line2D(f.v1, f.v2, f.strokeColor, f.chunk));\\r\\n            line(result, GeometryV1.Line2D(f.v2, f.v0, f.strokeColor, f.chunk));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Draws a line (a direct path between two points) to the screen.\\r\\n     * @notice https://processing.org/reference/line_.html\\r\\n     * @dev Renders a line between two points, using Bresenham\\u0027s rasterization algorithm.\\r\\n     */\\r\\n    function line(uint32[16384]memory result, GeometryV1.Line2D memory f\\r\\n    ) internal pure {\\r\\n        int256 x0 = f.v0.x;\\r\\n        int256 x1 = f.v1.x;\\r\\n        int256 y0 = f.v0.y;\\r\\n        int256 y1 = f.v1.y;\\r\\n\\r\\n        int256 dx = MathV1.abs(x1 - x0);        \\r\\n        int256 dy = MathV1.abs(y1 - y0);\\r\\n\\r\\n        int256 err = (dx \\u003e dy ? dx : -dy) / 2;\\r\\n        int256 e2;\\r\\n\\r\\n        for (;;) {\\r\\n            if (\\r\\n                x0 \\u003c= int32(f.chunk.startX) + int16(f.chunk.chunkWidth) - 1 \\u0026\\u0026\\r\\n                x0 \\u003e= int32(f.chunk.startX) \\u0026\\u0026\\r\\n                y0 \\u003c= int32(f.chunk.startY) + int16(f.chunk.chunkHeight) - 1 \\u0026\\u0026\\r\\n                y0 \\u003e= int32(f.chunk.startY)\\r\\n            ) {\\r\\n                GraphicsV1.setPixel(\\r\\n                    result,\\r\\n                    f.chunk.chunkWidth,\\r\\n                    x0 - int32(f.chunk.startX),\\r\\n                    y0 - int32(f.chunk.startY),\\r\\n                    f.color\\r\\n                );\\r\\n            }\\r\\n\\r\\n            if (x0 == x1 \\u0026\\u0026 y0 == y1) break;\\r\\n            e2 = err;\\r\\n            if (e2 \\u003e -dx) {\\r\\n                err -= dy;\\r\\n                x0 += x0 \\u003c x1 ? int8(1) : -1;\\r\\n            }\\r\\n            if (e2 \\u003c dy) {\\r\\n                err += dx;\\r\\n                y0 += y0 \\u003c y1 ? int8(1) : -1;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Draw a polygon shape to the screen.\\r\\n     * @notice https://processing.org/reference/beginShape_.html\\r\\n     * @notice https://processing.org/reference/vertex_.html\\r\\n     * @notice https://processing.org/reference/endShape_.html\\r\\n     * @dev Renders a filled polygon, using Finley\\u0027s algorithm.\\r\\n     */\\r\\n    function polygon(uint32[16384] memory result, GeometryV1.Polygon2D memory f\\r\\n    ) internal pure {\\r\\n        uint32 polyCorners = f.vertexCount;\\r\\n\\r\\n        int32[MAX_POLYGON_NODES] memory nodeX;\\r\\n\\r\\n        for (uint32 pixelY = f.chunk.startY; pixelY \\u003c (f.chunk.startY + f.chunk.chunkHeight); pixelY++) {\\r\\n            uint32 i;\\r\\n\\r\\n            uint256 nodes = 0;\\r\\n            uint32 j = polyCorners - 1;\\r\\n            for (i = 0; i \\u003c polyCorners; i++) {\\r\\n                \\r\\n                TypesV1.Point2D memory a = TypesV1.Point2D(\\r\\n                    f.vertices[i].x,\\r\\n                    f.vertices[i].y\\r\\n                );\\r\\n                TypesV1.Point2D memory b = TypesV1.Point2D(\\r\\n                    f.vertices[j].x,\\r\\n                    f.vertices[j].y\\r\\n                );\\r\\n\\r\\n                if (\\r\\n                    (a.y \\u003c int32(pixelY) \\u0026\\u0026 b.y \\u003e= int32(pixelY)) ||\\r\\n                    (b.y \\u003c int32(pixelY) \\u0026\\u0026 a.y \\u003e= int32(pixelY))\\r\\n                ) {\\r\\n                    int32 t = int32(a.x) + (int32(pixelY) - int32(a.y)) / (int32(b.y) - int32(a.y)) * (int32(b.x) - int32(a.x));\\r\\n                    nodeX[nodes++] = t;\\r\\n                }\\r\\n\\r\\n                j = i;\\r\\n            }\\r\\n\\r\\n            if(nodes == 0) {\\r\\n                continue; // nothing to draw\\r\\n            }\\r\\n\\r\\n            i = 0;\\r\\n            while (i \\u003c nodes - 1) {\\r\\n                if (nodeX[i] \\u003e nodeX[i + 1]) {\\r\\n                    (nodeX[i], nodeX[i + 1]) = (nodeX[i + 1], nodeX[i]);\\r\\n                    if (i != 0) i--;\\r\\n                } else {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            for (i = 0; i \\u003c nodes; i += 2) {\\r\\n                \\r\\n                if (nodeX[i] \\u003e= int32(f.chunk.startX) + int16(f.chunk.chunkHeight)) break;\\r\\n                if (nodeX[i + 1] \\u003c= int32(f.chunk.startX)) continue;\\r\\n                if (nodeX[i] \\u003c int32(f.chunk.startX)) nodeX[i] = int32(f.chunk.startX);                \\r\\n                if (nodeX[i + 1] \\u003e int32(f.chunk.startX) + int16(f.chunk.chunkHeight))\\r\\n                    nodeX[i + 1] = int32(int32(f.chunk.startX) + int16(f.chunk.chunkHeight));\\r\\n\\r\\n                for (\\r\\n                    int32 pixelX = nodeX[i];\\r\\n                    pixelX \\u003c nodeX[i + 1];\\r\\n                    pixelX++\\r\\n                ) {\\r\\n                    if (pixelX \\u003e= int32(f.chunk.startX) + int16(f.chunk.chunkHeight)) continue;\\r\\n\\r\\n                    int32 px = int32(pixelX) - int32(f.chunk.startX);\\r\\n                    int32 py = int32(pixelY) - int32(f.chunk.startY);\\r\\n\\r\\n                    if (\\r\\n                        px \\u003e= 0 \\u0026\\u0026\\r\\n                        px \\u003c int16(f.chunk.chunkWidth) \\u0026\\u0026\\r\\n                        py \\u003e= 0 \\u0026\\u0026\\r\\n                        py \\u003c int16(f.chunk.chunkHeight)\\r\\n                    ) {\\r\\n                        GraphicsV1.setPixel(\\r\\n                            result,\\r\\n                            f.chunk.chunkWidth,\\r\\n                            px,\\r\\n                            py,\\r\\n                            f.fillColor\\r\\n                        );\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (f.strokeColor == f.fillColor) return;\\r\\n\\r\\n        {\\r\\n            uint256 j = f.vertices.length - 1;\\r\\n            for (uint256 i = 0; i \\u003c f.vertices.length; i++) {\\r\\n                TypesV1.Point2D memory a = f.vertices[i];\\r\\n                TypesV1.Point2D memory b = f.vertices[j];\\r\\n                line(result, GeometryV1.Line2D(a, b, f.strokeColor, f.chunk));\\r\\n                j = i;\\r\\n            }\\r\\n            line(\\r\\n                result,\\r\\n                GeometryV1.Line2D(\\r\\n                    f.vertices[f.vertices.length - 1],\\r\\n                    f.vertices[0],\\r\\n                    f.strokeColor,\\r\\n                    f.chunk\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Renders a number from a random series of numbers having a mean of 0 and standard deviation of 1.\\r\\n     * @notice https://processing.org/reference/randomGaussian_.html\\r\\n     */\\r\\n    function randomGaussian(RandomV1.PRNG memory prng)\\r\\n        internal\\r\\n        pure\\r\\n        returns (int64) {\\r\\n        return RandomV1.nextGaussian(prng);\\r\\n    }\\r\\n}\"},\"RandomV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n/* Copyright (c) 2021 Kohi Art Community, Inc. All rights reserved. */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"Fix64V1.sol\\\";\\r\\nimport \\\"Trig256.sol\\\";\\r\\nimport \\\"MathV1.sol\\\";\\r\\n\\r\\n/*\\r\\n    A pseudo-random number generator, adapted from and matching the algorithm for .NET maximum compatibility Random implementation.\\r\\n\\r\\n    See: https://github.com/dotnet/runtime/blob/f7633f498a8be34bee739b240a0aa9ae6a660cd9/src/libraries/System.Private.CoreLib/src/System/Random.Net5CompatImpl.cs#L192\\r\\n         https://github.com/dotnet/runtime/blob/main/LICENSE.TXT\\r\\n\\r\\n    THIRD PARTY NOTICES:\\r\\n    ====================\\r\\n\\r\\n    The MIT License (MIT)\\r\\n\\r\\n    Copyright (c) .NET Foundation and Contributors\\r\\n\\r\\n    All rights reserved.\\r\\n\\r\\n    Permission is hereby granted, free of charge, to any person obtaining a copy\\r\\n    of this software and associated documentation files (the \\\"Software\\\"), to deal\\r\\n    in the Software without restriction, including without limitation the rights\\r\\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\r\\n    copies of the Software, and to permit persons to whom the Software is\\r\\n    furnished to do so, subject to the following conditions:\\r\\n\\r\\n    The above copyright notice and this permission notice shall be included in all\\r\\n    copies or substantial portions of the Software.\\r\\n\\r\\n    THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n    SOFTWARE.\\r\\n*/\\r\\n\\r\\nlibrary RandomV1 {\\r\\n\\r\\n    int32 private constant MBIG = 0x7fffffff;\\r\\n    int32 private constant MSEED = 161803398;\\r\\n\\r\\n    struct PRNG {\\r\\n        int32[56] _seedArray;\\r\\n        int32 _inext;\\r\\n        int32 _inextp;\\r\\n    }\\r\\n    \\r\\n    function buildSeedTable(int32 seed) internal pure returns(PRNG memory prng) {\\r\\n        uint8 ii = 0;\\r\\n        int32 mj;\\r\\n        int32 mk;\\r\\n\\r\\n        int32 subtraction = (seed == type(int32).min) ? type(int32).max : int32(MathV1.abs(seed));\\r\\n        mj = MSEED - subtraction;\\r\\n        prng._seedArray[55] = mj;\\r\\n        mk = 1;\\r\\n        for (uint8 i = 1; i \\u003c 55; i++) {  \\r\\n            if ((ii += 21) \\u003e= 55) {\\r\\n                ii -= 55;\\r\\n            }\\r\\n            prng._seedArray[uint64(ii)] = mk;\\r\\n            mk = mj - mk;\\r\\n            if (mk \\u003c 0) mk += MBIG;\\r\\n            mj = prng._seedArray[uint8(ii)];\\r\\n        }\\r\\n\\r\\n        for (uint8 k = 1; k \\u003c 5; k++) {\\r\\n\\r\\n            for (uint8 i = 1; i \\u003c 56; i++) {                \\r\\n                uint8 n = i + 30;           \\r\\n                if (n \\u003e= 55) {\\r\\n                    n -= 55;                \\r\\n                }\\r\\n\\r\\n                int64 an = prng._seedArray[1 + n];                \\r\\n                int64 ai = prng._seedArray[i];\\r\\n                prng._seedArray[i] = int32(ai - an);\\r\\n                \\r\\n                if (prng._seedArray[i] \\u003c 0) {\\r\\n                    int64 x = prng._seedArray[i];\\r\\n                    x += MBIG;\\r\\n                    prng._seedArray[i] = int32(x);\\r\\n                }               \\r\\n            }\\r\\n        }\\r\\n\\r\\n        prng._inextp = 21;\\r\\n    }   \\r\\n\\r\\n    function next(PRNG memory prng, int32 maxValue) internal pure returns (int32) {\\r\\n        require(maxValue \\u003e= 0, \\\"maxValue \\u003c 0\\\");\\r\\n\\r\\n        int32 retval = next(prng);\\r\\n\\r\\n        int64 fretval = retval * Fix64V1.ONE;\\r\\n        int64 sample = Fix64V1.mul(fretval, Fix64V1.div(Fix64V1.ONE, MBIG * Fix64V1.ONE));\\r\\n        int64 sr = Fix64V1.mul(sample, maxValue * Fix64V1.ONE);\\r\\n        int32 r = int32(sr \\u003e\\u003e 32 /* FRACTIONAL_PLACES */);\\r\\n\\r\\n        return r;\\r\\n    }\\r\\n\\r\\n    function next(PRNG memory prng, int32 minValue, int32 maxValue) internal pure returns(int32) {\\r\\n        require(maxValue \\u003e minValue, \\\"maxValue \\u003c= minValue\\\");\\r\\n        \\r\\n        int64 range = maxValue - minValue;\\r\\n        \\r\\n        if (range \\u003c= type(int32).max) {\\r\\n            int32 retval = next(prng);\\r\\n\\r\\n            int64 fretval = retval * Fix64V1.ONE;\\r\\n            int64 sample = Fix64V1.mul(fretval, Fix64V1.div(Fix64V1.ONE, MBIG * Fix64V1.ONE));\\r\\n            int64 sr = Fix64V1.mul(sample, range * Fix64V1.ONE);\\r\\n            int32 r = int32(sr \\u003e\\u003e 32  /* FRACTIONAL_PLACES */) + minValue;\\r\\n            \\r\\n            return r;\\r\\n        }\\r\\n        else {\\r\\n            int64 fretval = nextForLargeRange(prng);\\r\\n            int64 sr = Fix64V1.mul(fretval, range * Fix64V1.ONE);\\r\\n            int32 r = int32(sr \\u003e\\u003e 32  /* FRACTIONAL_PLACES */) + minValue;\\r\\n            return r;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function next(PRNG memory prng) internal pure returns(int32) {\\r\\n\\r\\n        int64 retVal;        \\r\\n        int32 locINext = prng._inext;\\r\\n        int32 locINextp = prng._inextp;\\r\\n\\r\\n        if (++locINext \\u003e= 56) locINext = 1;\\r\\n        if (++locINextp \\u003e= 56) locINextp = 1;\\r\\n\\r\\n        int64 a = int64(prng._seedArray[uint32(locINext)]);\\r\\n        int64 b = int64(prng._seedArray[uint32(locINextp)]);\\r\\n        retVal = a - b;        \\r\\n\\r\\n        if (retVal == MBIG) {\\r\\n            retVal--;\\r\\n        }\\r\\n        if (retVal \\u003c 0) {\\r\\n            retVal += MBIG;\\r\\n        }\\r\\n\\r\\n        prng._seedArray[uint32(locINext)] = int32(retVal);\\r\\n        prng._inext = locINext;\\r\\n        prng._inextp = locINextp;        \\r\\n\\r\\n        int32 r = int32(retVal);\\r\\n        return r;\\r\\n    }\\r\\n\\r\\n    function nextForLargeRange(PRNG memory prng) private pure returns(int64) {\\r\\n\\r\\n        int sample1 = next(prng);\\r\\n        int sample2 = next(prng);\\r\\n\\r\\n        bool negative = sample2 % 2 == 0;\\r\\n        if (negative) {\\r\\n            sample1 = -sample1;\\r\\n        }\\r\\n\\r\\n        int64 d = int64(sample1) * Fix64V1.ONE;\\r\\n        d = Fix64V1.add(int64(d), (type(int32).max - 1));\\r\\n        d = Fix64V1.div(int64(d), int64(2) * (type(int32).max - 1));\\r\\n\\r\\n        return d; \\r\\n    }\\r\\n\\r\\n    function nextGaussian(PRNG memory prng) internal pure returns (int64 randNormal) {\\r\\n        int64 u1 = Fix64V1.sub(Fix64V1.ONE, Fix64V1.mul(next(prng) * Fix64V1.ONE, Fix64V1.div(Fix64V1.ONE, Fix64V1.MAX_VALUE)));\\r\\n        int64 u2 = Fix64V1.sub(Fix64V1.ONE, Fix64V1.mul(next(prng) * Fix64V1.ONE, Fix64V1.div(Fix64V1.ONE, Fix64V1.MAX_VALUE)));\\r\\n        int64 sqrt = Trig256.sqrt(Fix64V1.mul(-2 * Fix64V1.ONE, Trig256.log(u1)));\\r\\n        int64 randStdNormal = Fix64V1.mul(sqrt, Trig256.sin(Fix64V1.mul(Fix64V1.TWO, Fix64V1.mul(Fix64V1.PI, u2))));\\r\\n        randNormal = Fix64V1.add(0, Fix64V1.mul(Fix64V1.ONE, randStdNormal));\\r\\n        return randNormal;\\r\\n    }\\r\\n}\"},\"SinLut256.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n/* Copyright (c) 2021 Kohi Art Community Inc. All rights reserved. */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SinLut256 {\\r\\n    /**\\r\\n     * @notice Lookup tables for computing the sine value for a given angle.\\r\\n     * @param i The clamped and rounded angle integral to index into the table.\\r\\n     * @return The sine value in fixed-point (Q31.32) space.\\r\\n     */\\r\\n    function sinlut(int256 i) external pure returns (int64) {\\r\\n        if (i \\u003c= 127) {\\r\\n            if (i \\u003c= 63) {\\r\\n                if (i \\u003c= 31) {\\r\\n                    if (i \\u003c= 15) {\\r\\n                        if (i \\u003c= 7) {\\r\\n                            if (i \\u003c= 3) {\\r\\n                                if (i \\u003c= 1) {\\r\\n                                    if (i == 0) {\\r\\n                                        return 0;\\r\\n                                    } else {\\r\\n                                        return 26456769;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 2) {\\r\\n                                        return 52912534;\\r\\n                                    } else {\\r\\n                                        return 79366292;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 5) {\\r\\n                                    if (i == 4) {\\r\\n                                        return 105817038;\\r\\n                                    } else {\\r\\n                                        return 132263769;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 6) {\\r\\n                                        return 158705481;\\r\\n                                    } else {\\r\\n                                        return 185141171;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        } else {\\r\\n                            if (i \\u003c= 11) {\\r\\n                                if (i \\u003c= 9) {\\r\\n                                    if (i == 8) {\\r\\n                                        return 211569835;\\r\\n                                    } else {\\r\\n                                        return 237990472;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 10) {\\r\\n                                        return 264402078;\\r\\n                                    } else {\\r\\n                                        return 290803651;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 13) {\\r\\n                                    if (i == 12) {\\r\\n                                        return 317194190;\\r\\n                                    } else {\\r\\n                                        return 343572692;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 14) {\\r\\n                                        return 369938158;\\r\\n                                    } else {\\r\\n                                        return 396289586;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    } else {\\r\\n                        if (i \\u003c= 23) {\\r\\n                            if (i \\u003c= 19) {\\r\\n                                if (i \\u003c= 17) {\\r\\n                                    if (i == 16) {\\r\\n                                        return 422625977;\\r\\n                                    } else {\\r\\n                                        return 448946331;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 18) {\\r\\n                                        return 475249649;\\r\\n                                    } else {\\r\\n                                        return 501534935;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 21) {\\r\\n                                    if (i == 20) {\\r\\n                                        return 527801189;\\r\\n                                    } else {\\r\\n                                        return 554047416;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 22) {\\r\\n                                        return 580272619;\\r\\n                                    } else {\\r\\n                                        return 606475804;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        } else {\\r\\n                            if (i \\u003c= 27) {\\r\\n                                if (i \\u003c= 25) {\\r\\n                                    if (i == 24) {\\r\\n                                        return 632655975;\\r\\n                                    } else {\\r\\n                                        return 658812141;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 26) {\\r\\n                                        return 684943307;\\r\\n                                    } else {\\r\\n                                        return 711048483;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 29) {\\r\\n                                    if (i == 28) {\\r\\n                                        return 737126679;\\r\\n                                    } else {\\r\\n                                        return 763176903;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 30) {\\r\\n                                        return 789198169;\\r\\n                                    } else {\\r\\n                                        return 815189489;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                } else {\\r\\n                    if (i \\u003c= 47) {\\r\\n                        if (i \\u003c= 39) {\\r\\n                            if (i \\u003c= 35) {\\r\\n                                if (i \\u003c= 33) {\\r\\n                                    if (i == 32) {\\r\\n                                        return 841149875;\\r\\n                                    } else {\\r\\n                                        return 867078344;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 34) {\\r\\n                                        return 892973912;\\r\\n                                    } else {\\r\\n                                        return 918835595;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 37) {\\r\\n                                    if (i == 36) {\\r\\n                                        return 944662413;\\r\\n                                    } else {\\r\\n                                        return 970453386;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 38) {\\r\\n                                        return 996207534;\\r\\n                                    } else {\\r\\n                                        return 1021923881;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        } else {\\r\\n                            if (i \\u003c= 43) {\\r\\n                                if (i \\u003c= 41) {\\r\\n                                    if (i == 40) {\\r\\n                                        return 1047601450;\\r\\n                                    } else {\\r\\n                                        return 1073239268;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 42) {\\r\\n                                        return 1098836362;\\r\\n                                    } else {\\r\\n                                        return 1124391760;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 45) {\\r\\n                                    if (i == 44) {\\r\\n                                        return 1149904493;\\r\\n                                    } else {\\r\\n                                        return 1175373592;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 46) {\\r\\n                                        return 1200798091;\\r\\n                                    } else {\\r\\n                                        return 1226177026;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    } else {\\r\\n                        if (i \\u003c= 55) {\\r\\n                            if (i \\u003c= 51) {\\r\\n                                if (i \\u003c= 49) {\\r\\n                                    if (i == 48) {\\r\\n                                        return 1251509433;\\r\\n                                    } else {\\r\\n                                        return 1276794351;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 50) {\\r\\n                                        return 1302030821;\\r\\n                                    } else {\\r\\n                                        return 1327217884;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 53) {\\r\\n                                    if (i == 52) {\\r\\n                                        return 1352354586;\\r\\n                                    } else {\\r\\n                                        return 1377439973;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 54) {\\r\\n                                        return 1402473092;\\r\\n                                    } else {\\r\\n                                        return 1427452994;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        } else {\\r\\n                            if (i \\u003c= 59) {\\r\\n                                if (i \\u003c= 57) {\\r\\n                                    if (i == 56) {\\r\\n                                        return 1452378731;\\r\\n                                    } else {\\r\\n                                        return 1477249357;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 58) {\\r\\n                                        return 1502063928;\\r\\n                                    } else {\\r\\n                                        return 1526821503;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 61) {\\r\\n                                    if (i == 60) {\\r\\n                                        return 1551521142;\\r\\n                                    } else {\\r\\n                                        return 1576161908;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 62) {\\r\\n                                        return 1600742866;\\r\\n                                    } else {\\r\\n                                        return 1625263084;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            } else {\\r\\n                if (i \\u003c= 95) {\\r\\n                    if (i \\u003c= 79) {\\r\\n                        if (i \\u003c= 71) {\\r\\n                            if (i \\u003c= 67) {\\r\\n                                if (i \\u003c= 65) {\\r\\n                                    if (i == 64) {\\r\\n                                        return 1649721630;\\r\\n                                    } else {\\r\\n                                        return 1674117578;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 66) {\\r\\n                                        return 1698450000;\\r\\n                                    } else {\\r\\n                                        return 1722717974;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 69) {\\r\\n                                    if (i == 68) {\\r\\n                                        return 1746920580;\\r\\n                                    } else {\\r\\n                                        return 1771056897;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 70) {\\r\\n                                        return 1795126012;\\r\\n                                    } else {\\r\\n                                        return 1819127010;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        } else {\\r\\n                            if (i \\u003c= 75) {\\r\\n                                if (i \\u003c= 73) {\\r\\n                                    if (i == 72) {\\r\\n                                        return 1843058980;\\r\\n                                    } else {\\r\\n                                        return 1866921015;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 74) {\\r\\n                                        return 1890712210;\\r\\n                                    } else {\\r\\n                                        return 1914431660;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 77) {\\r\\n                                    if (i == 76) {\\r\\n                                        return 1938078467;\\r\\n                                    } else {\\r\\n                                        return 1961651733;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 78) {\\r\\n                                        return 1985150563;\\r\\n                                    } else {\\r\\n                                        return 2008574067;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    } else {\\r\\n                        if (i \\u003c= 87) {\\r\\n                            if (i \\u003c= 83) {\\r\\n                                if (i \\u003c= 81) {\\r\\n                                    if (i == 80) {\\r\\n                                        return 2031921354;\\r\\n                                    } else {\\r\\n                                        return 2055191540;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 82) {\\r\\n                                        return 2078383740;\\r\\n                                    } else {\\r\\n                                        return 2101497076;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 85) {\\r\\n                                    if (i == 84) {\\r\\n                                        return 2124530670;\\r\\n                                    } else {\\r\\n                                        return 2147483647;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 86) {\\r\\n                                        return 2170355138;\\r\\n                                    } else {\\r\\n                                        return 2193144275;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        } else {\\r\\n                            if (i \\u003c= 91) {\\r\\n                                if (i \\u003c= 89) {\\r\\n                                    if (i == 88) {\\r\\n                                        return 2215850191;\\r\\n                                    } else {\\r\\n                                        return 2238472027;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 90) {\\r\\n                                        return 2261008923;\\r\\n                                    } else {\\r\\n                                        return 2283460024;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 93) {\\r\\n                                    if (i == 92) {\\r\\n                                        return 2305824479;\\r\\n                                    } else {\\r\\n                                        return 2328101438;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 94) {\\r\\n                                        return 2350290057;\\r\\n                                    } else {\\r\\n                                        return 2372389494;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                } else {\\r\\n                    if (i \\u003c= 111) {\\r\\n                        if (i \\u003c= 103) {\\r\\n                            if (i \\u003c= 99) {\\r\\n                                if (i \\u003c= 97) {\\r\\n                                    if (i == 96) {\\r\\n                                        return 2394398909;\\r\\n                                    } else {\\r\\n                                        return 2416317469;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 98) {\\r\\n                                        return 2438144340;\\r\\n                                    } else {\\r\\n                                        return 2459878695;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 101) {\\r\\n                                    if (i == 100) {\\r\\n                                        return 2481519710;\\r\\n                                    } else {\\r\\n                                        return 2503066562;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 102) {\\r\\n                                        return 2524518435;\\r\\n                                    } else {\\r\\n                                        return 2545874514;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        } else {\\r\\n                            if (i \\u003c= 107) {\\r\\n                                if (i \\u003c= 105) {\\r\\n                                    if (i == 104) {\\r\\n                                        return 2567133990;\\r\\n                                    } else {\\r\\n                                        return 2588296054;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 106) {\\r\\n                                        return 2609359905;\\r\\n                                    } else {\\r\\n                                        return 2630324743;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 109) {\\r\\n                                    if (i == 108) {\\r\\n                                        return 2651189772;\\r\\n                                    } else {\\r\\n                                        return 2671954202;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 110) {\\r\\n                                        return 2692617243;\\r\\n                                    } else {\\r\\n                                        return 2713178112;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    } else {\\r\\n                        if (i \\u003c= 119) {\\r\\n                            if (i \\u003c= 115) {\\r\\n                                if (i \\u003c= 113) {\\r\\n                                    if (i == 112) {\\r\\n                                        return 2733636028;\\r\\n                                    } else {\\r\\n                                        return 2753990216;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 114) {\\r\\n                                        return 2774239903;\\r\\n                                    } else {\\r\\n                                        return 2794384321;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 117) {\\r\\n                                    if (i == 116) {\\r\\n                                        return 2814422705;\\r\\n                                    } else {\\r\\n                                        return 2834354295;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 118) {\\r\\n                                        return 2854178334;\\r\\n                                    } else {\\r\\n                                        return 2873894071;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        } else {\\r\\n                            if (i \\u003c= 123) {\\r\\n                                if (i \\u003c= 121) {\\r\\n                                    if (i == 120) {\\r\\n                                        return 2893500756;\\r\\n                                    } else {\\r\\n                                        return 2912997648;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 122) {\\r\\n                                        return 2932384004;\\r\\n                                    } else {\\r\\n                                        return 2951659090;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 125) {\\r\\n                                    if (i == 124) {\\r\\n                                        return 2970822175;\\r\\n                                    } else {\\r\\n                                        return 2989872531;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 126) {\\r\\n                                        return 3008809435;\\r\\n                                    } else {\\r\\n                                        return 3027632170;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            if (i \\u003c= 191) {\\r\\n                if (i \\u003c= 159) {\\r\\n                    if (i \\u003c= 143) {\\r\\n                        if (i \\u003c= 135) {\\r\\n                            if (i \\u003c= 131) {\\r\\n                                if (i \\u003c= 129) {\\r\\n                                    if (i == 128) {\\r\\n                                        return 3046340019;\\r\\n                                    } else {\\r\\n                                        return 3064932275;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 130) {\\r\\n                                        return 3083408230;\\r\\n                                    } else {\\r\\n                                        return 3101767185;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 133) {\\r\\n                                    if (i == 132) {\\r\\n                                        return 3120008443;\\r\\n                                    } else {\\r\\n                                        return 3138131310;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 134) {\\r\\n                                        return 3156135101;\\r\\n                                    } else {\\r\\n                                        return 3174019130;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        } else {\\r\\n                            if (i \\u003c= 139) {\\r\\n                                if (i \\u003c= 137) {\\r\\n                                    if (i == 136) {\\r\\n                                        return 3191782721;\\r\\n                                    } else {\\r\\n                                        return 3209425199;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 138) {\\r\\n                                        return 3226945894;\\r\\n                                    } else {\\r\\n                                        return 3244344141;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 141) {\\r\\n                                    if (i == 140) {\\r\\n                                        return 3261619281;\\r\\n                                    } else {\\r\\n                                        return 3278770658;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 142) {\\r\\n                                        return 3295797620;\\r\\n                                    } else {\\r\\n                                        return 3312699523;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    } else {\\r\\n                        if (i \\u003c= 151) {\\r\\n                            if (i \\u003c= 147) {\\r\\n                                if (i \\u003c= 145) {\\r\\n                                    if (i == 144) {\\r\\n                                        return 3329475725;\\r\\n                                    } else {\\r\\n                                        return 3346125588;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 146) {\\r\\n                                        return 3362648482;\\r\\n                                    } else {\\r\\n                                        return 3379043779;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 149) {\\r\\n                                    if (i == 148) {\\r\\n                                        return 3395310857;\\r\\n                                    } else {\\r\\n                                        return 3411449099;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 150) {\\r\\n                                        return 3427457892;\\r\\n                                    } else {\\r\\n                                        return 3443336630;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        } else {\\r\\n                            if (i \\u003c= 155) {\\r\\n                                if (i \\u003c= 153) {\\r\\n                                    if (i == 152) {\\r\\n                                        return 3459084709;\\r\\n                                    } else {\\r\\n                                        return 3474701532;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 154) {\\r\\n                                        return 3490186507;\\r\\n                                    } else {\\r\\n                                        return 3505539045;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 157) {\\r\\n                                    if (i == 156) {\\r\\n                                        return 3520758565;\\r\\n                                    } else {\\r\\n                                        return 3535844488;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 158) {\\r\\n                                        return 3550796243;\\r\\n                                    } else {\\r\\n                                        return 3565613262;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                } else {\\r\\n                    if (i \\u003c= 175) {\\r\\n                        if (i \\u003c= 167) {\\r\\n                            if (i \\u003c= 163) {\\r\\n                                if (i \\u003c= 161) {\\r\\n                                    if (i == 160) {\\r\\n                                        return 3580294982;\\r\\n                                    } else {\\r\\n                                        return 3594840847;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 162) {\\r\\n                                        return 3609250305;\\r\\n                                    } else {\\r\\n                                        return 3623522808;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 165) {\\r\\n                                    if (i == 164) {\\r\\n                                        return 3637657816;\\r\\n                                    } else {\\r\\n                                        return 3651654792;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 166) {\\r\\n                                        return 3665513205;\\r\\n                                    } else {\\r\\n                                        return 3679232528;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        } else {\\r\\n                            if (i \\u003c= 171) {\\r\\n                                if (i \\u003c= 169) {\\r\\n                                    if (i == 168) {\\r\\n                                        return 3692812243;\\r\\n                                    } else {\\r\\n                                        return 3706251832;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 170) {\\r\\n                                        return 3719550786;\\r\\n                                    } else {\\r\\n                                        return 3732708601;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 173) {\\r\\n                                    if (i == 172) {\\r\\n                                        return 3745724777;\\r\\n                                    } else {\\r\\n                                        return 3758598821;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 174) {\\r\\n                                        return 3771330243;\\r\\n                                    } else {\\r\\n                                        return 3783918561;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    } else {\\r\\n                        if (i \\u003c= 183) {\\r\\n                            if (i \\u003c= 179) {\\r\\n                                if (i \\u003c= 177) {\\r\\n                                    if (i == 176) {\\r\\n                                        return 3796363297;\\r\\n                                    } else {\\r\\n                                        return 3808663979;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 178) {\\r\\n                                        return 3820820141;\\r\\n                                    } else {\\r\\n                                        return 3832831319;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 181) {\\r\\n                                    if (i == 180) {\\r\\n                                        return 3844697060;\\r\\n                                    } else {\\r\\n                                        return 3856416913;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 182) {\\r\\n                                        return 3867990433;\\r\\n                                    } else {\\r\\n                                        return 3879417181;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        } else {\\r\\n                            if (i \\u003c= 187) {\\r\\n                                if (i \\u003c= 185) {\\r\\n                                    if (i == 184) {\\r\\n                                        return 3890696723;\\r\\n                                    } else {\\r\\n                                        return 3901828632;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 186) {\\r\\n                                        return 3912812484;\\r\\n                                    } else {\\r\\n                                        return 3923647863;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 189) {\\r\\n                                    if (i == 188) {\\r\\n                                        return 3934334359;\\r\\n                                    } else {\\r\\n                                        return 3944871565;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 190) {\\r\\n                                        return 3955259082;\\r\\n                                    } else {\\r\\n                                        return 3965496515;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            } else {\\r\\n                if (i \\u003c= 223) {\\r\\n                    if (i \\u003c= 207) {\\r\\n                        if (i \\u003c= 199) {\\r\\n                            if (i \\u003c= 195) {\\r\\n                                if (i \\u003c= 193) {\\r\\n                                    if (i == 192) {\\r\\n                                        return 3975583476;\\r\\n                                    } else {\\r\\n                                        return 3985519583;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 194) {\\r\\n                                        return 3995304457;\\r\\n                                    } else {\\r\\n                                        return 4004937729;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 197) {\\r\\n                                    if (i == 196) {\\r\\n                                        return 4014419032;\\r\\n                                    } else {\\r\\n                                        return 4023748007;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 198) {\\r\\n                                        return 4032924300;\\r\\n                                    } else {\\r\\n                                        return 4041947562;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        } else {\\r\\n                            if (i \\u003c= 203) {\\r\\n                                if (i \\u003c= 201) {\\r\\n                                    if (i == 200) {\\r\\n                                        return 4050817451;\\r\\n                                    } else {\\r\\n                                        return 4059533630;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 202) {\\r\\n                                        return 4068095769;\\r\\n                                    } else {\\r\\n                                        return 4076503544;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 205) {\\r\\n                                    if (i == 204) {\\r\\n                                        return 4084756634;\\r\\n                                    } else {\\r\\n                                        return 4092854726;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 206) {\\r\\n                                        return 4100797514;\\r\\n                                    } else {\\r\\n                                        return 4108584696;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    } else {\\r\\n                        if (i \\u003c= 215) {\\r\\n                            if (i \\u003c= 211) {\\r\\n                                if (i \\u003c= 209) {\\r\\n                                    if (i == 208) {\\r\\n                                        return 4116215977;\\r\\n                                    } else {\\r\\n                                        return 4123691067;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 210) {\\r\\n                                        return 4131009681;\\r\\n                                    } else {\\r\\n                                        return 4138171544;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 213) {\\r\\n                                    if (i == 212) {\\r\\n                                        return 4145176382;\\r\\n                                    } else {\\r\\n                                        return 4152023930;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 214) {\\r\\n                                        return 4158713929;\\r\\n                                    } else {\\r\\n                                        return 4165246124;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        } else {\\r\\n                            if (i \\u003c= 219) {\\r\\n                                if (i \\u003c= 217) {\\r\\n                                    if (i == 216) {\\r\\n                                        return 4171620267;\\r\\n                                    } else {\\r\\n                                        return 4177836117;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 218) {\\r\\n                                        return 4183893437;\\r\\n                                    } else {\\r\\n                                        return 4189791999;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 221) {\\r\\n                                    if (i == 220) {\\r\\n                                        return 4195531577;\\r\\n                                    } else {\\r\\n                                        return 4201111955;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 222) {\\r\\n                                        return 4206532921;\\r\\n                                    } else {\\r\\n                                        return 4211794268;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                } else {\\r\\n                    if (i \\u003c= 239) {\\r\\n                        if (i \\u003c= 231) {\\r\\n                            if (i \\u003c= 227) {\\r\\n                                if (i \\u003c= 225) {\\r\\n                                    if (i == 224) {\\r\\n                                        return 4216895797;\\r\\n                                    } else {\\r\\n                                        return 4221837315;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 226) {\\r\\n                                        return 4226618635;\\r\\n                                    } else {\\r\\n                                        return 4231239573;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 229) {\\r\\n                                    if (i == 228) {\\r\\n                                        return 4235699957;\\r\\n                                    } else {\\r\\n                                        return 4239999615;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 230) {\\r\\n                                        return 4244138385;\\r\\n                                    } else {\\r\\n                                        return 4248116110;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        } else {\\r\\n                            if (i \\u003c= 235) {\\r\\n                                if (i \\u003c= 233) {\\r\\n                                    if (i == 232) {\\r\\n                                        return 4251932639;\\r\\n                                    } else {\\r\\n                                        return 4255587827;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 234) {\\r\\n                                        return 4259081536;\\r\\n                                    } else {\\r\\n                                        return 4262413632;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 237) {\\r\\n                                    if (i == 236) {\\r\\n                                        return 4265583990;\\r\\n                                    } else {\\r\\n                                        return 4268592489;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 238) {\\r\\n                                        return 4271439015;\\r\\n                                    } else {\\r\\n                                        return 4274123460;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    } else {\\r\\n                        if (i \\u003c= 247) {\\r\\n                            if (i \\u003c= 243) {\\r\\n                                if (i \\u003c= 241) {\\r\\n                                    if (i == 240) {\\r\\n                                        return 4276645722;\\r\\n                                    } else {\\r\\n                                        return 4279005706;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 242) {\\r\\n                                        return 4281203321;\\r\\n                                    } else {\\r\\n                                        return 4283238485;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 245) {\\r\\n                                    if (i == 244) {\\r\\n                                        return 4285111119;\\r\\n                                    } else {\\r\\n                                        return 4286821154;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 246) {\\r\\n                                        return 4288368525;\\r\\n                                    } else {\\r\\n                                        return 4289753172;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        } else {\\r\\n                            if (i \\u003c= 251) {\\r\\n                                if (i \\u003c= 249) {\\r\\n                                    if (i == 248) {\\r\\n                                        return 4290975043;\\r\\n                                    } else {\\r\\n                                        return 4292034091;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 250) {\\r\\n                                        return 4292930277;\\r\\n                                    } else {\\r\\n                                        return 4293663567;\\r\\n                                    }\\r\\n                                }\\r\\n                            } else {\\r\\n                                if (i \\u003c= 253) {\\r\\n                                    if (i == 252) {\\r\\n                                        return 4294233932;\\r\\n                                    } else {\\r\\n                                        return 4294641351;\\r\\n                                    }\\r\\n                                } else {\\r\\n                                    if (i == 254) {\\r\\n                                        return 4294885809;\\r\\n                                    } else {\\r\\n                                        return 4294967296;\\r\\n                                    }\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Trig256.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n/* Copyright (c) 2021 Kohi Art Community, Inc. All rights reserved. */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"Fix64V1.sol\\\";\\r\\nimport \\\"SinLut256.sol\\\";\\r\\n\\r\\n/*\\r\\n    Provides trigonometric functions in Q31.Q32 format.\\r\\n\\r\\n    exp: Adapted from Petteri Aimonen\\u0027s libfixmath\\r\\n\\r\\n    See: https://github.com/PetteriAimonen/libfixmath\\r\\n         https://github.com/PetteriAimonen/libfixmath/blob/master/LICENSE\\r\\n\\r\\n    other functions: Adapted from André Slupik\\u0027s FixedMath.NET\\r\\n                     https://github.com/asik/FixedMath.Net/blob/master/LICENSE.txt\\r\\n         \\r\\n    THIRD PARTY NOTICES:\\r\\n    ====================\\r\\n\\r\\n    libfixmath is Copyright (c) 2011-2021 Flatmush \\u003cFlatmush@gmail.com\\u003e,\\r\\n    Petteri Aimonen \\u003cPetteri.Aimonen@gmail.com\\u003e, \\u0026 libfixmath AUTHORS\\r\\n\\r\\n    Permission is hereby granted, free of charge, to any person obtaining a copy\\r\\n    of this software and associated documentation files (the \\\"Software\\\"), to deal\\r\\n    in the Software without restriction, including without limitation the rights\\r\\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\r\\n    copies of the Software, and to permit persons to whom the Software is\\r\\n    furnished to do so, subject to the following conditions:\\r\\n\\r\\n    The above copyright notice and this permission notice shall be included in all\\r\\n    copies or substantial portions of the Software.\\r\\n\\r\\n    THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n    SOFTWARE.\\r\\n\\r\\n    Copyright 2012 André Slupik\\r\\n\\r\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n    you may not use this file except in compliance with the License.\\r\\n    You may obtain a copy of the License at\\r\\n\\r\\n        http://www.apache.org/licenses/LICENSE-2.0\\r\\n\\r\\n    Unless required by applicable law or agreed to in writing, software\\r\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n    See the License for the specific language governing permissions and\\r\\n    limitations under the License.\\r\\n\\r\\n    This project uses code from the log2fix library, which is under the following license:           \\r\\n    The MIT License (MIT)\\r\\n\\r\\n    Copyright (c) 2015 Dan Moulding\\r\\n    \\r\\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), \\r\\n    to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, \\r\\n    and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\r\\n    \\r\\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\r\\n    THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \\r\\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\r\\n    IN THE SOFTWARE.\\r\\n*/\\r\\n\\r\\nlibrary Trig256 {\\r\\n    int64 private constant LARGE_PI = 7244019458077122842;\\r\\n    int64 private constant LN2 = 0xB17217F7;\\r\\n    int64 private constant LN_MAX = 0x157CD0E702;\\r\\n    int64 private constant LN_MIN = -0x162E42FEFA;\\r\\n    int64 private constant E = -0x2B7E15162;\\r\\n\\r\\n    function sin(int64 x)\\r\\n        internal\\r\\n        pure\\r\\n        returns (int64)\\r\\n    {       \\r\\n        (\\r\\n            int64 clamped,\\r\\n            bool flipHorizontal,\\r\\n            bool flipVertical\\r\\n        ) = clamp(x);\\r\\n\\r\\n        int64 lutInterval = Fix64V1.div(((256 - 1) * Fix64V1.ONE), Fix64V1.PI_OVER_2);\\r\\n        int rawIndex = Fix64V1.mul_256(clamped, lutInterval);\\r\\n        int64 roundedIndex = int64(Fix64V1.round(rawIndex));\\r\\n        int64 indexError = Fix64V1.sub(int64(rawIndex), roundedIndex);     \\r\\n\\r\\n        roundedIndex = roundedIndex \\u003e\\u003e 32; /* FRACTIONAL_PLACES */\\r\\n\\r\\n        int64 nearestValueIndex = flipHorizontal\\r\\n            ? (256 - 1) - roundedIndex\\r\\n            : roundedIndex;\\r\\n\\r\\n        int64 nearestValue = SinLut256.sinlut(nearestValueIndex);\\r\\n\\r\\n        int64 secondNearestValue = SinLut256.sinlut(\\r\\n            flipHorizontal\\r\\n                ? (256 - 1) -\\r\\n                    roundedIndex -\\r\\n                    Fix64V1.sign(indexError)\\r\\n                : roundedIndex + Fix64V1.sign(indexError)\\r\\n        );\\r\\n\\r\\n        int64 delta = Fix64V1.mul(indexError, Fix64V1.abs(Fix64V1.sub(nearestValue, secondNearestValue)));\\r\\n        int64 interpolatedValue = nearestValue + (flipHorizontal ? -delta : delta);\\r\\n        int64 finalValue = flipVertical ? -interpolatedValue: interpolatedValue;\\r\\n    \\r\\n        return finalValue;\\r\\n    }\\r\\n\\r\\n    function cos(int64 x)\\r\\n        internal\\r\\n        pure\\r\\n        returns (int64)\\r\\n    {\\r\\n        int64 xl = x;\\r\\n        int64 angle;\\r\\n        if(xl \\u003e 0) {            \\r\\n            angle = Fix64V1.add(xl, Fix64V1.sub(0 - Fix64V1.PI, Fix64V1.PI_OVER_2));            \\r\\n        } else {            \\r\\n            angle = Fix64V1.add(xl, Fix64V1.PI_OVER_2);\\r\\n        }        \\r\\n        return sin(angle);\\r\\n    }\\r\\n\\r\\n    function sqrt(int64 x)\\r\\n        internal\\r\\n        pure        \\r\\n        returns (int64)\\r\\n    {\\r\\n        int64 xl = x;\\r\\n        if (xl \\u003c 0)\\r\\n            revert(\\\"negative value passed to sqrt\\\");\\r\\n\\r\\n        uint64 num = uint64(xl);\\r\\n        uint64 result = uint64(0);\\r\\n        uint64 bit = uint64(1) \\u003c\\u003c (64 - 2);\\r\\n\\r\\n        while (bit \\u003e num) bit \\u003e\\u003e= 2;\\r\\n        for (uint8 i = 0; i \\u003c 2; ++i)\\r\\n        {\\r\\n            while (bit != 0)\\r\\n            {\\r\\n                if (num \\u003e= result + bit)\\r\\n                {\\r\\n                    num -= result + bit;\\r\\n                    result = (result \\u003e\\u003e 1) + bit;\\r\\n                }\\r\\n                else\\r\\n                {\\r\\n                    result = result \\u003e\\u003e 1;\\r\\n                }\\r\\n\\r\\n                bit \\u003e\\u003e= 2;\\r\\n            }\\r\\n\\r\\n            if (i == 0)\\r\\n            {\\r\\n                if (num \\u003e (uint64(1) \\u003c\\u003c (64 / 2)) - 1)\\r\\n                {\\r\\n                    num -= result;\\r\\n                    num = (num \\u003c\\u003c (64 / 2)) - uint64(0x80000000);\\r\\n                    result = (result \\u003c\\u003c (64 / 2)) + uint64(0x80000000);\\r\\n                }\\r\\n                else\\r\\n                {\\r\\n                    num \\u003c\\u003c= 64 / 2;\\r\\n                    result \\u003c\\u003c= 64 / 2;\\r\\n                }\\r\\n\\r\\n                bit = uint64(1) \\u003c\\u003c (64 / 2 - 2);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (num \\u003e result) ++result;\\r\\n        return int64(result);\\r\\n    }\\r\\n\\r\\n     function log2_256(int x)\\r\\n        internal\\r\\n        pure        \\r\\n        returns (int)\\r\\n    {\\r\\n        if (x \\u003c= 0) {\\r\\n            revert(\\\"negative value passed to log2_256\\\");\\r\\n        }\\r\\n\\r\\n        // This implementation is based on Clay. S. Turner\\u0027s fast binary logarithm\\r\\n        // algorithm (C. S. Turner,  \\\"A Fast Binary Logarithm Algorithm\\\", IEEE Signal\\r\\n        //     Processing Mag., pp. 124,140, Sep. 2010.)\\r\\n\\r\\n        int b = 1 \\u003c\\u003c 31; // FRACTIONAL_PLACES - 1\\r\\n        int y = 0;\\r\\n\\r\\n        int rawX = x;\\r\\n        while (rawX \\u003c Fix64V1.ONE) {\\r\\n            rawX \\u003c\\u003c= 1;\\r\\n            y -= Fix64V1.ONE;\\r\\n        }\\r\\n\\r\\n        while (rawX \\u003e= Fix64V1.ONE \\u003c\\u003c 1) {\\r\\n            rawX \\u003e\\u003e= 1;\\r\\n            y += Fix64V1.ONE;\\r\\n        }\\r\\n\\r\\n        int z = rawX;\\r\\n\\r\\n        for (uint8 i = 0; i \\u003c 32 /* FRACTIONAL_PLACES */; i++) {\\r\\n            z = Fix64V1.mul_256(z, z);\\r\\n            if (z \\u003e= Fix64V1.ONE \\u003c\\u003c 1) {\\r\\n                z = z \\u003e\\u003e 1;\\r\\n                y += b;\\r\\n            }\\r\\n            b \\u003e\\u003e= 1;\\r\\n        }\\r\\n\\r\\n        return y;\\r\\n    }\\r\\n\\r\\n    function log_256(int x)\\r\\n        internal\\r\\n        pure        \\r\\n        returns (int)\\r\\n    {\\r\\n        return Fix64V1.mul_256(log2_256(x), LN2);\\r\\n    }\\r\\n\\r\\n    function log2(int64 x)\\r\\n        internal\\r\\n        pure        \\r\\n        returns (int64)\\r\\n    {\\r\\n        if (x \\u003c= 0) revert(\\\"non-positive value passed to log2\\\");\\r\\n\\r\\n        // This implementation is based on Clay. S. Turner\\u0027s fast binary logarithm\\r\\n        // algorithm (C. S. Turner,  \\\"A Fast Binary Logarithm Algorithm\\\", IEEE Signal\\r\\n        //     Processing Mag., pp. 124,140, Sep. 2010.)\\r\\n\\r\\n        int64 b = 1 \\u003c\\u003c 31; // FRACTIONAL_PLACES - 1\\r\\n        int64 y = 0;\\r\\n\\r\\n        int64 rawX = x;\\r\\n        while (rawX \\u003c Fix64V1.ONE)\\r\\n        {\\r\\n            rawX \\u003c\\u003c= 1;\\r\\n            y -= Fix64V1.ONE;\\r\\n        }\\r\\n\\r\\n        while (rawX \\u003e= Fix64V1.ONE \\u003c\\u003c 1)\\r\\n        {\\r\\n            rawX \\u003e\\u003e= 1;\\r\\n            y += Fix64V1.ONE;\\r\\n        }\\r\\n\\r\\n        int64 z = rawX;\\r\\n\\r\\n        for (int32 i = 0; i \\u003c Fix64V1.FRACTIONAL_PLACES; i++)\\r\\n        {\\r\\n            z = Fix64V1.mul(z, z);\\r\\n            if (z \\u003e= Fix64V1.ONE \\u003c\\u003c 1)\\r\\n            {\\r\\n                z = z \\u003e\\u003e 1;\\r\\n                y += b;\\r\\n            }\\r\\n\\r\\n            b \\u003e\\u003e= 1;\\r\\n        }\\r\\n\\r\\n        return y;\\r\\n    }\\r\\n\\r\\n    function log(int64 x)\\r\\n        internal\\r\\n        pure        \\r\\n        returns (int64)\\r\\n    {\\r\\n        return Fix64V1.mul(log2(x), LN2);\\r\\n    }\\r\\n\\r\\n    function exp(int64 x)\\r\\n        internal\\r\\n        pure        \\r\\n        returns (int64)\\r\\n    {\\r\\n        if (x == 0) return Fix64V1.ONE;\\r\\n        if (x == Fix64V1.ONE) return E;\\r\\n        if (x \\u003e= LN_MAX) return Fix64V1.MAX_VALUE;\\r\\n        if (x \\u003c= LN_MIN) return 0;\\r\\n\\r\\n        /* The algorithm is based on the power series for exp(x):\\r\\n         * http://en.wikipedia.org/wiki/Exponential_function#Formal_definition\\r\\n         *\\r\\n         * From term n, we get term n+1 by multiplying with x/n.\\r\\n         * When the sum term drops to zero, we can stop summing.\\r\\n         */\\r\\n\\r\\n        // The power-series converges much faster on positive values\\r\\n        // and exp(-x) = 1/exp(x).\\r\\n        \\r\\n        bool neg = (x \\u003c 0);\\r\\n        if (neg) x = -x;\\r\\n\\r\\n        int64 result = Fix64V1.add(\\r\\n            int64(x),\\r\\n            Fix64V1.ONE\\r\\n        );\\r\\n        int64 term = x;\\r\\n\\r\\n        for (uint32 i = 2; i \\u003c 40; i++) {\\r\\n            term = Fix64V1.mul(\\r\\n                x,\\r\\n                Fix64V1.div(term, int32(i) * Fix64V1.ONE)\\r\\n            );\\r\\n            result = Fix64V1.add(result, int64(term));\\r\\n            if (term == 0) break;\\r\\n        }\\r\\n\\r\\n        if (neg) {\\r\\n            result = Fix64V1.div(Fix64V1.ONE, result);\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function clamp(int64 x)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            int64,\\r\\n            bool,\\r\\n            bool\\r\\n        )\\r\\n    {\\r\\n        int64 clamped2Pi = x;\\r\\n        for (uint8 i = 0; i \\u003c 29; ++i) {\\r\\n            clamped2Pi %= LARGE_PI \\u003e\\u003e i;\\r\\n        }\\r\\n        if (x \\u003c 0) {\\r\\n            clamped2Pi += Fix64V1.TWO_PI;\\r\\n        }\\r\\n\\r\\n        bool flipVertical = clamped2Pi \\u003e= Fix64V1.PI;\\r\\n        int64 clampedPi = clamped2Pi;\\r\\n        while (clampedPi \\u003e= Fix64V1.PI) {\\r\\n            clampedPi -= Fix64V1.PI;\\r\\n        }\\r\\n\\r\\n        bool flipHorizontal = clampedPi \\u003e= Fix64V1.PI_OVER_2;\\r\\n\\r\\n        int64 clampedPiOver2 = clampedPi;\\r\\n        if (clampedPiOver2 \\u003e= Fix64V1.PI_OVER_2)\\r\\n            clampedPiOver2 -= Fix64V1.PI_OVER_2;\\r\\n\\r\\n        return (clampedPiOver2, flipHorizontal, flipVertical);\\r\\n    }\\r\\n}\\r\\n\"},\"TypesV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n/* Copyright (c) 2021 Kohi Art Community, Inc. All rights reserved. */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary TypesV1 {\\r\\n    /**\\r\\n     * @dev Represents a point in two-dimensional space.\\r\\n     */\\r\\n    struct Point2D {\\r\\n        int256 x;\\r\\n        int256 y;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Represents a chunked rendering region.\\r\\n     */\\r\\n    struct Chunk2D {\\r\\n        uint16 index;\\r\\n        uint16 width;\\r\\n        uint16 height;\\r\\n        uint16 chunkWidth;\\r\\n        uint16 chunkHeight;\\r\\n        uint32 startX;\\r\\n        uint32 startY;\\r\\n    }\\r\\n}\"},\"WatercolorDraw.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n/* Copyright (c) 2021 Kohi Art Community, Inc. All rights reserved. */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"ProcessingV1.sol\\\";\\r\\nimport \\\"WatercolorLayer.sol\\\";\\r\\n\\r\\nlibrary WatercolorDraw {\\r\\n    uint16 public constant MAX_POLYGONS = 40960;\\r\\n    \\r\\n    struct Draw {\\r\\n        uint32[16384] result;\\r\\n        WatercolorLayer.WatercolorParameters p;\\r\\n        WatercolorLayer.StackList stackList;\\r\\n        TypesV1.Chunk2D chunk;\\r\\n    }\\r\\n\\r\\n    function draw(Draw memory f)\\r\\n        external\\r\\n        pure\\r\\n        returns (uint32[16384] memory buffer)\\r\\n    {\\r\\n        for (uint8 s = 0; s \\u003c f.p.stackCount; s++) {\\r\\n            \\r\\n            TypesV1.Point2D[MAX_POLYGONS] memory stack;\\r\\n            uint32 vertexCount;\\r\\n\\r\\n            if (s == 0) {\\r\\n                stack = f.stackList.stack1;\\r\\n                vertexCount = f.stackList.stack1Count;\\r\\n            } else if (s == 1) {\\r\\n                stack = f.stackList.stack2;\\r\\n                vertexCount = f.stackList.stack2Count;\\r\\n            } else if (s == 2) {\\r\\n                stack = f.stackList.stack3;\\r\\n                vertexCount = f.stackList.stack3Count;\\r\\n            } else if (s == 3) {\\r\\n                stack = f.stackList.stack4;\\r\\n                vertexCount = f.stackList.stack4Count;\\r\\n            }\\r\\n\\r\\n            uint32 fillColor = f.p.stackColors[s];\\r\\n\\r\\n            require(vertexCount == MAX_POLYGONS, \\\"invalid vertex count\\\");\\r\\n            \\r\\n            ProcessingV1.polygon(\\r\\n                    f.result,\\r\\n                    GeometryV1.Polygon2D(\\r\\n                        stack,\\r\\n                        vertexCount,\\r\\n                        fillColor,\\r\\n                        fillColor,                            \\r\\n                        f.chunk\\r\\n                    )\\r\\n                );\\r\\n        }\\r\\n\\r\\n        return f.result;\\r\\n    }\\r\\n}\\r\\n\"},\"WatercolorLayer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n/* Copyright (c) 2021 Kohi Art Community, Inc. All rights reserved. */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"TypesV1.sol\\\";\\r\\nimport \\\"RandomV1.sol\\\";\\r\\nimport \\\"Trig256.sol\\\";\\r\\nimport \\\"GraphicsV1.sol\\\";\\r\\n\\r\\nlibrary WatercolorLayer {\\r\\n    uint16 public constant MAX_POLYGONS = 40960;\\r\\n    uint8 public constant NUM_SIDES = 10;\\r\\n\\r\\n    struct WatercolorParameters {\\r\\n        uint8 stackCount;        \\r\\n        uint32[4] stackColors;        \\r\\n        int64[4] r;\\r\\n        uint32[16] palette;       \\r\\n        TypesV1.Point2D[MAX_POLYGONS][4] basePoly;\\r\\n        uint32[4] basePolyCount;\\r\\n        RandomV1.PRNG prng;      \\r\\n    }    \\r\\n\\r\\n    struct StackList {\\r\\n        TypesV1.Point2D[MAX_POLYGONS] stack1;\\r\\n        TypesV1.Point2D[MAX_POLYGONS] stack2;\\r\\n        TypesV1.Point2D[MAX_POLYGONS] stack3;\\r\\n        TypesV1.Point2D[MAX_POLYGONS] stack4;        \\r\\n        uint32 stack1Count;\\r\\n        uint32 stack2Count;\\r\\n        uint32 stack3Count;\\r\\n        uint32 stack4Count;\\r\\n        RandomV1.PRNG prng;\\r\\n    }\\r\\n\\r\\n    struct CreateBasePoly {\\r\\n        int64 x;\\r\\n        int64 y;\\r\\n        int64 r;\\r\\n    }\\r\\n\\r\\n    struct CreatePolyStack {\\r\\n        int64 r;\\r\\n        TypesV1.Point2D[MAX_POLYGONS] basePoly;\\r\\n        uint32 basePolyCount;\\r\\n    }\\r\\n\\r\\n    struct Subdivide {\\r\\n        int32 depth;\\r\\n        int64 variance;\\r\\n        int64 vdiv;\\r\\n        TypesV1.Point2D[MAX_POLYGONS] points;\\r\\n        uint32 pointCount;\\r\\n        int64 x1;\\r\\n        int64 y1;\\r\\n        int64 x2;\\r\\n        int64 y2;\\r\\n    }\\r\\n\\r\\n    struct RPoly {\\r\\n        uint32 count;\\r\\n        TypesV1.Point2D[MAX_POLYGONS] points;\\r\\n    }\\r\\n\\r\\n    function getParameters(RandomV1.PRNG memory prng)\\r\\n        external\\r\\n        pure\\r\\n        returns (WatercolorParameters memory watercolors)\\r\\n    {\\r\\n        uint8 stackCount = uint8(uint32(RandomV1.next(prng, 2, 5)));\\r\\n        watercolors.stackCount = stackCount;\\r\\n\\r\\n        watercolors.palette[0] = 0xFF0088DC;\\r\\n        watercolors.palette[1] = 0xFFB31942;\\r\\n        watercolors.palette[2] = 0xFFEB618F;\\r\\n        watercolors.palette[3] = 0xFF6A0F8E;\\r\\n        watercolors.palette[4] = 0xFF4FBF26;\\r\\n        watercolors.palette[5] = 0xFF6F4E37;\\r\\n        watercolors.palette[6] = 0xFFFF9966;\\r\\n        watercolors.palette[7] = 0xFFBED9DB;\\r\\n        watercolors.palette[8] = 0xFF998E80;\\r\\n        watercolors.palette[9] = 0xFFFFB884;\\r\\n        watercolors.palette[10] = 0xFF2E4347;\\r\\n        watercolors.palette[11] = 0xFF0A837F;\\r\\n        watercolors.palette[12] = 0xFF076461;\\r\\n        watercolors.palette[13] = 0xFF394240;\\r\\n        watercolors.palette[14] = 0xFFFAF4B1;   \\r\\n        watercolors.palette[15] = 0xFFFFFFFF;   \\r\\n\\r\\n        for (uint8 i = 0; i \\u003c watercolors.stackCount; i++) {\\r\\n            RandomV1.next(prng);\\r\\n            RandomV1.next(prng);\\r\\n\\r\\n            int32 stackColorIndex = RandomV1.next(prng, 16);\\r\\n            uint32 stackColor = watercolors.palette[uint32(stackColorIndex)];\\r\\n            stackColor = GraphicsV1.setOpacity(stackColor, 4);\\r\\n            watercolors.stackColors[i] = stackColor;\\r\\n\\r\\n            int64 x = RandomV1.next(prng, 0, 1024 /* width */) * Fix64V1.ONE;\\r\\n            int64 y = RandomV1.next(prng, 0, 1024 /* height */) * Fix64V1.ONE;\\r\\n            watercolors.r[i] = RandomV1.next(prng, 341 /* width / 3 */, 1024 /* width */) * Fix64V1.ONE;\\r\\n\\r\\n            (TypesV1.Point2D[MAX_POLYGONS] memory basePoly, uint32 basePolyCount)\\r\\n             = createBasePoly(\\r\\n                CreateBasePoly(x, y, watercolors.r[i]),                \\r\\n                prng\\r\\n            );\\r\\n\\r\\n            watercolors.basePoly[i] = basePoly;\\r\\n            watercolors.basePolyCount[i] = basePolyCount;            \\r\\n        }\\r\\n\\r\\n        watercolors.prng = prng;\\r\\n    }\\r\\n\\r\\n    function buildStackList(RandomV1.PRNG memory prng, WatercolorParameters memory p)\\r\\n    external pure returns(StackList memory stackList) {\\r\\n        require(p.stackCount \\u003e 0 \\u0026\\u0026 p.stackCount \\u003c 5, \\\"invalid stack count\\\");\\r\\n\\r\\n        for (uint8 i = 0; i \\u003c p.stackCount; i++) {\\r\\n            \\r\\n            (TypesV1.Point2D[MAX_POLYGONS] memory stack, uint32 vertexCount)\\r\\n             = createPolyStack(CreatePolyStack(p.r[i],\\r\\n                p.basePoly[i],\\r\\n                p.basePolyCount[i]),\\r\\n                prng\\r\\n            );\\r\\n            \\r\\n            if(i == 0) {\\r\\n                stackList.stack1 = stack;\\r\\n                stackList.stack1Count = vertexCount;\\r\\n            } else if (i == 1) {\\r\\n                stackList.stack2 = stack;\\r\\n                stackList.stack2Count = vertexCount;\\r\\n            } else if (i == 2) {\\r\\n                stackList.stack3 = stack;    \\r\\n                stackList.stack3Count = vertexCount;\\r\\n            } else if (i == 3) {\\r\\n                stackList.stack4 = stack;    \\r\\n                stackList.stack4Count = vertexCount;\\r\\n            }\\r\\n        }        \\r\\n\\r\\n        stackList.prng = prng;\\r\\n    }\\r\\n\\r\\n    function createPolyStack(\\r\\n        CreatePolyStack memory f,        \\r\\n        RandomV1.PRNG memory prng\\r\\n    ) private pure returns (\\r\\n        TypesV1.Point2D[MAX_POLYGONS] memory stack,\\r\\n        uint32 vertexCount) {\\r\\n        \\r\\n        int32 variance = RandomV1.next(\\r\\n            prng,\\r\\n            int32(Fix64V1.div(f.r, 10 * Fix64V1.ONE) \\u003e\\u003e 32),\\r\\n            int32(Fix64V1.div(f.r, 4 * Fix64V1.ONE) \\u003e\\u003e 32)\\r\\n        );            \\r\\n\\r\\n        (TypesV1.Point2D[MAX_POLYGONS] memory poly, uint32 polyCount) = deform(\\r\\n            prng,\\r\\n            f.basePoly,\\r\\n            f.basePolyCount,\\r\\n            5,                  // depth\\r\\n            variance,           // variance\\r\\n            4 * Fix64V1.ONE     // vdiv\\r\\n        );\\r\\n\\r\\n        require(polyCount == MAX_POLYGONS, \\\"invalid algorithm\\\");\\r\\n        stack = poly;\\r\\n        vertexCount = polyCount;\\r\\n    }    \\r\\n\\r\\n    function createBasePoly(CreateBasePoly memory f, RandomV1.PRNG memory prng) private pure returns (TypesV1.Point2D[MAX_POLYGONS] memory stack,\\r\\n        uint32 vertexCount) {\\r\\n        RPoly memory rPoly = rpoly(f);        \\r\\n        require(rPoly.count == 10, \\\"invalid algorithm\\\");\\r\\n        \\r\\n        (TypesV1.Point2D[MAX_POLYGONS] memory basePoly, uint32 basePolyCount) = deform(prng, rPoly.points, rPoly.count, 5, 15, 2 * Fix64V1.ONE);\\r\\n        require(basePolyCount == 640, \\\"invalid algorithm\\\");\\r\\n\\r\\n        return (basePoly, basePolyCount);\\r\\n    }\\r\\n\\r\\n    function rpoly(CreateBasePoly memory f)\\r\\n        private\\r\\n        pure\\r\\n        returns (RPoly memory _rpoly)\\r\\n    {\\r\\n        int64 angle = Fix64V1.div(\\r\\n            Fix64V1.TWO_PI,\\r\\n            int8(NUM_SIDES) * Fix64V1.ONE\\r\\n        );\\r\\n\\r\\n        for (int64 a = 0; a \\u003c Fix64V1.TWO_PI; a += angle) {\\r\\n            int64 sx = Fix64V1.add(f.x, Fix64V1.mul(Trig256.cos(a), f.r));\\r\\n            int64 sy = Fix64V1.add(f.y, Fix64V1.mul(Trig256.sin(a), f.r));\\r\\n            _rpoly.points[_rpoly.count++] = TypesV1.Point2D(int32(sx \\u003e\\u003e 32), int32(sy \\u003e\\u003e 32));\\r\\n        }\\r\\n    }    \\r\\n\\r\\n    function deform(\\r\\n        RandomV1.PRNG memory prng,\\r\\n        TypesV1.Point2D[MAX_POLYGONS] memory points,\\r\\n        uint32 pointCount,\\r\\n        int32 depth,\\r\\n        int32 variance,\\r\\n        int64 vdiv\\r\\n    ) private pure returns(TypesV1.Point2D[MAX_POLYGONS] memory newPoints, uint32 newPointCount) {\\r\\n\\r\\n        if (pointCount \\u003c 2) {\\r\\n            return (newPoints, 0);\\r\\n        }\\r\\n\\r\\n        newPointCount = 0;\\r\\n        for (uint32 i = 0; i \\u003c pointCount; i++) {\\r\\n\\r\\n            int32 sx1 = int32(points[i].x);\\r\\n            int32 sy1 = int32(points[i].y);\\r\\n            int32 sx2 = int32(points[(i + 1) % pointCount].x);\\r\\n            int32 sy2 = int32(points[(i + 1) % pointCount].y);\\r\\n\\r\\n            newPoints[newPointCount++] = TypesV1.Point2D(sx1, sy1);\\r\\n\\r\\n            newPointCount = subdivide(\\r\\n                Subdivide(depth, variance * Fix64V1.ONE, vdiv, newPoints, newPointCount, sx1 * Fix64V1.ONE,\\r\\n                sy1 * Fix64V1.ONE,\\r\\n                sx2 * Fix64V1.ONE,\\r\\n                sy2 * Fix64V1.ONE),\\r\\n                prng                \\r\\n            );\\r\\n        }\\r\\n\\r\\n        return (newPoints, newPointCount);\\r\\n    }\\r\\n\\r\\n    function subdivide(\\r\\n        Subdivide memory f,\\r\\n        RandomV1.PRNG memory prng\\r\\n    ) private pure returns (uint32) {\\r\\n        while (true) {\\r\\n            if (f.depth \\u003e= 0) {\\r\\n\\r\\n                (int64 nx) = subdivide_midpoint(f, prng, f.x1, f.x2);\\r\\n                (int64 ny) = subdivide_midpoint(f, prng, f.y1, f.y2);\\r\\n\\r\\n                int32 vardiv2 = int32(Fix64V1.div(f.variance, f.vdiv) \\u003e\\u003e 32);\\r\\n                int64 variance2 = RandomV1.next(prng, vardiv2) * Fix64V1.ONE;\\r\\n                \\r\\n                f.pointCount = subdivide(Subdivide(                    \\r\\n                    f.depth - 1,\\r\\n                    variance2,\\r\\n                    f.vdiv,\\r\\n                    f.points,\\r\\n                    f.pointCount,\\r\\n                    f.x1, f.y1, nx, ny\\r\\n                ), prng);\\r\\n                \\r\\n                uint32 pi = f.pointCount++;\\r\\n                f.points[pi] = TypesV1.Point2D(int32(nx \\u003e\\u003e 32), int32(ny \\u003e\\u003e 32));\\r\\n                f.x1 = nx;\\r\\n                f.y1 = ny;\\r\\n                f.depth = f.depth - 1;\\r\\n\\r\\n                int32 vardiv = int32(Fix64V1.div(f.variance, f.vdiv) \\u003e\\u003e 32);\\r\\n                f.variance = RandomV1.next(prng, vardiv) * Fix64V1.ONE;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        return f.pointCount;\\r\\n    }\\r\\n\\r\\n    function subdivide_midpoint(\\r\\n        Subdivide memory f,\\r\\n        RandomV1.PRNG memory prng,\\r\\n        int64 t1,\\r\\n        int64 t2\\r\\n    ) private pure returns (int64) {\\r\\n        int64 mid = Fix64V1.div(Fix64V1.add(t1, t2), Fix64V1.TWO);\\r\\n        int64 g = RandomV1.nextGaussian(prng);\\r\\n        int64 n = Fix64V1.add(mid, Fix64V1.mul(g, f.variance));\\r\\n        return n;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[],\"name\":\"MAX_POLYGONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32[16384]\",\"name\":\"result\",\"type\":\"uint32[16384]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"stackCount\",\"type\":\"uint8\"},{\"internalType\":\"uint32[4]\",\"name\":\"stackColors\",\"type\":\"uint32[4]\"},{\"internalType\":\"int64[4]\",\"name\":\"r\",\"type\":\"int64[4]\"},{\"internalType\":\"uint32[16]\",\"name\":\"palette\",\"type\":\"uint32[16]\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct TypesV1.Point2D[40960][4]\",\"name\":\"basePoly\",\"type\":\"tuple[40960][4]\"},{\"internalType\":\"uint32[4]\",\"name\":\"basePolyCount\",\"type\":\"uint32[4]\"},{\"components\":[{\"internalType\":\"int32[56]\",\"name\":\"_seedArray\",\"type\":\"int32[56]\"},{\"internalType\":\"int32\",\"name\":\"_inext\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"_inextp\",\"type\":\"int32\"}],\"internalType\":\"struct RandomV1.PRNG\",\"name\":\"prng\",\"type\":\"tuple\"}],\"internalType\":\"struct WatercolorLayer.WatercolorParameters\",\"name\":\"p\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct TypesV1.Point2D[40960]\",\"name\":\"stack1\",\"type\":\"tuple[40960]\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct TypesV1.Point2D[40960]\",\"name\":\"stack2\",\"type\":\"tuple[40960]\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct TypesV1.Point2D[40960]\",\"name\":\"stack3\",\"type\":\"tuple[40960]\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct TypesV1.Point2D[40960]\",\"name\":\"stack4\",\"type\":\"tuple[40960]\"},{\"internalType\":\"uint32\",\"name\":\"stack1Count\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stack2Count\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stack3Count\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stack4Count\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"int32[56]\",\"name\":\"_seedArray\",\"type\":\"int32[56]\"},{\"internalType\":\"int32\",\"name\":\"_inext\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"_inextp\",\"type\":\"int32\"}],\"internalType\":\"struct RandomV1.PRNG\",\"name\":\"prng\",\"type\":\"tuple\"}],\"internalType\":\"struct WatercolorLayer.StackList\",\"name\":\"stackList\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"width\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"height\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"chunkWidth\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"chunkHeight\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"startX\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startY\",\"type\":\"uint32\"}],\"internalType\":\"struct TypesV1.Chunk2D\",\"name\":\"chunk\",\"type\":\"tuple\"}],\"internalType\":\"struct WatercolorDraw.Draw\",\"name\":\"f\",\"type\":\"tuple\"}],\"name\":\"draw\",\"outputs\":[{\"internalType\":\"uint32[16384]\",\"name\":\"buffer\",\"type\":\"uint32[16384]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"WatercolorDraw","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d43f658a795a0a10d4867848feb7457820fc61803b4256f69a19edd544d42b8e"}]}