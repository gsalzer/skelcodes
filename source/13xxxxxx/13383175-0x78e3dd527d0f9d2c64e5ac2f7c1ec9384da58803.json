{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.8.0;\r\n\r\n// SPDX-License-Identifier: BSD-3-Clause\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint(_at(set._inner, index))));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor()  {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ninterface Token {\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n}\r\n\r\ncontract BSB_StakingSoftStakers is Ownable {\r\n    using SafeMath for uint;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    \r\n    event RewardsTransferred(address holder, uint amount);\r\n    event RewardsRestaked(address holder, uint amount);\r\n    \r\n    /*\r\n    * @dev Token contract address\r\n    */\r\n    address public constant tokenDepositAddress = 0xA478A13242b64629bff309125770B69f75Bd77cb;\r\n    \r\n    /*\r\n    * @dev Reward rate 260.00% per year\r\n    */\r\n    uint public rewardRate = 26000;\r\n    uint public constant rewardInterval = 365 days;\r\n    \r\n    /*\r\n    * @dev Staking fee 1 percent\r\n    */\r\n    uint public constant stakingFeeRate = 100;\r\n    \r\n    /*\r\n    * @dev Unstaking fee 0.50 percent\r\n    */\r\n    uint public constant unstakingFeeRate = 50;\r\n    \r\n    /*\r\n    * @dev Unstaking possible after 30 days\r\n    */\r\n    uint public constant unstakeTime = 30 days;\r\n    \r\n    /*\r\n    * @dev Claiming possible every 10 days\r\n    */\r\n    uint public constant claimTime = 10 days;\r\n    \r\n    /*\r\n    * @dev Pool size \r\n    */\r\n    uint public constant maxPoolSize = 10000000000000000000000;\r\n    uint public availablePoolSize = 10000000000000000000000;\r\n    \r\n    /*\r\n    * @dev Total rewards\r\n    */\r\n    uint public constant totalRewards = 50000000000000000000000; \r\n    \r\n    uint public totalClaimedRewards = 0;\r\n    uint public totalDeposited = 0; // usar esta variable que no se usa!\r\n    bool public ended ;\r\n    \r\n    EnumerableSet.AddressSet private holders;\r\n    \r\n    mapping (address => uint) public depositedTokens;\r\n    mapping (address => uint) public maxDepositedTokens;\r\n    mapping (address => uint) public stakingTime; //used for the unstaking locktime\r\n    mapping (address => uint) public firstTime; //used for the APY boost\r\n    mapping (address => uint) public lastClaimedTime; //used for the claiming locktime\r\n    mapping (address => uint) public progressiveTime; //used for the claiming locktime\r\n    mapping (address => uint) public totalEarnedTokens;\r\n    \r\n    mapping (address => uint) public rewardEnded;\r\n    \r\n    /*\r\n    * @dev Progressive Unstaking\r\n    */\r\n    mapping (address => uint) public alreadyProgUnstaked; \r\n    mapping (address => uint) public amountPerInterval;\r\n    uint public number_intervals = 3;\r\n    uint public duration_interval = 20 days;\r\n    \r\n    /*\r\n    * @dev Incentive For Not Unstaking\r\n    */\r\n    uint extraAPY = 10400; // 2% extra weekly\r\n    \r\n    /*\r\n    * @dev Smart Capped Claiming\r\n    */\r\n    uint percent_claim = 1; // 20% of weekly rewards earned\r\n    mapping (address => uint) public unclaimed;\r\n    \r\n    uint public endTime;\r\n    \r\n    /* FUNCTIONS */\r\n    \r\n    /*\r\n    * @dev End the staking pool\r\n    */\r\n    function end() public onlyOwner returns (bool){\r\n        require(!ended, \"Staking already ended\");\r\n        address _aux;\r\n        \r\n        for(uint i = 0; i < holders.length(); i = i.add(1)){\r\n            _aux = holders.at(i);\r\n            rewardEnded[_aux] = getPendingRewards(_aux);\r\n            unclaimed[_aux] = 0;\r\n            stakingTime[_aux] = block.timestamp;\r\n            progressiveTime[_aux] = block.timestamp;\r\n            alreadyProgUnstaked[_aux] = 0;\r\n            amountPerInterval[_aux] = depositedTokens[_aux].div(number_intervals);\r\n        }\r\n        \r\n        ended = true;\r\n        endTime = block.timestamp;\r\n        return true;\r\n    }\r\n    \r\n    function getRewardsLeft() public view returns (uint){\r\n       \r\n        uint _res;\r\n        if(ended){\r\n            _res = 0;\r\n        }else{\r\n            uint totalPending;\r\n            for(uint i = 0; i < holders.length(); i = i.add(1)){\r\n                totalPending = totalPending.add(getPendingRewards(holders.at(i)));\r\n            }\r\n            if(totalRewards > totalClaimedRewards.add(totalPending)){\r\n                _res = totalRewards.sub(totalClaimedRewards).sub(totalPending);\r\n            }else{\r\n                _res = 0;\r\n            }\r\n            \r\n        }\r\n        \r\n        return _res;\r\n    }\r\n    \r\n    function updateAccount(address account, bool _restake, bool _withdraw) private returns (bool){\r\n        uint pendingDivs = getPendingRewards(account);\r\n        uint toSend = pendingDivs;\r\n        \r\n        if(depositedTokens[account].mul(percent_claim).div(100) < pendingDivs){\r\n            toSend = depositedTokens[account].mul(percent_claim).div(100);\r\n        }\r\n        \r\n        if (pendingDivs > 0) {\r\n            if(ended){ // claim o withdraw cuando ha terminado\r\n                if(!_withdraw){\r\n                     \r\n                    if(depositedTokens[account] == 0){\r\n                        \r\n                        if( maxDepositedTokens[account].mul(percent_claim).div(100) > pendingDivs ){\r\n                            toSend = pendingDivs;\r\n                        }else{\r\n                            toSend = maxDepositedTokens[account].mul(percent_claim).div(100);\r\n                        }\r\n                    }\r\n                     rewardEnded[account] = rewardEnded[account].sub(toSend);\r\n                     require(Token(tokenDepositAddress).transfer(account, toSend), \"Could not transfer tokens.\");\r\n                     totalEarnedTokens[account] = totalEarnedTokens[account].add(toSend);\r\n                     totalClaimedRewards = totalClaimedRewards.add(toSend);\r\n                }\r\n               \r\n            }else{\r\n                \r\n                if(_restake){ // deposit\r\n                    require(pendingDivs <= availablePoolSize, \"No spot available\");\r\n                    depositedTokens[account] = depositedTokens[account].add(pendingDivs);\r\n                    \r\n                    unclaimed[account] = 0;\r\n                    \r\n                    if(depositedTokens[account] > maxDepositedTokens[account]){\r\n                        maxDepositedTokens[account] = depositedTokens[account];\r\n                    } \r\n                    availablePoolSize = availablePoolSize.sub(pendingDivs);\r\n                    totalDeposited = totalDeposited.add(pendingDivs);\r\n                    totalEarnedTokens[account] = totalEarnedTokens[account].add(pendingDivs);\r\n                    totalClaimedRewards = totalClaimedRewards.add(pendingDivs);\r\n                }else if(_withdraw){ // withdraw\r\n                    unclaimed[account] = pendingDivs;\r\n                // claim\r\n                }else{ // does not have deposited tokens\r\n                    if(depositedTokens[account] == 0){\r\n                        \r\n                        if( maxDepositedTokens[account].mul(percent_claim).div(100) > pendingDivs ){\r\n                            toSend = pendingDivs;\r\n                        }else{\r\n                            toSend = maxDepositedTokens[account].mul(percent_claim).div(100);\r\n                        }\r\n                    }\r\n                    uint toUnclaimed = 0;\r\n                    uint subUnclaimed = 0;\r\n                    uint pendingWithoutUnclaimed = getOnlyPendingRewards(account);\r\n                    if(toSend > pendingWithoutUnclaimed){\r\n                        subUnclaimed = toSend.sub(pendingWithoutUnclaimed);\r\n                        toUnclaimed = 0;\r\n                    }else{\r\n                        toUnclaimed = pendingWithoutUnclaimed.sub(toSend);\r\n                        subUnclaimed = 0;\r\n                    }\r\n                \r\n                    unclaimed[account] = unclaimed[account].add(toUnclaimed).sub(subUnclaimed);\r\n                    require(Token(tokenDepositAddress).transfer(account, toSend), \"Could not transfer tokens.\");\r\n                    totalEarnedTokens[account] = totalEarnedTokens[account].add(toSend);\r\n                    totalClaimedRewards = totalClaimedRewards.add(toSend);\r\n                }\r\n            }    \r\n        }\r\n        lastClaimedTime[account] = block.timestamp;\r\n        return true;\r\n    }\r\n    \r\n    function getAPY(address _staker) public view returns(uint){\r\n        uint apy = rewardRate;\r\n        if(block.timestamp.sub(firstTime[_staker]) > unstakeTime && alreadyProgUnstaked[_staker] == 0 && !ended){\r\n            apy = apy.add(extraAPY);\r\n        }\r\n        return apy;\r\n    }\r\n    \r\n    function getPendingRewards(address _holder) public view returns (uint) { //getPendingRewards\r\n        if (!holders.contains(_holder)) return 0;\r\n        if (depositedTokens[_holder] == 0 && unclaimed[_holder] == 0 && !ended) return 0;\r\n        uint pendingDivs;\r\n        if(!ended){\r\n             uint timeDiff = block.timestamp.sub(lastClaimedTime[_holder]);\r\n             uint stakedAmount = depositedTokens[_holder];\r\n             \r\n             // Incentive For Not Unstaking\r\n             uint apy = getAPY(_holder);\r\n        \r\n             pendingDivs = stakedAmount\r\n                                .mul(apy) \r\n                                .mul(timeDiff)\r\n                                .div(rewardInterval)\r\n                                .div(1e4);\r\n                                \r\n             pendingDivs = pendingDivs.add(unclaimed[_holder]);\r\n            \r\n        }else{\r\n            pendingDivs = rewardEnded[_holder];\r\n        }\r\n       \r\n        return pendingDivs;\r\n    }\r\n    \r\n    function getOnlyPendingRewards(address _holder) internal view returns (uint) { // getPendingRewards without \"Unclaimed\"\r\n        if (!holders.contains(_holder)) return 0;\r\n        if (depositedTokens[_holder] == 0 || ended) return 0;\r\n        uint pendingDivs;\r\n        if(!ended){\r\n             uint timeDiff = block.timestamp.sub(lastClaimedTime[_holder]);\r\n             uint stakedAmount = depositedTokens[_holder];\r\n             \r\n             // Incentive For Not Unstaking\r\n             uint apy = getAPY(_holder);\r\n        \r\n             pendingDivs = stakedAmount\r\n                                .mul(apy) \r\n                                .mul(timeDiff)\r\n                                .div(rewardInterval)\r\n                                .div(1e4);\r\n            \r\n        }else{\r\n            pendingDivs = 0;\r\n        }\r\n       \r\n        return pendingDivs;\r\n    }\r\n    \r\n    function getNumberOfHolders() public view returns (uint) {\r\n        return holders.length();\r\n    }\r\n    \r\n    function deposit(uint amountToStake) public returns (bool){\r\n        require(!ended, \"Staking has ended\");\r\n        require(getRewardsLeft() > 0, \"No rewards left\");\r\n        require(amountToStake > 0, \"Cannot deposit 0 Tokens\");\r\n       \r\n        require(Token(tokenDepositAddress).transferFrom(msg.sender, address(this), amountToStake), \"Insufficient Token Allowance\");\r\n        \r\n        \r\n        require(updateAccount(msg.sender, true, false), \"Error updating account\");\r\n        \r\n        uint fee = amountToStake.mul(stakingFeeRate).div(1e4);\r\n        uint amountAfterFee = amountToStake.sub(fee);\r\n        require(amountAfterFee <= availablePoolSize, \"No space available\");\r\n        require(Token(tokenDepositAddress).transfer(owner, fee), \"Could not transfer deposit fee.\");\r\n        \r\n        depositedTokens[msg.sender] = depositedTokens[msg.sender].add(amountAfterFee);\r\n        if(depositedTokens[msg.sender] > maxDepositedTokens[msg.sender]){\r\n            maxDepositedTokens[msg.sender] = depositedTokens[msg.sender];\r\n        } \r\n        availablePoolSize = availablePoolSize.sub(amountAfterFee);\r\n        totalDeposited = totalDeposited.add(amountAfterFee);\r\n        \r\n        if (!holders.contains(msg.sender)) {\r\n            holders.add(msg.sender);\r\n            firstTime[msg.sender] = block.timestamp;\r\n            \r\n        }\r\n        \r\n        // Reset the Progressive Unstaking\r\n        amountPerInterval[msg.sender] = 0;\r\n        if(alreadyProgUnstaked[msg.sender] > 0){\r\n            firstTime[msg.sender] = block.timestamp;\r\n        } \r\n        \r\n        alreadyProgUnstaked[msg.sender] = 0;\r\n        \r\n        stakingTime[msg.sender] = block.timestamp;\r\n        return true;\r\n    }\r\n    \r\n    /*\r\n    * @dev Max amount withdrawable on basis on time\r\n    */\r\n    function getMaxAmountWithdrawable(address _staker) public view returns(uint){\r\n        uint _res = 0;\r\n        if(block.timestamp.sub(stakingTime[msg.sender]) < unstakeTime && !ended && alreadyProgUnstaked[_staker] == 0){\r\n            _res = 0;\r\n        }else if(alreadyProgUnstaked[_staker] == 0 && !ended){\r\n            \r\n            if(block.timestamp.sub(stakingTime[msg.sender]) > unstakeTime){\r\n                _res = depositedTokens[_staker].div(number_intervals);\r\n            }\r\n          \r\n        }else{\r\n            uint _time = progressiveTime[_staker];\r\n            \r\n            if(block.timestamp < _time.add(duration_interval)){\r\n                _res = 0;\r\n            }else{\r\n               \r\n                \r\n                uint _numIntervals = (block.timestamp.sub(_time)).div(duration_interval);\r\n                \r\n                if(_numIntervals == 0){\r\n                    return 0;\r\n                }\r\n                if(!ended){\r\n                    _numIntervals = _numIntervals.add(1);\r\n                }\r\n                \r\n                \r\n                if(_numIntervals > number_intervals){\r\n                    _numIntervals = number_intervals;\r\n                }\r\n                \r\n                if(_numIntervals.mul(amountPerInterval[_staker]) > alreadyProgUnstaked[_staker]){\r\n                    _res = _numIntervals.mul(amountPerInterval[_staker]).sub(alreadyProgUnstaked[_staker]);\r\n                }else{\r\n                    _res = 0;\r\n                }\r\n            }\r\n            \r\n            \r\n        }\r\n\r\n        return _res;\r\n    }\r\n    \r\n    /*\r\n    * @dev Progressive Unstaking (Second, third, fourth... Progressive withdraws)\r\n    */\r\n    function withdraw2(uint amountToWithdraw) public returns (bool){\r\n        require(holders.contains(msg.sender), \"Not a staker\");\r\n        require(amountToWithdraw <= getMaxAmountWithdrawable(msg.sender), \"Maximum reached\");\r\n        require(alreadyProgUnstaked[msg.sender] > 0 || ended, \"Use withdraw first\");\r\n        \r\n        alreadyProgUnstaked[msg.sender] = alreadyProgUnstaked[msg.sender].add(amountToWithdraw);\r\n        \r\n        uint fee = amountToWithdraw.mul(unstakingFeeRate).div(1e4);\r\n        uint amountAfterFee = amountToWithdraw.sub(fee);\r\n        \r\n        updateAccount(msg.sender, false, true);\r\n        \r\n        require(Token(tokenDepositAddress).transfer(owner, fee), \"Could not transfer withdraw fee.\");\r\n        require(Token(tokenDepositAddress).transfer(msg.sender, amountAfterFee), \"Could not transfer tokens.\");\r\n        \r\n        depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(amountToWithdraw);\r\n        availablePoolSize = availablePoolSize.add(amountToWithdraw);\r\n        totalDeposited = totalDeposited.sub(amountToWithdraw);\r\n        \r\n        if (holders.contains(msg.sender) && depositedTokens[msg.sender] == 0 && getPendingRewards(msg.sender) == 0) {\r\n            holders.remove(msg.sender);\r\n            firstTime[msg.sender] = 0;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    /*\r\n    * @dev Progressive Unstaking (First  withdraw)\r\n    */\r\n    function withdraw(uint amountToWithdraw) public returns (bool){\r\n        require(holders.contains(msg.sender), \"Not a staker\");\r\n        require(alreadyProgUnstaked[msg.sender] == 0 && !ended , \"Use withdraw2 function\");\r\n        amountPerInterval[msg.sender] = depositedTokens[msg.sender].div(number_intervals);\r\n        require(depositedTokens[msg.sender].div(number_intervals) >= amountToWithdraw, \"Invalid amount to withdraw\");\r\n        alreadyProgUnstaked[msg.sender] = amountToWithdraw;\r\n        require(block.timestamp.sub(stakingTime[msg.sender]) > unstakeTime || ended, \"You recently staked, please wait before withdrawing.\");\r\n        \r\n        \r\n        \r\n        updateAccount(msg.sender, false, true);\r\n        \r\n        uint fee = amountToWithdraw.mul(unstakingFeeRate).div(1e4);\r\n        uint amountAfterFee = amountToWithdraw.sub(fee);\r\n        \r\n        require(Token(tokenDepositAddress).transfer(owner, fee), \"Could not transfer withdraw fee.\");\r\n        require(Token(tokenDepositAddress).transfer(msg.sender, amountAfterFee), \"Could not transfer tokens.\");\r\n        \r\n        depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(amountToWithdraw);\r\n        availablePoolSize = availablePoolSize.add(amountToWithdraw);\r\n        totalDeposited = totalDeposited.sub(amountToWithdraw);\r\n        \r\n        progressiveTime[msg.sender] = block.timestamp;\r\n    \r\n        return true;\r\n    }\r\n    \r\n    function getTimeToWithdraw(address _staker) public view returns (uint){\r\n        if(getMaxAmountWithdrawable(_staker) != 0) return 0;\r\n        \r\n        uint _res = 0;\r\n        uint _time = stakingTime[_staker];\r\n        if(alreadyProgUnstaked[_staker] == 0 && !ended ){\r\n            \r\n            if(block.timestamp <= _time.add(unstakeTime)){\r\n                _res = _time.add(unstakeTime).sub(block.timestamp);\r\n            }\r\n            \r\n        }else{\r\n            _time = progressiveTime[_staker];\r\n            \r\n            for(uint i = 1; i <= number_intervals; i = i.add(1)){\r\n                if(block.timestamp < _time.add(duration_interval.mul(i))){\r\n                    _res = _time.add(duration_interval.mul(i)).sub(block.timestamp);\r\n                    break;\r\n                }\r\n            }\r\n            \r\n        }\r\n        return _res;\r\n    }\r\n    \r\n    function getTimeToClaim(address _staker) public view returns (uint){\r\n        uint _res = 0;\r\n        \r\n        if(lastClaimedTime[_staker].add(claimTime) > block.timestamp){\r\n            _res = lastClaimedTime[_staker].add(claimTime).sub(block.timestamp);\r\n        }\r\n        \r\n        return _res;\r\n    }\r\n    \r\n    function claimDivs() public  returns (bool){\r\n        require(holders.contains(msg.sender), \"Not a staker\");\r\n        require(block.timestamp.sub(lastClaimedTime[msg.sender]) > claimTime, \"Not yet\");\r\n        updateAccount(msg.sender, false, false);\r\n        return true;\r\n    }\r\n    \r\n    function getStakersList(uint startIndex, uint endIndex) public view returns (address[] memory stakers, uint[] memory stakingTimestamps,  uint[] memory lastClaimedTimeStamps, uint[] memory stakedTokens) {\r\n        require (startIndex < endIndex);\r\n        \r\n        uint length = endIndex.sub(startIndex);\r\n        address[] memory _stakers = new address[](length);\r\n        uint[] memory _stakingTimestamps = new uint[](length);\r\n        uint[] memory _lastClaimedTimeStamps = new uint[](length);\r\n        uint[] memory _stakedTokens = new uint[](length);\r\n        \r\n        for (uint i = startIndex; i < endIndex; i = i.add(1)) {\r\n            address staker = holders.at(i);\r\n            uint listIndex = i.sub(startIndex);\r\n            _stakers[listIndex] = staker;\r\n            _stakingTimestamps[listIndex] = stakingTime[staker];\r\n            _lastClaimedTimeStamps[listIndex] = lastClaimedTime[staker];\r\n            _stakedTokens[listIndex] = depositedTokens[staker];\r\n        }\r\n        \r\n        return (_stakers, _stakingTimestamps, _lastClaimedTimeStamps, _stakedTokens);\r\n    }\r\n    \r\n    /*\r\n    * @dev function to allow admin to claim *other* ERC20 tokens sent to this contract (by mistake)\r\n    */\r\n    function transferAnyERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner  returns (bool){\r\n        require (_tokenAddr != tokenDepositAddress, \"Cannot Transfer Out this token\");\r\n        Token(_tokenAddr).transfer(_to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function getClaimableAmount(address account) public view returns (uint){\r\n        uint pendingDivs = getPendingRewards(account);\r\n        uint toSend = pendingDivs;\r\n        \r\n        if(depositedTokens[account].mul(percent_claim).div(100) < pendingDivs){\r\n            toSend = depositedTokens[account].mul(percent_claim).div(100);\r\n        }\r\n        \r\n        if (pendingDivs > 0) {\r\n            if(ended){ // claim o withdraw cuando ha terminado\r\n                    if(depositedTokens[account] == 0){\r\n                        \r\n                        if( maxDepositedTokens[account].mul(percent_claim).div(100) > pendingDivs ){\r\n                            toSend = pendingDivs;\r\n                        }else{\r\n                            toSend = maxDepositedTokens[account].mul(percent_claim).div(100);\r\n                        }\r\n                    }\r\n                \r\n            }else{\r\n                if(depositedTokens[account] == 0){\r\n                        \r\n                    if( maxDepositedTokens[account].mul(percent_claim).div(100) > pendingDivs ){\r\n                        toSend = pendingDivs;\r\n                    }else{\r\n                        toSend = maxDepositedTokens[account].mul(percent_claim).div(100);\r\n                    }\r\n                }\r\n            }    \r\n        }\r\n        return toSend;\r\n    }\r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsRestaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"alreadyProgUnstaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountPerInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availablePoolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDivs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToStake\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration_interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"firstTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getMaxAmountWithdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getStakersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakingTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastClaimedTimeStamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakedTokens\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getTimeToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getTimeToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDepositedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPoolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number_intervals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"progressiveTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardEnded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDepositAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalEarnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakingFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdraw2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BSB_StakingSoftStakers","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"ipfs://da519b4ea63d5036e5980d69dae3e015e46b21150075bb1d9f046c3d06f17974"}]}