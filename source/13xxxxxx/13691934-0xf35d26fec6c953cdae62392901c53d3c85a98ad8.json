{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FoxGameNFTTraits.sol\": {\r\n      \"content\": \"/*\\n███████╗ ██████╗ ██╗  ██╗     ██████╗  █████╗ ███╗   ███╗███████╗\\n██╔════╝██╔═══██╗╚██╗██╔╝    ██╔════╝ ██╔══██╗████╗ ████║██╔════╝\\n█████╗  ██║   ██║ ╚███╔╝     ██║  ███╗███████║██╔████╔██║█████╗  \\n██╔══╝  ██║   ██║ ██╔██╗     ██║   ██║██╔══██║██║╚██╔╝██║██╔══╝  \\n██║     ╚██████╔╝██╔╝ ██╗    ╚██████╔╝██║  ██║██║ ╚═╝ ██║███████╗\\n╚═╝      ╚═════╝ ╚═╝  ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./IFoxGameNFTTraits.sol\\\";\\nimport \\\"./IFoxGameNFT.sol\\\";\\n\\ncontract FoxGameNFTTraits is IFoxGameNFTTraits, Ownable {\\n  using Strings for uint256; // add [uint256].toString()\\n\\n  // Struct to store each trait's data for metadata and rendering\\n  struct Trait { string name; string png; }\\n\\n  // Mapping of traits to metadata display names\\n  string[3] private _players = [ \\\"Rabbit\\\", \\\"Fox\\\", \\\"Hunter\\\" ];\\n  string[4] private _advantages = [ \\\"8\\\", \\\"7\\\", \\\"6\\\", \\\"5\\\" ];\\n\\n  // FoxGames NFT address reference\\n  IFoxGameNFT private foxNFT;\\n\\n  // Storage of each traits name and base64 PNG data [TRAIT][TRAIT VALUE]\\n  mapping(uint8 => mapping(uint8 => Trait)) public traitData;\\n\\n  constructor() {}\\n\\n  /**\\n   * Update the NFT contract address outside constructor as it would\\n   * create a cyclic dependency.\\n   */\\n  function setNFTContract(address _address) external onlyOwner {\\n    foxNFT = IFoxGameNFT(_address);\\n  }\\n\\n  /**\\n   * Upload trait art to blockchain!\\n   * @param traitTypeId trait name id (0 corresponds to \\\"fur\\\")\\n   * @param traitValueId trait value id (3 corresponds to \\\"black\\\")\\n   * @param traits array of trait [name, png] (e.g,. [bandana, {bytes}])\\n   */\\n  function uploadTraits(uint8 traitTypeId, uint8[] calldata traitValueId, string[][2] calldata traits) external onlyOwner {\\n    require(traitValueId.length == traits.length, \\\"Mismatched inputs\\\");\\n    for (uint8 i = 0; i < traits.length; i++) {\\n      traitData[traitTypeId][traitValueId[i]] = Trait(\\n        traits[i][0],\\n        traits[i][1]\\n      );\\n    }\\n  }\\n\\n  /**\\n   * generates an <image> element using base64 encoded PNGs\\n   * @param trait the trait storing the PNG data\\n   * @return the <image> element\\n   */\\n  function _drawTrait(Trait memory trait) internal pure returns (string memory) {\\n    return string(abi.encodePacked(\\n      '<image x=\\\"4\\\" y=\\\"4\\\" width=\\\"32\\\" height=\\\"32\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"data:image/png;base64,',\\n      trait.png,\\n      '\\\"/>'\\n    ));\\n  }\\n\\n  /**\\n   * Generates an entire SVG by composing multiple <image> elements of PNGs\\n   * @param t token trait struct\\n   * @return layered SVG\\n   */\\n  function _drawSVG(IFoxGameNFT.Traits memory t) internal view returns (string memory) {\\n    string memory svg;\\n    if (t.kind == IFoxGameNFT.Kind.RABBIT) {\\n      svg = string(abi.encodePacked(\\n        _drawTrait(traitData[0][t.traits[0]]), // Fur\\n        _drawTrait(traitData[1][t.traits[1]]), // Paws\\n        _drawTrait(traitData[2][t.traits[2]]), // Mouth\\n        _drawTrait(traitData[3][t.traits[3]]), // Nose\\n        _drawTrait(traitData[4][t.traits[4]]), // Eyes\\n        _drawTrait(traitData[5][t.traits[5]]), // Ears\\n        _drawTrait(traitData[6][t.traits[6]])  // Head\\n      ));\\n    } else if (t.kind == IFoxGameNFT.Kind.FOX) {\\n      svg = string(abi.encodePacked(\\n        _drawTrait(traitData[8][t.traits[0]]), // Tail\\n        _drawTrait(traitData[7][t.traits[1]]), // Fur\\n        _drawTrait(traitData[9][t.traits[2]]), // Feet\\n        _drawTrait(traitData[10][t.traits[3]]), // Neck\\n        _drawTrait(traitData[11][t.traits[4]]), // Mouth\\n        _drawTrait(traitData[12][t.traits[5]]), // Eyes\\n        _drawTrait(traitData[13][t.advantage])  // Cunning\\n      ));\\n    } else { // HUNTER\\n      svg = string(abi.encodePacked(\\n        _drawTrait(traitData[14][t.traits[0]]), // Clothes\\n        _drawTrait(traitData[15][t.traits[1]]), // Marksman\\n        _drawTrait(traitData[16][t.traits[2]]), // Neck\\n        _drawTrait(traitData[17][t.traits[3]]), // Mouth\\n        _drawTrait(traitData[18][t.traits[4]]), // Eyes\\n        _drawTrait(traitData[19][t.traits[5]]), // Hat\\n        _drawTrait(traitData[20][t.advantage])  // Marksman\\n      ));\\n    }\\n\\n    return string(abi.encodePacked(\\n      '<svg width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 40 40\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">',\\n      svg,\\n      \\\"</svg>\\\"\\n    ));\\n  }\\n\\n  /**\\n   * Generates an attribute for the attributes array in the ERC721 metadata standard\\n   * @param traitType the trait type to reference as the metadata key\\n   * @param value the token's trait associated with the key\\n   * @return a JSON dictionary for the single attribute\\n   */\\n  function _attributeForTypeAndValue(string memory traitType, string memory value) internal pure returns (string memory) {\\n    return string(abi.encodePacked(\\n      '{\\\"trait_type\\\":\\\"', traitType,\\n      '\\\",\\\"value\\\":\\\"', value,\\n      '\\\"}'\\n    ));\\n  }\\n\\n  /**\\n   * Generates an array composed of all the individual traits and values\\n   * @param tokenId the ID of the token to compose the metadata for\\n   * @return traits JSON array of all of the attributes for given token ID\\n   */\\n  function _compileAttributes(uint16 tokenId, IFoxGameNFT.Traits memory t) internal view returns (string memory traits) {\\n    if (t.kind == IFoxGameNFT.Kind.RABBIT) {\\n      traits = string(abi.encodePacked(\\n        _attributeForTypeAndValue(\\\"Fur\\\",   traitData[0][t.traits[0]].name), \\\",\\\",\\n        _attributeForTypeAndValue(\\\"Paws\\\",  traitData[1][t.traits[1]].name), \\\",\\\",\\n        _attributeForTypeAndValue(\\\"Mouth\\\", traitData[2][t.traits[2]].name), \\\",\\\",\\n        _attributeForTypeAndValue(\\\"Nose\\\",  traitData[3][t.traits[3]].name), \\\",\\\",\\n        _attributeForTypeAndValue(\\\"Eyes\\\",  traitData[4][t.traits[4]].name), \\\",\\\",\\n        _attributeForTypeAndValue(\\\"Ears\\\",  traitData[5][t.traits[5]].name), \\\",\\\",\\n        _attributeForTypeAndValue(\\\"Head\\\",  traitData[6][t.traits[6]].name), \\\",\\\"\\n      ));\\n    } else if (t.kind == IFoxGameNFT.Kind.FOX) {\\n      traits = string(abi.encodePacked(\\n        _attributeForTypeAndValue(\\\"Tail\\\",  traitData[7][t.traits[0]].name), \\\",\\\",\\n        _attributeForTypeAndValue(\\\"Fur\\\",   traitData[8][t.traits[1]].name), \\\",\\\",\\n        _attributeForTypeAndValue(\\\"Feet\\\",  traitData[9][t.traits[2]].name), \\\",\\\",\\n        _attributeForTypeAndValue(\\\"Neck\\\",  traitData[10][t.traits[3]].name), \\\",\\\",\\n        _attributeForTypeAndValue(\\\"Mouth\\\", traitData[11][t.traits[4]].name), \\\",\\\",\\n        _attributeForTypeAndValue(\\\"Eyes\\\",  traitData[12][t.traits[5]].name), \\\",\\\",\\n        _attributeForTypeAndValue(\\\"Cunning Score\\\", _advantages[t.advantage]), \\\",\\\"\\n      ));\\n    } else { // HUNTER\\n      traits = string(abi.encodePacked(\\n        _attributeForTypeAndValue(\\\"Clothes\\\",  traitData[13][t.traits[0]].name), \\\",\\\",\\n        _attributeForTypeAndValue(\\\"Marksman\\\", traitData[14][t.traits[1]].name), \\\",\\\",\\n        _attributeForTypeAndValue(\\\"Neck\\\",     traitData[15][t.traits[2]].name), \\\",\\\",\\n        _attributeForTypeAndValue(\\\"Mouth\\\",    traitData[16][t.traits[3]].name), \\\",\\\",\\n        _attributeForTypeAndValue(\\\"Eyes\\\",     traitData[17][t.traits[4]].name), \\\",\\\",\\n        _attributeForTypeAndValue(\\\"Hat\\\",      traitData[18][t.traits[5]].name), \\\",\\\",\\n        _attributeForTypeAndValue(\\\"Marksman Score\\\", _advantages[t.advantage]), \\\",\\\"\\n      ));\\n    }\\n    return string(abi.encodePacked(\\n      '[',\\n        traits,\\n        '{\\\"trait_type\\\":\\\"Generation\\\",\\\"value\\\":', tokenId <= foxNFT.getMaxGEN0Players() ? '\\\"GEN 0\\\"' : '\\\"GEN 1\\\"',\\n        '},{\\\"trait_type\\\":\\\"Type\\\",\\\"value\\\":', _players[uint8(t.kind)],\\n      '}]'\\n    ));\\n  }\\n\\n  /**\\n   * ERC720 token URI interface. Generates a base64 encoded metadata response\\n   * without referencing off-chain content.\\n   * @param tokenId the ID of the token to generate the metadata for\\n   * @return a base64 encoded JSON dictionary of the token's metadata and SVG\\n   */\\n  function tokenURI(uint16 tokenId) external view override returns (string memory) {\\n    IFoxGameNFT.Traits memory traits = foxNFT.getTraits(tokenId);\\n\\n    string memory metadata = string(abi.encodePacked(\\n      '{\\\"name\\\": \\\"', _players[uint8(traits.kind)], \\\" #\\\", uint256(tokenId).toString(),\\n      '\\\", \\\"description\\\": \\\"The metaverse mainland is full of creatures. Around the Farm, an abundance of Rabbits scurry to harvest CARROT. Alongside Farmers, they expand the farm and multiply their earnings. There',\\n      \\\"'\\\", 's only one small problem -- the farm has grown too big and a new threat of nature has entered the game.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n      _base64(bytes(_drawSVG(traits))),\\n      '\\\", \\\"attributes\\\":',\\n      _compileAttributes(tokenId, traits),\\n      \\\"}\\\"\\n    ));\\n\\n    return string(abi.encodePacked(\\n      \\\"data:application/json;base64,\\\",\\n      _base64(bytes(metadata))\\n    ));\\n  }\\n\\n  /** BASE 64 - Written by Brech Devos */\\n  string internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n  function _base64(bytes memory data) internal pure returns (string memory) {\\n    if (data.length == 0) return \\\"\\\";\\n    \\n    // load the table into memory\\n    string memory table = TABLE;\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n    // add some extra buffer at the end required for the writing\\n    string memory result = new string(encodedLen + 32);\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      // set the actual output length\\n      mstore(result, encodedLen)\\n      \\n      // prepare the lookup table\\n      let tablePtr := add(table, 1)\\n      \\n      // input ptr\\n      let dataPtr := data\\n      let endPtr := add(dataPtr, mload(data))\\n      \\n      // result ptr, jump over length\\n      let resultPtr := add(result, 32)\\n      \\n      // run over the input, 3 bytes at a time\\n      for {} lt(dataPtr, endPtr) {}\\n      {\\n          dataPtr := add(dataPtr, 3)\\n          \\n          // read 3 bytes\\n          let input := mload(dataPtr)\\n          \\n          // write 4 characters\\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n          resultPtr := add(resultPtr, 1)\\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n          resultPtr := add(resultPtr, 1)\\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n          resultPtr := add(resultPtr, 1)\\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n          resultPtr := add(resultPtr, 1)\\n      }\\n      \\n      // padding with '='\\n      switch mod(mload(data), 3)\\n      case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n      case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n    }\\n    \\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IFoxGameNFTTraits.sol\": {\r\n      \"content\": \"/*\\n███████╗ ██████╗ ██╗  ██╗     ██████╗  █████╗ ███╗   ███╗███████╗\\n██╔════╝██╔═══██╗╚██╗██╔╝    ██╔════╝ ██╔══██╗████╗ ████║██╔════╝\\n█████╗  ██║   ██║ ╚███╔╝     ██║  ███╗███████║██╔████╔██║█████╗  \\n██╔══╝  ██║   ██║ ██╔██╗     ██║   ██║██╔══██║██║╚██╔╝██║██╔══╝  \\n██║     ╚██████╔╝██╔╝ ██╗    ╚██████╔╝██║  ██║██║ ╚═╝ ██║███████╗\\n╚═╝      ╚═════╝ ╚═╝  ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IFoxGameNFTTraits {\\n  function tokenURI(uint16 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/IFoxGameNFT.sol\": {\r\n      \"content\": \"/*\\n███████╗ ██████╗ ██╗  ██╗     ██████╗  █████╗ ███╗   ███╗███████╗\\n██╔════╝██╔═══██╗╚██╗██╔╝    ██╔════╝ ██╔══██╗████╗ ████║██╔════╝\\n█████╗  ██║   ██║ ╚███╔╝     ██║  ███╗███████║██╔████╔██║█████╗  \\n██╔══╝  ██║   ██║ ██╔██╗     ██║   ██║██╔══██║██║╚██╔╝██║██╔══╝  \\n██║     ╚██████╔╝██╔╝ ██╗    ╚██████╔╝██║  ██║██║ ╚═╝ ██║███████╗\\n╚═╝      ╚═════╝ ╚═╝  ╚═╝     ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IFoxGameNFT {\\n  enum Kind { RABBIT, FOX, HUNTER }\\n  struct Traits { Kind kind; uint8 advantage; uint8[7] traits; }\\n  function getMaxGEN0Players() external pure returns (uint16);\\n  function getTraits(uint16) external view returns (Traits memory);\\n  function ownerOf(uint256) external view returns (address owner);\\n  function transferFrom(address, address, uint256) external;\\n  function safeTransferFrom(address, address, uint256, bytes memory) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"traitData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"png\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"traitTypeId\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"traitValueId\",\"type\":\"uint8[]\"},{\"internalType\":\"string[][2]\",\"name\":\"traits\",\"type\":\"string[][2]\"}],\"name\":\"uploadTraits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FoxGameNFTTraits","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}