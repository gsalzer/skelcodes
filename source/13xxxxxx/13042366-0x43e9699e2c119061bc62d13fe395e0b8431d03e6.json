{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20Mint {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function mint(address account, uint256 amount) external;\r\n\r\n    function burn(address account, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\nlibrary ECDSA {\r\n  function isMessageValid(bytes memory message) public pure returns (bool) {\r\n    return message.length == 136;\r\n  }\r\n\r\n  function formMessage(address from, address to, uint amount, uint nonce) external pure \r\n    returns (bytes32)\r\n  {\r\n    bytes32 message = keccak256(abi.encodePacked(\r\n      from,\r\n      to, \r\n      amount,\r\n      nonce\r\n    ));\r\n    return message;\r\n  }\r\n\r\n  /**\r\n   * Accepts the (v,r,s) signature and the message and returns the \r\n   * address that signed the signature. It accounts for malleability issue\r\n   * with the native ecrecover.\r\n   */\r\n  function getSigner(\r\n    bytes32 message, \r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) private pure returns (address) {\r\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n    // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n    //\r\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n    // these malleable signatures as well.\r\n    require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\r\n            \"ECDSA: invalid signature 's' value\");\r\n    require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\r\n\r\n    // If the signature is valid (and not malleable), return the signer address\r\n    address signer = ecrecover(hashMessage(message), v, r, s);\r\n    require(signer != address(0), \"ECDSA:invalid signature\");\r\n\r\n    return signer;\r\n  }\r\n\r\n  function hashMessage(bytes32 message) internal pure returns (bytes32) {\r\n    bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n    return keccak256(abi.encodePacked(prefix, message));\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the address that signed a hashed message (`hash`) with\r\n    * `signature`. This address can then be used for verification purposes.\r\n    *\r\n    * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n    * this function rejects them by requiring the `s` value to be in the lower\r\n    * half order, and the `v` value to be either 27 or 28.\r\n    *\r\n    * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n    * verification to be secure: it is possible to craft signatures that\r\n    * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n    * this is by receiving a hash of the original message (which may otherwise\r\n    * be too long), and then calling {toEthSignedMessageHash} on it.\r\n    */\r\n  function recoverAddress(\r\n    bytes32 message, \r\n    bytes memory signature\r\n  ) external view returns (address) {\r\n    // Check the signature length\r\n    require(signature.length == 65, \"ECDSA: invalid signature length\");\r\n\r\n    // Divide the signature in r, s and v variables\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    // ecrecover takes the signature parameters, and the only way to get them\r\n    // currently is to use assembly.\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      r := mload(add(signature, 0x20))\r\n      s := mload(add(signature, 0x40))\r\n      v := byte(0, mload(add(signature, 0x60)))\r\n    }\r\n\r\n    return getSigner(message, v, r, s);\r\n  }\r\n\r\n  // layout of message :: bytes:\r\n  // offset  0: 32 bytes :: uint256 - message length\r\n  // offset 32: 20 bytes :: address - recipient address\r\n  // offset 52: 32 bytes :: uint256 - value\r\n  // offset 84: 32 bytes :: bytes32 - transaction hash\r\n  // offset 116: 32 bytes :: uint256 - nonce\r\n  // offset 136: 20 bytes :: address - contract address to prevent double spending\r\n\r\n  // mload always reads 32 bytes.\r\n  // so we can and have to start reading recipient at offset 20 instead of 32.\r\n  // if we were to read at 32 the address would contain part of value and be corrupted.\r\n  // when reading from offset 20 mload will read 12 bytes (most of them zeros) followed\r\n  // by the 20 recipient address bytes and correctly convert it into an address.\r\n  // this saves some storage/gas over the alternative solution\r\n  // which is padding address to 32 bytes and reading recipient at offset 32.\r\n  // for more details see discussion in:\r\n  // https://github.com/paritytech/parity-bridge/issues/61\r\n  function parseMessage(bytes memory message) internal view returns (\r\n    address recipient, \r\n    uint256 amount, \r\n    uint256 txHash,\r\n    uint256 nonce,\r\n    address contractAddress\r\n  ) {\r\n    require(isMessageValid(message), \"ECDSA: parse error invalid message\");\r\n    \r\n    assembly {\r\n      recipient := mload(add(message, 20))\r\n      amount := mload(add(message, 52))\r\n      txHash := mload(add(message, 84))\r\n      nonce := mload(add(message, 116))\r\n      contractAddress := mload(add(message, 136))\r\n    }\r\n  }\r\n}\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\nabstract contract BaseBridge is Ownable {\r\n    /**\r\n       @dev Interface for DAO token\r\n        Since tokens are going to be minted and burned on BSC,\r\n        Interface is expended with burn and mint functions\r\n        @notice an interface for dao token\r\n     */\r\n    IERC20Mint public token;\r\n    //address public otherChainBridgeAddress;\r\n\r\n    /**\r\n        @notice Mapping for storing addresses transaction nonce\r\n        @notice Each nonce count is personal for each address\r\n     */\r\n    mapping(address => uint256) public transactionId;\r\n\r\n    /**\r\n        @notice Mapping for storing processed nonces\r\n        @notice Required for contract in order not to process the same transaction twice\r\n     */\r\n    mapping(address => mapping(uint256 => bool)) public processedTransactions;\r\n\r\n    /**\r\n        @notice Enum for checking transaction step in an event\r\n        @notice LOCK for sending tokens to contract\r\n        @notice UNLOCK for sending tokens from contract\r\n     */\r\n    enum Step {LOCK, UNLOCK}\r\n\r\n    /**\r\n        @notice This event will be listened by API bridge\r\n     */\r\n    event TransferRequested(\r\n        address indexed from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 date,\r\n        uint256 indexed transactionId,\r\n        bytes signature,\r\n        Step indexed step\r\n    );\r\n\r\n    /**\r\n        @notice Constructor sets address for DAO token interface\r\n        @param _token Address of DAO token\r\n     */\r\n    constructor(address _token) public {\r\n        token = IERC20Mint(_token);\r\n    }\r\n\r\n    /**\r\n        @notice Function for getting caller's actual transaction nonce\r\n        @notice This nonce must be used in order to make transaction\r\n        @return Caller's actual nonce\r\n     */\r\n    function GetTransactionId() external view returns (uint256) {\r\n        return transactionId[_msgSender()];\r\n    }\r\n}\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ncontract EthBridge is BaseBridge {\r\n    constructor(address _token) public BaseBridge(_token) {}\r\n\r\n    /**\r\n        @notice This function is called in order to send tokens from Ethereum to BSC\r\n        @notice Amount of tokens must be approved to contract before calling this function\r\n        @notice If function call is successful, an event is emitted and bridge API\r\n        sends tokens on BSC\r\n        @notice Can be called by anyone\r\n        @param _to A receiver address on Binance Smart Chain\r\n        @param _amount Amount of tokens to lock on Ethereum and mint on BSC\r\n        @param _signature A message, signed by sender, required in order to make transaction\r\n        secure\r\n     */\r\n    function sendTokens(\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes memory _signature\r\n    ) external {\r\n        bytes32 message = keccak256(abi.encodePacked(_msgSender(), _to, _amount, transactionId[_msgSender()]));\r\n        require(ECDSA.recoverAddress(message, _signature) == _msgSender(), \"Signature mismatch\");\r\n        emit TransferRequested(\r\n            _msgSender(),\r\n            _to,\r\n            _amount,\r\n            block.timestamp,\r\n            transactionId[_msgSender()],\r\n            _signature,\r\n            Step.LOCK\r\n        );\r\n        transactionId[_msgSender()]++;\r\n\r\n        token.transferFrom(_msgSender(), address(this), _amount);\r\n    }\r\n\r\n    /**\r\n        @notice This function can be called only by Bridge API\r\n        @notice Once an event is emitted on BSC, pointing that transaction is requested,\r\n        some amount of tokens are burned on BSC and unlocked on Ethereum\r\n        @param _from An address on BSC which sent a transaction. Required in order to check\r\n        that transaction is valid\r\n        @param _to A receiver address on Ethereum\r\n        @param _amount Amount of tokens to be unlocked\r\n        @param  BSCTransactionId Transaction nonce, required to check that transaction is valid\r\n        @param _signature A message, signed by sender, required in order to make transaction\r\n        secure\r\n     */\r\n    function unlockTokens(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 BSCTransactionId,\r\n        bytes memory _signature\r\n    ) external onlyOwner {\r\n        require(!processedTransactions[_from][BSCTransactionId], \"Transaction already processed\");\r\n\r\n        bytes32 message = keccak256(abi.encodePacked(_from, _to, _amount, BSCTransactionId));\r\n        require(ECDSA.recoverAddress(message, _signature) == _from, \"Signature mismatch\");\r\n\r\n        processedTransactions[_from][BSCTransactionId] = true;\r\n        emit TransferRequested(_from, _to, _amount, block.timestamp, BSCTransactionId, _signature, Step.UNLOCK);\r\n    \r\n        token.transfer(_to, _amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"enum BaseBridge.Step\",\"name\":\"step\",\"type\":\"uint8\"}],\"name\":\"TransferRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GetTransactionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"processedTransactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"sendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Mint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transactionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BSCTransactionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EthBridge","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d40adff097e3cde2b96d81a4727f3e47093f3405","EVMVersion":"Default","Library":"ECDSA:390134e3568fbc3a22d30e673f370e0195d70898","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f3777f257073223db5c59a1578972519cea35ec89b71da953c1a74030b9cf2d3"}]}