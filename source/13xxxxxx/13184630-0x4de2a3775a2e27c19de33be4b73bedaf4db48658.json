{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @dev SafeMath\r\n * Math operations with safety checks that throw on error\r\n * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b > a) return 0;\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ncontract IERC20 is IERC165 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address account) public view returns (uint256);\r\n    function decimals() public view returns (uint8);\r\n    function transfer(address recipient, uint256 amount) public returns (bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function approve(address spender, uint256 amount) public returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool);\r\n    function safeTransfer(address recipient, uint256 amount, bytes memory data) public;\r\n    function safeTransfer(address recipient, uint256 amount) public;\r\n    function safeTransferFrom(address sender, address recipient, uint256 amount, bytes memory data) public;\r\n    function safeTransferFrom(address sender, address recipient, uint256 amount) public;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC165 is IERC165 {\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\ncontract IERC20Receiver {\r\n    function onERC20Received(address _operator, address _from, uint256 _amount, bytes memory _data) public returns (bytes4);\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @title Ownable\r\n// ----------------------------------------------------------------------------\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event SetOwner(address owner);\r\n    event SetMinter(address minter);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner    = msg.sender;\r\n\r\n        emit SetOwner(msg.sender);\r\n        emit SetMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() { require(msg.sender == owner); _; }\r\n\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @title ERC20\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20 is ERC165, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    event LockedInfo(address indexed from, address indexed to, uint256 value, uint8 tokenType, uint256 distributedTime, uint256 lockUpPeriodMonth, uint256 unlockAmountPerCount, uint256 remainUnLockCount, uint256 CONST_UNLOCKCOUNT);\r\n    event ChangeListingTime(uint256 oldTime, uint256 newTime);\r\n    event FinshedSetExchangeListingTime();\r\n\r\n    struct LockInfo {\r\n        bool isLocked;\r\n        uint8 tokenType;\r\n        uint256 amount;\r\n        uint256 distributedTime;\r\n        uint256 lockUpPeriodMonth;\r\n        uint256 lastUnlockTimestamp;\r\n        uint256 unlockAmountPerCount;\r\n        uint256 remainUnLockCount;\r\n        uint256 CONST_UNLOCKCOUNT;\r\n        uint256 CONST_AMOUNT;\r\n    }\r\n    \r\n    uint256 internal _totalSupply;\r\n    uint8 private _decimals = 18;\r\n\r\n    uint256 internal _tokenCreatedTime;\r\n    \r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping (address => uint256)) internal _allowances;\r\n\r\n    mapping(address => uint8) internal _cardioWallet;\r\n    mapping(address => mapping (uint8 => LockInfo)) internal _lockedInfo;\r\n\r\n    bytes4 private constant _ERC20_RECEIVED = 0x9d188c22;\r\n    bytes4 private constant _INTERFACE_ID_ERC20 = 0x65787371;\r\n\r\n    constructor() public {\r\n        _tokenCreatedTime = now;\r\n        // Crowd Sale Wallet\r\n        _cardioWallet[0x9FC9675d6d1d2E583EbC6fdF7b30F1d1144523Cd] = 1;\r\n        // Team & Advisors\r\n        _cardioWallet[0xe39c6A20A55e6f88aF1B331F0E8529dcD4A02c10] = 2;\r\n        // Ecosystem Activation\r\n        _cardioWallet[0x588eaB2Fd73e381efFA8E4F084bF5a686eC9eD68] = 3;\r\n        // Business Development\r\n        _cardioWallet[0x461030be06272623f7135ba9926Ea9Afba00d8E3] = 4;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        uint256 totalBalances = _balances[account];\r\n        uint8 tokenType;\r\n\r\n        for (tokenType = 1; tokenType <= 4; tokenType++) {\r\n            LockInfo memory lockInfo = _lockedInfo[account][tokenType];\r\n            totalBalances = totalBalances.add(lockInfo.amount);\r\n        }\r\n        \r\n        return totalBalances;\r\n    }\r\n\r\n    function unLockBalanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function lockUpInfo(address account, uint8 tokenType) public view returns (bool, uint8, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        LockInfo memory lockInfo = _lockedInfo[account][tokenType];\r\n        return (lockInfo.isLocked, lockInfo.tokenType, lockInfo.amount, lockInfo.distributedTime, lockInfo.lockUpPeriodMonth, lockInfo.lastUnlockTimestamp, lockInfo.unlockAmountPerCount, lockInfo.remainUnLockCount, lockInfo.CONST_UNLOCKCOUNT, lockInfo.CONST_AMOUNT);\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(amount));\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address spender, uint256 amount) public returns (bool) {\r\n        if (amount >= _allowances[msg.sender][spender]) {\r\n            amount = 0;\r\n        } else {\r\n            amount = _allowances[msg.sender][spender].sub(amount);\r\n        }\r\n\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n    \r\n    function safeTransfer(address recipient, uint256 amount) public {\r\n        safeTransfer(recipient, amount, \"\");\r\n    }\r\n\r\n    function safeTransfer(address recipient, uint256 amount, bytes memory data) public {\r\n        transfer(recipient, amount);\r\n        require(_checkOnERC20Received(msg.sender, recipient, amount, data), \"ERC20: transfer to non ERC20Receiver implementer\");\r\n    }\r\n    \r\n    function safeTransferFrom(address sender, address recipient, uint256 amount) public {\r\n        safeTransferFrom(sender, recipient, amount, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(address sender, address recipient, uint256 amount, bytes memory data) public {\r\n        transferFrom(sender, recipient, amount);\r\n        require(_checkOnERC20Received(sender, recipient, amount, data), \"ERC20: transfer to non ERC20Receiver implementer\");\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint8 adminAccountType = _cardioWallet[sender];\r\n        // Crowd Sale Wallet, Team & Advisors from admin wallet Type 1, 2\r\n        if(adminAccountType >= 1 && adminAccountType <= 2) {\r\n            _addLocker(sender, recipient, adminAccountType, amount);\r\n        } else {\r\n            // Check \"From\" LockUp Balance\r\n            uint8 tokenType;\r\n            for (tokenType = 1; tokenType <= 4; tokenType++) {\r\n                LockInfo storage lockInfo = _lockedInfo[sender][tokenType];\r\n                if (lockInfo.isLocked) {\r\n                    _unLock(sender, tokenType);\r\n                }\r\n            }\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        }\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _addLocker(address sender, address recipient, uint8 adminAcountType, uint256 amount) internal {\r\n        require(_lockedInfo[recipient][adminAcountType].isLocked == false, \"Already Locked User\");\r\n        \r\n        uint256 distributedTime;\r\n        uint256 lockUpPeriodMonth;\r\n        uint256 unlockAmountPerCount;\r\n        uint256 remainUnLockCount;\r\n        uint256 CONST_UNLOCKCOUNT;\r\n        uint256 CONST_AMOUNT;\r\n        \r\n        if(adminAcountType == 1) { // Crowd Sale\r\n            distributedTime = now;\r\n            lockUpPeriodMonth = 0;\r\n            unlockAmountPerCount = amount.div(100);\r\n            remainUnLockCount = 6;\r\n            CONST_UNLOCKCOUNT = 5;\r\n            CONST_AMOUNT = amount;\r\n        } else { // Team & Advisors\r\n            distributedTime = now;\r\n            lockUpPeriodMonth = 6;\r\n            unlockAmountPerCount = amount.div(20);\r\n            remainUnLockCount = 20;\r\n            CONST_UNLOCKCOUNT = 20;\r\n            CONST_AMOUNT = amount;\r\n        }\r\n        \r\n        LockInfo memory newLockInfo = LockInfo({\r\n            isLocked: true,\r\n            tokenType : adminAcountType,\r\n            amount: amount,\r\n            distributedTime: distributedTime,\r\n            lockUpPeriodMonth: lockUpPeriodMonth,\r\n            lastUnlockTimestamp: 0,\r\n            unlockAmountPerCount: unlockAmountPerCount,\r\n            remainUnLockCount: remainUnLockCount,\r\n            CONST_UNLOCKCOUNT: CONST_UNLOCKCOUNT,\r\n            CONST_AMOUNT: CONST_AMOUNT\r\n        });\r\n        \r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _lockedInfo[recipient][adminAcountType] = newLockInfo;\r\n    }\r\n    \r\n    function _unLock(address sender, uint8 tokenType) internal {\r\n        LockInfo storage lockInfo = _lockedInfo[sender][tokenType];\r\n\r\n        // Only Crowd Sale Type\r\n        // 864000 = 10 Days\r\n        if(tokenType == 1 && lockInfo.remainUnLockCount == 6 && lockInfo.distributedTime.add(864000) <= now) {\r\n            // lockInfo update\r\n            lockInfo.distributedTime = lockInfo.distributedTime.add(864000);\r\n            lockInfo.remainUnLockCount = 5;\r\n\r\n            // Fisrt Distribute 5%\r\n            uint256 distributeAmount = lockInfo.unlockAmountPerCount.mul(5);\r\n            lockInfo.amount = lockInfo.amount.sub(distributeAmount);\r\n            _balances[sender] = _balances[sender].add(distributeAmount);\r\n        }\r\n\r\n        if(_isOverLockUpPeriodMonth((now.safeSub(lockInfo.distributedTime)), lockInfo.lockUpPeriodMonth) == false) {\r\n            return;\r\n        }\r\n\r\n        uint256 blockTime = now;\r\n        uint256 count = _getUnLockCount(blockTime, lockInfo);\r\n\r\n        // None\r\n        if(count == 0) return;\r\n        uint256 unlockAmount;\r\n        if(tokenType == 1) {\r\n            uint256 remainCount = lockInfo.remainUnLockCount;\r\n            for(uint8 i = 0; i < count; i++) {\r\n                if(remainCount == 5) {\r\n                    remainCount = remainCount - 1;\r\n                    unlockAmount = unlockAmount.add(lockInfo.unlockAmountPerCount.mul(10)); \r\n                    continue;\r\n                }\r\n\r\n                if(remainCount >= 2 && remainCount <= 4) {\r\n                    remainCount = remainCount - 1;\r\n                    unlockAmount = unlockAmount.add(lockInfo.unlockAmountPerCount.mul(20)); \r\n                    continue;\r\n                }\r\n\r\n                if(remainCount == 1) {\r\n                    remainCount = remainCount - 1;\r\n                    unlockAmount = unlockAmount.add(lockInfo.unlockAmountPerCount.mul(25)); \r\n                    continue;\r\n                }\r\n            }\r\n        } else {\r\n            unlockAmount = count.mul(lockInfo.unlockAmountPerCount);\r\n        }\r\n\r\n        // Shortage due to burn token\r\n        // or the last distribution\r\n        uint256 remainUnLockCount = lockInfo.remainUnLockCount.safeSub(count);\r\n        if (lockInfo.amount.safeSub(unlockAmount) == 0 || remainUnLockCount == 0) {\r\n            unlockAmount = lockInfo.amount;\r\n            lockInfo.isLocked = false;\r\n        }\r\n        \r\n        // lockInfo update\r\n        lockInfo.lastUnlockTimestamp = now;\r\n        lockInfo.remainUnLockCount = remainUnLockCount;\r\n        lockInfo.amount = lockInfo.amount.sub(unlockAmount);\r\n        \r\n        _balances[sender] = _balances[sender].add(unlockAmount);\r\n    }\r\n    \r\n    function _getUnLockCount(uint256 curBlockTime, LockInfo lockInfo) internal pure returns (uint256) {\r\n        // 1 Month = 30 Days \r\n        uint256 lockUpTime = lockInfo.lockUpPeriodMonth * 30 * 24 * 60 * 60;\r\n\r\n        uint256 startTime = lockInfo.distributedTime.add(lockUpTime);\r\n        uint256 count = 0;\r\n\r\n        if (lockInfo.lastUnlockTimestamp == 0) {\r\n            count = _convertMSToMonth(curBlockTime - startTime);\r\n        } else {\r\n            uint256 unLockedCount = _convertMSToMonth(curBlockTime - startTime);\r\n            uint256 alreadyUnLockCount = lockInfo.CONST_UNLOCKCOUNT - lockInfo.remainUnLockCount;\r\n            \r\n            count = unLockedCount.safeSub(alreadyUnLockCount);\r\n        }\r\n        return count;\r\n    }\r\n    \r\n    function _isOverLockUpPeriodMonth(uint256 time, uint256 period) internal pure returns (bool) {\r\n        return _convertMSToMonth(time) > period;\r\n    }\r\n    \r\n    function _convertMSToMonth(uint256 time) internal pure returns (uint256) {\r\n        return time.div(60).div(60).div(24).div(30);\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function _checkOnERC20Received(address sender, address recipient, uint256 amount, bytes memory _data) internal returns (bool) {\r\n        if (!isContract(recipient)) {\r\n            return true;\r\n        }\r\n        bytes4 retval = IERC20Receiver(recipient).onERC20Received(msg.sender, sender, amount, _data);\r\n        return (retval == _ERC20_RECEIVED);\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @title Burnable Token\r\n// @dev Token that can be irreversibly burned (destroyed).\r\n// ----------------------------------------------------------------------------\r\ncontract BurnableToken is ERC20 {\r\n    event BurnAdminAmount(address indexed burner, uint256 value);\r\n    event BurnLockedToken(address indexed burner, uint256 value, uint8 tokenType);\r\n\r\n    modifier onlyCardioWallet() {\r\n      require(msg.sender == 0x588eaB2Fd73e381efFA8E4F084bF5a686eC9eD68\r\n      || msg.sender == 0x461030be06272623f7135ba9926Ea9Afba00d8E3\r\n    ); _; }\r\n\r\n    function burnAdminAmount(uint256 _value) onlyOwner public {\r\n        require(_value <= _balances[msg.sender]);\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n    \r\n        emit BurnAdminAmount(msg.sender, _value);\r\n        emit Transfer(msg.sender, address(0), _value);\r\n    }\r\n\r\n    // Ecosystem Activation - 3\r\n    // 0x588eaB2Fd73e381efFA8E4F084bF5a686eC9eD68\r\n    // Business Development - 4\r\n    // 0x461030be06272623f7135ba9926Ea9Afba00d8E3\r\n    function burnTypeToken(uint256 _value) onlyCardioWallet public {\r\n        uint8 adminAccountType = _cardioWallet[msg.sender];\r\n        LockInfo storage lockInfo = _lockedInfo[msg.sender][adminAccountType];\r\n\r\n        lockInfo.amount = lockInfo.amount.sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n\r\n        if(lockInfo.amount == 0) {\r\n            lockInfo.isLocked = false;\r\n        }\r\n    \r\n        emit BurnLockedToken(msg.sender, _value, adminAccountType);\r\n        emit Transfer(msg.sender, address(0), _value);\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @title Mintable token\r\n// @dev Simple ERC20 Token example, with mintable token creation\r\n// Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n// ----------------------------------------------------------------------------\r\ncontract MintableToken is ERC20 {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    uint256 ECOSYSTEM_AMOUNT = 7300000000 * (10**18);\r\n    uint256 BUSINESS_AMOUNT = 1150000000 * (10**18);\r\n\r\n    bool private _mintingFinished = false;\r\n\r\n    modifier canMint() { require(!_mintingFinished); _; }\r\n\r\n    function mintingFinished() public view returns (bool) {\r\n        return _mintingFinished;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount, uint8 _tokenType) onlyOwner canMint public returns (bool) {\r\n        require(_tokenType < 5, \"Token Type NULL\");\r\n        _totalSupply = _totalSupply.add(_amount);\r\n\r\n        if(_tokenType >= 3) {\r\n            uint256 lockUpPeriodMonth;\r\n            uint256 unlockAmountPerCount;\r\n            uint256 remainUnLockCount;\r\n            uint256 CONST_UNLOCKCOUNT;\r\n            uint256 CONST_AMOUNT;\r\n            \r\n            if(_tokenType == 3) { // Ecosystem Activation\r\n                lockUpPeriodMonth = 0;\r\n                unlockAmountPerCount = ECOSYSTEM_AMOUNT.div(100);\r\n                remainUnLockCount = 99;\r\n                CONST_UNLOCKCOUNT = 99;\r\n                CONST_AMOUNT = ECOSYSTEM_AMOUNT;\r\n            } else if(_tokenType == 4) { // Business Development\r\n                lockUpPeriodMonth = 0;\r\n                unlockAmountPerCount = BUSINESS_AMOUNT.div(100);\r\n                remainUnLockCount = 85;\r\n                CONST_UNLOCKCOUNT = 85;\r\n                CONST_AMOUNT = BUSINESS_AMOUNT;\r\n            }\r\n            \r\n            LockInfo memory newLockInfo = LockInfo({\r\n                isLocked: true,\r\n                tokenType : _tokenType,\r\n                amount: _amount,\r\n                distributedTime: _tokenCreatedTime,\r\n                lockUpPeriodMonth: lockUpPeriodMonth,\r\n                lastUnlockTimestamp: 0,\r\n                unlockAmountPerCount: unlockAmountPerCount,\r\n                remainUnLockCount: remainUnLockCount,\r\n                CONST_UNLOCKCOUNT: CONST_UNLOCKCOUNT,\r\n                CONST_AMOUNT: CONST_AMOUNT\r\n            });\r\n            \r\n            _lockedInfo[_to][_tokenType] = newLockInfo;\r\n            \r\n            emit LockedInfo(address(0), _to, _amount, _tokenType, _tokenCreatedTime, lockUpPeriodMonth, unlockAmountPerCount, remainUnLockCount, CONST_UNLOCKCOUNT);\r\n        } else {\r\n            _balances[_to] = _balances[_to].add(_amount);\r\n        }\r\n\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function finishMinting() onlyOwner canMint public returns (bool) {\r\n        _mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @Project CardioCoin\r\n// ----------------------------------------------------------------------------\r\ncontract CardioCoin is MintableToken, BurnableToken {\r\n    event SetTokenInfo(string name, string symbol);\r\n    string private _name = \"\";\r\n    string private _symbol = \"\";\r\n\r\n    constructor() public {\r\n        _name = \"CardioCoin\";\r\n        _symbol = \"CRDC\";\r\n\r\n        emit SetTokenInfo(_name, _symbol);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unLockBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"lockUpInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_tokenType\",\"type\":\"uint8\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnAdminAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTypeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"SetTokenInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BurnAdminAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"BurnLockedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"distributedTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockUpPeriodMonth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockAmountPerCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"remainUnLockCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"CONST_UNLOCKCOUNT\",\"type\":\"uint256\"}],\"name\":\"LockedInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"ChangeListingTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FinshedSetExchangeListingTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"SetMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CardioCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://24fb9ce1cb2ee0851c285b637255da6109ef1fbff91d4e5c7464efa2c30e6782"}]}