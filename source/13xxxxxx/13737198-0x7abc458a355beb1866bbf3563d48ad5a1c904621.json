{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/src/contracts/ImmortalPhoenix.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"./ERC721EnumerableCheap.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\n\\r\\nstruct Phoenix {\\r\\n        uint128 hash;\\r\\n        uint8 level;\\r\\n        string name;\\r\\n}\\r\\n\\r\\nstruct MetadataStruct {\\r\\n\\r\\n    uint tokenId;\\r\\n    uint collectionId;\\r\\n    uint numTraits;\\r\\n    string description;\\r\\n    string unRevealedImage;\\r\\n\\r\\n}\\r\\n\\r\\nstruct PaymentStruct {\\r\\n    address membersAddress;\\r\\n    uint owed;\\r\\n    uint payed;\\r\\n}\\r\\n\\r\\nstruct ResurrectionInfo {\\r\\n    uint tokenId;\\r\\n    uint128 hash;\\r\\n}\\r\\n\\r\\n\\r\\ncontract IBlazeToken {\\r\\n\\r\\n    function updateTokens(address userAddress) external {}\\r\\n\\r\\n    function updateTransfer(address _fromAddress, address _toAddress) external {}\\r\\n\\r\\n    function burn(address  _from, uint256 _amount) external {}\\r\\n\\r\\n}\\r\\n\\r\\ncontract IMetadataHandler {\\r\\n\\r\\n    function tokenURI(Phoenix memory _phoenix, MetadataStruct memory _metadataStruct) external view returns(string memory)  {}\\r\\n\\r\\n    function getSpecialToken(uint _collectionId, uint _tokenId) external view returns(uint) {}\\r\\n\\r\\n    function resurrect(uint _collectionId, uint _tokenId) external {}\\r\\n\\r\\n    function rewardMythics(uint _collectionId, uint _numMythics) external {}\\r\\n}\\r\\n\\r\\n/**\\r\\n __     __    __     __    __     ______     ______     ______   ______     __           \\r\\n/\\\\ \\\\   /\\\\ \\\"-./  \\\\   /\\\\ \\\"-./  \\\\   /\\\\  __ \\\\   /\\\\  == \\\\   /\\\\__  _\\\\ /\\\\  __ \\\\   /\\\\ \\\\          \\r\\n\\\\ \\\\ \\\\  \\\\ \\\\ \\\\-./\\\\ \\\\  \\\\ \\\\ \\\\-./\\\\ \\\\  \\\\ \\\\ \\\\/\\\\ \\\\  \\\\ \\\\  __<   \\\\/_/\\\\ \\\\/ \\\\ \\\\  __ \\\\  \\\\ \\\\ \\\\____     \\r\\n \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\ \\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_____\\\\    \\r\\n  \\\\/_/   \\\\/_/  \\\\/_/   \\\\/_/  \\\\/_/   \\\\/_____/   \\\\/_/ /_/     \\\\/_/   \\\\/_/\\\\/_/   \\\\/_____/    \\r\\n                                                                                         \\r\\n             ______   __  __     ______     ______     __   __     __     __  __         \\r\\n            /\\\\  == \\\\ /\\\\ \\\\_\\\\ \\\\   /\\\\  __ \\\\   /\\\\  ___\\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\_\\\\_\\\\_\\\\        \\r\\n            \\\\ \\\\  _-/ \\\\ \\\\  __ \\\\  \\\\ \\\\ \\\\/\\\\ \\\\  \\\\ \\\\  __\\\\   \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\_\\\\/_       \\r\\n             \\\\ \\\\_\\\\    \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\   /\\\\_\\\\/\\\\_\\\\      \\r\\n              \\\\/_/     \\\\/_/\\\\/_/   \\\\/_____/   \\\\/_____/   \\\\/_/ \\\\/_/   \\\\/_/   \\\\/_/\\\\/_/      \\r\\n                                                                                         \\r\\n*/\\r\\n\\r\\n\\r\\ncontract ImmortalPhoenix is ERC721EnumerableCheap, Ownable {\\r\\n\\r\\n    mapping(uint256 => Phoenix) tokenIdToPhoenix;\\r\\n\\r\\n    uint[6] levelUpCosts;\\r\\n\\r\\n    bool public publicMint;\\r\\n\\r\\n    uint16 public maxSupply = 5001;\\r\\n\\r\\n    uint8 public totalLevelSix;\\r\\n\\r\\n    uint8 public maxLevelSix = 200;\\r\\n\\r\\n    //Price in wei = 0.055 eth\\r\\n    uint public price = 0.055 ether;\\r\\n\\r\\n    uint public nameCost = 80 ether;\\r\\n\\r\\n    uint public resurrectCost = 100 ether;\\r\\n\\r\\n    IMetadataHandler metadataHandler;\\r\\n\\r\\n    mapping(address => uint) addressToLevels;\\r\\n\\r\\n    IBlazeToken blazeToken;\\r\\n\\r\\n    uint[] roleMaxMint;\\r\\n\\r\\n    bytes32[] roots;\\r\\n\\r\\n    PaymentStruct[] payments;\\r\\n\\r\\n    mapping(address => uint) numMinted;\\r\\n\\r\\n    mapping(string => bool) nameTaken;\\r\\n\\r\\n    ResurrectionInfo previousResurrection;\\r\\n\\r\\n    bool allowResurrection;\\r\\n\\r\\n    uint resurrectionId;\\r\\n\\r\\n    event LeveledUp(uint id, address indexed userAddress);\\r\\n    event NameChanged(uint id, address indexed userAddress);\\r\\n\\r\\n    constructor(address _blazeTokenAddress, address _metadataHandlerAddress, uint[] memory _roleMaxMint, PaymentStruct[] memory _payments) ERC721Cheap(\\\"Immortal Phoenix\\\", \\\"Phoenix\\\") {\\r\\n\\r\\n        levelUpCosts = [10 ether, 20 ether, 30 ether, 40 ether, 50 ether, 60 ether];\\r\\n\\r\\n        blazeToken = IBlazeToken(_blazeTokenAddress);\\r\\n        metadataHandler = IMetadataHandler(_metadataHandlerAddress);\\r\\n        roleMaxMint = _roleMaxMint;\\r\\n\\r\\n        for(uint i = 0; i < _payments.length; i++) {\\r\\n            payments.push(_payments[i]);\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     _      _      _      _    _      _____    _     _     _      _____    \\r\\n    /\\\\ \\\"-./  \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\  ___\\\\   \\r\\n    \\\\ \\\\ \\\\-./\\\\ \\\\  \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\__ \\\\  \\r\\n     \\\\ \\\\_\\\\ \\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_____\\\\ \\r\\n      \\\\/_/  \\\\/_/   \\\\/_/   \\\\/_/ \\\\/_/     \\\\/_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_____/\\r\\n\\r\\n    */\\r\\n\\r\\n    /**\\r\\n     * @dev Generates a random number that will be used by the metadata manager to generate the image.\\r\\n     * @param _tokenId The token id used to generated the hash.\\r\\n     * @param _address The address used to generate the hash.\\r\\n     */\\r\\n    function generateTraits(\\r\\n        uint _tokenId,\\r\\n        address _address\\r\\n    ) internal view returns (uint128) {\\r\\n\\r\\n        //TODO: turn back to internal\\r\\n\\r\\n        return uint128(\\r\\n                    uint256(\\r\\n                        keccak256(\\r\\n                            abi.encodePacked(\\r\\n                                block.timestamp,\\r\\n                                block.difficulty,\\r\\n                                _tokenId,\\r\\n                                _address\\r\\n                                \\r\\n                            )\\r\\n                        )   \\r\\n                    )\\r\\n                );\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev internal function that mints a phoenix, generates its hash and base values, can be called by public or whistlist external functions.\\r\\n     * @param thisTokenId is the token id of the soon to be minted phoenix\\r\\n     * @param sender is the address to mint to\\r\\n     */\\r\\n    function mint(uint256 thisTokenId, address sender) internal {\\r\\n\\r\\n        tokenIdToPhoenix[thisTokenId] = Phoenix(\\r\\n            generateTraits(thisTokenId, sender),\\r\\n            1,\\r\\n            string(\\\"\\\")\\r\\n        );\\r\\n\\r\\n        _mint(sender, thisTokenId);\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev public mint function, mints the requested number of phoenixs.\\r\\n     * @param _amountToMint the number of phoenixs to mint in this transaction, limited to a max of 5\\r\\n     */\\r\\n    function mintPhoenix(uint _amountToMint) external payable {\\r\\n\\r\\n        require(publicMint == true, \\\"Minting isnt public at the moment\\\");\\r\\n\\r\\n        require(_amountToMint > 0, \\\"Enter a valid amount to mint\\\");\\r\\n\\r\\n        require(_amountToMint < 6, \\\"Attempting to mint too many\\\");\\r\\n\\r\\n        require(price * _amountToMint == msg.value, \\\"Incorrect ETH value\\\");\\r\\n\\r\\n        uint tokenId = totalSupply();\\r\\n        require(tokenId + _amountToMint < maxSupply, \\\"All tokens already minted\\\");\\r\\n\\r\\n        address sender = _msgSender();\\r\\n\\r\\n        for(uint i = 0; i < _amountToMint; i++) {\\r\\n        \\r\\n            mint(tokenId + i, sender);\\r\\n\\r\\n        }\\r\\n\\r\\n        blazeToken.updateTokens(sender);\\r\\n        \\r\\n        addressToLevels[sender] += _amountToMint;   \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints new Phoenix if the address is on the whitelist.\\r\\n     * @param _merkleProof the proof required to verify if this address is on the whilelist\\r\\n     * @param _amountToMint is the number of phoenixs requested to mint, limited based on the whitelist the user is on\\r\\n     * @param _merkleIndex is the index of the whitelist the user has submitted a proof for\\r\\n     */\\r\\n    function mintPhoenixWhiteList(bytes32[] calldata _merkleProof, uint _amountToMint, uint _merkleIndex) external payable {\\r\\n\\r\\n        require(_amountToMint > 0, \\\"Enter a valid amount to mint\\\");\\r\\n\\r\\n        uint thisTokenId = totalSupply();\\r\\n\\r\\n        require(price * _amountToMint == msg.value, \\\"Incorrect ETH value\\\");\\r\\n        require(thisTokenId + _amountToMint < maxSupply, \\\"All tokens already minted\\\");\\r\\n\\r\\n        address sender = _msgSender();\\r\\n\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(sender));\\r\\n\\r\\n        require(MerkleProof.verify(_merkleProof, roots[_merkleIndex], leaf), \\\"Invalid proof\\\");\\r\\n\\r\\n        require(numMinted[sender] + _amountToMint <= roleMaxMint[_merkleIndex], \\\"Trying to mint more than allowed\\\");\\r\\n\\r\\n        numMinted[sender] += _amountToMint;\\r\\n\\r\\n        for(uint i = 0; i < _amountToMint; i++) {\\r\\n            mint(thisTokenId + i, sender);\\r\\n        }\\r\\n\\r\\n        blazeToken.updateTokens(sender);\\r\\n\\r\\n        addressToLevels[sender] += _amountToMint;\\r\\n        \\r\\n    }\\r\\n\\r\\n    /** \\r\\n         __  __     ______   __     __         __     ______   __  __    \\r\\n        /\\\\ \\\\/\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\   /\\\\ \\\\       /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\   \\r\\n        \\\\ \\\\ \\\\_\\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\ \\\\  \\\\ \\\\ \\\\____  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\  \\r\\n         \\\\ \\\\_____\\\\    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\ \\r\\n          \\\\/_____/     \\\\/_/   \\\\/_/   \\\\/_____/   \\\\/_/     \\\\/_/   \\\\/_____/                                                          \\r\\n\\r\\n    */\\r\\n\\r\\n    /**\\r\\n    * @dev Levels up the chosen phoenix by the selected levels at the cost of blaze tokens\\r\\n    * @param _tokenId is the id of the phoenix to level up\\r\\n    * @param _levels is the number of levels to level up by\\r\\n    */\\r\\n    function levelUp(uint _tokenId, uint8 _levels) external {\\r\\n\\r\\n        address sender = _msgSender();\\r\\n\\r\\n        require(sender == ownerOf(_tokenId), \\\"Not owner of token\\\");\\r\\n\\r\\n        uint8 currentLevel = tokenIdToPhoenix[_tokenId].level;\\r\\n\\r\\n        uint8 level = currentLevel + _levels;\\r\\n\\r\\n        if(level >= 6) {\\r\\n\\r\\n            uint specialId = metadataHandler.getSpecialToken(0, _tokenId);\\r\\n\\r\\n            if(specialId == 0) {\\r\\n                require(level  <= 6, \\\"Cant level up to seven unless unique\\\");\\r\\n                require(totalLevelSix < maxLevelSix, \\\"Already max amount of levels 6 phoenixs created\\\");\\r\\n                totalLevelSix++;\\r\\n            } else {\\r\\n                require(level <= 7, \\\"Not even uniques can level past 7\\\");\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        uint cost;\\r\\n        for(uint8 i = currentLevel - 1; i < level; i++) {\\r\\n\\r\\n            cost += levelUpCosts[i];\\r\\n\\r\\n        }\\r\\n        \\r\\n        blazeToken.updateTokens(sender);\\r\\n\\r\\n        blazeToken.burn(sender, cost);\\r\\n\\r\\n        addressToLevels[sender] += uint(_levels);\\r\\n        tokenIdToPhoenix[_tokenId].level = level;\\r\\n\\r\\n        emit LeveledUp(_tokenId, sender);\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Makes sure the name is valid with the constraints set\\r\\n    * @param _name is the desired name to be verified\\r\\n    * @notice credits to cyberkongz\\r\\n    */ \\r\\n    function validateName(string memory _name) public pure returns (bool){\\r\\n\\r\\n        bytes memory byteString = bytes(_name);\\r\\n        \\r\\n        if(byteString.length == 0) return false;\\r\\n        \\r\\n        if(byteString.length >= 20) return false;\\r\\n\\r\\n        for(uint i; i < byteString.length; i++){\\r\\n\\r\\n            bytes1 character = byteString[i];\\r\\n\\r\\n            //limit the name to only have numbers, letters, or spaces\\r\\n            if(\\r\\n                !(character >= 0x30 && character <= 0x39) &&\\r\\n                !(character >= 0x41 && character <= 0x5A) &&\\r\\n                !(character >= 0x61 && character <= 0x7A) &&\\r\\n                !(character == 0x20)\\r\\n            )\\r\\n                return false;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Changes the name of the selected phoenix, at the cost of blaze tokens\\r\\n    * @param _name is the desired name to change the phoenix to\\r\\n    * @param _tokenId is the id of the token whos name will be changed\\r\\n    */\\r\\n    function changeName(string memory _name, uint _tokenId) external {\\r\\n\\r\\n        require(_msgSender() == ownerOf(_tokenId), \\\"Only the owner of this token can change the name\\\");\\r\\n\\r\\n        require(validateName(_name) == true, \\\"Invalid name\\\");\\r\\n\\r\\n        require(nameTaken[_name] == false, \\\"Name is already taken\\\");\\r\\n\\r\\n        string memory currentName = tokenIdToPhoenix[_tokenId].name;\\r\\n\\r\\n        blazeToken.burn(_msgSender(), nameCost);\\r\\n\\r\\n        if(bytes(currentName).length == 0) {\\r\\n\\r\\n            nameTaken[currentName] = false;\\r\\n\\r\\n        }\\r\\n\\r\\n        nameTaken[_name] = true;\\r\\n\\r\\n        tokenIdToPhoenix[_tokenId].name = _name;\\r\\n\\r\\n        emit NameChanged(_tokenId, _msgSender());\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev rerolls the traits of a phoenix, consuming blaze to rise anew from the ashes. This process happens with a slight delay to get info from the next resurection to take place\\r\\n    * @param _tokenId is the id of the phoenix to be reborn\\r\\n    */\\r\\n    function resurrect(uint _tokenId) external {\\r\\n\\r\\n        address sender = _msgSender();\\r\\n\\r\\n        require(sender == ownerOf(_tokenId), \\\"Only the owner of this token can resurect their phoenix\\\");\\r\\n        require(allowResurrection == true, \\\"Resurection isn't allowed at this time\\\");\\r\\n\\r\\n        blazeToken.burn(sender, resurrectCost);\\r\\n\\r\\n        uint128 hash = generateTraits(_tokenId, sender);\\r\\n\\r\\n        ResurrectionInfo memory prevRes = previousResurrection;\\r\\n\\r\\n        if(prevRes.hash != 0) {\\r\\n\\r\\n            uint128 newHash = uint128(\\r\\n                    uint256(\\r\\n                        keccak256(\\r\\n                            abi.encodePacked(\\r\\n                                block.timestamp,\\r\\n                                block.difficulty,\\r\\n                                prevRes.hash,\\r\\n                                hash,\\r\\n                                prevRes.tokenId     \\r\\n                            )\\r\\n                        )   \\r\\n                    )\\r\\n                );\\r\\n\\r\\n            Phoenix memory phoenix = tokenIdToPhoenix[prevRes.tokenId];\\r\\n\\r\\n            phoenix.hash = newHash;\\r\\n\\r\\n            tokenIdToPhoenix[prevRes.tokenId] = phoenix;\\r\\n\\r\\n        }\\r\\n\\r\\n        metadataHandler.resurrect(resurrectionId, _tokenId);\\r\\n\\r\\n        previousResurrection = ResurrectionInfo(_tokenId, hash);\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n         ______     ______     ______     _____    \\r\\n        /\\\\  == \\\\   /\\\\  ___\\\\   /\\\\  __ \\\\   /\\\\  __-.  \\r\\n        \\\\ \\\\  __<   \\\\ \\\\  __\\\\   \\\\ \\\\  __ \\\\  \\\\ \\\\ \\\\/\\\\ \\\\ \\r\\n         \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\____- \\r\\n          \\\\/_/ /_/   \\\\/_____/   \\\\/_/\\\\/_/   \\\\/____/ \\r\\n                                           \\r\\n    */\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns metadata for the token by asking for it from the set metadata manager, which generates the metadata all on chain\\r\\n     * @param _tokenId is the id of the phoenix requesting its metadata.\\r\\n     */\\r\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\r\\n        require(_exists(_tokenId));\\r\\n\\r\\n        Phoenix memory _phoenix = tokenIdToPhoenix[_tokenId];\\r\\n\\r\\n        MetadataStruct memory metaDataStruct = MetadataStruct(_tokenId,\\r\\n                        0,\\r\\n                            6,\\r\\n                                \\\"5000 Onchain Immortal Phoenix risen from the ashes onto the Ethereum blockchain ready to take nft land by storm.\\\",\\r\\n                                    \\\"iVBORw0KGgoAAAANSUhEUgAAADAAAAAwAgMAAAAqbBEUAAAAAXNSR0IArs4c6QAAAAxQTFRFAAAAuo+P+vr6/f3+BbtU0AAAAMNJREFUKM+t0b0NwyAQBeBHFBrXQezgKRiBgpOriFHwKC4t78MoqZM7QDaW8tPkWUJ8MveEbDy74A94TDtyzAcoBsvMUeDv3mZKJK/hyJlgyFsBCDoocgUqADcYZwq8gjw6MbRXDhwVBa4CU4UvMAKoawEPMVp4CEemhnHlxTZsW2ko+8syzNxQMcyXReoqAIZ6A3xBVyB9HUZ0x9Zy02OEb9owy2p/oeYjXDfD336HJpr2QyblDuX/tOgTUgd1QuwAxgtmj7BFtSVEWwAAAABJRU5ErkJggg==\\\"\\r\\n                                        );\\r\\n\\r\\n        \\r\\n\\r\\n        string memory metaData = metadataHandler.tokenURI(\\r\\n            _phoenix,\\r\\n                metaDataStruct\\r\\n                    );\\r\\n\\r\\n        return metaData;\\r\\n\\r\\n        \\r\\n    }\\r\\n\\r\\n    function getLastResurrection() public view returns (ResurrectionInfo memory) {\\r\\n\\r\\n        return previousResurrection;\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev returns the total levels of phoenixs a user has, used by the blaze contract to calculate token generation rate\\r\\n    * @param _userAddress is the address in question\\r\\n    */\\r\\n    function getTotalLevels(address _userAddress) external view returns(uint) {\\r\\n\\r\\n        return addressToLevels[_userAddress];\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the info about a given phoenix token\\r\\n     * @param _tokenId of desired phoenix\\r\\n    */\\r\\n    function getPhoenixFromId(uint _tokenId) public view returns(Phoenix memory) {\\r\\n        require(_tokenId < totalSupply(), \\\"Token id outside range\\\");\\r\\n        return tokenIdToPhoenix[_tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an array of token ids the address owns, mainly for frontend use, and helps with limitations set by storing less info\\r\\n     * @param _addr address of interest\\r\\n    */\\r\\n    function getPhoenixesOfAddress(address _addr) public view returns(uint[] memory) {\\r\\n\\r\\n        uint[] memory tempArray;\\r\\n\\r\\n        if(addressToLevels[_addr] == 0) {\\r\\n            return tempArray;\\r\\n        }\\r\\n\\r\\n        tempArray = new uint[](addressToLevels[_addr]);\\r\\n        uint total = 0;\\r\\n        for(uint i = 0; i < totalSupply(); i++) {\\r\\n            if(_owners[i] == _addr) {\\r\\n                tempArray[total] = i;\\r\\n                total++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint[] memory finalArray = new uint[](total);\\r\\n        for(uint i = 0; i < total; i++) {\\r\\n            finalArray[i] = tempArray[i];\\r\\n        }\\r\\n        \\r\\n        return finalArray;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n         ______     __     __     __   __     ______     ______    \\r\\n        /\\\\  __ \\\\   /\\\\ \\\\  _ \\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\  ___\\\\   /\\\\  == \\\\   \\r\\n        \\\\ \\\\ \\\\/\\\\ \\\\  \\\\ \\\\ \\\\/ \\\".\\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\  __\\\\   \\\\ \\\\  __<   \\r\\n         \\\\ \\\\_____\\\\  \\\\ \\\\__/\\\".~\\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\ \\\\_\\\\ \\r\\n          \\\\/_____/   \\\\/_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_____/   \\\\/_/ /_/ \\r\\n                                                           \\r\\n    */\\r\\n\\r\\n    /**\\r\\n    * @dev Sets the blaze token contract\\r\\n    * @param _tokenAddress address of the blaze token\\r\\n    */\\r\\n    function setBlazeToken(address _tokenAddress) external onlyOwner {\\r\\n        blazeToken = IBlazeToken(_tokenAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev sets the contract interface to interact with the metadata handler, which generates the phoenixs metadata on chain\\r\\n    * @param _metaAddress is the address of the metadata handler\\r\\n    */\\r\\n    function setMetadataHandler(address _metaAddress) external onlyOwner {\\r\\n        metadataHandler = IMetadataHandler(_metaAddress);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    * @dev mint function called once after deploying the contract to reward the teams hard work, 2 will be minted for each team member, to a total of 8\\r\\n    * @param addresses is an array of addresses of the devs that can mint\\r\\n    * @param numEach is the number of phoenixs minted per address\\r\\n    */\\r\\n    function devMint(address[] calldata addresses, uint numEach) external onlyOwner {\\r\\n\\r\\n        uint supply = totalSupply();\\r\\n\\r\\n        require(supply + (addresses.length * numEach) <= 8, \\\"Trying to mint more than you should\\\");\\r\\n\\r\\n        for(uint i = 0; i < addresses.length; i++) {\\r\\n\\r\\n            address addr = addresses[i];\\r\\n\\r\\n            for(uint j = 0; j < numEach; j++) {\\r\\n                mint(supply, addr);\\r\\n                supply++;\\r\\n            }\\r\\n\\r\\n            addressToLevels[addr] += numEach;\\r\\n\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Withdraw ether from this contract to the team for the agreed amounts, only callable by the owner\\r\\n     */\\r\\n    function withdraw() external onlyOwner {\\r\\n\\r\\n        address thisAddress = address(this);\\r\\n\\r\\n        require(thisAddress.balance > 0, \\\"there is no balance in the address\\\");\\r\\n        require(payments.length > 0, \\\"havent set the payments\\\");\\r\\n\\r\\n        for(uint i = 0; i < payments.length; i++) {\\r\\n\\r\\n            if(thisAddress.balance == 0) {\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            PaymentStruct memory payment = payments[i];\\r\\n\\r\\n            uint paymentLeft = payment.owed - payment.payed;\\r\\n\\r\\n            if(paymentLeft > 0) {\\r\\n\\r\\n                uint amountToPay;\\r\\n\\r\\n                if(thisAddress.balance >= paymentLeft) {\\r\\n\\r\\n                    amountToPay = paymentLeft;\\r\\n\\r\\n\\r\\n                } else {\\r\\n                    amountToPay = thisAddress.balance;\\r\\n                }\\r\\n\\r\\n                payment.payed += amountToPay;\\r\\n                payments[i].payed = payment.payed;\\r\\n\\r\\n                payable(payment.membersAddress).transfer(amountToPay);\\r\\n\\r\\n            } \\r\\n\\r\\n        }\\r\\n\\r\\n        if(thisAddress.balance > 0) {\\r\\n\\r\\n            payable(payments[payments.length - 1].membersAddress).transfer(thisAddress.balance);\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev sets the root of the merkle tree, used to verify whitelist addresses\\r\\n    * @param _root the root of the merkle tree\\r\\n    */\\r\\n    function setMerkleRoots(bytes32[] calldata _root) external onlyOwner {\\r\\n        roots = _root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Lowers the max supply in case minting doesnt sell out\\r\\n    * @param _newMaxSupply the new, and lower max supply\\r\\n    */ \\r\\n    function lowerMaxSupply(uint _newMaxSupply) external onlyOwner {\\r\\n        require(_newMaxSupply >= totalSupply());\\r\\n        require(_newMaxSupply < maxSupply);\\r\\n\\r\\n        maxSupply = uint16(_newMaxSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev toggles the ability for anyone to mint to whitelist only, of vice versa\\r\\n    */\\r\\n    function togglePublicMint() external onlyOwner {\\r\\n        publicMint = !publicMint;\\r\\n    }\\r\\n\\r\\n    // @notice Will receive any eth sent to the contract\\r\\n    receive() external payable {\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Reverts the name back to the base initial name, will be used by the team to revert offensive names\\r\\n    * @param _tokenId token id to be reverted\\r\\n    */\\r\\n    function revertName(uint _tokenId) external onlyOwner {\\r\\n\\r\\n        tokenIdToPhoenix[_tokenId].name = \\\"\\\"; \\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Toggle the ability to resurect phoenix tokens and reroll traits\\r\\n    */\\r\\n    function toggleResurrection() public onlyOwner {\\r\\n        allowResurrection = !allowResurrection;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Give out mythics to phoenixs that have resurrected recently\\r\\n    * @param _numMythics is the number of mythics that will be given out\\r\\n    */\\r\\n    function rewardMythics(uint _numMythics) external onlyOwner {\\r\\n\\r\\n        require(allowResurrection == false, \\\"Need to have resurrection paused mythics are rewarded\\\");\\r\\n        metadataHandler.rewardMythics(resurrectionId, _numMythics);\\r\\n\\r\\n        toggleResurrection();\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Allows the owner to raise the max level six cap, but only by 100 at a time\\r\\n    * @param _newMax is the new level six cap to be set\\r\\n    */\\r\\n    function raiseMaxLevelSix(uint8 _newMax) external onlyOwner {\\r\\n\\r\\n        require(_newMax > maxLevelSix, \\\"Need to set the new max to be larger\\\");\\r\\n\\r\\n        require(_newMax - maxLevelSix <= 100, \\\"Can't raise it by more than 100 at a time\\\");\\r\\n\\r\\n        maxLevelSix = _newMax;\\r\\n\\r\\n    }\\r\\n\\r\\n    function setRessurectionId(uint _id) external onlyOwner {\\r\\n\\r\\n        resurrectionId = _id;\\r\\n\\r\\n    } \\r\\n\\r\\n    function setBlazeCosts(uint _nameCost, uint _resurrectCost) external onlyOwner {\\r\\n\\r\\n        nameCost = _nameCost;\\r\\n        resurrectCost = _resurrectCost;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n         ______     __   __   ______     ______     ______     __     _____     ______    \\r\\n        /\\\\  __ \\\\   /\\\\ \\\\ / /  /\\\\  ___\\\\   /\\\\  == \\\\   /\\\\  == \\\\   /\\\\ \\\\   /\\\\  __-.  /\\\\  ___\\\\   \\r\\n        \\\\ \\\\ \\\\/\\\\ \\\\  \\\\ \\\\ \\\\'/   \\\\ \\\\  __\\\\   \\\\ \\\\  __<   \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\/\\\\ \\\\ \\\\ \\\\  __\\\\   \\r\\n         \\\\ \\\\_____\\\\  \\\\ \\\\__|    \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\____-  \\\\ \\\\_____\\\\ \\r\\n          \\\\/_____/   \\\\/_/      \\\\/_____/   \\\\/_/ /_/   \\\\/_/ /_/   \\\\/_/   \\\\/____/   \\\\/_____/ \\r\\n                                                                                  \\r\\n    */\\r\\n\\r\\n    /**\\r\\n    * @dev Override the transfer function to update the blaze token contract\\r\\n    */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public override {\\r\\n\\r\\n        blazeToken.updateTransfer(from, to);\\r\\n\\r\\n        uint level = uint(tokenIdToPhoenix[tokenId].level);\\r\\n\\r\\n        addressToLevels[from] -= level;\\r\\n        addressToLevels[to] += level;\\r\\n\\r\\n        ERC721Cheap.transferFrom(from, to, tokenId);\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Override the transfer function to update the blaze token contract\\r\\n    */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public override {\\r\\n\\r\\n\\r\\n        blazeToken.updateTransfer(from, to);\\r\\n\\r\\n        uint level = uint(tokenIdToPhoenix[tokenId].level);\\r\\n\\r\\n        addressToLevels[from] -= level;\\r\\n        addressToLevels[to] += level;\\r\\n\\r\\n        ERC721Cheap.safeTransferFrom(from, to, tokenId, _data);\\r\\n\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/src/contracts/ERC721EnumerableCheap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\nimport \\\"./ERC721Cheap.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\r\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\r\\n * account.\\r\\n * Altered to remove all storage variables to make minting and transfers cheaper, at the cost of more time to query\\r\\n * \\r\\n */\\r\\nabstract contract ERC721EnumerableCheap is ERC721Cheap, IERC721Enumerable {\\r\\n    \\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721Cheap) returns (bool) {\\r\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n     * Altered to loop through tokens rather thsn grab from stored map\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\r\\n\\r\\n        uint ownerIndex;\\r\\n        uint supply = totalSupply();\\r\\n       \\r\\n        for(uint i = 0; i < supply; i++) {\\r\\n\\r\\n            if(_owners[i] == owner) {\\r\\n                if(ownerIndex == index) {\\r\\n                    return i;\\r\\n                }\\r\\n\\r\\n                ownerIndex++;\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        //Need to catch this case additionally, can't call revert with a message so ill make sure it catches\\r\\n        require(true == false, \\\"ERC721Enumerable: owner index out of bounds\\\");\\r\\n        \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-totalSupply}.\\r\\n     * Altered to use the ERC721Cheap _owners array instead of _allTokens\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _owners.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n     * Altered to use ERC721Cheap _owners array instead of _allTokens\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index < ERC721EnumerableCheap.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    \\r\\n}\\r\\n\"\r\n    },\r\n    \"/src/contracts/ERC721Cheap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension, _owners \\r\\n *\\r\\n * Altered _owners to an array and removed _balances, to allow for a cheaper {Erc721Enumerable} implementation at the cost of time\\r\\n * to query ownership of tokens\\r\\n */\\r\\ncontract ERC721Cheap is Context, ERC165, IERC721, IERC721Metadata {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Array of token ID to owner address, set to internal to give {ERC721EnumerableCheap} access\\r\\n    address[] internal _owners;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     * altered to remove the need to set a balances map\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n\\r\\n        uint balance;\\r\\n        uint totalSupply = _owners.length;\\r\\n\\r\\n        for(uint i = 0; i < totalSupply; i++) {\\r\\n            if(owner == _owners[i]) balance++;\\r\\n        }\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        require(tokenId < _owners.length, \\\"token does now exist\\\");\\r\\n        address owner = _owners[tokenId];\\r\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overriden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721Cheap.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n\\r\\n     \\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     *\\r\\n     * Altered to check from the _owners array instead of map \\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return tokenId < _owners.length;\\r\\n        //return _owners[tokenId] != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n        address owner = ERC721Cheap.ownerOf(tokenId);\\r\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Altered to add to _owners array instead of a map\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n        _owners.push(to);\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     * \\r\\n     * Altered to set the address of the token to the burn address instead of removing it\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721Cheap.ownerOf(tokenId);\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _owners[tokenId] = address(0);\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Altered to not use the balances map\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        require(ERC721Cheap.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721Cheap.ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver.onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n                } else {\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blazeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_metadataHandlerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_roleMaxMint\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"membersAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"owed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payed\",\"type\":\"uint256\"}],\"internalType\":\"struct PaymentStruct[]\",\"name\":\"_payments\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"LeveledUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"changeName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"numEach\",\"type\":\"uint256\"}],\"name\":\"devMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastResurrection\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"hash\",\"type\":\"uint128\"}],\"internalType\":\"struct ResurrectionInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPhoenixFromId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"hash\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Phoenix\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPhoenixesOfAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getTotalLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_levels\",\"type\":\"uint8\"}],\"name\":\"levelUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"lowerMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLevelSix\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToMint\",\"type\":\"uint256\"}],\"name\":\"mintPhoenix\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_merkleIndex\",\"type\":\"uint256\"}],\"name\":\"mintPhoenixWhiteList\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newMax\",\"type\":\"uint8\"}],\"name\":\"raiseMaxLevelSix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"resurrect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resurrectCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"revertName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numMythics\",\"type\":\"uint256\"}],\"name\":\"rewardMythics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nameCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_resurrectCost\",\"type\":\"uint256\"}],\"name\":\"setBlazeCosts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setBlazeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_root\",\"type\":\"bytes32[]\"}],\"name\":\"setMerkleRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metaAddress\",\"type\":\"address\"}],\"name\":\"setMetadataHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setRessurectionId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePublicMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleResurrection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLevelSix\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"validateName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ImmortalPhoenix","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000002a5c31b362729831319f849229b24a7b6badec630000000000000000000000008a6f6a9dfa66004464bbf727acc9c44cd71025f70000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000003000000000000000000000000e27af80d854d5c1092142c516c244f38cc266a3f000000000000000000000000000000000000000000000001e5b8fa8fe2ac0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000068e9668f2c5ee3d0fd6c076e71cf3cac912ef0140000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008e9c330a1384eddcddf325e20885ae3502d8d2ce00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}