{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n// SVG exporter for Etholvants - 0x1fFF1e9e963f07AC4486503E5a35e71f4e9Fb9FD\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IEtholvants {\r\n\tfunction getCellPositions(\r\n        uint256 tokenId,\r\n        uint256 cursor,\r\n        uint256 limit\r\n    ) external view returns (uint256, uint256[] memory);\r\n\tfunction getNumCells(uint256 tokenId) external view returns (uint256);\r\n\tfunction getSize(uint256 numCells) external pure returns (uint256);\r\n}\r\n\r\ncontract EtholvantsSVG {\r\n\taddress public etholvants = 0x1fFF1e9e963f07AC4486503E5a35e71f4e9Fb9FD;\r\n\r\n\tfunction uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len;\r\n        while (_i != 0) {\r\n            k = k-1;\r\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\r\n            bytes1 b1 = bytes1(temp);\r\n            bstr[k] = b1;\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n\t/**\r\n     * @dev returns the SVG representation of the Etholvant.\r\n\t *  result is paginated.\r\n     *  pass cursor as 0 at the beginning.\r\n     *  cursor will be returned 0 at the end.\r\n     */\r\n\tfunction getTokenSVG(uint tokenId, uint cursor, uint limit) public view returns (uint, string memory) {\r\n\t\tuint[] memory cells;\r\n\t\tstring memory svg;\r\n\t\tIEtholvants ethol = IEtholvants(etholvants);\r\n\t\tuint numCells = ethol.getNumCells(tokenId);\r\n\t\tuint size = ethol.getSize(numCells);\r\n\r\n\t\tif (cursor == 0) {\r\n\t\t\tstring memory sizeStr = uint2str(size);\r\n\t\t\tsvg = string(abi.encodePacked('<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ', sizeStr, ' ', sizeStr, '\"><path d=\"'));\r\n\t\t}\r\n\t\t(cursor, cells) = ethol.getCellPositions(tokenId, cursor, limit);\r\n\t\tfor (uint i=0; i<cells.length; i++) {\r\n\t\t\tuint x = cells[i] % size;\r\n\t\t\tuint y = cells[i] / size;\r\n\t\t\tsvg = string(abi.encodePacked(svg, 'M', uint2str(x), ',', uint2str(y), 'v1h1v-1'));\r\n\t\t}\r\n\r\n\t\tif (cursor == 0) {\r\n\t\t\tsvg = string(abi.encodePacked(svg, '\"/></svg>'));\r\n\t\t}\r\n\t\treturn (cursor, svg);\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"name\":\"etholvants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getTokenSVG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EtholvantsSVG","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9d8e7433e873323fbc146483c23a898ce1d565c5f0555ce90cf120a25509244f"}]}