{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\ninterface IUniswapV2Pair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract Staking {\r\n    address public owner;\r\n\r\n    IERC20 public constant mainToken = IERC20(0x9D0B65a76274645B29e4cc41B8f23081fA09f4A3);\r\n    IERC20 public constant boostToken = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    IUniswapV2Pair private constant WETH_USDTPair = IUniswapV2Pair(0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852);\r\n    IUniswapV2Pair private constant LIME_WETHPair = IUniswapV2Pair(0xa9C511Bc021a039d5a39b95511840A7f2bB66C15);\r\n\r\n    uint256 private requiredUSDT = 0;\r\n    uint256 private limit = 10000000000;\r\n\r\n    event TransferOwnership(address owner, address _newOwner);\r\n    event Staked(address _client, uint256 period, uint256 limeAmount, uint256 usdtAmount, bool Stacked);\r\n    event Unstaked(address _client, uint256 period, uint256 limeAmount, uint256 usdtAmount, bool Unstacked);\r\n    event Returned(address _client, uint256 limeAmount);\r\n    event ReturnedByOwner(address _client, uint256 limeAmount);\r\n    event LimitIsUpdated(uint256 _newLimit);\r\n\r\n    modifier restricted() {\r\n        require(msg.sender == owner, 'This function is restricted to owner');\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public restricted {\r\n        require(_newOwner != address(0), 'Invalid address: should not be 0x0');\r\n        emit TransferOwnership(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    struct Stake {\r\n        uint256 start;\r\n        uint256 period;\r\n        uint256 LIMEAmount;\r\n        uint256 USDTAmount;\r\n    }\r\n    uint256[] private periods;\r\n    uint256[] private amounts;\r\n    uint256[][] private rates;\r\n    address[] private users;\r\n\r\n    mapping(address => bool) private isStaker;\r\n    mapping(address => Stake[]) private userStakesInfo;\r\n    mapping(address => Stake) public stakes;\r\n\r\n    function stake(uint8 _period, uint8 _amount) public {\r\n        require(stakes[msg.sender].start == 0, 'Already staking');\r\n        require(_period < periods.length, 'Invalid period');\r\n        require(_amount < amounts.length, 'Invalid amount!');\r\n        uint256 limeAmount = amounts[_amount] * 1e18;\r\n        uint256 stakingPeriod = periods[_period] * 86400;\r\n        uint256 limeBonusAmount = (limeAmount * rates[_period][_amount]) / 1e3;\r\n        uint256 usdtAmount = getUSDTPrice(limeBonusAmount);\r\n        require(requiredUSDT + usdtAmount <= limit, 'USDT limit exceeded, connect with owner');\r\n        require(mainToken.transferFrom(msg.sender, address(this), limeAmount), 'Transfer is failed check your wallet balance');\r\n        stakes[msg.sender] = Stake({start: block.timestamp, period: stakingPeriod, LIMEAmount: limeAmount, USDTAmount: usdtAmount});\r\n        userStakesInfo[msg.sender].push(stakes[msg.sender]);\r\n        requiredUSDT += usdtAmount;\r\n        if (!isStaker[msg.sender]) {\r\n            users.push(msg.sender);\r\n            isStaker[msg.sender] = true;\r\n        }\r\n        emit Staked(msg.sender, stakingPeriod, limeAmount, usdtAmount, true);\r\n    }\r\n\r\n    function unstake() public {\r\n        require(stakes[msg.sender].start != 0, 'Not staking!');\r\n        Stake storage _s = stakes[msg.sender];\r\n        require(block.timestamp >= _s.start + _s.period, 'Period not passed yet');\r\n        require(mainToken.transfer(msg.sender, _s.LIMEAmount), 'Transfer failed, check contract balance');\r\n        require(boostToken.transfer(msg.sender, _s.USDTAmount), 'Transfer failed, check contract balance');\r\n        requiredUSDT -= _s.USDTAmount;\r\n        emit Unstaked(msg.sender, _s.period, _s.LIMEAmount, _s.USDTAmount, true);\r\n        delete stakes[msg.sender];\r\n    }\r\n\r\n    function getUSDTPrice(uint256 _amount) public view returns (uint256) {\r\n        (uint256 ml, uint256 me, ) = LIME_WETHPair.getReserves();\r\n        (uint256 ne, uint256 nu, ) = WETH_USDTPair.getReserves();\r\n        return (_amount * me * nu) / (ml * ne);\r\n    }\r\n\r\n    function returnLimebyOwner(address _client) public restricted {\r\n        require(stakes[_client].start != 0, 'Not staking!');\r\n        Stake storage _s = stakes[_client];\r\n        require(mainToken.transfer(_client, _s.LIMEAmount), 'Transfer failed, check contract balance');\r\n        requiredUSDT -= _s.USDTAmount;\r\n        emit ReturnedByOwner(_client, _s.LIMEAmount);\r\n        delete stakes[_client];\r\n    }\r\n\r\n    function getBoostBalance() public view restricted returns (uint256, uint256) {\r\n        return (boostToken.balanceOf(address(this)), requiredUSDT);\r\n    }\r\n\r\n    function dispenseUSDT(address _to, uint256 _amount) public restricted {\r\n        require(_to != address(0), \"Address can't be 0x0\");\r\n        require(_amount > 0, 'Amount must be > 0');\r\n        require(_amount <= boostToken.balanceOf(address(this)), 'Contract balance is not enough');\r\n        require(boostToken.transfer(_to, _amount), 'transferFailed');\r\n    }\r\n\r\n    function updateLimit(uint256 _newLimit) public restricted {\r\n        limit = _newLimit;\r\n        emit LimitIsUpdated(_newLimit);\r\n    }\r\n\r\n    function getLimit() public view restricted returns (uint256) {\r\n        return limit;\r\n    }\r\n\r\n    function returnLime() public {\r\n        require(stakes[msg.sender].start != 0, 'Not staking!');\r\n        Stake storage _s = stakes[msg.sender];\r\n        require(mainToken.transfer(msg.sender, _s.LIMEAmount), 'Transfer failed, check contract balance');\r\n        requiredUSDT -= _s.USDTAmount;\r\n        emit Returned(msg.sender, _s.LIMEAmount);\r\n        delete stakes[msg.sender];\r\n    }\r\n\r\n    function setAmountsByArray(uint256[] memory _array) public restricted {\r\n        amounts = _array;\r\n    }\r\n\r\n    function setPeriodsByArray(uint256[] memory _array) public restricted {\r\n        periods = _array;\r\n    }\r\n\r\n    function setRatesByArray(uint256[][] memory _array) public restricted {\r\n        rates = _array;\r\n    }\r\n\r\n    function setItemToRates(\r\n        uint256 _row,\r\n        uint256 _col,\r\n        uint256 _value\r\n    ) public restricted {\r\n        uint256 length = rates.length;\r\n        if (_row >= length) for (uint256 i = 0; i <= _row - length; i++) rates.push();\r\n        length = rates[_row].length;\r\n        if (_col >= length) for (uint256 i = 0; i <= _col - length; i++) rates[_row].push();\r\n        rates[_row][_col] = _value;\r\n    }\r\n\r\n    function removeItemFromRates(uint256 _row, uint256 _col) public restricted {\r\n        require(rates.length > 0, 'Array is empty!');\r\n        require(_row < rates.length, 'Index _row is out of bounds!');\r\n        require(rates[_row].length > 0, 'Array row is empty!');\r\n        require(_col < rates[_row].length, 'Index _col is out of bounds!');\r\n        for (uint256 i = _col; i < rates[_row].length - 1; i++) rates[_row][i] = rates[_row][i + 1];\r\n        rates[_row].pop();\r\n    }\r\n\r\n    function initDefaultValues() public restricted {\r\n        periods = [90, 180, 360];\r\n        amounts = [20000, 60000, 120000, 260000, 510000, 900000];\r\n        rates = [[26, 28, 30, 32, 34, 36], [65, 70, 75, 80, 85, 90], [162, 169, 176, 183, 190, 197]];\r\n    }\r\n\r\n    function getInfos() public view returns (uint256[] memory _amounts, uint256[] memory _periods, uint256[][] memory _rates) {\r\n        _amounts = amounts;\r\n        _periods = periods;\r\n        _rates = rates;\r\n    }\r\n\r\n    function getCurrentStakes() public view restricted returns (address[] memory list, Stake[] memory s) {\r\n        list = users;\r\n        s = new Stake[](users.length);\r\n        for (uint256 i = 0; i < users.length; i++) s[i] = stakes[users[i]];\r\n    }\r\n\r\n    function getUserStakesInfo(address _user) public view restricted returns (Stake[] memory) {\r\n        return userStakesInfo[_user];\r\n    }\r\n\r\n    function getUsers() public view restricted returns (address[] memory) {\r\n        return users;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        initDefaultValues();\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"LimitIsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limeAmount\",\"type\":\"uint256\"}],\"name\":\"Returned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limeAmount\",\"type\":\"uint256\"}],\"name\":\"ReturnedByOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Stacked\",\"type\":\"bool\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Unstacked\",\"type\":\"bool\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"boostToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"dispenseUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBoostBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentStakes\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LIMEAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"USDTAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.Stake[]\",\"name\":\"s\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfos\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_periods\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_rates\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getUSDTPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakesInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LIMEAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"USDTAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initDefaultValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"}],\"name\":\"removeItemFromRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnLime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"}],\"name\":\"returnLimebyOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_array\",\"type\":\"uint256[]\"}],\"name\":\"setAmountsByArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_row\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_col\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setItemToRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_array\",\"type\":\"uint256[]\"}],\"name\":\"setPeriodsByArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"_array\",\"type\":\"uint256[][]\"}],\"name\":\"setRatesByArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_period\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_amount\",\"type\":\"uint8\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LIMEAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"USDTAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"updateLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Staking","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://07ee9e56278a414045b7f68458aa5380172c45b4b672a91c1ebf50fcbb766f53"}]}