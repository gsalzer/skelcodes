{"status":"1","message":"OK","result":[{"SourceCode":"// File contracts/types/Ownable.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\ncontract Ownable {\r\n\r\n    address public policy;\r\n\r\n    constructor () {\r\n        policy = msg.sender;\r\n    }\r\n\r\n    modifier onlyPolicy() {\r\n        require( policy == msg.sender, \"Ownable: caller is not the owner\" );\r\n        _;\r\n    }\r\n    \r\n    function transferManagment(address _newOwner) external onlyPolicy() {\r\n        require( _newOwner != address(0) );\r\n        policy = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/OlympusProSubsidyRouter.sol\r\n\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\ninterface IBond {\r\n    function paySubsidy() external returns ( uint );\r\n}\r\n\r\n// Immutable contract routes between Olympus Pro bonds and subsidy controllers\r\n// Allows for subsidies on bonds offered through bond contracts\r\ncontract OPSubsidyRouter is Ownable {\r\n\r\n    mapping( address => address ) public bondForController; // maps bond contract managed by subsidy controller\r\n\r\n    /**\r\n     *  @notice subsidy controller fetches and resets payout counter\r\n     *  @return uint\r\n     */\r\n    function getSubsidyInfo() external returns ( uint ) {\r\n        require( bondForController[ msg.sender ] != address(0), \"Address not mapped\" );\r\n        return IBond( bondForController[ msg.sender ] ).paySubsidy();\r\n    }\r\n\r\n    /**\r\n     *  @notice add new subsidy controller for bond contract\r\n     *  @param _bond address\r\n     *  @param _subsidyController address\r\n     */\r\n    function addSubsidyController( address _bond, address _subsidyController ) external onlyPolicy() {\r\n        require( _bond != address(0) );\r\n        require( _subsidyController != address(0) );\r\n\r\n        bondForController[ _subsidyController ] = _bond;\r\n    }\r\n\r\n    /**\r\n     *  @notice remove subsidy controller for bond contract\r\n     *  @param _subsidyController address\r\n     */\r\n    function removeSubsidyController( address _subsidyController ) external onlyPolicy() {\r\n        bondForController[ _subsidyController ] = address(0);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_subsidyController\",\"type\":\"address\"}],\"name\":\"addSubsidyController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondForController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubsidyInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subsidyController\",\"type\":\"address\"}],\"name\":\"removeSubsidyController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferManagment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OPSubsidyRouter","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d394e1788e152cd9246d4e35b0509a904baf8889b2fe58060912798d412099d8"}]}