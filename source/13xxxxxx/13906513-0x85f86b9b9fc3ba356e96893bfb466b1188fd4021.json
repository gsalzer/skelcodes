{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Booster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./Interfaces.sol\\\";\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\nimport '@openzeppelin/contracts/utils/Address.sol';\\r\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\r\\n\\r\\n\\r\\ncontract Booster {\\r\\n    using SafeMath for uint;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n\\r\\n    address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\\r\\n    address public constant registry = address(0x0000000022D53366457F9d5E68Ec105046FC4383);\\r\\n    uint256 public constant distributionAddressId = 4;\\r\\n    address public constant voteOwnership = address(0xE478de485ad2fe566d49342Cbd03E49ed7DB3356);\\r\\n    address public constant voteParameter = address(0xBCfF8B0b9419b9A88c44546519b1e909cF330399);\\r\\n\\r\\n    uint256 public duckStakerIncentive = 0; //incentive to native token stakers\\r\\n    uint256 public earmarkIncentive = 100; //incentive to users who spend gas to make calls\\r\\n    uint256 public platformFee = 0; //possible fee to build treasury\\r\\n    uint256 public constant MaxFees = 2000;\\r\\n    uint256 public constant FEE_DENOMINATOR = 10000;\\r\\n\\r\\n    address public owner;\\r\\n    address public feeManager;\\r\\n    address public poolManager;\\r\\n    address public immutable staker;\\r\\n    address public rewardFactory;\\r\\n    address public stashFactory;\\r\\n    address public tokenFactory;\\r\\n    address public rewardArbitrator;\\r\\n    address public voteDelegate;\\r\\n    address public treasury;\\r\\n    address public stakerRewards; // CRV for DUCK\\r\\n    address public lockFees; // 3CRV for uveCRV, no additional fees applied\\r\\n    address public feeDistro;\\r\\n    address public feeToken;\\r\\n\\r\\n    bool public isShutdown;\\r\\n\\r\\n    struct PoolInfo {\\r\\n        address lptoken;\\r\\n        address token;\\r\\n        address gauge;\\r\\n        address crvRewards;\\r\\n        address stash;\\r\\n        bool shutdown;\\r\\n    }\\r\\n\\r\\n    //index(pid) -> pool\\r\\n    PoolInfo[] public poolInfo;\\r\\n    mapping(address => bool) public gaugeMap;\\r\\n\\r\\n    address public preDepositChecker;\\r\\n\\r\\n    event Deposited(address indexed user, uint256 indexed poolid, uint256 amount);\\r\\n    event Withdrawn(address indexed user, uint256 indexed poolid, uint256 amount);\\r\\n\\r\\n    // We dont need `minter` since we dont have an additional reward token\\r\\n    constructor(address _staker) {\\r\\n        isShutdown = false;\\r\\n        staker = _staker;\\r\\n        owner = msg.sender;\\r\\n        voteDelegate = msg.sender;\\r\\n        feeManager = msg.sender;\\r\\n        poolManager = msg.sender;\\r\\n        feeDistro = address(0); //address(0xA464e6DCda8AC41e03616F95f4BC98a13b8922Dc);\\r\\n        feeToken = address(0); //address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\\r\\n        treasury = address(0);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// SETTER SECTION ///\\r\\n\\r\\n    function setOwner(address _owner) external {\\r\\n        require(msg.sender == owner, \\\"!auth\\\");\\r\\n        owner = _owner;\\r\\n    }\\r\\n\\r\\n    function setFeeManager(address _feeM) external {\\r\\n        require(msg.sender == feeManager, \\\"!auth\\\");\\r\\n        feeManager = _feeM;\\r\\n    }\\r\\n\\r\\n    function setPoolManager(address _poolM) external {\\r\\n        require(msg.sender == poolManager, \\\"!auth\\\");\\r\\n        poolManager = _poolM;\\r\\n    }\\r\\n\\r\\n    function setFactories(address _rfactory, address _sfactory, address _tfactory) external {\\r\\n        require(msg.sender == owner, \\\"!auth\\\");\\r\\n\\r\\n        //reward factory only allow this to be called once even if owner\\r\\n        //removes ability to inject malicious staking contracts\\r\\n        //token factory can also be immutable\\r\\n        if (rewardFactory == address(0)) {\\r\\n            rewardFactory = _rfactory;\\r\\n            tokenFactory = _tfactory;\\r\\n        }\\r\\n\\r\\n        //stash factory should be considered more safe to change\\r\\n        //updating may be required to handle new types of gauges\\r\\n        stashFactory = _sfactory;\\r\\n    }\\r\\n\\r\\n    function setArbitrator(address _arb) external {\\r\\n        require(msg.sender == owner, \\\"!auth\\\");\\r\\n        rewardArbitrator = _arb;\\r\\n    }\\r\\n\\r\\n    function setVoteDelegate(address _voteDelegate) external {\\r\\n        require(msg.sender == voteDelegate, \\\"!auth\\\");\\r\\n        voteDelegate = _voteDelegate;\\r\\n    }\\r\\n\\r\\n    function setRewardContract(address _stakerRewards) external {\\r\\n        require(msg.sender == owner, \\\"!auth\\\");\\r\\n        stakerRewards = _stakerRewards;\\r\\n    }\\r\\n\\r\\n    // Set reward token and claim contract, get from Curve's registry\\r\\n    function setFeeInfo() external {\\r\\n        require(msg.sender == feeManager, \\\"!auth\\\");\\r\\n\\r\\n        feeDistro = IRegistry(registry).get_address(distributionAddressId);\\r\\n        address _feeToken = IFeeDistro(feeDistro).token();\\r\\n        if (feeToken != _feeToken) {\\r\\n            //create a new reward contract for the new token\\r\\n            lockFees = IRewardFactory(rewardFactory).CreateFeePool(_feeToken, address(this));\\r\\n            feeToken = _feeToken;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setFees(uint256 _duckStakerFees, uint256 _callerFees, uint256 _platform) external {\\r\\n        require(msg.sender == feeManager, \\\"!auth\\\");\\r\\n\\r\\n        uint256 total = _duckStakerFees.add(_callerFees).add(_platform);\\r\\n        require(total <= MaxFees, \\\">MaxFees\\\");\\r\\n\\r\\n        require(_duckStakerFees <= 1990\\r\\n            && _callerFees >= 10 && _callerFees <= 100\\r\\n            && _platform <= 1990, \\\"values must be within certain ranges\\\");\\r\\n\\r\\n        duckStakerIncentive = _duckStakerFees;\\r\\n        earmarkIncentive = _callerFees;\\r\\n        platformFee = _platform;\\r\\n    }\\r\\n\\r\\n    function setTreasury(address _treasury) external {\\r\\n        require(msg.sender == feeManager, \\\"!auth\\\");\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    /// END SETTER SECTION ///\\r\\n\\r\\n\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    function setPreDepositChecker(address _checker) external {\\r\\n        require(msg.sender == poolManager && !isShutdown, \\\"!add\\\");\\r\\n        preDepositChecker = _checker;\\r\\n    }\\r\\n\\r\\n    //create a new pool\\r\\n    function addPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns(bool) {\\r\\n        require(msg.sender == poolManager && !isShutdown, \\\"!add\\\");\\r\\n        require(_gauge != address(0) && _lptoken != address(0), \\\"!param\\\");\\r\\n\\r\\n        //the next pool's pid\\r\\n        uint256 pid = poolInfo.length;\\r\\n\\r\\n        //create a tokenized deposit\\r\\n        address token = ITokenFactory(tokenFactory).CreateDepositToken(_lptoken);\\r\\n        //create a reward contract for crv rewards\\r\\n        address newRewardPool = IRewardFactory(rewardFactory).CreateCrvRewards(pid, token);\\r\\n        //create a stash to handle extra incentives\\r\\n        address stash = IStashFactory(stashFactory).CreateStash(pid, _gauge, staker, _stashVersion);\\r\\n\\r\\n        //add the new pool\\r\\n        poolInfo.push(\\r\\n            PoolInfo({\\r\\n                lptoken: _lptoken,\\r\\n                token: token,\\r\\n                gauge: _gauge,\\r\\n                crvRewards: newRewardPool,\\r\\n                stash: stash,\\r\\n                shutdown: false\\r\\n            })\\r\\n        );\\r\\n        gaugeMap[_gauge] = true;\\r\\n        //give stashes access to rewardfactory and voteproxy\\r\\n        //   voteproxy so it can grab the incentive tokens off the contract after claiming rewards\\r\\n        //   reward factory so that stashes can make new extra reward contracts if a new incentive is added to the gauge\\r\\n        if (stash != address(0)) {\\r\\n            IStaker(staker).setStashAccess(stash, true);\\r\\n            IRewardFactory(rewardFactory).setAccess(stash, true);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //shutdown pool\\r\\n    function shutdownPool(uint256 _pid) external returns(bool) {\\r\\n        require(msg.sender == poolManager, \\\"!auth\\\");\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n\\r\\n        //withdraw from gauge\\r\\n        try IStaker(staker).withdrawAll(pool.lptoken, pool.gauge) {\\r\\n        }catch{}\\r\\n\\r\\n        pool.shutdown = true;\\r\\n        gaugeMap[pool.gauge] = false;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //shutdown this contract.\\r\\n    //  unstake and pull all lp tokens to this address\\r\\n    //  only allow withdrawals\\r\\n    function shutdownSystem() external {\\r\\n        require(msg.sender == owner, \\\"!auth\\\");\\r\\n        isShutdown = true;\\r\\n\\r\\n        for(uint i = 0; i < poolInfo.length; i++) {\\r\\n            PoolInfo storage pool = poolInfo[i];\\r\\n            if (pool.shutdown) continue;\\r\\n\\r\\n            address token = pool.lptoken;\\r\\n            address gauge = pool.gauge;\\r\\n\\r\\n            //withdraw from gauge\\r\\n            try IStaker(staker).withdrawAll(token, gauge) {\\r\\n                pool.shutdown = true;\\r\\n            }catch{}\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    //deposit lp tokens and stake\\r\\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) public returns(bool) {\\r\\n        require(!isShutdown, \\\"shutdown\\\");\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        require(pool.shutdown == false, \\\"pool is closed\\\");\\r\\n\\r\\n        address lptoken = pool.lptoken;\\r\\n        address token = pool.token;\\r\\n\\r\\n        if (preDepositChecker != address(0)) {\\r\\n            require(IPreDepositChecker(preDepositChecker).canDeposit(msg.sender, _pid, _amount), \\\"check failed\\\");\\r\\n        }\\r\\n\\r\\n        //send to proxy to stake\\r\\n        IERC20(lptoken).safeTransferFrom(msg.sender, staker, _amount);\\r\\n\\r\\n        //stake\\r\\n        address gauge = pool.gauge;\\r\\n        require(gauge != address(0), \\\"!gauge setting\\\");\\r\\n        IStaker(staker).deposit(lptoken, gauge);\\r\\n\\r\\n        //some gauges claim rewards when depositing, stash them in a seperate contract until next claim\\r\\n        address stash = pool.stash;\\r\\n        if (stash != address(0)) {\\r\\n            IStash(stash).stashRewards();\\r\\n        }\\r\\n\\r\\n        if (_stake) {\\r\\n            //mint here and send to rewards on user behalf\\r\\n            ITokenMinter(token).mint(address(this), _amount);\\r\\n            address rewardContract = pool.crvRewards;\\r\\n            IERC20(token).safeApprove(rewardContract, 0);\\r\\n            IERC20(token).safeApprove(rewardContract, _amount);\\r\\n            IRewards(rewardContract).stakeFor(msg.sender, _amount);\\r\\n        } else {\\r\\n            //add user balance directly\\r\\n            ITokenMinter(token).mint(msg.sender, _amount);\\r\\n        }\\r\\n\\r\\n\\r\\n        emit Deposited(msg.sender, _pid, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //deposit all lp tokens and stake\\r\\n    function depositAll(uint256 _pid, bool _stake) external returns(bool) {\\r\\n        address lptoken = poolInfo[_pid].lptoken;\\r\\n        uint256 balance = IERC20(lptoken).balanceOf(msg.sender);\\r\\n        deposit(_pid,balance,_stake);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //withdraw lp tokens\\r\\n    function _withdraw(uint256 _pid, uint256 _amount, address _from, address _to) internal {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        address lptoken = pool.lptoken;\\r\\n        address gauge = pool.gauge;\\r\\n\\r\\n        //remove lp balance\\r\\n        address token = pool.token;\\r\\n        ITokenMinter(token).burn(_from, _amount);\\r\\n\\r\\n        //pull from gauge if not shutdown\\r\\n        // if shutdown tokens will be in this contract\\r\\n        if (!pool.shutdown) {\\r\\n            IStaker(staker).withdraw(lptoken, gauge, _amount);\\r\\n        }\\r\\n\\r\\n        //some gauges claim rewards when withdrawing, stash them in a seperate contract until next claim\\r\\n        //do not call if shutdown since stashes wont have access\\r\\n        address stash = pool.stash;\\r\\n        if (stash != address(0) && !isShutdown && !pool.shutdown) {\\r\\n            IStash(stash).stashRewards();\\r\\n        }\\r\\n\\r\\n        //return lp tokens\\r\\n        IERC20(lptoken).safeTransfer(_to, _amount);\\r\\n\\r\\n        emit Withdrawn(_to, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    //withdraw lp tokens\\r\\n    function withdraw(uint256 _pid, uint256 _amount) public returns(bool) {\\r\\n        _withdraw(_pid, _amount, msg.sender, msg.sender);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //withdraw all lp tokens\\r\\n    function withdrawAll(uint256 _pid) public returns(bool) {\\r\\n        address token = poolInfo[_pid].token;\\r\\n        uint256 userBal = IERC20(token).balanceOf(msg.sender);\\r\\n        withdraw(_pid, userBal);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //allow reward contracts to send here and withdraw to user\\r\\n    function withdrawTo(uint256 _pid, uint256 _amount, address _to) external returns(bool) {\\r\\n        address rewardContract = poolInfo[_pid].crvRewards;\\r\\n        require(msg.sender == rewardContract, \\\"!auth\\\");\\r\\n\\r\\n        _withdraw(_pid,_amount,msg.sender,_to);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    //delegate address votes on dao\\r\\n    function vote(uint256 _voteId, address _votingAddress, bool _support) external returns(bool) {\\r\\n        require(msg.sender == voteDelegate, \\\"!auth\\\");\\r\\n        require(_votingAddress == voteOwnership || _votingAddress == voteParameter, \\\"!voteAddr\\\");\\r\\n\\r\\n        IStaker(staker).vote(_voteId,_votingAddress,_support);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function voteGaugeWeight(address[] calldata _gauge, uint256[] calldata _weight) external returns(bool) {\\r\\n        require(msg.sender == voteDelegate, \\\"!auth\\\");\\r\\n\\r\\n        for(uint256 i = 0; i < _gauge.length; i++) {\\r\\n            IStaker(staker).voteGaugeWeight(_gauge[i],_weight[i]);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function claimRewards(uint256 _pid, address _gauge) external returns(bool) {\\r\\n        address stash = poolInfo[_pid].stash;\\r\\n        require(msg.sender == stash, \\\"!auth\\\");\\r\\n\\r\\n        IStaker(staker).claimRewards(_gauge);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setGaugeRedirect(uint256 _pid) external returns(bool) {\\r\\n        address stash = poolInfo[_pid].stash;\\r\\n        require(msg.sender == stash, \\\"!auth\\\");\\r\\n        address gauge = poolInfo[_pid].gauge;\\r\\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\\\"set_rewards_receiver(address)\\\")), stash);\\r\\n        IStaker(staker).execute(gauge, uint256(0), data);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //claim crv and extra rewards and disperse to reward contracts\\r\\n    function _earmarkRewards(uint256 _pid) internal {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        require(pool.shutdown == false, \\\"pool is closed\\\");\\r\\n\\r\\n        address gauge = pool.gauge;\\r\\n\\r\\n        //claim crv\\r\\n        IStaker(staker).claimCrv(gauge);\\r\\n\\r\\n        //check if there are extra rewards\\r\\n        address stash = pool.stash;\\r\\n        if (stash != address(0)) {\\r\\n            //claim extra rewards\\r\\n            IStash(stash).claimRewards();\\r\\n            //process extra rewards\\r\\n            IStash(stash).processStash();\\r\\n        }\\r\\n\\r\\n        //crv balance\\r\\n        uint256 crvBal = IERC20(crv).balanceOf(address(this));\\r\\n\\r\\n        if (crvBal > 0) {\\r\\n            uint256 _stakerIncentive = stakerRewards == address(0) ? 0 : crvBal.mul(duckStakerIncentive).div(FEE_DENOMINATOR);\\r\\n            uint256 _callIncentive = crvBal.mul(earmarkIncentive).div(FEE_DENOMINATOR);\\r\\n\\r\\n            //send treasury\\r\\n            if (treasury != address(0) && treasury != address(this) && platformFee > 0) {\\r\\n                //only subtract after address condition check\\r\\n                uint256 _platform = crvBal.mul(platformFee).div(FEE_DENOMINATOR);\\r\\n                crvBal = crvBal.sub(_platform);\\r\\n                IERC20(crv).safeTransfer(treasury, _platform);\\r\\n            }\\r\\n\\r\\n            //remove incentives from balance\\r\\n            crvBal = crvBal.sub(_callIncentive).sub(_stakerIncentive);\\r\\n\\r\\n            //send incentives for calling\\r\\n            IERC20(crv).safeTransfer(msg.sender, _callIncentive);\\r\\n\\r\\n            //send crv to lp provider reward contract\\r\\n            address rewardContract = pool.crvRewards;\\r\\n            IERC20(crv).safeTransfer(rewardContract, crvBal);\\r\\n            IRewards(rewardContract).queueNewRewards(crvBal);\\r\\n\\r\\n            if (_stakerIncentive != 0) {\\r\\n                //send DUCK-stakers' share of crv to reward contract\\r\\n                IERC20(crv).safeTransfer(stakerRewards, _stakerIncentive);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function earmarkRewards(uint256 _pid) external returns (bool) {\\r\\n        require(!isShutdown, \\\"shutdown\\\");\\r\\n        _earmarkRewards(_pid);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //claim fees from curve distro contract, put in lockers' reward contract\\r\\n    function earmarkFees() external returns(bool) {\\r\\n        //claim fee rewards\\r\\n        IStaker(staker).claimFees(feeDistro, feeToken);\\r\\n        //send fee rewards to reward contract\\r\\n        uint256 _balance = IERC20(feeToken).balanceOf(address(this));\\r\\n        IERC20(feeToken).safeTransfer(lockFees, _balance);\\r\\n        IRewards(lockFees).queueNewRewards(_balance);\\r\\n        return true;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n\\r\\n\\r\\ninterface ICurveGauge {\\r\\n    function deposit(uint256) external;\\r\\n    function balanceOf(address) external view returns (uint256);\\r\\n    function withdraw(uint256) external;\\r\\n    function claim_rewards() external;\\r\\n    function reward_tokens(uint256) external view returns(address);//v2\\r\\n    function rewarded_token() external view returns(address);//v1\\r\\n    function lp_token() external view returns(address);\\r\\n}\\r\\n\\r\\ninterface ICurveVoteEscrow {\\r\\n    function create_lock(uint256, uint256) external;\\r\\n    function increase_amount(uint256) external;\\r\\n    function increase_unlock_time(uint256) external;\\r\\n    function withdraw() external;\\r\\n    function smart_wallet_checker() external view returns (address);\\r\\n}\\r\\n\\r\\ninterface IWalletChecker {\\r\\n    function check(address) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface IVoting {\\r\\n    function vote(uint256, bool, bool) external; //voteId, support, executeIfDecided\\r\\n    function getVote(uint256) external view returns(bool,bool,uint64,uint64,uint64,uint64,uint256,uint256,uint256,bytes memory);\\r\\n    function vote_for_gauge_weights(address,uint256) external;\\r\\n}\\r\\n\\r\\ninterface IMinter {\\r\\n    function mint(address) external;\\r\\n}\\r\\n\\r\\ninterface IRegistry {\\r\\n    function get_registry() external view returns(address);\\r\\n    function get_address(uint256 _id) external view returns(address);\\r\\n    function gauge_controller() external view returns(address);\\r\\n    function get_lp_token(address) external view returns(address);\\r\\n    function get_gauges(address) external view returns(address[10] memory,uint128[10] memory);\\r\\n}\\r\\n\\r\\ninterface IStaker {\\r\\n    function deposit(address, address) external;\\r\\n    function withdraw(address) external;\\r\\n    function withdraw(address, address, uint256) external;\\r\\n    function withdrawAll(address, address) external;\\r\\n    function createLock(uint256, uint256) external;\\r\\n    function increaseAmount(uint256) external;\\r\\n    function increaseTime(uint256) external;\\r\\n    function release() external;\\r\\n    function claimCrv(address) external returns (uint256);\\r\\n    function claimRewards(address) external;\\r\\n    function claimFees(address,address) external;\\r\\n    function setStashAccess(address, bool) external;\\r\\n    function vote(uint256,address,bool) external;\\r\\n    function voteGaugeWeight(address,uint256) external;\\r\\n    function balanceOfPool(address) external view returns (uint256);\\r\\n    function operator() external view returns (address);\\r\\n    function execute(address _to, uint256 _value, bytes calldata _data) external returns (bool, bytes memory);\\r\\n}\\r\\n\\r\\ninterface IRewards {\\r\\n    function stake(address, uint256) external;\\r\\n    function stakeFor(address, uint256) external;\\r\\n    function withdraw(address, uint256) external;\\r\\n    function exit(address) external;\\r\\n    function getReward(address) external;\\r\\n    function queueNewRewards(uint256) external;\\r\\n    function notifyRewardAmount(uint256) external;\\r\\n    function addExtraReward(address) external;\\r\\n    function stakingToken() external view returns (address);\\r\\n    function rewardToken() external view returns(address);\\r\\n    function earned(address account) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IStash {\\r\\n    function stashRewards() external returns (bool);\\r\\n    function processStash() external returns (bool);\\r\\n    function claimRewards() external returns (bool);\\r\\n    function initialize(uint256 _pid, address _operator, address _staker, address _gauge, address _rewardFactory) external;\\r\\n}\\r\\n\\r\\ninterface IFeeDistro {\\r\\n    function claim() external;\\r\\n    function token() external view returns(address);\\r\\n}\\r\\n\\r\\ninterface ITokenMinter{\\r\\n    function mint(address,uint256) external;\\r\\n    function burn(address,uint256) external;\\r\\n}\\r\\n\\r\\ninterface IDeposit {\\r\\n    function isShutdown() external view returns(bool);\\r\\n    function balanceOf(address _account) external view returns(uint256);\\r\\n    function totalSupply() external view returns(uint256);\\r\\n    function poolInfo(uint256) external view returns(address,address,address,address,address, bool);\\r\\n    function rewardClaimed(uint256,address,uint256) external;\\r\\n    function withdrawTo(uint256,uint256,address) external;\\r\\n    function claimRewards(uint256,address) external returns(bool);\\r\\n    function rewardArbitrator() external returns(address);\\r\\n    function setGaugeRedirect(uint256 _pid) external returns(bool);\\r\\n    function owner() external returns(address);\\r\\n}\\r\\n\\r\\ninterface ICrvDeposit {\\r\\n    function deposit(uint256, bool) external;\\r\\n    function lockIncentive() external view returns(uint256);\\r\\n}\\r\\n\\r\\ninterface IRewardFactory {\\r\\n    function setAccess(address,bool) external;\\r\\n    function CreateCrvRewards(uint256,address) external returns(address);\\r\\n    function CreateTokenRewards(address,address,address) external returns(address);\\r\\n    function CreateFeePool(address,address) external returns(address);\\r\\n    function activeRewardCount(address) external view returns(uint256);\\r\\n    function addActiveReward(address,uint256) external returns(bool);\\r\\n    function removeActiveReward(address,uint256) external returns(bool);\\r\\n}\\r\\n\\r\\ninterface IStashFactory {\\r\\n    function CreateStash(uint256,address,address,uint256) external returns(address);\\r\\n}\\r\\n\\r\\ninterface ITokenFactory {\\r\\n    function CreateDepositToken(address) external returns(address);\\r\\n}\\r\\n\\r\\ninterface IPools {\\r\\n    function addPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns(bool);\\r\\n    function setLiquidityLimit(uint256 _pid, uint256 _limit) external;\\r\\n    function shutdownPool(uint256 _pid) external returns(bool);\\r\\n    function poolInfo(uint256) external view returns(address,address,address,address,address,bool);\\r\\n    function poolLength() external view returns (uint256);\\r\\n    function gaugeMap(address) external view returns(bool);\\r\\n    function setPoolManager(address _poolM) external;\\r\\n}\\r\\n\\r\\ninterface IVestedEscrow {\\r\\n    function fund(address[] calldata _recipient, uint256[] calldata _amount) external returns(bool);\\r\\n}\\r\\n\\r\\ninterface IProxyFactory {\\r\\n    function clone(address _target) external returns(address);\\r\\n}\\r\\n\\r\\ninterface ISmartWalletWhitelist {\\r\\n    function approveWallet(address _wallet) external;\\r\\n}\\r\\n\\r\\ninterface IGaugeController {\\r\\n    function get_gauge_weight(address _gauge) external view returns(uint256);\\r\\n    function gauge_relative_weight(address _gauge) external view returns(uint256);\\r\\n    function vote_user_slopes(address,address) external view returns(uint256,uint256,uint256);//slope,power,end\\r\\n}\\r\\n\\r\\ninterface IVault {\\r\\n    function collaterals(address asset, address owner) external view returns(uint256);\\r\\n}\\r\\n\\r\\ninterface IRewardHook {\\r\\n    function onRewardClaim() external;\\r\\n}\\r\\n\\r\\ninterface IBurner {\\r\\n    function withdraw_admin_fees(address) external;\\r\\n    function burn(address) external;\\r\\n    function execute() external returns(bool);\\r\\n}\\r\\n\\r\\ninterface IPreDepositChecker {\\r\\n    function canDeposit(address, uint, uint) external view returns(bool);\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stashVersion\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"depositAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionAddressId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duckStakerIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earmarkFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earmarkIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"earmarkRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistro\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gaugeMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockFees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crvRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stash\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shutdown\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preDepositChecker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardArbitrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_arb\",\"type\":\"address\"}],\"name\":\"setArbitrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rfactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sfactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tfactory\",\"type\":\"address\"}],\"name\":\"setFactories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFeeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeM\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duckStakerFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_callerFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_platform\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"setGaugeRedirect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolM\",\"type\":\"address\"}],\"name\":\"setPoolManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checker\",\"type\":\"address\"}],\"name\":\"setPreDepositChecker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakerRewards\",\"type\":\"address\"}],\"name\":\"setRewardContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voteDelegate\",\"type\":\"address\"}],\"name\":\"setVoteDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"shutdownPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdownSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stashFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_votingAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_support\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauge\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weight\",\"type\":\"uint256[]\"}],\"name\":\"voteGaugeWeight\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteOwnership\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteParameter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Booster","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000072eb0cae0371e022d813f6cc97e9885ab135c850","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}