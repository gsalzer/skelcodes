{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\n\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IgOHM.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IgOHM is IERC20 {\\n  function mint(address _to, uint256 _amount) external;\\n\\n  function burn(address _from, uint256 _amount) external;\\n\\n  function index() external view returns (uint256);\\n\\n  function balanceFrom(uint256 _amount) external view returns (uint256);\\n\\n  function balanceTo(uint256 _amount) external view returns (uint256);\\n\\n  function migrate( address _staking, address _sOHM ) external;\\n}\\n\"},\"Investor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\\\\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IgOHM.sol\\\";\\nimport \\\"./IStaking.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ninterface IClaim {\\n    struct Term {\\n        uint256 percent; // 4 decimals ( 5000 = 0.5% )\\n        uint256 wClaimed; // static number\\n        uint256 max; // maximum nominal OHM amount can claim\\n    }\\n    function terms(address _address) external view returns (Term memory);\\n}\\n\\n/**\\n *  This contract allows Olympus seed investors and advisors to claim tokens.\\n *  It has been revised to consider claims as staked immediately for accounting purposes.\\n *  This ensures that network ownership does not exceed disclosed levels.\\n *  Claimants remain protected from network dilution that may arise, but claim and stake\\n *  does not allow them to grow ownership beyond predefined levels. This change also penalizes\\n *  sellers, since the tokens sold are still considered staked within this contract. This  \\n *  step was taken to ensure fair distribution of exposure in the network.  \\n */\\ncontract InvestorClaimV2 is Ownable {\\n\\n    /* ========== DEPENDENCIES ========== */\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STRUCTS ========== */\\n\\n    struct Term {\\n        uint256 percent; // 4 decimals ( 5000 = 0.5% )\\n        uint256 gClaimed; // rebase-agnostic number\\n        uint256 max; // maximum nominal OHM amount can claim\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n    \\n    // claim token\\n    IERC20 internal immutable ohm = IERC20(0x64aa3364F17a4D01c6f1751Fd97C2BD3D7e7f1D5); \\n    // payment token\\n    IERC20 internal immutable dai = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F); \\n    // mints claim token\\n    ITreasury internal immutable treasury = ITreasury(0x9A315BdF513367C0377FB36545857d12e85813Ef); \\n    // stake OHM for sOHM\\n    IStaking internal immutable staking = IStaking(0xB63cac384247597756545b500253ff8E607a8020); \\n    // holds non-circulating supply\\n    address internal immutable dao = 0x245cc372C84B3645Bf0Ffe6538620B04a217988B; \\n    // tracks rebase-agnostic balance\\n    IgOHM internal immutable gOHM = IgOHM(0x0ab87046fBb341D058F17CBC4c1133F25a20a52f);\\n    // previous deployment of contract (to migrate terms)\\n    IClaim internal immutable previous = IClaim(0xaCCC8306455BaA01593Fa6267809fEA72F684169);\\n\\n    // tracks address info\\n    mapping( address =\\u003e Term ) public terms;\\n    // facilitates address change\\n    mapping( address =\\u003e address ) public walletChange;\\n    // as percent of supply (4 decimals: 10000 = 1%)\\n    uint256 public totalAllocated;\\n    // maximum portion of supply can allocate. == 4%\\n    uint256 public maximumAllocated = 40000; \\n    \\n    constructor() {}\\n\\n    /* ========== MUTABLE FUNCTIONS ========== */\\n    \\n    /**\\n     * @notice allows wallet to claim OHM\\n     * @param _to address\\n     * @param _amount uint256\\n     */\\n    function claim(address _to, uint256 _amount) external {\\n        ohm.safeTransfer(_to, _claim(_amount));\\n    }\\n\\n    /**\\n     * @notice allows wallet to claim OHM and stake. set _claim = true if warmup is 0.\\n     * @param _to address\\n     * @param _amount uint256\\n     * @param _rebasing bool\\n     * @param _claimFromStaking bool\\n     */\\n    function stake(address _to, uint256 _amount, bool _rebasing, bool _claimFromStaking) external {\\n        staking.stake(_to, _claim(_amount), _rebasing, _claimFromStaking);\\n    }\\n\\n    /**\\n     * @notice logic for claiming OHM\\n     * @param _amount uint256\\n     * @return toSend_ uint256\\n     */\\n    function _claim(uint256 _amount) internal returns (uint256 toSend_) {\\n        Term memory info = terms[msg.sender];\\n\\n        dai.safeTransferFrom(msg.sender, address(this), _amount);\\n        toSend_ = treasury.deposit(_amount, address(dai), 0);\\n\\n        require(redeemableFor(msg.sender).div(1e9) \\u003e= toSend_, \\\"Claim more than vested\\\");\\n        require(info.max.sub(claimed(msg.sender)) \\u003e= toSend_, \\\"Claim more than max\\\");\\n\\n        terms[msg.sender].gClaimed = info.gClaimed.add(gOHM.balanceTo(toSend_));\\n    }\\n\\n    /**\\n     * @notice allows address to push terms to new address\\n     * @param _newAddress address\\n     */\\n    function pushWalletChange(address _newAddress) external {\\n        require(terms[msg.sender].percent != 0, \\\"No wallet to change\\\");\\n        walletChange[msg.sender] = _newAddress;\\n    }\\n    \\n    /**\\n     * @notice allows new address to pull terms\\n     * @param _oldAddress address\\n     */\\n    function pullWalletChange(address _oldAddress) external {\\n        require(walletChange[_oldAddress] == msg.sender, \\\"Old wallet did not push\\\");\\n        require(terms[msg.sender].percent != 0, \\\"Wallet already exists\\\");\\n        \\n        walletChange[_oldAddress] = address(0);\\n        terms[msg.sender] = terms[_oldAddress];\\n        delete terms[_oldAddress];\\n    }\\n\\n    /**\\n     * @notice mass approval saves gas\\n     */\\n    function approve() external {\\n        ohm.approve(address(staking), 1e33);\\n        dai.approve(address(treasury), 1e33);\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    /**\\n     * @notice view OHM claimable for address. DAI decimals (18).\\n     * @param _address address\\n     * @return uint256\\n     */\\n    function redeemableFor(address _address) public view returns (uint256) {\\n        Term memory info = terms[_address];\\n        uint256 max = circulatingSupply().mul(info.percent).mul(1e3);\\n        if (max \\u003e info.max) max = info.max;\\n        return max.sub(claimed(_address).mul(1e9));\\n    }\\n\\n    /**\\n     * @notice view OHM claimed by address. OHM decimals (9).\\n     * @param _address address\\n     * @return uint256\\n     */\\n    function claimed(address _address) public view returns (uint256) {\\n        return gOHM.balanceFrom(terms[_address].gClaimed);\\n    }\\n\\n    /**\\n     * @notice view circulating supply of OHM\\n     * @notice calculated as total supply minus DAO holdings\\n     * @return uint256\\n     */\\n    function circulatingSupply() public view returns (uint256) {\\n        return treasury.baseSupply().sub(ohm.balanceOf(dao));\\n    }  \\n\\n    /* ========== OWNER FUNCTIONS ========== */\\n\\n    /**\\n     * @notice bulk migrate users from previous contract\\n     * @param _addresses address[] memory\\n     */\\n    function migrate(address[] memory _addresses) external onlyOwner {\\n        for (uint256 i = 0; i \\u003c _addresses.length; i++) {\\n            IClaim.Term memory term = previous.terms(_addresses[i]);\\n            setTerms(\\n                _addresses[i], \\n                term.max,\\n                term.percent,\\n                term.wClaimed\\n            );\\n        }\\n    }\\n\\n    /**\\n     *  @notice set terms for new address\\n     *  @notice cannot lower for address or exceed maximum total allocation\\n     *  @param _address address\\n     *  @param _percent uint256\\n     *  @param _gClaimed uint256\\n     *  @param _max uint256\\n     */\\n    function setTerms(\\n        address _address, \\n        uint256 _percent, \\n        uint256 _gClaimed, \\n        uint256 _max\\n    ) public onlyOwner {\\n        require(terms[_address].max == 0, \\\"address already exists\\\");\\n        terms[_address] = Term({\\n            percent: _percent,\\n            gClaimed: _gClaimed,\\n            max: _max\\n        });\\n        require(totalAllocated.add(_percent) \\u003c= maximumAllocated, \\\"Cannot allocate more\\\");\\n        totalAllocated = totalAllocated.add(_percent);\\n    }\\n}\"},\"IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\n\\n\\ninterface IOwnable {\\n  function owner() external view returns (address);\\n\\n  function renounceManagement() external;\\n  \\n  function pushManagement( address newOwner_ ) external;\\n  \\n  function pullManagement() external;\\n}\"},\"IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\n\\ninterface IStaking {\\n    function stake(\\n        address _to,\\n        uint256 _amount,\\n        bool _rebasing,\\n        bool _claim\\n    ) external returns (uint256);\\n\\n    function claim(address _recipient, bool _rebasing) external returns (uint256);\\n\\n    function forfeit() external returns (uint256);\\n\\n    function toggleLock() external;\\n\\n    function unstake(\\n        address _to,\\n        uint256 _amount,\\n        bool _trigger,\\n        bool _rebasing\\n    ) external returns (uint256);\\n\\n    function wrap(address _to, uint256 _amount) external returns (uint256 gBalance_);\\n\\n    function unwrap(address _to, uint256 _amount) external returns (uint256 sBalance_);\\n\\n    function rebase() external;\\n\\n    function index() external view returns (uint256);\\n\\n    function contractBalance() external view returns (uint256);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function supplyInWarmup() external view returns (uint256);\\n}\\n\"},\"ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function excessReserves() external view returns (uint256);\\n\\n    function baseSupply() external view returns (uint256);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\nabstract contract Ownable is IOwnable {\\n\\n    address internal _owner;\\n    address internal _newOwner;\\n\\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        _owner = msg.sender;\\n        emit OwnershipPushed( address(0), _owner );\\n    }\\n\\n    function owner() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n        _;\\n    }\\n\\n    function renounceManagement() public virtual override onlyOwner() {\\n        emit OwnershipPulled( _owner, address(0) );\\n        _owner = address(0);\\n        _newOwner = address(0);\\n    }\\n\\n    function pushManagement( address newOwner_ ) public virtual override onlyOwner() {\\n        emit OwnershipPushed( _owner, newOwner_ );\\n        _newOwner = newOwner_;\\n    }\\n    \\n    function pullManagement() public virtual override {\\n        require( msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\n        emit OwnershipPulled( _owner, _newOwner );\\n        _owner = _newOwner;\\n        _newOwner = address(0);\\n    }\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\n\\n\\n// TODO(zx): Replace all instances of SafeMath with OZ implementation\\nlibrary SafeMath {\\n    \\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    // Only used in the  BondingCalculator.sol\\n    function sqrrt(uint256 a) internal pure returns (uint c) {\\n        if (a \\u003e 3) {\\n            c = a;\\n            uint b = add( div( a, 2), 1 );\\n            while (b \\u003c c) {\\n                c = b;\\n                b = div( add( div( a, b ), b), 2 );\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n\\n}\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"}],\"name\":\"pullWalletChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"pushWalletChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"redeemableFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_rebasing\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_claimFromStaking\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletChange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InvestorClaimV2","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7d14f6cf57e643854bd964924c6a095e1d36f1c2e09bbf03731b8c952ebb74c2"}]}