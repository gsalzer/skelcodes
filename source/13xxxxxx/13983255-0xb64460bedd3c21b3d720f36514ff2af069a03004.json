{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MetadataRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./IMetadataRenderer.sol\\\";\\nimport \\\"./utils/Base64.sol\\\";\\n\\ncontract MetadataRenderer is IMetadataRenderer {\\n    string public constant DESCRIPTION = \\\"Synesthesia is a collaborative NFT art project in partnership with well-known generative artist @Hyperglu. Synesthesia enables users to use their Color NFTs to participant in the creation of new generative artworks.\\\";\\n    string public constant UNREVEAL_IMAGE_URL = \\\"https://www.synesspace.com/synesspace-unreveal.svg\\\";\\n\\n    function renderInternal(\\n        bytes memory tokenName,\\n        bytes memory imageURL,\\n        bytes memory attributes\\n    ) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\n            \\\"data:application/json;base64,\\\",\\n            Base64.encode(abi.encodePacked(\\n                '{\\\"name\\\":\\\"', tokenName, '\\\",',\\n                '\\\"description\\\":\\\"', DESCRIPTION, '\\\",',\\n                '\\\"image\\\":\\\"', imageURL, '\\\",',\\n                '\\\"attributes\\\":[', attributes, ']}'))));\\n    }\\n\\n    function renderUnreveal(uint16 tokenId) external pure returns (string memory) {\\n        return renderInternal(\\n            abi.encodePacked(\\\"Synesthesia #\\\", Strings.toString(tokenId)),\\n            bytes(UNREVEAL_IMAGE_URL),\\n            \\\"\\\");\\n    }\\n\\n    function render(uint16 tokenId, Color memory color) external pure returns (string memory) {\\n        bytes memory svg = abi.encodePacked(\\n            \\\"data:image/svg+xml;base64,\\\",\\n            Base64.encode(abi.encodePacked(\\n                \\\"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' width='512' height='512'><rect x='0' y='0' width='512' height='512' style='fill:#\\\",\\n                color.rgb,\\n                \\\"'/><rect x='0' y='376' width='512' height='50' style='fill:#FFFFFF;'/><text x='26' y='413' class='name-label' style='fill:#231815;font-family:Arial;font-weight:bold;font-size:32px;'>\\\",\\n                color.name,\\n                \\\"</text><text x='370' y='411' class='color-label' style='fill:#898989;font-family:Arial;font-weight:bold;font-style:italic;font-size: 28px;'>#\\\",\\n                color.rgb,\\n                \\\"</text></svg>\\\")));\\n\\n        bytes memory attributes = abi.encodePacked('{\\\"trait_type\\\":\\\"Name\\\",\\\"value\\\":\\\"', color.name, '\\\"},{\\\"trait_type\\\":\\\"RGB\\\",\\\"value\\\":\\\"#', color.rgb, '\\\"}');\\n\\n        return renderInternal(\\n            abi.encodePacked(color.name, ' #', Strings.toString(tokenId)),\\n            svg,\\n            attributes);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IMetadataRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./colors/Color.sol\\\";\\n\\ninterface IMetadataRenderer {\\n    function renderUnreveal(uint16 tokenId) external view returns (string memory);\\n    function render(uint16 tokenId, Color memory color) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary Base64 {\\n    string constant private B64_ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory _data) internal pure returns (string memory result) {\\n        if (_data.length == 0) return '';\\n        string memory _table = B64_ALPHABET;\\n        uint256 _encodedLen = 4 * ((_data.length + 2) / 3);\\n        result = new string(_encodedLen + 32);\\n\\n        assembly {\\n            mstore(result, _encodedLen)\\n            let tablePtr := add(_table, 1)\\n            let dataPtr := _data\\n            let endPtr := add(dataPtr, mload(_data))\\n            let resultPtr := add(result, 32)\\n\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            switch mod(mload(_data), 3)\\n            case 1 {mstore(sub(resultPtr, 2), shl(240, 0x3d3d))}\\n            case 2 {mstore(sub(resultPtr, 1), shl(248, 0x3d))}\\n        }\\n\\n        return result;\\n    }\\n}\"\r\n    },\r\n    \"contracts/colors/Color.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nstruct Color {\\n    string rgb;\\n    string name;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNREVEAL_IMAGE_URL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"rgb\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"renderUnreveal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"MetadataRenderer","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}