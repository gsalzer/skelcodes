{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\n/**\r\n * @title Claim\r\n * @author gotbit\r\n */\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address who) external view returns (uint balance);\r\n    function transfer(address to, uint value) external returns (bool trans1);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner_) external onlyOwner {\r\n        require(\r\n            newOwner_ != address(0),\r\n            \"You cant tranfer ownerships to address 0x0\"\r\n        );\r\n        require(newOwner_ != owner, \"You cant transfer ownerships to yourself\");\r\n        emit OwnershipTransferred(owner, newOwner_);\r\n        owner = newOwner_;\r\n    }\r\n}\r\n\r\ncontract Claim is Ownable {\r\n    struct Round {\r\n        uint cliff;\r\n        uint constReward;\r\n        uint linearPeriod;\r\n    }\r\n\r\n    struct Allocation {\r\n        uint seed;\r\n        uint strategic;\r\n        uint private_;\r\n    }\r\n\r\n    struct User {\r\n        uint claimed;\r\n        Allocation allocation;\r\n        uint claimTimestamp;\r\n    }\r\n\r\n    uint public constant MONTH = 30 days;\r\n    uint public constant MINUTE = 1 minutes;\r\n    uint public constant CONST_PERIOD = 2 * 24 hours;\r\n    uint public constant CONST_RELAX = MONTH;\r\n\r\n    IERC20 public token;\r\n\r\n    bool public isStarted;\r\n    uint public startTimestamp;\r\n\r\n    mapping(string => Round) rounds;\r\n    mapping(address => User) public users;\r\n\r\n    event Started(uint timestamp, address who);\r\n    event Claimed(address indexed to, uint value);\r\n    event SettedAllocation(address indexed to, uint seed, uint strategic, uint private_);\r\n\r\n\r\n    constructor(address owner_, address token_) {\r\n        owner = owner_;\r\n        token = IERC20(token_);\r\n\r\n        rounds[\"seed\"] = Round(1, 10, 13);\r\n        rounds[\"strategic\"] = Round(0, 15, 9);\r\n        rounds[\"private\"] = Round(0, 20, 7);\r\n    }\r\n\r\n    function start() external onlyOwner returns (bool status) {\r\n        require(!isStarted, \"The claim has already begun\");\r\n\r\n        isStarted = true;\r\n        startTimestamp = block.timestamp;\r\n\r\n        emit Started(startTimestamp, msg.sender);\r\n\r\n        return true;\r\n    }\r\n\r\n    function claim() external returns (bool status) {\r\n        require(isStarted, \"The claim has not started yet\");\r\n\r\n        uint value_ = calculateUnclaimed(msg.sender);\r\n\r\n        require(value_ > 0, \"You dont have DES to harvest\");\r\n        require(\r\n            token.balanceOf(address(this)) >= value_,\r\n            \"Not enough tokens on contract\"\r\n        );\r\n\r\n        users[msg.sender].claimed += value_;\r\n        users[msg.sender].claimTimestamp = block.timestamp;\r\n\r\n        require(token.transfer(msg.sender, value_), 'Transfer issues');\r\n\r\n        emit Claimed(msg.sender, value_);\r\n        return true;\r\n    }\r\n\r\n    function getAllocation(address user_) external view returns (uint sum) {\r\n        return\r\n            (users[user_].allocation.seed +\r\n                users[user_].allocation.strategic +\r\n                users[user_].allocation.private_) / 2;\r\n    }\r\n\r\n    function calculateUnclaimed(address user_)\r\n        public\r\n        view\r\n        returns (uint unclaimed)\r\n    {\r\n        require(isStarted, \"The claim has not started yet\");\r\n\r\n        uint resultSeed_ = calculateRound(\r\n            \"seed\",\r\n            users[user_].allocation.seed\r\n        );\r\n        uint resultStrategic_ = calculateRound(\r\n            \"strategic\",\r\n            users[user_].allocation.strategic\r\n        );\r\n        uint resultPrivate_ = calculateRound(\r\n            \"private\",\r\n            users[user_].allocation.private_\r\n        );\r\n\r\n        return\r\n            (resultSeed_ + resultStrategic_ + resultPrivate_) /\r\n            2 -\r\n            users[user_].claimed;\r\n    }\r\n\r\n    function calculateRound(string memory roundName_, uint allocation_)\r\n        internal\r\n        view\r\n        returns (uint unclaimedFromRound)\r\n    {\r\n        require(isStarted, \"The claim has not started yet\");\r\n\r\n        Round memory round_ = rounds[roundName_];\r\n\r\n        uint timePassed_ = block.timestamp - startTimestamp;\r\n        uint bank_ = allocation_;\r\n\r\n        if (timePassed_ < (round_.cliff * MONTH)) return 0;\r\n\r\n        timePassed_ -= (round_.cliff * MONTH);\r\n        uint constReward_ = (bank_ * round_.constReward) / 100;\r\n        if (round_.cliff == 0) {\r\n            if (timePassed_ < CONST_PERIOD / 2) return constReward_ / 2;\r\n        }\r\n\r\n        if (timePassed_ < CONST_RELAX) return constReward_;\r\n        timePassed_ -= CONST_RELAX;\r\n\r\n        uint minutesPassed_ = timePassed_ / MINUTE;\r\n        uint leftInBank_ = bank_ - constReward_;\r\n        return\r\n            (leftInBank_ * MINUTE * minutesPassed_) /\r\n            (MONTH * round_.linearPeriod) +\r\n            constReward_;\r\n    }\r\n\r\n    function setAllocations(\r\n        address[] memory whos_,\r\n        uint[] memory seeds_,\r\n        uint[] memory strategics_,\r\n        uint[] memory privates_\r\n    )\r\n    public\r\n    onlyOwner {\r\n        uint len = whos_.length;\r\n        for (uint i = 0; i < len; i++) {\r\n            address who_ = whos_[i];\r\n\r\n            if (users[who_].claimed == 0) {\r\n                uint seed_ = seeds_[i];\r\n                uint strategic_ = strategics_[i];\r\n                uint private_ = privates_[i];\r\n            \r\n                users[who_] = User({\r\n                    claimed: users[who_].claimed,\r\n                    allocation: Allocation(seed_, strategic_, private_),\r\n                    claimTimestamp: users[who_].claimTimestamp\r\n                });\r\n                emit SettedAllocation(who_, seed_, strategic_, private_);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"private_\",\"type\":\"uint256\"}],\"name\":\"SettedAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Started\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONST_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONST_RELAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINUTE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"calculateUnclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unclaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"whos_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"seeds_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"strategics_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"privates_\",\"type\":\"uint256[]\"}],\"name\":\"setAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strategic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"private_\",\"type\":\"uint256\"}],\"internalType\":\"struct Claim.Allocation\",\"name\":\"allocation\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"claimTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Claim","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000eba660f4ca0a7fa6dc642b65f99ae95ea5257b7000000000000000000000000634239cfa331df0291653139d1a6083b9cf705e3","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://513bcde9d6a649f8b20612414d7cd6da8a13646dc083362dc6911deeeab20bd8"}]}