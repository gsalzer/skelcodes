{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/oracles/ChainlinkOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.4;\\n\\nimport {IOracle} from \\\"../interfaces/IOracle.sol\\\";\\nimport {IChainlinkAggregator} from \\\"../interfaces/IChainlinkAggregator.sol\\\";\\n\\n/**\\n * @title Chainlink Oracle\\n *\\n * @notice Provides a value onchain from a chainlink oracle aggregator\\n */\\ncontract ChainlinkOracle is IOracle {\\n    // The address of the Chainlink Aggregator contract\\n    IChainlinkAggregator public immutable oracle;\\n    uint256 public immutable stalenessThresholdSecs;\\n\\n    constructor(address _oracle, uint256 _stalenessThresholdSecs) {\\n        oracle = IChainlinkAggregator(_oracle);\\n        stalenessThresholdSecs = _stalenessThresholdSecs;\\n    }\\n\\n    /**\\n     * @notice Fetches the latest market price from chainlink\\n     * @return Value: Latest market price as an 8 decimal fixed point number.\\n     *         valid: Boolean indicating an value was fetched successfully.\\n     */\\n    function getData() external view override returns (uint256, bool) {\\n        (, int256 answer, , uint256 updatedAt, ) = oracle.latestRoundData();\\n        uint256 diff = block.timestamp - updatedAt;\\n        return (uint256(answer), diff <= stalenessThresholdSecs);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\ninterface IOracle {\\n    function getData() external view returns (uint256, bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChainlinkAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IChainlinkAggregator {\\n    function decimals() external view returns (uint8);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stalenessThresholdSecs\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IChainlinkAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stalenessThresholdSecs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChainlinkOracle","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000000000000000000000000000000000000000015180","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}