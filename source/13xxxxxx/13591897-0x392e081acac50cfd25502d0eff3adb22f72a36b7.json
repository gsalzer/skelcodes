{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GrailerMintTreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IGrailer {\\n    function mintPublic(uint numberOfTokens) external payable;\\n    function flipSaleStatus() external;\\n    function transferOwnership(address newOwner) external;\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n    function balanceOf(address owner) external returns (uint256);\\n    function ownerOf(uint256 tokenId) external returns (address);\\n    function withdraw() external;\\n}\\n\\ncontract GrailerMintTreasury is Ownable {\\n\\n    event Buy(\\n        address indexed owner,\\n        uint256 numberOfTokens,\\n        uint256 totalPrice,\\n        bool grailerOnly\\n    );\\n\\n    IGrailer public Grailer;\\n    address public daoAddress;\\n    address public nftContract;\\n\\n    bool public saleIsActive;\\n    bool public saleIsActiveGrailerOnly;\\n    uint256 public maxByMint;\\n    uint256 public fixedPrice;\\n    uint256 public trancheStart;\\n    uint256 public trancheEnd;\\n    uint256 public prevTokenId;\\n\\n    constructor(address _nftContract) {\\n        nftContract = _nftContract;\\n        daoAddress = 0x63fE60e3373De8480eBe56Db5B153baB1A431E38;\\n        maxByMint = 10;\\n        fixedPrice = 1.25 ether;\\n        Grailer = IGrailer(nftContract);\\n    }\\n\\n    function mintBatch(uint numberOfBatches, uint batchSize) external payable onlyOwner {\\n        Grailer.flipSaleStatus();\\n        for(uint i=1; i<=numberOfBatches; i++) {\\n            Grailer.mintPublic{ value: msg.value / numberOfBatches }(batchSize);\\n        }\\n        Grailer.flipSaleStatus();\\n    }\\n\\n    function withdrawNft(uint _start, uint _end) external onlyOwner {\\n        for(uint i=_start; i <= _end; i++) {\\n            Grailer.safeTransferFrom(address(this), daoAddress, i);\\n        }\\n    }\\n\\n    function transferNftOwnership(address _address) external onlyOwner {\\n        Grailer.transferOwnership(_address);\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        uint balance = address(this).balance;\\n        require(balance > 0);\\n        _withdraw(daoAddress, balance);\\n    }\\n \\n    function _withdraw(address _address, uint256 _amount) private {\\n        (bool success, ) = _address.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Tx failed\\\");\\n    }\\n\\n    function setDaoAddress(address _daoAddress) external onlyOwner {\\n        daoAddress = _daoAddress;\\n    }\\n\\n    function flipSaleStatus() external onlyOwner {\\n        saleIsActive = !saleIsActive;\\n    }\\n\\n    function flipSaleGrailerOnlyStatus() external onlyOwner {\\n        saleIsActiveGrailerOnly = !saleIsActiveGrailerOnly;\\n    }\\n\\n    function setFixedPrice(uint256 _fixedPrice) external onlyOwner {\\n        fixedPrice = _fixedPrice;\\n    }\\n\\n    function setMaxByMint(uint256 _maxByMint) external onlyOwner {\\n        maxByMint = _maxByMint;\\n    }\\n\\n    function setTranche(uint256 _trancheStart, uint256 _trancheEnd) external onlyOwner {\\n        require(\\n            Grailer.ownerOf(_trancheStart) == address(this) \\n            && Grailer.ownerOf(_trancheEnd) == address(this),\\n            \\\"Not owned\\\"\\n        );\\n        trancheStart = _trancheStart;\\n        trancheEnd = _trancheEnd;\\n        prevTokenId = _trancheStart-1;\\n    }\\n\\n    function buyPublic(uint numberOfTokens) external payable {\\n        require(saleIsActive, \\\"Sale not active\\\");\\n        require(fixedPrice * numberOfTokens <= msg.value, \\\"Eth val incorrect\\\");\\n        _transfer(numberOfTokens);\\n        emit Buy(msg.sender, numberOfTokens, msg.value, false);\\n    }\\n\\n    function buyGrailerOnly(uint numberOfTokens) external payable {\\n        require(saleIsActiveGrailerOnly, \\\"Grailer sale not active\\\");\\n        require(fixedPrice * numberOfTokens <= msg.value, \\\"Eth val incorrect\\\");\\n        require(Grailer.balanceOf(msg.sender) > 0, \\\"Must be a Grailer\\\");\\n        _transfer(numberOfTokens);\\n        emit Buy(msg.sender, numberOfTokens, msg.value, true);\\n    }\\n\\n    function _transfer(uint numberOfTokens) private {\\n        require(numberOfTokens <= maxByMint, \\\"Max per buy exceeded\\\");\\n        require(prevTokenId + numberOfTokens <= trancheEnd, \\\"No more available\\\");\\n        for(uint i = 1; i <= numberOfTokens; i++) {\\n            Grailer.safeTransferFrom(address(this), msg.sender, prevTokenId + 1);\\n            prevTokenId = prevTokenId + 1;\\n        }\\n    }\\n\\n    function withdrawFromGrailer() external onlyOwner {\\n        Grailer.withdraw();\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"grailerOnly\",\"type\":\"bool\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Grailer\",\"outputs\":[{\"internalType\":\"contract IGrailer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"buyGrailerOnly\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"buyPublic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipSaleGrailerOnlyStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxByMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfBatches\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleIsActiveGrailerOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoAddress\",\"type\":\"address\"}],\"name\":\"setDaoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fixedPrice\",\"type\":\"uint256\"}],\"name\":\"setFixedPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxByMint\",\"type\":\"uint256\"}],\"name\":\"setMaxByMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trancheEnd\",\"type\":\"uint256\"}],\"name\":\"setTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trancheEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trancheStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferNftOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFromGrailer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"withdrawNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GrailerMintTreasury","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008bb186371d019a190e4fc01584dd164ae10063a8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}