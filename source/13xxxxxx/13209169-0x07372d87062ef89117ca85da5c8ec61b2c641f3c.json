{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.26;\r\n\r\ncontract Uploader {\r\n    address public owner;\r\n    struct Record {\r\n        uint64 begin;\r\n        uint64 end;\r\n        uint64 timestamp;\r\n        bytes fingerprint;\r\n    }\r\n    Record[] Records;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        uint64 _begin,\r\n        uint64 _end,\r\n        uint64 _timestamp,\r\n        bytes _fingerprint\r\n    ) public {\r\n        owner = msg.sender;\r\n        Records.push(Record(_begin, _end, _timestamp, _fingerprint));\r\n    }\r\n\r\n    /**\r\n     * @dev Function to upload the blockchain fingerprint.\r\n     * @param _begin uint64 The beginning block of the fingerprint.\r\n     * @param _end uint64 The ending block of the fingerprint.\r\n     * @param _timestamp uint64 The uploaded time of the fingerprint\r\n     * @param _fingerprint bytes The fingerprint from the beginning block to the end block\r\n     */\r\n    function uploadNewRecord(\r\n        uint64 _begin,\r\n        uint64 _end,\r\n        uint64 _timestamp,\r\n        bytes _fingerprint\r\n    ) external onlyOwner {\r\n        Records.push(Record(_begin, _end, _timestamp, _fingerprint));\r\n    }\r\n\r\n    /**\r\n     * @dev Function to retrieve the record by the block number.\r\n     * @param blockNumber uint64 The block number which is used to retrieve the fingerprint including it.\r\n     * @return (uint64, uint64, uint64, bytes) The latest record.\r\n     */\r\n    function getRecordByBlockNumber(uint64 blockNumber)\r\n        external\r\n        view\r\n        returns (\r\n            uint64,\r\n            uint64,\r\n            uint64,\r\n            bytes\r\n        )\r\n    {\r\n        uint256 len = getRecordsLength();\r\n        Record memory record = Records[len - 1];\r\n        uint64 end = record.end;\r\n        require(blockNumber <= end, \"The record havn't uploaded yet.\");\r\n        uint64 ans = binarySearch(0, uint64(len) - 1, blockNumber);\r\n        Record memory res = Records[ans];\r\n        return (res.begin, res.end, res.timestamp, res.fingerprint);\r\n    }\r\n\r\n    function binarySearch(\r\n        uint64 begin,\r\n        uint64 end,\r\n        uint64 value\r\n    ) internal view returns (uint64) {\r\n        uint64 len = end - begin;\r\n        uint64 mid = begin + len / 2;\r\n        Record memory record = Records[mid];\r\n        if (record.begin > value) return binarySearch(begin, mid, value);\r\n        else if (record.end < value) return binarySearch(mid + 1, end, value);\r\n        else return mid;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to retrieve the length of the record.\r\n     * @return uint256 The count of the records.\r\n     */\r\n    function getRecordsLength() public view returns (uint256) {\r\n        return Records.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to retrieve the latest record.\r\n     * @return (uint64, uint64, uint64, bytes) The latest record.\r\n     */\r\n    function getLatestRecord()\r\n        external\r\n        view\r\n        returns (\r\n            uint64,\r\n            uint64,\r\n            uint64,\r\n            bytes\r\n        )\r\n    {\r\n        Record memory record = Records[getRecordsLength() - 1];\r\n        return (record.begin, record.end, record.timestamp, record.fingerprint);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to retrieve the latest record.\r\n     * @param index uint64 The index of the record which will be retrieved.\r\n     * @return (uint64, uint64, uint64, bytes) The record with the input index.\r\n     */\r\n    function getRecordByIndex(uint256 index)\r\n        external\r\n        view\r\n        returns (\r\n            uint64,\r\n            uint64,\r\n            uint64,\r\n            bytes\r\n        )\r\n    {\r\n        require(index <= Records.length, \"Out of index\");\r\n        Record memory record = Records[index - 1];\r\n        return (record.begin, record.end, record.timestamp, record.fingerprint);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_begin\",\"type\":\"uint64\"},{\"name\":\"_end\",\"type\":\"uint64\"},{\"name\":\"_timestamp\",\"type\":\"uint64\"},{\"name\":\"_fingerprint\",\"type\":\"bytes\"}],\"name\":\"uploadNewRecord\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint64\"}],\"name\":\"getRecordByBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecordsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRecordByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_begin\",\"type\":\"uint64\"},{\"name\":\"_end\",\"type\":\"uint64\"},{\"name\":\"_timestamp\",\"type\":\"uint64\"},{\"name\":\"_fingerprint\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Uploader","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004d00000000000000000000000000000000000000000000000000000000613d94920000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004063353863323139373433626539333438326431643131666634343765643838646462336430626266326635346462393830306332623433626466383635393837","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c8b1c444a0f4cb37e212dc3eda6ddf7b952e0843c042bc9c4bea3e48c8644bb1"}]}