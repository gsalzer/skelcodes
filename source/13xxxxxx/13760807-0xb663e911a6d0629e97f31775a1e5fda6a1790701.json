{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.4 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ISashoToken.sol\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface ISashoToken is IERC20 {\r\n\r\n    function mint(address account, uint256 rawAmount) external;\r\n\r\n    function burn(uint256 tokenId) external;\r\n\r\n    function delegate(address delegatee) external;\r\n\r\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    function setMinter(address minter) external;\r\n\r\n    function lockMinter() external;\r\n\r\n    function getCurrentVotes(address account) external view returns (uint96);\r\n\r\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint96);\r\n}\r\n\r\n\r\n// File contracts/MultisendSasho.sol\r\n\r\n\r\n/// @title Sasho multisend contract.\r\n\r\npragma solidity ^0.8.6;\r\n\r\ncontract MultisendSasho {\r\n\r\n  // The Sashos ERC20 token contract.\r\n  ISashoToken public sashos;\r\n\r\n  constructor(ISashoToken _sashos) {\r\n    sashos = _sashos;\r\n  }\r\n\r\n  function multiSashoTransfer(\r\n      address[] memory _addresses,\r\n      uint[] memory _amounts\r\n  ) public {\r\n      for (uint i = 0; i < _addresses.length; i++) {\r\n          _safeSashoTransfer(_addresses[i], _amounts[i]);\r\n      }\r\n  }\r\n\r\n  /// @notice `_safeERC20Transfer` is used internally to\r\n  ///  transfer a quantity of ERC20 tokens safely.\r\n  function _safeSashoTransfer(address _to, uint _amount) internal {\r\n      require(_to != address(0));\r\n      require(sashos.transferFrom(msg.sender, _to, _amount));\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ISashoToken\",\"name\":\"_sashos\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiSashoTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sashos\",\"outputs\":[{\"internalType\":\"contract ISashoToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MultisendSasho","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000006148529e57e3eab31b2a3cc116144f3f926c3530","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://37ff68263d14e4f715d395309c31b81e00e5e3d7f6c161330c6e96ef131d66ec"}]}