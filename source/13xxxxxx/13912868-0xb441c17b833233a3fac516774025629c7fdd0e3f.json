{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CryptoKombatClaim.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport './interfaces/ICollectionMint.sol';\\n\\ncontract CryptoKombatClaim is Context {\\n    address public owner;\\n\\n    ICollectionMint public collection;\\n\\n    uint256 public CLAIM_START;\\n    uint256 public CLAIM_END;\\n    uint256 public HERO_ID;\\n\\n    mapping(address => bool) public isClaimed;\\n\\n    // EVENTS\\n    event Claimed(address indexed account);\\n\\n    // CONSTRUCTOR\\n    constructor(\\n        address _collection,\\n        uint256 _heroId,\\n        uint256 _start,\\n        uint256 _end\\n    ) {\\n        require(_collection != address(0), '!zero');\\n        require(_heroId != 0, '!zero');\\n        require(_start != 0, '!zero');\\n        require(_end != 0, '!zero');\\n        require(_start < _end, '!time');\\n\\n        owner = _msgSender();\\n        collection = ICollectionMint(_collection);\\n        CLAIM_START = _start;\\n        CLAIM_END = _end;\\n        HERO_ID = _heroId;\\n    }\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        require(owner == _msgSender(), '!owner');\\n        _;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    function claim() external {\\n        require(!isClaimed[_msgSender()], '!claimed');\\n        require(block.timestamp >= CLAIM_START, '!start');\\n        require(block.timestamp <= CLAIM_END, '!end');\\n        require(tx.origin == _msgSender(), '!eoa');\\n\\n        isClaimed[_msgSender()] = true;\\n\\n        collection.mint(_msgSender(), HERO_ID, 1, bytes('0x0'));\\n\\n        emit Claimed(_msgSender());\\n    }\\n\\n    // Admin functions\\n\\n    function setStartEnd(uint256 _start, uint256 _end) external onlyOwner {\\n        require(_start != 0, '!zero');\\n        require(_end != 0, '!zero');\\n        require(_start < _end, '!time');\\n\\n        CLAIM_START = _start;\\n        CLAIM_END = _end;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICollectionMint.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ICollectionMint {\\n    function mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _quantity,\\n        bytes memory _data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_heroId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HERO_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collection\",\"outputs\":[{\"internalType\":\"contract ICollectionMint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setStartEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CryptoKombatClaim","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d0f27dfa54fbf80b823a63470c0e693ae4a626b8000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000061cef0c00000000000000000000000000000000000000000000000000000000061e165c0","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}