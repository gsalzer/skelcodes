{"status":"1","message":"OK","result":[{"SourceCode":"// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/CharterManager.sol\n// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity =0.6.12;\n\n////// src/CharterManager.sol\n// Copyright (C) 2021 Dai Foundation\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.6.12; */\n\ninterface VatLike_16 {\n    function live() external view returns (uint256);\n    function wards(address) external view returns (uint256);\n    function urns(bytes32, address) external view returns (uint256, uint256);\n    function fork(bytes32, address, address, int256, int256) external;\n    function frob(bytes32, address, address, address, int256, int256) external;\n    function flux(bytes32, address, address, uint256) external;\n    function move(address, address, uint256) external;\n    function hope(address) external;\n    function ilks(bytes32) external view returns (\n        uint256 Art,  // [wad]\n        uint256 rate, // [ray]\n        uint256 spot, // [ray]\n        uint256 line, // [rad]\n        uint256 dust  // [rad]\n    );\n}\n\ninterface SpotterLike_3 {\n    function ilks(bytes32) external returns (address, uint256);\n}\n\ninterface GemLike_7 {\n    function approve(address, uint256) external;\n    function transferFrom(address, address, uint256) external;\n}\n\ninterface ManagedGemJoinLike {\n    function gem() external view returns (GemLike_7);\n    function ilk() external view returns (bytes32);\n    function join(address, uint256) external;\n    function exit(address, address, uint256) external;\n}\n\ncontract UrnProxy {\n    address immutable public usr;\n\n    constructor(address vat_, address usr_) public {\n        usr = usr_;\n        VatLike_16(vat_).hope(msg.sender);\n    }\n}\n\ncontract CharterManager {\n    address public implementation;\n    mapping (address => uint256) public wards;\n\n    event Rely(address indexed usr);\n    event Deny(address indexed usr);\n    event SetImplementation(address indexed);\n\n    constructor() public {\n        wards[msg.sender] = 1;\n        emit Rely(msg.sender);\n    }\n\n    function rely(address usr) external auth {\n        wards[usr] = 1;\n        emit Rely(usr);\n    }\n\n    function deny(address usr) external auth {\n        wards[usr] = 0;\n        emit Deny(usr);\n    }\n\n    modifier auth {\n        require(wards[msg.sender] == 1, \"CharterManager/non-authed\");\n        _;\n    }\n\n    function setImplementation(address implementation_) external auth {\n        implementation = implementation_;\n        emit SetImplementation(implementation_);\n    }\n\n    fallback() external {\n        address _impl = implementation;\n        require(_impl != address(0));\n\n        assembly {\n            let ptr := mload(0x40)\n            calldatacopy(ptr, 0, calldatasize())\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\n            let size := returndatasize()\n            returndatacopy(ptr, 0, size)\n\n            switch result\n            case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n}\n\ncontract CharterManagerImp {\n    // --- Proxy Storage ---\n    bytes32 slot0; // avoid collision with proxy's implementation field\n    mapping (address => uint256) public wards;\n\n    // --- Implementation Storage ---\n    mapping (address => address) public proxy; // UrnProxy per user\n    mapping (address => mapping (address => uint256))  public can;\n    mapping (bytes32 => uint256)                       public gate;  // allow only permissioned vaults\n    mapping (bytes32 => uint256)                       public Nib;   // fee percentage for un-permissioned vaults [wad]\n    mapping (bytes32 => mapping (address => uint256))  public nib;   // fee percentage for permissioned vaults    [wad]\n    mapping (bytes32 => uint256)                       public Peace; // min CR for un-permissioned vaults         [ray]\n    mapping (bytes32 => mapping (address => uint256))  public peace; // min CR for permissioned vaults            [ray]\n    mapping (bytes32 => mapping (address => uint256))  public uline; // debt ceiling for permissioned vaults      [rad]\n\n    address public immutable vat;\n    address public immutable vow;\n    address public immutable spotter;\n\n    // --- Events ---\n    event File(bytes32 indexed ilk, bytes32 indexed what, uint256 data);\n    event File(bytes32 indexed ilk, address indexed usr, bytes32 indexed what, uint256 data);\n    event Hope(address indexed from, address indexed to);\n    event Nope(address indexed from, address indexed to);\n    event NewProxy(address indexed usr, address indexed urp);\n\n    // --- Administration ---\n    function file(bytes32 ilk, bytes32 what, uint256 data) external auth {\n        if (what == \"gate\") gate[ilk] = data;\n        else if (what == \"Nib\") Nib[ilk] = data;\n        else if (what == \"Peace\") Peace[ilk] = data;\n        else revert(\"CharterManager/file-unrecognized-param\");\n        emit File(ilk, what, data);\n    }\n    function file(bytes32 ilk, address usr, bytes32 what, uint256 data) external auth {\n        if (what == \"uline\") uline[ilk][usr] = data;\n        else if (what == \"nib\") nib[ilk][usr] = data;\n        else if (what == \"peace\") peace[ilk][usr] = data;\n        else revert(\"CharterManager/file-unrecognized-param\");\n        emit File(ilk, usr, what, data);\n    }\n\n    // --- Math ---\n    uint256 constant WAD = 10 ** 18;\n    uint256 constant RAY = 10 ** 27;\n\n    function _sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n    function _mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n    function _wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = _mul(x, y) / WAD;\n    }\n    function _rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = _mul(x, y) / RAY;\n    }\n    function _rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = _mul(x, RAY) / y;\n    }\n\n    // --- Auth ---\n    modifier auth {\n        require(wards[msg.sender] == 1, \"CharterManager/non-authed\");\n        _;\n    }\n\n    constructor(address vat_, address vow_, address spotter_) public {\n        vat = vat_;\n        vow = vow_;\n        spotter = spotter_;\n    }\n\n    modifier allowed(address usr) {\n        require(msg.sender == usr || can[usr][msg.sender] == 1, \"CharterManager/not-allowed\");\n        _;\n    }\n    function hope(address usr) external {\n        can[msg.sender][usr] = 1;\n        emit Hope(msg.sender, usr);\n    }\n    function nope(address usr) external {\n        can[msg.sender][usr] = 0;\n        emit Nope(msg.sender, usr);\n    }\n\n    function getOrCreateProxy(address usr) public returns (address urp) {\n        urp = proxy[usr];\n        if (urp == address(0)) {\n            urp = proxy[usr] = address(new UrnProxy(address(vat), usr));\n            emit NewProxy(usr, urp);\n        }\n    }\n\n    function join(address gemJoin, address usr, uint256 amt) external {\n        require(VatLike_16(vat).wards(gemJoin) == 1, \"CharterManager/gem-join-not-authorized\");\n\n        GemLike_7 gem = ManagedGemJoinLike(gemJoin).gem();\n        gem.transferFrom(msg.sender, address(this), amt);\n        gem.approve(gemJoin, amt);\n        ManagedGemJoinLike(gemJoin).join(getOrCreateProxy(usr), amt);\n    }\n\n    function exit(address gemJoin, address usr, uint256 amt) external {\n        require(VatLike_16(vat).wards(gemJoin) == 1, \"CharterManager/gem-join-not-authorized\");\n\n        address urp = proxy[msg.sender];\n        require(urp != address(0), \"CharterManager/non-existing-urp\");\n        ManagedGemJoinLike(gemJoin).exit(urp, usr, amt);\n    }\n\n    function _draw(\n        bytes32 ilk, address u, address urp, address w, int256 dink, int256 dart, uint256 rate, uint256 _gate\n        ) internal {\n        uint256 _nib = (_gate == 1) ? nib[ilk][u] : Nib[ilk];\n        uint256 dtab = _mul(rate, uint256(dart)); // rad\n        uint256 coin = _wmul(dtab, _nib);         // rad\n\n        VatLike_16(vat).frob(ilk, urp, urp, urp, dink, dart);\n        VatLike_16(vat).move(urp, w, _sub(dtab, coin));\n        VatLike_16(vat).move(urp, vow, coin);\n    }\n\n    function _validate(\n        bytes32 ilk, address u, address urp, int256 dink, int256 dart, uint256 rate, uint256 spot, uint256 _gate\n        ) internal {\n        if (dart > 0 || dink < 0) {\n            // vault is more risky than before\n\n            (uint256 ink, uint256 art) = VatLike_16(vat).urns(ilk, urp);\n            uint256 tab = _mul(art, rate); // rad\n\n            if (dart > 0 && _gate == 1) {\n                require(tab <= uline[ilk][u], \"CharterManager/user-line-exceeded\");\n            }\n\n            uint256 _peace = (_gate == 1) ? peace[ilk][u] : Peace[ilk];\n            if (_peace > 0) {\n                (, uint256 mat) = SpotterLike_3(spotter).ilks(ilk);\n                // reconstruct price, avoid un-applying par so it's accounted for when comparing to tab\n                uint256 peaceSpot = _rdiv(_rmul(spot, mat), _peace); // ray\n                require(tab <= _mul(ink, peaceSpot), \"CharterManager/below-peace-ratio\");\n            }\n        }\n    }\n\n    function frob(bytes32 ilk, address u, address v, address w, int256 dink, int256 dart) external allowed(u) {\n        require(u == v && w == msg.sender, \"CharterManager/not-matching\");\n        address urp = getOrCreateProxy(u);\n        (, uint256 rate, uint256 spot,,) = VatLike_16(vat).ilks(ilk);\n        uint256 _gate = gate[ilk];\n\n        if (dart <= 0) {\n            VatLike_16(vat).frob(ilk, urp, urp, w, dink, dart);\n        } else {\n            _draw(ilk, u, urp, w, dink, dart, rate, _gate);\n        }\n        _validate(ilk, u, urp, dink, dart, rate, spot, _gate);\n    }\n\n    function flux(bytes32 ilk, address src, address dst, uint256 wad) external allowed(src) {\n        address surp = getOrCreateProxy(src);\n        address durp = getOrCreateProxy(dst);\n\n        VatLike_16(vat).flux(ilk, surp, durp, wad);\n    }\n\n    function onLiquidation(address gemJoin, address usr, uint256 wad) external {}\n\n    function onVatFlux(address gemJoin, address from, address to, uint256 wad) external {}\n\n    function quit(bytes32 ilk, address dst) external {\n        require(VatLike_16(vat).live() == 0, \"CharterManager/vat-still-live\");\n\n        address urp = getOrCreateProxy(msg.sender);\n        (uint256 ink, uint256 art) = VatLike_16(vat).urns(ilk, urp);\n        require(int256(ink) >= 0, \"CharterManager/overflow\");\n        require(int256(art) >= 0, \"CharterManager/overflow\");\n        VatLike_16(vat).fork(\n            ilk,\n            urp,\n            dst,\n            int256(ink),\n            int256(art)\n        );\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vat_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vow_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spotter_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Hope\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"urp\",\"type\":\"address\"}],\"name\":\"NewProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Nope\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"Nib\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"Peace\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"can\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"flux\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"v\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"w\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"dink\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dart\",\"type\":\"int256\"}],\"name\":\"frob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"gate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getOrCreateProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"urp\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"hope\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nib\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"nope\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"onLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"onVatFlux\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"peace\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"quit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spotter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CharterManagerImp","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492b000000000000000000000000a950524441892a31ebddf91d3ceefa04bf45446600000000000000000000000065c79fcb50ca1594b025960e539ed7a9a6d434a3","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}