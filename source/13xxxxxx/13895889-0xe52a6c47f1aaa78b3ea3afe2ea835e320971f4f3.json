{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.0;\r\n\r\ninterface IBurnableEtherLegendsToken {\r\n    function burn(uint256 tokenId) external;\r\n}\r\n\r\n// File: contracts/ERC721/el/IMintableEtherLegendsToken.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\ninterface IMintableEtherLegendsToken {\r\n    function mintTokenOfType(address to, uint256 idOfTokenType) external;\r\n}\r\n\r\n// File: contracts/ERC721/el/ITokenDefinitionManager.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\ninterface ITokenDefinitionManager {\r\n    function getNumberOfTokenDefinitions() external view returns (uint256);\r\n    function hasTokenDefinition(uint256 tokenTypeId) external view returns (bool);\r\n    function getTokenTypeNameAtIndex(uint256 index) external view returns (string memory);\r\n    function getTokenTypeName(uint256 tokenTypeId) external view returns (string memory);\r\n    function getTokenTypeId(string calldata name) external view returns (uint256);\r\n    function getCap(uint256 tokenTypeId) external view returns (uint256);\r\n    function getAbbreviation(uint256 tokenTypeId) external view returns (string memory);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others (`ERC165Checker`).\r\n *\r\n * For an implementation, see `ERC165`.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either `approve` or `setApproveForAll`.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either `approve` or `setApproveForAll`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract IERC721Enumerable is IERC721 {\r\n    function totalSupply() public view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Full.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract IERC721Full is IERC721, IERC721Enumerable, IERC721Metadata {\r\n    // solhint-disable-previous-line no-empty-blocks\r\n}\r\n\r\n// File: contracts/ERC721/el/IEtherLegendsToken.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\ncontract IEtherLegendsToken is IERC721Full, IMintableEtherLegendsToken, IBurnableEtherLegendsToken, ITokenDefinitionManager {\r\n    function totalSupplyOfType(uint256 tokenTypeId) external view returns (uint256);\r\n    function getTypeIdOfToken(uint256 tokenId) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/ERC721/el/accessors/BalanceOfTokenTypeId.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\ncontract BalanceOfTokenTypeId {\r\n\r\n  IEtherLegendsToken public elGen1Token;\r\n\r\n  constructor() public\r\n  {\r\n      elGen1Token = IEtherLegendsToken(0x395E5461693e0bB5EC78302605030050f69e628d);\r\n  }\r\n\r\n  function balanceOfTokenTypeId(address owner, uint256 tokenTypeId) public view returns (uint256) {\r\n\r\n    uint256 combinedBalance = elGen1Token.balanceOf(owner);\r\n    uint256 balanceOfType = 0;\r\n\r\n    for(uint256 i = 0; i < combinedBalance; i++) {\r\n\r\n      uint256 ownedTokenId = elGen1Token.tokenOfOwnerByIndex(owner, i);\r\n      uint256 ownedTokenTypeId = elGen1Token.getTypeIdOfToken(ownedTokenId);\r\n\r\n      if(tokenTypeId == ownedTokenTypeId) {\r\n          balanceOfType++;\r\n      }\r\n    }\r\n    return balanceOfType;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"elGen1Token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"tokenTypeId\",\"type\":\"uint256\"}],\"name\":\"balanceOfTokenTypeId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"BalanceOfTokenTypeId","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://82abb3996f1c564db4a8fe6ba0ce9c50cee00ad33d91052093e5c1fc7ef36e99"}]}