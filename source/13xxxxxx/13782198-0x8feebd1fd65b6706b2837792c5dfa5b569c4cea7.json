{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @notice chainlink price oracle.\\n * This is the contract to fix the price at the nearest time after expiry.\\n */\\ncontract PriceOracle is Ownable {\\n    /// @dev expiry price with timestamp\\n    struct ExpiryPrice {\\n        uint256 price;\\n        uint256 timestamp;\\n    }\\n\\n    /// @dev chainlink aggregator address of the underlying asset price\\n    mapping(address => AggregatorV3Interface) aggregators;\\n\\n    /// @dev aggregator address => timestamp => expiry price\\n    mapping(address => mapping(uint256 => ExpiryPrice)) internal expiryPrices;\\n\\n    event ExpiryPriceUpdated(address aggregator, uint256 expiry, uint256 price);\\n\\n    uint256 public constant DISPUTE_PERIOD = 2 hours;\\n\\n    /**\\n     * @notice set aggregator\\n     * only owner can set new aggregator\\n     */\\n    function setAggregator(address _aggregatorAddress) external onlyOwner {\\n        require(address(aggregators[_aggregatorAddress]) == address(0));\\n        aggregators[_aggregatorAddress] = AggregatorV3Interface(_aggregatorAddress);\\n    }\\n\\n    /**\\n     * @notice set expiry price\\n     * anyone can set price if the price has not been setted.\\n     * Also timestamp must be later than expiration.\\n     */\\n    function setExpiryPrice(address _aggregator, uint256 _expiryTimestamp) external {\\n        (uint256 price, uint256 timestamp) = getPrice(_aggregator);\\n\\n        require(_expiryTimestamp < timestamp, \\\"PriceOracle: price timestamp must be later than expiry\\\");\\n\\n        ExpiryPrice storage expiryPrice = expiryPrices[_aggregator][_expiryTimestamp];\\n\\n        require(expiryPrice.timestamp == 0, \\\"PriceOracle: already setted\\\");\\n\\n        expiryPrice.price = price;\\n        expiryPrice.timestamp = timestamp;\\n\\n        emit ExpiryPriceUpdated(_aggregator, _expiryTimestamp, price);\\n    }\\n\\n    /**\\n     * @notice update expiry price\\n     * anyone can update price if the price has not been setted\\n     * or if new price's timestamp is earlier than previous one.\\n     * Also timestamp must be later than expiration.\\n     */\\n    function updateExpiryPrice(\\n        address _aggregator,\\n        uint256 _expiryTimestamp,\\n        uint80 _roundId\\n    ) external {\\n        (uint256 price, uint256 timestamp) = getHistoricalPrice(_aggregator, _roundId);\\n\\n        require(_expiryTimestamp < timestamp, \\\"PriceOracle: price timestamp must be later than expiry\\\");\\n\\n        ExpiryPrice storage expiryPrice = expiryPrices[_aggregator][_expiryTimestamp];\\n\\n        require(\\n            expiryPrice.timestamp == 0 || expiryPrice.timestamp > timestamp,\\n            \\\"PriceOracle: new price's timestamp must be close to expiry\\\"\\n        );\\n\\n        expiryPrice.price = price;\\n        expiryPrice.timestamp = timestamp;\\n\\n        emit ExpiryPriceUpdated(_aggregator, _expiryTimestamp, price);\\n    }\\n\\n    /**\\n     * @notice get price for an expiration\\n     * @return price price scaled by 1e8\\n     * @return _isFinalized returns true if price has been finalized, if not returns false\\n     */\\n    function getExpiryPrice(address _aggregator, uint256 _expiryTimestamp)\\n        external\\n        view\\n        returns (uint256 price, bool _isFinalized)\\n    {\\n        price = expiryPrices[_aggregator][_expiryTimestamp].price;\\n        _isFinalized = isFinalized(_aggregator, _expiryTimestamp);\\n    }\\n\\n    /**\\n     * @notice return flag if price is finalized or not\\n     * true if dispute period has been passed and price has been setted more than once\\n     */\\n    function isFinalized(address _aggregator, uint256 _expiryTimestamp) internal view returns (bool) {\\n        return\\n            (_expiryTimestamp + DISPUTE_PERIOD < block.timestamp) &&\\n            expiryPrices[_aggregator][_expiryTimestamp].timestamp != 0;\\n    }\\n\\n    /**\\n     * @notice get price scaled by 1e8\\n     */\\n    function getPrice(address _aggregatorAddress) public view returns (uint256, uint256) {\\n        (, int256 answer, , uint256 roundTimestamp, ) = aggregators[_aggregatorAddress].latestRoundData();\\n\\n        require(answer > 0, \\\"PriceOracle: price is lower than 0\\\");\\n\\n        return (uint256(answer), roundTimestamp);\\n    }\\n\\n    function getHistoricalPrice(address _aggregatorAddress, uint80 _roundId) public view returns (uint256, uint256) {\\n        (, int256 answer, , uint256 roundTimestamp, ) = aggregators[_aggregatorAddress].getRoundData(_roundId);\\n\\n        require(answer > 0, \\\"PriceOracle: price is lower than 0\\\");\\n\\n        return (uint256(answer), roundTimestamp);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ExpiryPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DISPUTE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"getExpiryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isFinalized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getHistoricalPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregatorAddress\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregatorAddress\",\"type\":\"address\"}],\"name\":\"setAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"setExpiryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"updateExpiryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PriceOracle","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}