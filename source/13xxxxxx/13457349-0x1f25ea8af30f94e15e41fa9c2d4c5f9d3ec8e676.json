{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\ninterface IRouter {\r\n    function WETH() external view returns (address);\r\n\r\n    function factory() external view returns (address);\r\n}\r\n\r\ninterface IFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IPair {\r\n    function token0() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n}\r\n\r\ncontract TokenConverter {\r\n    mapping(address => mapping(address => address)) pairs;\r\n\r\n    IRouter public DEFAULT_ROUTER;\r\n    IFactory public DEFAULT_FACTORY;\r\n    address public WETH;\r\n\r\n    constructor(IRouter _defaultRouter) {\r\n        // 0x10ED43C718714eb63d5aA57B78B54704E256024E PANCAKE V2\r\n        // 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D UNI V2\r\n        DEFAULT_ROUTER = _defaultRouter; \r\n        DEFAULT_FACTORY = IFactory(DEFAULT_ROUTER.factory());\r\n        WETH = DEFAULT_ROUTER.WETH();\r\n    }\r\n\r\n    function convertTwoByPair(\r\n        address _tokenA,\r\n        uint256 _amount,\r\n        IPair _pair\r\n    ) public view returns (uint256) {\r\n        if (_amount == 0) return 0;\r\n        address _t0 = _pair.token0();\r\n        (uint112 _r0, uint112 _r1, ) = _pair.getReserves();\r\n        if (_r0 == 0 || _r1 == 0) return 0;\r\n        if (_t0 == _tokenA) return (_amount * _r1) / _r0;\r\n        else return (_amount * _r0) / _r1;\r\n    }\r\n\r\n    // BY DEFAULT\r\n\r\n    function convertTwo(\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        if (_tokenA == _tokenB) return _amount;\r\n        return convertTwoByFactory(DEFAULT_FACTORY, _tokenA, _tokenB, _amount);\r\n    }\r\n\r\n    function convertTwoUniversal(\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        if (_tokenA == _tokenB) return _amount;\r\n        return convertTwoUniversalByFactory(DEFAULT_FACTORY, _tokenA, _tokenB, _amount);\r\n    }\r\n\r\n    function convertViaWETH(\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        if (_tokenA == _tokenB) return _amount;\r\n        return convertViaWETHByFactory(DEFAULT_FACTORY, _tokenA, _tokenB, _amount);\r\n    }\r\n\r\n    function convertChained(address[] memory _tokens, uint256 _amount) public view returns (uint256 amt) {\r\n        return convertChainedByFactory(DEFAULT_FACTORY, _tokens, _amount);\r\n    }\r\n\r\n    function convertChainedUniversal(address[] memory _tokens, uint256 _amount) public view returns (uint256 amt) {\r\n        return convertChainedUniversalByFactory(DEFAULT_FACTORY, _tokens, _amount);\r\n    }\r\n\r\n    function checkTokensDistance(address _tokenA, address _tokenB) public view returns (uint8) {\r\n        return checkTokensDistanceByFactory(DEFAULT_FACTORY, _tokenA, _tokenB);\r\n    }\r\n\r\n    // BY FACTORY\r\n\r\n    function convertTwoByFactory(\r\n        IFactory _factory,\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        if (_tokenA == _tokenB) return _amount;\r\n        IPair _pair = IPair(_factory.getPair(_tokenA, _tokenB));\r\n        if (address(_pair) == address(0)) return 0;\r\n        return convertTwoByPair(_tokenA, _amount, _pair);\r\n    }\r\n\r\n    function convertTwoUniversalByFactory(\r\n        IFactory _factory,\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        if (_tokenA == _tokenB) return _amount;\r\n        uint8 _distance = checkTokensDistanceByFactory(_factory, _tokenA, _tokenB);\r\n        if (_distance == 0) return 0;\r\n        if (_distance == 1) return convertTwoByFactory(_factory, _tokenA, _tokenB, _amount);\r\n        else return convertViaWETHByFactory(_factory, _tokenA, _tokenB, _amount);\r\n    }\r\n\r\n    function convertViaWETHByFactory(\r\n        IFactory _factory,\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        if (_tokenA == _tokenB) return _amount;\r\n        uint256 _amount_WETH = convertTwoByFactory(_factory, _tokenA, WETH, _amount);\r\n        return convertTwoByFactory(_factory, WETH, _tokenB, _amount_WETH);\r\n    }\r\n\r\n    function convertChainedByFactory(\r\n        IFactory _factory,\r\n        address[] memory _tokens,\r\n        uint256 _amount\r\n    ) public view returns (uint256 amt) {\r\n        amt = _amount;\r\n        if (_tokens.length < 2) return amt;\r\n        for (uint256 i = 0; i < _tokens.length - 1; i++) amt = convertTwoByFactory(_factory, _tokens[i], _tokens[i + 1], amt);\r\n    }\r\n\r\n    function convertChainedUniversalByFactory(\r\n        IFactory _factory,\r\n        address[] memory _tokens,\r\n        uint256 _amount\r\n    ) public view returns (uint256 amt) {\r\n        amt = _amount;\r\n        if (_tokens.length < 2) return amt;\r\n        for (uint256 i = 0; i < _tokens.length - 1; i++) amt = convertTwoUniversalByFactory(_factory, _tokens[i], _tokens[i + 1], amt);\r\n    }\r\n\r\n    function checkTokensDistanceByFactory(\r\n        IFactory _factory,\r\n        address _tokenA,\r\n        address _tokenB\r\n    ) public view returns (uint8) {\r\n        if (_tokenA == _tokenB) return 0;\r\n        address _pair = _factory.getPair(_tokenA, _tokenB);\r\n        if (address(_pair) == address(0)) {\r\n            address _pairWA = _factory.getPair(_tokenA, WETH);\r\n            address _pairWB = _factory.getPair(WETH, _tokenB);\r\n            if (_pairWA == address(0) || _pairWB == address(0)) return 0;\r\n            else return 2;\r\n        } else return 1;\r\n    }\r\n\r\n    // BY ROUTER\r\n\r\n    function convertTwoByRouter(\r\n        IRouter _router,\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        if (_tokenA == _tokenB) return _amount;\r\n        IFactory _factory = IFactory(_router.factory());\r\n        return convertTwoByFactory(_factory, _tokenA, _tokenB, _amount);\r\n    }\r\n\r\n    function convertTwoUniversalByRouter(\r\n        IRouter _router,\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        if (_tokenA == _tokenB) return _amount;\r\n        IFactory _factory = IFactory(_router.factory());\r\n        return convertTwoUniversalByFactory(_factory, _tokenA, _tokenB, _amount);\r\n    }\r\n\r\n    function convertViaWETHByRouter(\r\n        IRouter _router,\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        if (_tokenA == _tokenB) return _amount;\r\n        IFactory _factory = IFactory(_router.factory());\r\n        return convertViaWETHByFactory(_factory, _tokenA, _tokenB, _amount);\r\n    }\r\n\r\n    function convertChainedByRouter(\r\n        IRouter _router,\r\n        address[] memory _tokens,\r\n        uint256 _amount\r\n    ) public view returns (uint256 amt) {\r\n        IFactory _factory = IFactory(_router.factory());\r\n        return convertChainedByFactory(_factory, _tokens, _amount);\r\n    }\r\n\r\n    function convertChainedUniversalByRouter(\r\n        IRouter _router,\r\n        address[] memory _tokens,\r\n        uint256 _amount\r\n    ) public view returns (uint256 amt) {\r\n        IFactory _factory = IFactory(_router.factory());\r\n        return convertChainedUniversalByFactory(_factory, _tokens, _amount);\r\n    }\r\n\r\n    function checkTokensDistanceByRouter(\r\n        IRouter _router,\r\n        address _tokenA,\r\n        address _tokenB\r\n    ) public view returns (uint8) {\r\n        if (_tokenA == _tokenB) return 0;\r\n        IFactory _factory = IFactory(_router.factory());\r\n        return checkTokensDistanceByFactory(_factory, _tokenA, _tokenB);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"_defaultRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DEFAULT_FACTORY\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ROUTER\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"checkTokensDistance\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"checkTokensDistanceByFactory\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"checkTokensDistanceByRouter\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertChained\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertChainedByFactory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertChainedByRouter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertChainedUniversal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertChainedUniversalByFactory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertChainedUniversalByRouter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertTwo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertTwoByFactory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IPair\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"convertTwoByPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertTwoByRouter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertTwoUniversal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertTwoUniversalByFactory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertTwoUniversalByRouter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertViaWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertViaWETHByFactory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertViaWETHByRouter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenConverter","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://30d6ec25e89f72ecf08c7dc5d95186292f8f948f9e4810c15a028519415157c0"}]}