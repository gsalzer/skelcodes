{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FotToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./StandardToken.sol\\\";\\n\\n/// @title an Initialized IERC20 Token\\n/// @author harshrpg\\n/// @notice It is the barebone of a FOT with an additional fee infrastructure\\n/// @dev Provide the appropriate init information for all the different fee types\\ncontract FotToken is IERC20, Ownable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    string public _name;\\n    string private _symbol;\\n    uint256 private _totalTokenSupply;\\n    uint256 private _totalReflectionSupply;\\n    uint256 private _maxTxnAmount;\\n    uint256 private _taxFee;\\n    uint256 private _previousTaxFee;\\n    uint256 private _liquidityFee;\\n    uint256 private _previousLiquidityFee;\\n    uint256 private _charityFee;\\n    uint256 private _previousCharityFee;\\n    uint256 private _burnFee;\\n    uint256 private _previousBurnFee;\\n    uint256 private _totalFeeCharged;\\n    uint256 private _totalTokensBurned;\\n    uint256 private _totalCharityPaid;\\n    uint256 private _numTokensSellToAddToLiquidity;\\n    uint256 private _decimals;\\n    address private _charityAddress;\\n\\n    mapping(address => uint256) _balance;\\n    mapping(address => uint256) _reflectionBalance;\\n    mapping(address => mapping(address => uint256)) _tokensAllowed;\\n    mapping(address => bool) private _isExcludedFromFee;\\n    mapping(address => bool) private _isExcludedFromReward;\\n    address[] private _excludedAccounts;\\n\\n    uint256 private constant MAX256 = ~uint256(0);\\n\\n    IUniswapV2Router02 public router;\\n    address public pair;\\n    bool swapAndLiquifyEnabled = true;\\n    bool public inSwapAndLiquify;\\n\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n    event DexPairCreated(address thisContract, address pairAddress);\\n\\n    modifier lockTheSwap() {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    function init(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint256 basicSupply,\\n        uint256 maxTxnAmount,\\n        uint256[4] memory fees,\\n        address charityAddress,\\n        address dexAddress,\\n        address newOwner\\n    ) public {\\n        uint256 _minTokenSellValue = 5;\\n        _decimals = 18;\\n        _name = tokenName;\\n        _symbol = tokenSymbol;\\n        _totalTokenSupply = basicSupply.mul(10**(_decimals)); // 1Q.10^9\\n        _totalReflectionSupply = (MAX256 - (MAX256 % _totalTokenSupply)); // Maximum possible number divisible by 1Q\\n        uint256 numMinTokensToSell = _minTokenSellValue.div(10**4).mul(basicSupply);\\n        _numTokensSellToAddToLiquidity =\\n            numMinTokensToSell.mul(10**(_decimals));\\n            // CHECK IF MAX TXN AMOUNT != 0\\n        _maxTxnAmount = maxTxnAmount.mul(10**(_decimals));\\n        transferOwnershipFromInitialized(newOwner);\\n        IUniswapV2Router02 _router = IUniswapV2Router02(dexAddress);\\n        pair = IUniswapV2Factory(_router.factory()).createPair(\\n            address(this),\\n            _router.WETH()\\n        );\\n        router = _router;\\n        _balance[newOwner] = _totalTokenSupply;\\n        _reflectionBalance[newOwner] = _totalReflectionSupply;\\n        _isExcludedFromFee[newOwner] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _taxFee = fees[0];\\n        _liquidityFee = fees[1];\\n        _charityFee =  fees[3];\\n        _burnFee = fees[2];\\n        _charityAddress = charityAddress;\\n        emit DexPairCreated(address(this), pair);\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function decimals() public view returns (uint256) {\\n        return _decimals;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalTokenSupply;\\n    }\\n\\n    function pairAddress() public view returns (address) {\\n        return pair;\\n    }\\n\\n    function amountOfNativeCoinsHeldByContract()\\n        external\\n        view\\n        \\n        returns (uint256)\\n    {\\n        return _balance[address(this)];\\n    }\\n\\n    function burnTokens(uint256 amount) external  {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) private {\\n        _transfer(from, address(0), amount);\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcludedFromReward[account]) {\\n            return _balance[account];\\n        }\\n        return\\n            calculateTokenBalanceFromReflectionBalance(\\n                _reflectionBalance[account]\\n            );\\n    }\\n\\n    function isExcludedFromReward(address account)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _isExcludedFromReward[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(owner != spender, \\\"Owner and spender cannot be the same\\\");\\n        return _tokensAllowed[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_balance[_msgSender()] >= amount, \\\"Insufficient balance\\\");\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(spender, recipient, amount);\\n        _approve(\\n            spender,\\n            _msgSender(),\\n            _tokensAllowed[spender][_msgSender()].sub(\\n                amount,\\n                \\\"Transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _tokensAllowed[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _tokensAllowed[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"Allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function calculateReflectionBalanceFromTokenBalance(\\n        uint256 txnAmountRequested,\\n        bool deductTransferFee\\n    ) public view returns (uint256) {\\n        require(\\n            txnAmountRequested <= _totalTokenSupply,\\n            \\\"Amount must be less than supply\\\"\\n        );\\n        if (!deductTransferFee) {\\n            (\\n                ,\\n                ,\\n                ,\\n                ,\\n                ,\\n                uint256 reflections,\\n                ,\\n\\n            ) = _calculateTransactionAndReflectionsAfterFees(\\n                    txnAmountRequested\\n                );\\n            return reflections;\\n        } else {\\n            (\\n                ,\\n                ,\\n                ,\\n                ,\\n                ,\\n                ,\\n                uint256 reflectionTransfer,\\n\\n            ) = _calculateTransactionAndReflectionsAfterFees(\\n                    txnAmountRequested\\n                );\\n            return reflectionTransfer;\\n        }\\n    }\\n\\n    function excludeFromReward(address account) public  {\\n        require(!_isExcludedFromReward[account], \\\"Account is already excluded\\\");\\n        if (_reflectionBalance[account] > 0) {\\n            _balance[account] = calculateTokenBalanceFromReflectionBalance(\\n                _reflectionBalance[account]\\n            );\\n        }\\n        _isExcludedFromReward[account] = true;\\n        _excludedAccounts.push(account);\\n    }\\n\\n    function includeInReward(address account) public  {\\n        require(_isExcludedFromReward[account], \\\"Account is already included\\\");\\n        for (uint256 index = 0; index < _excludedAccounts.length; index++) {\\n            if (_excludedAccounts[index] == account) {\\n                _excludedAccounts[index] = _excludedAccounts[\\n                    _excludedAccounts.length - 1\\n                ];\\n                _balance[account] = 0;\\n                _isExcludedFromReward[account] = false;\\n                _excludedAccounts.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function excludeFromFee(address account) external  {\\n        _isExcludedFromFee[account] = true;\\n    }\\n\\n    function includeInFee(address account) external  {\\n        _isExcludedFromFee[account] = false;\\n    }\\n\\n    function setCharityAddress(address payable charityAddress)\\n        external\\n        \\n    {\\n        if (_charityFee > 0) {\\n            _charityAddress = charityAddress;\\n            _isExcludedFromFee[_charityAddress] = true;\\n        } else {\\n            _charityAddress = address(0);\\n        }\\n    }\\n\\n    function setFees(uint256[] memory fees) external  {\\n        require(fees.length == 4, \\\"Not enough elements in array\\\");\\n        _taxFee = fees[0];\\n        _liquidityFee = fees[1];\\n        _charityFee =  fees[3];\\n        _burnFee = fees[2];\\n    }\\n\\n    function setMaxTxAmount(uint256 maxTxnAmount) external  {\\n        _maxTxnAmount = maxTxnAmount.mul(10**_decimals);\\n    }\\n\\n    function setSwapAndLiquifyEnabled(bool _enabled) external  {\\n        swapAndLiquifyEnabled = _enabled;\\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\\n    }\\n\\n    function getAllFees() public view returns (uint256[4] memory) {\\n        uint256[4] memory fees = [\\n            _taxFee,\\n            _liquidityFee,\\n            _burnFee,\\n            _charityFee\\n        ];\\n        return fees;\\n    }\\n\\n    function getAllFeesChargedBurnedAndCharitized()\\n        public\\n        view\\n        returns (uint256[3] memory)\\n    {\\n        uint256[3] memory feesCharged = [\\n            _totalFeeCharged,\\n            _totalTokensBurned,\\n            _totalCharityPaid\\n        ];\\n        return feesCharged;\\n    }\\n\\n    function getCharityAddress() public view returns (address) {\\n        return _charityAddress;\\n    }\\n\\n    function getWhaleProtection() public view returns (uint256) {\\n        return _maxTxnAmount;\\n    }\\n\\n    // Private methods\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        if (_tokensAllowed[owner][spender] != 0) {\\n            _tokensAllowed[owner][spender] = 0;\\n        }\\n        _tokensAllowed[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        require(from != to, \\\"Sender and recipient the same\\\");\\n        if (from != owner() && to != owner() && _maxTxnAmount > 0) {\\n            require(\\n                amount <= _maxTxnAmount,\\n                \\\"Transfer amount exceeds maximum transaction amount\\\"\\n            );\\n        }\\n        // what is the contract's liquidity value?\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        if (\\n            contractTokenBalance >= _numTokensSellToAddToLiquidity &&\\n            !inSwapAndLiquify &&\\n            from != pair &&\\n            swapAndLiquifyEnabled\\n        ) {\\n            contractTokenBalance = _numTokensSellToAddToLiquidity;\\n            swapAndLiquify(contractTokenBalance);\\n        }\\n        bool takeFee = true;\\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\n            takeFee = false;\\n        }\\n        _transferTokens(from, to, amount, takeFee);\\n    }\\n\\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\\n        uint256 half = contractTokenBalance.div(2);\\n        uint256 otherHalf = contractTokenBalance.sub(half);\\n        uint256 initialEthBalance = address(this).balance;\\n        swapTokensForEth(half);\\n        uint256 newEthBalance = address(this).balance.sub(initialEthBalance);\\n        addLiquidity(otherHalf, newEthBalance);\\n        emit SwapAndLiquify(half, newEthBalance, otherHalf);\\n    }\\n\\n    function swapTokensForEth(uint256 tokens) private {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n\\n        _approve(address(this), address(router), tokens);\\n\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokens,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function addLiquidity(uint256 tokens, uint256 eths) private {\\n        _approve(address(this), address(router), tokens);\\n        router.addLiquidityETH{value: eths}(\\n            address(this),\\n            tokens,\\n            0,\\n            0,\\n            owner(),\\n            block.timestamp\\n        );\\n    }\\n\\n    function _transferTokens(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool takeFee\\n    ) private {\\n        if (!takeFee) {\\n            removeAllFee();\\n        }\\n        if (_isExcludedFromReward[from] && !_isExcludedFromReward[to]) {\\n            _transferFromExcludedAccount(from, to, amount);\\n        } else if (!_isExcludedFromReward[from] && _isExcludedFromReward[to]) {\\n            _transferToExcludedAccount(from, to, amount);\\n        } else if (_isExcludedFromReward[from] && _isExcludedFromReward[to]) {\\n            _transferBothExcludedAccount(from, to, amount);\\n        } else {\\n            _trasnferStandard(from, to, amount);\\n        }\\n\\n        if (!takeFee) {\\n            restoreAllFees();\\n        }\\n    }\\n\\n    function _transferFromExcludedAccount(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        (\\n            uint256 tokenTransfer,\\n            uint256 tokenTransferFee,\\n            uint256 tokenLiquidityFee,\\n            uint256 tokenCharityFee,\\n            uint256 tokenBurnFee,\\n            uint256 reflections,\\n            uint256 reflectionTransfer,\\n            uint256 reflectionFee\\n        ) = _calculateTransactionAndReflectionsAfterFees(amount);\\n        require(_balance[from] >= amount, \\\"Insufficient token balance\\\");\\n        _balance[from] = _balance[from].sub(amount);\\n        _reflectionBalance[from] = _reflectionBalance[from].sub(reflections);\\n        _reflectionBalance[to] = _reflectionBalance[to].add(reflectionTransfer);\\n        _takeLiquidityFromTransaction(tokenLiquidityFee);\\n        _reflectFee(\\n            reflectionFee,\\n            tokenTransferFee,\\n            tokenCharityFee,\\n            tokenBurnFee\\n        );\\n        emit Transfer(from, to, tokenTransfer);\\n    }\\n\\n    function _transferToExcludedAccount(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        (\\n            uint256 tokenTransfer,\\n            uint256 tokenTransferFee,\\n            uint256 tokenLiquidityFee,\\n            uint256 tokenCharityFee,\\n            uint256 tokenBurnFee,\\n            uint256 reflections,\\n            uint256 reflectionTransfer,\\n            uint256 reflectionFee\\n        ) = _calculateTransactionAndReflectionsAfterFees(amount);\\n        _reflectionBalance[from] = _reflectionBalance[from].sub(reflections);\\n        _balance[to] = _balance[to].add(tokenTransfer);\\n        _reflectionBalance[to] = _reflectionBalance[to].add(reflectionTransfer);\\n        _takeLiquidityFromTransaction(tokenLiquidityFee);\\n        _reflectFee(\\n            reflectionFee,\\n            tokenTransferFee,\\n            tokenCharityFee,\\n            tokenBurnFee\\n        );\\n        emit Transfer(from, to, tokenTransfer);\\n    }\\n\\n    function _transferBothExcludedAccount(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        (\\n            uint256 tokenTransfer,\\n            uint256 tokenTransferFee,\\n            uint256 tokenLiquidityFee,\\n            uint256 tokenCharityFee,\\n            uint256 tokenBurnFee,\\n            uint256 reflections,\\n            uint256 reflectionTransfer,\\n            uint256 reflectionFee\\n        ) = _calculateTransactionAndReflectionsAfterFees(amount);\\n        require(_balance[from] >= amount, \\\"Insufficient token balance\\\");\\n        _balance[from] = _balance[from].sub(amount);\\n        _reflectionBalance[from] = _reflectionBalance[from].sub(reflections);\\n        _balance[to] = _balance[to].add(tokenTransfer);\\n        _reflectionBalance[to] = _reflectionBalance[to].add(reflectionTransfer);\\n        _takeLiquidityFromTransaction(tokenLiquidityFee);\\n        _reflectFee(\\n            reflectionFee,\\n            tokenTransferFee,\\n            tokenCharityFee,\\n            tokenBurnFee\\n        );\\n        emit Transfer(from, to, tokenTransfer);\\n    }\\n\\n    function _trasnferStandard(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        (\\n            uint256 tokenTransfer,\\n            uint256 tokenTransferFee,\\n            uint256 tokenLiquidityFee,\\n            uint256 tokenCharityFee,\\n            uint256 tokenBurnFee,\\n            uint256 reflections,\\n            uint256 reflectionTransfer,\\n            uint256 reflectionFee\\n        ) = _calculateTransactionAndReflectionsAfterFees(amount);\\n        _reflectionBalance[from] = _reflectionBalance[from].sub(reflections);\\n        _reflectionBalance[to] = _reflectionBalance[to].add(reflectionTransfer);\\n        _takeLiquidityFromTransaction(tokenLiquidityFee);\\n        _reflectFee(\\n            reflectionFee,\\n            tokenTransferFee,\\n            tokenCharityFee,\\n            tokenBurnFee\\n        );\\n        emit Transfer(from, to, tokenTransfer);\\n    }\\n\\n    // Utils\\n\\n    function removeAllFee() private {\\n        if (_taxFee == 0 && _liquidityFee == 0) {\\n            return;\\n        }\\n        _previousTaxFee = _taxFee;\\n        _previousLiquidityFee = _liquidityFee;\\n        _previousCharityFee = _charityFee;\\n        _previousBurnFee = _burnFee;\\n        _taxFee = 0;\\n        _liquidityFee = 0;\\n        _charityFee = 0;\\n        _burnFee = 0;\\n    }\\n\\n    function restoreAllFees() private {\\n        _taxFee = _previousTaxFee;\\n        _liquidityFee = _previousLiquidityFee;\\n        _charityFee = _previousCharityFee;\\n        _burnFee = _previousBurnFee;\\n    }\\n\\n    function _calculateTransactionAndReflectionsAfterFees(\\n        uint256 txnAmountRequested\\n    )\\n        private\\n        view\\n        returns (\\n            uint256 tokenTransfer,\\n            uint256 tokenTransferFee,\\n            uint256 tokenLiquidityFee,\\n            uint256 tokenCharityFee,\\n            uint256 tokenBurnFee,\\n            uint256 reflections,\\n            uint256 reflectionTransfer,\\n            uint256 reflectionFee\\n        )\\n    {\\n        (\\n            tokenTransfer,\\n            tokenTransferFee,\\n            tokenLiquidityFee,\\n            tokenCharityFee,\\n            tokenBurnFee\\n        ) = _calculateTokenTransferAndFees(txnAmountRequested);\\n        (\\n            reflections,\\n            reflectionTransfer,\\n            reflectionFee\\n        ) = _calculateReflectionTransfersAndFees(\\n            txnAmountRequested,\\n            tokenTransferFee,\\n            tokenLiquidityFee,\\n            tokenCharityFee,\\n            tokenBurnFee,\\n            _calculateRateOfSupply()\\n        );\\n    }\\n\\n    function _calculateTokenTransferAndFees(uint256 txnAmountRequested)\\n        private\\n        view\\n        returns (\\n            uint256 tokenTransfer,\\n            uint256 tokenFee,\\n            uint256 tokenLiquidityFee,\\n            uint256 tokenCharityFee,\\n            uint256 tokenBurnFee\\n        )\\n    {\\n        tokenFee = _calculateTokenTaxFee(txnAmountRequested);\\n        tokenLiquidityFee = _calculateTokenLiquidityFee(txnAmountRequested);\\n        tokenCharityFee = _calculateTokenCharityFee(txnAmountRequested);\\n        tokenBurnFee = _calculateTokenBurnFee(txnAmountRequested);\\n        tokenTransfer = txnAmountRequested\\n            .sub(tokenFee)\\n            .sub(tokenLiquidityFee)\\n            .sub(tokenCharityFee)\\n            .sub(tokenBurnFee);\\n    }\\n\\n    function _calculateReflectionTransfersAndFees(\\n        uint256 txnAmountRequested,\\n        uint256 tokenTransferFee,\\n        uint256 tokenLiquidityFee,\\n        uint256 tokenCharityFee,\\n        uint256 tokenBurnFee,\\n        uint256 currentRate\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256 reflections,\\n            uint256 reflectionTransfer,\\n            uint256 reflectionFee\\n        )\\n    {\\n        uint256 reflectionLiquidity = tokenLiquidityFee.mul(currentRate);\\n        uint256 reflectionCharity = tokenCharityFee.mul(currentRate);\\n        uint256 reflectionBurn = tokenBurnFee.mul(currentRate);\\n        reflections = txnAmountRequested.mul(currentRate);\\n        reflectionFee = tokenTransferFee.mul(currentRate);\\n        reflectionTransfer = reflections\\n            .sub(reflectionFee)\\n            .sub(reflectionLiquidity)\\n            .sub(reflectionCharity)\\n            .sub(reflectionBurn);\\n    }\\n\\n    function _calculateTokenTaxFee(uint256 txnAmountRequested)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return txnAmountRequested.mul(_taxFee).div(10**2);\\n    }\\n\\n    function _calculateTokenLiquidityFee(uint256 txnAmountRequested)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return txnAmountRequested.mul(_liquidityFee).div(10**2);\\n    }\\n\\n    function _calculateTokenCharityFee(uint256 txnAmountRequested)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return txnAmountRequested.mul(_charityFee).div(10**2);\\n    }\\n\\n    function _calculateTokenBurnFee(uint256 txnAmountRequested)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return txnAmountRequested.mul(_burnFee).div(10**2);\\n    }\\n\\n    function _calculateRateOfSupply() private view returns (uint256) {\\n        (\\n            uint256 tokenSupply,\\n            uint256 reflectionSupply\\n        ) = _calculateCurrentSupply();\\n        return reflectionSupply.div(tokenSupply);\\n    }\\n\\n    function _calculateCurrentSupply() private view returns (uint256, uint256) {\\n        uint256 tokenSupply = _totalTokenSupply;\\n        uint256 reflectionSupply = _totalReflectionSupply;\\n        for (uint256 index = 0; index < _excludedAccounts.length; index++) {\\n            if (\\n                _reflectionBalance[_excludedAccounts[index]] >\\n                reflectionSupply ||\\n                _balance[_excludedAccounts[index]] > tokenSupply\\n            ) {\\n                return (_totalTokenSupply, _totalReflectionSupply);\\n            }\\n            tokenSupply = tokenSupply.sub(_balance[_excludedAccounts[index]]);\\n            reflectionSupply = reflectionSupply.sub(\\n                _reflectionBalance[_excludedAccounts[index]]\\n            );\\n        }\\n        if (reflectionSupply < _totalReflectionSupply.div(_totalTokenSupply)) {\\n            return (_totalTokenSupply, _totalReflectionSupply);\\n        }\\n        return (tokenSupply, reflectionSupply);\\n    }\\n\\n    function _takeLiquidityFromTransaction(uint256 tokenLiquidityFee) private {\\n        uint256 currentRate = _calculateRateOfSupply();\\n        uint256 reflectionLiquidity = tokenLiquidityFee.mul(currentRate);\\n        _reflectionBalance[address(this)] = _reflectionBalance[address(this)]\\n            .add(reflectionLiquidity);\\n        if (_isExcludedFromReward[address(this)]) {\\n            _balance[address(this)] = _balance[address(this)].add(\\n                tokenLiquidityFee\\n            );\\n        }\\n    }\\n\\n    function _reflectFee(\\n        uint256 reflectionFee,\\n        uint256 tokenTransferFee,\\n        uint256 tokenCharityFee,\\n        uint256 tokenBurnFee\\n    ) private {\\n        _totalReflectionSupply = _totalReflectionSupply.sub(reflectionFee);\\n        _totalFeeCharged = _totalFeeCharged.add(tokenTransferFee);\\n        _totalCharityPaid = _totalCharityPaid.add(tokenCharityFee);\\n        _totalTokensBurned = _totalTokensBurned.add(tokenBurnFee);\\n        sendToCharity(tokenCharityFee);\\n        automaticBurn(tokenBurnFee);\\n    }\\n\\n    function automaticBurn(uint256 amount) private {\\n        if (_burnFee > 0 && amount > 0) {\\n            emit Transfer(_msgSender(), address(0), amount);\\n        }\\n    }\\n\\n    function sendToCharity(uint256 amount) private {\\n        if (_charityFee > 0 && amount > 0) {\\n            uint256 reflectionCharity = amount.mul(_calculateRateOfSupply());\\n            _reflectionBalance[_charityAddress] = _reflectionBalance[\\n                _charityAddress\\n            ].add(reflectionCharity);\\n            emit Transfer(_msgSender(), _charityAddress, amount);\\n        }\\n    }\\n\\n    function calculateTokenBalanceFromReflectionBalance(\\n        uint256 reflectionBalance\\n    ) public view returns (uint256) {\\n        return reflectionBalance.div(_calculateRateOfSupply());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/StandardToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    address private _previousOwner;\\n    uint256 private _lockTime;\\n\\n    bool private initializedtonewowner = false;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    function transferOwnershipFromInitialized(address newOwner)\\n        internal\\n        virtual\\n    {\\n        require(\\n            !initializedtonewowner,\\n            \\\"Contract owner has already been transfered from initialized to the new Owner\\\"\\n        );\\n        initializedtonewowner = true;\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\ncontract StandardToken is IERC20, Ownable {\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    string private _name;\\n    uint256 private _decimals;\\n    string private _symbol;\\n    uint256 private _totalSupply;\\n    bool public _isPool;\\n\\n    mapping (address => uint256) public balance;\\n    address public pair;\\n    mapping (address => mapping(address => uint256)) public allowances;\\n\\n    event DexPairCreated(address thisContract, address pairAddress);\\n    function init(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint256 tokenInitialAmount,\\n        address newOwner,\\n        bool isPool,\\n        address dexAddress\\n    ) public {\\n        _decimals = 18;\\n        _name = tokenName;\\n        _symbol = tokenSymbol;\\n        _totalSupply = tokenInitialAmount.mul(10**_decimals);\\n        _isPool = isPool;\\n        if (isPool) {\\n            _createPair(dexAddress);\\n        }\\n        transferOwnershipFromInitialized(newOwner);\\n        balance[newOwner] = _totalSupply;\\n        // emit Transfer(address(0), newOwner, totalSupply);\\n\\n    }\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function decimals() public view returns (uint256) {\\n        return _decimals;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public override view returns (uint256) {\\n        return balance[account];\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return allowances[owner][spender];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        require(balance[_msgSender()] >= amount, \\\"Insufficient Balance\\\");\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) private {\\n        balance[sender] = balance[sender].sub(amount);\\n        balance[recipient] = balance[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        require(spender != address(0), \\\"Spender cannot be zero address\\\");\\n        require(balance[_msgSender()] >= amount, \\\"Insufficient Balance\\\");\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        allowances[owner][spender] = 0;\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function transferFrom(address owner, address recipient, uint256 amount) public override returns (bool) {\\n        require(balance[owner] >= amount, \\\"Insufficient owner balance\\\");\\n        require(allowances[owner][_msgSender()] >= amount, \\\"Not enough allowance\\\");\\n        balance[owner] = balance[owner].sub(amount);\\n        allowances[owner][_msgSender()] = allowances[owner][_msgSender()].sub(amount);\\n        balance[recipient] = balance[recipient].add(amount);\\n        emit Transfer(owner, recipient, amount);\\n        return true;\\n    }\\n\\n    function _createPair(address dexAddress) private {\\n        IUniswapV2Router02 _router = IUniswapV2Router02(dexAddress);\\n        pair = IUniswapV2Factory(_router.factory()).createPair(\\n            address(this),\\n            _router.WETH()\\n        );\\n        emit DexPairCreated(address(this), pair);\\n    }\\n\\n    function pairAddress() public view returns (address) {\\n        require(_isPool, \\\"Pair not created from factory\\\");\\n        return pair;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thisContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"DexPairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountOfNativeCoinsHeldByContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txnAmountRequested\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"calculateReflectionBalanceFromTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectionBalance\",\"type\":\"uint256\"}],\"name\":\"calculateTokenBalanceFromReflectionBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllFees\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllFeesChargedBurnedAndCharitized\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCharityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhaleProtection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"basicSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTxnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"fees\",\"type\":\"uint256[4]\"},{\"internalType\":\"address\",\"name\":\"charityAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dexAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"charityAddress\",\"type\":\"address\"}],\"name\":\"setCharityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxnAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FotToken","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}