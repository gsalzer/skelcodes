{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MVFStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ninterface IRouter {\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IPair is IERC20Upgradeable {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n}\\n\\ninterface IUniV3Router {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint deadline;\\n        uint amountIn;\\n        uint amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n    function exactInputSingle(\\n        ExactInputSingleParams calldata params\\n    ) external returns (uint amountOut);\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n    function increaseLiquidity(\\n       IncreaseLiquidityParams calldata params\\n    ) external returns (uint128 liquidity, uint256 amount0, uint256 amount1);\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n    function decreaseLiquidity(\\n        DecreaseLiquidityParams calldata params\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function positions(\\n        uint256 tokenId\\n    ) external view returns (uint96, address, address, address, uint24, int24, int24, uint128, uint256, uint256, uint128, uint128);\\n}\\n\\ninterface IDaoL1Vault is IERC20Upgradeable {\\n    function deposit(uint amount) external;\\n    function withdraw(uint share) external returns (uint);\\n    function getAllPoolInUSD() external view returns (uint);\\n    function getAllPoolInETH() external view returns (uint);\\n    function getAllPoolInETHExcludeVestedILV() external view returns (uint);\\n}\\n\\ninterface IDaoL1VaultUniV3 is IERC20Upgradeable {\\n    function deposit(uint amount0, uint amount1) external;\\n    function withdraw(uint share) external returns (uint, uint);\\n    function getAllPoolInUSD() external view returns (uint);\\n    function getAllPoolInETH() external view returns (uint);\\n}\\n\\ninterface IChainlink {\\n    function latestAnswer() external view returns (int256);\\n}\\n\\ncontract MVFStrategy is Initializable, OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeERC20Upgradeable for IPair;\\n\\n    IERC20Upgradeable constant WETH = IERC20Upgradeable(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    IERC20Upgradeable constant AXS = IERC20Upgradeable(0xBB0E17EF65F82Ab018d8EDd776e8DD940327B28b);\\n    IERC20Upgradeable constant SLP = IERC20Upgradeable(0xCC8Fa225D80b9c7D42F96e9570156c65D6cAAa25); // Depreciated\\n    IERC20Upgradeable constant ILV = IERC20Upgradeable(0x767FE9EDC9E0dF98E07454847909b5E959D7ca0E);\\n    IERC20Upgradeable constant GHST = IERC20Upgradeable(0x3F382DbD960E3a9bbCeaE22651E88158d2791550); // Depreciated\\n    IERC20Upgradeable constant MANA = IERC20Upgradeable(0x0F5D2fB29fb7d3CFeE444a200298f468908cC942); // Replaced SLP, GHST\\n    IERC20Upgradeable constant REVV = IERC20Upgradeable(0x557B933a7C2c45672B610F8954A3deB39a51A8Ca); // Depreciated\\n    IERC20Upgradeable constant WILD = IERC20Upgradeable(0x2a3bFF78B79A009976EeA096a51A948a3dC00e34); // Replaced REVV\\n    IERC20Upgradeable constant MVI = IERC20Upgradeable(0x72e364F2ABdC788b7E918bc238B21f109Cd634D7);\\n\\n    IERC20Upgradeable constant AXSETH = IERC20Upgradeable(0x0C365789DbBb94A29F8720dc465554c587e897dB);\\n    IERC20Upgradeable constant SLPETH = IERC20Upgradeable(0x8597fa0773888107E2867D36dd87Fe5bAFeAb328); // Depreciated\\n    IERC20Upgradeable constant ILVETH = IERC20Upgradeable(0x6a091a3406E0073C3CD6340122143009aDac0EDa);\\n    IERC20Upgradeable constant GHSTETH = IERC20Upgradeable(0xFbA31F01058DB09573a383F26a088f23774d4E5d); // Depreciated\\n    IERC20Upgradeable constant MANAETH = IERC20Upgradeable(0x1bEC4db6c3Bc499F3DbF289F5499C30d541FEc97);\\n    IPair constant REVVETH = IPair(0x724d5c9c618A2152e99a45649a3B8cf198321f46); // Depreciated\\n\\n    IRouter constant uniV2Router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    IUniV3Router constant uniV3Router = IUniV3Router(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n    IRouter constant sushiRouter = IRouter(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\\n\\n    IDaoL1Vault public AXSETHVault;\\n    IDaoL1Vault public SLPETHVault; // Depreciated\\n    IDaoL1Vault public ILVETHVault;\\n    IDaoL1VaultUniV3 public GHSTETHVault; // Depreciated\\n\\n    address public vault;\\n    uint public watermark; // In USD (18 decimals)\\n    uint public profitFeePerc;\\n\\n    // New variable after upgraded\\n    IDaoL1Vault public MANAETHVault;\\n\\n    event TargetComposition (uint AXSETHTargetPool, uint ILVETHTargetPool, uint MANAETHTargetPool, uint WILDTargetPool, uint MVITargetPool);\\n    event CurrentComposition (uint AXSETHCurrentPool, uint ILVETHCurrentPool, uint MANAETHCurrentPool, uint WILDCurrentPool, uint MVICurrentPool);\\n    event InvestAXSETH(uint WETHAmt, uint AXSETHAmt);\\n    event InvestILVETH(uint WETHAmt, uint ILVETHAmt);\\n    event InvestMANAETH(uint WETHAmt, uint MANAAmt);\\n    event InvestWILD(uint WETHAmt, uint WILDAmt);\\n    event InvestMVI(uint WETHAmt, uint MVIAmt);\\n    event Withdraw(uint amount, uint WETHAmt);\\n    event WithdrawAXSETH(uint lpTokenAmt, uint WETHAmt);\\n    event WithdrawILVETH(uint lpTokenAmt, uint WETHAmt);\\n    event WithdrawMANAETH(uint lpTokenAmt, uint WETHAmt);\\n    event WithdrawWILD(uint lpTokenAmt, uint WETHAmt);\\n    event WithdrawMVI(uint lpTokenAmt, uint WETHAmt);\\n    event CollectProfitAndUpdateWatermark(uint currentWatermark, uint lastWatermark, uint fee);\\n    event AdjustWatermark(uint currentWatermark, uint lastWatermark);\\n    event Reimburse(uint WETHAmt);\\n    event EmergencyWithdraw(uint WETHAmt);\\n\\n    modifier onlyVault {\\n        require(msg.sender == vault, \\\"Only vault\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _AXSETHVault, address _SLPETHVault, address _ILVETHVault, address _GHSTETHVault\\n    ) external initializer {\\n        __Ownable_init();\\n\\n        AXSETHVault = IDaoL1Vault(_AXSETHVault);\\n        SLPETHVault = IDaoL1Vault(_SLPETHVault);\\n        ILVETHVault = IDaoL1Vault(_ILVETHVault);\\n        GHSTETHVault = IDaoL1VaultUniV3(_GHSTETHVault);\\n\\n        profitFeePerc = 2000;\\n\\n        WETH.safeApprove(address(sushiRouter), type(uint).max);\\n        WETH.safeApprove(address(uniV2Router), type(uint).max);\\n        WETH.safeApprove(address(uniV3Router), type(uint).max);\\n\\n        AXS.safeApprove(address(sushiRouter), type(uint).max);\\n        SLP.safeApprove(address(sushiRouter), type(uint).max);\\n        ILV.safeApprove(address(sushiRouter), type(uint).max);\\n        GHST.safeApprove(address(uniV3Router), type(uint).max);\\n        WILD.safeApprove(address(uniV2Router), type(uint).max);\\n        MVI.safeApprove(address(uniV2Router), type(uint).max);\\n\\n        AXSETH.safeApprove(address(sushiRouter), type(uint).max);\\n        AXSETH.safeApprove(address(AXSETHVault), type(uint).max);\\n        SLPETH.safeApprove(address(sushiRouter), type(uint).max);\\n        SLPETH.safeApprove(address(SLPETHVault), type(uint).max);\\n        ILVETH.safeApprove(address(sushiRouter), type(uint).max);\\n        ILVETH.safeApprove(address(ILVETHVault), type(uint).max);\\n        GHST.safeApprove(address(GHSTETHVault), type(uint).max);\\n        WETH.safeApprove(address(GHSTETHVault), type(uint).max);\\n        WILD.safeApprove(address(uniV2Router), type(uint).max);\\n    }\\n\\n    function invest(uint WETHAmt, uint[] calldata amountsOutMin) external onlyVault {\\n        _invest(WETHAmt, amountsOutMin);\\n    }\\n\\n    function _invest(uint WETHAmt, uint[] calldata amountsOutMin) private {\\n        WETH.safeTransferFrom(vault, address(this), WETHAmt);\\n\\n        uint[] memory pools = getEachPool(false);\\n        uint pool = pools[0] + pools[1] + pools[2] + pools[3] + pools[4] + WETHAmt;\\n        uint AXSETHTargetPool = pool * 2500 / 10000; // 25%\\n        uint ILVETHTargetPool = AXSETHTargetPool; // 25%\\n        uint MANAETHTargetPool = pool * 1500 / 10000; // 15%\\n        uint WILDTargetPool = pool * 500 / 10000; // 5%\\n        uint MVITargetPool = pool * 3000 / 10000; // 30%\\n\\n        // Rebalancing invest\\n        if (\\n            AXSETHTargetPool > pools[0] &&\\n            ILVETHTargetPool > pools[1] &&\\n            MANAETHTargetPool > pools[2] &&\\n            WILDTargetPool > pools[3] &&\\n            MVITargetPool > pools[4]\\n        ) {\\n            investAXSETH(AXSETHTargetPool - pools[0], amountsOutMin[3]);\\n            investILVETH(ILVETHTargetPool - pools[1], amountsOutMin[4]);\\n            investMANAETH(MANAETHTargetPool - pools[2], amountsOutMin[5]);\\n            investWILD(WILDTargetPool - pools[3], amountsOutMin[6]);\\n            investMVI(MVITargetPool - pools[4], amountsOutMin[7]);\\n        } else {\\n            uint furthest;\\n            uint farmIndex;\\n            uint diff;\\n\\n            if (AXSETHTargetPool > pools[0]) {\\n                diff = AXSETHTargetPool - pools[0];\\n                furthest = diff;\\n                farmIndex = 0;\\n            }\\n            if (ILVETHTargetPool > pools[1]) {\\n                diff = ILVETHTargetPool - pools[1];\\n                if (diff > furthest) {\\n                    furthest = diff;\\n                    farmIndex = 1;\\n                }\\n            }\\n            if (MANAETHTargetPool > pools[2]) {\\n                diff = MANAETHTargetPool - pools[2];\\n                if (diff > furthest) {\\n                    furthest = diff;\\n                    farmIndex = 2;\\n                }\\n            }\\n            if (WILDTargetPool > pools[3]) {\\n                diff = WILDTargetPool - pools[3];\\n                if (diff > furthest) {\\n                    furthest = diff;\\n                    farmIndex = 3;\\n                }\\n            }\\n            if (MVITargetPool > pools[4]) {\\n                diff = MVITargetPool - pools[4];\\n                if (diff > furthest) {\\n                    furthest = diff;\\n                    farmIndex = 4;\\n                }\\n            }\\n\\n            if (farmIndex == 0) investAXSETH(WETHAmt, amountsOutMin[3]);\\n            else if (farmIndex == 1) investILVETH(WETHAmt, amountsOutMin[4]);\\n            else if (farmIndex == 2) investMANAETH(WETHAmt, amountsOutMin[5]);\\n            else if (farmIndex == 3) investWILD(WETHAmt, amountsOutMin[6]);\\n            else investMVI(WETHAmt, amountsOutMin[7]);\\n        }\\n\\n        emit TargetComposition(AXSETHTargetPool, ILVETHTargetPool, MANAETHTargetPool, WILDTargetPool, MVITargetPool);\\n        emit CurrentComposition(pools[0], pools[1], pools[2], pools[3], pools[4]);\\n    }\\n\\n    function investAXSETH(uint WETHAmt, uint amountOutMin) private {\\n        uint halfWETH = WETHAmt / 2;\\n        uint AXSAmt = uniV3Swap(address(WETH), address(AXS), 3000, halfWETH, amountOutMin);\\n        (,,uint AXSETHAmt) = sushiRouter.addLiquidity(address(AXS), address(WETH), AXSAmt, halfWETH, 0, 0, address(this), block.timestamp);\\n        AXSETHVault.deposit(AXSETHAmt);\\n        emit InvestAXSETH(WETHAmt, AXSETHAmt);\\n    }\\n\\n    function investILVETH(uint WETHAmt, uint amountOutMin) private {\\n        uint halfWETH = WETHAmt / 2;\\n        uint ILVAmt = sushiSwap(address(WETH), address(ILV), halfWETH, amountOutMin);\\n        (,,uint ILVETHAmt) = sushiRouter.addLiquidity(address(ILV), address(WETH), ILVAmt, halfWETH, 0, 0, address(this), block.timestamp);\\n        ILVETHVault.deposit(ILVETHAmt);\\n        emit InvestILVETH(WETHAmt, ILVETHAmt);\\n    }\\n\\n    function investMANAETH(uint WETHAmt, uint amountOutMin) private {\\n        uint halfWETH = WETHAmt / 2;\\n        uint MANAAmt = sushiSwap(address(WETH), address(MANA), halfWETH, amountOutMin);\\n        (,,uint MANAETHAmt) = sushiRouter.addLiquidity(address(MANA), address(WETH), MANAAmt, halfWETH, 0, 0, address(this), block.timestamp);\\n        MANAETHVault.deposit(MANAETHAmt);\\n        emit InvestMANAETH(WETHAmt, MANAETHAmt);\\n    }\\n\\n    function investWILD(uint WETHAmt, uint amountOutMin) private {\\n        uint WILDAmt = uniV2Swap(address(WETH), address(WILD), WETHAmt, amountOutMin);\\n        emit InvestWILD(WETHAmt, WILDAmt);\\n    }\\n\\n    function investMVI(uint WETHAmt, uint amountOutMin) private {\\n        uint MVIAmt = uniV2Swap(address(WETH), address(MVI), WETHAmt, amountOutMin);\\n        emit InvestMVI(WETHAmt, MVIAmt);\\n    }\\n\\n    /// @param amount Amount to withdraw in USD\\n    function withdraw(uint amount, uint[] calldata amountsOutMin) external onlyVault returns (uint WETHAmt) {\\n        uint sharePerc = amount * 1e18 / getAllPoolInUSD(false);\\n\\n        uint WETHAmtBefore = WETH.balanceOf(address(this));\\n        withdrawAXSETH(sharePerc, amountsOutMin[1]);\\n        withdrawILVETH(sharePerc, amountsOutMin[2]);\\n        withdrawMANAETH(sharePerc, amountsOutMin[3]);\\n        withdrawWILD(sharePerc, amountsOutMin[4]);\\n        withdrawMVI(sharePerc, amountsOutMin[5]);\\n        WETHAmt = WETH.balanceOf(address(this)) - WETHAmtBefore;\\n\\n        WETH.safeTransfer(vault, WETHAmt);\\n\\n        emit Withdraw(amount, WETHAmt);\\n    }\\n\\n    function withdrawAXSETH(uint sharePerc, uint amountOutMin) private {\\n        uint AXSETHAmt = AXSETHVault.withdraw(AXSETHVault.balanceOf(address(this)) * sharePerc / 1e18);\\n        (uint AXSAmt, uint WETHAmt) = sushiRouter.removeLiquidity(address(AXS), address(WETH), AXSETHAmt, 0, 0, address(this), block.timestamp);\\n        uint _WETHAmt = uniV3Swap(address(AXS), address(WETH), 3000, AXSAmt, amountOutMin);\\n        emit WithdrawAXSETH(AXSETHAmt, WETHAmt + _WETHAmt);\\n    }\\n\\n    function withdrawILVETH(uint sharePerc, uint amountOutMin) private {\\n        uint ILVETHAmt = ILVETHVault.withdraw(ILVETHVault.balanceOf(address(this)) * sharePerc / 1e18);\\n        (uint ILVAmt, uint WETHAmt) = sushiRouter.removeLiquidity(address(ILV), address(WETH), ILVETHAmt, 0, 0, address(this), block.timestamp);\\n        uint _WETHAmt = sushiSwap(address(ILV), address(WETH), ILVAmt, amountOutMin);\\n        emit WithdrawILVETH(ILVETHAmt, WETHAmt + _WETHAmt);\\n    }\\n\\n    function withdrawMANAETH(uint sharePerc, uint amountOutMin) private {\\n        uint MANAETHAmt = MANAETHVault.withdraw(MANAETHVault.balanceOf(address(this)) * sharePerc / 1e18);\\n        (uint MANAAmt, uint WETHAmt) = sushiRouter.removeLiquidity(address(MANA), address(WETH), MANAETHAmt, 0, 0, address(this), block.timestamp);\\n        uint _WETHAmt = sushiSwap(address(MANA), address(WETH), MANAAmt, amountOutMin);\\n        emit WithdrawMANAETH(MANAETHAmt, WETHAmt + _WETHAmt);\\n    }\\n\\n    function withdrawWILD(uint sharePerc, uint amountOutMin) private {\\n        uint WILDAmt = WILD.balanceOf(address(this)) * sharePerc / 1e18;\\n        uint WETHAmt = uniV2Swap(address(WILD), address(WETH), WILDAmt, amountOutMin);\\n        emit WithdrawWILD(WILDAmt, WETHAmt);\\n    }\\n\\n    function withdrawMVI(uint sharePerc, uint amountOutMin) private {\\n        uint MVIAmt = MVI.balanceOf(address(this)) * sharePerc / 1e18;\\n        uint WETHAmt = uniV2Swap(address(MVI), address(WETH), MVIAmt, amountOutMin);\\n        emit WithdrawMVI(MVIAmt, WETHAmt);\\n    }\\n\\n    function collectProfitAndUpdateWatermark() external onlyVault returns (uint fee) {\\n        uint currentWatermark = getAllPoolInUSD(false);\\n        uint lastWatermark = watermark;\\n        if (currentWatermark > lastWatermark) {\\n            uint profit = currentWatermark - lastWatermark;\\n            fee = profit * profitFeePerc / 10000;\\n            watermark = currentWatermark;\\n        }\\n        emit CollectProfitAndUpdateWatermark(currentWatermark, lastWatermark, fee);\\n    }\\n\\n    /// @param signs True for positive, false for negative\\n    function adjustWatermark(uint amount, bool signs) external onlyVault {\\n        uint lastWatermark = watermark;\\n        watermark = signs == true ? watermark + amount : watermark - amount;\\n        emit AdjustWatermark(watermark, lastWatermark);\\n    }\\n\\n    /// @param amount Amount to reimburse to vault contract in ETH\\n    function reimburse(uint farmIndex, uint amount, uint amountOutMin) external onlyVault returns (uint WETHAmt) {\\n        if (farmIndex == 0) withdrawAXSETH(amount * 1e18 / getAXSETHPool(), amountOutMin);\\n        else if (farmIndex == 1) withdrawILVETH(amount * 1e18 / getILVETHPool(false), amountOutMin);\\n        else if (farmIndex == 2) withdrawMANAETH(amount * 1e18 / getMANAETHPool(), amountOutMin);\\n        else if (farmIndex == 3) withdrawWILD(amount * 1e18 / getWILDPool(), amountOutMin);\\n        else if (farmIndex == 4) withdrawMVI(amount * 1e18 / getMVIPool(), amountOutMin);\\n\\n        WETHAmt = WETH.balanceOf(address(this));\\n        WETH.safeTransfer(vault, WETHAmt);\\n\\n        emit Reimburse(WETHAmt);\\n    }\\n\\n    function emergencyWithdraw() external onlyVault {\\n        // 1e18 == 100% of share\\n        withdrawAXSETH(1e18, 0);\\n        withdrawILVETH(1e18, 0);\\n        withdrawMANAETH(1e18, 0);\\n        withdrawWILD(1e18, 0);\\n        withdrawMVI(1e18, 0);\\n\\n        uint WETHAmt = WETH.balanceOf(address(this));\\n        WETH.safeTransfer(vault, WETHAmt);\\n        watermark = 0;\\n\\n        emit EmergencyWithdraw(WETHAmt);\\n    }\\n\\n    function sushiSwap(address from, address to, uint amount, uint amountOutMin) private returns (uint) {\\n        return sushiRouter.swapExactTokensForTokens(amount, amountOutMin, getPath(from, to), address(this), block.timestamp)[1];\\n    }\\n\\n    function uniV2Swap(address from, address to, uint amount, uint amountOutMin) private returns (uint) {\\n        return uniV2Router.swapExactTokensForTokens(amount, amountOutMin, getPath(from, to), address(this), block.timestamp)[1];\\n    }\\n\\n    function uniV3Swap(address tokenIn, address tokenOut, uint24 fee, uint amountIn, uint amountOutMin) private returns (uint amountOut) {\\n        IUniV3Router.ExactInputSingleParams memory params =\\n            IUniV3Router.ExactInputSingleParams({\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                fee: fee,\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountIn: amountIn,\\n                amountOutMinimum: amountOutMin,\\n                sqrtPriceLimitX96: 0\\n            });\\n        amountOut = uniV3Router.exactInputSingle(params);\\n    }\\n\\n    // This function only able to call once\\n    function swapTokensAndInvest(IDaoL1Vault _MANAETHVault, uint[] calldata amountsOutMin) external {\\n        // Setup L1 vault for MANA-ETH\\n        MANAETHVault = _MANAETHVault;\\n\\n        // Approval for new tokens\\n        MANA.safeApprove(address(sushiRouter), type(uint).max);\\n        MANAETH.safeApprove(address(_MANAETHVault), type(uint).max);\\n        MANAETH.safeApprove(address(sushiRouter), type(uint).max);\\n        WILD.safeApprove(address(uniV2Router), type(uint).max);\\n        AXS.safeApprove(address(uniV3Router), type(uint).max); // Change router from Sushi to Uniswap V3\\n\\n        // Swap out all REVV\\n        uint REVVETHAmt = REVVETH.balanceOf(address(this));\\n        (uint REVVAmt,) = uniV2Router.removeLiquidity(address(REVV), address(WETH), REVVETHAmt, 0, 0, address(this), block.timestamp);\\n        uniV2Swap(address(REVV), address(WETH), REVVAmt, amountsOutMin[0]);\\n\\n        // Remove liquidity from SLP-ETH pool and swap out all SLP\\n        uint SLPETHAmt = SLPETHVault.withdraw(SLPETHVault.balanceOf(address(this)));\\n        sushiRouter.removeLiquidity(address(SLP), address(WETH), SLPETHAmt, 0, 0, address(this), block.timestamp);\\n        uint SLPAmt = SLP.balanceOf(address(this));\\n        SLP.safeApprove(address(uniV3Router), SLPAmt);\\n        uniV3Swap(address(SLP), address(WETH), 3000, SLPAmt, amountsOutMin[1]);\\n\\n        // Remove liquidity from GHST-ETH pool and swap out all GHST\\n        (uint GHSTAmt,) = GHSTETHVault.withdraw(GHSTETHVault.balanceOf(address(this)));\\n        uniV3Swap(address(GHST), address(WETH), 10000, GHSTAmt, amountsOutMin[2]);\\n\\n        // Transfer WETH to vault to call invest, because invest function need WETH from vault\\n        uint WETHAmt = WETH.balanceOf(address(this));\\n        WETH.safeTransfer(address(vault), WETHAmt);\\n\\n        _invest(WETHAmt, amountsOutMin);\\n    }\\n\\n    function setVault(address _vault) external onlyOwner {\\n        require(vault == address(0), \\\"Vault set\\\");\\n        vault = _vault;\\n    }\\n\\n    function setProfitFeePerc(uint _profitFeePerc) external onlyVault {\\n        profitFeePerc = _profitFeePerc;\\n    }\\n\\n    function getPath(address tokenA, address tokenB) private pure returns (address[] memory path) {\\n        path = new address[](2);\\n        path[0] = tokenA;\\n        path[1] = tokenB;\\n    }\\n\\n    function getAXSETHPool() private view returns (uint) {\\n        uint AXSETHVaultPool = AXSETHVault.getAllPoolInETH();\\n        if (AXSETHVaultPool == 0) return 0;\\n        return AXSETHVaultPool * AXSETHVault.balanceOf(address(this)) / AXSETHVault.totalSupply();\\n    }\\n\\n    function getILVETHPool(bool includeVestedILV) private view returns (uint) {\\n        uint _totalSupply = ILVETHVault.totalSupply();\\n        if (_totalSupply == 0) return 0;\\n        uint ILVETHVaultPool =  includeVestedILV ? \\n            ILVETHVault.getAllPoolInETH(): \\n            ILVETHVault.getAllPoolInETHExcludeVestedILV();\\n        return ILVETHVaultPool * ILVETHVault.balanceOf(address(this)) / _totalSupply;\\n    }\\n\\n    function getMANAETHPool() private view returns (uint) {\\n        uint MANAETHVaultPool = MANAETHVault.getAllPoolInETH();\\n        if (MANAETHVaultPool == 0) return 0;\\n        return MANAETHVaultPool * MANAETHVault.balanceOf(address(this)) / MANAETHVault.totalSupply();\\n    }\\n\\n    function getWILDPool() private view returns (uint) {\\n        uint WILDAmt = WILD.balanceOf(address(this));\\n        if (WILDAmt == 0) return 0;\\n        uint WILDPrice = uniV2Router.getAmountsOut(1e18, getPath(address(WILD), address(WETH)))[1];\\n        return WILDAmt * WILDPrice / 1e18;\\n    }\\n\\n    function getMVIPool() private view returns (uint) {\\n        uint MVIAmt = MVI.balanceOf(address(this));\\n        if (MVIAmt == 0) return 0;\\n        uint MVIPrice = uniV2Router.getAmountsOut(1e18, getPath(address(MVI), address(WETH)))[1];\\n        return MVIAmt * MVIPrice / 1e18;\\n    }\\n\\n    function getEachPool(bool includeVestedILV) private view returns (uint[] memory pools) {\\n        pools = new uint[](6);\\n        pools[0] = getAXSETHPool();\\n        pools[1] = getILVETHPool(includeVestedILV);\\n        pools[2] = getMANAETHPool();\\n        pools[3] = getWILDPool();\\n        pools[4] = getMVIPool();\\n    }\\n\\n    /// @notice This function return only farms TVL in ETH\\n    function getAllPoolInETH(bool includeVestedILV) public view returns (uint) {\\n        uint[] memory pools = getEachPool(includeVestedILV);\\n        return pools[0] + pools[1] + pools[2] + pools[3] + pools[4];\\n    }\\n\\n    function getAllPoolInUSD(bool includeVestedILV) public view returns (uint) {\\n        uint ETHPriceInUSD = uint(IChainlink(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419).latestAnswer()); // 8 decimals\\n        require(ETHPriceInUSD > 0, \\\"ChainLink error\\\");\\n        return getAllPoolInETH(includeVestedILV) * ETHPriceInUSD / 1e8;\\n    }\\n\\n    function getCurrentCompositionPerc() external view returns (uint[] memory percentages) {\\n        uint[] memory pools = getEachPool(false);\\n        uint allPool = pools[0] + pools[1] + pools[2] + pools[3] + pools[4];\\n        percentages = new uint[](5);\\n        percentages[0] = pools[0] * 10000 / allPool;\\n        percentages[1] = pools[1] * 10000 / allPool;\\n        percentages[2] = pools[2] * 10000 / allPool;\\n        percentages[3] = pools[3] * 10000 / allPool;\\n        percentages[4] = pools[4] * 10000 / allPool;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentWatermark\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastWatermark\",\"type\":\"uint256\"}],\"name\":\"AdjustWatermark\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentWatermark\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastWatermark\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"CollectProfitAndUpdateWatermark\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"AXSETHCurrentPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ILVETHCurrentPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MANAETHCurrentPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WILDCurrentPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MVICurrentPool\",\"type\":\"uint256\"}],\"name\":\"CurrentComposition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"AXSETHAmt\",\"type\":\"uint256\"}],\"name\":\"InvestAXSETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ILVETHAmt\",\"type\":\"uint256\"}],\"name\":\"InvestILVETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MANAAmt\",\"type\":\"uint256\"}],\"name\":\"InvestMANAETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MVIAmt\",\"type\":\"uint256\"}],\"name\":\"InvestMVI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WILDAmt\",\"type\":\"uint256\"}],\"name\":\"InvestWILD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"}],\"name\":\"Reimburse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"AXSETHTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ILVETHTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MANAETHTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WILDTargetPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MVITargetPool\",\"type\":\"uint256\"}],\"name\":\"TargetComposition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawAXSETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawILVETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawMANAETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawMVI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawWILD\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AXSETHVault\",\"outputs\":[{\"internalType\":\"contract IDaoL1Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GHSTETHVault\",\"outputs\":[{\"internalType\":\"contract IDaoL1VaultUniV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ILVETHVault\",\"outputs\":[{\"internalType\":\"contract IDaoL1Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAETHVault\",\"outputs\":[{\"internalType\":\"contract IDaoL1Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLPETHVault\",\"outputs\":[{\"internalType\":\"contract IDaoL1Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"signs\",\"type\":\"bool\"}],\"name\":\"adjustWatermark\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectProfitAndUpdateWatermark\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"includeVestedILV\",\"type\":\"bool\"}],\"name\":\"getAllPoolInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"includeVestedILV\",\"type\":\"bool\"}],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentCompositionPerc\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_AXSETHVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SLPETHVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ILVETHVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_GHSTETHVault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOutMin\",\"type\":\"uint256[]\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFeePerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"farmIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"reimburse\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitFeePerc\",\"type\":\"uint256\"}],\"name\":\"setProfitFeePerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDaoL1Vault\",\"name\":\"_MANAETHVault\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOutMin\",\"type\":\"uint256[]\"}],\"name\":\"swapTokensAndInvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"watermark\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOutMin\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"WETHAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MVFStrategy","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}