{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/reward/XAGFTokenV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../access/AccessFlags.sol';\\nimport '../access/interfaces/IMarketAccessController.sol';\\n\\nimport './locker/DecayingTokenLocker.sol';\\nimport '../tools/upgradeability/VersionedInitializable.sol';\\nimport './interfaces/IInitializableRewardToken.sol';\\nimport './interfaces/IInitializableRewardPool.sol';\\nimport '../access/interfaces/IRemoteAccessBitmask.sol';\\nimport './interfaces/IRewardController.sol';\\nimport '../tools/math/WadRayMath.sol';\\nimport '../tools/tokens/ERC20DetailsBase.sol';\\n\\ncontract XAGFTokenV1 is\\n  DecayingTokenLocker,\\n  VersionedInitializable,\\n  ERC20DetailsBase,\\n  IInitializableRewardToken,\\n  IInitializableRewardPool\\n{\\n  string private constant NAME = 'Augmented Finance Locked Reward Token';\\n  string private constant SYMBOL = 'xAGF';\\n  uint8 private constant DECIMALS = 18;\\n\\n  uint256 private constant TOKEN_REVISION = 1;\\n\\n  constructor()\\n    ERC20DetailsBase(NAME, SYMBOL, DECIMALS)\\n    DecayingTokenLocker(IRewardController(address(this)), 0, 0, address(0))\\n  {}\\n\\n  function getRevision() internal pure virtual override returns (uint256) {\\n    return TOKEN_REVISION;\\n  }\\n\\n  function getPoolName() public view override returns (string memory) {\\n    return super.symbol();\\n  }\\n\\n  function _initializePool(address controller) private {\\n    super._initialize(IRewardController(controller), 0, 0, '');\\n  }\\n\\n  // This initializer is invoked by AccessController.setAddressAsImpl\\n  function initialize(IMarketAccessController ac) external virtual initializer(TOKEN_REVISION) {\\n    address controller = ac.getAddress(AccessFlags.REWARD_CONTROLLER);\\n    address underlying = ac.getAddress(AccessFlags.REWARD_TOKEN);\\n\\n    super._initializeERC20(NAME, SYMBOL, DECIMALS);\\n    super._initialize(underlying);\\n    _initializePool(controller);\\n  }\\n\\n  function initializeRewardToken(InitRewardTokenData calldata data) external override initializer(TOKEN_REVISION) {\\n    IMarketAccessController ac = IMarketAccessController(address(data.remoteAcl));\\n    address controller = ac.getAddress(AccessFlags.REWARD_CONTROLLER);\\n    address underlying = ac.getAddress(AccessFlags.REWARD_TOKEN);\\n\\n    super._initializeERC20(data.name, data.symbol, data.decimals);\\n    super._initialize(underlying);\\n    _initializePool(controller);\\n  }\\n\\n  function initializeToken(\\n    IMarketAccessController remoteAcl,\\n    address underlying,\\n    string calldata name_,\\n    string calldata symbol_,\\n    uint8 decimals_\\n  ) public virtual initializer(TOKEN_REVISION) {\\n    address controller = remoteAcl.getAddress(AccessFlags.REWARD_CONTROLLER);\\n\\n    super._initializeERC20(name_, symbol_, decimals_);\\n    super._initialize(underlying);\\n    _initializePool(controller);\\n  }\\n\\n  function initializeRewardPool(InitRewardPoolData calldata data) external override initializer(TOKEN_REVISION) {\\n    IMarketAccessController ac = data.controller.getAccessController();\\n    address underlying = ac.getAddress(AccessFlags.REWARD_TOKEN);\\n    super._initializeERC20(NAME, SYMBOL, DECIMALS);\\n    super._initialize(underlying);\\n    super._initialize(data.controller, 0, data.baselinePercentage, data.poolName);\\n  }\\n\\n  function initializedRewardPoolWith() external view override returns (InitRewardPoolData memory) {\\n    return\\n      InitRewardPoolData(\\n        IRewardController(super.getRewardController()),\\n        super.getPoolName(),\\n        super.getBaselinePercentage()\\n      );\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessFlags.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nlibrary AccessFlags {\\n  // roles that can be assigned to multiple addresses - use range [0..15]\\n  uint256 public constant EMERGENCY_ADMIN = 1 << 0;\\n  uint256 public constant POOL_ADMIN = 1 << 1;\\n  uint256 public constant TREASURY_ADMIN = 1 << 2;\\n  uint256 public constant REWARD_CONFIG_ADMIN = 1 << 3;\\n  uint256 public constant REWARD_RATE_ADMIN = 1 << 4;\\n  uint256 public constant STAKE_ADMIN = 1 << 5;\\n  uint256 public constant REFERRAL_ADMIN = 1 << 6;\\n  uint256 public constant LENDING_RATE_ADMIN = 1 << 7;\\n  uint256 public constant SWEEP_ADMIN = 1 << 8;\\n  uint256 public constant ORACLE_ADMIN = 1 << 9;\\n\\n  uint256 public constant ROLES = (uint256(1) << 16) - 1;\\n\\n  // singletons - use range [16..64] - can ONLY be assigned to a single address\\n  uint256 public constant SINGLETONS = ((uint256(1) << 64) - 1) & ~ROLES;\\n\\n  // proxied singletons\\n  uint256 public constant LENDING_POOL = 1 << 16;\\n  uint256 public constant LENDING_POOL_CONFIGURATOR = 1 << 17;\\n  uint256 public constant LIQUIDITY_CONTROLLER = 1 << 18;\\n  uint256 public constant TREASURY = 1 << 19;\\n  uint256 public constant REWARD_TOKEN = 1 << 20;\\n  uint256 public constant REWARD_STAKE_TOKEN = 1 << 21;\\n  uint256 public constant REWARD_CONTROLLER = 1 << 22;\\n  uint256 public constant REWARD_CONFIGURATOR = 1 << 23;\\n  uint256 public constant STAKE_CONFIGURATOR = 1 << 24;\\n  uint256 public constant REFERRAL_REGISTRY = 1 << 25;\\n\\n  uint256 public constant PROXIES = ((uint256(1) << 26) - 1) & ~ROLES;\\n\\n  // non-proxied singletons, numbered down from 31 (as JS has problems with bitmasks over 31 bits)\\n  uint256 public constant WETH_GATEWAY = 1 << 27;\\n  uint256 public constant DATA_HELPER = 1 << 28;\\n  uint256 public constant PRICE_ORACLE = 1 << 29;\\n  uint256 public constant LENDING_RATE_ORACLE = 1 << 30;\\n\\n  // any other roles - use range [64..]\\n  // these roles can be assigned to multiple addresses\\n\\n  uint256 public constant TRUSTED_FLASHLOAN = 1 << 66;\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IMarketAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IAccessController.sol';\\n\\n/// @dev Main registry of addresses part of or connected to the protocol, including permissioned roles. Also acts a proxy factory.\\ninterface IMarketAccessController is IAccessController {\\n  function getMarketId() external view returns (string memory);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function getLendingRateOracle() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/reward/locker/DecayingTokenLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../tools/math/WadRayMath.sol';\\nimport '../interfaces/IRewardController.sol';\\nimport './RewardedTokenLocker.sol';\\n\\ncontract DecayingTokenLocker is RewardedTokenLocker {\\n  using WadRayMath for uint256;\\n\\n  constructor(\\n    IRewardController controller,\\n    uint256 initialRate,\\n    uint16 baselinePercentage,\\n    address underlying\\n  ) RewardedTokenLocker(controller, initialRate, baselinePercentage, underlying) {}\\n\\n  function balanceOf(address account) public view virtual override returns (uint256) {\\n    (uint32 startTS, uint32 endTS) = expiryOf(account);\\n    uint32 current = getCurrentTick();\\n    if (current >= endTS) {\\n      return 0;\\n    }\\n\\n    uint256 stakeAmount = getStakeBalance(account);\\n    uint256 stakeDecayed = (stakeAmount * (endTS - current)) / (endTS - startTS);\\n\\n    if (stakeDecayed >= stakeAmount) {\\n      return stakeAmount;\\n    }\\n    return stakeDecayed;\\n  }\\n\\n  function internalCalcReward(address holder, uint32 current)\\n    internal\\n    view\\n    override\\n    returns (uint256 amount, uint32 since)\\n  {\\n    (uint32 startTS, uint32 endTS) = expiryOf(holder);\\n    if (endTS == 0) {\\n      return (0, 0);\\n    }\\n\\n    uint256 stakeAmount;\\n    if (current >= endTS) {\\n      // this is to emulate claimReward using calcCompensatedDecay when a balance has expired\\n      stakeAmount = getStakeBalance(holder);\\n      current = endTS;\\n    }\\n\\n    (amount, since) = super.doCalcRewardAt(holder, current);\\n    if (amount == 0) {\\n      return (0, 0);\\n    }\\n\\n    uint256 decayAmount = amount.rayMul(calcDecayForReward(startTS, endTS, since, current));\\n\\n    amount =\\n      amount -\\n      calcCompensatedDecay(\\n        holder,\\n        decayAmount,\\n        stakeAmount,\\n        totalSupply(),\\n        calcDecayTimeCompensation(startTS, endTS, since, current)\\n      );\\n\\n    if (amount == 0) {\\n      return (0, 0);\\n    }\\n\\n    return (amount, since);\\n  }\\n\\n  function internalGetReward(address holder)\\n    internal\\n    override\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull\\n    )\\n  {\\n    return _getRewardWithLimit(holder, type(uint256).max);\\n  }\\n\\n  function internalGetRewardWithLimit(\\n    address holder,\\n    uint256 baseAmount,\\n    uint256 limit,\\n    uint16 minBoostPct\\n  )\\n    internal\\n    override\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull,\\n      uint256 // newLimit,\\n    )\\n  {\\n    if (minBoostPct == 0) {\\n      (amount, since, keepPull) = _getRewardWithLimit(holder, limit > baseAmount ? limit - baseAmount : 0);\\n      amount += baseAmount;\\n    } else {\\n      (amount, since, keepPull) = _getRewardWithLimit(holder, type(uint256).max);\\n      amount += baseAmount;\\n      limit += PercentageMath.percentMul(amount, minBoostPct);\\n    }\\n\\n    if (amount > limit) {\\n      internalAddExcess(amount - limit, since);\\n      amount = limit;\\n    }\\n\\n    return (amount, since, keepPull, limit);\\n  }\\n\\n  function _getRewardWithLimit(address holder, uint256 limit)\\n    private\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull\\n    )\\n  {\\n    internalUpdate(true, 0);\\n\\n    (uint32 startTS, uint32 endTS) = expiryOf(holder);\\n    if (endTS == 0) {\\n      return (0, 0, false);\\n    }\\n\\n    uint256 stakeAmount; // cached value as it may not be available after removal\\n\\n    uint256 maxAmount;\\n    uint32 current = getCurrentTick();\\n    if (current >= endTS) {\\n      current = endTS;\\n      (maxAmount, since, ) = super.doGetRewardAt(holder, current);\\n      stakeAmount = super.doRemoveRewardBalance(holder);\\n      keepPull = false;\\n    } else {\\n      (maxAmount, since, keepPull) = super.doGetRewardAt(holder, current);\\n    }\\n\\n    if (maxAmount == 0) {\\n      return (0, 0, keepPull);\\n    }\\n\\n    uint256 decayAmount = maxAmount.rayMul(calcDecayForReward(startTS, endTS, since, current));\\n\\n    if (limit <= maxAmount && limit + decayAmount <= maxAmount) {\\n      amount = limit;\\n    } else {\\n      amount =\\n        maxAmount -\\n        calcCompensatedDecay(\\n          holder,\\n          decayAmount,\\n          stakeAmount,\\n          internalCurrentTotalSupply(),\\n          calcDecayTimeCompensation(startTS, endTS, since, current)\\n        );\\n\\n      if (amount > limit) {\\n        amount = limit;\\n      }\\n    }\\n\\n    if (maxAmount > amount) {\\n      internalAddExcess(maxAmount - amount, since);\\n    }\\n\\n    if (amount == 0) {\\n      return (0, 0, keepPull);\\n    }\\n\\n    return (amount, since, keepPull);\\n  }\\n\\n  function setStakeBalance(address holder, uint224 stakeAmount) internal override {\\n    // NB! Actually, total and balance for decay compensation should be taken before the update.\\n    // Not doing it will give more to a user who increases balance - so it is even better in this case.\\n\\n    (uint256 amount, uint32 since, AllocationMode mode) = doUpdateRewardBalance(holder, stakeAmount);\\n    amount = rewardForBalance(holder, stakeAmount, amount, since, uint32(block.timestamp));\\n    internalAllocateReward(holder, amount, since, mode);\\n  }\\n\\n  function unsetStakeBalance(address holder, uint32 at) internal override {\\n    (uint256 amount, uint32 since, ) = doGetRewardAt(holder, at);\\n    uint256 stakeAmount = doRemoveRewardBalance(holder);\\n    if (amount == 0) {\\n      return;\\n    }\\n    amount = rewardForBalance(holder, stakeAmount, amount, since, at);\\n    internalAllocateReward(holder, amount, since, AllocationMode.Push);\\n  }\\n\\n  function rewardForBalance(\\n    address holder,\\n    uint256 stakeAmount,\\n    uint256 amount,\\n    uint32 since,\\n    uint32 at\\n  ) private returns (uint256) {\\n    if (amount == 0) {\\n      return 0;\\n    }\\n    (uint32 startTS, uint32 endTS) = expiryOf(holder);\\n\\n    uint256 maxAmount = amount;\\n    uint256 decayAmount = maxAmount.rayMul(calcDecayForReward(startTS, endTS, since, at));\\n\\n    amount =\\n      maxAmount -\\n      calcCompensatedDecay(\\n        holder,\\n        decayAmount,\\n        stakeAmount,\\n        internalCurrentTotalSupply(),\\n        calcDecayTimeCompensation(startTS, endTS, since, at)\\n      );\\n\\n    if (maxAmount > amount) {\\n      internalAddExcess(maxAmount - amount, since);\\n    }\\n\\n    return amount;\\n  }\\n\\n  /// @notice Calculates a range integral of the linear decay\\n  /// @param startTS start of the decay interval (beginning of a lock)\\n  /// @param endTS start of the decay interval (ending of a lock)\\n  /// @param since start of an integration range\\n  /// @param current end of an integration range\\n  /// @return Decayed portion [RAY..0] of reward, result = 0 means no decay\\n  function calcDecayForReward(\\n    uint32 startTS,\\n    uint32 endTS,\\n    uint32 since,\\n    uint32 current\\n  ) public pure returns (uint256) {\\n    require(startTS > 0);\\n    require(startTS < endTS);\\n    require(startTS <= since);\\n    require(current <= endTS);\\n    require(since <= current);\\n    return ((uint256(since - startTS) + (current - startTS)) * WadRayMath.halfRAY) / (endTS - startTS);\\n  }\\n\\n  /// @dev Calculates an approximate decay compensation to equalize outcomes from multiple intermediate claims vs\\n  /// one final claim due to excess redistribution.\\n  /// @dev There is no checks as it is invoked only after calcDecayForReward\\n  /// @param startTS start of the decay interval (beginning of a lock)\\n  /// @param endTS start of the decay interval (ending of a lock)\\n  /// @param since timestamp of a previous claim or start of the decay interval\\n  /// @param current timestamp of a new claim\\n  /// @return Compensation portion [RAY..0] of reward, result = 0 means no compensation\\n  function calcDecayTimeCompensation(\\n    uint32 startTS,\\n    uint32 endTS,\\n    uint32 since,\\n    uint32 current\\n  ) public pure returns (uint256) {\\n    // parabolic approximation\\n    return ((uint256(current - since)**2) * WadRayMath.RAY) / (uint256(endTS - startTS)**2);\\n  }\\n\\n  function calcCompensatedDecay(\\n    address holder,\\n    uint256 decayAmount,\\n    uint256 stakeAmount,\\n    uint256 stakedTotal,\\n    uint256 compensationRatio\\n  ) public view returns (uint256) {\\n    if (decayAmount == 0 || compensationRatio == 0) {\\n      return decayAmount;\\n    }\\n\\n    if (stakeAmount == 0) {\\n      // is included into the total\\n      stakeAmount = getStakeBalance(holder);\\n    } else {\\n      // is excluded from the total\\n      stakedTotal += stakeAmount;\\n    }\\n\\n    if (stakedTotal > stakeAmount) {\\n      compensationRatio = (compensationRatio * stakeAmount) / stakedTotal;\\n    }\\n\\n    if (compensationRatio >= WadRayMath.RAY) {\\n      return 0;\\n    }\\n\\n    return decayAmount.rayMul(WadRayMath.RAY - compensationRatio);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/upgradeability/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to implement versioned initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` or `initializerRunAlways` modifier.\\n * The revision number should be defined as a private constant, returned by getRevision() and used by initializer() modifier.\\n *\\n * ATTN: There is a built-in protection from implementation self-destruct exploits. This protection\\n * prevents initializers from being called on an implementation inself, but only on proxied contracts.\\n * To override this protection, call _unsafeResetVersionedInitializers() from a constructor.\\n *\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an initializable contract, as well\\n * as extending an initializable contract via inheritance.\\n *\\n * ATTN: When used with inheritance, parent initializers with `initializer` modifier are prevented by calling twice,\\n * but can only be called in child-to-parent sequence.\\n *\\n * WARNING: When used with inheritance, parent initializers with `initializerRunAlways` modifier\\n * are NOT protected from multiple calls by another initializer.\\n */\\nabstract contract VersionedInitializable {\\n  uint256 private constant BLOCK_REVISION = type(uint256).max;\\n  // This revision number is applied to implementations\\n  uint256 private constant IMPL_REVISION = BLOCK_REVISION - 1;\\n\\n  /// @dev Indicates that the contract has been initialized. The default value blocks initializers from being called on an implementation.\\n  uint256 private lastInitializedRevision = IMPL_REVISION;\\n\\n  /// @dev Indicates that the contract is in the process of being initialized.\\n  uint256 private lastInitializingRevision = 0;\\n\\n  /**\\n   * @dev There is a built-in protection from self-destruct of implementation exploits. This protection\\n   * prevents initializers from being called on an implementation inself, but only on proxied contracts.\\n   * Function _unsafeResetVersionedInitializers() can be called from a constructor to disable this protection.\\n   * It must be called before any initializers, otherwise it will fail.\\n   */\\n  function _unsafeResetVersionedInitializers() internal {\\n    require(isConstructor(), 'only for constructor');\\n\\n    if (lastInitializedRevision == IMPL_REVISION) {\\n      lastInitializedRevision = 0;\\n    } else {\\n      require(lastInitializedRevision == 0, 'can only be called before initializer(s)');\\n    }\\n  }\\n\\n  /// @dev Modifier to use in the initializer function of a contract.\\n  modifier initializer(uint256 localRevision) {\\n    (uint256 topRevision, bool initializing, bool skip) = _preInitializer(localRevision);\\n\\n    if (!skip) {\\n      lastInitializingRevision = localRevision;\\n      _;\\n      lastInitializedRevision = localRevision;\\n    }\\n\\n    if (!initializing) {\\n      lastInitializedRevision = topRevision;\\n      lastInitializingRevision = 0;\\n    }\\n  }\\n\\n  modifier initializerRunAlways(uint256 localRevision) {\\n    (uint256 topRevision, bool initializing, bool skip) = _preInitializer(localRevision);\\n\\n    if (!skip) {\\n      lastInitializingRevision = localRevision;\\n    }\\n    _;\\n    if (!skip) {\\n      lastInitializedRevision = localRevision;\\n    }\\n\\n    if (!initializing) {\\n      lastInitializedRevision = topRevision;\\n      lastInitializingRevision = 0;\\n    }\\n  }\\n\\n  function _preInitializer(uint256 localRevision)\\n    private\\n    returns (\\n      uint256 topRevision,\\n      bool initializing,\\n      bool skip\\n    )\\n  {\\n    topRevision = getRevision();\\n    require(topRevision < IMPL_REVISION, 'invalid contract revision');\\n\\n    require(localRevision > 0, 'incorrect initializer revision');\\n    require(localRevision <= topRevision, 'inconsistent contract revision');\\n\\n    if (lastInitializedRevision < IMPL_REVISION) {\\n      // normal initialization\\n      initializing = lastInitializingRevision > 0 && lastInitializedRevision < topRevision;\\n      require(initializing || isConstructor() || topRevision > lastInitializedRevision, 'already initialized');\\n    } else {\\n      // by default, initialization of implementation is only allowed inside a constructor\\n      require(lastInitializedRevision == IMPL_REVISION && isConstructor(), 'initializer blocked');\\n\\n      // enable normal use of initializers inside a constructor\\n      lastInitializedRevision = 0;\\n      // but make sure to block initializers afterwards\\n      topRevision = BLOCK_REVISION;\\n\\n      initializing = lastInitializingRevision > 0;\\n    }\\n\\n    if (initializing) {\\n      require(lastInitializingRevision > localRevision, 'incorrect order of initializers');\\n    }\\n\\n    if (localRevision <= lastInitializedRevision) {\\n      // prevent calling of parent's initializer when it was called before\\n      if (initializing) {\\n        // Can't set zero yet, as it is not a top-level call, otherwise `initializing` will become false.\\n        // Further calls will fail with the `incorrect order` assertion above.\\n        lastInitializingRevision = 1;\\n      }\\n      return (topRevision, initializing, true);\\n    }\\n    return (topRevision, initializing, false);\\n  }\\n\\n  function isRevisionInitialized(uint256 localRevision) internal view returns (bool) {\\n    return lastInitializedRevision >= localRevision;\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function REVISION() public pure returns (uint256) {\\n    return getRevision();\\n  }\\n\\n  /**\\n   * @dev returns the revision number (< type(uint256).max - 1) of the contract.\\n   * The number should be defined as a private constant.\\n   **/\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    uint256 cs;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      cs := extcodesize(address())\\n    }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[4] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IInitializableRewardToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../access/interfaces/IMarketAccessController.sol';\\n\\ninterface IInitializableRewardToken {\\n  struct InitRewardTokenData {\\n    IMarketAccessController remoteAcl;\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n  }\\n\\n  function initializeRewardToken(InitRewardTokenData memory) external;\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IInitializableRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IRewardController.sol';\\n\\ninterface IInitializableRewardPool {\\n  struct InitRewardPoolData {\\n    IRewardController controller;\\n    string poolName;\\n    uint16 baselinePercentage;\\n  }\\n\\n  function initializeRewardPool(InitRewardPoolData calldata) external;\\n\\n  function initializedRewardPoolWith() external view returns (InitRewardPoolData memory);\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IRemoteAccessBitmask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IRemoteAccessBitmask {\\n  /**\\n   * @dev Returns access flags granted to the given address and limited by the filterMask. filterMask == 0 has a special meaning.\\n   * @param addr an to get access perfmissions for\\n   * @param filterMask limits a subset of flags to be checked.\\n   * NB! When filterMask == 0 then zero is returned no flags granted, or an unspecified non-zero value otherwise.\\n   * @return Access flags currently granted\\n   */\\n  function queryAccessControlMask(address addr, uint256 filterMask) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IRewardController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../access/interfaces/IMarketAccessController.sol';\\n\\nenum AllocationMode {\\n  Push,\\n  SetPull,\\n  SetPullSpecial\\n}\\n\\ninterface IRewardController {\\n  function allocatedByPool(\\n    address holder,\\n    uint256 allocated,\\n    uint32 since,\\n    AllocationMode mode\\n  ) external;\\n\\n  function isRateAdmin(address) external view returns (bool);\\n\\n  function isConfigAdmin(address) external view returns (bool);\\n\\n  function getAccessController() external view returns (IMarketAccessController);\\n}\\n\"\r\n    },\r\n    \"contracts/tools/math/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../Errors.sol';\\n\\n/// @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /// @return One ray, 1e27\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /// @return One wad, 1e18\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /// @return Half ray, 1e27/2\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /// @return Half ray, 1e18/2\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /// @dev Multiplies two wad, rounding half up to the nearest wad\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /// @dev Divides two wad, rounding half up to the nearest wad\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /// @dev Multiplies two ray, rounding half up to the nearest ray\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /// @dev Divides two ray, rounding half up to the nearest ray\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /// @dev Casts ray down to wad\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n\\n    require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /// @dev Converts wad up to ray\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n\\n    require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/tokens/ERC20DetailsBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IERC20Details.sol';\\n\\nabstract contract ERC20DetailsBase is IERC20Details {\\n  string private _name;\\n  string private _symbol;\\n  uint8 private _decimals;\\n\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  ) {\\n    _name = name_;\\n    _symbol = symbol_;\\n    _decimals = decimals_;\\n  }\\n\\n  function _initializeERC20(\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  ) internal {\\n    _name = name_;\\n    _symbol = symbol_;\\n    _decimals = decimals_;\\n  }\\n\\n  function name() public view override returns (string memory) {\\n    return _name;\\n  }\\n\\n  function symbol() public view override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  function decimals() public view override returns (uint8) {\\n    return _decimals;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IRemoteAccessBitmask.sol';\\nimport '../../tools/upgradeability/IProxy.sol';\\n\\n/// @dev Main registry of permissions and addresses\\ninterface IAccessController is IRemoteAccessBitmask {\\n  function getAddress(uint256 id) external view returns (address);\\n\\n  function createProxy(\\n    address admin,\\n    address impl,\\n    bytes calldata params\\n  ) external returns (IProxy);\\n}\\n\"\r\n    },\r\n    \"contracts/tools/upgradeability/IProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IProxy {\\n  function upgradeToAndCall(address newImplementation, bytes calldata data) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/reward/locker/RewardedTokenLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../interfaces/IBoostRate.sol';\\nimport '../interfaces/IBoostExcessReceiver.sol';\\nimport '../interfaces/IRewardController.sol';\\nimport '../interfaces/IAutolocker.sol';\\nimport '../pools/ControlledRewardPool.sol';\\nimport '../calcs/CalcCheckpointWeightedReward.sol';\\nimport './BaseTokenLocker.sol';\\n\\ncontract RewardedTokenLocker is\\n  BaseTokenLocker,\\n  ControlledRewardPool,\\n  CalcCheckpointWeightedReward,\\n  IBoostExcessReceiver,\\n  IBoostRate,\\n  IAutolocker\\n{\\n  constructor(\\n    IRewardController controller,\\n    uint256 initialRate,\\n    uint16 baselinePercentage,\\n    address underlying\\n  )\\n    CalcCheckpointWeightedReward()\\n    BaseTokenLocker(underlying)\\n    ControlledRewardPool(controller, initialRate, baselinePercentage)\\n  {}\\n\\n  function redeem(address to) public override notPaused returns (uint256 underlyingAmount) {\\n    return super.redeem(to);\\n  }\\n\\n  function isRedeemable() external view returns (bool) {\\n    return !isPaused();\\n  }\\n\\n  function addRewardProvider(address, address) external view override onlyConfigAdmin {\\n    revert('UNSUPPORTED');\\n  }\\n\\n  function removeRewardProvider(address) external override onlyConfigAdmin {}\\n\\n  function internalSyncRate(uint32 at) internal override {\\n    doSyncRateAt(at);\\n  }\\n\\n  function internalCheckpoint(uint32 at) internal override {\\n    doCheckpoint(at);\\n  }\\n\\n  function setStakeBalance(address holder, uint224 stakeAmount) internal virtual override {\\n    (uint256 amount, uint32 since, AllocationMode mode) = doUpdateRewardBalance(holder, stakeAmount);\\n    internalAllocateReward(holder, amount, since, mode);\\n  }\\n\\n  function unsetStakeBalance(address holder, uint32 at) internal virtual override {\\n    (uint256 amount, uint32 since, ) = doGetRewardAt(holder, at);\\n    doRemoveRewardBalance(holder);\\n    if (amount == 0) {\\n      return;\\n    }\\n    internalAllocateReward(holder, amount, since, AllocationMode.Push);\\n  }\\n\\n  function getStakeBalance(address holder) internal view override returns (uint224) {\\n    return getRewardEntry(holder).rewardBase;\\n  }\\n\\n  function isHistory(uint32 at) internal view override returns (bool) {\\n    return isCompletedPast(at);\\n  }\\n\\n  function internalExtraRate() internal view override returns (uint256) {\\n    return getExtraRate();\\n  }\\n\\n  function internalTotalSupply() internal view override returns (uint256) {\\n    return getStakedTotal();\\n  }\\n\\n  function balanceOf(address account) public view virtual override returns (uint256 stakeAmount) {\\n    (, uint32 expiry) = expiryOf(account);\\n    if (getCurrentTick() >= expiry) {\\n      return 0;\\n    }\\n    return getStakeBalance(account);\\n  }\\n\\n  function internalCalcReward(address holder, uint32 current)\\n    internal\\n    view\\n    virtual\\n    override\\n    returns (uint256 amount, uint32 since)\\n  {\\n    (, uint32 expiry) = expiryOf(holder);\\n    if (expiry == 0) {\\n      return (0, 0);\\n    }\\n    if (current > expiry) {\\n      current = expiry;\\n    }\\n    return doCalcRewardAt(holder, current);\\n  }\\n\\n  function internalGetReward(address holder)\\n    internal\\n    virtual\\n    override\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull\\n    )\\n  {\\n    (amount, since, keepPull, ) = internalGetRewardWithLimit(holder, 0, type(uint256).max, 0);\\n  }\\n\\n  function internalGetRewardWithLimit(\\n    address holder,\\n    uint256 baseAmount,\\n    uint256 limit,\\n    uint16 minBoostPct\\n  )\\n    internal\\n    virtual\\n    override\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull,\\n      uint256\\n    )\\n  {\\n    internalUpdate(true, 0);\\n\\n    (, uint32 expiry) = expiryOf(holder);\\n    if (expiry == 0) {\\n      return (0, 0, false, 0);\\n    }\\n    uint32 current = getCurrentTick();\\n    if (current < expiry) {\\n      (amount, since, keepPull) = doGetRewardAt(holder, current);\\n    } else {\\n      (amount, since, ) = doGetRewardAt(holder, expiry);\\n      doRemoveRewardBalance(holder);\\n      keepPull = false;\\n    }\\n\\n    amount += baseAmount;\\n    if (amount <= limit) {\\n      return (amount, since, keepPull, limit);\\n    }\\n\\n    if (minBoostPct > 0) {\\n      limit += PercentageMath.percentMul(amount, minBoostPct);\\n      if (amount <= limit) {\\n        return (amount, since, keepPull, limit);\\n      }\\n    }\\n\\n    internalAddExcess(amount - limit, since);\\n    return (limit, since, keepPull, limit);\\n  }\\n\\n  function internalGetRate() internal view override returns (uint256) {\\n    return getLinearRate();\\n  }\\n\\n  function internalSetRate(uint256 rate) internal override {\\n    internalUpdate(false, 0);\\n    setLinearRate(rate);\\n  }\\n\\n  function getCurrentTick() internal view override returns (uint32) {\\n    return uint32(block.timestamp);\\n  }\\n\\n  function setBoostRate(uint256 rate) external override onlyController {\\n    _setRate(rate);\\n  }\\n\\n  function receiveBoostExcess(uint256 amount, uint32 since) external override onlyController {\\n    internalUpdate(false, 0);\\n    internalAddExcess(amount, since);\\n  }\\n\\n  function applyAutolock(\\n    address account,\\n    uint256 amount,\\n    AutolockMode mode,\\n    uint32 lockDuration,\\n    uint224 param\\n  )\\n    external\\n    override\\n    onlyController\\n    returns (\\n      address, /* receiver */\\n      uint256, /* lockAmount */\\n      bool stop\\n    )\\n  {\\n    uint256 recoverableError;\\n    if (mode == AutolockMode.Prolongate) {\\n      // full amount is locked\\n    } else if (mode == AutolockMode.AccumulateTill) {\\n      // full amount is locked\\n      if (block.timestamp >= param) {\\n        stop = true;\\n        amount = 0;\\n      }\\n    } else if (mode == AutolockMode.AccumulateUnderlying) {\\n      (amount, stop) = calcAutolockUnderlying(amount, balanceOfUnderlying(account), param);\\n    } else if (mode == AutolockMode.KeepUpBalance) {\\n      if (lockDuration == 0) {\\n        // shouldn't happen\\n        stop = true;\\n        amount = 0;\\n      } else {\\n        // it never stops unless the lock expires\\n        amount = calcAutolockKeepUp(amount, balanceOf(account), param, lockDuration);\\n      }\\n    } else {\\n      return (address(0), 0, false);\\n    }\\n\\n    if (amount == 0) {\\n      return (address(0), 0, stop);\\n    }\\n\\n    // NB! the tokens are NOT received here and must be minted to this locker directly\\n    (, recoverableError) = internalLock(address(this), account, amount, lockDuration, 0, false);\\n\\n    if (recoverableError != 0) {\\n      emit RewardAutolockFailed(account, mode, recoverableError);\\n      return (address(0), 0, true);\\n    }\\n\\n    return (address(this), amount, stop);\\n  }\\n\\n  function calcAutolockUnderlying(\\n    uint256 amount,\\n    uint256 balance,\\n    uint256 limit\\n  ) private pure returns (uint256, bool) {\\n    if (balance >= limit) {\\n      return (0, true);\\n    }\\n    limit -= balance;\\n\\n    if (amount > limit) {\\n      return (limit, true);\\n    }\\n    return (amount, amount == limit);\\n  }\\n\\n  function calcAutolockKeepUp(\\n    uint256 amount,\\n    uint256 balance,\\n    uint256 limit,\\n    uint32 lockDuration\\n  ) private view returns (uint256) {\\n    this;\\n    if (balance >= limit) {\\n      return 0;\\n    }\\n\\n    limit = convertLockedToUnderlying(limit - balance, lockDuration);\\n\\n    if (amount > limit) {\\n      return limit;\\n    }\\n    return amount;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (DepositToken, VariableDebtToken and StableDebtToken)\\n *  - AT = DepositToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = AddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolExtension\\n *  - ST = Stake\\n */\\nlibrary Errors {\\n  //contract specific errors\\n  string public constant VL_INVALID_AMOUNT = '1'; // Amount must be greater than 0\\n  string public constant VL_NO_ACTIVE_RESERVE = '2'; // Action requires an active reserve\\n  string public constant VL_RESERVE_FROZEN = '3'; // Action cannot be performed because the reserve is frozen\\n  string public constant VL_UNKNOWN_RESERVE = '4'; // Action requires an active reserve\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // User cannot withdraw more than the available balance (above min limit)\\n  string public constant VL_TRANSFER_NOT_ALLOWED = '6'; // Transfer cannot be allowed.\\n  string public constant VL_BORROWING_NOT_ENABLED = '7'; // Borrowing is not enabled\\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // Invalid interest rate mode selected\\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // The collateral balance is 0\\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // Health factor is lesser than the liquidation threshold\\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // There is not enough collateral to cover a new borrow\\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\\n  string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\\n  string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // The requested amount is exceeds max size of a stable loan\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // to repay a debt, user needs to specify a correct debt type (variable or stable)\\n  string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // To repay on behalf of an user an explicit amount to repay is needed\\n  string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // User does not have a stable rate loan in progress on this reserve\\n  string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // User does not have a variable rate loan in progress on this reserve\\n  string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // The collateral balance needs to be greater than 0\\n  string public constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // User deposit is already being used as collateral\\n  string public constant VL_RESERVE_MUST_BE_COLLATERAL = '21'; // This reserve must be enabled as collateral\\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // Interest rate rebalance conditions were not met\\n  string public constant AT_OVERDRAFT_DISABLED = '23'; // User doesn't accept allocation of overdraft\\n  string public constant VL_INVALID_SUB_BALANCE_ARGS = '24';\\n  string public constant AT_INVALID_SLASH_DESTINATION = '25';\\n\\n  string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // The caller of the function is not the lending pool configurator\\n\\n  string public constant LENDING_POOL_REQUIRED = '28'; // The caller of this function must be a lending pool\\n  string public constant CALLER_NOT_LENDING_POOL = '29'; // The caller of this function must be a lending pool\\n  string public constant AT_SUB_BALANCE_RESTIRCTED_FUNCTION = '30'; // The caller of this function must be a lending pool or a sub-balance operator\\n\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // Reserve has already been initialized\\n  string public constant CALLER_NOT_POOL_ADMIN = '33'; // The caller must be the pool admin\\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // The liquidity of the reserve needs to be 0\\n\\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // Provider is not registered\\n  string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // Health factor is not below the threshold\\n  string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // The collateral chosen cannot be liquidated\\n  string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // User did not borrow the specified currency\\n  string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // There isn't enough liquidity available to liquidate\\n\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '48';\\n  string public constant MATH_ADDITION_OVERFLOW = '49';\\n  string public constant MATH_DIVISION_BY_ZERO = '50';\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\\n  string public constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\\n  string public constant CALLER_NOT_STAKE_ADMIN = '57';\\n  string public constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\\n  string public constant CALLER_NOT_LIQUIDITY_CONTROLLER = '60';\\n  string public constant CALLER_NOT_REF_ADMIN = '61';\\n  string public constant VL_INSUFFICIENT_REWARD_AVAILABLE = '62';\\n  string public constant LP_CALLER_MUST_BE_DEPOSIT_TOKEN = '63';\\n  string public constant LP_IS_PAUSED = '64'; // Pool is paused\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = '65';\\n  string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\\n  string public constant RC_INVALID_LTV = '67';\\n  string public constant RC_INVALID_LIQ_THRESHOLD = '68';\\n  string public constant RC_INVALID_LIQ_BONUS = '69';\\n  string public constant RC_INVALID_DECIMALS = '70';\\n  string public constant RC_INVALID_RESERVE_FACTOR = '71';\\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\\n  string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\\n  string public constant VL_TREASURY_REQUIRED = '74';\\n  string public constant LPC_INVALID_CONFIGURATION = '75'; // Invalid risk parameters for the reserve\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '76'; // The caller must be the emergency admin\\n  string public constant UL_INVALID_INDEX = '77';\\n  string public constant VL_CONTRACT_REQUIRED = '78';\\n  string public constant SDT_STABLE_DEBT_OVERFLOW = '79';\\n  string public constant SDT_BURN_EXCEEDS_BALANCE = '80';\\n  string public constant CALLER_NOT_REWARD_CONFIG_ADMIN = '81'; // The caller of this function must be a reward admin\\n  string public constant LP_INVALID_PERCENTAGE = '82'; // Percentage can't be more than 100%\\n  string public constant LP_IS_NOT_TRUSTED_FLASHLOAN = '83';\\n  string public constant CALLER_NOT_SWEEP_ADMIN = '84';\\n  string public constant LP_TOO_MANY_NESTED_CALLS = '85';\\n  string public constant LP_RESTRICTED_FEATURE = '86';\\n  string public constant LP_TOO_MANY_FLASHLOAN_CALLS = '87';\\n  string public constant RW_BASELINE_EXCEEDED = '88';\\n  string public constant CALLER_NOT_REWARD_RATE_ADMIN = '89';\\n  string public constant CALLER_NOT_REWARD_CONTROLLER = '90';\\n  string public constant RW_REWARD_PAUSED = '91';\\n  string public constant CALLER_NOT_TEAM_MANAGER = '92';\\n  string public constant STK_REDEEM_PAUSED = '93';\\n  string public constant STK_INSUFFICIENT_COOLDOWN = '94';\\n  string public constant STK_UNSTAKE_WINDOW_FINISHED = '95';\\n  string public constant STK_INVALID_BALANCE_ON_COOLDOWN = '96';\\n  string public constant STK_EXCESSIVE_SLASH_PCT = '97';\\n  string public constant STK_WRONG_COOLDOWN_OR_UNSTAKE = '98';\\n  string public constant STK_PAUSED = '99';\\n\\n  string public constant TXT_OWNABLE_CALLER_NOT_OWNER = 'Ownable: caller is not the owner';\\n  string public constant TXT_CALLER_NOT_PROXY_OWNER = 'ProxyOwner: caller is not the owner';\\n  string public constant TXT_ACCESS_RESTRICTED = 'RESTRICTED';\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IBoostRate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IBoostRate {\\n  function setBoostRate(uint256 rate) external;\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IBoostExcessReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IBoostExcessReceiver {\\n  function receiveBoostExcess(uint256 amount, uint32 since) external;\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IAutolocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nenum AutolockMode {Default, Stop, Prolongate, AccumulateUnderlying, AccumulateTill, KeepUpBalance}\\n\\ninterface IAutolocker {\\n  function applyAutolock(\\n    address account,\\n    uint256 amount,\\n    AutolockMode mode,\\n    uint32 lockDuration,\\n    uint224 param\\n  )\\n    external\\n    returns (\\n      address receiver,\\n      uint256 lockAmount,\\n      bool completed\\n    );\\n\\n  event RewardAutolocked(address indexed account, uint256 amount, AutolockMode mode);\\n  event RewardAutolockFailed(address indexed account, AutolockMode mode, uint256 error);\\n}\\n\"\r\n    },\r\n    \"contracts/reward/pools/ControlledRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../tools/math/PercentageMath.sol';\\nimport '../interfaces/IRewardController.sol';\\nimport '../interfaces/IManagedRewardPool.sol';\\nimport '../../access/AccessFlags.sol';\\nimport '../../access/AccessHelper.sol';\\nimport '../../tools/Errors.sol';\\n\\nabstract contract ControlledRewardPool is IManagedRewardPool {\\n  using PercentageMath for uint256;\\n\\n  IRewardController private _controller;\\n\\n  uint16 private _baselinePercentage;\\n  bool private _paused;\\n\\n  constructor(\\n    IRewardController controller,\\n    uint256 initialRate,\\n    uint16 baselinePercentage\\n  ) {\\n    _initialize(controller, initialRate, baselinePercentage, '');\\n  }\\n\\n  function _initialize(\\n    IRewardController controller,\\n    uint256 initialRate,\\n    uint16 baselinePercentage,\\n    string memory poolName\\n  ) internal virtual {\\n    poolName;\\n    _controller = controller;\\n\\n    if (baselinePercentage > 0) {\\n      _setBaselinePercentage(baselinePercentage);\\n    }\\n\\n    if (initialRate > 0) {\\n      _setRate(initialRate);\\n    }\\n  }\\n\\n  function getPoolName() public view virtual override returns (string memory) {\\n    return '';\\n  }\\n\\n  function updateBaseline(uint256 baseline)\\n    external\\n    virtual\\n    override\\n    onlyController\\n    returns (bool hasBaseline, uint256 appliedRate)\\n  {\\n    if (_baselinePercentage == 0) {\\n      return (false, internalGetRate());\\n    }\\n    appliedRate = baseline.percentMul(_baselinePercentage);\\n    _setRate(appliedRate);\\n    return (true, appliedRate);\\n  }\\n\\n  function setBaselinePercentage(uint16 factor) external override onlyController {\\n    _setBaselinePercentage(factor);\\n  }\\n\\n  function getBaselinePercentage() public view override returns (uint16) {\\n    return _baselinePercentage;\\n  }\\n\\n  function _mustHaveController() private view {\\n    require(address(_controller) != address(0), 'controller is required');\\n  }\\n\\n  function _setBaselinePercentage(uint16 factor) internal virtual {\\n    _mustHaveController();\\n    require(factor <= PercentageMath.ONE, 'illegal value');\\n    _baselinePercentage = factor;\\n    emit BaselinePercentageUpdated(factor);\\n  }\\n\\n  function _setRate(uint256 rate) internal {\\n    _mustHaveController();\\n    internalSetRate(rate);\\n    emit RateUpdated(rate);\\n  }\\n\\n  function getRate() external view override returns (uint256) {\\n    return internalGetRate();\\n  }\\n\\n  function internalGetRate() internal view virtual returns (uint256);\\n\\n  function internalSetRate(uint256 rate) internal virtual;\\n\\n  function setPaused(bool paused) public override onlyEmergencyAdmin {\\n    if (_paused != paused) {\\n      _paused = paused;\\n      internalPause(paused);\\n    }\\n    emit EmergencyPaused(msg.sender, paused);\\n  }\\n\\n  function isPaused() public view override returns (bool) {\\n    return _paused;\\n  }\\n\\n  function internalPause(bool paused) internal virtual {}\\n\\n  function getRewardController() public view override returns (address) {\\n    return address(_controller);\\n  }\\n\\n  function claimRewardFor(address holder)\\n    external\\n    override\\n    onlyController\\n    returns (\\n      uint256,\\n      uint32,\\n      bool\\n    )\\n  {\\n    return internalGetReward(holder);\\n  }\\n\\n  function claimRewardWithLimitFor(\\n    address holder,\\n    uint256 baseAmount,\\n    uint256 limit,\\n    uint16 minPct\\n  )\\n    external\\n    override\\n    onlyController\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull,\\n      uint256 newLimit\\n    )\\n  {\\n    return internalGetRewardWithLimit(holder, baseAmount, limit, minPct);\\n  }\\n\\n  function calcRewardFor(address holder, uint32 at)\\n    external\\n    view\\n    virtual\\n    override\\n    returns (\\n      uint256 amount,\\n      uint256,\\n      uint32 since\\n    )\\n  {\\n    require(at >= uint32(block.timestamp));\\n    (amount, since) = internalCalcReward(holder, at);\\n    return (amount, 0, since);\\n  }\\n\\n  function internalAllocateReward(\\n    address holder,\\n    uint256 allocated,\\n    uint32 since,\\n    AllocationMode mode\\n  ) internal {\\n    _controller.allocatedByPool(holder, allocated, since, mode);\\n  }\\n\\n  function internalGetRewardWithLimit(\\n    address holder,\\n    uint256 baseAmount,\\n    uint256 limit,\\n    uint16 minBoostPct\\n  )\\n    internal\\n    virtual\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull,\\n      uint256\\n    )\\n  {\\n    (amount, since, keepPull) = internalGetReward(holder);\\n    amount += baseAmount;\\n    if (minBoostPct > 0) {\\n      limit += PercentageMath.percentMul(amount, minBoostPct);\\n    }\\n    return (amount, since, keepPull, limit);\\n  }\\n\\n  function internalGetReward(address holder)\\n    internal\\n    virtual\\n    returns (\\n      uint256,\\n      uint32,\\n      bool\\n    );\\n\\n  function internalCalcReward(address holder, uint32 at) internal view virtual returns (uint256, uint32);\\n\\n  function attachedToRewardController() external override onlyController returns (uint256) {\\n    internalAttachedToRewardController();\\n    return internalGetPreAllocatedLimit();\\n  }\\n\\n  function detachedFromRewardController() external override onlyController returns (uint256) {\\n    return internalGetPreAllocatedLimit();\\n  }\\n\\n  function internalGetPreAllocatedLimit() internal virtual returns (uint256) {\\n    return 0;\\n  }\\n\\n  function internalAttachedToRewardController() internal virtual {}\\n\\n  function _isController(address addr) internal view virtual returns (bool) {\\n    return address(_controller) == addr;\\n  }\\n\\n  function getAccessController() internal view virtual returns (IMarketAccessController) {\\n    return _controller.getAccessController();\\n  }\\n\\n  function _onlyController() private view {\\n    require(_isController(msg.sender), Errors.CALLER_NOT_REWARD_CONTROLLER);\\n  }\\n\\n  modifier onlyController() {\\n    _onlyController();\\n    _;\\n  }\\n\\n  function _isConfigAdmin(address addr) internal view returns (bool) {\\n    return address(_controller) != address(0) && _controller.isConfigAdmin(addr);\\n  }\\n\\n  function _onlyConfigAdmin() private view {\\n    require(_isConfigAdmin(msg.sender), Errors.CALLER_NOT_REWARD_CONFIG_ADMIN);\\n  }\\n\\n  modifier onlyConfigAdmin() {\\n    _onlyConfigAdmin();\\n    _;\\n  }\\n\\n  function _isRateAdmin(address addr) internal view returns (bool) {\\n    return address(_controller) != address(0) && _controller.isRateAdmin(addr);\\n  }\\n\\n  function _onlyRateAdmin() private view {\\n    require(_isRateAdmin(msg.sender), Errors.CALLER_NOT_REWARD_RATE_ADMIN);\\n  }\\n\\n  modifier onlyRateAdmin() {\\n    _onlyRateAdmin();\\n    _;\\n  }\\n\\n  function _onlyEmergencyAdmin() private view {\\n    AccessHelper.requireAnyOf(\\n      getAccessController(),\\n      msg.sender,\\n      AccessFlags.EMERGENCY_ADMIN,\\n      Errors.CALLER_NOT_EMERGENCY_ADMIN\\n    );\\n  }\\n\\n  modifier onlyEmergencyAdmin() {\\n    _onlyEmergencyAdmin();\\n    _;\\n  }\\n\\n  function _notPaused() private view {\\n    require(!_paused, Errors.RW_REWARD_PAUSED);\\n  }\\n\\n  modifier notPaused() {\\n    _notPaused();\\n    _;\\n  }\\n\\n  modifier notPausedCustom(string memory err) {\\n    require(!_paused, err);\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/reward/calcs/CalcCheckpointWeightedReward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './CalcLinearRewardBalances.sol';\\n\\nabstract contract CalcCheckpointWeightedReward is CalcLinearRewardBalances {\\n  uint256 private _accumRate;\\n  mapping(uint32 => uint256) private _accumHistory;\\n\\n  uint256 private constant _maxWeightBase = 1e36;\\n\\n  function internalTotalSupply() internal view virtual returns (uint256);\\n\\n  function internalExtraRate() internal view virtual returns (uint256);\\n\\n  function doCheckpoint(uint32 at) internal {\\n    (uint256 lastRate, uint32 lastAt) = getRateAndUpdatedAt();\\n    internalMarkRateUpdate(at);\\n    internalRateUpdated(lastRate, lastAt, at);\\n\\n    _accumHistory[at] = _accumRate + 1;\\n  }\\n\\n  function internalRateUpdated(\\n    uint256 lastRate,\\n    uint32 lastAt,\\n    uint32 at\\n  ) internal override {\\n    if (at == lastAt) {\\n      return;\\n    }\\n\\n    uint256 totalSupply = internalTotalSupply();\\n    if (totalSupply == 0) {\\n      return;\\n    }\\n\\n    lastRate += internalExtraRate();\\n    // the rate is now weighted vs _maxWeightBase\\n    lastRate *= _maxWeightBase / totalSupply;\\n    _accumRate += lastRate * (at - lastAt);\\n  }\\n\\n  function isHistory(uint32 at) internal view virtual returns (bool);\\n\\n  function internalCalcRateAndReward(\\n    RewardBalance memory entry,\\n    uint256 lastAccumRate,\\n    uint32 at\\n  )\\n    internal\\n    view\\n    virtual\\n    override\\n    returns (\\n      uint256 adjRate,\\n      uint256 allocated,\\n      uint32 /* since */\\n    )\\n  {\\n    if (isHistory(at)) {\\n      adjRate = _accumHistory[at];\\n      require(adjRate > 0, 'unknown history point');\\n      adjRate--;\\n    } else {\\n      adjRate = _accumRate;\\n      uint256 totalSupply = internalTotalSupply();\\n\\n      if (totalSupply > 0) {\\n        (uint256 rate, uint32 updatedAt) = getRateAndUpdatedAt();\\n\\n        rate += internalExtraRate();\\n        rate *= _maxWeightBase / totalSupply;\\n        adjRate += rate * (at - updatedAt);\\n      }\\n    }\\n\\n    if (adjRate == lastAccumRate || entry.rewardBase == 0) {\\n      return (adjRate, 0, entry.claimedAt);\\n    }\\n\\n    allocated = (uint256(entry.rewardBase) * (adjRate - lastAccumRate)) / _maxWeightBase;\\n    return (adjRate, allocated, entry.claimedAt);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/reward/locker/BaseTokenLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport '../../dependencies/openzeppelin/contracts/SafeERC20.sol';\\nimport '../../tools/tokens/ERC20NoTransferBase.sol';\\nimport '../../interfaces/IDerivedToken.sol';\\nimport '../../interfaces/IUnderlyingBalance.sol';\\n\\n/**\\n  @dev Curve-like locker, that locks an underlying token for some period and mints non-transferrable tokens for that period. \\n  Total amount of minted tokens = amount_of_locked_tokens * max_period / lock_period.\\n  End of lock period is aligned to week.\\n\\n  Additionally, this contract recycles token excess of capped rewards by spreading the excess over some period. \\n */\\n\\nabstract contract BaseTokenLocker is ERC20NoTransferBase, IDerivedToken, ILockedUnderlyingBalance {\\n  using SafeERC20 for IERC20;\\n\\n  IERC20 private _underlyingToken;\\n\\n  // Total amount of minted tokens. This number is increased in situ for new locks, and decreased at week edges, when locks expire.\\n  uint256 private _stakedTotal;\\n  // Current extra rate that distributes the recycled excess. This number is increased in situ for new excess added, and decreased at week edges.\\n  uint256 private _extraRate;\\n  // Accumulated _extraRate\\n  uint256 private _excessAccum;\\n\\n  /**\\n    @dev A future point, contains deltas to be applied at the relevant time (period's edge):\\n    - stakeDelta is amount to be subtracted from _stakedTotal\\n    - rateDelta is amount to be subtracted from _extraRate\\n  */\\n  struct Point {\\n    uint128 stakeDelta;\\n    uint128 rateDelta;\\n  }\\n  // Future points, indexed by point number (week number).\\n  mapping(uint32 => Point) private _pointTotal;\\n\\n  // Absolute limit of future points - 255 periods (weeks).\\n  uint32 private constant _maxDurationPoints = 255;\\n  // Period (in seconds) which gives 100% of lock tokens, must be less than _maxDurationPoints. Default = 208 weeks; // 4 * 52\\n  uint32 private constant _maxValuePeriod = 4 * 52 weeks;\\n  // Duration of a single period. All points are aligned to it. Default = 1 week.\\n  uint32 private constant _pointPeriod = 1 weeks;\\n  // Next (nearest future) known point.\\n  uint32 private _nextKnownPoint;\\n  // Latest (farest future) known point.\\n  uint32 private _lastKnownPoint;\\n  // Timestamp when internalUpdate() was invoked.\\n  uint32 private _lastUpdateTS;\\n  // Re-entrance guard for some of internalUpdate() operations.\\n  bool private _updateEntered;\\n\\n  /**\\n    @dev Details about user's lock\\n  */\\n  struct UserBalance {\\n    // Total amount of underlying token received from the user\\n    uint192 underlyingAmount;\\n    // Timestamp (not point) when the lock was created\\n    uint32 startTS;\\n    // Point number (week number), when the lock expired\\n    uint32 endPoint;\\n  }\\n\\n  // Balances of users\\n  mapping(address => UserBalance) private _balances;\\n  // Addresses which are allowed to add to user's lock\\n  // map[user][delegate]\\n  mapping(address => mapping(address => bool)) private _allowAdd;\\n\\n  event Locked(\\n    address from,\\n    address indexed to,\\n    uint256 underlyingAmountAdded,\\n    uint256 underlyingAmountTotal,\\n    uint256 amount,\\n    uint32 indexed expiry,\\n    uint256 indexed referral\\n  );\\n  event Redeemed(address indexed from, address indexed to, uint256 underlyingAmount);\\n\\n  /// @param underlying ERC20 token to be locked\\n  constructor(address underlying) {\\n    _initialize(underlying);\\n  }\\n\\n  /// @dev To be used for initializers only. Same as constructor.\\n  function _initialize(address underlying) internal {\\n    _underlyingToken = IERC20(underlying);\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function UNDERLYING_ASSET_ADDRESS() external view override returns (address) {\\n    return address(_underlyingToken);\\n  }\\n\\n  /** @dev Creates a new lock or adds more underlying to an existing lock of the caller:\\n      - with duration =0 this function adds to an existing unexpired lock without chaning lock's expiry, otherwise will fail (expired lock)\\n      - when a lock exists, the expiry (end) of the lock will be maximum of the current lock and of to-be-lock with the given duration.\\n      - when a lock has expired, but tokens were not redeemed these unredeemed tokens will also be added to the new locked.\\n      @param underlyingAmount amount of underlying (>0) to be added to the lock. Must be approved for transferFrom.\\n      @param duration in seconds of the lock. This duration will be rounded up to make sure that lock will end at a week's edge. \\n      Zero value indicates addition to an existing lock without changing expiry.\\n      @param referral code to use for marketing campaings. Use 0 when not involved.      \\n      @return total amount of lock tokens of the user.\\n   */\\n  function lock(\\n    uint256 underlyingAmount,\\n    uint32 duration,\\n    uint256 referral\\n  ) external returns (uint256) {\\n    require(underlyingAmount > 0, 'ZERO_UNDERLYING');\\n    //    require(duration > 0, 'ZERO_DURATION');\\n\\n    (uint256 stakeAmount, uint256 recoverableError) = internalLock(\\n      msg.sender,\\n      msg.sender,\\n      underlyingAmount,\\n      duration,\\n      referral,\\n      true\\n    );\\n\\n    revertOnError(recoverableError);\\n    return stakeAmount;\\n  }\\n\\n  /** @dev Extends an existing lock of the caller without adding more underlying. \\n      @param duration in seconds (>0) of the lock. This duration will be rounded up to make sure that lock will end at a week's edge. \\n      @return total amount of lock tokens of the user.\\n   */\\n  function lockExtend(uint32 duration) external returns (uint256) {\\n    require(duration > 0, 'ZERO_DURATION');\\n\\n    (uint256 stakeAmount, uint256 recoverableError) = internalLock(msg.sender, msg.sender, 0, duration, 0, false);\\n\\n    revertOnError(recoverableError);\\n    return stakeAmount;\\n  }\\n\\n  /** @dev Allows/disallows another user/contract to use lockAdd() function for the caller's lock.\\n      @param to an address who will call lockAdd().\\n      @param allow indicates if calls are allowed (true) or disallowed (false).\\n   */\\n  function allowAdd(address to, bool allow) external {\\n    _allowAdd[msg.sender][to] = allow;\\n  }\\n\\n  /** @dev A function to add funds to a lock of another user. Must be explicitly allowed with allowAdd().\\n      @param to an address to whose lock the given underlyingAmount shoud be added\\n      @param underlyingAmount amount of underlying (>0) to be added to the lock. Must be approved for transferFrom.\\n      @return total amount of lock tokens of the `to` address.\\n   */\\n  function lockAdd(address to, uint256 underlyingAmount) external returns (uint256) {\\n    require(underlyingAmount > 0, 'ZERO_UNDERLYING');\\n    require(_allowAdd[to][msg.sender], 'ADD_TO_LOCK_RESTRICTED');\\n\\n    (uint256 stakeAmount, uint256 recoverableError) = internalLock(msg.sender, to, underlyingAmount, 0, 0, true);\\n\\n    revertOnError(recoverableError);\\n    return stakeAmount;\\n  }\\n\\n  // These constants are soft errors - such errors can be detected by the autolock function so it can stop automatically\\n  uint256 private constant LOCK_ERR_NOTHING_IS_LOCKED = 1;\\n  uint256 private constant LOCK_ERR_DURATION_IS_TOO_LARGE = 2;\\n  uint256 private constant LOCK_ERR_UNDERLYING_OVERFLOW = 3;\\n  uint256 private constant LOCK_ERR_LOCK_OVERFLOW = 4;\\n\\n  /// @dev Converts soft errors into hard reverts\\n  function revertOnError(uint256 recoverableError) private pure {\\n    require(recoverableError != LOCK_ERR_LOCK_OVERFLOW, 'LOCK_ERR_LOCK_OVERFLOW');\\n    require(recoverableError != LOCK_ERR_UNDERLYING_OVERFLOW, 'LOCK_ERR_UNDERLYING_OVERFLOW');\\n    require(recoverableError != LOCK_ERR_DURATION_IS_TOO_LARGE, 'LOCK_ERR_DURATION_IS_TOO_LARGE');\\n    require(recoverableError != LOCK_ERR_NOTHING_IS_LOCKED, 'NOTHING_IS_LOCKED');\\n    require(recoverableError == 0, 'UNKNOWN_RECOVERABLE_ERROR');\\n  }\\n\\n  /** @dev Creates a new lock or adds underlying to an existing lock or extends it.\\n      @param from whom the funds (underlying) will be taken\\n      @param to whom the funds will be locked\\n      @param underlyingTransfer amount of underlying (=>0) to be added to the lock.\\n      @param duration in seconds of the lock. This duration will be rounded up to make sure that lock will end at a week's edge. \\n      Zero value indicates addition to an existing lock without changing expiry.\\n      @param doTransfer indicates when transferFrom should be called. E.g. autolock uses false, as tokens will be minted externally to this contract.\\n      @param referral code to use for marketing campaings. Use 0 when not involved.\\n      @return stakeAmount is total amount of lock tokens of the `to` address; recoverableError is the soft error code.\\n   */\\n  function internalLock(\\n    address from,\\n    address to,\\n    uint256 underlyingTransfer,\\n    uint32 duration,\\n    uint256 referral,\\n    bool doTransfer\\n  ) internal returns (uint256 stakeAmount, uint256 recoverableError) {\\n    require(from != address(0), 'ZERO_FROM');\\n    require(to != address(0), 'ZERO_TO');\\n\\n    uint32 currentPoint = internalUpdate(true, 0);\\n\\n    // this call ensures that time-based reward calculations are pulled up to this moment\\n    internalSyncRate(uint32(block.timestamp));\\n\\n    UserBalance memory userBalance = _balances[to];\\n\\n    uint256 prevStake;\\n    {\\n      // ======== ATTN! DO NOT APPLY STATE CHANGES STARTING FROM HERE ========\\n      unchecked {\\n        uint256 underlyingBalance = underlyingTransfer + userBalance.underlyingAmount;\\n\\n        if (underlyingBalance < underlyingTransfer || underlyingBalance > type(uint192).max) {\\n          return (0, LOCK_ERR_UNDERLYING_OVERFLOW);\\n        } else if (underlyingBalance == 0) {\\n          return (0, LOCK_ERR_NOTHING_IS_LOCKED);\\n        }\\n        userBalance.underlyingAmount = uint192(underlyingBalance);\\n      }\\n\\n      uint32 newEndPoint;\\n      if (duration < _pointPeriod) {\\n        // at least 1 full week is required\\n        newEndPoint = 1 + (uint32(block.timestamp + _pointPeriod - 1) / _pointPeriod);\\n      } else {\\n        newEndPoint = uint32(block.timestamp + duration + (_pointPeriod >> 1)) / _pointPeriod;\\n      }\\n\\n      if (newEndPoint > currentPoint + _maxDurationPoints) {\\n        return (0, LOCK_ERR_DURATION_IS_TOO_LARGE);\\n      }\\n\\n      if (userBalance.endPoint > currentPoint) {\\n        // lock is still valid - reuse it\\n        // so keep startTS and use the farest endTS\\n        require(userBalance.startTS > 0);\\n\\n        prevStake = getStakeBalance(to);\\n\\n        if (userBalance.endPoint > newEndPoint) {\\n          newEndPoint = userBalance.endPoint;\\n        }\\n      } else if (duration == 0) {\\n        // can't add to an expired lock\\n        return (0, LOCK_ERR_NOTHING_IS_LOCKED);\\n      } else {\\n        // new lock -> new start\\n        userBalance.startTS = uint32(block.timestamp);\\n      }\\n\\n      {\\n        uint256 adjDuration = uint256(newEndPoint * _pointPeriod) - userBalance.startTS;\\n        if (adjDuration < _maxValuePeriod) {\\n          stakeAmount = (uint256(userBalance.underlyingAmount) * adjDuration) / _maxValuePeriod;\\n        } else {\\n          stakeAmount = userBalance.underlyingAmount;\\n        }\\n      }\\n\\n      uint256 newStakeDelta;\\n      unchecked {\\n        newStakeDelta = stakeAmount + _pointTotal[newEndPoint].stakeDelta;\\n\\n        if (newStakeDelta < stakeAmount || newStakeDelta > type(uint128).max) {\\n          return (0, LOCK_ERR_LOCK_OVERFLOW);\\n        }\\n      }\\n\\n      // ======== ATTN! DO NOT APPLY STATE CHANGES ENDS HERE ========\\n\\n      if (prevStake > 0) {\\n        if (userBalance.endPoint == newEndPoint) {\\n          newStakeDelta -= prevStake;\\n        } else {\\n          _pointTotal[userBalance.endPoint].stakeDelta = uint128(\\n            _pointTotal[userBalance.endPoint].stakeDelta - prevStake\\n          );\\n        }\\n        _stakedTotal -= prevStake;\\n      }\\n\\n      if (userBalance.endPoint <= currentPoint) {\\n        // sum up rewards for the previous balance\\n        unsetStakeBalance(to, userBalance.endPoint * _pointPeriod);\\n        prevStake = 0;\\n      }\\n\\n      userBalance.endPoint = newEndPoint;\\n\\n      // range check is done above\\n      _pointTotal[newEndPoint].stakeDelta = uint128(newStakeDelta);\\n      _stakedTotal += stakeAmount;\\n    }\\n\\n    if (_nextKnownPoint > userBalance.endPoint || _nextKnownPoint == 0) {\\n      _nextKnownPoint = userBalance.endPoint;\\n    }\\n\\n    if (_lastKnownPoint < userBalance.endPoint || _lastKnownPoint == 0) {\\n      _lastKnownPoint = userBalance.endPoint;\\n    }\\n\\n    if (prevStake != stakeAmount) {\\n      setStakeBalance(to, uint224(stakeAmount));\\n    }\\n\\n    _balances[to] = userBalance;\\n\\n    if (doTransfer) {\\n      _underlyingToken.safeTransferFrom(from, address(this), underlyingTransfer);\\n    }\\n\\n    emit Locked(\\n      from,\\n      to,\\n      underlyingTransfer,\\n      userBalance.underlyingAmount,\\n      stakeAmount,\\n      userBalance.endPoint * _pointPeriod,\\n      referral\\n    );\\n    return (stakeAmount, 0);\\n  }\\n\\n  /// @dev Returns amount of underlying for the given address\\n  function balanceOfUnderlying(address account) public view override returns (uint256) {\\n    return _balances[account].underlyingAmount;\\n  }\\n\\n  /// @dev Returns amount of underlying and a timestamp when the lock expires. Funds can be redeemed after the timestamp.\\n  function balanceOfUnderlyingAndExpiry(address account)\\n    external\\n    view\\n    override\\n    returns (uint256 underlying, uint32 availableSince)\\n  {\\n    underlying = _balances[account].underlyingAmount;\\n    if (underlying == 0) {\\n      return (0, 0);\\n    }\\n    return (underlying, _balances[account].endPoint * _pointPeriod);\\n  }\\n\\n  function expiryOf(address account) internal view returns (uint32 lockedSince, uint32 availableSince) {\\n    return (_balances[account].startTS, _balances[account].endPoint * _pointPeriod);\\n  }\\n\\n  /**\\n   * @dev Attemps to redeem all underlying tokens of caller. Will not revert on zero or locked balance.\\n   * @param to address to which all redeemed tokens should be transferred.\\n   * @return underlyingAmount redeemed. Zero for an unexpired lock.\\n   **/\\n  function redeem(address to) public virtual returns (uint256 underlyingAmount) {\\n    return internalRedeem(msg.sender, to);\\n  }\\n\\n  function internalRedeem(address from, address to) private returns (uint256 underlyingAmount) {\\n    uint32 currentPoint = internalUpdate(true, 0);\\n    UserBalance memory userBalance = _balances[from];\\n\\n    if (userBalance.underlyingAmount == 0 || userBalance.endPoint > currentPoint) {\\n      // not yet\\n      return 0;\\n    }\\n\\n    // pay off rewards and stop\\n    unsetStakeBalance(from, userBalance.endPoint * _pointPeriod);\\n\\n    delete (_balances[from]);\\n\\n    _underlyingToken.safeTransfer(to, userBalance.underlyingAmount);\\n\\n    emit Redeemed(from, to, userBalance.underlyingAmount);\\n    return userBalance.underlyingAmount;\\n  }\\n\\n  /// @dev Applies all future-in-past points. Only useful to handle a situation when there were no state-changing calls for a long time.\\n  /// @param scanLimit defines a maximum number of points / updates to be processed at once.\\n  function update(uint256 scanLimit) public {\\n    internalUpdate(false, scanLimit);\\n  }\\n\\n  function isCompletedPast(uint32 at) internal view returns (bool) {\\n    return at <= (_lastUpdateTS / _pointPeriod) * _pointPeriod;\\n  }\\n\\n  function getScanRange(uint32 currentPoint, uint256 scanLimit)\\n    private\\n    view\\n    returns (\\n      uint32 fromPoint,\\n      uint32 tillPoint,\\n      uint32 maxPoint\\n    )\\n  {\\n    fromPoint = _nextKnownPoint;\\n\\n    if (currentPoint < fromPoint || fromPoint == 0) {\\n      return (fromPoint, 0, 0);\\n    }\\n\\n    maxPoint = _lastKnownPoint;\\n    if (maxPoint == 0) {\\n      // shouldn't happen, but as a precaution\\n      maxPoint = uint32(_lastUpdateTS / _pointPeriod) + _maxDurationPoints + 1;\\n    }\\n\\n    if (scanLimit > 0 && scanLimit + fromPoint > scanLimit) {\\n      scanLimit += fromPoint;\\n      if (scanLimit < maxPoint) {\\n        maxPoint = uint32(scanLimit);\\n      }\\n    }\\n\\n    if (maxPoint > currentPoint) {\\n      tillPoint = currentPoint;\\n    } else {\\n      tillPoint = maxPoint;\\n    }\\n\\n    return (fromPoint, tillPoint, maxPoint);\\n  }\\n\\n  /// @dev returns a total locked amount of underlying\\n  function totalOfUnderlying() external view returns (uint256) {\\n    return _underlyingToken.balanceOf(address(this));\\n  }\\n\\n  function internalCurrentTotalSupply() internal view returns (uint256) {\\n    return _stakedTotal;\\n  }\\n\\n  /// @dev returns a total amount of lock tokens\\n  function totalSupply() public view override returns (uint256 totalSupply_) {\\n    (uint32 fromPoint, uint32 tillPoint, ) = getScanRange(uint32(block.timestamp / _pointPeriod), 0);\\n\\n    totalSupply_ = _stakedTotal;\\n\\n    if (tillPoint == 0) {\\n      return totalSupply_;\\n    }\\n\\n    for (; fromPoint <= tillPoint; fromPoint++) {\\n      totalSupply_ -= _pointTotal[fromPoint].stakeDelta;\\n    }\\n\\n    return totalSupply_;\\n  }\\n\\n  /// @param preventReentry when true will revert the call on re-entry, otherwise will exit immediately\\n  /// @param scanLimit limits number of updates to be applied.\\n  /// ATTN! Must be zero (=unlimited) for all internal oprations, otherwise the state will be inconsisten.\\n  /// @return currentPoint (week number)\\n  function internalUpdate(bool preventReentry, uint256 scanLimit) internal returns (uint32 currentPoint) {\\n    currentPoint = uint32(block.timestamp / _pointPeriod);\\n\\n    if (_updateEntered) {\\n      require(!preventReentry, 're-entry to stake or to redeem');\\n      return currentPoint;\\n    }\\n    if (_lastUpdateTS == uint32(block.timestamp)) {\\n      return currentPoint;\\n    }\\n\\n    (uint32 fromPoint, uint32 tillPoint, uint32 maxPoint) = getScanRange(currentPoint, scanLimit);\\n    if (tillPoint > 0) {\\n      _updateEntered = true;\\n      {\\n        walkPoints(fromPoint, tillPoint, maxPoint);\\n      }\\n      _updateEntered = false;\\n    }\\n\\n    _lastUpdateTS = uint32(block.timestamp);\\n    return currentPoint;\\n  }\\n\\n  /// @dev searches and processes updates for future-in-past points and update next/last known points accordingly\\n  /// @param nextPoint start of future-in-past points (inclusive)\\n  /// @param tillPoint end of future-in-past points (inclusive)\\n  /// @param maxPoint the farest future point till which the next known point will be searched for\\n  function walkPoints(\\n    uint32 nextPoint,\\n    uint32 tillPoint,\\n    uint32 maxPoint\\n  ) private {\\n    Point memory delta = _pointTotal[nextPoint];\\n\\n    for (; nextPoint <= tillPoint; ) {\\n      internalCheckpoint(nextPoint * _pointPeriod);\\n\\n      _extraRate -= delta.rateDelta;\\n      _stakedTotal -= delta.stakeDelta;\\n\\n      bool found = false;\\n      // look for the next non-zero point\\n      for (nextPoint++; nextPoint <= maxPoint; nextPoint++) {\\n        delta = _pointTotal[nextPoint];\\n        if (delta.stakeDelta > 0 || delta.rateDelta > 0) {\\n          found = true;\\n          break;\\n        }\\n      }\\n      if (found) {\\n        continue;\\n      }\\n\\n      // keep nextPoint to reduce gas for further calls\\n      if (nextPoint > _lastKnownPoint) {\\n        nextPoint = 0;\\n      }\\n      break;\\n    }\\n\\n    _nextKnownPoint = nextPoint;\\n    if (nextPoint == 0 || nextPoint > _lastKnownPoint) {\\n      _lastKnownPoint = nextPoint;\\n    }\\n  }\\n\\n  function getUnderlying() internal view returns (address) {\\n    return address(_underlyingToken);\\n  }\\n\\n  /// @dev internalAddExcess recycles reward excess by spreading the given amount.\\n  /// The given amount is distributed starting from now for the same period that has passed from (since) till now.\\n  /// @param amount of reward to be redistributed.\\n  /// @param since a timestamp (in the past) since which the given amount was accumulated.\\n  /// No restrictions on since value - zero, current or event future timestamps are handled.\\n  function internalAddExcess(uint256 amount, uint32 since) internal {\\n    uint32 at = uint32(block.timestamp);\\n    uint32 expiry;\\n\\n    if (since == 0 || since >= at) {\\n      expiry = 1;\\n    } else {\\n      expiry = at - since;\\n      if (expiry > _maxValuePeriod) {\\n        expiry = _maxValuePeriod;\\n      }\\n    }\\n\\n    uint32 expiryPt = 1 + uint32(expiry + at + _pointPeriod - 1) / _pointPeriod;\\n    expiry = expiryPt * _pointPeriod;\\n\\n    expiry -= at;\\n    amount += _excessAccum;\\n    uint256 excessRateIncrement = amount / expiry;\\n    _excessAccum = amount - excessRateIncrement * expiry;\\n\\n    if (excessRateIncrement == 0) {\\n      return;\\n    }\\n\\n    internalSyncRate(at);\\n\\n    _extraRate += excessRateIncrement;\\n\\n    excessRateIncrement += _pointTotal[expiryPt].rateDelta;\\n    require(excessRateIncrement <= type(uint128).max);\\n    _pointTotal[expiryPt].rateDelta = uint128(excessRateIncrement);\\n\\n    if (_nextKnownPoint > expiryPt || _nextKnownPoint == 0) {\\n      _nextKnownPoint = expiryPt;\\n    }\\n\\n    if (_lastKnownPoint < expiryPt || _lastKnownPoint == 0) {\\n      _lastKnownPoint = expiryPt;\\n    }\\n  }\\n\\n  /// @dev is called to syncronize reward accumulators\\n  /// @param at timestamp till which accumulators should be updated\\n  function internalSyncRate(uint32 at) internal virtual;\\n\\n  /// @dev is called to update rate history\\n  /// @param at timestamp for which the current state should be records as a history point\\n  function internalCheckpoint(uint32 at) internal virtual;\\n\\n  /// @dev is called to sum up reward and to stop issuing it\\n  /// @param holder of reward\\n  /// @param at timestamp till which reward should be calculated\\n  function unsetStakeBalance(address holder, uint32 at) internal virtual;\\n\\n  /// @dev is called to sum up reward upto now and start calculation of the reward for the new stakeAmount\\n  /// @param holder of reward\\n  /// @param stakeAmount of lock tokens for reward calculation\\n  function setStakeBalance(address holder, uint224 stakeAmount) internal virtual;\\n\\n  function getStakeBalance(address holder) internal view virtual returns (uint224 stakeAmount);\\n\\n  function convertLockedToUnderlying(uint256 lockedAmount, uint32 lockDuration) public view returns (uint256) {\\n    this;\\n    if (lockDuration > _maxValuePeriod) {\\n      lockDuration = _maxValuePeriod;\\n    }\\n\\n    lockDuration = (lockDuration + (_pointPeriod >> 1)) / _pointPeriod;\\n    lockDuration *= _pointPeriod;\\n\\n    if (lockDuration < _maxValuePeriod) {\\n      return (lockedAmount * _maxValuePeriod) / lockDuration;\\n    }\\n    return lockedAmount;\\n  }\\n\\n  function convertUnderlyingToLocked(uint256 underlyingAmount, uint32 lockDuration)\\n    public\\n    view\\n    returns (uint256 lockedAmount)\\n  {\\n    this;\\n    if (lockDuration > _maxValuePeriod) {\\n      lockDuration = _maxValuePeriod;\\n    }\\n\\n    lockDuration = (lockDuration + (_pointPeriod >> 1)) / _pointPeriod;\\n    lockDuration *= _pointPeriod;\\n\\n    if (lockDuration < _maxValuePeriod) {\\n      return (underlyingAmount * lockDuration) / _maxValuePeriod;\\n    }\\n    return underlyingAmount;\\n  }\\n\\n  /// @dev returns current rate of reward excess / redistribution.\\n  /// This function is used by decsendants.\\n  function getExtraRate() internal view returns (uint256) {\\n    return _extraRate;\\n  }\\n\\n  /// @dev returns unadjusted (current state) amount of lock tokens.\\n  /// This function is used by decsendants.\\n  function getStakedTotal() internal view returns (uint256) {\\n    return _stakedTotal;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/math/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../Errors.sol';\\n\\n/// @dev Percentages are defined in basis points. The precision is indicated by ONE. Operations are rounded half up.\\nlibrary PercentageMath {\\n  uint16 public constant BP = 1; // basis point\\n  uint16 public constant PCT = 100 * BP; // basis points per percentage point\\n  uint16 public constant ONE = 100 * PCT; // basis points per 1 (100%)\\n  uint16 public constant HALF_ONE = ONE / 2;\\n  // deprecated\\n  uint256 public constant PERCENTAGE_FACTOR = ONE; //percentage plus two decimals\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param factor Basis points of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 factor) internal pure returns (uint256) {\\n    if (value == 0 || factor == 0) {\\n      return 0;\\n    }\\n\\n    require(value <= (type(uint256).max - HALF_ONE) / factor, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * factor + HALF_ONE) / ONE;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param factor Basis points of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 factor) internal pure returns (uint256) {\\n    require(factor != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfFactor = factor >> 1;\\n\\n    require(value <= (type(uint256).max - halfFactor) / ONE, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * ONE + halfFactor) / factor;\\n  }\\n\\n  function percentOf(uint256 value, uint256 base) internal pure returns (uint256) {\\n    require(base != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    if (value == 0) {\\n      return 0;\\n    }\\n\\n    require(value <= (type(uint256).max - HALF_ONE) / ONE, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * ONE + (base >> 1)) / base;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IManagedRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../interfaces/IEmergencyAccess.sol';\\n\\ninterface IManagedRewardPool is IEmergencyAccess {\\n  function updateBaseline(uint256) external returns (bool hasBaseline, uint256 appliedRate);\\n\\n  function setBaselinePercentage(uint16) external;\\n\\n  function getBaselinePercentage() external view returns (uint16);\\n\\n  function getRate() external view returns (uint256);\\n\\n  function getPoolName() external view returns (string memory);\\n\\n  function claimRewardFor(address holder)\\n    external\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull\\n    );\\n\\n  function claimRewardWithLimitFor(\\n    address holder,\\n    uint256 baseAmount,\\n    uint256 limit,\\n    uint16 minPct\\n  )\\n    external\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull,\\n      uint256 newLimit\\n    );\\n\\n  function calcRewardFor(address holder, uint32 at)\\n    external\\n    view\\n    returns (\\n      uint256 amount,\\n      uint256 extra,\\n      uint32 since\\n    );\\n\\n  function addRewardProvider(address provider, address token) external;\\n\\n  function removeRewardProvider(address provider) external;\\n\\n  function getRewardController() external view returns (address);\\n\\n  function attachedToRewardController() external returns (uint256 allocateReward);\\n\\n  function detachedFromRewardController() external returns (uint256 deallocateReward);\\n\\n  event RateUpdated(uint256 rate);\\n  event BaselinePercentageUpdated(uint16);\\n  event ProviderAdded(address provider, address token);\\n  event ProviderRemoved(address provider);\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './interfaces/IRemoteAccessBitmask.sol';\\n\\n/// @dev Helper/wrapper around IRemoteAccessBitmask\\nlibrary AccessHelper {\\n  function getAcl(IRemoteAccessBitmask remote, address subject) internal view returns (uint256) {\\n    return remote.queryAccessControlMask(subject, ~uint256(0));\\n  }\\n\\n  function queryAcl(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 filterMask\\n  ) internal view returns (uint256) {\\n    return remote.queryAccessControlMask(subject, filterMask);\\n  }\\n\\n  function hasAnyOf(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 flags\\n  ) internal view returns (bool) {\\n    uint256 found = queryAcl(remote, subject, flags);\\n    return found & flags != 0;\\n  }\\n\\n  function hasAny(IRemoteAccessBitmask remote, address subject) internal view returns (bool) {\\n    return remote.queryAccessControlMask(subject, 0) != 0;\\n  }\\n\\n  function hasNone(IRemoteAccessBitmask remote, address subject) internal view returns (bool) {\\n    return remote.queryAccessControlMask(subject, 0) == 0;\\n  }\\n\\n  function requireAnyOf(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 flags,\\n    string memory text\\n  ) internal view {\\n    require(hasAnyOf(remote, subject, flags), text);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEmergencyAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IEmergencyAccess {\\n  function setPaused(bool paused) external;\\n\\n  function isPaused() external view returns (bool);\\n\\n  event EmergencyPaused(address indexed by, bool paused);\\n}\\n\"\r\n    },\r\n    \"contracts/reward/calcs/CalcLinearRewardBalances.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../interfaces/IRewardController.sol';\\n\\nabstract contract CalcLinearRewardBalances {\\n  struct RewardBalance {\\n    uint192 rewardBase;\\n    uint32 custom;\\n    uint32 claimedAt;\\n  }\\n  mapping(address => RewardBalance) private _balances;\\n  mapping(address => uint256) private _accumRates;\\n\\n  uint224 private _rate;\\n  uint32 private _rateUpdatedAt;\\n\\n  function setLinearRate(uint256 rate) internal {\\n    setLinearRateAt(rate, getCurrentTick());\\n  }\\n\\n  function setLinearRateAt(uint256 rate, uint32 at) internal {\\n    if (_rate == rate) {\\n      return;\\n    }\\n    require(rate <= type(uint224).max);\\n\\n    uint32 prevTick = _rateUpdatedAt;\\n    if (at != prevTick) {\\n      uint224 prevRate = _rate;\\n      internalMarkRateUpdate(at);\\n      _rate = uint224(rate);\\n      internalRateUpdated(prevRate, prevTick, at);\\n    }\\n  }\\n\\n  function doSyncRateAt(uint32 at) internal {\\n    uint32 prevTick = _rateUpdatedAt;\\n    if (at != prevTick) {\\n      internalMarkRateUpdate(at);\\n      internalRateUpdated(_rate, prevTick, at);\\n    }\\n  }\\n\\n  function getCurrentTick() internal view virtual returns (uint32);\\n\\n  function internalRateUpdated(\\n    uint256 lastRate,\\n    uint32 lastAt,\\n    uint32 at\\n  ) internal virtual;\\n\\n  function internalMarkRateUpdate(uint32 currentTick) internal {\\n    require(currentTick >= _rateUpdatedAt, 'retroactive update');\\n    _rateUpdatedAt = currentTick;\\n  }\\n\\n  function getLinearRate() internal view returns (uint256) {\\n    return _rate;\\n  }\\n\\n  function getRateAndUpdatedAt() internal view returns (uint256, uint32) {\\n    return (_rate, _rateUpdatedAt);\\n  }\\n\\n  function internalCalcRateAndReward(\\n    RewardBalance memory entry,\\n    uint256 lastAccumRate,\\n    uint32 currentTick\\n  )\\n    internal\\n    view\\n    virtual\\n    returns (\\n      uint256 rate,\\n      uint256 allocated,\\n      uint32 since\\n    );\\n\\n  function getRewardEntry(address holder) internal view returns (RewardBalance memory) {\\n    return _balances[holder];\\n  }\\n\\n  function internalSetRewardEntryCustom(address holder, uint32 custom) internal {\\n    _balances[holder].custom = custom;\\n  }\\n\\n  function doIncrementRewardBalance(address holder, uint256 amount)\\n    internal\\n    returns (\\n      uint256,\\n      uint32,\\n      AllocationMode\\n    )\\n  {\\n    RewardBalance memory entry = _balances[holder];\\n    amount += entry.rewardBase;\\n    require(amount <= type(uint192).max, 'balance is too high');\\n    return _doUpdateRewardBalance(holder, entry, uint192(amount));\\n  }\\n\\n  function doDecrementRewardBalance(\\n    address holder,\\n    uint256 amount,\\n    uint256 minBalance\\n  )\\n    internal\\n    returns (\\n      uint256,\\n      uint32,\\n      AllocationMode\\n    )\\n  {\\n    RewardBalance memory entry = _balances[holder];\\n    require(entry.rewardBase >= minBalance + amount, 'amount exceeds balance');\\n    unchecked {\\n      amount = entry.rewardBase - amount;\\n    }\\n    return _doUpdateRewardBalance(holder, entry, uint192(amount));\\n  }\\n\\n  function doUpdateRewardBalance(address holder, uint256 newBalance)\\n    internal\\n    returns (\\n      uint256 allocated,\\n      uint32 since,\\n      AllocationMode mode\\n    )\\n  {\\n    require(newBalance <= type(uint192).max, 'balance is too high');\\n    return _doUpdateRewardBalance(holder, _balances[holder], uint192(newBalance));\\n  }\\n\\n  function _doUpdateRewardBalance(\\n    address holder,\\n    RewardBalance memory entry,\\n    uint192 newBalance\\n  )\\n    private\\n    returns (\\n      uint256,\\n      uint32,\\n      AllocationMode mode\\n    )\\n  {\\n    if (entry.claimedAt == 0) {\\n      mode = AllocationMode.SetPull;\\n    } else {\\n      mode = AllocationMode.Push;\\n    }\\n\\n    uint32 currentTick = getCurrentTick();\\n    (uint256 adjRate, uint256 allocated, uint32 since) = internalCalcRateAndReward(\\n      entry,\\n      _accumRates[holder],\\n      currentTick\\n    );\\n\\n    _accumRates[holder] = adjRate;\\n    _balances[holder] = RewardBalance(newBalance, entry.custom, currentTick);\\n    return (allocated, since, mode);\\n  }\\n\\n  function doRemoveRewardBalance(address holder) internal returns (uint256 rewardBase) {\\n    rewardBase = _balances[holder].rewardBase;\\n    if (rewardBase == 0 && _balances[holder].claimedAt == 0) {\\n      return 0;\\n    }\\n    delete (_balances[holder]);\\n    return rewardBase;\\n  }\\n\\n  function doGetReward(address holder)\\n    internal\\n    returns (\\n      uint256,\\n      uint32,\\n      bool\\n    )\\n  {\\n    return doGetRewardAt(holder, getCurrentTick());\\n  }\\n\\n  function doGetRewardAt(address holder, uint32 currentTick)\\n    internal\\n    returns (\\n      uint256,\\n      uint32,\\n      bool\\n    )\\n  {\\n    RewardBalance memory balance = _balances[holder];\\n    if (balance.rewardBase == 0) {\\n      return (0, 0, false);\\n    }\\n\\n    (uint256 adjRate, uint256 allocated, uint32 since) = internalCalcRateAndReward(\\n      balance,\\n      _accumRates[holder],\\n      currentTick\\n    );\\n\\n    _accumRates[holder] = adjRate;\\n    _balances[holder].claimedAt = currentTick;\\n    return (allocated, since, true);\\n  }\\n\\n  function doCalcReward(address holder) internal view returns (uint256, uint32) {\\n    return doCalcRewardAt(holder, getCurrentTick());\\n  }\\n\\n  function doCalcRewardAt(address holder, uint32 currentTick) internal view returns (uint256, uint32) {\\n    if (_balances[holder].rewardBase == 0) {\\n      return (0, 0);\\n    }\\n\\n    (, uint256 allocated, uint32 since) = internalCalcRateAndReward(\\n      _balances[holder],\\n      _accumRates[holder],\\n      currentTick\\n    );\\n    return (allocated, since);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP excluding events to avoid linearization issues.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport './IERC20.sol';\\nimport './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/tokens/ERC20NoTransferBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../dependencies/openzeppelin/contracts/IERC20.sol';\\n\\nabstract contract ERC20NoTransferBase is IERC20 {\\n  function transfer(address, uint256) public pure override returns (bool) {\\n    notSupported();\\n    return false;\\n  }\\n\\n  function allowance(address, address) public pure override returns (uint256) {\\n    return 0;\\n  }\\n\\n  function approve(address, uint256) public pure override returns (bool) {\\n    notSupported();\\n    return false;\\n  }\\n\\n  function transferFrom(\\n    address,\\n    address,\\n    uint256\\n  ) public pure override returns (bool) {\\n    notSupported();\\n    return false;\\n  }\\n\\n  function notSupported() private pure {\\n    revert('NOT_SUPPORTED');\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDerivedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IDerivedToken {\\n  /**\\n   * @dev Returns the address of the underlying asset of this token (E.g. WETH for agWETH)\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUnderlyingBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IUnderlyingBalance {\\n  /// @dev Returns amount of underlying for the given address\\n  function balanceOfUnderlying(address account) external view returns (uint256);\\n}\\n\\ninterface ILockedUnderlyingBalance is IUnderlyingBalance {\\n  /// @dev Returns amount of underlying and a timestamp when the lock expires. Funds can be redeemed after the timestamp.\\n  function balanceOfUnderlyingAndExpiry(address account)\\n    external\\n    view\\n    returns (uint256 underlying, uint32 availableSince);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// solhint-disable no-inline-assembly, avoid-low-level-calls\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize, which returns 0 for contracts in\\n    // construction, since the code is only stored at the end of the\\n    // constructor execution.\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(account)\\n    }\\n    return size > 0;\\n  }\\n\\n  bytes32 private constant accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  function isExternallyOwned(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    uint256 size;\\n    assembly {\\n      codehash := extcodehash(account)\\n      size := extcodesize(account)\\n    }\\n    return codehash == accountHash && size == 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using {ReentrancyGuard}.\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data.\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, 'Address: low-level call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, 'Address: insufficient balance for call');\\n    require(isContract(target), 'Address: call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, 'Address: low-level static call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), 'Address: static call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, 'Address: low-level delegate call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), 'Address: delegate call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/tokens/IERC20Details.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IERC20Details {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"BaselinePercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"EmergencyPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmountAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmountTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"referral\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ProviderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ProviderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"RateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum AutolockMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"}],\"name\":\"RewardAutolockFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum AutolockMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"RewardAutolocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addRewardProvider\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"allowAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum AutolockMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"lockDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"param\",\"type\":\"uint224\"}],\"name\":\"applyAutolock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stop\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attachedToRewardController\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlyingAndExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"availableSince\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compensationRatio\",\"type\":\"uint256\"}],\"name\":\"calcCompensatedDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"startTS\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTS\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"since\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"current\",\"type\":\"uint32\"}],\"name\":\"calcDecayForReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"startTS\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTS\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"since\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"current\",\"type\":\"uint32\"}],\"name\":\"calcDecayTimeCompensation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"at\",\"type\":\"uint32\"}],\"name\":\"calcRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"since\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"minPct\",\"type\":\"uint16\"}],\"name\":\"claimRewardWithLimitFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"since\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"keepPull\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"lockDuration\",\"type\":\"uint32\"}],\"name\":\"convertLockedToUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"lockDuration\",\"type\":\"uint32\"}],\"name\":\"convertUnderlyingToLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"detachedFromRewardController\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaselinePercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMarketAccessController\",\"name\":\"ac\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IRewardController\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"baselinePercentage\",\"type\":\"uint16\"}],\"internalType\":\"struct IInitializableRewardPool.InitRewardPoolData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"initializeRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IMarketAccessController\",\"name\":\"remoteAcl\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IInitializableRewardToken.InitRewardTokenData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"initializeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMarketAccessController\",\"name\":\"remoteAcl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"initializeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializedRewardPoolWith\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IRewardController\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"baselinePercentage\",\"type\":\"uint16\"}],\"internalType\":\"struct IInitializableRewardPool.InitRewardPoolData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRedeemable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"referral\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"lockAdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"name\":\"lockExtend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"since\",\"type\":\"uint32\"}],\"name\":\"receiveBoostExcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"removeRewardProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"factor\",\"type\":\"uint16\"}],\"name\":\"setBaselinePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setBoostRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scanLimit\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseline\",\"type\":\"uint256\"}],\"name\":\"updateBaseline\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasBaseline\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"appliedRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"XAGFTokenV1","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}