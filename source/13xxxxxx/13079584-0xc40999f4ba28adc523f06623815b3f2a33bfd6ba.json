{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Volumes/Data/Projects/tristan/nafter/nafter.contracts/contracts/active/IERC1155TokenCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @title IERC1155 Non-Fungible Token Creator basic interface\\n */\\ninterface IERC1155TokenCreator {\\n    /**\\n     * @dev Gets the creator of the token\\n     * @param _tokenId uint256 ID of the token\\n     * @return address of the creator\\n     */\\n    function tokenCreator(uint256 _tokenId)\\n    external\\n    view\\n    returns (address payable);\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/tristan/nafter/nafter.contracts/contracts/active/IMarketplaceSettings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @title IMarketplaceSettings Settings governing a marketplace.\\n */\\ninterface IMarketplaceSettings {\\n    /////////////////////////////////////////////////////////////////////////\\n    // Marketplace Min and Max Values\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Get the max value to be used with the marketplace.\\n     * @return uint256 wei value.\\n     */\\n    function getMarketplaceMaxValue() external view returns (uint256);\\n\\n    /**\\n     * @dev Get the max value to be used with the marketplace.\\n     * @return uint256 wei value.\\n     */\\n    function getMarketplaceMinValue() external view returns (uint256);\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // Marketplace Fee\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Get the marketplace fee percentage.\\n     * @return uint8 wei fee.\\n     */\\n    function getMarketplaceFeePercentage() external view returns (uint8);\\n\\n    /**\\n     * @dev Utility function for calculating the marketplace fee for given amount of wei.\\n     * @param _amount uint256 wei amount.\\n     * @return uint256 wei fee.\\n     */\\n    function calculateMarketplaceFee(uint256 _amount)\\n    external\\n    view\\n    returns (uint256);\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // Primary Sale Fee\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Get the primary sale fee percentage for a specific ERC1155 contract.\\n     * @return uint8 wei primary sale fee.\\n     */\\n    function getERC1155ContractPrimarySaleFeePercentage()\\n    external\\n    view\\n    returns (uint8);\\n\\n    /**\\n     * @dev Utility function for calculating the primary sale fee for given amount of wei\\n     * @param _amount uint256 wei amount.\\n     * @return uint256 wei fee.\\n     */\\n    function calculatePrimarySaleFee(uint256 _amount)\\n    external\\n    view\\n    returns (uint256);\\n\\n    /**\\n     * @dev Check whether the ERC1155 token has sold at least once.\\n     * @param _tokenId uint256 token ID.\\n     * @return bool of whether the token has sold.\\n     */\\n    function hasTokenSold(uint256 _tokenId)\\n    external\\n    view\\n    returns (bool);\\n\\n    /**\\n     * @dev Mark a token as sold.\\n\\n     * Requirements:\\n     *\\n     * - `_contractAddress` cannot be the zero address.\\n\\n     * @param _tokenId uint256 token ID.\\n     * @param _hasSold bool of whether the token should be marked sold or not.\\n     */\\n    function markERC1155Token(\\n        uint256 _tokenId,\\n        bool _hasSold\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/tristan/nafter/nafter.contracts/contracts/active/INafter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n\\n/**\\n * @dev Interface for interacting with the Nafter contract that holds Nafter beta tokens.\\n */\\ninterface INafter {\\n\\n    /**\\n     * @dev Gets the creator of the token\\n     * @param _tokenId uint256 ID of the token\\n     * @return address of the creator\\n     */\\n    function creatorOfToken(uint256 _tokenId)\\n    external\\n    view\\n    returns (address payable);\\n\\n    /**\\n     * @dev Gets the Service Fee\\n     * @param _tokenId uint256 ID of the token\\n     * @return address of the creator\\n     */\\n    function getServiceFee(uint256 _tokenId)\\n    external\\n    view\\n    returns (uint8);\\n\\n    /**\\n     * @dev Gets the price type\\n     * @param _tokenId uint256 ID of the token\\n     * @param _owner address of the token owner\\n     * @return get the price type\\n     */\\n    function getPriceType(uint256 _tokenId, address _owner)\\n    external\\n    view\\n    returns (uint8);\\n\\n    /**\\n     * @dev update price only from auction.\\n     * @param _price price of the token\\n     * @param _tokenId uint256 id of the token.\\n     * @param _owner address of the token owner\\n     */\\n    function setPrice(uint256 _price, uint256 _tokenId, address _owner) external;\\n\\n    /**\\n     * @dev update bids only from auction.\\n     * @param _bid bid Amount\\n     * @param _bidder bidder address\\n     * @param _tokenId uint256 id of the token.\\n     * @param _owner address of the token owner\\n     */\\n    function setBid(uint256 _bid, address _bidder, uint256 _tokenId, address _owner) external;\\n\\n    /**\\n     * @dev remove token from sale\\n     * @param _tokenId uint256 id of the token.\\n     * @param _owner owner of the token\\n     */\\n    function removeFromSale(uint256 _tokenId, address _owner) external;\\n\\n    /**\\n     * @dev get tokenIds length\\n     */\\n    function getTokenIdsLength() external view returns (uint256);\\n\\n    /**\\n     * @dev get token Id\\n     * @param _index uint256 index\\n     */\\n    function getTokenId(uint256 _index) external view returns (uint256);\\n\\n    /**\\n     * @dev Gets the owners\\n     * @param _tokenId uint256 ID of the token\\n     */\\n    function getOwners(uint256 _tokenId)\\n    external\\n    view\\n    returns (address[] memory owners);\\n\\n    /**\\n     * @dev Gets the is for sale\\n     * @param _tokenId uint256 ID of the token\\n     * @param _owner address of the token owner\\n     */\\n    function getIsForSale(uint256 _tokenId, address _owner) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/tristan/nafter/nafter.contracts/contracts/active/INafterMarketAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface INafterMarketAuction {\\n    /**\\n     * @dev Set the token for sale. The owner of the token must be the sender and have the marketplace approved.\\n     * @param _tokenId uint256 ID of the token\\n     * @param _amount uint256 wei value that the item is for sale\\n     */\\n    function setSalePrice(\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        address _owner\\n    ) external;\\n\\n    /**\\n     * @dev set\\n     * @param _bidAmount uint256 value in wei to bid.\\n     * @param _startTime end time of bid\\n     * @param _endTime end time of bid\\n     * @param _owner address of the token owner\\n     * @param _tokenId uint256 ID of the token\\n     */\\n    function setInitialBidPriceWithRange(\\n        uint256 _bidAmount,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        address _owner,\\n        uint256 _tokenId\\n    ) external;\\n\\n    /**\\n     * @dev has active bid\\n     * @param _tokenId uint256 ID of the token\\n     * @param _owner address of the token owner\\n     */\\n    function hasTokenActiveBid(uint256 _tokenId, address _owner) external view returns (bool);\\n\\n}\"\r\n    },\r\n    \"/Volumes/Data/Projects/tristan/nafter/nafter.contracts/contracts/active/INafterRoyaltyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC1155TokenCreator.sol\\\";\\n\\n/**\\n * @title IERC1155CreatorRoyalty Token level royalty interface.\\n */\\ninterface INafterRoyaltyRegistry is IERC1155TokenCreator {\\n    /**\\n     * @dev Get the royalty fee percentage for a specific ERC1155 contract.\\n     * @param _tokenId uint256 token ID.\\n     * @return uint8 wei royalty fee.\\n     */\\n    function getTokenRoyaltyPercentage(\\n        uint256 _tokenId\\n    ) external view returns (uint8);\\n\\n    /**\\n     * @dev Utililty function to calculate the royalty fee for a token.\\n     * @param _tokenId uint256 token ID.\\n     * @param _amount uint256 wei amount.\\n     * @return uint256 wei fee.\\n     */\\n    function calculateRoyaltyFee(\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets the royalty percentage set for an Nafter token\\n     * Requirements:\\n\\n     * - `_percentage` must be <= 100.\\n     * - only the owner of this contract or the creator can call this method.\\n     * @param _tokenId uint256 token ID.\\n     * @param _percentage uint8 wei royalty fee.\\n     */\\n    function setPercentageForTokenRoyalty(\\n        uint256 _tokenId,\\n        uint8 _percentage\\n    ) external returns (uint8);\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/tristan/nafter/nafter.contracts/contracts/active/ISendValueProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface ISendValueProxy {\\n    function sendValue(address payable _to) external payable;\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/tristan/nafter/nafter.contracts/contracts/active/MaybeSendValue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./SendValueProxy.sol\\\";\\n\\n/**\\n * @dev Contract with a ISendValueProxy that will catch reverts when attempting to transfer funds.\\n */\\n\\ncontract MaybeSendValue {\\n    SendValueProxy proxy;\\n\\n    constructor() internal {\\n        proxy = new SendValueProxy();\\n    }\\n\\n    /**\\n     * @dev Maybe send some wei to the address via a proxy. Returns true on success and false if transfer fails.\\n     * @param _to address to send some value to.\\n     * @param _value uint256 amount to send.\\n     */\\n    function maybeSendValue(address payable _to, uint256 _value)\\n    internal\\n    returns (bool)\\n    {\\n\\n        _to.transfer(_value);\\n\\n        return true;\\n    }\\n\\n}\"\r\n    },\r\n    \"/Volumes/Data/Projects/tristan/nafter/nafter.contracts/contracts/active/NafterMarketAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./INafterMarketAuction.sol\\\";\\nimport \\\"./INafterRoyaltyRegistry.sol\\\";\\nimport \\\"./IMarketplaceSettings.sol\\\";\\nimport \\\"./Payments.sol\\\";\\nimport \\\"./INafter.sol\\\";\\n\\ncontract NafterMarketAuction is INafterMarketAuction, Ownable, Payments {\\n    using SafeMath for uint256;\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // Structs\\n    /////////////////////////////////////////////////////////////////////////\\n\\n    // The active bid for a given token, contains the bidder, the marketplace fee at the time of the bid, and the amount of wei placed on the token\\n    struct ActiveBid {\\n        address payable bidder;\\n        uint8 marketplaceFee;\\n        uint256 amount;\\n    }\\n\\n    struct ActiveBidRange {\\n        uint256 startTime;\\n        uint256 endTime;\\n    }\\n\\n    // The sale price for a given token containing the seller and the amount of wei to be sold for\\n    struct SalePrice {\\n        address payable seller;\\n        uint256 amount;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // State Variables\\n    /////////////////////////////////////////////////////////////////////////\\n\\n    // Marketplace Settings Interface\\n    IMarketplaceSettings public iMarketplaceSettings;\\n\\n    // Creator Royalty Interface\\n    INafterRoyaltyRegistry public iERC1155CreatorRoyalty;\\n\\n    // Nafter contract\\n    INafter public nafter;\\n    //erc1155 contract\\n    IERC1155 public erc1155;\\n\\n    // Mapping from ERC1155 contract to mapping of tokenId to sale price.\\n    mapping(uint256 => mapping(address => SalePrice)) private salePrice;\\n    // Mapping of ERC1155 contract to mapping of token ID to the current bid amount.\\n    mapping(uint256 => mapping(address => ActiveBid)) private activeBid;\\n    mapping(uint256 => mapping(address => ActiveBidRange)) private activeBidRange;\\n\\n    mapping(address => uint256) public bidBalance;\\n    // A minimum increase in bid amount when out bidding someone.\\n    uint8 public minimumBidIncreasePercentage; // 10 = 10%\\n\\n    /////////////////////////////////////////////////////////////////////////////\\n    // Events\\n    /////////////////////////////////////////////////////////////////////////////\\n    event Sold(\\n        address indexed _buyer,\\n        address indexed _seller,\\n        uint256 _amount,\\n        uint256 _tokenId\\n    );\\n\\n    event SetSalePrice(\\n        uint256 _amount,\\n        uint256 _tokenId\\n    );\\n\\n    event Bid(\\n        address indexed _bidder,\\n        uint256 _amount,\\n        uint256 _tokenId\\n    );\\n\\n    event SetInitialBidPriceWithRange(\\n        uint256 _bidAmount,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        address _owner,\\n        uint256 _tokenId\\n    );\\n    event AcceptBid(\\n        address indexed _bidder,\\n        address indexed _seller,\\n        uint256 _amount,\\n        uint256 _tokenId\\n    );\\n\\n    event CancelBid(\\n        address indexed _bidder,\\n        uint256 _amount,\\n        uint256 _tokenId\\n    );\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // Constructor\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Initializes the contract setting the market settings and creator royalty interfaces.\\n     * @param _iMarketSettings address to set as iMarketplaceSettings.\\n     * @param _iERC1155CreatorRoyalty address to set as iERC1155CreatorRoyalty.\\n     * @param _nafter address of the nafter contract\\n     */\\n    constructor(address _iMarketSettings, address _iERC1155CreatorRoyalty, address _nafter)\\n    public\\n    {\\n        require(\\n            _iMarketSettings != address(0),\\n            \\\"constructor::Cannot have null address for _iMarketSettings\\\"\\n        );\\n\\n        require(\\n            _iERC1155CreatorRoyalty != address(0),\\n            \\\"constructor::Cannot have null address for _iERC1155CreatorRoyalty\\\"\\n        );\\n\\n        require(\\n            _nafter != address(0),\\n            \\\"constructor::Cannot have null address for _nafter\\\"\\n        );\\n\\n        // Set iMarketSettings\\n        iMarketplaceSettings = IMarketplaceSettings(_iMarketSettings);\\n\\n        // Set iERC1155CreatorRoyalty\\n        iERC1155CreatorRoyalty = INafterRoyaltyRegistry(_iERC1155CreatorRoyalty);\\n\\n        nafter = INafter(_nafter);\\n        erc1155 = IERC1155(_nafter);\\n\\n        minimumBidIncreasePercentage = 10;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // Get owner of the token\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev get owner of the token\\n     * @param _tokenId uint256 ID of the token\\n     * @param _owner address of the token owner\\n     */\\n    function isOwnerOfTheToken(uint256 _tokenId, address _owner) public view returns (bool) {\\n        uint256 balance = erc1155.balanceOf(_owner, _tokenId);\\n        return balance > 0;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // Get token sale price against token id\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev get the token sale price against token id\\n     * @param _tokenId uint256 ID of the token\\n     * @param _owner address of the token owner\\n     */\\n    function getSalePrice(uint256 _tokenId, address _owner) external view returns (address payable, uint256){\\n        SalePrice memory sp = salePrice[_tokenId][_owner];\\n        return (sp.seller, sp.amount);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // get active bid against tokenId\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev get active bid against token Id\\n     * @param _tokenId uint256 ID of the token\\n     * @param _owner address of the token owner\\n     */\\n    function getActiveBid(uint256 _tokenId, address _owner) external view returns (address payable, uint8, uint256){\\n        ActiveBid memory ab = activeBid[_tokenId][_owner];\\n        return (ab.bidder, ab.marketplaceFee, ab.amount);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // has active bid\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev has active bid\\n     * @param _tokenId uint256 ID of the token\\n     * @param _owner address of the token owner\\n     */\\n    function hasTokenActiveBid(uint256 _tokenId, address _owner) external view override returns (bool){\\n        ActiveBid memory ab = activeBid[_tokenId][_owner];\\n        if (ab.bidder == _owner || ab.bidder == address(0))\\n            return false;\\n\\n        return true;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // get bid balance of user\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev get bid balance of user\\n     * @param _user address of the user\\n     */\\n    function getBidBalance(address _user) external view returns (uint256){\\n        return bidBalance[_user];\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // get active bid range against token id\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev get active bid range against token id\\n     * @param _tokenId uint256 ID of the token\\n     */\\n    function getActiveBidRange(uint256 _tokenId, address _owner) external view returns (uint256, uint256){\\n        ActiveBidRange memory abr = activeBidRange[_tokenId][_owner];\\n        return (abr.startTime, abr.endTime);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // withdrawMarketFunds\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Admin function to withdraw market funds\\n     * Rules:\\n     * - only owner\\n     */\\n    function withdrawMarketFunds() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        _makePayable(owner()).transfer(balance);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // setIMarketplaceSettings\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Admin function to set the marketplace settings.\\n     * Rules:\\n     * - only owner\\n     * - _address != address(0)\\n     * @param _address address of the IMarketplaceSettings.\\n     */\\n    function setMarketplaceSettings(address _address) public onlyOwner {\\n        require(\\n            _address != address(0),\\n            \\\"setMarketplaceSettings::Cannot have null address for _iMarketSettings\\\"\\n        );\\n\\n        iMarketplaceSettings = IMarketplaceSettings(_address);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // seNafter\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Admin function to set the marketplace settings.\\n     * Rules:\\n     * - only owner\\n     * - _address != address(0)\\n     * @param _address address of the IMarketplaceSettings.\\n     */\\n    function setNafter(address _address) public onlyOwner {\\n        require(\\n            _address != address(0),\\n            \\\"setNafter::Cannot have null address for _INafter\\\"\\n        );\\n\\n        nafter = INafter(_address);\\n        erc1155 = IERC1155(_address);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // setIERC1155CreatorRoyalty\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Admin function to set the IERC1155CreatorRoyalty.\\n     * Rules:\\n     * - only owner\\n     * - _address != address(0)\\n     * @param _address address of the IERC1155CreatorRoyalty.\\n     */\\n    function setIERC1155CreatorRoyalty(address _address) public onlyOwner {\\n        require(\\n            _address != address(0),\\n            \\\"setIERC1155CreatorRoyalty::Cannot have null address for _iERC1155CreatorRoyalty\\\"\\n        );\\n\\n        iERC1155CreatorRoyalty = INafterRoyaltyRegistry(_address);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // setMinimumBidIncreasePercentage\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Admin function to set the minimum bid increase percentage.\\n     * Rules:\\n     * - only owner\\n     * @param _percentage uint8 to set as the new percentage.\\n     */\\n    function setMinimumBidIncreasePercentage(uint8 _percentage)\\n    public\\n    onlyOwner\\n    {\\n        minimumBidIncreasePercentage = _percentage;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // Modifiers (as functions)\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Checks that the token owner is approved for the ERC1155Market\\n     * @param _owner address of the token owner\\n     */\\n    function ownerMustHaveMarketplaceApproved(\\n        address _owner\\n    ) internal view {\\n        require(\\n            erc1155.isApprovedForAll(_owner, address(this)),\\n            \\\"owner must have approved contract\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Checks that the token is owned by the sender\\n     * @param _tokenId uint256 ID of the token\\n     */\\n    function senderMustBeTokenOwner(uint256 _tokenId)\\n    internal\\n    view\\n    {\\n        bool isOwner = isOwnerOfTheToken(_tokenId, msg.sender);\\n\\n        require(isOwner || msg.sender == address(nafter), 'sender must be the token owner');\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // setSalePrice\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Set the token for sale. The owner of the token must be the sender and have the marketplace approved.\\n     * @param _tokenId uint256 ID of the token\\n     * @param _amount uint256 wei value that the item is for sale\\n     * @param _owner address of the token owner\\n     */\\n    function setSalePrice(\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        address _owner\\n    ) external override {\\n        // The owner of the token must have the marketplace approved\\n        ownerMustHaveMarketplaceApproved(_owner);\\n\\n        // The sender must be the token owner\\n        senderMustBeTokenOwner(_tokenId);\\n\\n        if (_amount == 0) {\\n            // Set not for sale and exit\\n            _resetTokenPrice(_tokenId, _owner);\\n            emit SetSalePrice(_amount, _tokenId);\\n            return;\\n        }\\n\\n        salePrice[_tokenId][_owner] = SalePrice(payable(_owner), _amount);\\n        nafter.setPrice(_amount, _tokenId, _owner);\\n        // nafter.putOnSale(0, _tokenId, _owner);\\n        // nafter.setPriceType(0, _tokenId);\\n        // nafter.setIsForSale(true, _tokenId, _owner);\\n        emit SetSalePrice(_amount, _tokenId);\\n    }\\n\\n    /**\\n     * @dev restore data from old contract, only call by owner\\n     * @param _oldAddress address of old contract.\\n     * @param _oldNafterAddress get the token ids from the old nafter contract.\\n     * @param _startIndex start index of array\\n     * @param _endIndex end index of array\\n     */\\n    function restore(address _oldAddress, address _oldNafterAddress, uint256 _startIndex, uint256 _endIndex) external onlyOwner {\\n        NafterMarketAuction oldContract = NafterMarketAuction(_oldAddress);\\n        INafter oldNafterContract = INafter(_oldNafterAddress);\\n\\n        uint256 length = oldNafterContract.getTokenIdsLength();\\n        require(_startIndex < length, \\\"wrong start index\\\");\\n        require(_endIndex <= length, \\\"wrong end index\\\");\\n\\n        for (uint i = _startIndex; i < _endIndex; i++) {\\n            uint256 tokenId = oldNafterContract.getTokenId(i);\\n\\n            address[] memory owners = oldNafterContract.getOwners(tokenId);\\n            for (uint j = 0; j < owners.length; j++) {\\n                address owner = owners[j];\\n                (address payable sender, uint256 amount) = oldContract.getSalePrice(tokenId, owner);\\n                salePrice[tokenId][owner] = SalePrice(sender, amount);\\n\\n                (address payable bidder, uint8 marketplaceFee, uint256 bidAmount) = oldContract.getActiveBid(tokenId, owner);\\n                activeBid[tokenId][owner] = ActiveBid(bidder, marketplaceFee, bidAmount);\\n                uint256 serviceFee = bidAmount.mul(marketplaceFee).div(100);\\n                bidBalance[bidder] = bidBalance[bidder].add(bidAmount.add(serviceFee));\\n\\n\\n                (uint256 startTime, uint256 endTime) = oldContract.getActiveBidRange(tokenId, owner);\\n                activeBidRange[tokenId][owner] = ActiveBidRange(startTime, endTime);\\n            }\\n        }\\n        setMinimumBidIncreasePercentage(oldContract.minimumBidIncreasePercentage());\\n    }\\n    /////////////////////////////////////////////////////////////////////////\\n    // safeBuy\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Purchase the token with the expected amount. The current token owner must have the marketplace approved.\\n     * @param _tokenId uint256 ID of the token\\n     * @param _amount uint256 wei amount expecting to purchase the token for.\\n     * @param _owner address of the token owner\\n     */\\n    function safeBuy(\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        address _owner\\n    ) external payable {\\n        // Make sure the tokenPrice is the expected amount\\n        require(\\n            salePrice[_tokenId][_owner].amount == _amount,\\n            \\\"safeBuy::Purchase amount must equal expected amount\\\"\\n        );\\n        buy(_tokenId, _owner);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // buy\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Purchases the token if it is for sale.\\n     * @param _tokenId uint256 ID of the token.\\n     * @param _owner address of the token owner\\n     */\\n    function buy(uint256 _tokenId, address _owner) public payable {\\n        require(nafter.getIsForSale(_tokenId, _owner) == true, \\\"bid::not for sale\\\");\\n        // The owner of the token must have the marketplace approved\\n        ownerMustHaveMarketplaceApproved(_owner);\\n\\n        // Check that the person who set the price still owns the token.\\n        require(\\n            _priceSetterStillOwnsTheToken(_tokenId, _owner),\\n            \\\"buy::Current token owner must be the person to have the latest price.\\\"\\n        );\\n\\n        uint8 priceType = nafter.getPriceType(_tokenId, _owner);\\n        require(priceType == 0, \\\"buy is only allowed for fixed sale\\\");\\n\\n        SalePrice memory sp = salePrice[_tokenId][_owner];\\n\\n        // Check that token is for sale.\\n        require(sp.amount > 0, \\\"buy::Tokens priced at 0 are not for sale.\\\");\\n\\n        // Check that enough ether was sent.\\n        require(\\n            tokenPriceFeeIncluded(_tokenId, _owner) == msg.value,\\n            \\\"buy::Must purchase the token for the correct price\\\"\\n        );\\n\\n        // Wipe the token price.\\n        _resetTokenPrice(_tokenId, _owner);\\n\\n        // Transfer token.\\n        erc1155.safeTransferFrom(_owner, msg.sender, _tokenId, 1, '');\\n\\n        // if the buyer had an existing bid, return it\\n        if (_addressHasBidOnToken(msg.sender, _tokenId, _owner)) {\\n            _refundBid(_tokenId, _owner);\\n        }\\n\\n        // Payout all parties.\\n        address payable marketOwner = _makePayable(owner());\\n        Payments.payout(\\n            sp.amount,\\n            !iMarketplaceSettings.hasTokenSold(_tokenId),\\n            nafter.getServiceFee(_tokenId),\\n            iERC1155CreatorRoyalty.getTokenRoyaltyPercentage(\\n                _tokenId\\n            ),\\n            iMarketplaceSettings.getERC1155ContractPrimarySaleFeePercentage(),\\n            _makePayable(_owner),\\n            marketOwner,\\n            iERC1155CreatorRoyalty.tokenCreator(_tokenId),\\n            marketOwner\\n        );\\n\\n        // Set token as sold\\n        iMarketplaceSettings.markERC1155Token(_tokenId, true);\\n\\n        //remove from sale after buy\\n        nafter.removeFromSale(_tokenId, _owner);\\n\\n        emit Sold(msg.sender, _owner, sp.amount, _tokenId);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // tokenPrice\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Gets the sale price of the token\\n     * @param _tokenId uint256 ID of the token\\n     * @param _owner address of the token owner\\n     * @return uint256 sale price of the token\\n     */\\n    function tokenPrice(uint256 _tokenId, address _owner)\\n    external\\n    view\\n    returns (uint256)\\n    {\\n        // The owner of the token must have the marketplace approved\\n        ownerMustHaveMarketplaceApproved(_owner);\\n        // TODO: Make sure to write test to verify that this returns 0 when it fails\\n\\n        if (_priceSetterStillOwnsTheToken(_tokenId, _owner)) {\\n            return salePrice[_tokenId][_owner].amount;\\n        }\\n        return 0;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // tokenPriceFeeIncluded\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Gets the sale price of the token including the marketplace fee.\\n     * @param _tokenId uint256 ID of the token\\n     * @param _owner address of the token owner\\n     * @return uint256 sale price of the token including the fee.\\n     */\\n    function tokenPriceFeeIncluded(uint256 _tokenId, address _owner)\\n    public\\n    view\\n    returns (uint256)\\n    {\\n        // The owner of the token must have the marketplace approved\\n        ownerMustHaveMarketplaceApproved(_owner);\\n        // TODO: Make sure to write test to verify that this returns 0 when it fails\\n\\n        if (_priceSetterStillOwnsTheToken(_tokenId, _owner)) {\\n            return\\n            salePrice[_tokenId][_owner].amount.add(\\n                salePrice[_tokenId][_owner].amount.mul(\\n                    nafter.getServiceFee(_tokenId)\\n                ).div(100)\\n            );\\n        }\\n        return 0;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // setInitialBidPriceWithRange\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev set\\n     * @param _bidAmount uint256 value in wei to bid.\\n     * @param _startTime end time of bid\\n     * @param _endTime end time of bid\\n     * @param _owner address of the token owner\\n     * @param _tokenId uint256 ID of the token\\n     */\\n    function setInitialBidPriceWithRange(uint256 _bidAmount, uint256 _startTime, uint256 _endTime, address _owner, uint256 _tokenId) external override {\\n        require(_bidAmount > 0, \\\"setInitialBidPriceWithRange::Cannot bid 0 Wei.\\\");\\n        senderMustBeTokenOwner(_tokenId);\\n        activeBid[_tokenId][_owner] = ActiveBid(\\n            payable(_owner),\\n            nafter.getServiceFee(_tokenId),\\n            _bidAmount\\n        );\\n        _setBidRange(_startTime, _endTime, _tokenId, _owner);\\n\\n        emit SetInitialBidPriceWithRange(_bidAmount, _startTime, _endTime, _owner, _tokenId);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // bid\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Bids on the token, replacing the bid if the bid is higher than the current bid. You cannot bid on a token you already own.\\n     * @param _newBidAmount uint256 value in wei to bid.\\n     * @param _tokenId uint256 ID of the token\\n     * @param _owner address of the token owner\\n     */\\n    function bid(\\n        uint256 _newBidAmount,\\n        uint256 _tokenId,\\n        address _owner\\n    ) external payable {\\n        // Check that bid is greater than 0.\\n        require(_newBidAmount > 0, \\\"bid::Cannot bid 0 Wei.\\\");\\n\\n        require(nafter.getIsForSale(_tokenId, _owner) == true, \\\"bid::not for sale\\\");\\n\\n        // Check that bid is higher than previous bid\\n        uint256 currentBidAmount =\\n        activeBid[_tokenId][_owner].amount;\\n        require(\\n            _newBidAmount > currentBidAmount &&\\n            _newBidAmount >=\\n            currentBidAmount.add(\\n                currentBidAmount.mul(minimumBidIncreasePercentage).div(100)\\n            ),\\n            \\\"bid::Must place higher bid than existing bid + minimum percentage.\\\"\\n        );\\n\\n        // Check that enough ether was sent.\\n        uint256 requiredCost =\\n        _newBidAmount.add(\\n            _newBidAmount.mul(\\n                nafter.getServiceFee(_tokenId)\\n            ).div(100)\\n        );\\n        require(\\n            requiredCost <= msg.value,\\n            \\\"bid::Must purchase the token for the correct price.\\\"\\n        );\\n\\n        //Check bid range\\n        ActiveBidRange memory range = activeBidRange[_tokenId][_owner];\\n        uint8 priceType = nafter.getPriceType(_tokenId, _owner);\\n\\n        require(priceType == 1 || priceType == 2, \\\"bid is not valid for fixed sale\\\");\\n        if (priceType == 1)\\n            require(range.startTime < block.timestamp && range.endTime > block.timestamp, \\\"bid::can't place bid'\\\");\\n\\n        // Check that bidder is not owner.\\n        require(_owner != msg.sender, \\\"bid::Bidder cannot be owner.\\\");\\n\\n        // Refund previous bidder.\\n        _refundBid(_tokenId, _owner);\\n\\n        // Set the new bid.\\n        _setBid(_newBidAmount, msg.sender, _tokenId, _owner);\\n        nafter.setBid(_newBidAmount, msg.sender, _tokenId, _owner);\\n        emit Bid(msg.sender, _newBidAmount, _tokenId);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // safeAcceptBid\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Accept the bid on the token with the expected bid amount.\\n     * @param _tokenId uint256 ID of the token\\n     * @param _amount uint256 wei amount of the bid\\n     * @param _owner address of the token owner\\n     */\\n    function safeAcceptBid(\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        address _owner\\n    ) external {\\n        // Make sure accepting bid is the expected amount\\n        require(\\n            activeBid[_tokenId][_owner].amount == _amount,\\n            \\\"safeAcceptBid::Bid amount must equal expected amount\\\"\\n        );\\n        acceptBid(_tokenId, _owner);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // acceptBid\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Accept the bid on the token.\\n     * @param _tokenId uint256 ID of the token\\n     * @param _owner address of the token owner\\n     */\\n    function acceptBid(uint256 _tokenId, address _owner) public {\\n        // The sender must be the token owner\\n        senderMustBeTokenOwner(_tokenId);\\n\\n        // The owner of the token must have the marketplace approved\\n        ownerMustHaveMarketplaceApproved(_owner);\\n\\n\\n        // Check that a bid exists.\\n        require(\\n            _tokenHasBid(_tokenId, _owner),\\n            \\\"acceptBid::Cannot accept a bid when there is none.\\\"\\n        );\\n\\n        // Get current bid on token\\n\\n        ActiveBid memory currentBid =\\n        activeBid[_tokenId][_owner];\\n\\n        // Wipe the token price and bid.\\n        _resetTokenPrice(_tokenId, _owner);\\n        _resetBid(_tokenId, _owner);\\n\\n        // Transfer token.\\n        erc1155.safeTransferFrom(msg.sender, currentBid.bidder, _tokenId, 1, '');\\n\\n        // Payout all parties.\\n        address payable marketOwner = _makePayable(owner());\\n        Payments.payout(\\n            currentBid.amount,\\n            !iMarketplaceSettings.hasTokenSold(_tokenId),\\n            nafter.getServiceFee(_tokenId),\\n            iERC1155CreatorRoyalty.getTokenRoyaltyPercentage(\\n                _tokenId\\n            ),\\n            iMarketplaceSettings.getERC1155ContractPrimarySaleFeePercentage(),\\n            msg.sender,\\n            marketOwner,\\n            iERC1155CreatorRoyalty.tokenCreator(_tokenId),\\n            marketOwner\\n        );\\n\\n        iMarketplaceSettings.markERC1155Token(_tokenId, true);\\n        uint256 serviceFee = currentBid.amount.mul(currentBid.marketplaceFee).div(100);\\n        bidBalance[currentBid.bidder] = bidBalance[currentBid.bidder].sub(currentBid.amount.add(serviceFee));\\n\\n        //remove from sale after accepting the bid\\n        nafter.removeFromSale(_tokenId, _owner);\\n        emit AcceptBid(\\n            currentBid.bidder,\\n            msg.sender,\\n            currentBid.amount,\\n            _tokenId\\n        );\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // cancelBid\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Cancel the bid on the token.\\n     * @param _tokenId uint256 ID of the token.\\n     * @param _owner address of the token owner\\n     */\\n    function cancelBid(uint256 _tokenId, address _owner) external {\\n        // Check that sender has a current bid.\\n        require(\\n            _addressHasBidOnToken(msg.sender, _tokenId, _owner),\\n            \\\"cancelBid::Cannot cancel a bid if sender hasn't made one.\\\"\\n        );\\n\\n        // Refund the bidder.\\n        _refundBid(_tokenId, _owner);\\n\\n        emit CancelBid(\\n            msg.sender,\\n            activeBid[_tokenId][_owner].amount,\\n            _tokenId\\n        );\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // currentBidDetailsOfToken\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Function to get current bid and bidder of a token.\\n     * @param _tokenId uin256 id of the token.\\n     * @param _owner address of the token owner\\n     */\\n    function currentBidDetailsOfToken(uint256 _tokenId, address _owner)\\n    public\\n    view\\n    returns (uint256, address)\\n    {\\n        return (\\n        activeBid[_tokenId][_owner].amount,\\n        activeBid[_tokenId][_owner].bidder\\n        );\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // _priceSetterStillOwnsTheToken\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Checks that the token is owned by the same person who set the sale price.\\n     * @param _tokenId uint256 id of the.\\n     * @param _owner address of the token owner\\n     */\\n    function _priceSetterStillOwnsTheToken(\\n        uint256 _tokenId,\\n        address _owner\\n    ) internal view returns (bool) {\\n\\n        return\\n        _owner ==\\n        salePrice[_tokenId][_owner].seller;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // _resetTokenPrice\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Internal function to set token price to 0 for a given contract.\\n     * @param _tokenId uin256 id of the token.\\n     * @param _owner address of the token owner\\n     */\\n    function _resetTokenPrice(uint256 _tokenId, address _owner)\\n    internal\\n    {\\n        salePrice[_tokenId][_owner] = SalePrice(address(0), 0);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // _addressHasBidOnToken\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Internal function see if the given address has an existing bid on a token.\\n     * @param _bidder address that may have a current bid.\\n     * @param _tokenId uin256 id of the token.\\n     * @param _owner address of the token owner\\n     */\\n    function _addressHasBidOnToken(\\n        address _bidder,\\n        uint256 _tokenId,\\n        address _owner)\\n    internal view returns (bool) {\\n        return activeBid[_tokenId][_owner].bidder == _bidder;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // _tokenHasBid\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Internal function see if the token has an existing bid.\\n     * @param _tokenId uin256 id of the token.\\n     * @param _owner address of the token owner\\n     */\\n    function _tokenHasBid(\\n        uint256 _tokenId,\\n        address _owner)\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        return activeBid[_tokenId][_owner].bidder != address(0);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // _refundBid\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Internal function to return an existing bid on a token to the\\n     *      bidder and reset bid.\\n     * @param _tokenId uin256 id of the token.\\n     * @param _owner address of the token owner\\n     */\\n    function _refundBid(uint256 _tokenId, address _owner) internal {\\n        ActiveBid memory currentBid =\\n        activeBid[_tokenId][_owner];\\n        if (currentBid.bidder == address(0)) {\\n            return;\\n        }\\n        //current bidder should not be owner\\n        if (bidBalance[currentBid.bidder] > 0 && currentBid.bidder != _owner)\\n        {\\n            Payments.refund(\\n                currentBid.marketplaceFee,\\n                currentBid.bidder,\\n                currentBid.amount\\n            );\\n            //subtract bid balance\\n            uint256 serviceFee = currentBid.amount.mul(currentBid.marketplaceFee).div(100);\\n\\n            bidBalance[currentBid.bidder] = bidBalance[currentBid.bidder].sub(currentBid.amount.add(serviceFee));\\n        }\\n        _resetBid(_tokenId, _owner);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // _resetBid\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Internal function to reset bid by setting bidder and bid to 0.\\n     * @param _tokenId uin256 id of the token.\\n     * @param _owner address of the token owner\\n     */\\n    function _resetBid(uint256 _tokenId, address _owner) internal {\\n        activeBid[_tokenId][_owner] = ActiveBid(\\n            address(0),\\n            0,\\n            0\\n        );\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // _setBid\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Internal function to set a bid.\\n     * @param _amount uint256 value in wei to bid. Does not include marketplace fee.\\n     * @param _bidder address of the bidder.\\n     * @param _tokenId uin256 id of the token.\\n     * @param _owner address of the token owner\\n     */\\n    function _setBid(\\n        uint256 _amount,\\n        address payable _bidder,\\n        uint256 _tokenId,\\n        address _owner\\n    ) internal {\\n        // Check bidder not 0 address.\\n        require(_bidder != address(0), \\\"Bidder cannot be 0 address.\\\");\\n\\n        // Set bid.\\n        activeBid[_tokenId][_owner] = ActiveBid(\\n            _bidder,\\n            nafter.getServiceFee(_tokenId),\\n            _amount\\n        );\\n        //add bid balance\\n        uint256 serviceFee = _amount.mul(nafter.getServiceFee(_tokenId)).div(100);\\n        bidBalance[_bidder] = bidBalance[_bidder].add(_amount.add(serviceFee));\\n\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // _setBidRange\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Internal function to set a bid range.\\n     * @param _startTime start time UTC.\\n     * @param _endTime end Time range.\\n     * @param _tokenId uin256 id of the token.\\n     */\\n    function _setBidRange(\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        uint256 _tokenId,\\n        address _owner\\n    ) internal {\\n        activeBidRange[_tokenId][_owner] = ActiveBidRange(_startTime, _endTime);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // _makePayable\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Internal function to set a bid.\\n     * @param _address non-payable address\\n     * @return payable address\\n     */\\n    function _makePayable(address _address)\\n    internal\\n    pure\\n    returns (address payable)\\n    {\\n        return address(uint160(_address));\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"/Volumes/Data/Projects/tristan/nafter/nafter.contracts/contracts/active/Payments.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./SendValueOrEscrow.sol\\\";\\n\\n/**\\n * @title Payments contract for Nafter Marketplaces.\\n */\\ncontract Payments is SendValueOrEscrow {\\n    using SafeMath for uint256;\\n    using SafeMath for uint8;\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // refund\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Internal function to refund an address. Typically for canceled bids or offers.\\n     * Requirements:\\n     *\\n     *  - _payee cannot be the zero address\\n     *\\n     * @param _marketplacePercentage uint8 percentage of the fee for the marketplace.\\n     * @param _amount uint256 value to be split.\\n     * @param _payee address seller of the token.\\n     */\\n    function refund(\\n        uint8 _marketplacePercentage,\\n        address payable _payee,\\n        uint256 _amount\\n    ) internal {\\n        require(\\n            _payee != address(0),\\n            \\\"refund::no payees can be the zero address\\\"\\n        );\\n\\n        if (_amount > 0) {\\n            SendValueOrEscrow.sendValueOrEscrow(\\n                _payee,\\n                _amount.add(\\n                    calcPercentagePayment(_amount, _marketplacePercentage)\\n                )\\n            );\\n        }\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // payout\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Internal function to pay the seller, creator, and maintainer.\\n     * Requirements:\\n     *\\n     *  - _marketplacePercentage + _royaltyPercentage + _primarySalePercentage <= 100\\n     *  - no payees can be the zero address\\n     *\\n     * @param _amount uint256 value to be split.\\n     * @param _isPrimarySale bool of whether this is a primary sale.\\n     * @param _marketplacePercentage uint8 percentage of the fee for the marketplace.\\n     * @param _royaltyPercentage uint8 percentage of the fee for the royalty.\\n     * @param _primarySalePercentage uint8 percentage primary sale fee for the marketplace.\\n     * @param _payee address seller of the token.\\n     * @param _marketplacePayee address seller of the token.\\n     * @param _royaltyPayee creater address .\\n     * @param _primarySalePayee address seller of the token.\\n     */\\n    function payout(\\n        uint256 _amount,\\n        bool _isPrimarySale,\\n        uint8 _marketplacePercentage,\\n        uint8 _royaltyPercentage,\\n        uint8 _primarySalePercentage,\\n        address payable _payee,\\n        address payable _marketplacePayee,\\n        address payable _royaltyPayee,\\n        address payable _primarySalePayee\\n    ) internal {\\n        require(\\n            _marketplacePercentage <= 100,\\n            \\\"payout::marketplace percentage cannot be above 100\\\"\\n        );\\n        require(\\n            _royaltyPercentage.add(_primarySalePercentage) <= 100,\\n            \\\"payout::percentages cannot go beyond 100\\\"\\n        );\\n        require(\\n            _payee != address(0) &&\\n            _primarySalePayee != address(0) &&\\n            _marketplacePayee != address(0) &&\\n            _royaltyPayee != address(0),\\n            \\\"payout::no payees can be the zero address\\\"\\n        );\\n\\n        // Note:: Solidity is kind of terrible in that there is a limit to local\\n        //        variables that can be put into the stack. The real pain is that\\n        //        one can put structs, arrays, or mappings into memory but not basic\\n        //        data types. Hence our payments array that stores these values.\\n        uint256[4] memory payments;\\n\\n        // uint256 marketplacePayment\\n        payments[0] = calcPercentagePayment(_amount, _marketplacePercentage);\\n\\n        // uint256 royaltyPayment\\n        payments[1] = calcRoyaltyPayment(\\n            _isPrimarySale,\\n            _amount,\\n            _royaltyPercentage\\n        );\\n\\n        // uint256 primarySalePayment\\n        payments[2] = calcPrimarySalePayment(\\n            _isPrimarySale,\\n            _amount,\\n            _primarySalePercentage\\n        );\\n\\n        // uint256 payeePayment\\n        payments[3] = _amount.sub(payments[1]).sub(payments[2]);\\n\\n        // marketplacePayment\\n        if (payments[0] > 0) {\\n            SendValueOrEscrow.sendValueOrEscrow(_marketplacePayee, payments[0]);\\n        }\\n\\n        // royaltyPayment\\n        if (payments[1] > 0) {\\n            SendValueOrEscrow.sendValueOrEscrow(_royaltyPayee, payments[1]);\\n        }\\n        // primarySalePayment\\n        if (payments[2] > 0) {\\n            SendValueOrEscrow.sendValueOrEscrow(_primarySalePayee, payments[2]);\\n        }\\n        // payeePayment\\n        if (payments[3] > 0) {\\n            SendValueOrEscrow.sendValueOrEscrow(_payee, payments[3]);\\n        }\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // calcRoyaltyPayment\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Private function to calculate Royalty amount.\\n     *      If primary sale: 0\\n     *      If no royalty percentage: 0\\n     *      otherwise: royalty in wei\\n     * @param _isPrimarySale bool of whether this is a primary sale\\n     * @param _amount uint256 value to be split\\n     * @param _percentage uint8 royalty percentage\\n     * @return uint256 wei value owed for royalty\\n     */\\n    function calcRoyaltyPayment(\\n        bool _isPrimarySale,\\n        uint256 _amount,\\n        uint8 _percentage\\n    ) private pure returns (uint256) {\\n        if (_isPrimarySale) {\\n            return 0;\\n        }\\n        return calcPercentagePayment(_amount, _percentage);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // calcPrimarySalePayment\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Private function to calculate PrimarySale amount.\\n     *      If not primary sale: 0\\n     *      otherwise: primary sale in wei\\n     * @param _isPrimarySale bool of whether this is a primary sale\\n     * @param _amount uint256 value to be split\\n     * @param _percentage uint8 royalty percentage\\n     * @return uint256 wei value owed for primary sale\\n     */\\n    function calcPrimarySalePayment(\\n        bool _isPrimarySale,\\n        uint256 _amount,\\n        uint8 _percentage\\n    ) private pure returns (uint256) {\\n        if (_isPrimarySale) {\\n            return calcPercentagePayment(_amount, _percentage);\\n        }\\n        return 0;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // calcPercentagePayment\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Internal function to calculate percentage value.\\n     * @param _amount uint256 wei value\\n     * @param _percentage uint8  percentage\\n     * @return uint256 wei value based on percentage.\\n     */\\n    function calcPercentagePayment(uint256 _amount, uint8 _percentage)\\n    internal\\n    pure\\n    returns (uint256)\\n    {\\n        return _amount.mul(_percentage).div(100);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/tristan/nafter/nafter.contracts/contracts/active/SendValueOrEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/payment/PullPayment.sol\\\";\\nimport \\\"./MaybeSendValue.sol\\\";\\n/**\\n * @dev Contract to make payments. If a direct transfer fails, it will store the payment in escrow until the address decides to pull the payment.\\n */\\ncontract SendValueOrEscrow is MaybeSendValue, PullPayment {\\n    /////////////////////////////////////////////////////////////////////////\\n    // Events\\n    /////////////////////////////////////////////////////////////////////////\\n    event SendValue(address indexed _payee, uint256 amount);\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // sendValueOrEscrow\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Send some value to an address.\\n     * @param _to address to send some value to.\\n     * @param _value uint256 amount to send.\\n     */\\n    function sendValueOrEscrow(address payable _to, uint256 _value) internal {\\n        // attempt to make the transfer\\n        bool successfulTransfer = MaybeSendValue.maybeSendValue(_to, _value);\\n        // if it fails, transfer it into escrow for them to redeem at their will.\\n        if (!successfulTransfer) {\\n            _asyncTransfer(_to, _value);\\n        }\\n        emit SendValue(_to, _value);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/tristan/nafter/nafter.contracts/contracts/active/SendValueProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MI\\npragma solidity 0.6.12;\\n\\nimport \\\"./ISendValueProxy.sol\\\";\\n\\n/**\\n * @dev Contract that attempts to send value to an address.\\n */\\ncontract SendValueProxy is ISendValueProxy {\\n    /**\\n     * @dev Send some wei to the address.\\n     * @param _to address to send some value to.\\n     */\\n    function sendValue(address payable _to) external payable override {\\n        // Note that `<address>.transfer` limits gas sent to receiver. It may\\n        // not support complex contract operations in the future.\\n        _to.transfer(msg.value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/payment/PullPayment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./escrow/Escrow.sol\\\";\\n\\n/**\\n * @dev Simple implementation of a\\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\\n * strategy, where the paying contract doesn't interact directly with the\\n * receiver account, which must withdraw its payments itself.\\n *\\n * Pull-payments are often considered the best practice when it comes to sending\\n * Ether, security-wise. It prevents recipients from blocking execution, and\\n * eliminates reentrancy concerns.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\\n * instead of Solidity's `transfer` function. Payees can query their due\\n * payments with {payments}, and retrieve them with {withdrawPayments}.\\n */\\nabstract contract PullPayment {\\n    Escrow private _escrow;\\n\\n    constructor () internal {\\n        _escrow = new Escrow();\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\\n     *\\n     * Note that _any_ account can call this function, not just the `payee`.\\n     * This means that contracts unaware of the `PullPayment` protocol can still\\n     * receive funds this way, by having a separate account call\\n     * {withdrawPayments}.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee Whose payments will be withdrawn.\\n     */\\n    function withdrawPayments(address payable payee) public virtual {\\n        _escrow.withdraw(payee);\\n    }\\n\\n    /**\\n     * @dev Returns the payments owed to an address.\\n     * @param dest The creditor's address.\\n     */\\n    function payments(address dest) public view returns (uint256) {\\n        return _escrow.depositsOf(dest);\\n    }\\n\\n    /**\\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n     * there is no danger of them being spent before withdrawal.\\n     *\\n     * @param dest The destination address of the funds.\\n     * @param amount The amount to transfer.\\n     */\\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\\n        _escrow.deposit{ value: amount }(dest);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/payment/escrow/Escrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n /**\\n  * @title Escrow\\n  * @dev Base escrow contract, holds funds designated for a payee until they\\n  * withdraw them.\\n  *\\n  * Intended usage: This contract (and derived escrow contracts) should be a\\n  * standalone contract, that only interacts with the contract that instantiated\\n  * it. That way, it is guaranteed that all Ether will be handled according to\\n  * the `Escrow` rules, and there is no need to check for payable functions or\\n  * transfers in the inheritance tree. The contract that uses the escrow as its\\n  * payment method should be its owner, and provide public methods redirecting\\n  * to the escrow's deposit and withdraw.\\n  */\\ncontract Escrow is Ownable {\\n    using SafeMath for uint256;\\n    using Address for address payable;\\n\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    mapping(address => uint256) private _deposits;\\n\\n    function depositsOf(address payee) public view returns (uint256) {\\n        return _deposits[payee];\\n    }\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param payee The destination address of the funds.\\n     */\\n    function deposit(address payee) public payable virtual onlyOwner {\\n        uint256 amount = msg.value;\\n        _deposits[payee] = _deposits[payee].add(amount);\\n\\n        emit Deposited(payee, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee The address whose funds will be withdrawn and transferred to.\\n     */\\n    function withdraw(address payable payee) public virtual onlyOwner {\\n        uint256 payment = _deposits[payee];\\n\\n        _deposits[payee] = 0;\\n\\n        payee.sendValue(payment);\\n\\n        emit Withdrawn(payee, payment);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iMarketSettings\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_iERC1155CreatorRoyalty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nafter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"AcceptBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"CancelBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"SetInitialBidPriceWithRange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"SetSalePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"currentBidDetailsOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc1155\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getActiveBid\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getActiveBidRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBidBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getSalePrice\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"hasTokenActiveBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iERC1155CreatorRoyalty\",\"outputs\":[{\"internalType\":\"contract INafterRoyaltyRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iMarketplaceSettings\",\"outputs\":[{\"internalType\":\"contract IMarketplaceSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwnerOfTheToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBidIncreasePercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nafter\",\"outputs\":[{\"internalType\":\"contract INafter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oldNafterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endIndex\",\"type\":\"uint256\"}],\"name\":\"restore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"safeAcceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"safeBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setIERC1155CreatorRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setInitialBidPriceWithRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMarketplaceSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_percentage\",\"type\":\"uint8\"}],\"name\":\"setMinimumBidIncreasePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNafter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenPriceFeeIncluded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMarketFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NafterMarketAuction","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004c4edc5694f252459fcce235968c359ce717e96100000000000000000000000094060eb92f711a5a88596b91aec4d964c01c31bb000000000000000000000000045e2254ea5853b65880edbd9e81118748b06592","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}