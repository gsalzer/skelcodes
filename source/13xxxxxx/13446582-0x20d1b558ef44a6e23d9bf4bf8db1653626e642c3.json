{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DarkParadiseV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.0;\\n\\nimport \\\"./ERC1155Tradable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\\n * available, which can be aplied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n */\\ncontract ReentrancyGuard {\\n    /// @dev counter to allow mutex lock with only one SSTORE operation\\n    uint256 private _guardCounter;\\n\\n    constructor() internal {\\n        // The counter starts at one to prevent changing it from zero to a non-zero\\n        // value, which is a more expensive operation.\\n        _guardCounter = 1;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _guardCounter += 1;\\n        uint256 localCounter = _guardCounter;\\n        _;\\n        require(\\n            localCounter == _guardCounter,\\n            \\\"ReentrancyGuard: reentrant call\\\"\\n        );\\n    }\\n}\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(\\n            value\\n        );\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value\\n        );\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\\n// https://docs.synthetix.io/contracts/Owned\\ncontract Owned {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    constructor(address _owner) public {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(\\n            msg.sender == nominatedOwner,\\n            \\\"You must be nominated before you can accept ownership\\\"\\n        );\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == owner,\\n            \\\"Only the contract owner may perform this action\\\"\\n        );\\n        _;\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\\n\\n// Inheritance\\n\\n// https://docs.synthetix.io/contracts/RewardsDistributionRecipient\\ncontract RewardsDistributionRecipient is Owned {\\n    address public rewardsDistribution;\\n\\n    function notifyRewardAmount(\\n        uint256 rewardNotifyAmount,\\n        uint256 rewardTransferAmount\\n    ) external;\\n\\n    modifier onlyRewardsDistribution() {\\n        require(msg.sender == rewardsDistribution, \\\"Wrong caller\\\");\\n        _;\\n    }\\n\\n    function setRewardsDistribution(address _rewardsDistribution)\\n        external\\n        onlyOwner\\n    {\\n        rewardsDistribution = _rewardsDistribution;\\n    }\\n}\\n\\ncontract TokenWrapper is ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public stakingToken;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    constructor(address _stakingToken) public {\\n        stakingToken = IERC20(_stakingToken);\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function stake(uint256 amount) internal nonReentrant {\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount) public nonReentrant {\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        stakingToken.safeTransfer(msg.sender, amount);\\n    }\\n}\\n\\ninterface IStratAccessNft {\\n    function getTotalUseCount(address _account, uint256 _id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getStratUseCount(\\n        address _account,\\n        uint256 _id,\\n        address _strategy\\n    ) external view returns (uint256);\\n\\n    function startUsingNFT(address _account, uint256 _id) external;\\n\\n    function endUsingNFT(address _account, uint256 _id) external;\\n}\\n\\ncontract DarkParadiseV2 is TokenWrapper, RewardsDistributionRecipient {\\n    IERC20 public rewardsToken;\\n\\n    uint256 public DURATION = 1 seconds;\\n\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    //NFT\\n    IStratAccessNft public nft;\\n\\n    // common, rare, unique ids considered in range on 1-111\\n    uint256 public constant rareMinId = 101;\\n    uint256 public constant uniqueId = 111;\\n\\n    uint256 public minNFTId = 223;\\n    uint256 public maxNFTId = 444;\\n\\n    uint256 public commonLimit = 3200 * 10**18;\\n    uint256 public rareLimit = 16500 * 10**18;\\n    uint256 public uniqueLimit = 30000 * 10**18;\\n\\n    mapping(address => uint256) public usedNFT;\\n\\n    event RewardAdded(uint256 rewardNotifyAmount, uint256 rewardTransferAmount);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event DurationChange(uint256 newDuration, uint256 oldDuration);\\n    event NFTSet(IStratAccessNft indexed newNFT);\\n\\n    constructor(\\n        address _owner,\\n        address _rewardsToken,\\n        address _stakingToken,\\n        IStratAccessNft _nft\\n    ) public TokenWrapper(_stakingToken) Owned(_owner) {\\n        rewardsToken = IERC20(_rewardsToken);\\n        nft = _nft;\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(totalSupply())\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            balanceOf(account)\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function getLimit(address user) public view returns (uint256) {\\n        uint256 nftId = usedNFT[user];\\n        if (nftId == 0) return 0;\\n\\n        uint256 effectiveId = ((nftId - 1) % 111) + 1;\\n        if (effectiveId < rareMinId) return commonLimit;\\n        if (effectiveId < uniqueId) return rareLimit;\\n        return uniqueLimit;\\n    }\\n\\n    function setNFT(IStratAccessNft _nftAddress) public onlyOwner {\\n        nft = _nftAddress;\\n        emit NFTSet(_nftAddress);\\n    }\\n\\n    function setDepositLimits(\\n        uint256 _common,\\n        uint256 _rare,\\n        uint256 _unique\\n    ) external onlyOwner {\\n        if (commonLimit != _common) commonLimit = _common;\\n        if (rareLimit != _rare) rareLimit = _rare;\\n        if (uniqueLimit != _unique) uniqueLimit = _unique;\\n    }\\n\\n    function setMinMaxNFT(uint256 _min, uint256 _max) external onlyOwner {\\n        if (minNFTId != _min) minNFTId = _min;\\n        if (maxNFTId != _max) maxNFTId = _max;\\n    }\\n\\n    function setDuration(uint256 newDuration) external onlyOwner {\\n        emit DurationChange(newDuration, DURATION);\\n        DURATION = newDuration;\\n    }\\n\\n    function stake(uint256 amount, uint256 _nftId)\\n        public\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        require(_nftId >= minNFTId && _nftId <= maxNFTId, \\\"Invalid nft\\\");\\n\\n        if (usedNFT[msg.sender] == 0) {\\n            usedNFT[msg.sender] = _nftId;\\n            nft.startUsingNFT(msg.sender, _nftId);\\n        }\\n\\n        require(\\n            (amount + balanceOf(msg.sender)) <= getLimit(msg.sender),\\n            \\\"Crossing limit\\\"\\n        );\\n\\n        super.stake(amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount) public updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n\\n        //When a user withdraws their entire SDT from the strat, the strat stops using their NFT\\n        if (balanceOf(msg.sender) - amount == 0) {\\n            uint256 nftId = usedNFT[msg.sender];\\n            usedNFT[msg.sender] = 0;\\n            nft.endUsingNFT(msg.sender, nftId);\\n        }\\n        super.withdraw(amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function exit() external {\\n        withdraw(balanceOf(msg.sender));\\n        getReward();\\n    }\\n\\n    function getReward() public updateReward(msg.sender) {\\n        uint256 reward = earned(msg.sender);\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            rewardsToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function notifyRewardAmount(\\n        uint256 rewardNotifyAmount,\\n        uint256 rewardTransferAmount\\n    ) external onlyRewardsDistribution updateReward(address(0)) {\\n        require(rewardNotifyAmount >= rewardTransferAmount, \\\"!Notify Amount\\\");\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = rewardNotifyAmount.div(DURATION);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = rewardNotifyAmount.add(leftover).div(DURATION);\\n        }\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(DURATION);\\n\\n        rewardsToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            rewardTransferAmount\\n        );\\n        emit RewardAdded(rewardNotifyAmount, rewardTransferAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC1155Tradable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping(address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\\ncontract MinterRole is Context {\\n    using Roles for Roles.Role;\\n\\n    event MinterAdded(address indexed account);\\n    event MinterRemoved(address indexed account);\\n\\n    Roles.Role private _minters;\\n\\n    constructor() internal {\\n        _addMinter(_msgSender());\\n    }\\n\\n    modifier onlyMinter() {\\n        require(\\n            isMinter(_msgSender()),\\n            \\\"MinterRole: caller does not have the Minter role\\\"\\n        );\\n        _;\\n    }\\n\\n    function isMinter(address account) public view returns (bool) {\\n        return _minters.has(account);\\n    }\\n\\n    function addMinter(address account) public onlyMinter {\\n        _addMinter(account);\\n    }\\n\\n    function renounceMinter() public {\\n        _removeMinter(_msgSender());\\n    }\\n\\n    function _addMinter(address account) internal {\\n        _minters.add(account);\\n        emit MinterAdded(account);\\n    }\\n\\n    function _removeMinter(address account) internal {\\n        _minters.remove(account);\\n        emit MinterRemoved(account);\\n    }\\n}\\n\\n/**\\n * @title WhitelistAdminRole\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n */\\ncontract WhitelistAdminRole is Context {\\n    using Roles for Roles.Role;\\n\\n    event WhitelistAdminAdded(address indexed account);\\n    event WhitelistAdminRemoved(address indexed account);\\n\\n    Roles.Role private _whitelistAdmins;\\n\\n    constructor() internal {\\n        _addWhitelistAdmin(_msgSender());\\n    }\\n\\n    modifier onlyWhitelistAdmin() {\\n        require(\\n            isWhitelistAdmin(_msgSender()),\\n            \\\"WhitelistAdminRole: caller does not have the WhitelistAdmin role\\\"\\n        );\\n        _;\\n    }\\n\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\n        return _whitelistAdmins.has(account);\\n    }\\n\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n        _addWhitelistAdmin(account);\\n    }\\n\\n    function renounceWhitelistAdmin() public {\\n        _removeWhitelistAdmin(_msgSender());\\n    }\\n\\n    function _addWhitelistAdmin(address account) internal {\\n        _whitelistAdmins.add(account);\\n        emit WhitelistAdminAdded(account);\\n    }\\n\\n    function _removeWhitelistAdmin(address account) internal {\\n        _whitelistAdmins.remove(account);\\n        emit WhitelistAdminRemoved(account);\\n    }\\n}\\n\\n/**\\n * @title ERC165\\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice Query if a contract implements an interface\\n     * @dev Interface identification is specified in ERC-165. This function\\n     * uses less than 30,000 gas\\n     * @param _interfaceId The interface identifier, as specified in ERC-165\\n     */\\n    function supportsInterface(bytes4 _interfaceId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\\n/**\\n * @dev ERC-1155 interface for accepting safe transfers.\\n */\\ninterface IERC1155TokenReceiver {\\n    /**\\n     * @notice Handle the receipt of a single ERC1155 token type\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\\n     * This function MAY throw to revert and reject the transfer\\n     * Return of other amount than the magic value MUST result in the transaction being reverted\\n     * Note: The token contract address is always the message sender\\n     * @param _operator  The address which called the `safeTransferFrom` function\\n     * @param _from      The address which previously owned the token\\n     * @param _id        The id of the token being transferred\\n     * @param _amount    The amount of tokens being transferred\\n     * @param _data      Additional data with no specified format\\n     * @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     */\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Handle the receipt of multiple ERC1155 token types\\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\\n     * This function MAY throw to revert and reject the transfer\\n     * Return of other amount than the magic value WILL result in the transaction being reverted\\n     * Note: The token contract address is always the message sender\\n     * @param _operator  The address which called the `safeBatchTransferFrom` function\\n     * @param _from      The address which previously owned the token\\n     * @param _ids       An array containing ids of each token being transferred\\n     * @param _amounts   An array containing amounts of each token being transferred\\n     * @param _data      Additional data with no specified format\\n     * @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     */\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\\n     * @param  interfaceID The ERC-165 interface ID that is queried for support.s\\n     * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\\n     *      This function MUST NOT consume more than 5,000 gas.\\n     * @return Wheter ERC-165 or ERC1155TokenReceiver interfaces are supported.\\n     */\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\\ninterface IERC1155 {\\n    // Events\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferSingle(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _id,\\n        uint256 _amount\\n    );\\n\\n    /**\\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\n     *   Operator MUST be msg.sender\\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\n     *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\n     */\\n    event TransferBatch(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256[] _ids,\\n        uint256[] _amounts\\n    );\\n\\n    /**\\n     * @dev MUST emit when an approval is updated\\n     */\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n\\n    /**\\n     * @dev MUST emit when the URI is updated for a token ID\\n     *   URIs are defined in RFC 3986\\n     *   The URI MUST point a JSON file that conforms to the \\\"ERC-1155 Metadata JSON Schema\\\"\\n     */\\n    event URI(string _amount, uint256 indexed _id);\\n\\n    /**\\n     * @notice Transfers amount of an _id from the _from address to the _to address specified\\n     * @dev MUST emit TransferSingle event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * @param _from    Source address\\n     * @param _to      Target address\\n     * @param _id      ID of the token type\\n     * @param _amount  Transfered amount\\n     * @param _data    Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n     * @dev MUST emit TransferBatch event on success\\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\\n     * MUST throw if `_to` is the zero address\\n     * MUST throw if length of `_ids` is not the same as length of `_amounts`\\n     * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\\n     * MUST throw on any other error\\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\\n     * @param _from     Source addresses\\n     * @param _to       Target addresses\\n     * @param _ids      IDs of each token type\\n     * @param _amounts  Transfer amounts per token type\\n     * @param _data     Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Get the balance of an account's Tokens\\n     * @param _owner  The address of the token holder\\n     * @param _id     ID of the Token\\n     * @return        The _owner's balance of the Token type requested\\n     */\\n    function balanceOf(address _owner, uint256 _id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the balance of multiple account/token pairs\\n     * @param _owners The addresses of the token holders\\n     * @param _ids    ID of the Tokens\\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n     * @dev MUST emit the ApprovalForAll event on success\\n     * @param _operator  Address to add to the set of authorized operators\\n     * @param _approved  True if the operator is approved, false to revoke approval\\n     */\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /**\\n     * @notice Queries the approval status of an operator for a given owner\\n     * @param _owner     The owner of the Tokens\\n     * @param _operator  Address of authorized operator\\n     * @return           True if the operator is approved, false if not\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        returns (bool isOperator);\\n}\\n\\n/**\\n * @dev Implementation of Multi-Token Standard contract\\n */\\ncontract ERC1155 is IERC165 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    /***********************************|\\n  |        Variables and Events       |\\n  |__________________________________*/\\n\\n    // onReceive function signatures\\n    bytes4 internal constant ERC1155_RECEIVED_VALUE = 0xf23a6e61;\\n    bytes4 internal constant ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\\n\\n    // Objects balances\\n    mapping(address => mapping(uint256 => uint256)) internal balances;\\n\\n    // Operator Functions\\n    mapping(address => mapping(address => bool)) internal operators;\\n\\n    // Events\\n    event TransferSingle(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _id,\\n        uint256 _amount\\n    );\\n    event TransferBatch(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256[] _ids,\\n        uint256[] _amounts\\n    );\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n    event URI(string _uri, uint256 indexed _id);\\n\\n    /***********************************|\\n  |     Public Transfer Functions     |\\n  |__________________________________*/\\n\\n    /**\\n     * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\n     * @param _from    Source address\\n     * @param _to      Target address\\n     * @param _id      ID of the token type\\n     * @param _amount  Transfered amount\\n     * @param _data    Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) public {\\n        require(\\n            (msg.sender == _from) || isApprovedForAll(_from, msg.sender),\\n            \\\"ERC1155#safeTransferFrom: INVALID_OPERATOR\\\"\\n        );\\n        require(\\n            _to != address(0),\\n            \\\"ERC1155#safeTransferFrom: INVALID_RECIPIENT\\\"\\n        );\\n        // require(_amount >= balances[_from][_id]) is not necessary since checked with safemath operations\\n\\n        _safeTransferFrom(_from, _to, _id, _amount);\\n        _callonERC1155Received(_from, _to, _id, _amount, _data);\\n    }\\n\\n    /**\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n     * @param _from     Source addresses\\n     * @param _to       Target addresses\\n     * @param _ids      IDs of each token type\\n     * @param _amounts  Transfer amounts per token type\\n     * @param _data     Additional data with no specified format, sent in call to `_to`\\n     */\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) public {\\n        // Requirements\\n        require(\\n            (msg.sender == _from) || isApprovedForAll(_from, msg.sender),\\n            \\\"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\\\"\\n        );\\n        require(\\n            _to != address(0),\\n            \\\"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\\\"\\n        );\\n\\n        _safeBatchTransferFrom(_from, _to, _ids, _amounts);\\n        _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\\n    }\\n\\n    /***********************************|\\n  |    Internal Transfer Functions    |\\n  |__________________________________*/\\n\\n    /**\\n     * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\n     * @param _from    Source address\\n     * @param _to      Target address\\n     * @param _id      ID of the token type\\n     * @param _amount  Transfered amount\\n     */\\n    function _safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount\\n    ) internal {\\n        // Update balances\\n        balances[_from][_id] = balances[_from][_id].sub(_amount); // Subtract amount\\n        balances[_to][_id] = balances[_to][_id].add(_amount); // Add amount\\n\\n        // Emit event\\n        emit TransferSingle(msg.sender, _from, _to, _id, _amount);\\n    }\\n\\n    /**\\n     * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\\n     */\\n    function _callonERC1155Received(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) internal {\\n        // Check if recipient is contract\\n        if (_to.isContract()) {\\n            bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received(\\n                msg.sender,\\n                _from,\\n                _id,\\n                _amount,\\n                _data\\n            );\\n            require(\\n                retval == ERC1155_RECEIVED_VALUE,\\n                \\\"ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\n     * @param _from     Source addresses\\n     * @param _to       Target addresses\\n     * @param _ids      IDs of each token type\\n     * @param _amounts  Transfer amounts per token type\\n     */\\n    function _safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts\\n    ) internal {\\n        require(\\n            _ids.length == _amounts.length,\\n            \\\"ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\\\"\\n        );\\n\\n        // Number of transfer to execute\\n        uint256 nTransfer = _ids.length;\\n\\n        // Executing all transfers\\n        for (uint256 i = 0; i < nTransfer; i++) {\\n            // Update storage balance of previous bin\\n            balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(\\n                _amounts[i]\\n            );\\n            balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\\n        }\\n\\n        // Emit event\\n        emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\\n    }\\n\\n    /**\\n     * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\\n     */\\n    function _callonERC1155BatchReceived(\\n        address _from,\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) internal {\\n        // Pass data if recipient is contract\\n        if (_to.isContract()) {\\n            bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived(\\n                msg.sender,\\n                _from,\\n                _ids,\\n                _amounts,\\n                _data\\n            );\\n            require(\\n                retval == ERC1155_BATCH_RECEIVED_VALUE,\\n                \\\"ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\\\"\\n            );\\n        }\\n    }\\n\\n    /***********************************|\\n  |         Operator Functions        |\\n  |__________________________________*/\\n\\n    /**\\n     * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller's tokens\\n     * @param _operator  Address to add to the set of authorized operators\\n     * @param _approved  True if the operator is approved, false to revoke approval\\n     */\\n    function setApprovalForAll(address _operator, bool _approved) external {\\n        // Update operator status\\n        operators[msg.sender][_operator] = _approved;\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\n    }\\n\\n    /**\\n     * @notice Queries the approval status of an operator for a given owner\\n     * @param _owner     The owner of the Tokens\\n     * @param _operator  Address of authorized operator\\n     * @return True if the operator is approved, false if not\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        public\\n        view\\n        returns (bool isOperator)\\n    {\\n        return operators[_owner][_operator];\\n    }\\n\\n    /***********************************|\\n  |         Balance Functions         |\\n  |__________________________________*/\\n\\n    /**\\n     * @notice Get the balance of an account's Tokens\\n     * @param _owner  The address of the token holder\\n     * @param _id     ID of the Token\\n     * @return The _owner's balance of the Token type requested\\n     */\\n    function balanceOf(address _owner, uint256 _id)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return balances[_owner][_id];\\n    }\\n\\n    /**\\n     * @notice Get the balance of multiple account/token pairs\\n     * @param _owners The addresses of the token holders\\n     * @param _ids    ID of the Tokens\\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        require(\\n            _owners.length == _ids.length,\\n            \\\"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\\\"\\n        );\\n\\n        // Variables\\n        uint256[] memory batchBalances = new uint256[](_owners.length);\\n\\n        // Iterate over each owner and token ID\\n        for (uint256 i = 0; i < _owners.length; i++) {\\n            batchBalances[i] = balances[_owners[i]][_ids[i]];\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /***********************************|\\n  |          ERC165 Functions         |\\n  |__________________________________*/\\n\\n    /**\\n     * INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\n     */\\n    bytes4 private constant INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * INTERFACE_SIGNATURE_ERC1155 =\\n     * bytes4(keccak256(\\\"safeTransferFrom(address,address,uint256,uint256,bytes)\\\")) ^\\n     * bytes4(keccak256(\\\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\\\")) ^\\n     * bytes4(keccak256(\\\"balanceOf(address,uint256)\\\")) ^\\n     * bytes4(keccak256(\\\"balanceOfBatch(address[],uint256[])\\\")) ^\\n     * bytes4(keccak256(\\\"setApprovalForAll(address,bool)\\\")) ^\\n     * bytes4(keccak256(\\\"isApprovedForAll(address,address)\\\"));\\n     */\\n    bytes4 private constant INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\\n\\n    /**\\n     * @notice Query if a contract implements an interface\\n     * @param _interfaceID  The interface identifier, as specified in ERC-165\\n     * @return `true` if the contract implements `_interfaceID` and\\n     */\\n    function supportsInterface(bytes4 _interfaceID)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        if (\\n            _interfaceID == INTERFACE_SIGNATURE_ERC165 ||\\n            _interfaceID == INTERFACE_SIGNATURE_ERC1155\\n        ) {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\\n/**\\n * @notice Contract that handles metadata related methods.\\n * @dev Methods assume a deterministic generation of URI based on token IDs.\\n *      Methods also assume that URI uses hex representation of token IDs.\\n */\\ncontract ERC1155Metadata {\\n    // URI's default URI prefix\\n    string internal baseMetadataURI;\\n    event URI(string _uri, uint256 indexed _id);\\n\\n    /***********************************|\\n  |     Metadata Public Function s    |\\n  |__________________________________*/\\n\\n    /**\\n     * @notice A distinct Uniform Resource Identifier (URI) for a given token.\\n     * @dev URIs are defined in RFC 3986.\\n     *      URIs are assumed to be deterministically generated based on token ID\\n     *      Token IDs are assumed to be represented in their hex format in URIs\\n     * @return URI string\\n     */\\n    function uri(uint256 _id) public view returns (string memory) {\\n        return\\n            string(abi.encodePacked(baseMetadataURI, _uint2str(_id), \\\".json\\\"));\\n    }\\n\\n    /***********************************|\\n  |    Metadata Internal Functions    |\\n  |__________________________________*/\\n\\n    /**\\n     * @notice Will emit default URI log event for corresponding token _id\\n     * @param _tokenIDs Array of IDs of tokens to log default URI\\n     */\\n    function _logURIs(uint256[] memory _tokenIDs) internal {\\n        string memory baseURL = baseMetadataURI;\\n        string memory tokenURI;\\n\\n        for (uint256 i = 0; i < _tokenIDs.length; i++) {\\n            tokenURI = string(\\n                abi.encodePacked(baseURL, _uint2str(_tokenIDs[i]), \\\".json\\\")\\n            );\\n            emit URI(tokenURI, _tokenIDs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Will emit a specific URI log event for corresponding token\\n     * @param _tokenIDs IDs of the token corresponding to the _uris logged\\n     * @param _URIs    The URIs of the specified _tokenIDs\\n     */\\n    function _logURIs(uint256[] memory _tokenIDs, string[] memory _URIs)\\n        internal\\n    {\\n        require(\\n            _tokenIDs.length == _URIs.length,\\n            \\\"ERC1155Metadata#_logURIs: INVALID_ARRAYS_LENGTH\\\"\\n        );\\n        for (uint256 i = 0; i < _tokenIDs.length; i++) {\\n            emit URI(_URIs[i], _tokenIDs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Will update the base URL of token's URI\\n     * @param _newBaseMetadataURI New base URL of token's URI\\n     */\\n    function _setBaseMetadataURI(string memory _newBaseMetadataURI) internal {\\n        baseMetadataURI = _newBaseMetadataURI;\\n    }\\n\\n    /***********************************|\\n  |    Utility Internal Functions     |\\n  |__________________________________*/\\n\\n    /**\\n     * @notice Convert uint256 to string\\n     * @param _i Unsigned integer to convert to string\\n     */\\n    function _uint2str(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        uint256 j = _i;\\n        uint256 ii = _i;\\n        uint256 len;\\n\\n        // Get number of bytes\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len - 1;\\n\\n        // Get each individual ASCII\\n        while (ii != 0) {\\n            bstr[k--] = bytes1(uint8(48 + (ii % 10)));\\n            ii /= 10;\\n        }\\n\\n        // Convert to string\\n        return string(bstr);\\n    }\\n}\\n\\n/**\\n * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\\n *      a parent contract to be executed as they are `internal` functions\\n */\\ncontract ERC1155MintBurn is ERC1155 {\\n    /****************************************|\\n  |            Minting Functions           |\\n  |_______________________________________*/\\n\\n    /**\\n     * @notice Mint _amount of tokens of a given id\\n     * @param _to      The address to mint tokens to\\n     * @param _id      Token id to mint\\n     * @param _amount  The amount to be minted\\n     * @param _data    Data to pass if receiver is contract\\n     */\\n    function _mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) internal {\\n        // Add _amount\\n        balances[_to][_id] = balances[_to][_id].add(_amount);\\n\\n        // Emit event\\n        emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\\n\\n        // Calling onReceive method if recipient is contract\\n        _callonERC1155Received(address(0x0), _to, _id, _amount, _data);\\n    }\\n\\n    /**\\n     * @notice Mint tokens for each ids in _ids\\n     * @param _to       The address to mint tokens to\\n     * @param _ids      Array of ids to mint\\n     * @param _amounts  Array of amount of tokens to mint per id\\n     * @param _data    Data to pass if receiver is contract\\n     */\\n    function _batchMint(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) internal {\\n        require(\\n            _ids.length == _amounts.length,\\n            \\\"ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH\\\"\\n        );\\n\\n        // Number of mints to execute\\n        uint256 nMint = _ids.length;\\n\\n        // Executing all minting\\n        for (uint256 i = 0; i < nMint; i++) {\\n            // Update storage balance\\n            balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\\n        }\\n\\n        // Emit batch mint event\\n        emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\\n\\n        // Calling onReceive method if recipient is contract\\n        _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, _data);\\n    }\\n\\n    /****************************************|\\n  |            Burning Functions           |\\n  |_______________________________________*/\\n\\n    /**\\n     * @notice Burn _amount of tokens of a given token id\\n     * @param _from    The address to burn tokens from\\n     * @param _id      Token id to burn\\n     * @param _amount  The amount to be burned\\n     */\\n    function _burn(\\n        address _from,\\n        uint256 _id,\\n        uint256 _amount\\n    ) internal {\\n        //Substract _amount\\n        balances[_from][_id] = balances[_from][_id].sub(_amount);\\n\\n        // Emit event\\n        emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\\n    }\\n\\n    /**\\n     * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\n     * @param _from     The address to burn tokens from\\n     * @param _ids      Array of token ids to burn\\n     * @param _amounts  Array of the amount to be burned\\n     */\\n    function _batchBurn(\\n        address _from,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts\\n    ) internal {\\n        require(\\n            _ids.length == _amounts.length,\\n            \\\"ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH\\\"\\n        );\\n\\n        // Number of mints to execute\\n        uint256 nBurn = _ids.length;\\n\\n        // Executing all minting\\n        for (uint256 i = 0; i < nBurn; i++) {\\n            // Update storage balance\\n            balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(\\n                _amounts[i]\\n            );\\n        }\\n\\n        // Emit batch mint event\\n        emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\\n    }\\n}\\n\\nlibrary Strings {\\n    // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\\n    function strConcat(\\n        string memory _a,\\n        string memory _b,\\n        string memory _c,\\n        string memory _d,\\n        string memory _e\\n    ) internal pure returns (string memory) {\\n        bytes memory _ba = bytes(_a);\\n        bytes memory _bb = bytes(_b);\\n        bytes memory _bc = bytes(_c);\\n        bytes memory _bd = bytes(_d);\\n        bytes memory _be = bytes(_e);\\n        string memory abcde = new string(\\n            _ba.length + _bb.length + _bc.length + _bd.length + _be.length\\n        );\\n        bytes memory babcde = bytes(abcde);\\n        uint256 k = 0;\\n        for (uint256 i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\\n        for (uint256 i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\\n        for (uint256 i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\\n        for (uint256 i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\\n        for (uint256 i = 0; i < _be.length; i++) babcde[k++] = _be[i];\\n        return string(babcde);\\n    }\\n\\n    function strConcat(\\n        string memory _a,\\n        string memory _b,\\n        string memory _c,\\n        string memory _d\\n    ) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, _d, \\\"\\\");\\n    }\\n\\n    function strConcat(\\n        string memory _a,\\n        string memory _b,\\n        string memory _c\\n    ) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, \\\"\\\", \\\"\\\");\\n    }\\n\\n    function strConcat(string memory _a, string memory _b)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return strConcat(_a, _b, \\\"\\\", \\\"\\\", \\\"\\\");\\n    }\\n\\n    function uint2str(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\n/**\\n * @title ERC1155Tradable\\n * ERC1155Tradable - ERC1155 contract that whitelists an operator address, \\n * has create and mint functionality, and supports useful standards from OpenZeppelin,\\n  like _exists(), name(), symbol(), and totalSupply()\\n */\\ncontract ERC1155Tradable is\\n    ERC1155,\\n    ERC1155MintBurn,\\n    ERC1155Metadata,\\n    Ownable,\\n    MinterRole,\\n    WhitelistAdminRole\\n{\\n    using Strings for string;\\n\\n    address proxyRegistryAddress;\\n    uint256 internal _currentTokenID = 0;\\n    mapping(uint256 => address) public creators;\\n    mapping(uint256 => uint256) public tokenSupply;\\n    mapping(uint256 => uint256) public tokenMaxSupply;\\n    // Contract name\\n    string public name;\\n    // Contract symbol\\n    string public symbol;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _proxyRegistryAddress\\n    ) public {\\n        name = _name;\\n        symbol = _symbol;\\n        proxyRegistryAddress = _proxyRegistryAddress;\\n    }\\n\\n    function removeWhitelistAdmin(address account) public onlyOwner {\\n        _removeWhitelistAdmin(account);\\n    }\\n\\n    function removeMinter(address account) public onlyOwner {\\n        _removeMinter(account);\\n    }\\n\\n    function uri(uint256 _id) public view returns (string memory) {\\n        require(_exists(_id), \\\"ERC721Tradable#uri: NONEXISTENT_TOKEN\\\");\\n        return Strings.strConcat(baseMetadataURI, Strings.uint2str(_id));\\n    }\\n\\n    /**\\n     * @dev Returns the total quantity for a token ID\\n     * @param _id uint256 ID of the token to query\\n     * @return amount of token in existence\\n     */\\n    function totalSupply(uint256 _id) public view returns (uint256) {\\n        return tokenSupply[_id];\\n    }\\n\\n    /**\\n     * @dev Returns the max quantity for a token ID\\n     * @param _id uint256 ID of the token to query\\n     * @return amount of token in existence\\n     */\\n    function maxSupply(uint256 _id) public view returns (uint256) {\\n        return tokenMaxSupply[_id];\\n    }\\n\\n    /**\\n     * @dev Will update the base URL of token's URI\\n     * @param _newBaseMetadataURI New base URL of token's URI\\n     */\\n    function setBaseMetadataURI(string memory _newBaseMetadataURI)\\n        public\\n        onlyWhitelistAdmin\\n    {\\n        _setBaseMetadataURI(_newBaseMetadataURI);\\n    }\\n\\n    /**\\n     * @dev Creates a new token type and assigns _initialSupply to an address\\n     * @param _maxSupply max supply allowed\\n     * @param _initialSupply Optional amount to supply the first owner\\n     * @param _uri Optional URI for this token type\\n     * @param _data Optional data to pass if receiver is contract\\n     * @return The newly created token ID\\n     */\\n    function create(\\n        uint256 _maxSupply,\\n        uint256 _initialSupply,\\n        string memory _uri,\\n        bytes memory _data\\n    ) public onlyWhitelistAdmin returns (uint256 tokenId) {\\n        require(_initialSupply <= _maxSupply, \\\"_initialSupply > _maxSupply\\\");\\n        uint256 _id = _getNextTokenID();\\n        _incrementTokenTypeId();\\n        creators[_id] = msg.sender;\\n\\n        if (bytes(_uri).length > 0) {\\n            emit URI(_uri, _id);\\n        }\\n\\n        if (_initialSupply != 0) _mint(msg.sender, _id, _initialSupply, _data);\\n        tokenSupply[_id] = _initialSupply;\\n        tokenMaxSupply[_id] = _maxSupply;\\n        return _id;\\n    }\\n\\n    /**\\n     * @dev Creates multiple new token types and assigns _initialSupply[i] of each token type, to an address\\n     * @param _maxSupply Array of max supplies allowed\\n     * @param _initialSupply Array of optional amounts to supply the first owner\\n     * @param _uri Array of optional URIs for each token type\\n     * @param _data Optional data to pass if receiver is contract. Same for each new token type\\n     * @return Array of newly created token IDs\\n     */\\n    function batchCreate(\\n        uint256[] calldata _maxSupply,\\n        uint256[] calldata _initialSupply,\\n        string[] calldata _uri,\\n        bytes calldata _data\\n    ) external onlyWhitelistAdmin returns (uint256[] memory) {\\n        require(\\n            _initialSupply.length == _maxSupply.length &&\\n                _uri.length == _maxSupply.length,\\n            \\\"Array lengths mismatch\\\"\\n        );\\n\\n        uint256[] memory _ids = new uint256[](_maxSupply.length);\\n        uint256 _id = 0;\\n\\n        for (uint256 index = 0; index < _maxSupply.length; index++) {\\n            _id = create(\\n                _maxSupply[index],\\n                _initialSupply[index],\\n                _uri[index],\\n                _data\\n            );\\n\\n            _ids[index] = _id;\\n        }\\n        return _ids;\\n    }\\n\\n    /**\\n     * @dev Mints some amount of tokens to an address\\n     * @param _to          Address of the future owner of the token\\n     * @param _id          Token ID to mint\\n     * @param _quantity    Amount of tokens to mint\\n     * @param _data        Data to pass if receiver is contract\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _quantity,\\n        bytes memory _data\\n    ) public onlyMinter {\\n        uint256 tokenId = _id;\\n        require(\\n            tokenSupply[tokenId] < tokenMaxSupply[tokenId],\\n            \\\"Max supply reached\\\"\\n        );\\n        _mint(_to, _id, _quantity, _data);\\n        tokenSupply[_id] = tokenSupply[_id].add(_quantity);\\n    }\\n\\n    /**\\n     * @dev Mints some amount of tokens to an address\\n     * @param _to       The address to mint tokens to\\n     * @param _ids      Array of ids to mint\\n     * @param _amounts  Array of amount of tokens to mint per id\\n     * @param _data     Data to pass if receiver is contract\\n     */\\n    function batchMint(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) public onlyMinter {\\n        uint256 nMints = _ids.length;\\n        for (uint256 i = 0; i < nMints; i++) {\\n            uint256 tokenId = _ids[i];\\n            require(\\n                tokenSupply[tokenId] < tokenMaxSupply[tokenId],\\n                \\\"Max supply reached\\\"\\n            );\\n            tokenSupply[tokenId] = tokenSupply[tokenId].add(_amounts[i]);\\n        }\\n        _batchMint(_to, _ids, _amounts, _data);\\n    }\\n\\n    /**\\n     * @notice Burn _amount of tokens of a given token id\\n     * @param _from    The address to burn tokens from\\n     * @param _id      Token id to burn\\n     * @param _amount  The amount to be burned\\n     */\\n    function burn(\\n        address _from,\\n        uint256 _id,\\n        uint256 _amount\\n    ) public onlyOwner {\\n        tokenSupply[_id] = tokenSupply[_id].sub(_amount);\\n        _burn(_from, _id, _amount);\\n    }\\n\\n    /**\\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        public\\n        view\\n        returns (bool isOperator)\\n    {\\n        // Whitelist OpenSea proxy contract for easy trading.\\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\n        if (address(proxyRegistry.proxies(_owner)) == _operator) {\\n            return true;\\n        }\\n\\n        return ERC1155.isApprovedForAll(_owner, _operator);\\n    }\\n\\n    /**\\n     * @dev Returns whether the specified token exists by checking to see if it has a creator\\n     * @param _id uint256 ID of the token to query the existence of\\n     * @return bool whether the token exists\\n     */\\n    function _exists(uint256 _id) internal view returns (bool) {\\n        return creators[_id] != address(0);\\n    }\\n\\n    /**\\n     * @dev calculates the next token ID based on value of _currentTokenID\\n     * @return uint256 for the next token ID\\n     */\\n    function _getNextTokenID() private view returns (uint256) {\\n        return _currentTokenID.add(1);\\n    }\\n\\n    /**\\n     * @dev increments the value of _currentTokenID\\n     */\\n    function _incrementTokenTypeId() private {\\n        _currentTokenID++;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IStratAccessNft\",\"name\":\"_nft\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDuration\",\"type\":\"uint256\"}],\"name\":\"DurationChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IStratAccessNft\",\"name\":\"newNFT\",\"type\":\"address\"}],\"name\":\"NFTSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardNotifyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardTransferAmount\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commonLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNFTId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minNFTId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IStratAccessNft\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardNotifyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTransferAmount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rareLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rareMinId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_common\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unique\",\"type\":\"uint256\"}],\"name\":\"setDepositLimits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMinMaxNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IStratAccessNft\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"setNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"}],\"name\":\"setRewardsDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniqueId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniqueLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usedNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DarkParadiseV2","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b36a0671b3d49587236d7833b01e79798175875f0000000000000000000000005af15da84a4a6edf2d9fa6720de921e1026e37b700000000000000000000000073968b9a57c6e53d41345fd57a6e6ae27d6cdb2f000000000000000000000000c5f572b705cae1893cdceb5161ce40e2fc5bb6cd","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}