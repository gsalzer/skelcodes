{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\r\n\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name_, symbol_);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overloaded;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n    uint256[45] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: client/src/contracts/ProductToken/interface/BancorBondingCurveV1Interface.sol\r\n\r\npragma solidity ^0.8.2;\r\n\r\ninterface BancorBondingCurveV1Interface {\r\n\r\n  function calculatePriceForNTokens(\r\n    uint32 _supply,\r\n    uint256 _reserveBalance,\r\n    uint32 _reserveRatio,\r\n    uint32 _amount\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256\r\n    );\r\n\r\n  function calculatePurchaseReturn(\r\n    uint32 _supply,\r\n    uint256 _reserveBalance,\r\n    uint32 _reserveRatio,\r\n    uint256 _depositAmount\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint32\r\n    );\r\n\r\n  function calculateSaleReturn(\r\n    uint32 _supply,\r\n    uint256 _reserveBalance,\r\n    uint32 _reserveRatio,\r\n    uint32 _sellAmount\r\n  )\r\n    external\r\n    view\r\n    returns(\r\n      uint256\r\n    );\r\n}\r\n\r\n// File: client/src/contracts/ProductToken/Escrow.sol\r\n\r\n\r\npragma solidity ^0.8.2;\r\n\r\ncontract Escrow {\r\n\r\n  /**\r\n     * @dev this is the enum representation of shipping status.\r\n     * INITIAL                When an escrow has been created\r\n     * AWAITING_PROCESSING    When an escrow has been locked and product is in transit\r\n     * COMPLETE_USER_REFUND   When an product shipment has failed and user refund is happening\r\n     * COMPLETE               When an shipment is delivered successfully\r\n  */\r\n  enum escrowState {\r\n    INITIAL,\r\n    AWAITING_PROCESSING,\r\n    COMPLETE_USER_REFUND,\r\n    COMPLETE\r\n  }\r\n\r\n  /**\r\n     * @dev this is the struct class of escrow.\r\n     * state                  The current shipping status\r\n     * amount                 The amount of token being redeemed\r\n     * value                  The actual reserve token being locked up\r\n  */\r\n  struct escrowInfo {\r\n    escrowState state;\r\n    uint32 amount;\r\n    uint256 value;\r\n  }\r\n\r\n  mapping(address => escrowInfo[]) public escrowList;       // A list of user to escrow being saved\r\n\r\n  event escrowStateUpdated(address, uint256, escrowInfo);   // Event that's fired when a new redeem request has been created.\r\n\r\n  /**\r\n     * @dev Create a new escrow and add it to the list of pending escrows.\r\n     *\r\n     * @param _amount        The amount of tokens being redeemed\r\n     * @param _value         The value of the product in reserve token\r\n     * @return               The id of the escrow created\r\n  */\r\n  function _addEscrow(uint32 _amount, uint256 _value) internal virtual returns (uint256){\r\n    require(_amount > 0, 'Invalid Amount');\r\n    escrowInfo memory info;\r\n    info.state = escrowState.AWAITING_PROCESSING;\r\n    info.amount = _amount;\r\n    info.value = _value;\r\n    escrowList[msg.sender].push(info);\r\n    uint256 _id = escrowList[msg.sender].length -1;\r\n    emit escrowStateUpdated(msg.sender, _id, info);\r\n    return _id;\r\n  }\r\n\r\n  /**\r\n     * @dev Update state for the redemption process to completed\r\n     * This is triggered by our backend after shipment partner has confirmed delivery\r\n     *\r\n     * @param _buyer        The wallet address of the user\r\n     * @param _id           The cached id of the escrow, retrieved from database\r\n  */\r\n  function _updateUserCompleted(address _buyer, uint256 _id) internal virtual {\r\n    require(_id >=  0 || _id < escrowList[_buyer].length, \"Invalid id\");\r\n    require(!isStateCompleted(escrowList[_buyer][_id].state), \"already completed\");\r\n\r\n    escrowList[_buyer][_id].state = escrowState.COMPLETE;\r\n    emit escrowStateUpdated(_buyer, _id, escrowList[_buyer][_id]);\r\n  }\r\n\r\n  /**\r\n     * @dev Update state for the redemption process to refunded\r\n     * This is triggered by our backend after shipment partner has confirmed deilvery failed\r\n     *\r\n     * @param _buyer        The wallet address of the user\r\n     * @param _id           The cached id of the escrow, retrieved from database\r\n     * @return              The amount of reserve currency in dai that needs to be refunded.\r\n  */\r\n  function _updateUserRefund(address _buyer, uint256 _id) internal virtual returns (uint) {\r\n    require(_id >=  0 || _id < escrowList[_buyer].length, \"Invalid id\");\r\n    require(!isStateCompleted(escrowList[_buyer][_id].state), \"already completed\");\r\n\r\n    escrowList[_buyer][_id].state = escrowState.COMPLETE_USER_REFUND;\r\n    emit escrowStateUpdated(_buyer, _id, escrowList[_buyer][_id]);\r\n    return escrowList[_buyer][_id].value;\r\n  }\r\n\r\n  /**\r\n     * @dev Helper function to check whether a escrow state is completed\r\n     *\r\n     * @param _state       The state to be checked\r\n  */\r\n  function isStateCompleted(escrowState _state) public pure virtual returns (bool) {\r\n    return _state == escrowState.COMPLETE ||\r\n         _state == escrowState.COMPLETE_USER_REFUND;\r\n  }\r\n\r\n  /**\r\n     * @dev Return the list of all escrows created for a certain user\r\n     *\r\n     * @param _buyer       The address of the buyer\r\n     * @return             A list of past escrows\r\n  */\r\n  function getEscrowHistory(address _buyer) external view virtual returns (escrowInfo [] memory) {\r\n    return escrowList[_buyer];\r\n  }\r\n\r\n  /** \r\n     * @dev Get status of a particular redemption process\r\n     *\r\n     * @param _buyer       The address of the buyer\r\n     * @param _id          The cached id of the escrow, retrieved from database\r\n     * @return             The current status\r\n  */\r\n  function getRedeemStatus(address _buyer, uint256 _id) external view virtual returns (escrowState) {\r\n    require(_id >=  0 || _id < escrowList[_buyer].length, \"Invalid id\");\r\n    return escrowList[_buyer][_id].state;\r\n  }\r\n\r\n}\r\n\r\n// File: client/src/contracts/ProductToken/ProductToken.sol\r\n\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title ProductToken\r\n/// @notice This is version 0 of the product token implementation.\r\n/// @dev This contract lays the foundation for transaction computations, including\r\n///   bonding curve calculations and variable management. Version 0 of this contract\r\n///   does not implement any transaction logic.\r\ncontract ProductToken is ERC20Upgradeable, Escrow, OwnableUpgradeable {\r\n\tusing SafeMathUpgradeable for uint256;\r\n\r\n\tevent Buy(address indexed sender, uint32 amount, uint256 price);\t\t// event to fire when a new token is minted\r\n  event Sell(address indexed sender, uint32 amount, uint256 price);\t\t// event to fire when a token has been sold back\r\n  event Tradein(address indexed sender, uint32 amount);\t\t\t\t\t\t\t// event to fire when a token is redeemed in the real world\r\n  event Tradable(bool isTradable);\r\n\r\n  bool private isTradable;\r\n  uint256 public reserveBalance;      // amount of liquidity in the pool\r\n  uint256 public tradeinReserveBalance;      // amount of liquidity in the pool\r\n  uint32 public reserveRatio;         // computed from the exponential factor in the\r\n  uint32 public maxTokenCount;        // max token count, determined by the supply of our physical product\r\n  uint32 public tradeinCount;         // number of tokens burned through redeeming procedure. This will drive price up permanently\r\n  uint32 internal supplyOffset;       // an initial value used to set an initial price. This is not included in the total supply.\r\n  address private _manager;\r\n\r\n  BancorBondingCurveV1Interface internal bondingCurve;\r\n\r\n  modifier onlyIfTradable {\r\n      require(\r\n          isTradable,\r\n          \"unable to trade now\"\r\n      );\r\n      _;\r\n  }\r\n\r\n\t/**\r\n   * @dev initializer function.\r\n   *\r\n   * @param _name                     the name of this token\r\n   * @param _symbol                   the symbol of this token\r\n   * @param _reserveRatio             the reserve ratio in the curve function. Number in parts per million\r\n   * @param _maxTokenCount\t\t\t\t\t\tthe amount of token that will exist for this type.\r\n   * @param _supplyOffset             this amount is used to determine initial price.\r\n   * @param _baseReserve              the base amount of reserve tokens, in accordance to _supplyOffset.\r\n   *\r\n  */\r\n  function initialize(string memory _name, string memory _symbol, address _bondingCurveAddress,\r\n      uint32 _reserveRatio, uint32 _maxTokenCount, uint32 _supplyOffset, uint256 _baseReserve) public virtual initializer{\r\n    __Ownable_init();\r\n    __ERC20_init(_name, _symbol);\r\n    __ProductToken_init_unchained(_bondingCurveAddress, _reserveRatio, _maxTokenCount, _supplyOffset, _baseReserve);\r\n  }\r\n\r\n  /**\r\n   * @dev unchained initializer function.\r\n   *\r\n   * @param _reserveRatio             the reserve ratio in the curve function. Number in parts per million\r\n   * @param _maxTokenCount            the amount of token that will exist for this type.\r\n   * @param _supplyOffset             this amount is used to determine initial price.\r\n   * @param _baseReserve              the base amount of reserve tokens, in accordance to _supplyOffset.\r\n   *\r\n  */\r\n  function __ProductToken_init_unchained(address _bondingCurveAddress, uint32 _reserveRatio, uint32 _maxTokenCount, uint32 _supplyOffset, uint256 _baseReserve) internal initializer{\r\n    require(_maxTokenCount > 0, \"Invalid max token count.\");\r\n    require(_reserveRatio > 0, \"Invalid reserve ratio\");\r\n    bondingCurve = BancorBondingCurveV1Interface(_bondingCurveAddress);\r\n    reserveBalance = _baseReserve;\r\n    tradeinReserveBalance = _baseReserve;\r\n    supplyOffset = _supplyOffset;\r\n    reserveRatio = _reserveRatio;\r\n    maxTokenCount = _maxTokenCount;\r\n  }\r\n\r\n  function decimals() public view virtual override returns (uint8) {\r\n      return 0;\r\n  }\r\n\r\n  /**\r\n   * @dev requires function to be called from owner. sets a bonding curve implementation for this product.\r\n   *\r\n   * @param _address             the address of the bonding curve implementation\r\n   *\r\n  */\r\n  function setBondingCurve(address _address) external virtual onlyOwner {\r\n    require(_address!=address(0), \"Invalid address\");\r\n    bondingCurve = BancorBondingCurveV1Interface(_address);\r\n  }\r\n\r\n  /**\r\n   * @dev requires function to be called from owner. this enables customers to buy, sell, or redeem the product.\r\n   *\r\n  */\r\n  function launch() external virtual onlyOwner {\r\n    require(!isTradable, 'The product token is already launched');\r\n    isTradable = true;\r\n    emit Tradable(isTradable);\r\n  }\r\n\r\n  /**\r\n   * @dev requires function to be called from owner. this prevents customers from buying, selling, or redeeming the product.\r\n   *\r\n  */\r\n  function pause() external virtual onlyOwner {\r\n    require(isTradable, 'The product token is already paused');\r\n    isTradable = false;\r\n    emit Tradable(isTradable);\r\n  }\r\n\r\n  fallback () external { }\r\n\r\n  /**\r\n   * @dev Function to check how many tokens of this product are currently available for purchase,\r\n   * by taking the difference between max cap count and current token in circulation or burned.\r\n   *\r\n   * @return available                the number of tokens available\r\n  */\r\n  function getAvailability()\r\n    public view virtual returns (uint32 available)\r\n  {\r\n    return maxTokenCount - uint32(totalSupply()) - tradeinCount;    // add safemath for uint32 later\r\n  }\r\n\r\n  /**\r\n   * @dev Function that computes supply value for the bonding curve\r\n   * based on current token in circulation, token offset initialized, and tokens already redeemed.\r\n   *\r\n   * @return supply                   supply value for bonding curve calculation.\r\n  */\r\n  function _getTotalSupply()\r\n    internal view virtual returns (uint32 supply)\r\n  {\r\n    return uint32(totalSupply().add(uint256(tradeinCount)).add(uint256(supplyOffset)));\r\n  }\r\n\r\n  /**\r\n   * @dev Function that computes current price for a token through bonding curve calculation\r\n   * based on parameters such as total supply, reserve balance, and reserve ratio.\r\n   *\r\n   * @return price                   current price in reserve token (in our case, this is dai). (with 4% platform fee)\r\n  */\r\n  function getCurrentPrice()\r\n  \tpublic view virtual returns\t(uint256 price)\r\n  {\r\n    return getPriceForN(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Function that computes price total for buying n token through bonding curve calculation\r\n   * based on parameters such as total supply, reserve balance, and reserve ratio.\r\n   *\r\n   * @param  _amountProduct          token amount in traded token\r\n   * @return price                   total price in reserve token (in our case, this is dai). (with 4% platform fee)\r\n  */\r\n  function getPriceForN(uint32 _amountProduct)\r\n  \tpublic view virtual returns\t(uint256 price)\r\n  {\r\n    (uint value, uint fee) = _getPriceForN(_amountProduct);\r\n    return value.add(fee);\r\n  }\r\n\r\n  function _getPriceForN(uint32 _amountProduct)\r\n  \tinternal view virtual returns\t(uint256, uint256) {\r\n      uint256 price = bondingCurve.calculatePriceForNTokens(_getTotalSupply(), reserveBalance, reserveRatio, _amountProduct);\r\n      //4% is the platform transaction fee\r\n      uint256 fee = price.mul(4e12).div(1e14);\r\n      return (price, fee);\r\n    }\r\n\r\n  function _buyReturn(uint256 _amountReserve)\r\n    internal view virtual returns (uint32, uint)\r\n  {\r\n    uint value = _amountReserve.mul(1e12).div(1.04e12);\r\n    //4% is the platform transaction fee\r\n    uint fee = value.mul(4e12).div(1e14);\r\n    uint32 amount = bondingCurve.calculatePurchaseReturn(_getTotalSupply(), reserveBalance, reserveRatio, value.sub(fee));\r\n    return (amount, fee);\r\n  }\r\n\r\n  /**\r\n   * @dev Function that computes number of product tokens one can buy given an amount in reserve token.\r\n   *\r\n   * @param  _amountReserve          purchaing amount in reserve token (dai)(with 4% platform fee)\r\n   * @return mintAmount              number of tokens in traded token that can be purchased by given amount.\r\n  */\r\n  function calculateBuyReturn(uint256 _amountReserve)\r\n    public view virtual returns (uint32 mintAmount)\r\n  {\r\n    (uint32 amount,) = _buyReturn(_amountReserve);\r\n    return amount;\r\n  }\r\n\r\n  function _sellReturn(uint32 _amountProduct)\r\n    internal view virtual returns (uint256, uint256)\r\n  {\r\n    // ppm of 98%. 2% is the platform transaction fee\r\n    uint reimburseAmount = bondingCurve.calculateSaleReturn(_getTotalSupply(), reserveBalance, reserveRatio, _amountProduct);\r\n    uint fee = reimburseAmount.mul(2e10).div(1e12);\r\n    return (reimburseAmount, fee);\r\n  }\r\n\r\n  /**\r\n   * @dev Function that computes selling price in reserve tokens given an amount in traded token.\r\n   *\r\n   * @param  _amountProduct          selling amount in product token\r\n   * @return soldAmount              total amount that will be transferred to the seller (with 2% platform fee).\r\n  */\r\n  function calculateSellReturn(uint32 _amountProduct)\r\n    public view virtual returns (uint256 soldAmount)\r\n  {\r\n    (uint reimburseAmount, uint fee) = _sellReturn(_amountProduct);\r\n    return reimburseAmount.sub(fee);\r\n  }\r\n\r\n   /**\r\n   * @dev calculates the return for a given conversion (in product token)\r\n   * This function validate whether is enough to purchase token.\r\n   * If enough, the function will deduct, and then mint one token for the user. Any extras are return as change.\r\n   * If not enough, will return as change directly\r\n   * then replace the _amount with the actual amount and proceed with the above logic.\r\n   *\r\n   * @param _deposit              reserve token deposited\r\n   *\r\n   * @return token                amount bought in product token\r\n   * @return change               amount of change in reserve tokens.\r\n   * @return price\r\n   * @return fee\r\n  */\r\n  function _buy(uint256 _deposit)\r\n    internal virtual returns (uint32, uint256, uint256, uint256)\r\n  {\r\n  \trequire(getAvailability() > 0, \"Sorry, this token is sold out.\");\r\n    require(_deposit > 0, \"Deposit must be non-zero.\");\r\n\r\n    (uint price, uint fee ) = _getPriceForN(1);\r\n\r\n    if (price > _deposit) {\r\n      return (0, _deposit, 0, 0);\r\n    }\r\n    _mint(msg.sender, 1);\r\n    reserveBalance = reserveBalance.add(price);\r\n    emit Buy(msg.sender, 1, price.add(fee));\r\n    return (1, _deposit.sub(price).sub(fee), price, fee);\r\n  }\r\n\r\n   /**\r\n   * @dev calculates the return for a given conversion (in the reserve token)\r\n   * This function will try to compute the amount of liquidity one gets by selling _amount token,\r\n   * then it will initiate a transfer.\r\n   *\r\n   * @param _amount              amount of product token wishes to be sold\r\n   *\r\n   * @return amount               amount sold in reserved token\r\n   * @return fee\r\n  */\r\n  function _sellForAmount(uint32 _amount)\r\n    internal virtual returns (uint256, uint256)\r\n  {\r\n  \trequire(_amount > 0, \"Amount must be non-zero.\");\r\n    require(balanceOf(msg.sender) >= _amount, \"Insufficient tokens to sell.\");\r\n    // calculate amount of liquidity to reimburse\r\n  \t(uint256 reimburseAmount, uint256 fee) = _sellReturn(_amount);\r\n \t\treserveBalance = reserveBalance.sub(reimburseAmount);\r\n    _burn(msg.sender, _amount);\r\n\r\n    emit Sell(msg.sender, _amount, reimburseAmount);\r\n    return (reimburseAmount.sub(fee), fee);\r\n  }\r\n\r\n  function calculateTradinReturn(uint32 _amount)\r\n    public view virtual returns (uint256)\r\n  {\r\n  \trequire(_amount > 0, \"invalid amount\");\r\n    uint32 supply = uint32(uint256(_amount).add(uint256(tradeinCount)).add(uint256(supplyOffset)));\r\n  \treturn bondingCurve.calculateSaleReturn(supply, tradeinReserveBalance, reserveRatio, _amount);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev used to update the status of redemption to \"User Complete\" after an escrow process has been started.\r\n   *\r\n   * @param buyer                 the wallet address of product buyer\r\n   * @param id                    the id of the escrow, returned to the user after starting of redemption process\r\n  */\r\n  function updateUserCompleted(address buyer, uint256 id) external virtual {\r\n    require(msg.sender == owner() || msg.sender == _manager, 'permission denied');\r\n    require(buyer != address(0), \"Invalid buyer\");\r\n    _updateUserCompleted(buyer, id);\r\n  }\r\n\r\n  /**\r\n   * @dev used to update the status of redemption to \"User Refunded\" after an escrow process has been started.\r\n   *\r\n   * @param buyer                 the wallet address of product buyer\r\n   * @param id                    the id of the escrow, returned to the user after starting of redemption process\r\n  */\r\n  function updateUserRefund(address buyer, uint256 id) external virtual{\r\n    require(msg.sender == owner() || msg.sender == _manager, 'permission denied');\r\n    require(buyer != address(0), \"Invalid buyer\");\r\n    uint256 value = _updateUserRefund(buyer, id);\r\n    require(value >0 , \"Invalid value\");\r\n    _refund(buyer, value);\r\n  }\r\n\r\n  /**\r\n   * @dev refund function.\r\n   * This function returns the equivalent amount of Dai (reserve currency) to a product owner if an redemption fails\r\n   * This is only triggered in the extremely rare cases.\r\n   * This function is not implemented in Version 0 of Product Token\r\n   *\r\n   * @param _buyer       The wallet address of the owner whose product token is under the redemption process\r\n   * @param _value       The market value of the token being redeemed\r\n  */\r\n  function _refund(address _buyer, uint256 _value) internal virtual {\r\n    // override\r\n  }\r\n\r\n  function setManager(address addr_) external virtual onlyOwner {\r\n    require(addr_ != address(0), 'invalid address');\r\n    _manager = addr_;\r\n  }\r\n\r\n  function getManager() external view virtual returns(address) {\r\n    return _manager;\r\n  }\r\n\r\n}\r\n\r\n// File: client/src/contracts/ProductToken/interface/IVNFT.sol\r\n\r\n\r\npragma solidity ^0.8.2;\r\n\r\ninterface IVNFT {\r\n\r\n    function unitsInToken(uint256 tokenId) external view returns (uint256 units);\r\n\r\n    function approve(address to, uint256 tokenId, uint256 units) external;\r\n\r\n    function allowance(uint256 tokenId, address spender) external view returns (uint256 allowed);\r\n\r\n    function split(uint256 tokenId, uint256[] calldata units) external returns (uint256[] memory newTokenIds);\r\n\r\n    function merge(uint256[] calldata tokenIds, uint256 targetTokenId) external;\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId,\r\n        uint256 units) external returns (uint256 newTokenId);\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId,\r\n        uint256 units, bytes calldata data) external returns (uint256 newTokenId);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId, uint256 targetTokenId,\r\n        uint256 units) external;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, uint256 targetTokenId,\r\n        uint256 units, bytes calldata data) external;\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n}\r\n\r\n// File: client/src/contracts/ProductToken/ProductTokenV0.sol\r\n\r\n\r\npragma solidity ^0.8.3;\r\n\r\n\r\n\r\n\r\n\r\n/// @title ProductTokenV0\r\n/// @notice This is version 0 of the product token implementation.\r\n/// @dev This contract builds on top of version 0 by including transaction logics, such as buy and sell transfers\r\n///    and exchange rate computation by including a price oracle.\r\ncontract ProductTokenV0 is ProductToken {\r\n\tusing SafeMathUpgradeable for uint256;\r\n\r\n    struct supplierInfo {\r\n        uint256 amount;\r\n        address wallet;\r\n    }\r\n    struct voucherInfo {\r\n        address addr;\r\n        uint256 tokenId;\r\n    }\r\n\r\n    supplierInfo public supplier;\r\n    voucherInfo public voucher;\r\n\r\n    function setupVoucher(address addr_, uint256 tokenId_) external virtual onlyOwner{\r\n        require(addr_ != address(0), 'invalid address');\r\n        voucher.addr = addr_;\r\n        voucher.tokenId = tokenId_;\r\n    }\r\n\r\n    function claimVoucher(uint256 tokenId_) external virtual onlyOwner{\r\n        require(tokenId_ != 0, 'invalid id');\r\n\r\n        uint256 amount = IVNFT(voucher.addr).unitsInToken(voucher.tokenId);\r\n        IVNFT(voucher.addr).transferFrom(address(this), owner(), voucher.tokenId , tokenId_, amount);\r\n    }\r\n\r\n    function buyByVoucher(uint256 tokenId_, uint256 maxPrice_) external virtual onlyIfTradable{\r\n        require(tokenId_ >= 0, \"Invalid id\");\r\n        require(maxPrice_ > 0, \"invalid max price\");\r\n        IVNFT instance = IVNFT(voucher.addr);\r\n        instance.transferFrom(msg.sender, address(this), tokenId_, voucher.tokenId, maxPrice_);\r\n\r\n        (uint256 amount,uint256 change, uint price, uint256 fee)  = _buy(maxPrice_);\r\n        if (amount > 0) {\r\n            if(change > 0) {\r\n                instance.transferFrom(address(this), msg.sender, voucher.tokenId, tokenId_, change);\r\n            }\r\n            _updateSupplierFee(fee.mul(1e12).div(4e12));\r\n        } else {\r\n            instance.transferFrom(address(this), msg.sender, voucher.tokenId, tokenId_, maxPrice_);\r\n        }\r\n    }\r\n\r\n    function sellByVoucher(uint256 tokenId_, uint32 amount_) external virtual onlyIfTradable{\r\n        (uint256 price, uint256 fee )= _sellForAmount(amount_);\r\n        IVNFT(voucher.addr).transferFrom(address(this), msg.sender, voucher.tokenId, tokenId_, price);\r\n        _updateSupplierFee(fee.mul(1e12).div(2e12));\r\n    }\r\n\r\n    function sellByVoucher(uint32 amount_) external virtual onlyIfTradable{\r\n        (uint256 price, uint256 fee )= _sellForAmount(amount_);\r\n        IVNFT(voucher.addr).transferFrom(address(this), msg.sender, voucher.tokenId, price);\r\n        _updateSupplierFee(fee.mul(1e12).div(2e12));\r\n    }\r\n\r\n\r\n    function tradeinVoucher(uint32 amount_) external virtual onlyIfTradable {\r\n        require(amount_ > 0, \"Amount must be non-zero.\");\r\n        require(balanceOf(msg.sender) >= amount_, \"Insufficient tokens to burn.\");\r\n\r\n        (uint256 reimburseAmount, uint fee) = _sellReturn(amount_);\r\n        uint256 tradinReturn = calculateTradinReturn(amount_);\r\n        _updateSupplierFee(fee.mul(1e12).div(2e12).add(tradinReturn));\r\n        _addEscrow(amount_,  reimburseAmount.sub(fee));\r\n        _burn(msg.sender, amount_);\r\n        tradeinCount = tradeinCount + amount_;\r\n        tradeinReserveBalance = tradeinReserveBalance.add(tradinReturn);\r\n        emit Tradein(msg.sender, amount_);\r\n    }\r\n\r\n    function setSupplier( address wallet_) external virtual onlyOwner {\r\n        require(wallet_!=address(0), \"Address is invalid\");\r\n        supplier.wallet = wallet_;\r\n    }\r\n\r\n    function claimSupplier(uint256 tokenId_, uint256 amount_) external virtual{\r\n        require(supplier.wallet!=address(0), \"wallet is invalid\");\r\n        require(msg.sender == supplier.wallet, \"The address is not allowed\");\r\n        if (amount_ <= supplier.amount){\r\n            IVNFT(voucher.addr).transferFrom(address(this), msg.sender, voucher.tokenId, tokenId_, amount_);\r\n            supplier.amount = supplier.amount.sub(amount_);\r\n        }\r\n    }\r\n\r\n    function _updateSupplierFee(uint256 fee) virtual internal {\r\n        if( fee > 0 ) {\r\n            supplier.amount = supplier.amount.add(fee);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev this function returns the amount of reserve balance that the supplier can withdraw from the dapp.\r\n    */\r\n    function getSupplierBalance() public view virtual returns (uint256) {\r\n        return supplier.amount;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTradable\",\"type\":\"bool\"}],\"name\":\"Tradable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"}],\"name\":\"Tradein\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum Escrow.escrowState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Escrow.escrowInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"escrowStateUpdated\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice_\",\"type\":\"uint256\"}],\"name\":\"buyByVoucher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountReserve\",\"type\":\"uint256\"}],\"name\":\"calculateBuyReturn\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"mintAmount\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_amountProduct\",\"type\":\"uint32\"}],\"name\":\"calculateSellReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"soldAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_amount\",\"type\":\"uint32\"}],\"name\":\"calculateTradinReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"claimSupplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"claimVoucher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrowList\",\"outputs\":[{\"internalType\":\"enum Escrow.escrowState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailability\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"available\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"getEscrowHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Escrow.escrowState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Escrow.escrowInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_amountProduct\",\"type\":\"uint32\"}],\"name\":\"getPriceForN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getRedeemStatus\",\"outputs\":[{\"internalType\":\"enum Escrow.escrowState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupplierBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_bondingCurveAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_reserveRatio\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_maxTokenCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_supplyOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_baseReserve\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Escrow.escrowState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"isStateCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveRatio\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"amount_\",\"type\":\"uint32\"}],\"name\":\"sellByVoucher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"amount_\",\"type\":\"uint32\"}],\"name\":\"sellByVoucher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBondingCurve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet_\",\"type\":\"address\"}],\"name\":\"setSupplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"setupVoucher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeinCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeinReserveBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"amount_\",\"type\":\"uint32\"}],\"name\":\"tradeinVoucher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"updateUserCompleted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"updateUserRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voucher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ProductTokenV0","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"50","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ee8d828c4cc3657dfe864cfdbf0cbf18c72340e3cc20f9ff6579b4ec700eacd5"}]}