{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/safety/v2/helpers/SM2Recovery.sol\": {\r\n      \"content\": \"// Contracts by dYdX Foundation. Individual files are released under different licenses.\\n//\\n// https://dydx.community\\n// https://github.com/dydxfoundation/governance-contracts\\n//\\n// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport { SafeERC20 } from '../../../dependencies/open-zeppelin/SafeERC20.sol';\\nimport { IERC20 } from '../../../interfaces/IERC20.sol';\\nimport { VersionedInitializable } from '../../../utils/VersionedInitializable.sol';\\n\\n/**\\n * @title SM2Recovery\\n * @author dYdX\\n *\\n * @notice Distributes funds to stakers as part of the Safety Module v1 -> v2 recovery process.\\n */\\ncontract SM2Recovery is\\n  VersionedInitializable\\n{\\n  using SafeERC20 for IERC20;\\n\\n  // ============ Events ============\\n\\n  event Claimed(\\n    address staker,\\n    uint256 amount\\n  );\\n\\n  // ============ Constants ============\\n\\n  IERC20 public immutable TOKEN;\\n\\n  // ============ Storage ============\\n\\n  mapping(address => uint256) internal _OWED_AMOUNTS_;\\n\\n  // ============ Constructor ============\\n\\n  constructor(\\n    IERC20 token\\n  ) {\\n    TOKEN = token;\\n  }\\n\\n  // ============ External Functions ============\\n\\n  function initialize()\\n    external\\n    initializer\\n  {\\n    // Hard-coded list of amounts owed, calculated by taking the staked amount for each address and\\n    // adding 10% additional compensation.\\n    //\\n    // Snapshot taken on September 14, 2021 UTC, last tx was on September 9, 2021 UTC.\\n    _OWED_AMOUNTS_[0x8031EEC1118D1321387b1870F32984f72b447b04] = 64268082313114004568;\\n    _OWED_AMOUNTS_[0x5AcABC3222A7b74884bEC8efe28A7A69A7920818] = 552458868361822400896;\\n    _OWED_AMOUNTS_[0x5F5A46a8471F60b1E9F2eD0b8fc21Ba8b48887D8] = 235077596410469150;\\n    _OWED_AMOUNTS_[0x0DB0f4506F5De744052D90f04E3fcA3D1dD3600d] = 384593000000000000000;\\n    _OWED_AMOUNTS_[0x7457865bA58C4Fe72Fc43Ec8fDF61c818CAA93F4] = 1300887470344112802478;\\n    _OWED_AMOUNTS_[0x9c4d592042F959254485d443bBc337d29572264F] = 3300000000000000000000;\\n    _OWED_AMOUNTS_[0x80D0d54050C15971b21e877D95441800f5AA9ee8] = 11000000000000000000000;\\n    _OWED_AMOUNTS_[0x5B53d310c73Afd70f03b7a373b3e2451983228c1] = 1280981223066754379678;\\n    _OWED_AMOUNTS_[0x3286188FeA86932334F566E03722EEFd432a0E02] = 1317109351284421555527;\\n    _OWED_AMOUNTS_[0xE3666187c7Fbd30ea514a00747f27BeF2Df27d69] = 1477556477490299423613;\\n    _OWED_AMOUNTS_[0xDf6Db53933ebca389eC348fF1959C01364071144] = 7095256507486694584870;\\n    _OWED_AMOUNTS_[0xd6137678698f5304bEf86262332Be671618d5d08] = 7055301000000000000000;\\n    _OWED_AMOUNTS_[0xc4a69B137d22b52A36328F3ac6d5Aa9984fAab8E] = 4784593000000000000000;\\n    _OWED_AMOUNTS_[0x302240E264d6CA3d83E7567f8A9150AacaB735bc] = 5674396523298561944146;\\n    _OWED_AMOUNTS_[0x429f13e4ec5E57c9AE2388c5020E372F73fe168A] = 1286368590769499516847;\\n    _OWED_AMOUNTS_[0xe70949032907349A132E6793140679b43072F1E6] = 1718241113998470540361;\\n    _OWED_AMOUNTS_[0x57e2D81A82ACCCfaD9133929805CFf7f6dFc3bF4] = 181238687144559973685;\\n    _OWED_AMOUNTS_[0xC1AB8632e3f7fF2b62BcFC5c5DEba3aAA21799c9] = 2365000000000000000000;\\n    _OWED_AMOUNTS_[0x4F56A59804D464f44A3efc336FDf18A442fA8a72] = 1279861000000000000000;\\n    _OWED_AMOUNTS_[0x8C5bA8D0017C92527Daa77b145919A77614dfd9e] = 1281509901429422484117;\\n    _OWED_AMOUNTS_[0x7baf9864ecb3cEc21523508C86a1a3EFcE2408be] = 342338041811379508166;\\n    _OWED_AMOUNTS_[0x88cE8A4b8896Fab3556Cf23308F3387C55b0d0B7] = 4785681587877185155372;\\n    _OWED_AMOUNTS_[0xaCe95175B107f0d6A7A2949F7Af83d7A3528fB4e] = 1298458905663869980155;\\n    _OWED_AMOUNTS_[0x2e10104bD7B3e7C659f6F802166Be3FCdCd0C097] = 885095539863312510574;\\n    _OWED_AMOUNTS_[0x190fdb62971A2B0Ec9f037D4a0DaC1B062CCeaBD] = 4513484494342160884;\\n    _OWED_AMOUNTS_[0x0485A925b92F64D195B5f65D0B4C3B72004e98A4] = 4113076000000000000000;\\n    _OWED_AMOUNTS_[0x1b90B46F9Bd6BDcF0adDc4D0601dFAD832FDB1bD] = 1100000000000000000000;\\n    _OWED_AMOUNTS_[0x4CAe5BED586f6E73Ae54EbD40A4AC4eD2c477C34] = 5500000000000000000000;\\n    _OWED_AMOUNTS_[0x2245bE89Fc8faB94ed982e859Aa3212A4e4eB7e5] = 1282856631838285955062;\\n    _OWED_AMOUNTS_[0x0Dd6a8de365b2800F828E95feEf637027ceBfDc6] = 588558977171078055937;\\n    _OWED_AMOUNTS_[0xFF3f61fC642612D7799535132f5B7c5C0855d428] = 1433114383428671659805;\\n    _OWED_AMOUNTS_[0xb97d9350F32C1366016e2C0a55E4A210D1158b22] = 550000000000000000000;\\n    _OWED_AMOUNTS_[0xE629E1F7d250d39AF4d704B486B094A4bA91Ef3b] = 1287201041172069164377;\\n    _OWED_AMOUNTS_[0xaEaB8114f8920A0522F422618c5b9a2c618527c3] = 17835682575238615124669;\\n    _OWED_AMOUNTS_[0x0772C1EfC61Ff9cC902730d92B90403792edFC31] = 10790308971643820273711;\\n    _OWED_AMOUNTS_[0x961f4A36510cbB4ee58EE8FEaf65DC7E36A8e892] = 550000000000000000000;\\n    _OWED_AMOUNTS_[0x0F70c8C6236F4335B791637B8603F711F9829a27] = 10607091128313405834737;\\n    _OWED_AMOUNTS_[0x54276623b82377Ff9cD0a2a9CCB3e5b7430dDc66] = 342603963320765173769;\\n    _OWED_AMOUNTS_[0xb92667E34cB6753449ADF464f18ce1833Caf26e0] = 3474416779777843867269;\\n    _OWED_AMOUNTS_[0x89Cffe1B398FBF0Eb64BE9C08ebcE777Cec47500] = 7055765746048851547169;\\n    _OWED_AMOUNTS_[0x431c7CA252ba1c41ac11E67b2593e930608A60ed] = 732600000000000000000;\\n    _OWED_AMOUNTS_[0x34Fa1d4cc23735f72e38A44C6bEb4bf066862720] = 1279861000000000000000;\\n    _OWED_AMOUNTS_[0x5ef5a01b069dDf4B71d1fe8C1b23064Ffc3Cda92] = 3300000000000000000000;\\n    _OWED_AMOUNTS_[0xFd920E06Db76196987d94f2904D9467B9BE01ccd] = 1288537049417628862842;\\n    _OWED_AMOUNTS_[0xbc113aC29567eE89363E4d07462823F60b8B5528] = 2640000000000000000000;\\n    _OWED_AMOUNTS_[0xD70A24Be28cFAe9Dba87e7eB580B53Cc8Ae4Fe58] = 342533776463304204728;\\n    _OWED_AMOUNTS_[0x3B7b41F27b89F07269A0599F15fBa723f21f2442] = 546879927158663152683;\\n    _OWED_AMOUNTS_[0x9cd4b3F7f05240B5e07F0512ED7976ad4de81467] = 3814116914721288096590;\\n    _OWED_AMOUNTS_[0x19B003465B3b310463f8b925663F746a67c0DB95] = 1279948951048054429868;\\n    _OWED_AMOUNTS_[0x482AbC7795CcfB657DD09c9F0b67312F4ECCFD07] = 3724793551879978926290;\\n    _OWED_AMOUNTS_[0xcD1d9B792B3F8e19E742DC4f49a24e5637D72786] = 10484148886716091999320;\\n    _OWED_AMOUNTS_[0x51447CE0A502366658168Bf5AAf96f51d22AdcEE] = 1282928920964317728794;\\n    _OWED_AMOUNTS_[0xE3939654Deae5f54fD3e6B84b3A7F75f245062d8] = 11029668754351092393909;\\n    _OWED_AMOUNTS_[0x6649371d9236eCcDD7aF96fBA9435D78502354C1] = 1317091832283544853303;\\n    _OWED_AMOUNTS_[0x405B0C43d66D3406FaB0abc0eCee2359CeCe1c4B] = 715032626619900552466;\\n    _OWED_AMOUNTS_[0xE8b67eBf4825FEC2AB6c010A01064f5fa54672a5] = 2200000000000000000000;\\n  }\\n\\n  function claim()\\n    external\\n    returns (uint256)\\n  {\\n    address staker = msg.sender;\\n    uint256 owedAmount = _OWED_AMOUNTS_[staker];\\n\\n    // Update storage.\\n    _OWED_AMOUNTS_[staker] = 0;\\n\\n    // Transfer the owed amount. Will revert if full amount is not available.\\n    TOKEN.safeTransfer(staker, owedAmount);\\n    emit Claimed(staker, owedAmount);\\n    return owedAmount;\\n  }\\n\\n  function getOwedAmount(\\n    address staker\\n  )\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return _OWED_AMOUNTS_[staker];\\n  }\\n\\n  // ============ Internal Functions ============\\n\\n  /**\\n   * @dev Returns the revision of the implementation contract.\\n   *\\n   * @return The revision number.\\n   */\\n  function getRevision()\\n    internal\\n    pure\\n    override\\n    returns (uint256)\\n  {\\n    return 1;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport { IERC20 } from '../../interfaces/IERC20.sol';\\nimport { SafeMath } from './SafeMath.sol';\\nimport { Address } from './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n* @dev Interface of the ERC20 standard as defined in the EIP.\\n*/\\ninterface IERC20 {\\n  /**\\n    * @dev Returns the amount of tokens in existence.\\n    */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n    * @dev Returns the amount of tokens owned by `account`.\\n    */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n    * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n    *\\n    * Returns a boolean value indicating whether the operation succeeded.\\n    *\\n    * Emits a {Transfer} event.\\n    */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n    * @dev Returns the remaining number of tokens that `spender` will be\\n    * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n    * zero by default.\\n    *\\n    * This value changes when {approve} or {transferFrom} are called.\\n    */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n    *\\n    * Returns a boolean value indicating whether the operation succeeded.\\n    *\\n    * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n    * that someone may use both the old and the new allowance by unfortunate\\n    * transaction ordering. One possible solution to mitigate this race\\n    * condition is to first reduce the spender's allowance to 0 and set the\\n    * desired value afterwards:\\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    *\\n    * Emits an {Approval} event.\\n    */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n    * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n    * allowance mechanism. `amount` is then deducted from the caller's\\n    * allowance.\\n    *\\n    * Returns a boolean value indicating whether the operation succeeded.\\n    *\\n    * Emits a {Transfer} event.\\n    */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n    * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n    * another (`to`).\\n    *\\n    * Note that `value` may be zero.\\n    */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n    * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n    * a call to {approve}. `value` is the new allowance.\\n    */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\n\\n/**\\n * @title VersionedInitializable\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n */\\nabstract contract VersionedInitializable {\\n    /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n    uint256 internal lastInitializedRevision = 0;\\n\\n   /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n    modifier initializer() {\\n        uint256 revision = getRevision();\\n        require(revision > lastInitializedRevision, \\\"Contract instance has already been initialized\\\");\\n\\n        lastInitializedRevision = revision;\\n\\n        _;\\n\\n    }\\n\\n    /// @dev returns the revision number of the contract.\\n    /// Needs to be defined in the inherited class as a constant.\\n    function getRevision() internal pure virtual returns(uint256);\\n\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getOwedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SM2Recovery","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000092d6c1e31e14520e676a687f0a93788b716beff5","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}