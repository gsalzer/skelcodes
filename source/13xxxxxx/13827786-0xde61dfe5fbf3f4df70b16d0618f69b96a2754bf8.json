{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"brink-verifiers/External/CallExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.10;\\npragma abicoder v1;\\n\\n/**\\n *    ,,                           ,,                                \\n *   *MM                           db                      `7MM      \\n *    MM                                                     MM      \\n *    MM,dMMb.      `7Mb,od8     `7MM      `7MMpMMMb.        MM  ,MP'\\n *    MM    `Mb       MM' \\\"'       MM        MM    MM        MM ;Y   \\n *    MM     M8       MM           MM        MM    MM        MM;Mm   \\n *    MM.   ,M9       MM           MM        MM    MM        MM `Mb. \\n *    P^YbmdP'      .JMML.       .JMML.    .JMML  JMML.    .JMML. YA.\\n *\\n *    CallExecutor.sol :: 0xDE61dfE5fbF3F4Df70B16D0618f69B96A2754bf8\\n *    etherscan.io verified 2021-12-18\\n */ \\n\\n/**\\n * @dev Used as a proxy for call execution to obscure msg.sender of the\\n * caller. msg.sender will be the address of the CallExecutor contract.\\n *\\n * Instances of Proxy (user account contracts) use CallExecutor to execute\\n * unsigned data calls without exposing themselves as msg.sender. Users can\\n * sign messages that allow public unsigned data execution via CallExecutor\\n * without allowing public calls to be executed directly from their Proxy\\n * contract.\\n *\\n * This is implemented specifically for swap calls that allow unsigned data\\n * execution. If unsigned data was executed directly from the Proxy contract,\\n * an attacker could make a call that satisfies the swap required conditions\\n * but also makes other malicious calls that rely on msg.sender. Forcing all\\n * unsigned data execution to be done through a CallExecutor ensures that an\\n * attacker cannot impersonate the users's account.\\n *\\n */\\ncontract CallExecutor {\\n  /**\\n   * @dev A payable function that executes a call with `data` on the\\n   * contract address `to`\\n   *\\n   * Sets value for the call to `callvalue`, the amount of Eth provided with\\n   * the call\\n   */\\n  function proxyCall(address to, bytes memory data) external payable {\\n    // execute `data` on execution contract address `to`\\n    assembly {\\n      let result := call(gas(), to, callvalue(), add(data, 0x20), mload(data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"proxyCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"CallExecutor","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}