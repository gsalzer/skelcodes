{"status":"1","message":"OK","result":[{"SourceCode":"{\"AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\n/**\\n * Utility library of inline functions on addresses\\n */\\nlibrary AddressUtils {\\n  /**\\n   * Returns whether the target address is a contract\\n   * @dev This function will return false if invoked during the constructor of a contract,\\n   *  as the code is not actually created until after the constructor finishes.\\n   * @param addr address to check\\n   * @return whether the target address is a contract\\n   */\\n  function isContract(address addr) internal view returns (bool) {\\n    uint256 size;\\n    // XXX Currently there is no better way to check if there is a contract in an address\\n    // than to check the size of the code at that address.\\n    // See https://ethereum.stackexchange.com/a/14016/36603\\n    // for more details about how this works.\\n    // TODO Check this again before the Serenity release, because all addresses will be\\n    // contracts then.\\n    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\\n    return size \\u003e 0;\\n  }\\n}\\n\"},\"BuidlNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\nimport \\\"./ILootBox.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./ERC20_transfer.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./AddressUtils.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./String.sol\\\";\\n\\ncontract BuidlNFT is ERC721, Ownable {\\n  using SafeMath for uint256;\\n  using AddressUtils for address;\\n\\n  // Token name\\n  string constant private _name = \\\"Open Source BUIDL Token\\\";\\n\\n  // Token symbol\\n  string constant private _symbol = \\\"BUIDL\\\";\\n\\n  // Equals to `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`\\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\\n  bytes4 constant private ERC721_RECEIVED = 0xf0b9e5ba;\\n\\n  // Provide verification of the relationship between buidler and BUIDL\\n  address public verifier;\\n\\n  // Public URL\\n  string public publicURL;\\n\\n  // Mapping from token ID to owner\\n  mapping(uint256 =\\u003e address) internal _tokenOwner;\\n\\n  // Mapping from token ID to approved address\\n  mapping(uint256 =\\u003e address) internal _tokenApprovals;\\n\\n  // Mapping from owner to number of owned token\\n  mapping(address =\\u003e uint256) internal _ownedTokensCount;\\n\\n  // Mapping from owner to operator approvals\\n  mapping(address =\\u003e mapping(address =\\u003e bool)) internal _operatorApprovals;\\n\\n  // Array with all token ids, used for enumeration\\n  uint256[] internal _allTokens;\\n\\n  // Mapping from owner to list of owned token IDs\\n  mapping(address =\\u003e uint256[]) internal _ownedTokens;\\n\\n  // Mapping from token ID to index of the owner tokens list\\n  mapping(uint256 =\\u003e uint256) internal _ownedTokensIndex;\\n\\n  struct Buidl {\\n    uint256 originalPrice;\\n    uint256 currentPrice;\\n    uint256 txs;\\n    address buidler;\\n  }\\n  mapping(uint256 =\\u003e Buidl) internal _buidls;\\n  mapping(uint256 =\\u003e address) internal _lootBox;\\n\\n  // ERC20 token used in NFT transaction\\n  ERC20 public currency;\\n\\n  bool public miningTax;\\n  bool public initialized;\\n\\n  uint256 constant public UNIT = 1000;\\n  uint256 constant public BUIDLER_TAX = 20; // 2%\\n  uint256 constant public PROTOCOL_TAX = 10; // 1%\\n  uint256 constant public OWNER_INCOME = 700; // 70%\\n  uint256 constant public BUIDLER_INCOME = 200; // 20%\\n  // uint256 constant public PROTOCOL_INCOME = 100; // 1 - OWNER_INCOME - BUIDLER_INCOME = 10%\\n\\n/////////////////////////////////////////// ERC165 //////////////////////////////////////////////\\n\\n  bytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\\n  bytes4 constant private INTERFACE_SIGNATURE_ERC721 = 0x80ac58cd;\\n  bytes4 constant private INTERFACE_SIGNATURE_ERC721METADATA = 0x5b5e139f;\\n  bytes4 constant private INTERFACE_SIGNATURE_ERC721ENUMERABLE = 0x780e9d63;\\n\\n  function supportsInterface(bytes4 _interfaceId) override external pure returns (bool) {\\n    if (\\n      _interfaceId == INTERFACE_SIGNATURE_ERC165 ||\\n      _interfaceId == INTERFACE_SIGNATURE_ERC721 ||\\n      _interfaceId == INTERFACE_SIGNATURE_ERC721METADATA ||\\n      _interfaceId == INTERFACE_SIGNATURE_ERC721ENUMERABLE\\n    ) {\\n      return true;\\n    }\\n\\n    return false;\\n  }\\n\\n/////////////////////////////////////////// ERC165 //////////////////////////////////////////////\\n\\n  event PublicURL(string _url);\\n  event MiningTax(bool _state);\\n  event Verifier(address _verifier);\\n  event LootBox(uint256 indexed _tokenId, address indexed _lootBox);\\n  event HarbergerBuy(uint256 indexed _tokenId, address indexed _buyer, uint256 _price, uint256 _txs);\\n\\n  function initialize(ERC20 _currency, address _verifier) public {\\n    require(!initialized);\\n    initialized = true;\\n    admin = msg.sender;\\n    publicURL = \\\"https://hackerlink.io/buidl/\\\";\\n    currency = _currency;\\n    verifier = _verifier;\\n    emit Verifier(_verifier);\\n  }\\n\\n  /**\\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\\n   * @param _tokenId uint256 ID of the token to validate\\n   */\\n  modifier canTransfer(uint256 _tokenId) {\\n    require(_isApprovedOrOwner(msg.sender, _tokenId));\\n    _;\\n  }\\n\\n  /**\\n   * @dev Gets the token name\\n   * @return string representing the token name\\n   */\\n  function name() override external pure returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Gets the token symbol\\n   * @return string representing the token symbol\\n   */\\n  function symbol() override external pure returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Gets the token url\\n   * @param _tokenId uint256 ID of the token to validate\\n   * @return string representing the token url\\n   */\\n  function tokenURI(uint256 _tokenId) override public view returns (string memory) {\\n    Buidl storage buidl = _buidls[_tokenId];\\n    require(buidl.buidler != address(0));\\n    return (String.appendUintToString(publicURL, _tokenId));\\n  }\\n\\n  /**\\n   * @dev Gets the balance of the specified address\\n   * @param _owner address to query the balance of\\n   * @return uint256 representing the amount owned by the passed address\\n   */\\n  function balanceOf(address _owner) override public view returns (uint256) {\\n    require(_owner != address(0));\\n    return _ownedTokensCount[_owner];\\n  }\\n\\n  /**\\n   * @dev Gets the owner of the specified token ID\\n   * @param _tokenId uint256 ID of the token to query the owner of\\n   * @return owner address currently marked as the owner of the given token ID\\n   */\\n  function ownerOf(uint256 _tokenId) override public view returns (address) {\\n    address owner = _tokenOwner[_tokenId];\\n    require(owner != address(0));\\n    return owner;\\n  }\\n\\n  /**\\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\\n   * @param _owner address owning the tokens list to be accessed\\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\\n   */\\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) override external view returns (uint256) {\\n    require(_index \\u003c balanceOf(_owner));\\n    return _ownedTokens[_owner][_index];\\n  }\\n\\n  /**\\n   * @dev Gets the total amount of tokens stored by the contract\\n   * @return uint256 representing the total amount of tokens\\n   */\\n  function totalSupply() override public view returns (uint256) {\\n    return _allTokens.length;\\n  }\\n\\n  /**\\n   * @dev Gets the token ID at a given index of all the tokens in this contract\\n   * @dev Reverts if the index is greater or equal to the total number of tokens\\n   * @param _index uint256 representing the index to be accessed of the tokens list\\n   * @return uint256 token ID at the given index of the tokens list\\n   */\\n  function tokenByIndex(uint256 _index) override external view returns (uint256) {\\n    require(_index \\u003c totalSupply());\\n    return _allTokens[_index];\\n  }\\n\\n  /**\\n   * @dev Sets the public URL by administrator\\n   * @param _url new public URL\\n   */\\n  function setPublicURL(string memory _url) external onlyOwner {\\n    publicURL = _url;\\n    emit PublicURL(_url);\\n  }\\n\\n  /**\\n   * @dev Sets whether to charge mining tax or not by administrator\\n   * @param _state mining tax state\\n   */\\n  function setMiningTax(bool _state) external onlyOwner {\\n    miningTax = _state;\\n    emit MiningTax(_state);\\n  }\\n\\n  function setVerifier(address _newVerifier) external onlyOwner {\\n    verifier = _newVerifier;\\n    emit Verifier(_newVerifier);\\n  }\\n\\n  /**\\n   * @dev Approves another address to transfer the given token ID\\n   * @dev The zero address indicates there is no approved address.\\n   * @dev There can only be one approved address per token at a given time.\\n   * @dev Can only be called by the token owner or an approved operator.\\n   * @param _to address to be approved for the given token ID\\n   * @param _tokenId uint256 ID of the token to be approved\\n   */\\n  function approve(address _to, uint256 _tokenId) override external {\\n    address owner = ownerOf(_tokenId);\\n    require(_to != owner);\\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\\n\\n    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\\n      _tokenApprovals[_tokenId] = _to;\\n      emit Approval(owner, _to, _tokenId);\\n    }\\n  }\\n\\n  /**\\n   * @dev Gets the approved address for a token ID, or zero if no address set\\n   * @param _tokenId uint256 ID of the token to query the approval of\\n   * @return address currently approved for a the given token ID\\n   */\\n  function getApproved(uint256 _tokenId) override public view returns (address) {\\n    return _tokenApprovals[_tokenId];\\n  }\\n\\n  /**\\n   * @dev Sets or unsets the approval of a given operator\\n   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\\n   * @param _to operator address to set the approval\\n   * @param _approved representing the status of the approval to be set\\n   */\\n  function setApprovalForAll(address _to, bool _approved) override external {\\n    require(_to != msg.sender);\\n    _operatorApprovals[msg.sender][_to] = _approved;\\n    emit ApprovalForAll(msg.sender, _to, _approved);\\n  }\\n\\n  /**\\n   * @dev Tells whether an operator is approved by a given owner\\n   * @param _owner owner address which you want to query the approval of\\n   * @param _operator operator address which you want to query the approval of\\n   * @return bool whether the given operator is approved by the given owner\\n   */\\n  function isApprovedForAll(address _owner, address _operator) override public view returns (bool) {\\n    return _operatorApprovals[_owner][_operator];\\n  }\\n\\n  /**\\n   * @dev Transfers the ownership of a given token ID to another address\\n   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\\n   * @dev Requires the msg sender to be the owner, approved, or operator\\n   * @param _from current owner of the token\\n   * @param _to address to receive the ownership of the given token ID\\n   * @param _tokenId uint256 ID of the token to be transferred\\n  */\\n  function transferFrom(address _from, address _to, uint256 _tokenId) override public canTransfer(_tokenId) {\\n    require(_from != address(0));\\n    require(_to != address(0));\\n\\n    _clearApproval(_from, _tokenId);\\n    _removeTokenFrom(_from, _tokenId);\\n    _addTokenTo(_to, _tokenId);\\n\\n    emit Transfer(_from, _to, _tokenId);\\n  }\\n\\n  /**\\n   * @dev Safely transfers the ownership of a given token ID to another address\\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\\n   *  which is called upon a safe transfer, and return the magic value\\n   *  `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`; otherwise,\\n   *  the transfer is reverted.\\n   * @dev Requires the msg sender to be the owner, approved, or operator\\n   * @param _from current owner of the token\\n   * @param _to address to receive the ownership of the given token ID\\n   * @param _tokenId uint256 ID of the token to be transferred\\n  */\\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) override public canTransfer(_tokenId) {\\n    safeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Safely transfers the ownership of a given token ID to another address\\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\\n   *  which is called upon a safe transfer, and return the magic value\\n   *  `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`; otherwise,\\n   *  the transfer is reverted.\\n   * @dev Requires the msg sender to be the owner, approved, or operator\\n   * @param _from current owner of the token\\n   * @param _to address to receive the ownership of the given token ID\\n   * @param _tokenId uint256 ID of the token to be transferred\\n   * @param _data bytes data to send along with a safe transfer check\\n   */\\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) override public canTransfer(_tokenId) {\\n    transferFrom(_from, _to, _tokenId);\\n    require(_checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\\n  }\\n\\n////////////////////////////////////////////// MAIN //////////////////////////////////////////////\\n\\n  function mint(uint256 _initPrice, uint256 _bid, address _lootBoxAddr, bytes calldata _sign) external {\\n    mint(_initPrice, _bid, _sign);\\n    setLootBox(_bid, _lootBoxAddr);\\n  }\\n\\n  function mint(uint256 _initPrice, uint256 _bid, bytes calldata _sign) public {\\n    _checkBid(_bid, _sign);\\n    if (miningTax) {\\n      uint256 tax = _initPrice.mul(PROTOCOL_TAX) / UNIT;\\n      require(currency.transferFrom(msg.sender, address(this), tax), \\\"no mint tax\\\");\\n    }\\n    _mint(msg.sender, _bid);\\n    _buidls[_bid] = Buidl(_initPrice, _initPrice, 0, msg.sender);\\n  }\\n\\n  function mintFor(\\n    address[] memory _buidler,\\n    uint256[] memory _initPrice,\\n    uint256[] memory _currentPrice,\\n    uint256[] memory _bid,\\n    address[] memory _owner,\\n    uint256[] memory _txs\\n  ) external {\\n    require(!initialized);\\n    for (uint256 i = 0; i \\u003c _buidler.length; i++) {\\n      uint256 bid = _bid[i];\\n      address buidler = _buidler[i];\\n      address owner = _owner[i];\\n\\n      _buidls[bid] = Buidl(_initPrice[i], _currentPrice[i], _txs[i], buidler);\\n      _addTokenTo(owner, bid);\\n      _allTokens.push(bid);\\n\\n      emit Transfer(address(0), buidler, bid);\\n      if (owner != buidler) {\\n        emit Transfer(buidler, owner, bid);\\n      }\\n    }\\n  }\\n\\n  function setLootBox(uint256 _tokenId, address _lootBoxAddr) public {\\n    require(msg.sender == ownerOf(_tokenId));\\n    Buidl storage buidl = _buidls[_tokenId];\\n    require(msg.sender == buidl.buidler);\\n\\n    _lootBox[_tokenId] = _lootBoxAddr;\\n    emit LootBox(_tokenId, _lootBoxAddr);\\n  }\\n\\n  function harbergerBuy(uint256 _tokenId, uint256 _newPrice) external {\\n    address owner = ownerOf(_tokenId);\\n\\n    Buidl storage buidl = _buidls[_tokenId];\\n    uint256 currentPrice = buidl.currentPrice;\\n    require(_newPrice \\u003e currentPrice);\\n\\n    // |\\u003c------------------ newPrice ------------------\\u003e|\\n    // |\\u003c-------- currentPrice --------\\u003e|\\u003c-- premium --\\u003e|\\u003c- tax -\\u003e|\\n    // |\\u003c----------------------- totalSpend ---------------------\\u003e|\\n\\n    // |\\u003c---------------- premium ----------------\\u003e|\\n    // |\\u003c--------- 7 ---------\\u003e|\\u003c--- 2 ---\\u003e|\\u003c- 1 -\\u003e|\\n    // |          OWNER        |  BUIDLER  | PRTCL |\\n  \\n    // |\\u003c------ tax ------\\u003e|\\n    // |\\u003c--- 2 ---\\u003e|\\u003c- 1 -\\u003e|\\n    // |  BUIDLER  | PRTCL |\\n\\n    uint256 premium = _newPrice - currentPrice;\\n    uint256 ownerIncome = premium.mul(OWNER_INCOME) / UNIT;\\n    uint256 buidlerIncome = premium.mul(BUIDLER_INCOME) / UNIT;\\n  \\n    uint256 buidlerTax = _newPrice.mul(BUIDLER_TAX) / UNIT;\\n    uint256 protocolTax = _newPrice.mul(PROTOCOL_TAX) / UNIT;\\n\\n    uint256 totalSpend = _newPrice.add(protocolTax).add(buidlerTax);\\n\\n    require(currency.transferFrom(msg.sender, address(this), totalSpend));\\n    require(currency.transfer(owner, ownerIncome.add(currentPrice)));\\n    require(currency.transfer(buidl.buidler, buidlerIncome.add(buidlerTax)));\\n\\n    uint256 txs = buidl.txs.add(1);\\n    buidl.currentPrice = _newPrice;\\n    buidl.txs = txs;\\n\\n    _clearApproval(owner, _tokenId);\\n    _removeTokenFrom(owner, _tokenId);\\n    _addTokenTo(msg.sender, _tokenId);\\n\\n    require(_checkAndCallSafeTransfer(owner, msg.sender, _tokenId, \\\"BUY\\\"));\\n\\n    // If NFT has an existing Loot Box, it will actively notify the LootBox\\n    address lootBox = _lootBox[_tokenId];\\n    if (lootBox != address(0)) {\\n      try ILootBox(lootBox).afterHarbergerBuy(_tokenId, msg.sender) {} catch {}\\n    }\\n\\n    emit Transfer(owner, msg.sender, _tokenId);\\n    emit HarbergerBuy(_tokenId, msg.sender, _newPrice, txs);\\n  }\\n\\n  function withdraw(uint256 _amount) external onlyOwner {\\n    require(currency.transfer(admin, _amount));\\n  }\\n\\n  function metadataOf(uint256 _tokenId) external view returns (\\n    address owner,\\n    uint256 bid,\\n    uint256 originalPrice,\\n    uint256 currentPrice,\\n    uint256 txs,\\n    address buidler,\\n    string memory url,\\n    address lootBox\\n  ) {\\n    owner = ownerOf(_tokenId);\\n    Buidl storage buidl = _buidls[_tokenId];\\n    bid = _tokenId;\\n    originalPrice = buidl.originalPrice;\\n    currentPrice = buidl.currentPrice;\\n    txs = buidl.txs;\\n    buidler = buidl.buidler;\\n    url = tokenURI(_tokenId);\\n    lootBox = _lootBox[_tokenId];\\n  }\\n\\n////////////////////////////////////////////// MAIN //////////////////////////////////////////////\\n\\n  /**\\n   * @dev Returns whether the given spender can transfer a given token ID\\n   * @param _spender address of the spender to query\\n   * @param _tokenId uint256 ID of the token to be transferred\\n   * @return bool whether the msg.sender is approved for the given token ID,\\n   *  is an operator of the owner, or is the owner of the token\\n   */\\n  function _isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\\n    address owner = ownerOf(_tokenId);\\n    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\\n  }\\n\\n  function _checkBid(uint256 _bid, bytes calldata _sign) internal view {\\n    require(_sign.length == 65, \\\"invalid sign\\\");\\n    bytes32 h = keccak256(abi.encodePacked(msg.sender, _bid));\\n    uint8 v = uint8(bytes1(_sign[64:]));\\n    (bytes32 r, bytes32 s) = abi.decode(_sign[:64], (bytes32, bytes32));\\n    address signer = ecrecover(h, v, r, s);\\n    require(signer == verifier, \\\"wrong signer\\\");\\n  }\\n\\n  /**\\n   * @dev Internal function to mint a new token\\n   * @dev Reverts if the given token ID already exists\\n   * @param _to The address that will own the minted token\\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\\n   */\\n  function _mint(address _to, uint256 _tokenId) internal {\\n    require(_tokenOwner[_tokenId] == address(0));\\n    require(_to != address(0));\\n    _addTokenTo(_to, _tokenId);\\n    _allTokens.push(_tokenId);\\n    emit Transfer(address(0), _to, _tokenId);\\n  }\\n\\n  /**\\n   * @dev Internal function to clear current approval of a given token ID\\n   * @dev Reverts if the given address is not indeed the owner of the token\\n   * @param _owner owner of the token\\n   * @param _tokenId uint256 ID of the token to be transferred\\n   */\\n  function _clearApproval(address _owner, uint256 _tokenId) internal {\\n    require(ownerOf(_tokenId) == _owner);\\n    if (_tokenApprovals[_tokenId] != address(0)) {\\n      _tokenApprovals[_tokenId] = address(0);\\n      emit Approval(_owner, address(0), _tokenId);\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to add a token ID to the list of a given address\\n   * @param _to address representing the new owner of the given token ID\\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\\n   */\\n  function _addTokenTo(address _to, uint256 _tokenId) internal {\\n    require(_tokenOwner[_tokenId] == address(0));\\n    _tokenOwner[_tokenId] = _to;\\n    _ownedTokensCount[_to] = _ownedTokensCount[_to].add(1);\\n  \\n    uint256 length = _ownedTokens[_to].length;\\n    _ownedTokens[_to].push(_tokenId);\\n    _ownedTokensIndex[_tokenId] = length;\\n  }\\n\\n  /**\\n   * @dev Internal function to remove a token ID from the list of a given address\\n   * @param _from address representing the previous owner of the given token ID\\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n   */\\n  function _removeTokenFrom(address _from, uint256 _tokenId) internal {\\n    require(ownerOf(_tokenId) == _from);\\n    _ownedTokensCount[_from] = _ownedTokensCount[_from].sub(1);\\n    _tokenOwner[_tokenId] = address(0);\\n\\n    uint256 tokenIndex = _ownedTokensIndex[_tokenId];\\n    uint256 lastTokenIndex = _ownedTokens[_from].length.sub(1);\\n    uint256 lastToken = _ownedTokens[_from][lastTokenIndex];\\n\\n    _ownedTokens[_from][tokenIndex] = lastToken;\\n    _ownedTokensIndex[lastToken] = tokenIndex;\\n\\n    _ownedTokens[_from].pop();\\n    _ownedTokensIndex[_tokenId] = 0;\\n  }\\n\\n  /**\\n   * @dev Internal function to invoke `onERC721Received` on a target address\\n   * @dev The call is not executed if the target address is not a contract\\n   * @param _from address representing the previous owner of the given token ID\\n   * @param _to target address that will receive the tokens\\n   * @param _tokenId uint256 ID of the token to be transferred\\n   * @param _data bytes optional data to send along with the call\\n   * @return whether the call correctly returned the expected magic value\\n   */\\n  function _checkAndCallSafeTransfer(address _from, address _to, uint256 _tokenId, bytes memory _data) internal returns (bool) {\\n    if (!_to.isContract()) {\\n      return true;\\n    }\\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\\n    return (retval == ERC721_RECEIVED);\\n  }\\n}\\n\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\n/**\\n * @title ERC-165 Standard Interface Detection\\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\\n */\\ninterface ERC165 {\\n  /// @notice Query if a contract implements an interface\\n  /// @param interfaceID The interface identifier, as specified in ERC-165\\n  /// @dev Interface identification is specified in ERC-165. This function\\n  ///  uses less than 30,000 gas.\\n  /// @return `true` if the contract implements `interfaceID` and\\n  ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n  function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\"},\"ERC20_transfer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\ninterface ERC20 {\\n  function balanceOf(address who) external view returns (uint256);\\n  function transfer(address to, uint256 value) external returns (bool);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"},\"ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic interface\\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n */\\ninterface ERC721Basic {\\n  event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n  event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n  function balanceOf(address _owner) external view returns (uint256 _balance);\\n  function ownerOf(uint256 _tokenId) external view returns (address _owner);\\n\\n  function approve(address _to, uint256 _tokenId) external;\\n  function getApproved(uint256 _tokenId) external view returns (address _operator);\\n\\n  function setApprovalForAll(address _operator, bool _approved) external;\\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n\\n  function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) external;\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n */\\ninterface ERC721Enumerable is ERC721Basic {\\n  function totalSupply() external view returns (uint256);\\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 _tokenId);\\n  function tokenByIndex(uint256 _index) external view returns (uint256);\\n}\\n\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n */\\ninterface ERC721Metadata is ERC721Basic {\\n  function name() external view returns (string memory _name);\\n  function symbol() external view returns (string memory _symbol);\\n  function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n */\\ninterface ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata, ERC165 {}\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n *  from ERC721 asset contracts.\\n */\\ninterface ERC721Receiver {\\n  function onERC721Received(address _from, uint256 _tokenId, bytes memory _data) external returns(bytes4);\\n}\\n\"},\"ILootBox.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\ninterface ILootBox {\\n  function afterHarbergerBuy(uint256 _tokenId, address _newOwner) external;\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public admin;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() {\\n    admin = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == admin);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newAdmin The address to transfer ownership to.\\n   */\\n  function transferOwnership(address newAdmin) external onlyOwner {\\n    require(newAdmin != address(0));\\n    emit OwnershipTransferred(admin, newAdmin);\\n    admin = newAdmin;\\n  }\\n}\\n\"},\"Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary AddressUtils {\\n\\tfunction isContract(address addr) internal view returns (bool) {\\n\\t\\tuint256 size;\\n\\t\\t// solium-disable-next-line security/no-inline-assembly\\n\\t\\tassembly { size := extcodesize(addr) }\\n\\t\\treturn size \\u003e 0;\\n\\t}\\n}\\n\\ncontract Proxy {\\n\\tusing AddressUtils for address;\\n\\n\\tbytes32 private constant ADMIN_SLOT = 0xde50c0ef4724e938441b7d87888451dee5481c5f4cdb090e8051ee74ce71c31c;\\n\\tbytes32 private constant IMPLEMENTATION_SLOT = 0x454e447e72dbaa44ab6e98057df04d15461fc11a64ce58e5e1472346dea4223f;\\n\\n\\tconstructor (address _i) {\\n\\t\\trequire(_i.isContract());\\n\\n\\t\\t_setImplementation(_i);\\n\\t\\t_setAdmin(msg.sender);\\n\\t}\\n\\n\\tevent AdminChanged (address admin);\\n\\tevent Upgraded (address implementation);\\n\\n\\tmodifier onlyAdmin () {\\n\\t\\trequire(msg.sender == _admin());\\n\\t\\t_;\\n\\t}\\n\\n\\t /// @dev 更换Proxy合约的管理者\\n\\t /// @param _newAdmin 新的管理者地址\\n\\tfunction proxyChangeAdmin(address _newAdmin) external onlyAdmin {\\n\\t\\trequire(_newAdmin != address(0));\\n\\t\\t_setAdmin(_newAdmin);\\n\\t\\temit AdminChanged(_newAdmin);\\n\\t}\\n\\n\\t/// @dev 升级使用的Bounty合约\\n\\t/// @param _newImplementation 新的合约地址\\n\\tfunction proxyUpgradeTo(address _newImplementation) public onlyAdmin {\\n\\t\\trequire(_newImplementation.isContract());\\n\\t\\t_setImplementation(_newImplementation);\\n\\t\\temit Upgraded(_newImplementation);\\n\\t}\\n\\n\\t /// @dev 升级使用的Bounty合约并且直接执行调用\\n\\t /// @param _newImplementation 新的合约地址\\n\\t /// @param _data 需要在新合约上调用的方法编码\\n\\tfunction proxyUpgradeToAndCall(\\n\\t\\taddress _newImplementation,\\n\\t\\tbytes calldata _data\\n\\t) external payable onlyAdmin returns (bytes memory) {\\n\\t\\tproxyUpgradeTo(_newImplementation);\\n\\t\\t(bool success, bytes memory data) = address(this).call{value:msg.value}(_data);\\n\\t\\trequire(success);\\n\\t\\treturn data;\\n\\t}\\n\\n\\tfunction _admin () internal view returns (address a) {\\n\\t\\tbytes32 slot = ADMIN_SLOT;\\n\\t\\tassembly {\\n\\t\\t\\ta := sload(slot)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _implementation () internal view returns (address i) {\\n\\t\\tbytes32 slot = IMPLEMENTATION_SLOT;\\n\\t\\tassembly {\\n\\t\\t\\ti := sload(slot)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction admin() external view onlyAdmin returns (address) {\\n\\t\\treturn _admin();\\n\\t}\\n\\n\\tfunction implementation() external view onlyAdmin returns (address) {\\n\\t\\treturn _implementation();\\n\\t}\\n\\n\\tfunction _setAdmin (address newAdmin) internal {\\n\\t\\tbytes32 slot = ADMIN_SLOT;\\n\\t\\tassembly {\\n\\t\\t\\tsstore(slot, newAdmin)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _setImplementation (address newImplementation) internal {\\n\\t\\tbytes32 slot = IMPLEMENTATION_SLOT;\\n\\t\\tassembly {\\n\\t\\t\\tsstore(slot, newImplementation)\\n\\t\\t}\\n\\t}\\n\\n\\t /// @dev fallback函数，除了proxyChangeAdmin和proxyUpgradeTo方法以外的所有\\n\\t /// 对合约的调用均会最终会被执行该方法。函数会将所有调用的data直接转发至Bounty合\\n\\t /// 约，并返回对应的结果。\\n\\tfallback () external payable {\\n\\t\\taddress i = _implementation();\\n\\t\\t// solium-disable-next-line security/no-inline-assembly\\n\\t\\tassembly {\\n\\t\\t\\tcalldatacopy(0, 0, calldatasize())\\n\\n\\t\\t\\tlet result := delegatecall(gas(), i, 0, calldatasize(), 0, 0)\\n\\n\\t\\t\\treturndatacopy(0, 0, returndatasize())\\n\\n\\t\\t\\tswitch result\\n\\t\\t\\tcase 0 { revert(0, returndatasize()) }\\n\\t\\t\\tdefault { return(0, returndatasize()) }\\n\\t\\t}\\n\\t}\\n\\n\\treceive () external payable {\\n    revert();\\n  }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n}\\n\"},\"String.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\nlibrary String {\\n  // From https://ethereum.stackexchange.com/questions/10811/solidity-concatenate-uint-into-a-string\\n\\n  function appendUintToString(string memory inStr, uint v) internal pure returns (string memory str) {\\n    uint maxlength = 100;\\n    bytes memory reversed = new bytes(maxlength);\\n    uint i = 0;\\n    while (v != 0) {\\n      uint remainder = v % 10;\\n      v = v / 10;\\n      reversed[i++] = bytes1(uint8(48 + remainder));\\n    }\\n    bytes memory inStrb = bytes(inStr);\\n    bytes memory s = new bytes(inStrb.length + i);\\n    uint j;\\n    for (j = 0; j \\u003c inStrb.length; j++) {\\n      s[j] = inStrb[j];\\n    }\\n    for (j = 0; j \\u003c i; j++) {\\n      s[j + inStrb.length] = reversed[i - 1 - j];\\n    }\\n    str = string(s);\\n  }\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_txs\",\"type\":\"uint256\"}],\"name\":\"HarbergerBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lootBox\",\"type\":\"address\"}],\"name\":\"LootBox\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"MiningTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"PublicURL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"Verifier\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUIDLER_INCOME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUIDLER_TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_INCOME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"harbergerBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"metadataOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txs\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buidler\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"lootBox\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lootBoxAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_buidler\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_initPrice\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_currentPrice\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bid\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_owner\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_txs\",\"type\":\"uint256[]\"}],\"name\":\"mintFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lootBoxAddr\",\"type\":\"address\"}],\"name\":\"setLootBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setMiningTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"setPublicURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newVerifier\",\"type\":\"address\"}],\"name\":\"setVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BuidlNFT","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://004f2e3159dd494b25bccf941e52f156b225c126c12b48b71efdab8bfbe8ad7c"}]}