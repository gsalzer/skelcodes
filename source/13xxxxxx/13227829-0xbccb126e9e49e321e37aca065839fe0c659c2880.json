{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/extensions/DefaultRenderExtension.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../RenderExtension.sol\\\";\\r\\n\\r\\n// solhint-disable quotes\\r\\ncontract DefaultRenderExtension is RenderExtension {\\r\\n    uint256 public constant COLOR_CNT = 16;\\r\\n\\r\\n    string[] public colorNames = [\\\"Red\\\", \\\"Pink\\\", \\\"Purple\\\", \\\"Deep Puple\\\", \\\"Indigo\\\", \\\"Blue\\\", \\\"Light Blue\\\", \\\"Cyan\\\", \\\"Teal\\\", \\\"Green\\\", \\\"Light Green\\\", \\\"Lime\\\", \\\"Yellow\\\", \\\"Amber\\\", \\\"Orange\\\", \\\"Deep Orange\\\"];\\r\\n    string[] public colors = [\\r\\n        \\\"#f44336\\\",\\r\\n        \\\"#e91e63\\\",\\r\\n        \\\"#9c27b0\\\",\\r\\n        \\\"#673ab7\\\",\\r\\n        \\\"#3f51b5\\\",\\r\\n        \\\"#2196f3\\\",\\r\\n        \\\"#03a9f4\\\",\\r\\n        \\\"#00bcd4\\\",\\r\\n        \\\"#009688\\\",\\r\\n        \\\"#4caf50\\\",\\r\\n        \\\"#8bc34a\\\",\\r\\n        \\\"#cddc39\\\",\\r\\n        \\\"#ffeb3b\\\",\\r\\n        \\\"#ffc107\\\",\\r\\n        \\\"#ff9800\\\",\\r\\n        \\\"#ff5722\\\"\\r\\n    ];\\r\\n\\r\\n    function generate(uint256 tokenId, uint256) external view override returns (GenerateResult memory generateResult) {\\r\\n        string[30] memory parts;\\r\\n        string[30] memory attrs;\\r\\n\\r\\n        uint256 rand = random(string(abi.encodePacked(address(this), \\\"Boxes.\\\", toString(tokenId))));\\r\\n        uint256 numOfBoxesPos = rand % 10;\\r\\n        if (numOfBoxesPos == 0) {\\r\\n            numOfBoxesPos = 1;\\r\\n        }\\r\\n        uint256 totalBoxes = 0;\\r\\n\\r\\n        for (uint256 ix = 1; ix <= numOfBoxesPos * 3; ix = ix + 3) {\\r\\n            uint256 bx = random(string(abi.encodePacked(toString(ix), \\\".Boxes.\\\", toString(tokenId)))) % numOfBoxesPos;\\r\\n            uint256 i = ix - 1;\\r\\n            uint256 clr = random(string(abi.encodePacked(\\\"Colors.\\\", toString(ix), \\\".Boxes.\\\", toString(tokenId)))) % COLOR_CNT;\\r\\n\\r\\n            if (i == 0 && bx == 0) {\\r\\n                parts[i] = '<rect x=\\\"10\\\" y=\\\"10\\\" width=\\\"103\\\" height=\\\"103\\\" rx=\\\"5\\\" stroke=\\\"white\\\" fill=\\\"';\\r\\n                parts[i + 1] = colors[clr];\\r\\n                parts[i + 2] = '\\\" fill-opacity=\\\"1.0\\\" />';\\r\\n\\r\\n                attrs[i] = ',{\\\"trait_type\\\":\\\"OG Box 1\\\",\\\"value\\\":\\\"';\\r\\n                attrs[i + 1] = colorNames[clr];\\r\\n                attrs[i + 2] = '\\\"}';\\r\\n\\r\\n                totalBoxes = totalBoxes + 1;\\r\\n            } else if (i == 3 && bx == 1) {\\r\\n                parts[i] = '<rect x=\\\"123\\\" y=\\\"10\\\" width=\\\"103\\\" height=\\\"103\\\" rx=\\\"5\\\" stroke=\\\"white\\\" fill=\\\"';\\r\\n                parts[i + 1] = colors[clr];\\r\\n                parts[i + 2] = '\\\" fill-opacity=\\\"1.0\\\" />';\\r\\n\\r\\n                attrs[i] = ',{\\\"trait_type\\\":\\\"OG Box 2\\\",\\\"value\\\":\\\"';\\r\\n                attrs[i + 1] = colorNames[clr];\\r\\n                attrs[i + 2] = '\\\"}';\\r\\n\\r\\n                totalBoxes = totalBoxes + 1;\\r\\n            } else if (i == 6 && bx == 2) {\\r\\n                parts[i] = '<rect x=\\\"236\\\" y=\\\"10\\\" width=\\\"103\\\" height=\\\"103\\\" rx=\\\"5\\\" stroke=\\\"white\\\" fill=\\\"';\\r\\n                parts[i + 1] = colors[clr];\\r\\n                parts[i + 2] = '\\\" fill-opacity=\\\"1.0\\\" />';\\r\\n\\r\\n                attrs[i] = ',{\\\"trait_type\\\":\\\"OG Box 3\\\",\\\"value\\\":\\\"';\\r\\n                attrs[i + 1] = colorNames[clr];\\r\\n                attrs[i + 2] = '\\\"}';\\r\\n\\r\\n                totalBoxes = totalBoxes + 1;\\r\\n            } else if (i == 9 && bx == 3) {\\r\\n                parts[i] = '<rect x=\\\"10\\\" y=\\\"123\\\" width=\\\"103\\\" height=\\\"103\\\" rx=\\\"5\\\" stroke=\\\"white\\\" fill=\\\"';\\r\\n                parts[i + 1] = colors[clr];\\r\\n                parts[i + 2] = '\\\" fill-opacity=\\\"1.0\\\" />';\\r\\n\\r\\n                attrs[i] = ',{\\\"trait_type\\\":\\\"OG Box 4\\\",\\\"value\\\":\\\"';\\r\\n                attrs[i + 1] = colorNames[clr];\\r\\n                attrs[i + 2] = '\\\"}';\\r\\n\\r\\n                totalBoxes = totalBoxes + 1;\\r\\n            } else if (i == 12 && bx == 4) {\\r\\n                parts[i] = '<rect x=\\\"123\\\" y=\\\"123\\\" width=\\\"103\\\" height=\\\"103\\\" rx=\\\"5\\\" stroke=\\\"white\\\" fill=\\\"';\\r\\n                parts[i + 1] = colors[clr];\\r\\n                parts[i + 2] = '\\\" fill-opacity=\\\"1.0\\\" />';\\r\\n\\r\\n                attrs[i] = ',{\\\"trait_type\\\":\\\"OG Box 5\\\",\\\"value\\\":\\\"';\\r\\n                attrs[i + 1] = colorNames[clr];\\r\\n                attrs[i + 2] = '\\\"}';\\r\\n\\r\\n                totalBoxes = totalBoxes + 1;\\r\\n            } else if (i == 15 && bx == 5) {\\r\\n                parts[i] = '<rect x=\\\"236\\\" y=\\\"123\\\" width=\\\"103\\\" height=\\\"103\\\" rx=\\\"5\\\" stroke=\\\"white\\\" fill=\\\"';\\r\\n                parts[i + 1] = colors[clr];\\r\\n                parts[i + 2] = '\\\" fill-opacity=\\\"1.0\\\" />';\\r\\n\\r\\n                attrs[i] = ',{\\\"trait_type\\\":\\\"OG Box 6\\\",\\\"value\\\":\\\"';\\r\\n                attrs[i + 1] = colorNames[clr];\\r\\n                attrs[i + 2] = '\\\"}';\\r\\n\\r\\n                totalBoxes = totalBoxes + 1;\\r\\n            } else if (i == 18 && bx == 6) {\\r\\n                parts[i] = '<rect x=\\\"10\\\" y=\\\"236\\\" width=\\\"103\\\" height=\\\"80\\\" rx=\\\"5\\\" stroke=\\\"white\\\" fill=\\\"';\\r\\n                parts[i + 1] = colors[clr];\\r\\n                parts[i + 2] = '\\\" fill-opacity=\\\"1.0\\\" />';\\r\\n\\r\\n                attrs[i] = ',{\\\"trait_type\\\":\\\"OG Box 7\\\",\\\"value\\\":\\\"';\\r\\n                attrs[i + 1] = colorNames[clr];\\r\\n                attrs[i + 2] = '\\\"}';\\r\\n\\r\\n                totalBoxes = totalBoxes + 1;\\r\\n            } else if (i == 21 && bx == 7) {\\r\\n                parts[i] = '<rect x=\\\"123\\\" y=\\\"236\\\" width=\\\"103\\\" height=\\\"103\\\" rx=\\\"5\\\" stroke=\\\"white\\\" fill=\\\"';\\r\\n                parts[i + 1] = colors[clr];\\r\\n                parts[i + 2] = '\\\" fill-opacity=\\\"1.0\\\" />';\\r\\n\\r\\n                attrs[i] = ',{\\\"trait_type\\\":\\\"OG Box 8\\\",\\\"value\\\":\\\"';\\r\\n                attrs[i + 1] = colorNames[clr];\\r\\n                attrs[i + 2] = '\\\"}';\\r\\n\\r\\n                totalBoxes = totalBoxes + 1;\\r\\n            } else if (i == 24 && bx == 8) {\\r\\n                parts[i] = '<rect x=\\\"236\\\" y=\\\"236\\\" width=\\\"103\\\" height=\\\"103\\\" rx=\\\"5\\\" stroke=\\\"white\\\" fill=\\\"';\\r\\n                parts[i + 1] = colors[clr];\\r\\n                parts[i + 2] = '\\\" fill-opacity=\\\"1.0\\\" />';\\r\\n\\r\\n                attrs[i] = ',{\\\"trait_type\\\":\\\"OG Box 9\\\",\\\"value\\\":\\\"';\\r\\n                attrs[i + 1] = colorNames[clr];\\r\\n                attrs[i + 2] = '\\\"}';\\r\\n\\r\\n                totalBoxes = totalBoxes + 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (totalBoxes == 0) {\\r\\n            uint256 clr = random(string(abi.encodePacked(\\\"Colors.\\\", \\\"Boxes.\\\", toString(tokenId)))) % COLOR_CNT;\\r\\n\\r\\n            parts[0] = '<rect x=\\\"123\\\" y=\\\"123\\\" width=\\\"103\\\" height=\\\"103\\\" rx=\\\"5\\\" fill=\\\"black\\\" stroke=\\\"';\\r\\n            parts[1] = colors[clr];\\r\\n            parts[2] = '\\\" fill-opacity=\\\"0.0\\\" />';\\r\\n        }\\r\\n\\r\\n        attrs[27] = ',{\\\"trait_type\\\":\\\"OG Boxes\\\",\\\"value\\\":\\\"';\\r\\n        attrs[28] = toString(totalBoxes);\\r\\n        attrs[29] = '\\\"}';\\r\\n\\r\\n        parts[27] = '<text x=\\\"10\\\" y=\\\"338\\\" class=\\\"base\\\">';\\r\\n        parts[28] = toString(tokenId);\\r\\n        parts[29] = \\\"</text>\\\";\\r\\n\\r\\n        string memory svgOutput = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]));\\r\\n        svgOutput = string(abi.encodePacked(svgOutput, parts[9], parts[10], parts[11], parts[12], parts[13], parts[14], parts[15], parts[16]));\\r\\n        svgOutput = string(abi.encodePacked(svgOutput, parts[17], parts[18], parts[19], parts[20], parts[21], parts[22], parts[23], parts[24]));\\r\\n        svgOutput = string(abi.encodePacked(svgOutput, parts[25], parts[26], parts[27], parts[28], parts[29]));\\r\\n\\r\\n        string memory attrOutput = string(abi.encodePacked(attrs[0], attrs[1], attrs[2], attrs[3], attrs[4], attrs[5], attrs[6], attrs[7], attrs[8]));\\r\\n        attrOutput = string(abi.encodePacked(attrOutput, attrs[9], attrs[10], attrs[11], attrs[12], attrs[13], attrs[14], attrs[15], attrs[16]));\\r\\n        attrOutput = string(abi.encodePacked(attrOutput, attrs[17], attrs[18], attrs[19], attrs[20], attrs[21], attrs[22], attrs[23], attrs[24]));\\r\\n        attrOutput = string(abi.encodePacked(attrOutput, attrs[25], attrs[26], attrs[27], attrs[28], attrs[29]));\\r\\n\\r\\n        generateResult = GenerateResult({svgPart: svgOutput, attributes: attrOutput});\\r\\n    }\\r\\n\\r\\n    function random(string memory input) internal pure returns (uint256) {\\r\\n        return uint256(keccak256(abi.encodePacked(input)));\\r\\n    }\\r\\n\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT license\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/RenderExtension.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/IRenderExtension.sol\\\";\\r\\n\\r\\nabstract contract RenderExtension is IRenderExtension {\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165) returns (bool) {\\r\\n        return interfaceId == type(IRenderExtension).interfaceId;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IRenderExtension.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\n\\r\\ninterface IRenderExtension is IERC165 {\\r\\n    struct GenerateResult {\\r\\n        string svgPart;\\r\\n        string attributes;\\r\\n    }\\r\\n\\r\\n    struct Attribute {\\r\\n        string displayType;\\r\\n        string traitType;\\r\\n        string value;\\r\\n    }\\r\\n\\r\\n    function generate(uint256 tokenId, uint256 generationId) external view returns (GenerateResult memory generateResult);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"COLOR_CNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colorNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"generate\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"svgPart\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attributes\",\"type\":\"string\"}],\"internalType\":\"struct IRenderExtension.GenerateResult\",\"name\":\"generateResult\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DefaultRenderExtension","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"20","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}