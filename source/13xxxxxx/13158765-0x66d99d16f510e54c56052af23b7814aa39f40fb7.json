{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: Unlicense\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary Crc32 {\r\n    bytes constant private TABLE = hex\"0000000077073096ee0e612c990951ba076dc419706af48fe963a5359e6495a30edb883279dcb8a4e0d5e91e97d2d98809b64c2b7eb17cbde7b82d0790bf1d911db710646ab020f2f3b9714884be41de1adad47d6ddde4ebf4d4b55183d385c7136c9856646ba8c0fd62f97a8a65c9ec14015c4f63066cd9fa0f3d638d080df53b6e20c84c69105ed56041e4a26771723c03e4d14b04d447d20d85fda50ab56b35b5a8fa42b2986cdbbbc9d6acbcf94032d86ce345df5c75dcd60dcfabd13d5926d930ac51de003ac8d75180bfd0611621b4f4b556b3c423cfba9599b8bda50f2802b89e5f058808c60cd9b2b10be9242f6f7c8758684c11c1611dabb6662d3d76dc419001db710698d220bcefd5102a71b1858906b6b51f9fbfe4a5e8b8d4337807c9a20f00f9349609a88ee10e98187f6a0dbb086d3d2d91646c97e6635c016b6b51f41c6c6162856530d8f262004e6c0695ed1b01a57b8208f4c1f50fc45765b0d9c612b7e9508bbeb8eafcb9887c62dd1ddf15da2d498cd37cf3fbd44c654db261583ab551cea3bc0074d4bb30e24adfa5413dd895d7a4d1c46dd3d6f4fb4369e96a346ed9fcad678846da60b8d044042d7333031de5aa0a4c5fdd0d7cc95005713c270241aabe0b1010c90c20865768b525206f85b3b966d409ce61e49f5edef90e29d9c998b0d09822c7d7a8b459b33d172eb40d81b7bd5c3bc0ba6cadedb883209abfb3b603b6e20c74b1d29aead547399dd277af04db261573dc1683e3630b1294643b840d6d6a3e7a6a5aa8e40ecf0b9309ff9d0a00ae277d079eb1f00f93448708a3d21e01f2686906c2fef762575d806567cb196c36716e6b06e7fed41b7689d32be010da7a5a67dd4accf9b9df6f8ebeeff917b7be4360b08ed5d6d6a3e8a1d1937e38d8c2c44fdff252d1bb67f1a6bc57673fb506dd48b2364bd80d2bdaaf0a1b4c36034af641047a60df60efc3a867df55316e8eef4669be79cb61b38cbc66831a256fd2a05268e236cc0c7795bb0b4703220216b95505262fc5ba3bbeb2bd0b282bb45a925cb36a04c2d7ffa7b5d0cf312cd99e8b5bdeae1d9b64c2b0ec63f226756aa39c026d930a9c0906a9eb0e363f720767850500571395bf4a82e2b87a147bb12bae0cb61b3892d28e9be5d5be0d7cdcefb70bdbdf2186d3d2d4f1d4e24268ddb3f81fda836e81be16cdf6b9265b6fb077e118b7477788085ae6ff0f6a7066063bca11010b5c8f659efff862ae69616bffd3166ccf45a00ae278d70dd2ee4e0483543903b3c2a7672661d06016f74969474d3e6e77dbaed16a4ad9d65adc40df0b6637d83bf0a9bcae53debb9ec547b2cf7f30b5ffe9bdbdf21ccabac28a53b3933024b4a3a6bad03605cdd7069354de572923d967bfb3667a2ec4614ab85d681b022a6f2b94b40bbe37c30c8ea15a05df1b2d02ef8d\";\r\n\r\n    function table(uint index) private pure returns (uint32) {\r\n        unchecked {\r\n            index *= 4;\r\n\r\n            uint32 result =\r\n                uint32(uint8(TABLE[index    ])) << 24;\r\n            result |= uint32(uint8(TABLE[index + 1])) << 16;\r\n            result |= uint32(uint8(TABLE[index + 2])) << 8;\r\n            result |= uint32(uint8(TABLE[index + 3]));\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function crc32(bytes memory self, uint offset, uint end) internal pure {\r\n        unchecked {\r\n            uint32 crc = ~uint32(0);\r\n\r\n            for (uint ii = offset; ii < end; ii++) {\r\n                crc = (crc >> 8) ^ table((crc & 0xff) ^ uint8(self[ii]));\r\n            }\r\n\r\n            crc = ~crc;\r\n\r\n            self[end    ] = bytes1(uint8(crc >> 24));\r\n            self[end + 1] = bytes1(uint8(crc >> 16));\r\n            self[end + 2] = bytes1(uint8(crc >> 8));\r\n            self[end + 3] = bytes1(uint8(crc));\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Adler32 {\r\n    uint32 constant private MOD = 65521;\r\n\r\n    function adler32(bytes memory self, uint offset, uint end) internal pure {\r\n        unchecked {\r\n            uint32 a = 1;\r\n            uint32 b = 0;\r\n\r\n            // Process each byte of the data in order\r\n            for (uint ii = offset; ii < end; ii++) {\r\n                    a = (a + uint32(uint8(self[ii]))) % MOD;\r\n                    b = (b + a) % MOD;\r\n            }\r\n\r\n            uint32 adler = (b << 16) | a;\r\n\r\n            self[end    ] = bytes1(uint8(adler >> 24));\r\n            self[end + 1] = bytes1(uint8(adler >> 16));\r\n            self[end + 2] = bytes1(uint8(adler >> 8));\r\n            self[end + 3] = bytes1(uint8(adler));\r\n        }\r\n    }\r\n}\r\n\r\ncontract Render {\r\n    using Crc32 for bytes;\r\n    using Adler32 for bytes;\r\n\r\n    uint constant private WIDTH_BYTES = 6;\r\n\r\n    uint constant private WIDTH_PIXELS = WIDTH_BYTES * 8;\r\n    uint constant private LINES = WIDTH_PIXELS;\r\n\r\n    uint constant private SPRITES_PER_IMAGE = 3;\r\n    uint constant private SPRITE_LINE_BYTES = WIDTH_BYTES / SPRITES_PER_IMAGE;\r\n    uint constant private SPRITE_BYTES = LINES * SPRITE_LINE_BYTES;\r\n    uint constant private SPRITE_LINE_MASK = 0xFFFF;\r\n\r\n    uint8 constant public EYES = 7;\r\n\r\n    bytes constant private EYES_X =\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"700e\"\r\n        hex\"381c\"\r\n        hex\"1818\"\r\n        hex\"0c30\"\r\n        hex\"0e70\"\r\n        hex\"07e0\"\r\n        hex\"03c0\"\r\n        hex\"03c0\"\r\n        hex\"0660\"\r\n        hex\"0e70\"\r\n        hex\"1c30\"\r\n        hex\"1818\"\r\n        hex\"381c\"\r\n        hex\"700e\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\";\r\n\r\n    bytes constant private EYES_CARET =\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0180\"\r\n        hex\"03c0\"\r\n        hex\"07e0\"\r\n        hex\"0e70\"\r\n        hex\"1c38\"\r\n        hex\"381c\"\r\n        hex\"700e\"\r\n        hex\"6006\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\";\r\n\r\n\r\n    bytes constant private EYES_O =\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"07e0\"\r\n        hex\"0ff0\"\r\n        hex\"1c38\"\r\n        hex\"1818\"\r\n        hex\"300c\"\r\n        hex\"300c\"\r\n        hex\"300c\"\r\n        hex\"300c\"\r\n        hex\"300c\"\r\n        hex\"300c\"\r\n        hex\"1818\"\r\n        hex\"1c38\"\r\n        hex\"0ff0\"\r\n        hex\"07e0\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\";\r\n\r\n\r\n    bytes constant private EYES_0 =\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"03c0\"\r\n        hex\"0ff0\"\r\n        hex\"1c38\"\r\n        hex\"1818\"\r\n        hex\"1818\"\r\n        hex\"300c\"\r\n        hex\"300c\"\r\n        hex\"300c\"\r\n        hex\"300c\"\r\n        hex\"300c\"\r\n        hex\"300c\"\r\n        hex\"300c\"\r\n        hex\"300c\"\r\n        hex\"1818\"\r\n        hex\"1818\"\r\n        hex\"1c38\"\r\n        hex\"0ff0\"\r\n        hex\"03c0\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\";\r\n\r\n\r\n    bytes constant private EYES_GT =\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"3800\"\r\n        hex\"3f00\"\r\n        hex\"07c0\"\r\n        hex\"01f8\"\r\n        hex\"003c\"\r\n        hex\"01f8\"\r\n        hex\"07c0\"\r\n        hex\"3f00\"\r\n        hex\"3800\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\";\r\n\r\n\r\n    bytes constant private EYES_LT =\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"001c\"\r\n        hex\"00fc\"\r\n        hex\"03e0\"\r\n        hex\"1f80\"\r\n        hex\"3c00\"\r\n        hex\"1f80\"\r\n        hex\"03e0\"\r\n        hex\"00fc\"\r\n        hex\"001c\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\";\r\n\r\n\r\n    bytes constant private EYES_CRY =\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0004\"\r\n        hex\"0004\"\r\n        hex\"0002\"\r\n        hex\"0002\"\r\n        hex\"0002\"\r\n        hex\"0006\"\r\n        hex\"3ffe\"\r\n        hex\"7ffc\"\r\n        hex\"0630\"\r\n        hex\"1818\"\r\n        hex\"108c\"\r\n        hex\"31c6\"\r\n        hex\"21c6\"\r\n        hex\"6086\"\r\n        hex\"6006\"\r\n        hex\"6006\"\r\n        hex\"310e\"\r\n        hex\"3ffc\"\r\n        hex\"1e78\"\r\n        hex\"0000\"\r\n        hex\"0100\"\r\n        hex\"0180\"\r\n        hex\"0380\"\r\n        hex\"0380\"\r\n        hex\"0100\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\";\r\n\r\n\r\n    uint8 constant public NOSES = 3;\r\n\r\n    bytes constant private NOSES_UNDERSCORE =\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"7ffe\"\r\n        hex\"7ffe\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\";\r\n\r\n    bytes constant private NOSES_PERIOD =\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0180\"\r\n        hex\"03c0\"\r\n        hex\"0180\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\";\r\n\r\n\r\n    bytes constant private NOSES_CAT =\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"1818\"\r\n        hex\"1818\"\r\n        hex\"3818\"\r\n        hex\"300c\"\r\n        hex\"300c\"\r\n        hex\"318c\"\r\n        hex\"318c\"\r\n        hex\"318c\"\r\n        hex\"318c\"\r\n        hex\"318c\"\r\n        hex\"318c\"\r\n        hex\"3bd8\"\r\n        hex\"1e78\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\"\r\n        hex\"0000\";\r\n\r\n\r\n    bytes constant private HEADER =\r\n        hex\"89504e470d0a1a0a\"                                       // PNG Signature\r\n        hex\"0000000d49484452000000300000003001030000006dcc6bc4\"     // IHDR Chunk\r\n        hex\"00000006504c5445\";                                      // PLTE Chunk (Partial)\r\n\r\n    bytes constant private IDAT_PREFIX =\r\n        hex\"0000015b\"                                               // Chunk Length\r\n        hex\"49444154\"                                               // \"IDAT\"\r\n        hex\"7801015001affe\";                                        // zlib header\r\n\r\n    bytes constant private TRAILER = hex\"0000000049454e44ae426082\"; // IEND Chunk\r\n\r\n    function eye(uint8 index) private pure returns (bytes memory) {\r\n        require(index < EYES, \"eye out of range\");\r\n\r\n        if (0 == index) {\r\n            return EYES_0;\r\n        } else if (1 == index) {\r\n            return EYES_CARET;\r\n        } else if (2 == index) {\r\n            return EYES_O;\r\n        } else if (3 == index) {\r\n            return EYES_X;\r\n        } else if (4 == index) {\r\n            return EYES_GT;\r\n        } else if (5 == index) {\r\n            return EYES_LT;\r\n        } else if (6 == index) {\r\n            return EYES_CRY;\r\n        } else {\r\n            assert(true);\r\n            return new bytes(0); // Unreachable?\r\n        }\r\n    }\r\n\r\n    function eyeName(uint8 index) public pure returns (string memory) {\r\n        require(index < EYES, \"eye out of range\");\r\n\r\n        if (0 == index) {\r\n            return \"0\";\r\n        } else if (1 == index) {\r\n            return \"^\";\r\n        } else if (2 == index) {\r\n            return \"o\";\r\n        } else if (3 == index) {\r\n            return \"x\";\r\n        } else if (4 == index) {\r\n            return \">\";\r\n        } else if (5 == index) {\r\n            return \"<\";\r\n        } else if (6 == index) {\r\n            return \"\\u0ca5\";\r\n        } else {\r\n            assert(true);\r\n            return new string(0); // Unreachable?\r\n        }\r\n    }\r\n\r\n    function nose(uint8 index) private pure returns (bytes memory) {\r\n        require(index < NOSES, \"nose out of range\");\r\n\r\n        if (0 == index) {\r\n            return NOSES_UNDERSCORE;\r\n        } else if (1 == index) {\r\n            return NOSES_PERIOD;\r\n        } else if (2 == index) {\r\n            return NOSES_CAT;\r\n        } else {\r\n            assert(true);\r\n            return new bytes(0); // Unreachable?\r\n        }\r\n    }\r\n\r\n    function noseName(uint8 index) public pure returns (string memory) {\r\n        require(index < NOSES, \"nose out of range\");\r\n\r\n        if (0 == index) {\r\n            return \"_\";\r\n        } else if (1 == index) {\r\n            return \".\";\r\n        } else if (2 == index) {\r\n            return \"\\u03c9\";\r\n        } else {\r\n            assert(true);\r\n            return new string(0); // Unreachable?\r\n        }\r\n    }\r\n\r\n    function render(bytes memory output, uint offset, uint8 leftEyeIndex, uint8 noseIndex, uint8 rightEyeIndex) private pure {\r\n        unchecked {\r\n            bytes memory sprite;\r\n\r\n            sprite = eye(leftEyeIndex);\r\n\r\n            for (uint line = 0; line < LINES; line++) {\r\n                uint inOffset = line * SPRITE_LINE_BYTES;\r\n                uint outOffset = 1 + (line * (WIDTH_BYTES + 1));\r\n\r\n                for (uint column = 0; column < SPRITE_LINE_BYTES; column++) {\r\n                    output[offset + outOffset + column] = sprite[inOffset + column];\r\n                }\r\n            }\r\n\r\n            sprite = nose(noseIndex);\r\n\r\n            for (uint line = 0; line < LINES; line++) {\r\n                uint inOffset = line * SPRITE_LINE_BYTES;\r\n                uint outOffset = 1 + SPRITE_LINE_BYTES + (line * (WIDTH_BYTES + 1));\r\n\r\n                for (uint column = 0; column < SPRITE_LINE_BYTES; column++) {\r\n                    output[offset + outOffset + column] = sprite[inOffset + column];\r\n                }\r\n            }\r\n\r\n            sprite = eye(rightEyeIndex);\r\n\r\n            for (uint line = 0; line < LINES; line++) {\r\n                uint inOffset = line * SPRITE_LINE_BYTES;\r\n                uint outOffset = 1 + (2 * SPRITE_LINE_BYTES) + (line * (WIDTH_BYTES + 1));\r\n\r\n                for (uint column = 0; column < SPRITE_LINE_BYTES; column++) {\r\n                    output[offset + outOffset + column] = sprite[inOffset + column];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function png(bytes3 bg, bytes3 fg, uint8 leftEyeIndex, uint8 noseIndex, uint8 rightEyeIndex) external pure returns (bytes memory) {\r\n        unchecked {\r\n            uint length = HEADER.length\r\n                + bg.length\r\n                + fg.length\r\n                + 4                         // PLTE CRC32\r\n                + IDAT_PREFIX.length\r\n                + LINES * (WIDTH_BYTES + 1) // Image Data\r\n                + 4                         // zlib adler32\r\n                + 4                         // IDAT CRC32\r\n                + TRAILER.length;\r\n\r\n            bytes memory output = new bytes(length);\r\n\r\n            uint offset = 0;\r\n\r\n            // Copy the static portion of the header.\r\n            for (uint ii = 0; ii < HEADER.length; ii++) {\r\n                output[offset++] = HEADER[ii];\r\n            }\r\n\r\n            // Copy the background color.\r\n            for (uint ii = 0; ii < bg.length; ii++) {\r\n                output[offset++] = bg[ii];\r\n            }\r\n\r\n            // Copy the foreground color.\r\n            for (uint ii = 0; ii < fg.length; ii++) {\r\n                output[offset++] = fg[ii];\r\n            }\r\n\r\n            // Compute the palette's checksum.\r\n            output.crc32(HEADER.length - 4, offset);\r\n            offset += 4;\r\n\r\n            uint idat_data_offset = offset + 4;\r\n\r\n            // Copy the IDAT prefix.\r\n            for (uint ii = 0; ii < IDAT_PREFIX.length; ii++) {\r\n                output[offset++] = IDAT_PREFIX[ii];\r\n            }\r\n\r\n            uint image_data_offset = offset;\r\n\r\n            render(output, offset, leftEyeIndex, noseIndex, rightEyeIndex);\r\n\r\n            offset += LINES * (WIDTH_BYTES + 1);\r\n\r\n            output.adler32(image_data_offset, offset);\r\n            offset += 4;\r\n\r\n            output.crc32(idat_data_offset, offset);\r\n            offset += 4;\r\n\r\n            // Copy the trailer.\r\n            for (uint ii = 0; ii < TRAILER.length; ii++) {\r\n                output[offset++] = TRAILER[ii];\r\n            }\r\n\r\n            return output;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"EYES\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NOSES\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"eyeName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"noseName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes3\",\"name\":\"bg\",\"type\":\"bytes3\"},{\"internalType\":\"bytes3\",\"name\":\"fg\",\"type\":\"bytes3\"},{\"internalType\":\"uint8\",\"name\":\"leftEyeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"noseIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rightEyeIndex\",\"type\":\"uint8\"}],\"name\":\"png\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Render","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7921e79d6968a840f19c8626422dd8d47f763802c85f700992c97036a32acc19"}]}