{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ext/proposals/ProposalValidators.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/factory/model/IFactory.sol\\\";\\nimport \\\"../../base/model/IProposalsManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@ethereansos/items-v2/contracts/model/Item.sol\\\";\\n\\ncontract ValidateQuorum is IProposalChecker {\\n\\n    string public constant LABEL = 'quorum';\\n\\n    uint256 public constant ONE_HUNDRED = 1e18;\\n\\n    string public uri;\\n    uint256 public value;\\n    bool public discriminant;\\n\\n    function lazyInit(bytes memory lazyInitData) external returns(bytes memory lazyInitResponseData) {\\n        require(keccak256(bytes(uri)) == keccak256(\\\"\\\"));\\n        (uri, lazyInitResponseData) = abi.decode(lazyInitData, (string, bytes));\\n        require(keccak256(bytes(uri)) != keccak256(\\\"\\\"));\\n\\n        (value, discriminant) = abi.decode(lazyInitResponseData, (uint256, bool));\\n\\n        lazyInitResponseData = \\\"\\\";\\n    }\\n\\n    function check(address, bytes32, bytes calldata proposalData, address, address) external override view returns(bool) {\\n        IProposalsManager.Proposal memory proposal  = abi.decode(proposalData, (IProposalsManager.Proposal));\\n        uint256 quorum = discriminant ? _calculatePercentage(_calculateCensusTotalSupply(proposal), value) : value;\\n        return ((proposal.accept + proposal.refuse) >= quorum) && (proposal.accept > proposal.refuse);\\n    }\\n\\n    function _calculateCensusTotalSupply(IProposalsManager.Proposal memory proposal) private view returns (uint256 censusTotalSupply) {\\n        (address[] memory collectionAddresses, uint256[] memory objectIds, uint256[] memory weights) = abi.decode(proposal.votingTokens, (address[], uint256[], uint256[]));\\n        for(uint256 i = 0; i < collectionAddresses.length; i++) {\\n            censusTotalSupply += (_calculateTotalSupply(collectionAddresses[i], objectIds[i]) * weights[i]);\\n        }\\n    }\\n\\n    function _calculatePercentage(uint256 totalSupply, uint256 percentage) private pure returns (uint256) {\\n        return (totalSupply * ((percentage * 1e18) / ONE_HUNDRED)) / 1e18;\\n    }\\n\\n    function _calculateTotalSupply(address collectionAddress, uint256 collectionId) private view returns(uint256) {\\n        if(collectionAddress == address(0)) {\\n            return IERC20(address(uint160(collectionId))).totalSupply();\\n        }\\n        return Item(collectionAddress).totalSupply(collectionId);\\n    }\\n}\\n\\ncontract CanBeValidBeforeBlockLength is IProposalChecker {\\n\\n    string public constant LABEL = 'validationBomb';\\n\\n    string public uri;\\n    uint256 public value;\\n\\n    function lazyInit(bytes memory lazyInitData) external returns(bytes memory lazyInitResponseData) {\\n        require(keccak256(bytes(uri)) == keccak256(\\\"\\\"));\\n        (uri, lazyInitResponseData) = abi.decode(lazyInitData, (string, bytes));\\n        require(keccak256(bytes(uri)) != keccak256(\\\"\\\"));\\n\\n        value = abi.decode(lazyInitResponseData, (uint256));\\n\\n        lazyInitResponseData = \\\"\\\";\\n    }\\n\\n    function check(address, bytes32, bytes calldata proposalData, address, address) external override view returns(bool) {\\n        return block.number < (value + abi.decode(proposalData, (IProposalsManager.Proposal)).creationBlock);\\n    }\\n}\"\r\n    },\r\n    \"@ethereansos/items-v2/contracts/model/Item.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IERC1155Views.sol\\\";\\n\\nstruct Header {\\n    address host;\\n    string name;\\n    string symbol;\\n    string uri;\\n}\\n\\nstruct CreateItem {\\n    Header header;\\n    bytes32 collectionId;\\n    uint256 id;\\n    address[] accounts;\\n    uint256[] amounts;\\n}\\n\\ninterface Item is IERC1155, IERC1155Views {\\n\\n    event CollectionItem(bytes32 indexed fromCollectionId, bytes32 indexed toCollectionId, uint256 indexed itemId);\\n\\n    function name() external view returns(string memory);\\n    function symbol() external view returns(string memory);\\n    function decimals() external view returns(uint256);\\n\\n    function burn(address account, uint256 itemId, uint256 amount) external;\\n    function burnBatch(address account, uint256[] calldata itemIds, uint256[] calldata amounts) external;\\n\\n    function burn(address account, uint256 itemId, uint256 amount, bytes calldata data) external;\\n    function burnBatch(address account, uint256[] calldata itemIds, uint256[] calldata amounts, bytes calldata data) external;\\n\\n    function mintItems(CreateItem[] calldata items) external returns(uint256[] memory itemIds);\\n    function setItemsCollection(uint256[] calldata itemIds, bytes32[] calldata collectionIds) external returns(bytes32[] memory oldCollectionIds);\\n    function setItemsMetadata(uint256[] calldata itemIds, Header[] calldata newValues) external returns(Header[] memory oldValues);\\n\\n    function interoperableOf(uint256 itemId) external view returns(address);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/base/model/IProposalsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\ninterface IProposalsManager is IERC1155Receiver, ILazyInitCapableElement {\\n\\n    struct ProposalCode {\\n        address location;\\n        bytes bytecode;\\n    }\\n\\n    struct ProposalCodes {\\n        ProposalCode[] codes;\\n        bool alsoTerminate;\\n    }\\n\\n    struct Proposal {\\n        address proposer;\\n        address[] codeSequence;\\n        uint256 creationBlock;\\n        uint256 accept;\\n        uint256 refuse;\\n        address triggeringRules;\\n        address[] canTerminateAddresses;\\n        address[] validatorsAddresses;\\n        bool validationPassed;\\n        uint256 terminationBlock;\\n        bytes votingTokens;\\n    }\\n\\n    struct ProposalConfiguration {\\n        address[] collections;\\n        uint256[] objectIds;\\n        uint256[] weights;\\n        address creationRules;\\n        address triggeringRules;\\n        address[] canTerminateAddresses;\\n        address[] validatorsAddresses;\\n    }\\n\\n    function batchCreate(ProposalCodes[] calldata codeSequences) external returns(bytes32[] memory createdProposalIds);\\n\\n    function list(bytes32[] calldata proposalIds) external view returns(Proposal[] memory);\\n\\n    function votes(bytes32[] calldata proposalIds, address[] calldata voters, bytes32[][] calldata items) external view returns(uint256[][] memory accepts, uint256[][] memory refuses, uint256[][] memory toWithdraw);\\n    function weight(bytes32 code) external view returns(uint256);\\n\\n    function vote(address erc20TokenAddress, bytes memory permitSignature, bytes32 proposalId, uint256 accept, uint256 refuse, address voter, bool alsoTerminate) external payable;\\n    function batchVote(bytes[] calldata data) external payable;\\n\\n    function withdrawAll(bytes32[] memory proposalIds, address voterOrReceiver, bool afterTermination) external;\\n\\n    function terminate(bytes32[] calldata proposalIds) external;\\n\\n    function configuration() external view returns(ProposalConfiguration memory);\\n    function setConfiguration(ProposalConfiguration calldata newValue) external returns(ProposalConfiguration memory oldValue);\\n\\n    function lastProposalId() external view returns(bytes32);\\n\\n    function lastVoteBlock(address voter) external view returns (uint256);\\n\\n    event ProposalCreated(address indexed proposer, address indexed code, bytes32 indexed proposalId);\\n    event ProposalWeight(bytes32 indexed proposalId, address indexed collection, uint256 indexed id, bytes32 key, uint256 weight);\\n    event ProposalTerminated(bytes32 indexed proposalId, bool result, bytes errorData);\\n\\n    event Accept(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n    event MoveToAccept(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n    event RetireAccept(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n\\n    event Refuse(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n    event MoveToRefuse(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n    event RetireRefuse(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n}\\n\\ninterface IProposalChecker {\\n    function check(address proposalsManagerAddress, bytes32 id, bytes calldata data, address from, address voter) external view returns(bool);\\n}\\n\\ninterface IExternalProposalsManagerCommands {\\n    function createProposalCodeSequence(bytes32 proposalId, IProposalsManager.ProposalCode[] memory codeSequenceInput, address sender) external returns (address[] memory codeSequence, IProposalsManager.ProposalConfiguration memory localConfiguration);\\n    function proposalCanBeFinalized(bytes32 proposalId, IProposalsManager.Proposal memory proposal, bool validationPassed, bool result) external view returns (bool);\\n    function isVotable(bytes32 proposalId, IProposalsManager.Proposal memory proposal, address from, address voter, bool voteOrWithtraw) external view returns (bytes memory response);\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/factory/model/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../../dynamicMetadata/model/IDynamicMetadataCapableElement.sol\\\";\\n\\ninterface IFactory is IDynamicMetadataCapableElement {\\n\\n    event Deployed(address indexed modelAddress, address indexed deployedAddress, address indexed deployer, bytes deployedLazyInitResponse);\\n\\n    function modelAddress() external view returns(address);\\n    function setModelAddress(address newValue) external returns(address oldValue);\\n\\n    function deployer(address deployedAddress) external view returns(address);\\n\\n    function deploy(bytes calldata deployData) external payable returns(address deployedAddress, bytes memory deployedLazyInitResponse);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ILazyInitCapableElement is IERC165 {\\n\\n    function lazyInit(bytes calldata lazyInitData) external returns(bytes memory initResponse);\\n    function initializer() external view returns(address);\\n\\n    event Host(address indexed from, address indexed to);\\n\\n    function host() external view returns(address);\\n    function setHost(address newValue) external returns(address oldValue);\\n\\n    function subjectIsAuthorizedFor(address subject, address location, bytes4 selector, bytes calldata payload, uint256 value) external view returns(bool);\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/dynamicMetadata/model/IDynamicMetadataCapableElement.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../../generic/model/ILazyInitCapableElement.sol\\\";\\n\\ninterface IDynamicMetadataCapableElement is ILazyInitCapableElement {\\n\\n    function uri() external view returns(string memory);\\n    function plainUri() external view returns(string memory);\\n\\n    function setUri(string calldata newValue) external returns (string memory oldValue);\\n\\n    function dynamicUriResolver() external view returns(address);\\n    function setDynamicUriResolver(address newValue) external returns(address oldValue);\\n}\"\r\n    },\r\n    \"@ethereansos/items-v2/contracts/model/IERC1155Views.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @title IERC1155Views - An optional utility interface to improve the ERC-1155 Standard.\\n * @dev This interface introduces some additional capabilities for ERC-1155 Tokens.\\n */\\ninterface IERC1155Views {\\n\\n    /**\\n     * @dev Returns the total supply of the given token id\\n     * @param itemId the id of the token whose availability you want to know \\n     */\\n    function totalSupply(uint256 itemId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the name of the given token id\\n     * @param itemId the id of the token whose name you want to know \\n     */\\n    function name(uint256 itemId) external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the given token id\\n     * @param itemId the id of the token whose symbol you want to know \\n     */\\n    function symbol(uint256 itemId) external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals of the given token id\\n     * @param itemId the id of the token whose decimals you want to know \\n     */\\n    function decimals(uint256 itemId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the uri of the given token id\\n     * @param itemId the id of the token whose uri you want to know \\n     */\\n    function uri(uint256 itemId) external view returns (string memory);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"LABEL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proposalData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discriminant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitData\",\"type\":\"bytes\"}],\"name\":\"lazyInit\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitResponseData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ValidateQuorum","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}