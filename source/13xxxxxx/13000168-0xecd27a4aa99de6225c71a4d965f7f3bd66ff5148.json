{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.3.3 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\n// File contracts/interfaces/IOracle.sol\r\npragma solidity 0.8.4;\r\n\r\ninterface IOracle {\r\n    function getTokensOwed(uint256 ethOwed, address pToken, address uTokenLink) external view returns (uint256);\r\n    function getEthOwed(uint256 tokensOwed, address pToken, address uTokenLink) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ICovBase.sol\r\npragma solidity 0.8.4;\r\n\r\ninterface ICovBase {\r\n    function editShield(address shield, bool active) external;\r\n    function updateShield(uint256 ethValue) external payable;\r\n    function checkCoverage(uint256 pAmount) external view returns (bool);\r\n    function getShieldOwed(address shield) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IController.sol\r\npragma solidity 0.8.4;\r\n\r\ninterface IController {\r\n    function bonus() external view returns (uint256);\r\n    function refFee() external view returns (uint256);\r\n    function governor() external view returns (address);\r\n    function depositAmt() external view returns (uint256);\r\n    function beneficiary() external view returns (address payable);\r\n    function emitAction(\r\n        address _user,\r\n        address _referral,\r\n        address _shield,\r\n        address _pToken,\r\n        uint256 _amount,\r\n        uint256 _refFee,\r\n        bool _mint\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IArmorToken.sol\r\npragma solidity 0.8.4;\r\n\r\ninterface IArmorToken {\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    \r\n    function mint(address to, uint256 amount) external returns (bool);\r\n    function burn(uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    // Putting in for now to replicate the compound-like token function where I can find balance at a certain block.\r\n    function balanceOfAt(address account, uint256 blockNo) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.2.0\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/core/arShield.sol\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @title Armor Shield\r\n * @dev arShield base provides the base functionality of arShield contracts.\r\n * @author Armor.fi -- Robert M.C. Forster\r\n**/\r\ncontract arShield {\r\n\r\n    /**\r\n     * @dev Universal requirements:\r\n     *      - notLocked functions must never be able to be accessed if locked.\r\n     *      - onlyGov functions must only ever be able to be accessed by governance.\r\n     *      - Total of refBals must always equal refTotal.\r\n     *      - depositor should always be address(0) if contract is not locked.\r\n     *      - totalTokens must always equal pToken.balanceOf( address(this) ) - (refTotal + sum(feesToLiq) ).\r\n    **/\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Denominator for % fractions.\r\n    uint256 constant DENOMINATOR = 10000;\r\n    \r\n    // Whether or not the pool has capped coverage.\r\n    bool public capped;\r\n    // Whether or not the contract is locked.\r\n    bool public locked;\r\n    // Limit of tokens (in Wei) that can be entered into the shield.\r\n    uint256 public limit;\r\n    // Address that will receive default referral fees and excess eth/tokens.\r\n    address payable public beneficiary;\r\n    // User who deposited to notify of a hack.\r\n    address public depositor;\r\n    // Amount to payout in Ether per token for the most recent hack.\r\n    uint256 public payoutAmt;\r\n    // Block at which users must be holding tokens to receive a payout.\r\n    uint256 public payoutBlock;\r\n    // Total amount to be paid to referrers.\r\n    uint256 public refTotal;\r\n    // 0.25% paid for minting in order to pay for the first week of coverage--can be immediately liquidated.\r\n    uint256[] public feesToLiq;\r\n    // Different amounts to charge as a fee for each protocol.\r\n    uint256[] public feePerBase;\r\n    // Total tokens to protect in the vault (tokens - fees).\r\n    uint256 public totalTokens;\r\n\r\n    // Balance of referrers.\r\n    mapping (address => uint256) public refBals;\r\n   // Whether user has been paid for a specific payout block.\r\n    mapping (uint256 => mapping (address => uint256)) public paid;\r\n\r\n    // Chainlink address for the underlying token.\r\n    address public uTokenLink;\r\n    // Protocol token that we're providing protection for.\r\n    IERC20 public pToken;\r\n    // Oracle to find uToken price.\r\n    IOracle public oracle;\r\n    // The armorToken that this shield issues.\r\n    IArmorToken public arToken;\r\n    // Coverage bases that we need to be paying.\r\n    ICovBase[] public covBases;\r\n    // Used for universal variables (all shields) such as bonus for liquidation.\r\n    IController public controller;\r\n\r\n    event Unlocked(uint256 timestamp);\r\n    event Locked(address reporter, uint256 timestamp);\r\n    event HackConfirmed(uint256 payoutBlock, uint256 timestamp);\r\n    event Mint(address indexed user, uint256 amount, uint256 timestamp);\r\n    event Redemption(address indexed user, uint256 amount, uint256 timestamp);\r\n\r\n    modifier onlyGov \r\n    {\r\n        require(msg.sender == controller.governor(), \"Only governance may call this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier isLocked \r\n    {\r\n        require(locked, \"You may not do this while the contract is unlocked.\");\r\n        _;\r\n    }\r\n\r\n    // Only allow minting when there are no claims processing (people withdrawing to receive Ether).\r\n    modifier notLocked \r\n    {\r\n        require(!locked, \"You may not do this while the contract is locked.\");\r\n        _;\r\n    }\r\n\r\n    // Used for initial soft launch to limit the amount of funds in the shield. 0 if unlimited.\r\n    modifier withinLimits\r\n    {\r\n        _;\r\n        uint256 _limit = limit;\r\n        require(_limit == 0 || pToken.balanceOf( address(this) ) <= _limit, \"Too much value in the shield.\");\r\n    }\r\n    \r\n    receive() external payable {}\r\n    \r\n    /**\r\n     * @notice Controller immediately initializes contract with this.\r\n     * @dev - Must set all included variables properly.\r\n     *      - Must set covBases and fees in correct order.\r\n     *      - Must not allow improper lengths.\r\n     * @param _oracle Address of our oracle for this family of tokens.\r\n     * @param _pToken The protocol token we're protecting.\r\n     * @param _arToken The Armor token that the vault controls.\r\n     * @param _uTokenLink ChainLink contract for the underlying token.\r\n     * @param _fees Mint/redeem fees for each coverage base.\r\n     * @param _covBases Addresses of the coverage bases to pay for coverage.\r\n    **/\r\n    function initialize(\r\n        address _oracle,\r\n        address _pToken,\r\n        address _arToken,\r\n        address _uTokenLink, \r\n        uint256[] calldata _fees,\r\n        address[] calldata _covBases\r\n    )\r\n      external\r\n    {\r\n        require(address(arToken) == address(0), \"Contract already initialized.\");\r\n\r\n        uTokenLink = _uTokenLink;\r\n        pToken = IERC20(_pToken);\r\n        oracle = IOracle(_oracle);\r\n        arToken = IArmorToken(_arToken);\r\n        controller = IController(msg.sender);\r\n        beneficiary = controller.beneficiary();\r\n\r\n        // CovBases and fees must always be the same length.\r\n        require(_covBases.length == _fees.length, \"Improper length array.\");\r\n        for(uint256 i = 0; i < _covBases.length; i++) {\r\n            covBases.push( ICovBase(_covBases[i]) );\r\n            feePerBase.push(_fees[i]);\r\n            feesToLiq.push(0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice User deposits pToken, is returned arToken. Amount returned is judged based off amount in contract.\r\n     *         Amount returned will likely be more than deposited because pTokens will be removed to pay for cover.\r\n     * @dev - Must increase referrer bal 0.25% (in tests) if there is a referrer, beneficiary bal if not.\r\n     *      - Important: must mint correct value of tokens in all scenarios. Conversion from pToken to arToken - (referral fee - feePerBase amounts - liquidator bonus).\r\n     *      - Must take exactly _pAmount from user and deposit to this address.\r\n     *      - Important: must save all fees correctly.\r\n     * @param _pAmount Amount of pTokens to deposit to the contract.\r\n     * @param _referrer The address that referred the user to arShield.\r\n    **/\r\n    function mint(\r\n        uint256 _pAmount,\r\n        address _referrer\r\n    )\r\n      external\r\n      notLocked\r\n      withinLimits\r\n    {\r\n        address user = msg.sender;\r\n\r\n        // fee is total including refFee\r\n        (\r\n         uint256 fee, \r\n         uint256 refFee, \r\n         uint256 totalFees,\r\n         uint256[] memory newFees\r\n        ) = _findFees(_pAmount);\r\n\r\n        uint256 arAmount = arValue(_pAmount - fee);\r\n        pToken.safeTransferFrom(user, address(this), _pAmount);\r\n        _saveFees(newFees, _referrer, refFee);\r\n\r\n        // If this vault is capped in its coverage, we check whether the mint should be allowed, and update.\r\n        if (capped) {\r\n            uint256 ethValue = getEthValue(pToken.balanceOf( address(this) ) - totalFees);\r\n            require(checkCapped(ethValue), \"Not enough coverage available.\");\r\n\r\n            // If we don't update here, two shields could get big deposits at the same time and allow both when it shouldn't.\r\n            // This update runs the risk of making CoverageBase need to pay more than it has upfront, but in that case we liquidate.\r\n            for (uint256 i = 0; i < covBases.length; i++) covBases[i].updateShield(ethValue);\r\n        }\r\n\r\n        arToken.mint(user, arAmount);\r\n        controller.emitAction(\r\n            msg.sender, \r\n            _referrer, \r\n            address(this), \r\n            address(pToken),\r\n            _pAmount,\r\n            refFee,\r\n            true\r\n        );\r\n        emit Mint(user, arAmount, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Redeem arTokens for underlying pTokens.\r\n     * @dev - Must increase referrer bal 0.25% (in tests) if there is a referrer, beneficiary bal if not.\r\n     *      - Important: must return correct value of tokens in all scenarios. Conversion from arToken to pToken - (referral fee - feePerBase amounts - liquidator bonus).\r\n     *      - Must take exactly _arAmount from user and deposit to this address.\r\n     *      - Important: must save all fees correctly.\r\n     * @param _arAmount Amount of arTokens to redeem.\r\n     * @param _referrer The address that referred the user to arShield.\r\n    **/\r\n    function redeem(\r\n        uint256 _arAmount,\r\n        address _referrer\r\n    )\r\n      external\r\n    {\r\n        address user = msg.sender;\r\n        uint256 pAmount = pValue(_arAmount);\r\n        arToken.transferFrom(user, address(this), _arAmount);\r\n        arToken.burn(_arAmount);\r\n        \r\n        (\r\n         uint256 fee, \r\n         uint256 refFee,\r\n         uint256 totalFees,\r\n         uint256[] memory newFees\r\n        ) = _findFees(pAmount);\r\n\r\n        pToken.transfer(user, pAmount - fee);\r\n        _saveFees(newFees, _referrer, refFee);\r\n\r\n        // If we don't update this here, users will get stuck paying for coverage that they are not using.\r\n        uint256 ethValue = getEthValue(pToken.balanceOf( address(this) ) - totalFees);\r\n        for (uint256 i = 0; i < covBases.length; i++) covBases[i].updateShield(ethValue);\r\n\r\n        controller.emitAction(\r\n            msg.sender, \r\n            _referrer, \r\n            address(this), \r\n            address(pToken),\r\n            pAmount,\r\n            refFee,\r\n            false\r\n        );\r\n        emit Redemption(user, _arAmount, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Liquidate for payment for coverage by selling to people at oracle price.\r\n     * @dev - Must give correct amount of tokens.\r\n     *      - Must take correct amount of Ether back.\r\n     *      - Must adjust fees correctly afterwards.\r\n     *      - Must not allow any extra to be sold than what's needed.\r\n     * @param _covId covBase ID that we are liquidating.\r\n    **/\r\n    function liquidate(\r\n        uint256 _covId\r\n    )\r\n      external\r\n      payable\r\n    {\r\n        // Get full amounts for liquidation here.\r\n        (\r\n         uint256 ethOwed, \r\n         uint256 tokensOwed,\r\n         uint256 tokenFees\r\n        ) = liqAmts(_covId);\r\n        require(msg.value <= ethOwed, \"Too much Ether paid.\");\r\n\r\n        // Determine eth value and amount of tokens to pay?\r\n        (\r\n         uint256 tokensOut,\r\n         uint256 feesPaid,\r\n         uint256 ethValue\r\n        ) = payAmts(\r\n            msg.value,\r\n            ethOwed,\r\n            tokensOwed,\r\n            tokenFees\r\n        );\r\n\r\n        covBases[_covId].updateShield{value:msg.value}(ethValue);\r\n        feesToLiq[_covId] -= feesPaid;\r\n        pToken.transfer(msg.sender, tokensOut);\r\n    }\r\n\r\n    /**\r\n     * @notice Claim funds if you were holding tokens on the payout block.\r\n     * @dev - Must return correct amount of funds to user according to their balance at the time.\r\n     *      - Must subtract if paid mapping has value.\r\n     *      - Must correctly set paid.\r\n     *      - Must only ever work for users who held tokens at exactly payout block.\r\n    **/\r\n    function claim()\r\n      external\r\n      isLocked\r\n    {\r\n        // Find balance at the payout block, multiply by the amount per token to pay, subtract anything paid.\r\n        uint256 balance = arToken.balanceOfAt(msg.sender, payoutBlock);\r\n        uint256 owedBal = balance - paid[payoutBlock][msg.sender];\r\n        uint256 amount = payoutAmt\r\n                         * owedBal\r\n                         / 1 ether;\r\n\r\n        require(balance > 0 && amount > 0, \"Sender did not have funds on payout block.\");\r\n        paid[payoutBlock][msg.sender] += owedBal;\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Used by referrers to withdraw their owed balance.\r\n     * @dev - Must allow user to withdraw correct referral balance from the contract.\r\n     *      - Must allow no extra than referral balance to be withdrawn.\r\n    **/\r\n    function withdraw(\r\n        address _user\r\n    )\r\n      external\r\n    {\r\n        uint256 balance = refBals[_user];\r\n        refBals[_user] = 0;\r\n        pToken.transfer(_user, balance);\r\n    }\r\n\r\n    /**\r\n     * @notice Inverse of arValue (find yToken value of arToken amount).\r\n     * @dev - Must convert correctly in any scenario.\r\n     * @param _arAmount Amount of arTokens to find yToken value of.\r\n     * @return pAmount Amount of pTokens the input arTokens are worth.\r\n    **/\r\n    function pValue(\r\n        uint256 _arAmount\r\n    )\r\n      public\r\n      view\r\n    returns (\r\n        uint256 pAmount\r\n    )\r\n    {\r\n        uint256 totalSupply = arToken.totalSupply();\r\n        if (totalSupply == 0) return _arAmount;\r\n\r\n        pAmount = ( pToken.balanceOf( address(this) ) - totalFeeAmts() )\r\n                  * _arAmount \r\n                  / totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice Find the arToken value of a pToken amount.\r\n     * @dev - Must convert correctly in any scenario.\r\n     * @param _pAmount Amount of yTokens to find arToken value of.\r\n     * @return arAmount Amount of arToken the input pTokens are worth.\r\n    **/\r\n    function arValue(\r\n        uint256 _pAmount\r\n    )\r\n      public\r\n      view\r\n    returns (\r\n        uint256 arAmount\r\n    )\r\n    {\r\n        uint256 balance = pToken.balanceOf( address(this) );\r\n        if (balance == 0) return _pAmount;\r\n\r\n        arAmount = arToken.totalSupply()\r\n                   * _pAmount \r\n                   / ( balance - totalFeeAmts() );\r\n    }\r\n\r\n    /**\r\n     * @notice Amounts owed to be liquidated.\r\n     * @dev - Must always return correct amounts that can currently be liquidated.\r\n     * @param _covId Coverage Base ID lol\r\n     * @return ethOwed Amount of Ether owed to coverage base.\r\n     * @return tokensOwed Amount of tokens owed to liquidator for that Ether.\r\n     * @return tokenFees Amount of tokens owed to liquidator for that Ether.\r\n    **/\r\n    function liqAmts(\r\n        uint256 _covId\r\n    )\r\n      public\r\n      view\r\n    returns(\r\n        uint256 ethOwed,\r\n        uint256 tokensOwed,\r\n        uint256 tokenFees\r\n    )\r\n    {\r\n        // Find amount owed in Ether, find amount owed in protocol tokens.\r\n        // If nothing is owed to coverage base, don't use getTokensOwed.\r\n        ethOwed = covBases[_covId].getShieldOwed( address(this) );\r\n        if (ethOwed > 0) tokensOwed = oracle.getTokensOwed(ethOwed, address(pToken), uTokenLink);\r\n\r\n        tokenFees = feesToLiq[_covId];\r\n        require(tokensOwed + tokenFees > 0, \"No fees are owed.\");\r\n\r\n        // Find the Ether value of the mint fees we have.\r\n        uint256 ethFees = ethOwed > 0 ?\r\n                            ethOwed\r\n                            * tokenFees\r\n                            / tokensOwed\r\n                          : getEthValue(tokenFees);\r\n        ethOwed += ethFees;\r\n        tokensOwed += tokenFees;\r\n\r\n        // Add a bonus for liquidators (0% to start).\r\n        // As it stands, this will lead to a small loss of arToken:pToken conversion immediately so in bigger\r\n        // amounts it could be taken advantage of, but we do not think real damage can happen given the small amounts.\r\n        uint256 liqBonus = tokensOwed \r\n                           * controller.bonus()\r\n                           / DENOMINATOR;\r\n        tokensOwed += liqBonus;\r\n    }\r\n\r\n    /**\r\n     * @notice Find amount to pay a liquidator--needed because a liquidator may not pay all Ether.\r\n     * @dev - Must always return correct amounts to be paid according to liqAmts and Ether in.\r\n    **/\r\n    function payAmts(\r\n        uint256 _ethIn,\r\n        uint256 _ethOwed,\r\n        uint256 _tokensOwed,\r\n        uint256 _tokenFees\r\n    )\r\n      public\r\n      view\r\n    returns(\r\n        uint256 tokensOut,\r\n        uint256 feesPaid,\r\n        uint256 ethValue\r\n    )\r\n    {\r\n        // Actual amount we're liquidating (liquidator may not pay full Ether owed).\r\n        tokensOut = _ethIn\r\n                    * _tokensOwed\r\n                    / _ethOwed;\r\n\r\n        // Amount of fees for this protocol being paid.\r\n        feesPaid = _ethIn\r\n                   * _tokenFees\r\n                   / _ethOwed;\r\n\r\n        // Ether value of all of the contract minus what we're liquidating.\r\n        ethValue = (pToken.balanceOf( address(this) ) \r\n                    - totalFeeAmts())\r\n                   * _ethOwed\r\n                   / _tokensOwed;\r\n    }\r\n\r\n    /**\r\n     * @notice Find total amount of tokens that are not to be covered (ref fees, tokens to liq, liquidator bonus).\r\n     * @dev - Must always return correct total fees owed.\r\n     * @return totalOwed Total amount of tokens owed in fees.\r\n    **/\r\n    function totalFeeAmts()\r\n      public\r\n      view\r\n    returns(\r\n        uint256 totalOwed\r\n    )\r\n    {\r\n        for (uint256 i = 0; i < covBases.length; i++) {\r\n            uint256 ethOwed = covBases[i].getShieldOwed( address(this) );\r\n            if (ethOwed > 0) totalOwed += oracle.getTokensOwed(ethOwed, address(pToken), uTokenLink);\r\n            totalOwed += feesToLiq[i];\r\n        }\r\n\r\n        // Add a bonus for liquidators (0.5% to start). Removed for now.\r\n        /**uint256 liqBonus = totalOwed \r\n                           * controller.bonus()\r\n                           / DENOMINATOR;\r\n\r\n        totalOwed += liqBonus;**/\r\n        totalOwed += refTotal;\r\n    }\r\n\r\n    /**\r\n     * @notice If the shield requires full coverage, check coverage base to see if it is available.\r\n     * @dev - Must return false if any of the covBases do not have coverage available.\r\n     * @param _ethValue Ether value of the new tokens.\r\n     * @return allowed True if the deposit is allowed.\r\n    **/\r\n    function checkCapped(\r\n        uint256 _ethValue\r\n    )\r\n      public\r\n      view\r\n    returns(\r\n        bool allowed\r\n    )\r\n    {\r\n        if (capped) {\r\n            for(uint256 i = 0; i < covBases.length; i++) {\r\n                if( !covBases[i].checkCoverage(_ethValue) ) return false;\r\n            }\r\n        }\r\n        allowed = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Find the Ether value of a certain amount of pTokens.\r\n     * @dev - Must return correct Ether value for _pAmount.\r\n     * @param _pAmount The amount of pTokens to find Ether value for.\r\n     * @return ethValue Ether value of the pTokens (in Wei).\r\n    **/\r\n    function getEthValue(\r\n        uint256 _pAmount\r\n    )\r\n      public\r\n      view\r\n    returns(\r\n        uint256 ethValue\r\n    )\r\n    {\r\n        ethValue = oracle.getEthOwed(_pAmount, address(pToken), uTokenLink);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows frontend to find the percents that are taken from mint/redeem. 10 == 0.1%.\r\n    **/\r\n    function findFeePct()\r\n      external\r\n      view\r\n    returns(\r\n        uint256 percent\r\n    )\r\n    {\r\n        // Find protocol fees for each coverage base.\r\n        uint256 end = feePerBase.length;\r\n        for (uint256 i = 0; i < end; i++) percent += feePerBase[i];\r\n        percent += controller.refFee() \r\n                   * percent\r\n                   / DENOMINATOR;\r\n    }\r\n\r\n    /**\r\n     * @notice Find the fee for deposit and withdrawal.\r\n     * @param _pAmount The amount of pTokens to find the fee of.\r\n     * @return userFee coverage + mint fees + liquidator bonus + referral fee.\r\n     * @return refFee Referral fee.\r\n     * @return totalFees Total fees owed from the contract including referrals (used to calculate amount to cover).\r\n     * @return newFees New fees to save in feesToLiq.\r\n    **/\r\n    function _findFees(\r\n        uint256 _pAmount\r\n    )\r\n      internal\r\n      view\r\n    returns(\r\n        uint256 userFee,\r\n        uint256 refFee,\r\n        uint256 totalFees,\r\n        uint256[] memory newFees\r\n    )\r\n    {\r\n        // Find protocol fees for each coverage base.\r\n        newFees = feesToLiq;\r\n        for (uint256 i = 0; i < newFees.length; i++) {\r\n            totalFees += newFees[i];\r\n            uint256 fee = _pAmount\r\n                          * feePerBase[i]\r\n                          / DENOMINATOR;\r\n            newFees[i] += fee;\r\n            userFee += fee;\r\n        }\r\n\r\n        // Add referral fee.\r\n        refFee = userFee \r\n                 * controller.refFee() \r\n                 / DENOMINATOR;\r\n        userFee += refFee;\r\n\r\n        // Add liquidator bonus.\r\n        /**uint256 liqBonus = (userFee - refFee) \r\n                           * controller.bonus()\r\n                           / DENOMINATOR;**/\r\n\r\n        // userFee += liqBonus; <-- user not being charged liqBonus fee\r\n        totalFees += userFee + refTotal/* + liqBonus*/;\r\n    }\r\n\r\n    /**\r\n     * @notice Save new coverage fees and referral fees.\r\n     * @param liqFees Fees associated with depositing to a coverage base.\r\n     * @param _refFee Fee given to the address that referred this user.\r\n    **/\r\n    function _saveFees(\r\n        uint256[] memory liqFees,\r\n        address _referrer,\r\n        uint256 _refFee\r\n    )\r\n      internal\r\n    {\r\n        refTotal += _refFee;\r\n        if ( _referrer != address(0) ) refBals[_referrer] += _refFee;\r\n        else refBals[beneficiary] += _refFee;\r\n        for (uint256 i = 0; i < liqFees.length; i++) feesToLiq[i] = liqFees[i];\r\n    }\r\n    \r\n    /**\r\n     * @notice Anyone may call this to pause contract deposits for a couple days.\r\n     * @notice They will get refunded + more when hack is confirmed.\r\n     * @dev - Must allow any user to lock contract when a deposit is sent.\r\n     *      - Must set variables correctly.\r\n    **/\r\n    function notifyHack()\r\n      external\r\n      payable\r\n      notLocked\r\n    {\r\n        require(msg.value == controller.depositAmt(), \"You must pay the deposit amount to notify a hack.\");\r\n        depositor = msg.sender;\r\n        locked = true;\r\n        emit Locked(msg.sender, block.timestamp);\r\n    }\r\n    \r\n    /**\r\n     * @notice Used by governor to confirm that a hack happened, which then locks the contract in anticipation of claims.\r\n     * @dev - On success, depositor paid exactly correct deposit amount (10 Ether in tests.).\r\n     *      - depositor == address(0).\r\n     *      - payoutBlock and payoutAmt set correctly.\r\n     * @param _payoutBlock Block that user must have had tokens at. Will not be the same as when the hack occurred\r\n     *                     because we will need to give time for users to withdraw from dexes and such if needed.\r\n     * @param _payoutAmt The amount of Ether PER TOKEN that users will be given for this claim.\r\n    **/\r\n    function confirmHack(\r\n        uint256 _payoutBlock,\r\n        uint256 _payoutAmt\r\n    )\r\n      external\r\n      isLocked\r\n      onlyGov\r\n    {\r\n        // low-level call to avoid push problems\r\n        payable(depositor).call{value: controller.depositAmt()}(\"\");\r\n        delete depositor;\r\n        payoutBlock = _payoutBlock;\r\n        payoutAmt = _payoutAmt;\r\n        emit HackConfirmed(_payoutBlock, block.timestamp);\r\n    }\r\n    \r\n    /**\r\n     * @notice Used by controller to confirm that a hack happened, which then locks the contract in anticipation of claims.\r\n     * @dev - On success, locked == false, payoutBlock == 0, payoutAmt == 0.\r\n    **/\r\n    function unlock()\r\n      external\r\n      isLocked\r\n      onlyGov\r\n    {\r\n        locked = false;\r\n        delete payoutBlock;\r\n        delete payoutAmt;\r\n        emit Unlocked(block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Funds may be withdrawn to beneficiary if any are leftover after a hack.\r\n     * @dev - On success, full token/Ether balance should be withdrawn to beneficiary.\r\n     *      - Tokens/Ether should never be withdrawn anywhere other than beneficiary.\r\n     * @param _token Address of the token to withdraw excess for. Cannot be protocol token.\r\n    **/\r\n    function withdrawExcess(address _token)\r\n      external\r\n      notLocked\r\n    {\r\n        if ( _token == address(0) ) beneficiary.transfer( address(this).balance );\r\n        else if ( _token != address(pToken) ) {\r\n            IERC20(_token).transfer( beneficiary, IERC20(_token).balanceOf( address(this) ) );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Block a payout if an address minted tokens after a hack occurred.\r\n     *      There are ways people can mess with this to make it annoying to ban people,\r\n     *      but ideally the presence of this function alone will stop malicious minting.\r\n     * \r\n     *      Although it's not a likely scenario, the reason we put amounts in here\r\n     *      is to avoid a bad actor sending a bit to a legitimate holder and having their\r\n     *      full balance banned from receiving a payout.\r\n     * @dev - On success, paid[_payoutBlock][_users] for every user[i] should be incremented by _amount[i].\r\n     * @param _payoutBlock The block at which the hack occurred.\r\n     * @param _users List of users to ban from receiving payout.\r\n     * @param _amounts Bad amounts (in arToken wei) that the user should not be paid.\r\n    **/\r\n    function banPayouts(\r\n        uint256 _payoutBlock,\r\n        address[] calldata _users,\r\n        uint256[] calldata _amounts\r\n    )\r\n      external\r\n      onlyGov\r\n    {\r\n        for (uint256 i = 0; i < _users.length; i++) paid[_payoutBlock][_users[i]] += _amounts[i];\r\n    }\r\n\r\n    /**\r\n     * @notice Change the fees taken for minting and redeeming.\r\n     * @dev - On success, feePerBase == _newFees.\r\n     *      - No success on inequal lengths.\r\n     * @param _newFees Array for each of the new fees. 10 == 0.1% fee.\r\n    **/\r\n    function changeFees(\r\n        uint256[] calldata _newFees\r\n    )\r\n      external\r\n      onlyGov\r\n    {\r\n        require(_newFees.length == feePerBase.length, \"Improper fees length.\");\r\n        for (uint256 i = 0; i < _newFees.length; i++) feePerBase[i] = _newFees[i];\r\n    }\r\n\r\n    /**\r\n     * @notice Change the main beneficiary of the shield.\r\n     * @dev - On success, contract variable beneficiary == _beneficiary.\r\n     * @param _beneficiary New address to withdraw excess funds and get default referral fees.\r\n    **/\r\n    function changeBeneficiary(\r\n        address payable _beneficiary\r\n    )\r\n      external\r\n      onlyGov\r\n    {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @notice Change whether this arShield has a cap on tokens submitted or not.\r\n     * @dev - On success, contract variable capped == _capped.\r\n     * @param _capped True if there should now be a cap on the vault.\r\n    **/\r\n    function changeCapped(\r\n        bool _capped\r\n    )\r\n      external\r\n      onlyGov\r\n    {\r\n        capped = _capped;\r\n    }\r\n\r\n    /**\r\n     * @notice Change whether this arShield has a limit to tokens in the shield.\r\n     * @dev - On success, contract variable limit == _limit.\r\n     * @param _limit Limit of funds in the contract, 0 if unlimited.\r\n    **/\r\n    function changeLimit(\r\n        uint256 _limit\r\n    )\r\n      external\r\n      onlyGov\r\n    {\r\n        limit = _limit;\r\n    }\r\n\r\n    /**\r\n     * @notice Cancel coverage if this shield is being deprecated.\r\n     * @param _covId Coverage base ID to cancel.\r\n    **/\r\n    function cancelCoverage(\r\n        uint256 _covId\r\n    )\r\n      external\r\n      onlyGov\r\n    {\r\n        covBases[_covId].updateShield(0);\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"HackConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"arToken\",\"outputs\":[{\"internalType\":\"contract IArmorToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pAmount\",\"type\":\"uint256\"}],\"name\":\"arValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"arAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_payoutBlock\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"banPayouts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_covId\",\"type\":\"uint256\"}],\"name\":\"cancelCoverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_capped\",\"type\":\"bool\"}],\"name\":\"changeCapped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newFees\",\"type\":\"uint256[]\"}],\"name\":\"changeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"changeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethValue\",\"type\":\"uint256\"}],\"name\":\"checkCapped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_payoutBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payoutAmt\",\"type\":\"uint256\"}],\"name\":\"confirmHack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"covBases\",\"outputs\":[{\"internalType\":\"contract ICovBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feePerBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feesToLiq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"findFeePct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pAmount\",\"type\":\"uint256\"}],\"name\":\"getEthValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_arToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uTokenLink\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_covBases\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_covId\",\"type\":\"uint256\"}],\"name\":\"liqAmts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_covId\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notifyHack\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_arAmount\",\"type\":\"uint256\"}],\"name\":\"pValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenFees\",\"type\":\"uint256\"}],\"name\":\"payAmts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_arAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refBals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeAmts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalOwed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uTokenLink\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawExcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"arShield","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2334b536f1b5758ead498537f281c453b43595a1a4249cd33325dab364acd998"}]}