{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 830\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/external/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControlUpgradeable`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, IAccessControl {\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {}\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == msg.sender, \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAgToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title IAgToken\\n/// @author Angle Core Team\\n/// @notice Interface for the stablecoins `AgToken` contracts\\n/// @dev The only functions that are left in the interface are the functions which are used\\n/// at another point in the protocol by a different contract\\ninterface IAgToken is IERC20Upgradeable {\\n    // ======================= `StableMaster` functions ============================\\n    function mint(address account, uint256 amount) external;\\n\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n\\n    function burnSelf(uint256 amount, address burner) external;\\n\\n    // ========================= External function =================================\\n\\n    function stableMaster() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICollateralSettler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title ICollateralSettler\\n/// @author Angle Core Team\\n/// @notice Interface for the collateral settlement contracts\\ninterface ICollateralSettler {\\n    function triggerSettlement(\\n        uint256 _oracleValue,\\n        uint256 _sanRate,\\n        uint256 _stocksUsers\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IStableMaster.sol\\\";\\n\\n/// @title ICore\\n/// @author Angle Core Team\\n/// @dev Interface for the functions of the `Core` contract\\ninterface ICore {\\n    function revokeStableMaster(address stableMaster) external;\\n\\n    function addGovernor(address _governor) external;\\n\\n    function removeGovernor(address _governor) external;\\n\\n    function setGuardian(address _guardian) external;\\n\\n    function revokeGuardian() external;\\n\\n    function governorList() external view returns (address[] memory);\\n\\n    function stablecoinList() external view returns (address[] memory);\\n\\n    function guardian() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IERC721 is IERC165 {\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IERC721Metadata is IERC721 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title IFeeManagerFunctions\\n/// @author Angle Core Team\\n/// @dev Interface for the `FeeManager` contract\\ninterface IFeeManagerFunctions is IAccessControl {\\n    // ================================= Keepers ===================================\\n\\n    function updateUsersSLP() external;\\n\\n    function updateHA() external;\\n\\n    // ================================= Governance ================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        address _perpetualManager\\n    ) external;\\n\\n    function setFees(\\n        uint256[] memory xArray,\\n        uint64[] memory yArray,\\n        uint8 typeChange\\n    ) external;\\n\\n    function setHAFees(uint64 _haFeeDeposit, uint64 _haFeeWithdraw) external;\\n}\\n\\n/// @title IFeeManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev We need these getters as they are used in other contracts of the protocol\\ninterface IFeeManager is IFeeManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IOracle\\n/// @author Angle Core Team\\n/// @notice Interface for Angle's oracle contracts reading oracle rates from both UniswapV3 and Chainlink\\n/// from just UniswapV3 or from just Chainlink\\ninterface IOracle {\\n    function read() external view returns (uint256);\\n\\n    function readAll() external view returns (uint256 lowerRate, uint256 upperRate);\\n\\n    function readLower() external view returns (uint256);\\n\\n    function readUpper() external view returns (uint256);\\n\\n    function readQuote(uint256 baseAmount) external view returns (uint256);\\n\\n    function readQuoteLower(uint256 baseAmount) external view returns (uint256);\\n\\n    function inBase() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPerpetualManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title Interface of the contract managing perpetuals\\n/// @author Angle Core Team\\n/// @dev Front interface, meaning only user-facing functions\\ninterface IPerpetualManagerFront is IERC721Metadata {\\n    function openPerpetual(\\n        address owner,\\n        uint256 amountBrought,\\n        uint256 amountCommitted,\\n        uint256 maxOracleRate,\\n        uint256 minNetMargin\\n    ) external returns (uint256 perpetualID);\\n\\n    function closePerpetual(\\n        uint256 perpetualID,\\n        address to,\\n        uint256 minCashOutAmount\\n    ) external;\\n\\n    function addToPerpetual(uint256 perpetualID, uint256 amount) external;\\n\\n    function removeFromPerpetual(\\n        uint256 perpetualID,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function liquidatePerpetuals(uint256[] memory perpetualIDs) external;\\n\\n    function forceClosePerpetuals(uint256[] memory perpetualIDs) external;\\n\\n    // ========================= External View Functions =============================\\n\\n    function getCashOutAmount(uint256 perpetualID, uint256 rate) external view returns (uint256, uint256);\\n\\n    function isApprovedOrOwner(address spender, uint256 perpetualID) external view returns (bool);\\n}\\n\\n/// @title Interface of the contract managing perpetuals\\n/// @author Angle Core Team\\n/// @dev This interface does not contain user facing functions, it just has functions that are\\n/// interacted with in other parts of the protocol\\ninterface IPerpetualManagerFunctions is IAccessControl {\\n    // ================================= Governance ================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IFeeManager feeManager,\\n        IOracle oracle_\\n    ) external;\\n\\n    function setFeeManager(IFeeManager feeManager_) external;\\n\\n    function setHAFees(\\n        uint64[] memory _xHAFees,\\n        uint64[] memory _yHAFees,\\n        uint8 deposit\\n    ) external;\\n\\n    function setTargetAndLimitHAHedge(uint64 _targetHAHedge, uint64 _limitHAHedge) external;\\n\\n    function setKeeperFeesLiquidationRatio(uint64 _keeperFeesLiquidationRatio) external;\\n\\n    function setKeeperFeesCap(uint256 _keeperFeesLiquidationCap, uint256 _keeperFeesClosingCap) external;\\n\\n    function setKeeperFeesClosing(uint64[] memory _xKeeperFeesClosing, uint64[] memory _yKeeperFeesClosing) external;\\n\\n    function setLockTime(uint64 _lockTime) external;\\n\\n    function setBoundsPerpetual(uint64 _maxLeverage, uint64 _maintenanceMargin) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    // ==================================== Keepers ================================\\n\\n    function setFeeKeeper(uint64 feeDeposit, uint64 feesWithdraw) external;\\n\\n    // =============================== StableMaster ================================\\n\\n    function setOracle(IOracle _oracle) external;\\n}\\n\\n/// @title IPerpetualManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables\\ninterface IPerpetualManager is IPerpetualManagerFunctions {\\n    function poolManager() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function targetHAHedge() external view returns (uint64);\\n\\n    function totalHedgeAmount() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\n// Struct for the parameters associated to a strategy interacting with a collateral `PoolManager`\\n// contract\\nstruct StrategyParams {\\n    // Timestamp of last report made by this strategy\\n    // It is also used to check if a strategy has been initialized\\n    uint256 lastReport;\\n    // Total amount the strategy is expected to have\\n    uint256 totalStrategyDebt;\\n    // The share of the total assets in the `PoolManager` contract that the `strategy` can access to.\\n    uint256 debtRatio;\\n}\\n\\n/// @title IPoolManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the collateral poolManager contracts handling each one type of collateral for\\n/// a given stablecoin\\n/// @dev Only the functions used in other contracts of the protocol are left here\\ninterface IPoolManagerFunctions {\\n    // ============================ Constructor ====================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IPerpetualManager _perpetualManager,\\n        IFeeManager feeManager,\\n        IOracle oracle\\n    ) external;\\n\\n    // ============================ Yield Farming ==================================\\n\\n    function creditAvailable() external view returns (uint256);\\n\\n    function debtOutstanding() external view returns (uint256);\\n\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external;\\n\\n    // ============================ Governance =====================================\\n\\n    function addGovernor(address _governor) external;\\n\\n    function removeGovernor(address _governor) external;\\n\\n    function setGuardian(address _guardian, address guardian) external;\\n\\n    function revokeGuardian(address guardian) external;\\n\\n    function setFeeManager(IFeeManager _feeManager) external;\\n\\n    // ============================= Getters =======================================\\n\\n    function getBalance() external view returns (uint256);\\n\\n    function getTotalAsset() external view returns (uint256);\\n}\\n\\n/// @title IPoolManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev Used in other contracts of the protocol\\ninterface IPoolManager is IPoolManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function feeManager() external view returns (address);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISanToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title ISanToken\\n/// @author Angle Core Team\\n/// @notice Interface for Angle's `SanToken` contract that handles sanTokens, tokens that are given to SLPs\\n/// contributing to a collateral for a given stablecoin\\ninterface ISanToken is IERC20Upgradeable {\\n    // ================================== StableMaster =============================\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n\\n    function burnSelf(uint256 amount, address burner) external;\\n\\n    function stableMaster() external view returns (address);\\n\\n    function poolManager() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStableMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Normally just importing `IPoolManager` should be sufficient, but for clarity here\\n// we prefer to import all concerned interfaces\\nimport \\\"./IPoolManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./ISanToken.sol\\\";\\n\\n// Struct to handle all the parameters to manage the fees\\n// related to a given collateral pool (associated to the stablecoin)\\nstruct MintBurnData {\\n    // Values of the thresholds to compute the minting fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeMint;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeMint;\\n    // Values of the thresholds to compute the burning fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeBurn;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeBurn;\\n    // Max proportion of collateral from users that can be covered by HAs\\n    // It is exactly the same as the parameter of the same name in `PerpetualManager`, whenever one is updated\\n    // the other changes accordingly\\n    uint64 targetHAHedge;\\n    // Minting fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusMint;\\n    // Burning fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusBurn;\\n    // Parameter used to limit the number of stablecoins that can be issued using the concerned collateral\\n    uint256 capOnStableMinted;\\n}\\n\\n// Struct to handle all the variables and parameters to handle SLPs in the protocol\\n// including the fraction of interests they receive or the fees to be distributed to\\n// them\\nstruct SLPData {\\n    // Last timestamp at which the `sanRate` has been updated for SLPs\\n    uint256 lastBlockUpdated;\\n    // Fees accumulated from previous blocks and to be distributed to SLPs\\n    uint256 lockedInterests;\\n    // Max interests used to update the `sanRate` in a single block\\n    // Should be in collateral token base\\n    uint256 maxInterestsDistributed;\\n    // Amount of fees left aside for SLPs and that will be distributed\\n    // when the protocol is collateralized back again\\n    uint256 feesAside;\\n    // Part of the fees normally going to SLPs that is left aside\\n    // before the protocol is collateralized back again (depends on collateral ratio)\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippageFee;\\n    // Portion of the fees from users minting and burning\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 feesForSLPs;\\n    // Slippage factor that's applied to SLPs exiting (depends on collateral ratio)\\n    // If `slippage = BASE_PARAMS`, SLPs can get nothing, if `slippage = 0` they get their full claim\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippage;\\n    // Portion of the interests from lending\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 interestsForSLPs;\\n}\\n\\n/// @title IStableMasterFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the `StableMaster` contract\\ninterface IStableMasterFunctions {\\n    function deploy(\\n        address[] memory _governorList,\\n        address _guardian,\\n        address _agToken\\n    ) external;\\n\\n    // ============================== Lending ======================================\\n\\n    function accumulateInterest(uint256 gain) external;\\n\\n    function signalLoss(uint256 loss) external;\\n\\n    // ============================== HAs ==========================================\\n\\n    function getStocksUsers() external view returns (uint256 maxCAmountInStable);\\n\\n    function convertToSLP(uint256 amount, address user) external;\\n\\n    // ============================== Keepers ======================================\\n\\n    function getCollateralRatio() external returns (uint256);\\n\\n    function setFeeKeeper(\\n        uint64 feeMint,\\n        uint64 feeBurn,\\n        uint64 _slippage,\\n        uint64 _slippageFee\\n    ) external;\\n\\n    // ============================== AgToken ======================================\\n\\n    function updateStocksUsers(uint256 amount, address poolManager) external;\\n\\n    // ============================= Governance ====================================\\n\\n    function setCore(address newCore) external;\\n\\n    function addGovernor(address _governor) external;\\n\\n    function removeGovernor(address _governor) external;\\n\\n    function setGuardian(address newGuardian, address oldGuardian) external;\\n\\n    function revokeGuardian(address oldGuardian) external;\\n\\n    function setCapOnStableAndMaxInterests(\\n        uint256 _capOnStableMinted,\\n        uint256 _maxInterestsDistributed,\\n        IPoolManager poolManager\\n    ) external;\\n\\n    function setIncentivesForSLPs(\\n        uint64 _feesForSLPs,\\n        uint64 _interestsForSLPs,\\n        IPoolManager poolManager\\n    ) external;\\n\\n    function setUserFees(\\n        IPoolManager poolManager,\\n        uint64[] memory _xFee,\\n        uint64[] memory _yFee,\\n        uint8 _mint\\n    ) external;\\n\\n    function setTargetHAHedge(uint64 _targetHAHedge) external;\\n\\n    function pause(bytes32 agent, IPoolManager poolManager) external;\\n\\n    function unpause(bytes32 agent, IPoolManager poolManager) external;\\n}\\n\\n/// @title IStableMaster\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\ninterface IStableMaster is IStableMasterFunctions {\\n    function agToken() external view returns (address);\\n\\n    function collateralMap(IPoolManager poolManager)\\n        external\\n        view\\n        returns (\\n            IERC20 token,\\n            ISanToken sanToken,\\n            IPerpetualManager perpetualManager,\\n            IOracle oracle,\\n            uint256 stocksUsers,\\n            uint256 sanRate,\\n            uint256 collatBase,\\n            SLPData memory slpData,\\n            MintBurnData memory feeData\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/stableMaster/StableMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./StableMasterInternal.sol\\\";\\n\\n/// @title StableMaster\\n/// @author Angle Core Team\\n/// @notice `StableMaster` is the contract handling all the collateral types accepted for a given stablecoin\\n/// It does all the accounting and is the point of entry in the protocol for stable holders and seekers as well as SLPs\\n/// @dev This file contains the core functions of the `StableMaster` contract\\ncontract StableMaster is StableMasterInternal, IStableMasterFunctions, AccessControlUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Role for governors only\\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\\\"GOVERNOR_ROLE\\\");\\n    /// @notice Role for guardians and governors\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n    /// @notice Role for `Core` only, used to propagate guardian and governors\\n    bytes32 public constant CORE_ROLE = keccak256(\\\"CORE_ROLE\\\");\\n\\n    bytes32 public constant STABLE = keccak256(\\\"STABLE\\\");\\n    bytes32 public constant SLP = keccak256(\\\"SLP\\\");\\n\\n    // ============================ DEPLOYER =======================================\\n\\n    /// @notice Creates the access control logic for the governor and guardian addresses\\n    /// @param governorList List of the governor addresses of the protocol\\n    /// @param guardian Guardian address of the protocol\\n    /// @param _agToken Reference to the `AgToken`, that is the ERC20 token handled by the `StableMaster`\\n    /// @dev This function is called by the `Core` when a stablecoin is deployed to maintain consistency\\n    /// across the governor and guardian roles\\n    /// @dev When this function is called by the `Core`, it has already been checked that the `stableMaster`\\n    /// corresponding to the `agToken` was this `stableMaster`\\n    function deploy(\\n        address[] memory governorList,\\n        address guardian,\\n        address _agToken\\n    ) external override onlyRole(CORE_ROLE) {\\n        for (uint256 i = 0; i < governorList.length; i++) {\\n            _grantRole(GOVERNOR_ROLE, governorList[i]);\\n            _grantRole(GUARDIAN_ROLE, governorList[i]);\\n        }\\n        _grantRole(GUARDIAN_ROLE, guardian);\\n        agToken = IAgToken(_agToken);\\n        // Since there is only one address that can be the `AgToken`, and since `AgToken`\\n        // is not to be admin of any role, we do not define any access control role for it\\n    }\\n\\n    // ============================ STRATEGIES =====================================\\n\\n    /// @notice Takes into account the gains made while lending and distributes it to SLPs by updating the `sanRate`\\n    /// @param gain Interests accumulated from lending\\n    /// @dev This function is called by a `PoolManager` contract having some yield farming strategies associated\\n    /// @dev To prevent flash loans, the `sanRate` is not directly updated, it is updated at the blocks that follow\\n    function accumulateInterest(uint256 gain) external override {\\n        // Searching collateral data\\n        Collateral storage col = collateralMap[IPoolManager(msg.sender)];\\n        _contractMapCheck(col);\\n        // A part of the gain goes to SLPs, the rest to the surplus of the protocol\\n        _updateSanRate((gain * col.slpData.interestsForSLPs) / BASE_PARAMS, col);\\n    }\\n\\n    /// @notice Takes into account a loss made by a yield farming strategy\\n    /// @param loss Loss made by the yield farming strategy\\n    /// @dev This function is called by a `PoolManager` contract having some yield farming strategies associated\\n    /// @dev Fees are not accumulated for this function before being distributed: everything is directly used to\\n    /// update the `sanRate`\\n    function signalLoss(uint256 loss) external override {\\n        // Searching collateral data\\n        IPoolManager poolManager = IPoolManager(msg.sender);\\n        Collateral storage col = collateralMap[poolManager];\\n        _contractMapCheck(col);\\n        uint256 sanMint = col.sanToken.totalSupply();\\n        if (sanMint != 0) {\\n            // Updating the `sanRate` and the `lockedInterests` by taking into account a loss\\n            if (col.sanRate * sanMint + col.slpData.lockedInterests * BASE_TOKENS > loss * BASE_TOKENS) {\\n                // The loss is first taken from the `lockedInterests`\\n                uint256 withdrawFromLoss = col.slpData.lockedInterests;\\n\\n                if (withdrawFromLoss >= loss) {\\n                    withdrawFromLoss = loss;\\n                }\\n\\n                col.slpData.lockedInterests -= withdrawFromLoss;\\n                col.sanRate -= ((loss - withdrawFromLoss) * BASE_TOKENS) / sanMint;\\n            } else {\\n                // Normally it should be set to 0, but this would imply that no SLP can enter afterwards\\n                // we therefore set it to 1 (equivalent to 10**(-18))\\n                col.sanRate = 1;\\n                col.slpData.lockedInterests = 0;\\n                // As it is a critical time, governance pauses SLPs to solve the situation\\n                _pause(keccak256(abi.encodePacked(SLP, address(poolManager))));\\n            }\\n            emit SanRateUpdated(address(col.token), col.sanRate);\\n        }\\n    }\\n\\n    // ============================== HAs ==========================================\\n\\n    /// @notice Transforms a HA position into a SLP Position\\n    /// @param amount The amount to transform\\n    /// @param user Address to mint sanTokens to\\n    /// @dev Can only be called by a `PerpetualManager` contract\\n    /// @dev This is typically useful when a HA wishes to cash out but there is not enough collateral\\n    /// in reserves\\n    function convertToSLP(uint256 amount, address user) external override {\\n        // Data about the `PerpetualManager` calling the function is fetched using the `contractMap`\\n        IPoolManager poolManager = _contractMap[msg.sender];\\n        Collateral storage col = collateralMap[poolManager];\\n        _contractMapCheck(col);\\n        // If SLPs are paused, in this situation, then this transaction should revert\\n        // In this extremely rare case, governance should take action and also pause HAs\\n        _whenNotPaused(SLP, address(poolManager));\\n        _updateSanRate(0, col);\\n        col.sanToken.mint(user, (amount * BASE_TOKENS) / col.sanRate);\\n    }\\n\\n    /// @notice Sets the proportion of `stocksUsers` available for perpetuals\\n    /// @param _targetHAHedge New value of the hedge ratio that the protocol wants to arrive to\\n    /// @dev Can only be called by the `PerpetualManager`\\n    function setTargetHAHedge(uint64 _targetHAHedge) external override {\\n        // Data about the `PerpetualManager` calling the function is fetched using the `contractMap`\\n        IPoolManager poolManager = _contractMap[msg.sender];\\n        Collateral storage col = collateralMap[poolManager];\\n        _contractMapCheck(col);\\n        col.feeData.targetHAHedge = _targetHAHedge;\\n        // No need to issue an event here, one has already been issued by the corresponding `PerpetualManager`\\n    }\\n\\n    // ============================ VIEW FUNCTIONS =================================\\n\\n    /// @notice Transmits to the `PerpetualManager` the max amount of collateral (in stablecoin value) HAs can hedge\\n    /// @return _stocksUsers All stablecoins currently assigned to the pool of the caller\\n    /// @dev This function will not return something relevant if it is not called by a `PerpetualManager`\\n    function getStocksUsers() external view override returns (uint256 _stocksUsers) {\\n        _stocksUsers = collateralMap[_contractMap[msg.sender]].stocksUsers;\\n    }\\n\\n    /// @notice Returns the collateral ratio for this stablecoin\\n    /// @dev The ratio returned is scaled by `BASE_PARAMS` since the value is used to\\n    /// in the `FeeManager` contrat to be compared with the values in `xArrays` expressed in `BASE_PARAMS`\\n    function getCollateralRatio() external view override returns (uint256) {\\n        uint256 mints = agToken.totalSupply();\\n        if (mints == 0) {\\n            // If nothing has been minted, the collateral ratio is infinity\\n            return type(uint256).max;\\n        }\\n        uint256 val;\\n        for (uint256 i = 0; i < _managerList.length; i++) {\\n            // Oracle needs to be called for each collateral to compute the collateral ratio\\n            val += collateralMap[_managerList[i]].oracle.readQuote(_managerList[i].getTotalAsset());\\n        }\\n        return (val * BASE_PARAMS) / mints;\\n    }\\n\\n    // ============================== KEEPERS ======================================\\n\\n    /// @notice Updates all the fees not depending on personal agents inputs via a keeper calling the corresponding\\n    /// function in the `FeeManager` contract\\n    /// @param _bonusMalusMint New corrector of user mint fees for this collateral. These fees will correct\\n    /// the mint fees from users that just depend on the hedge curve by HAs by introducing other dependencies.\\n    /// In normal times they will be equal to `BASE_PARAMS` meaning fees will just depend on the hedge ratio\\n    /// @param _bonusMalusBurn New corrector of user burn fees, depending on collateral ratio\\n    /// @param _slippage New global slippage (the SLP fees from withdrawing) factor\\n    /// @param _slippageFee New global slippage fee (the non distributed accumulated fees) factor\\n    function setFeeKeeper(\\n        uint64 _bonusMalusMint,\\n        uint64 _bonusMalusBurn,\\n        uint64 _slippage,\\n        uint64 _slippageFee\\n    ) external override {\\n        // Fetching data about the `FeeManager` contract calling this function\\n        // It is stored in the `_contractMap`\\n        Collateral storage col = collateralMap[_contractMap[msg.sender]];\\n        _contractMapCheck(col);\\n\\n        col.feeData.bonusMalusMint = _bonusMalusMint;\\n        col.feeData.bonusMalusBurn = _bonusMalusBurn;\\n        col.slpData.slippage = _slippage;\\n        col.slpData.slippageFee = _slippageFee;\\n        // An event is already emitted in the `FeeManager` contract\\n    }\\n\\n    // ============================== AgToken ======================================\\n\\n    /// @notice Allows the `agToken` contract to update the `stocksUsers` for a given collateral after a burn\\n    /// with no redeem\\n    /// @param amount Amount by which `stocksUsers` should decrease\\n    /// @param poolManager Reference to `PoolManager` for which `stocksUsers` needs to be updated\\n    /// @dev This function can be called by the `agToken` contract after a burn of agTokens for which no collateral has been\\n    /// redeemed\\n    function updateStocksUsers(uint256 amount, address poolManager) external override {\\n        require(msg.sender == address(agToken), \\\"3\\\");\\n        Collateral storage col = collateralMap[IPoolManager(poolManager)];\\n        _contractMapCheck(col);\\n        require(col.stocksUsers >= amount, \\\"4\\\");\\n        col.stocksUsers -= amount;\\n        emit StocksUsersUpdated(address(col.token), col.stocksUsers);\\n    }\\n\\n    // ================================= GOVERNANCE ================================\\n\\n    // =============================== Core Functions ==============================\\n\\n    /// @notice Changes the `Core` contract\\n    /// @param newCore New core address\\n    /// @dev This function can only be called by the `Core` contract\\n    function setCore(address newCore) external override onlyRole(CORE_ROLE) {\\n        // Access control for this contract\\n        _revokeRole(CORE_ROLE, address(_core));\\n        _grantRole(CORE_ROLE, newCore);\\n        _core = ICore(newCore);\\n    }\\n\\n    /// @notice Adds a new governor address\\n    /// @param governor New governor address\\n    /// @dev This function propagates changes from `Core` to other contracts\\n    /// @dev Propagating changes like that allows to maintain the protocol's integrity\\n    function addGovernor(address governor) external override onlyRole(CORE_ROLE) {\\n        // Access control for this contract\\n        _grantRole(GOVERNOR_ROLE, governor);\\n        _grantRole(GUARDIAN_ROLE, governor);\\n\\n        for (uint256 i = 0; i < _managerList.length; i++) {\\n            // The `PoolManager` will echo the changes across all the corresponding contracts\\n            _managerList[i].addGovernor(governor);\\n        }\\n    }\\n\\n    /// @notice Removes a governor address which loses its role\\n    /// @param governor Governor address to remove\\n    /// @dev This function propagates changes from `Core` to other contracts\\n    /// @dev Propagating changes like that allows to maintain the protocol's integrity\\n    /// @dev It has already been checked in the `Core` that this address could be removed\\n    /// and that it would not put the protocol in a situation with no governor at all\\n    function removeGovernor(address governor) external override onlyRole(CORE_ROLE) {\\n        // Access control for this contract\\n        _revokeRole(GOVERNOR_ROLE, governor);\\n        _revokeRole(GUARDIAN_ROLE, governor);\\n\\n        for (uint256 i = 0; i < _managerList.length; i++) {\\n            // The `PoolManager` will echo the changes across all the corresponding contracts\\n            _managerList[i].removeGovernor(governor);\\n        }\\n    }\\n\\n    /// @notice Changes the guardian address\\n    /// @param newGuardian New guardian address\\n    /// @param oldGuardian Old guardian address\\n    /// @dev This function propagates changes from `Core` to other contracts\\n    /// @dev The zero check for the guardian address has already been performed by the `Core`\\n    /// contract\\n    function setGuardian(address newGuardian, address oldGuardian) external override onlyRole(CORE_ROLE) {\\n        _revokeRole(GUARDIAN_ROLE, oldGuardian);\\n        _grantRole(GUARDIAN_ROLE, newGuardian);\\n\\n        for (uint256 i = 0; i < _managerList.length; i++) {\\n            _managerList[i].setGuardian(newGuardian, oldGuardian);\\n        }\\n    }\\n\\n    /// @notice Revokes the guardian address\\n    /// @param oldGuardian Guardian address to revoke\\n    /// @dev This function propagates changes from `Core` to other contracts\\n    function revokeGuardian(address oldGuardian) external override onlyRole(CORE_ROLE) {\\n        _revokeRole(GUARDIAN_ROLE, oldGuardian);\\n        for (uint256 i = 0; i < _managerList.length; i++) {\\n            _managerList[i].revokeGuardian(oldGuardian);\\n        }\\n    }\\n\\n    // ============================= Governor Functions ============================\\n\\n    /// @notice Deploys a new collateral by creating the correct references in the corresponding contracts\\n    /// @param poolManager Contract managing and storing this collateral for this stablecoin\\n    /// @param perpetualManager Contract managing HA perpetuals for this stablecoin\\n    /// @param oracle Reference to the oracle that will give the price of the collateral with respect to the stablecoin\\n    /// @param sanToken Reference to the sanTokens associated to the collateral\\n    /// @dev All the references in parameters should correspond to contracts that have already been deployed and\\n    /// initialized with appropriate references\\n    /// @dev After calling this function, governance should initialize all parameters corresponding to this new collateral\\n    function deployCollateral(\\n        IPoolManager poolManager,\\n        IPerpetualManager perpetualManager,\\n        IFeeManager feeManager,\\n        IOracle oracle,\\n        ISanToken sanToken\\n    ) external onlyRole(GOVERNOR_ROLE) {\\n        // If the `sanToken`, `poolManager`, `perpetualManager` and `feeManager` were zero\\n        // addresses, the following require would fail\\n        // The only elements that are checked here are those that are defined in the constructors/initializers\\n        // of the concerned contracts\\n        require(\\n            sanToken.stableMaster() == address(this) &&\\n                sanToken.poolManager() == address(poolManager) &&\\n                poolManager.stableMaster() == address(this) &&\\n                perpetualManager.poolManager() == address(poolManager) &&\\n                // If the `feeManager` is not initialized with the correct `poolManager` then this function\\n                // will revert when `poolManager.deployCollateral` will be executed\\n                feeManager.stableMaster() == address(this),\\n            \\\"9\\\"\\n        );\\n        // Checking if the base of the tokens and of the oracle are not similar with one another\\n        address token = poolManager.token();\\n        uint256 collatBase = 10**(IERC20Metadata(token).decimals());\\n        // If the address of the oracle was the zero address, the following would revert\\n        require(oracle.inBase() == collatBase, \\\"11\\\");\\n        // Checking if the collateral has not already been deployed\\n        Collateral storage col = collateralMap[poolManager];\\n        require(address(col.token) == address(0), \\\"13\\\");\\n\\n        // Creating the correct references\\n        col.token = IERC20(token);\\n        col.sanToken = sanToken;\\n        col.perpetualManager = perpetualManager;\\n        col.oracle = oracle;\\n        // Initializing with the correct values\\n        col.sanRate = BASE_TOKENS;\\n        col.collatBase = collatBase;\\n\\n        // Adding the correct references in the `contractMap` we use in order not to have to pass addresses when\\n        // calling the `StableMaster` from the `PerpetualManager` contract, or the `FeeManager` contract\\n        // This is equivalent to granting Access Control roles for these contracts\\n        _contractMap[address(perpetualManager)] = poolManager;\\n        _contractMap[address(feeManager)] = poolManager;\\n        _managerList.push(poolManager);\\n\\n        // Pausing agents at deployment to leave governance time to set parameters\\n        // The `PerpetualManager` contract is automatically paused after being initialized, so HAs will not be able to\\n        // interact with the protocol\\n        _pause(keccak256(abi.encodePacked(SLP, address(poolManager))));\\n        _pause(keccak256(abi.encodePacked(STABLE, address(poolManager))));\\n\\n        // Fetching the governor list and the guardian to initialize the `poolManager` correctly\\n        address[] memory governorList = _core.governorList();\\n        address guardian = _core.guardian();\\n\\n        // Propagating the deployment and passing references to the corresponding contracts\\n        poolManager.deployCollateral(governorList, guardian, perpetualManager, feeManager, oracle);\\n        emit CollateralDeployed(address(poolManager), address(perpetualManager), address(sanToken), address(oracle));\\n    }\\n\\n    /// @notice Removes a collateral from the list of accepted collateral types and pauses all actions associated\\n    /// to this collateral\\n    /// @param poolManager Reference to the contract managing this collateral for this stablecoin in the protocol\\n    /// @param settlementContract Settlement contract that will be used to close everyone's positions and to let\\n    /// users, SLPs and HAs redeem if not all a portion of their claim\\n    /// @dev Since this function has the ability to transfer the contract's funds to another contract, it should\\n    /// only be accessible to the governor\\n    /// @dev Before calling this function, governance should make sure that all the collateral lent to strategies\\n    /// has been withdrawn\\n    function revokeCollateral(IPoolManager poolManager, ICollateralSettler settlementContract)\\n        external\\n        onlyRole(GOVERNOR_ROLE)\\n    {\\n        // Checking if the `poolManager` given here is well in the list of managers and taking advantage of that to remove\\n        // the `poolManager` from the list\\n        uint256 indexMet;\\n        uint256 managerListLength = _managerList.length;\\n        require(managerListLength >= 1, \\\"10\\\");\\n        for (uint256 i = 0; i < managerListLength - 1; i++) {\\n            if (_managerList[i] == poolManager) {\\n                indexMet = 1;\\n                _managerList[i] = _managerList[managerListLength - 1];\\n                break;\\n            }\\n        }\\n        require(indexMet == 1 || _managerList[managerListLength - 1] == poolManager, \\\"10\\\");\\n        _managerList.pop();\\n        Collateral memory col = collateralMap[poolManager];\\n\\n        // Deleting the references of the associated contracts: `perpetualManager` and `keeper` in the\\n        // `_contractMap` and `poolManager` from the `collateralMap`\\n        delete _contractMap[poolManager.feeManager()];\\n        delete _contractMap[address(col.perpetualManager)];\\n        delete collateralMap[poolManager];\\n        emit CollateralRevoked(address(poolManager));\\n\\n        // Pausing entry (and exits for HAs)\\n        col.perpetualManager.pause();\\n        // No need to pause `SLP` and `STABLE_HOLDERS` as deleting the entry associated to the `poolManager`\\n        // in the `collateralMap` will make everything revert\\n\\n        // Transferring the whole balance to global settlement\\n        uint256 balance = col.token.balanceOf(address(poolManager));\\n        col.token.safeTransferFrom(address(poolManager), address(settlementContract), balance);\\n\\n        // Settlement works with a fixed oracle value for HAs, it needs to be computed here\\n        uint256 oracleValue = col.oracle.readLower();\\n        // Notifying the global settlement contract with the properties of the contract to settle\\n        // In case of global shutdown, there would be one settlement contract per collateral type\\n        // Not using the `lockedInterests` to update the value of the sanRate\\n        settlementContract.triggerSettlement(oracleValue, col.sanRate, col.stocksUsers);\\n    }\\n\\n    // ============================= Guardian Functions ============================\\n\\n    /// @notice Pauses an agent's actions within this contract for a given collateral type for this stablecoin\\n    /// @param agent Bytes representing the agent (`SLP` or `STABLE`) and the collateral type that is going to\\n    /// be paused. To get the `bytes32` from a string, we use in Solidity a `keccak256` function\\n    /// @param poolManager Reference to the contract managing this collateral for this stablecoin in the protocol and\\n    /// for which `agent` needs to be paused\\n    /// @dev If agent is `STABLE`, it is going to be impossible for users to mint stablecoins using collateral or to burn\\n    /// their stablecoins\\n    /// @dev If agent is `SLP`, it is going to be impossible for SLPs to deposit collateral and receive\\n    /// sanTokens in exchange, or to withdraw collateral from their sanTokens\\n    function pause(bytes32 agent, IPoolManager poolManager) external override onlyRole(GUARDIAN_ROLE) {\\n        Collateral storage col = collateralMap[poolManager];\\n        // Checking for the `poolManager`\\n        _contractMapCheck(col);\\n        _pause(keccak256(abi.encodePacked(agent, address(poolManager))));\\n    }\\n\\n    /// @notice Unpauses an agent's action for a given collateral type for this stablecoin\\n    /// @param agent Agent (`SLP` or `STABLE`) to unpause the action of\\n    /// @param poolManager Reference to the associated `PoolManager`\\n    /// @dev Before calling this function, the agent should have been paused for this collateral\\n    function unpause(bytes32 agent, IPoolManager poolManager) external override onlyRole(GUARDIAN_ROLE) {\\n        Collateral storage col = collateralMap[poolManager];\\n        // Checking for the `poolManager`\\n        _contractMapCheck(col);\\n        _unpause(keccak256(abi.encodePacked(agent, address(poolManager))));\\n    }\\n\\n    /// @notice Updates the `stocksUsers` for a given pair of collateral\\n    /// @param amount Amount of `stocksUsers` to transfer from a pool to another\\n    /// @param poolManagerUp Reference to `PoolManager` for which `stocksUsers` needs to increase\\n    /// @param poolManagerDown Reference to `PoolManager` for which `stocksUsers` needs to decrease\\n    /// @dev This function can be called in case where the reserves of the protocol for each collateral do not exactly\\n    /// match what is stored in the `stocksUsers` because of increases or decreases in collateral prices at times\\n    /// in which the protocol was not fully hedged by HAs\\n    /// @dev With this function, governance can allow/prevent more HAs coming in a pool while preventing/allowing HAs\\n    /// from other pools because the accounting variable of `stocksUsers` does not really match\\n    function rebalanceStocksUsers(\\n        uint256 amount,\\n        IPoolManager poolManagerUp,\\n        IPoolManager poolManagerDown\\n    ) external onlyRole(GUARDIAN_ROLE) {\\n        Collateral storage colUp = collateralMap[poolManagerUp];\\n        Collateral storage colDown = collateralMap[poolManagerDown];\\n        // Checking for the `poolManager`\\n        _contractMapCheck(colUp);\\n        _contractMapCheck(colDown);\\n        // The invariant `col.stocksUsers <= col.capOnStableMinted` should remain true even after a\\n        // governance update\\n        require(colUp.stocksUsers + amount <= colUp.feeData.capOnStableMinted, \\\"8\\\");\\n        colDown.stocksUsers -= amount;\\n        colUp.stocksUsers += amount;\\n        emit StocksUsersUpdated(address(colUp.token), colUp.stocksUsers);\\n        emit StocksUsersUpdated(address(colDown.token), colDown.stocksUsers);\\n    }\\n\\n    /// @notice Propagates the change of oracle for one collateral to all the contracts which need to have\\n    /// the correct oracle reference\\n    /// @param _oracle New oracle contract for the pair collateral/stablecoin\\n    /// @param poolManager Reference to the `PoolManager` contract associated to the collateral\\n    function setOracle(IOracle _oracle, IPoolManager poolManager)\\n        external\\n        onlyRole(GOVERNOR_ROLE)\\n        zeroCheck(address(_oracle))\\n    {\\n        Collateral storage col = collateralMap[poolManager];\\n        // Checking for the `poolManager`\\n        _contractMapCheck(col);\\n        require(col.oracle != _oracle, \\\"12\\\");\\n        // The `inBase` of the new oracle should be the same as the `_collatBase` stored for this collateral\\n        require(col.collatBase == _oracle.inBase(), \\\"11\\\");\\n        col.oracle = _oracle;\\n        emit OracleUpdated(address(poolManager), address(_oracle));\\n        col.perpetualManager.setOracle(_oracle);\\n    }\\n\\n    /// @notice Changes the parameters to cap the number of stablecoins you can issue using one\\n    /// collateral type and the maximum interests you can distribute to SLPs in a sanRate update\\n    /// in a block\\n    /// @param _capOnStableMinted New value of the cap\\n    /// @param _maxInterestsDistributed Maximum amount of interests distributed to SLPs in a block\\n    /// @param poolManager Reference to the `PoolManager` contract associated to the collateral\\n    function setCapOnStableAndMaxInterests(\\n        uint256 _capOnStableMinted,\\n        uint256 _maxInterestsDistributed,\\n        IPoolManager poolManager\\n    ) external override onlyRole(GUARDIAN_ROLE) {\\n        Collateral storage col = collateralMap[poolManager];\\n        // Checking for the `poolManager`\\n        _contractMapCheck(col);\\n        // The invariant `col.stocksUsers <= col.capOnStableMinted` should remain true even after a\\n        // governance update\\n        require(_capOnStableMinted >= col.stocksUsers, \\\"8\\\");\\n        col.feeData.capOnStableMinted = _capOnStableMinted;\\n        col.slpData.maxInterestsDistributed = _maxInterestsDistributed;\\n        emit CapOnStableAndMaxInterestsUpdated(address(poolManager), _capOnStableMinted, _maxInterestsDistributed);\\n    }\\n\\n    /// @notice Sets a new `FeeManager` contract and removes the old one which becomes useless\\n    /// @param newFeeManager New `FeeManager` contract\\n    /// @param oldFeeManager Old `FeeManager` contract\\n    /// @param poolManager Reference to the contract managing this collateral for this stablecoin in the protocol\\n    /// and associated to the `FeeManager` to update\\n    function setFeeManager(\\n        address newFeeManager,\\n        address oldFeeManager,\\n        IPoolManager poolManager\\n    ) external onlyRole(GUARDIAN_ROLE) zeroCheck(newFeeManager) {\\n        Collateral storage col = collateralMap[poolManager];\\n        // Checking for the `poolManager`\\n        _contractMapCheck(col);\\n        require(_contractMap[oldFeeManager] == poolManager, \\\"10\\\");\\n        require(newFeeManager != oldFeeManager, \\\"14\\\");\\n        delete _contractMap[oldFeeManager];\\n        _contractMap[newFeeManager] = poolManager;\\n        emit FeeManagerUpdated(address(poolManager), newFeeManager);\\n        poolManager.setFeeManager(IFeeManager(newFeeManager));\\n    }\\n\\n    /// @notice Sets the proportion of fees from burn/mint of users and the proportion\\n    /// of lending interests going to SLPs\\n    /// @param _feesForSLPs New proportion of mint/burn fees going to SLPs\\n    /// @param _interestsForSLPs New proportion of interests from lending going to SLPs\\n    /// @dev The higher these proportions the bigger the APY for SLPs\\n    /// @dev These proportions should be inferior to `BASE_PARAMS`\\n    function setIncentivesForSLPs(\\n        uint64 _feesForSLPs,\\n        uint64 _interestsForSLPs,\\n        IPoolManager poolManager\\n    ) external override onlyRole(GUARDIAN_ROLE) onlyCompatibleFees(_feesForSLPs) onlyCompatibleFees(_interestsForSLPs) {\\n        Collateral storage col = collateralMap[poolManager];\\n        _contractMapCheck(col);\\n        col.slpData.feesForSLPs = _feesForSLPs;\\n        col.slpData.interestsForSLPs = _interestsForSLPs;\\n        emit SLPsIncentivesUpdated(address(poolManager), _feesForSLPs, _interestsForSLPs);\\n    }\\n\\n    /// @notice Sets the x array (ie ratios between amount hedged by HAs and amount to hedge)\\n    /// and the y array (ie values of fees at thresholds) used to compute mint and burn fees for users\\n    /// @param poolManager Reference to the `PoolManager` handling the collateral\\n    /// @param _xFee Thresholds of hedge ratios\\n    /// @param _yFee Values of the fees at thresholds\\n    /// @param _mint Whether mint fees or burn fees should be updated\\n    /// @dev The evolution of the fees between two thresholds is linear\\n    /// @dev The length of the two arrays should be the same\\n    /// @dev The values of `_xFee` should be in ascending order\\n    /// @dev For mint fees, values in the y-array below should normally be decreasing: the higher the `x` the cheaper\\n    /// it should be for stable seekers to come in as a high `x` corresponds to a high demand for volatility and hence\\n    /// to a situation where all the collateral can be hedged\\n    /// @dev For burn fees, values in the array below should normally be decreasing: the lower the `x` the cheaper it should\\n    /// be for stable seekers to go out, as a low `x` corresponds to low demand for volatility and hence\\n    /// to a situation where the protocol has a hard time covering its collateral\\n    function setUserFees(\\n        IPoolManager poolManager,\\n        uint64[] memory _xFee,\\n        uint64[] memory _yFee,\\n        uint8 _mint\\n    ) external override onlyRole(GUARDIAN_ROLE) onlyCompatibleInputArrays(_xFee, _yFee) {\\n        Collateral storage col = collateralMap[poolManager];\\n        _contractMapCheck(col);\\n        if (_mint > 0) {\\n            col.feeData.xFeeMint = _xFee;\\n            col.feeData.yFeeMint = _yFee;\\n        } else {\\n            col.feeData.xFeeBurn = _xFee;\\n            col.feeData.yFeeBurn = _yFee;\\n        }\\n        emit FeeArrayUpdated(address(poolManager), _xFee, _yFee, _mint);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/stableMaster/StableMasterEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../external/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IAgToken.sol\\\";\\nimport \\\"../interfaces/ICollateralSettler.sol\\\";\\nimport \\\"../interfaces/ICore.sol\\\";\\nimport \\\"../interfaces/IFeeManager.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/IPerpetualManager.sol\\\";\\nimport \\\"../interfaces/IPoolManager.sol\\\";\\nimport \\\"../interfaces/ISanToken.sol\\\";\\nimport \\\"../interfaces/IStableMaster.sol\\\";\\n\\nimport \\\"../utils/FunctionUtils.sol\\\";\\nimport \\\"../utils/PausableMapUpgradeable.sol\\\";\\n\\n/// @title StableMasterEvents\\n/// @author Angle Core Team\\n/// @notice `StableMaster` is the contract handling all the collateral types accepted for a given stablecoin\\n/// It does all the accounting and is the point of entry in the protocol for stable holders and seekers as well as SLPs\\n/// @dev This file contains all the events of the `StableMaster` contract\\ncontract StableMasterEvents {\\n    event SanRateUpdated(address indexed _token, uint256 _newSanRate);\\n\\n    event StocksUsersUpdated(address indexed _poolManager, uint256 _stocksUsers);\\n\\n    event MintedStablecoins(address indexed _poolManager, uint256 amount, uint256 amountForUserInStable);\\n\\n    event BurntStablecoins(address indexed _poolManager, uint256 amount, uint256 redeemInC);\\n\\n    // ============================= Governors =====================================\\n\\n    event CollateralDeployed(\\n        address indexed _poolManager,\\n        address indexed _perpetualManager,\\n        address indexed _sanToken,\\n        address _oracle\\n    );\\n\\n    event CollateralRevoked(address indexed _poolManager);\\n\\n    // ========================= Parameters update =================================\\n\\n    event OracleUpdated(address indexed _poolManager, address indexed _oracle);\\n\\n    event FeeManagerUpdated(address indexed _poolManager, address indexed newFeeManager);\\n\\n    event CapOnStableAndMaxInterestsUpdated(\\n        address indexed _poolManager,\\n        uint256 _capOnStableMinted,\\n        uint256 _maxInterestsDistributed\\n    );\\n\\n    event SLPsIncentivesUpdated(address indexed _poolManager, uint64 _feesForSLPs, uint64 _interestsForSLPs);\\n\\n    event FeeArrayUpdated(address indexed _poolManager, uint64[] _xFee, uint64[] _yFee, uint8 _type);\\n}\\n\"\r\n    },\r\n    \"contracts/stableMaster/StableMasterFront.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./StableMaster.sol\\\";\\n\\n/// @title StableMasterFront\\n/// @author Angle Core Team\\n/// @notice `StableMaster` is the contract handling all the collateral types accepted for a given stablecoin\\n/// It does all the accounting and is the point of entry in the protocol for stable holders and seekers as well as SLPs\\n/// @dev This file contains the front end, that is all external functions associated to the given stablecoin\\ncontract StableMasterFront is StableMaster {\\n    using SafeERC20 for IERC20;\\n\\n    // ============================ CONSTRUCTORS AND DEPLOYERS =====================\\n\\n    /// @notice Initializes the `StableMaster` contract\\n    /// @param core_ Address of the `Core` contract handling all the different `StableMaster` contracts\\n    function initialize(address core_) external zeroCheck(core_) initializer {\\n        __AccessControl_init();\\n        // Access control\\n        _core = ICore(core_);\\n        _setupRole(CORE_ROLE, core_);\\n        // `Core` is admin of all roles\\n        _setRoleAdmin(CORE_ROLE, CORE_ROLE);\\n        _setRoleAdmin(GOVERNOR_ROLE, CORE_ROLE);\\n        _setRoleAdmin(GUARDIAN_ROLE, CORE_ROLE);\\n        // All the roles that are specific to a given collateral can be changed by the governor\\n        // in the `deployCollateral`, `revokeCollateral` and `setFeeManager` functions by updating the `contractMap`\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    // ============================= USERS =========================================\\n\\n    /// @notice Lets a user send collateral to the system to mint stablecoins\\n    /// @param amount Amount of collateral sent\\n    /// @param user Address of the contract or the person to give the minted tokens to\\n    /// @param poolManager Address of the `PoolManager` of the required collateral\\n    /// @param minStableAmount Minimum amount of stablecoins the user wants to get with this transaction\\n    /// @dev This function works as a swap from a user perspective from collateral to stablecoins\\n    /// @dev It is impossible to mint tokens and to have them sent to the zero address: there\\n    /// would be an issue with the `_mint` function called by the `AgToken` contract\\n    /// @dev The parameter `minStableAmount` serves as a slippage protection for users\\n    /// @dev From a user perspective, this function is equivalent to a swap between collateral and\\n    /// stablecoins\\n    function mint(\\n        uint256 amount,\\n        address user,\\n        IPoolManager poolManager,\\n        uint256 minStableAmount\\n    ) external {\\n        Collateral storage col = collateralMap[poolManager];\\n        _contractMapCheck(col);\\n        // Checking if the contract is paused for this agent\\n        _whenNotPaused(STABLE, address(poolManager));\\n\\n        // No overflow check are needed for the amount since it's never casted to `int` and Solidity 0.8.0\\n        // automatically handles overflows\\n        col.token.safeTransferFrom(msg.sender, address(poolManager), amount);\\n\\n        // Getting a quote for the amount of stablecoins to issue\\n        // We read the lowest oracle value we get for this collateral/stablecoin pair: it's the one\\n        // that is most at the advantage of the protocol\\n        // Decimals are handled directly in the oracle contract\\n        uint256 amountForUserInStable = col.oracle.readQuoteLower(amount);\\n\\n        // Getting the fees paid for this transaction, expressed in `BASE_PARAMS`\\n        // Floor values are taken for fees computation, as what is earned by users is lost by SLP\\n        // when calling `_updateSanRate` and vice versa\\n        uint256 fees = _computeFeeMint(amountForUserInStable, col);\\n\\n        // Computing the net amount that will be taken into account for this user by deducing fees\\n        amountForUserInStable = (amountForUserInStable * (BASE_PARAMS - fees)) / BASE_PARAMS;\\n        // Checking if the user got more stablecoins than the least amount specified in the parameters of the\\n        // function\\n        require(amountForUserInStable >= minStableAmount, \\\"15\\\");\\n\\n        // Updating the `stocksUsers` for this collateral, that is the amount of collateral that was\\n        // brought by users\\n        col.stocksUsers += amountForUserInStable;\\n        // Checking if stablecoins can still be issued using this collateral type\\n        require(col.stocksUsers <= col.feeData.capOnStableMinted, \\\"16\\\");\\n\\n        // Event needed to track `col.stocksUsers` off-chain\\n        emit MintedStablecoins(address(poolManager), amount, amountForUserInStable);\\n\\n        // Distributing the fees taken to SLPs\\n        // The `fees` variable computed above is a proportion expressed in `BASE_PARAMS`.\\n        // To compute the amount of fees in collateral value, we can directly use the `amount` of collateral\\n        // entered by the user\\n        // Not all the fees are distributed to SLPs, a portion determined by `col.slpData.feesForSLPs` goes to surplus\\n        _updateSanRate((amount * fees * col.slpData.feesForSLPs) / (BASE_PARAMS**2), col);\\n\\n        // Minting\\n        agToken.mint(user, amountForUserInStable);\\n    }\\n\\n    /// @notice Lets a user burn agTokens (stablecoins) and receive the collateral specified by the `poolManager`\\n    /// in exchange\\n    /// @param amount Amount of stable asset burnt\\n    /// @param burner Address from which the agTokens will be burnt\\n    /// @param dest Address where collateral is going to be\\n    /// @param poolManager Collateral type requested by the user burning\\n    /// @param minCollatAmount Minimum amount of collateral that the user is willing to get for this transaction\\n    /// @dev The `msg.sender` should have approval to burn from the `burner` or the `msg.sender` should be the `burner`\\n    /// @dev If there are not enough reserves this transaction will revert and the user will have to come back to the\\n    /// protocol with a correct amount. Checking for the reserves currently available in the `PoolManager`\\n    /// is something that should be handled by the front interacting with this contract\\n    /// @dev In case there are not enough reserves, strategies should be harvested or their debt ratios should be adjusted\\n    /// by governance to make sure that users, HAs or SLPs withdrawing always have free collateral they can use\\n    /// @dev From a user perspective, this function is equivalent to a swap from stablecoins to collateral\\n    function burn(\\n        uint256 amount,\\n        address burner,\\n        address dest,\\n        IPoolManager poolManager,\\n        uint256 minCollatAmount\\n    ) external {\\n        // Searching collateral data\\n        Collateral storage col = collateralMap[poolManager];\\n        // Checking the collateral requested\\n        _contractMapCheck(col);\\n        _whenNotPaused(STABLE, address(poolManager));\\n\\n        // Checking if the amount is not going to make the `stocksUsers` negative\\n        // A situation like that is likely to happen if users mint using one collateral type and in volume redeem\\n        // another collateral type\\n        // In this situation, governance should rapidly react to pause the pool and then rebalance the `stocksUsers`\\n        // between different collateral types, or at least rebalance what is stored in the reserves through\\n        // the `recoverERC20` function followed by a swap and then a transfer\\n        require(amount <= col.stocksUsers, \\\"17\\\");\\n\\n        // Burning the tokens will revert if there are not enough tokens in balance or if the `msg.sender`\\n        // does not have approval from the burner\\n        // A reentrancy attack is potentially possible here as state variables are written after the burn,\\n        // but as the `AgToken` is a protocol deployed contract, it can be trusted. Still, `AgToken` is\\n        // upgradeable by governance, the following could become risky in case of a governance attack\\n        if (burner == msg.sender) {\\n            agToken.burnSelf(amount, burner);\\n        } else {\\n            agToken.burnFrom(amount, burner, msg.sender);\\n        }\\n\\n        // Getting the highest possible oracle value\\n        uint256 oracleValue = col.oracle.readUpper();\\n\\n        // Converting amount of agTokens in collateral and computing how much should be reimbursed to the user\\n        // Amount is in `BASE_TOKENS` and the outputted collateral amount should be in collateral base\\n        uint256 amountInC = (amount * col.collatBase) / oracleValue;\\n\\n        // Computing how much of collateral can be redeemed by the user after taking fees\\n        // The value of the fees here is `_computeFeeBurn(amount,col)` (it is a proportion expressed in `BASE_PARAMS`)\\n        // The real value of what can be redeemed by the user is `amountInC * (BASE_PARAMS - fees) / BASE_PARAMS`,\\n        // but we prefer to avoid doing multiplications after divisions\\n        uint256 redeemInC = (amount * (BASE_PARAMS - _computeFeeBurn(amount, col)) * col.collatBase) /\\n            (oracleValue * BASE_PARAMS);\\n        require(redeemInC >= minCollatAmount, \\\"15\\\");\\n\\n        // Updating the `stocksUsers` that is the amount of collateral that was brought by users\\n        col.stocksUsers -= amount;\\n\\n        // Event needed to track `col.stocksUsers` off-chain\\n        emit BurntStablecoins(address(poolManager), amount, redeemInC);\\n\\n        // Computing the exact amount of fees from this transaction and accumulating it for SLPs\\n        _updateSanRate(((amountInC - redeemInC) * col.slpData.feesForSLPs) / BASE_PARAMS, col);\\n\\n        col.token.safeTransferFrom(address(poolManager), dest, redeemInC);\\n    }\\n\\n    // ============================== SLPs =========================================\\n\\n    /// @notice Lets a SLP enter the protocol by sending collateral to the system in exchange of sanTokens\\n    /// @param user Address of the SLP to send sanTokens to\\n    /// @param amount Amount of collateral sent\\n    /// @param poolManager Address of the `PoolManager` of the required collateral\\n    function deposit(\\n        uint256 amount,\\n        address user,\\n        IPoolManager poolManager\\n    ) external {\\n        // Searching collateral data\\n        Collateral storage col = collateralMap[poolManager];\\n        _contractMapCheck(col);\\n        _whenNotPaused(SLP, address(poolManager));\\n        _updateSanRate(0, col);\\n\\n        // No overflow check needed for the amount since it's never casted to int and Solidity versions above 0.8.0\\n        // automatically handle overflows\\n        col.token.safeTransferFrom(msg.sender, address(poolManager), amount);\\n        col.sanToken.mint(user, (amount * BASE_TOKENS) / col.sanRate);\\n    }\\n\\n    /// @notice Lets a SLP burn of sanTokens and receive the corresponding collateral back in exchange at the\\n    /// current exchange rate between sanTokens and collateral\\n    /// @param amount Amount of sanTokens burnt by the SLP\\n    /// @param burner Address that will burn its sanTokens\\n    /// @param dest Address that will receive the collateral\\n    /// @param poolManager Address of the `PoolManager` of the required collateral\\n    /// @dev The `msg.sender` should have approval to burn from the `burner` or the `msg.sender` should be the `burner`\\n    /// @dev This transaction will fail if the `PoolManager` does not have enough reserves, the front will however be here\\n    /// to notify them that they cannot withdraw\\n    /// @dev In case there are not enough reserves, strategies should be harvested or their debt ratios should be adjusted\\n    /// by governance to make sure that users, HAs or SLPs withdrawing always have free collateral they can use\\n    function withdraw(\\n        uint256 amount,\\n        address burner,\\n        address dest,\\n        IPoolManager poolManager\\n    ) external {\\n        Collateral storage col = collateralMap[poolManager];\\n        _contractMapCheck(col);\\n        _whenNotPaused(SLP, address(poolManager));\\n        _updateSanRate(0, col);\\n\\n        if (burner == msg.sender) {\\n            col.sanToken.burnSelf(amount, burner);\\n        } else {\\n            col.sanToken.burnFrom(amount, burner, msg.sender);\\n        }\\n        // Computing the amount of collateral to give back to the SLP depending on slippage and on the `sanRate`\\n        uint256 redeemInC = (amount * (BASE_PARAMS - col.slpData.slippage) * col.sanRate) / (BASE_TOKENS * BASE_PARAMS);\\n\\n        col.token.safeTransferFrom(address(poolManager), dest, redeemInC);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/stableMaster/StableMasterInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./StableMasterStorage.sol\\\";\\n\\n/// @title StableMasterInternal\\n/// @author Angle Core Team\\n/// @notice `StableMaster` is the contract handling all the collateral types accepted for a given stablecoin\\n/// It does all the accounting and is the point of entry in the protocol for stable holders and seekers as well as SLPs\\n/// @dev This file contains all the internal function of the `StableMaster` contract\\ncontract StableMasterInternal is StableMasterStorage, PausableMapUpgradeable {\\n    /// @notice Checks if the `msg.sender` calling the contract has the right to do it\\n    /// @param col Struct for the collateral associated to the caller address\\n    /// @dev Since the `StableMaster` contract uses a `contractMap` that stores addresses of some verified\\n    /// protocol's contracts in it, and since the roles corresponding to these addresses are never admin roles\\n    /// it is cheaper not to use for these contracts OpenZeppelin's access control logic\\n    /// @dev A non null associated token address is what is used to check if a `PoolManager` has well been initialized\\n    /// @dev We could set `PERPETUALMANAGER_ROLE`, `POOLMANAGER_ROLE` and `FEEMANAGER_ROLE` for this\\n    /// contract, but this would actually be inefficient\\n    function _contractMapCheck(Collateral storage col) internal view {\\n        require(address(col.token) != address(0), \\\"3\\\");\\n    }\\n\\n    /// @notice Checks if the protocol has been paused for an agent and for a given collateral type for this\\n    /// stablecoin\\n    /// @param agent Name of the agent to check, it is either going to be `STABLE` or `SLP`\\n    /// @param poolManager `PoolManager` contract for which to check pauses\\n    function _whenNotPaused(bytes32 agent, address poolManager) internal view {\\n        require(!paused[keccak256(abi.encodePacked(agent, poolManager))], \\\"18\\\");\\n    }\\n\\n    /// @notice Updates the `sanRate` that is the exchange rate between sanTokens given to SLPs and collateral or\\n    /// accumulates fees to be distributed to SLPs before doing it at next block\\n    /// @param toShare Amount of interests that needs to be redistributed to the SLPs through the `sanRate`\\n    /// @param col Struct for the collateral of interest here which values are going to be updated\\n    /// @dev This function can only increase the `sanRate` and is not used to take into account a loss made through\\n    /// lending or another yield farming strategy: this is done in the `signalLoss` function\\n    /// @dev The `sanRate` is only be updated from the fees accumulated from previous blocks and the fees to share to SLPs\\n    /// are just accumulated to be distributed at next block\\n    /// @dev A flashloan attack could consist in seeing fees to be distributed, deposit, increase the `sanRate` and then\\n    /// withdraw: what is done with the `lockedInterests` parameter is a way to mitigate that\\n    /// @dev Another solution against flash loans would be to have a non null `slippage` at all times: this is far from ideal\\n    /// for SLPs in the first place\\n    function _updateSanRate(uint256 toShare, Collateral storage col) internal {\\n        uint256 _lockedInterests = col.slpData.lockedInterests;\\n        // Checking if the `sanRate` has been updated in the current block using past block fees\\n        // This is a way to prevent flash loans attacks when an important amount of fees are going to be distributed\\n        // in a block: fees are stored but will just be distributed to SLPs who will be here during next blocks\\n        if (block.timestamp != col.slpData.lastBlockUpdated && _lockedInterests > 0) {\\n            uint256 sanMint = col.sanToken.totalSupply();\\n            if (sanMint != 0) {\\n                // Checking if the update is too important and should be made in multiple blocks\\n                if (_lockedInterests > col.slpData.maxInterestsDistributed) {\\n                    // `sanRate` is expressed in `BASE_TOKENS`\\n                    col.sanRate += (col.slpData.maxInterestsDistributed * BASE_TOKENS) / sanMint;\\n                    _lockedInterests -= col.slpData.maxInterestsDistributed;\\n                } else {\\n                    col.sanRate += (_lockedInterests * BASE_TOKENS) / sanMint;\\n                    _lockedInterests = 0;\\n                }\\n                emit SanRateUpdated(address(col.token), col.sanRate);\\n            } else {\\n                _lockedInterests = 0;\\n            }\\n        }\\n        // Adding the fees to be distributed at next block\\n        if (toShare != 0) {\\n            if ((col.slpData.slippageFee == 0) && (col.slpData.feesAside != 0)) {\\n                // If the collateral ratio is big enough, all the fees or gains will be used to update the `sanRate`\\n                // If there were fees or lending gains that had been put aside, they will be added in this case to the\\n                // update of the `sanRate`\\n                toShare += col.slpData.feesAside;\\n                col.slpData.feesAside = 0;\\n            } else if (col.slpData.slippageFee != 0) {\\n                // Computing the fraction of fees and gains that should be left aside if the collateral ratio is too small\\n                uint256 aside = (toShare * col.slpData.slippageFee) / BASE_PARAMS;\\n                toShare -= aside;\\n                // The amount of fees left aside should be rounded above\\n                col.slpData.feesAside += aside;\\n            }\\n            // Updating the amount of fees to be distributed next block\\n            _lockedInterests += toShare;\\n        }\\n        col.slpData.lockedInterests = _lockedInterests;\\n        col.slpData.lastBlockUpdated = block.timestamp;\\n    }\\n\\n    /// @notice Computes the current fees to be taken when minting using `amount` of collateral\\n    /// @param amount Amount of collateral in the transaction to get stablecoins\\n    /// @param col Struct for the collateral of interest\\n    /// @return feeMint Mint Fees taken to users expressed in collateral\\n    /// @dev Fees depend on the hedge ratio that is the ratio between what is hedged by HAs and what should be hedged\\n    /// @dev The more is hedged by HAs, the smaller fees are expected to be\\n    /// @dev Fees are also corrected by the `bonusMalusMint` parameter which induces a dependence in collateral ratio\\n    function _computeFeeMint(uint256 amount, Collateral storage col) internal view returns (uint256 feeMint) {\\n        uint64 feeMint64;\\n        if (col.feeData.xFeeMint.length == 1) {\\n            // This is done to avoid an external call in the case where the fees are constant regardless of the collateral\\n            // ratio\\n            feeMint64 = col.feeData.yFeeMint[0];\\n        } else {\\n            uint64 hedgeRatio = _computeHedgeRatio(amount + col.stocksUsers, col);\\n            // Computing the fees based on the spread\\n            feeMint64 = _piecewiseLinear(hedgeRatio, col.feeData.xFeeMint, col.feeData.yFeeMint);\\n        }\\n        // Fees could in some occasions depend on other factors like collateral ratio\\n        // Keepers are the ones updating this part of the fees\\n        feeMint = (feeMint64 * col.feeData.bonusMalusMint) / BASE_PARAMS;\\n    }\\n\\n    /// @notice Computes the current fees to be taken when burning stablecoins\\n    /// @param amount Amount of collateral corresponding to the stablecoins burnt in the transaction\\n    /// @param col Struct for the collateral of interest\\n    /// @return feeBurn Burn fees taken to users expressed in collateral\\n    /// @dev The amount is obtained after the amount of agTokens sent is converted in collateral\\n    /// @dev Fees depend on the hedge ratio that is the ratio between what is hedged by HAs and what should be hedged\\n    /// @dev The more is hedged by HAs, the higher fees are expected to be\\n    /// @dev Fees are also corrected by the `bonusMalusBurn` parameter which induces a dependence in collateral ratio\\n    function _computeFeeBurn(uint256 amount, Collateral storage col) internal view returns (uint256 feeBurn) {\\n        uint64 feeBurn64;\\n        if (col.feeData.xFeeBurn.length == 1) {\\n            // Avoiding an external call if fees are constant\\n            feeBurn64 = col.feeData.yFeeBurn[0];\\n        } else {\\n            uint64 hedgeRatio = _computeHedgeRatio(col.stocksUsers - amount, col);\\n            // Computing the fees based on the spread\\n            feeBurn64 = _piecewiseLinear(hedgeRatio, col.feeData.xFeeBurn, col.feeData.yFeeBurn);\\n        }\\n        // Fees could in some occasions depend on other factors like collateral ratio\\n        // Keepers are the ones updating this part of the fees\\n        feeBurn = (feeBurn64 * col.feeData.bonusMalusBurn) / BASE_PARAMS;\\n    }\\n\\n    /// @notice Computes the hedge ratio that is the ratio between the amount of collateral hedged by HAs\\n    /// divided by the amount that should be hedged\\n    /// @param newStocksUsers Value of the collateral from users to hedge\\n    /// @param col Struct for the collateral of interest\\n    /// @return ratio Ratio between what's hedged divided what's to hedge\\n    /// @dev This function is typically called to compute mint or burn fees\\n    /// @dev It seeks from the `PerpetualManager` contract associated to the collateral the total amount\\n    /// already hedged by HAs and compares it to the amount to hedge\\n    function _computeHedgeRatio(uint256 newStocksUsers, Collateral storage col) internal view returns (uint64 ratio) {\\n        // Fetching the amount hedged by HAs from the corresponding `perpetualManager` contract\\n        uint256 totalHedgeAmount = col.perpetualManager.totalHedgeAmount();\\n        newStocksUsers = (col.feeData.targetHAHedge * newStocksUsers) / BASE_PARAMS;\\n        if (newStocksUsers > totalHedgeAmount) ratio = uint64((totalHedgeAmount * BASE_PARAMS) / newStocksUsers);\\n        else ratio = uint64(BASE_PARAMS);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/stableMaster/StableMasterStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./StableMasterEvents.sol\\\";\\n\\n/// @title StableMasterStorage\\n/// @author Angle Core Team\\n/// @notice `StableMaster` is the contract handling all the collateral types accepted for a given stablecoin\\n/// It does all the accounting and is the point of entry in the protocol for stable holders and seekers as well as SLPs\\n/// @dev This file contains all the variables and parameters used in the `StableMaster` contract\\ncontract StableMasterStorage is StableMasterEvents, FunctionUtils {\\n    // All the details about a collateral that are going to be stored in `StableMaster`\\n    struct Collateral {\\n        // Interface for the token accepted by the underlying `PoolManager` contract\\n        IERC20 token;\\n        // Reference to the `SanToken` for the pool\\n        ISanToken sanToken;\\n        // Reference to the `PerpetualManager` for the pool\\n        IPerpetualManager perpetualManager;\\n        // Adress of the oracle for the change rate between\\n        // collateral and the corresponding stablecoin\\n        IOracle oracle;\\n        // Amount of collateral in the reserves that comes from users\\n        // converted in stablecoin value. Updated at minting and burning.\\n        // A `stocksUsers` of 10 for a collateral type means that overall the balance of the collateral from users\\n        // that minted/burnt stablecoins using this collateral is worth 10 of stablecoins\\n        uint256 stocksUsers;\\n        // Exchange rate between sanToken and collateral\\n        uint256 sanRate;\\n        // Base used in the collateral implementation (ERC20 decimal)\\n        uint256 collatBase;\\n        // Parameters for SLPs and update of the `sanRate`\\n        SLPData slpData;\\n        // All the fees parameters\\n        MintBurnData feeData;\\n    }\\n\\n    // ============================ Variables and References =====================================\\n\\n    /// @notice Maps a `PoolManager` contract handling a collateral for this stablecoin to the properties of the struct above\\n    mapping(IPoolManager => Collateral) public collateralMap;\\n\\n    /// @notice Reference to the `AgToken` used in this `StableMaster`\\n    /// This reference cannot be changed\\n    IAgToken public agToken;\\n\\n    // Maps a contract to an address corresponding to the `IPoolManager` address\\n    // It is typically used to avoid passing in parameters the address of the `PerpetualManager` when `PerpetualManager`\\n    // is calling `StableMaster` to get information\\n    // It is the Access Control equivalent for the `SanToken`, `PoolManager`, `PerpetualManager` and `FeeManager`\\n    // contracts associated to this `StableMaster`\\n    mapping(address => IPoolManager) internal _contractMap;\\n\\n    // List of all collateral managers\\n    IPoolManager[] internal _managerList;\\n\\n    // Reference to the `Core` contract of the protocol\\n    ICore internal _core;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/FunctionUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title FunctionUtils\\n/// @author Angle Core Team\\n/// @notice Contains all the utility functions that are needed in different places of the protocol\\n/// @dev Functions in this contract should typically be pure functions\\n/// @dev This contract is voluntarily a contract and not a library to save some gas cost every time it is used\\ncontract FunctionUtils {\\n    /// @notice Base that is used to compute ratios and floating numbers\\n    uint256 public constant BASE_TOKENS = 10**18;\\n    /// @notice Base that is used to define parameters that need to have a floating value (for instance parameters\\n    /// that are defined as ratios)\\n    uint256 public constant BASE_PARAMS = 10**9;\\n\\n    /// @notice Computes the value of a linear by part function at a given point\\n    /// @param x Point of the function we want to compute\\n    /// @param xArray List of breaking points (in ascending order) that define the linear by part function\\n    /// @param yArray List of values at breaking points (not necessarily in ascending order)\\n    /// @dev The evolution of the linear by part function between two breaking points is linear\\n    /// @dev Before the first breaking point and after the last one, the function is constant with a value\\n    /// equal to the first or last value of the yArray\\n    /// @dev This function is relevant if `x` is between O and `BASE_PARAMS`. If `x` is greater than that, then\\n    /// everything will be as if `x` is equal to the greater element of the `xArray`\\n    function _piecewiseLinear(\\n        uint64 x,\\n        uint64[] memory xArray,\\n        uint64[] memory yArray\\n    ) internal pure returns (uint64) {\\n        if (x >= xArray[xArray.length - 1]) {\\n            return yArray[xArray.length - 1];\\n        } else if (x <= xArray[0]) {\\n            return yArray[0];\\n        } else {\\n            uint256 lower;\\n            uint256 upper = xArray.length - 1;\\n            uint256 mid;\\n            while (upper - lower > 1) {\\n                mid = lower + (upper - lower) / 2;\\n                if (xArray[mid] <= x) {\\n                    lower = mid;\\n                } else {\\n                    upper = mid;\\n                }\\n            }\\n            if (yArray[upper] > yArray[lower]) {\\n                // There is no risk of overflow here as in the product of the difference of `y`\\n                // with the difference of `x`, the product is inferior to `BASE_PARAMS**2` which does not\\n                // overflow for `uint64`\\n                return\\n                    yArray[lower] +\\n                    ((yArray[upper] - yArray[lower]) * (x - xArray[lower])) /\\n                    (xArray[upper] - xArray[lower]);\\n            } else {\\n                return\\n                    yArray[lower] -\\n                    ((yArray[lower] - yArray[upper]) * (x - xArray[lower])) /\\n                    (xArray[upper] - xArray[lower]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Checks if the input arrays given by governance to update the fee structure is valid\\n    /// @param xArray List of breaking points (in ascending order) that define the linear by part function\\n    /// @param yArray List of values at breaking points (not necessarily in ascending order)\\n    /// @dev This function is a way to avoid some governance attacks or errors\\n    /// @dev The modifier checks if the arrays have a non null length, if their length is the same, if the values\\n    /// in the `xArray` are in ascending order and if the values in the `xArray` and in the `yArray` are not superior\\n    /// to `BASE_PARAMS`\\n    modifier onlyCompatibleInputArrays(uint64[] memory xArray, uint64[] memory yArray) {\\n        require(xArray.length == yArray.length && xArray.length > 0, \\\"5\\\");\\n        for (uint256 i = 0; i <= yArray.length - 1; i++) {\\n            require(yArray[i] <= uint64(BASE_PARAMS) && xArray[i] <= uint64(BASE_PARAMS), \\\"6\\\");\\n            if (i > 0) {\\n                require(xArray[i] > xArray[i - 1], \\\"7\\\");\\n            }\\n        }\\n        _;\\n    }\\n\\n    /// @notice Checks if the new value given for the parameter is consistent (it should be inferior to 1\\n    /// if it corresponds to a ratio)\\n    /// @param fees Value of the new parameter to check\\n    modifier onlyCompatibleFees(uint64 fees) {\\n        require(fees <= BASE_PARAMS, \\\"4\\\");\\n        _;\\n    }\\n\\n    /// @notice Checks if the new address given is not null\\n    /// @param newAddress Address to check\\n    /// @dev Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation\\n    modifier zeroCheck(address newAddress) {\\n        require(newAddress != address(0), \\\"0\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/PausableMapUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\n/// @title PausableMap\\n/// @author Angle Core Team after a fork from OpenZeppelin's similar Pausable Contracts\\n/// @notice Contract module which allows children to implement an emergency stop\\n/// mechanism that can be triggered by an authorized account.\\n/// @notice It generalizes Pausable from OpenZeppelin by allowing to specify a bytes32 that\\n/// should be stopped\\n/// @dev This module is used through inheritance\\n/// @dev In Angle's protocol, this contract is mainly used in `StableMasterFront`\\n/// to prevent SLPs and new stable holders from coming in\\n/// @dev The modifiers `whenNotPaused` and `whenPaused` from the original OpenZeppelin contracts were removed\\n/// to save some space and because they are not used in the `StableMaster` contract where this contract\\n/// is imported\\ncontract PausableMapUpgradeable {\\n    /// @dev Emitted when the pause is triggered for `name`\\n    event Paused(bytes32 name);\\n\\n    /// @dev Emitted when the pause is lifted for `name`\\n    event Unpaused(bytes32 name);\\n\\n    /// @dev Mapping between a name and a boolean representing the paused state\\n    mapping(bytes32 => bool) public paused;\\n\\n    /// @notice Triggers stopped state for `name`\\n    /// @param name Name for which to pause the contract\\n    /// @dev The contract must not be paused for `name`\\n    function _pause(bytes32 name) internal {\\n        require(!paused[name], \\\"18\\\");\\n        paused[name] = true;\\n        emit Paused(name);\\n    }\\n\\n    /// @notice Returns to normal state for `name`\\n    /// @param name Name for which to unpause the contract\\n    /// @dev The contract must be paused for `name`\\n    function _unpause(bytes32 name) internal {\\n        require(paused[name], \\\"19\\\");\\n        paused[name] = false;\\n        emit Unpaused(name);\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemInC\",\"type\":\"uint256\"}],\"name\":\"BurntStablecoins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_capOnStableMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxInterestsDistributed\",\"type\":\"uint256\"}],\"name\":\"CapOnStableAndMaxInterestsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_perpetualManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sanToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"CollateralDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"}],\"name\":\"CollateralRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"_xFee\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"_yFee\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"FeeArrayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeManager\",\"type\":\"address\"}],\"name\":\"FeeManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForUserInStable\",\"type\":\"uint256\"}],\"name\":\"MintedStablecoins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_feesForSLPs\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_interestsForSLPs\",\"type\":\"uint64\"}],\"name\":\"SLPsIncentivesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newSanRate\",\"type\":\"uint256\"}],\"name\":\"SanRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stocksUsers\",\"type\":\"uint256\"}],\"name\":\"StocksUsersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_PARAMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CORE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLP\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"}],\"name\":\"accumulateInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"addGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agToken\",\"outputs\":[{\"internalType\":\"contract IAgToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"contract IPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minCollatAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralMap\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract ISanToken\",\"name\":\"sanToken\",\"type\":\"address\"},{\"internalType\":\"contract IPerpetualManager\",\"name\":\"perpetualManager\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stocksUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sanRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collatBase\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastBlockUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedInterests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInterestsDistributed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesAside\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"slippageFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"feesForSLPs\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slippage\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"interestsForSLPs\",\"type\":\"uint64\"}],\"internalType\":\"struct SLPData\",\"name\":\"slpData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64[]\",\"name\":\"xFeeMint\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"yFeeMint\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"xFeeBurn\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"yFeeBurn\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"targetHAHedge\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"bonusMalusMint\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"bonusMalusBurn\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"capOnStableMinted\",\"type\":\"uint256\"}],\"internalType\":\"struct MintBurnData\",\"name\":\"feeData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"convertToSLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"governorList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_agToken\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"},{\"internalType\":\"contract IPerpetualManager\",\"name\":\"perpetualManager\",\"type\":\"address\"},{\"internalType\":\"contract IFeeManager\",\"name\":\"feeManager\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"contract ISanToken\",\"name\":\"sanToken\",\"type\":\"address\"}],\"name\":\"deployCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStocksUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stocksUsers\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"core_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minStableAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agent\",\"type\":\"bytes32\"},{\"internalType\":\"contract IPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IPoolManager\",\"name\":\"poolManagerUp\",\"type\":\"address\"},{\"internalType\":\"contract IPoolManager\",\"name\":\"poolManagerDown\",\"type\":\"address\"}],\"name\":\"rebalanceStocksUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"removeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"},{\"internalType\":\"contract ICollateralSettler\",\"name\":\"settlementContract\",\"type\":\"address\"}],\"name\":\"revokeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldGuardian\",\"type\":\"address\"}],\"name\":\"revokeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_capOnStableMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxInterestsDistributed\",\"type\":\"uint256\"},{\"internalType\":\"contract IPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"}],\"name\":\"setCapOnStableAndMaxInterests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCore\",\"type\":\"address\"}],\"name\":\"setCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_bonusMalusMint\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_bonusMalusBurn\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_slippage\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_slippageFee\",\"type\":\"uint64\"}],\"name\":\"setFeeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldFeeManager\",\"type\":\"address\"},{\"internalType\":\"contract IPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldGuardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_feesForSLPs\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_interestsForSLPs\",\"type\":\"uint64\"},{\"internalType\":\"contract IPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"}],\"name\":\"setIncentivesForSLPs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"contract IPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_targetHAHedge\",\"type\":\"uint64\"}],\"name\":\"setTargetHAHedge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"_xFee\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_yFee\",\"type\":\"uint64[]\"},{\"internalType\":\"uint8\",\"name\":\"_mint\",\"type\":\"uint8\"}],\"name\":\"setUserFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"}],\"name\":\"signalLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agent\",\"type\":\"bytes32\"},{\"internalType\":\"contract IPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolManager\",\"type\":\"address\"}],\"name\":\"updateStocksUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"contract IPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StableMasterFront","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"830","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}