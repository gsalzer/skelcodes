{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Masterdemon.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/**\\r\\n * @title Cryptodemonz NFT staking contract\\r\\n * @author lawrence_of_arabia & kisile\\r\\n * Special thanks to PonkyPink for catching bugs! \\r\\n */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./libs/Array.sol\\\";\\r\\n\\r\\ncontract Masterdemon is Ownable {\\r\\n    using Address for address;\\r\\n    using Array for uint256[];\\r\\n\\r\\n    /**\\r\\n     *    @notice keep track of each user and their info\\r\\n     */\\r\\n    struct UserInfo {\\r\\n        mapping(address => uint256[]) stakedTokens;\\r\\n        mapping(address => uint256) timeStaked;\\r\\n        uint256 amountStaked;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *    @notice keep track of each collection and their info\\r\\n     */\\r\\n    struct CollectionInfo {\\r\\n        bool isStakable;\\r\\n        address collectionAddress;\\r\\n        uint256 stakingFee;\\r\\n        uint256 harvestingFee;\\r\\n        uint256 multiplier;\\r\\n        uint256 amountOfStakers;\\r\\n        uint256 stakingLimit;\\r\\n        uint256 harvestCooldown;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *    @notice map user addresses over their info\\r\\n     */\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n\\r\\n    /**\\r\\n     *    @notice collection address => (staked nft => user address)\\r\\n     */\\r\\n    mapping(address => mapping(uint256 => address)) public tokenOwners;\\r\\n\\r\\n    /**\\r\\n     *   @notice array of each collection, we search through this by _cid (collection identifier)\\r\\n     */\\r\\n    CollectionInfo[] public collectionInfo;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    /*-------------------------------Main external functions-------------------------------*/\\r\\n\\r\\n    /**\\r\\n     *   @notice external stake function, for single stake request\\r\\n     *   @param _cid => collection address\\r\\n     *   @param _id => nft id\\r\\n     */\\r\\n    function stake(uint256 _cid, uint256 _id) external payable {\\r\\n        require(\\r\\n            msg.value >= collectionInfo[_cid].stakingFee,\\r\\n            \\\"Masterdemon.stake: Fee\\\"\\r\\n        );\\r\\n        _stake(msg.sender, _cid, _id);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *   @notice loops normal stake, in case of multiple stake requests\\r\\n     *   @param _cid => collection address\\r\\n     *   @param _ids => array of nft ids\\r\\n     */\\r\\n    function batchStake(uint256 _cid, uint256[] memory _ids) external payable {\\r\\n        require(\\r\\n                msg.value >= collectionInfo[_cid].stakingFee * _ids.length,\\r\\n                \\\"Masterdemon.stake: Fee\\\"\\r\\n            );\\r\\n        for (uint256 i = 0; i < _ids.length; ++i) {\\r\\n            _stake(msg.sender, _cid, _ids[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *   @notice external unstake function, for single unstake request\\r\\n     *   @param _cid => collection address\\r\\n     *   @param _id => nft id\\r\\n     */\\r\\n    function unstake(uint256 _cid, uint256 _id) external {\\r\\n        _unstake(msg.sender, _cid, _id);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *   @notice loops normal unstake, in case of multiple unstake requests\\r\\n     *   @param _cid => collection address\\r\\n     *   @param _ids => array of nft ids\\r\\n     */\\r\\n    function batchUnstake(uint256 _cid, uint256[] memory _ids) external {\\r\\n        for (uint256 i = 0; i < _ids.length; ++i) {\\r\\n            _unstake(msg.sender, _cid, _ids[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*-------------------------------Main internal functions-------------------------------*/\\r\\n\\r\\n    /**\\r\\n     *    @notice internal stake function, called in external stake and batchStake\\r\\n     *    @param _user => msg.sender\\r\\n     *    @param _cid => collection id\\r\\n     *    @param _id => nft id\\r\\n     */\\r\\n    function _stake(\\r\\n        address _user,\\r\\n        uint256 _cid,\\r\\n        uint256 _id\\r\\n    ) internal {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        CollectionInfo storage collection = collectionInfo[_cid];\\r\\n\\r\\n        require(\\r\\n            user.stakedTokens[collection.collectionAddress].length <\\r\\n                collection.stakingLimit,\\r\\n            \\\"Masterdemon._stake: You can't stake more\\\"\\r\\n        );\\r\\n\\r\\n        IERC721(collection.collectionAddress).transferFrom(\\r\\n            _user,\\r\\n            address(this),\\r\\n            _id\\r\\n        );\\r\\n\\r\\n        if (user.stakedTokens[collection.collectionAddress].length == 0) {\\r\\n            collection.amountOfStakers += 1;\\r\\n        }\\r\\n\\r\\n        user.amountStaked += 1;\\r\\n        user.timeStaked[collection.collectionAddress] = block.timestamp;\\r\\n        user.stakedTokens[collection.collectionAddress].push(_id);\\r\\n        tokenOwners[collection.collectionAddress][_id] = _user;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *    @notice internal unstake function, called in external unstake and batchUnstake\\r\\n     *    @param _user => msg.sender\\r\\n     *    @param _cid => collection id\\r\\n     *    @param _id => nft id\\r\\n     */\\r\\n    function _unstake(\\r\\n        address _user,\\r\\n        uint256 _cid,\\r\\n        uint256 _id\\r\\n    ) internal {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        CollectionInfo storage collection = collectionInfo[_cid];\\r\\n\\r\\n        require(\\r\\n            tokenOwners[collection.collectionAddress][_id] == _user,\\r\\n            \\\"Masterdemon._unstake: Sender doesn't owns this token\\\"\\r\\n        );\\r\\n\\r\\n        user.stakedTokens[collection.collectionAddress].removeElement(_id);\\r\\n\\r\\n        if (user.stakedTokens[collection.collectionAddress].length == 0) {\\r\\n            collection.amountOfStakers -= 1;\\r\\n        }\\r\\n\\r\\n        delete tokenOwners[collection.collectionAddress][_id];\\r\\n\\r\\n        user.timeStaked[collection.collectionAddress] = block.timestamp;\\r\\n        user.amountStaked -= 1;\\r\\n\\r\\n        if (user.amountStaked == 0) {\\r\\n            delete userInfo[_user];\\r\\n        }\\r\\n\\r\\n        IERC721(collection.collectionAddress).transferFrom(\\r\\n            address(this),\\r\\n            _user,\\r\\n            _id\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*-------------------------------Admin functions-------------------------------*/\\r\\n\\r\\n    /**\\r\\n     *    @notice initialize new collection\\r\\n     *    @param _isStakable => is pool active?\\r\\n     *    @param _collectionAddress => address of nft collection\\r\\n     *    @param _stakingFee => represented in WEI\\r\\n     *    @param _harvestingFee => represented in WEI\\r\\n     *    @param _multiplier => special variable to adjust returns\\r\\n     *    @param _stakingLimit => total amount of nfts user is allowed to stake\\r\\n     *    @param _harvestCooldown => represented in days\\r\\n     */\\r\\n    function setCollection(\\r\\n        bool _isStakable,\\r\\n        address _collectionAddress,\\r\\n        uint256 _stakingFee,\\r\\n        uint256 _harvestingFee,\\r\\n        uint256 _multiplier,\\r\\n        uint256 _stakingLimit,\\r\\n        uint256 _harvestCooldown\\r\\n    ) public onlyOwner {\\r\\n        collectionInfo.push(\\r\\n            CollectionInfo({\\r\\n                isStakable: _isStakable,\\r\\n                collectionAddress: _collectionAddress,\\r\\n                stakingFee: _stakingFee,\\r\\n                harvestingFee: _harvestingFee,\\r\\n                multiplier: _multiplier,\\r\\n                amountOfStakers: 0,\\r\\n                stakingLimit: _stakingLimit,\\r\\n                harvestCooldown: _harvestCooldown\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *    @notice update collection\\r\\n     *    {see above function for param definition}\\r\\n     */\\r\\n    function updateCollection(\\r\\n        uint256 _cid,\\r\\n        bool _isStakable,\\r\\n        address _collectionAddress,\\r\\n        uint256 _stakingFee,\\r\\n        uint256 _harvestingFee,\\r\\n        uint256 _multiplier,\\r\\n        uint256 _stakingLimit,\\r\\n        uint256 _harvestCooldown\\r\\n    ) public onlyOwner {\\r\\n        CollectionInfo storage collection = collectionInfo[_cid];\\r\\n        collection.isStakable = _isStakable;\\r\\n        collection.collectionAddress = _collectionAddress;\\r\\n        collection.stakingFee = _stakingFee;\\r\\n        collection.harvestingFee = _harvestingFee;\\r\\n        collection.multiplier = _multiplier;\\r\\n        collection.stakingLimit = _stakingLimit;\\r\\n        collection.harvestCooldown = _harvestCooldown;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *    @notice enable/disable collections, without updating whole struct\\r\\n     *    @param _cid => collection id\\r\\n     *    @param _isStakable => enable/disable\\r\\n     */\\r\\n    function manageCollection(uint256 _cid, bool _isStakable) public onlyOwner {\\r\\n        collectionInfo[_cid].isStakable = _isStakable;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    *   @notice withdraw ETH from contract\\r\\n     */\\r\\n    function withdraw() external onlyOwner {\\r\\n        payable(msg.sender).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    /*-------------------------------Get functions for frontend-------------------------------*/\\r\\n\\r\\n    function getUserInfo(address _user, address _collection)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        return (\\r\\n            user.stakedTokens[_collection],\\r\\n            user.timeStaked[_collection],\\r\\n            user.amountStaked\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getCollectionInfo(uint256 _cid)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            bool,\\r\\n            address,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        CollectionInfo memory collection = collectionInfo[_cid];\\r\\n        return (\\r\\n            collection.isStakable,\\r\\n            collection.collectionAddress,\\r\\n            collection.stakingFee,\\r\\n            collection.harvestingFee,\\r\\n            collection.multiplier,\\r\\n            collection.amountOfStakers,\\r\\n            collection.stakingLimit,\\r\\n            collection.harvestCooldown\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*-------------------------------Misc-------------------------------*/\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/libs/Array.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nlibrary Array {\\r\\n    /**\\r\\n    *   @notice remove given elements from array\\r\\n    *   @dev usable only if _array contains unique elements only\\r\\n     */\\r\\n    function removeElement(uint256[] storage _array, uint256 _element) public {\\r\\n        for (uint256 i; i<_array.length; i++) {\\r\\n            if (_array[i] == _element) {\\r\\n                _array[i] = _array[_array.length - 1];\\r\\n                _array.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {\r\n      \"/contracts/libs/Array.sol\": {\r\n        \"Array\": \"0x2831962e72a38761219eAa89e9515745506E80CC\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"batchStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"batchUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collectionInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isStakable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfStakers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestCooldown\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cid\",\"type\":\"uint256\"}],\"name\":\"getCollectionInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStakable\",\"type\":\"bool\"}],\"name\":\"manageCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isStakable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvestingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvestCooldown\",\"type\":\"uint256\"}],\"name\":\"setCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStakable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvestingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvestCooldown\",\"type\":\"uint256\"}],\"name\":\"updateCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Masterdemon","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}