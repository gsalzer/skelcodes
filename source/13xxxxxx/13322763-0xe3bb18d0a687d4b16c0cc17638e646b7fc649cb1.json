{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLISCENSED\r\n\r\npragma solidity 0.8.4;\r\n\r\ncontract SWP {\r\n    struct NFT_offer {\r\n        address nft_address;\r\n        uint256 token_id;\r\n        address trader;\r\n    }\r\n    \r\n    \r\n    address constant JULIA = 0x6e845bE4ea601B4Dbe98ED1f52b371dca1Dbb2b6;\r\n    address constant nft_in  = JULIA;\r\n    address constant nft_out = JULIA;\r\n\r\n    mapping (address => mapping (uint256 => NFT_offer)) swap_offers;\r\n\r\n    constructor () {}\r\n\r\n    /*\r\n      One has to approve this contract to use his/her `token_offered` before calling the function\r\n    */\r\n    function offer_swap(uint256 token_offered, uint256 token_requested) public {\r\n        require(IERC721Enumerable(nft_in).ownerOf(token_offered)==msg.sender);\r\n        require(IERC721Enumerable(nft_in).getApproved(token_offered)==address(this));\r\n        swap_offers[nft_in][token_offered] = NFT_offer(nft_out, token_requested, msg.sender);\r\n    }\r\n\r\n    /*\r\n      One has to approve this contract to use his/her `token_you_give` before calling this.\r\n      `token_you_get` is the token that is required by the offer maker and should be held by the party accepting the offer.\r\n      `token_you_give` is the token that is offered by the offer maker and will be given to the party accepting the offer.\r\n    */\r\n    function make_swap(uint256 token_you_give, uint256 token_you_get) public {\r\n        NFT_offer memory offer = swap_offers[nft_out][token_you_get];\r\n        require(offer.nft_address==nft_in && offer.token_id==token_you_give);\r\n        IERC721Enumerable(nft_out).transferFrom(offer.trader, msg.sender, token_you_get);\r\n        IERC721Enumerable(nft_in ).transferFrom(msg.sender, offer.trader, token_you_give);\r\n    }\r\n\r\n    /*\r\n      Checks if an offer to swap `token_offered` for `token_requested` is available and approved\r\n      (just to avoid wasting gas in case `make_swap` would fail)\r\n    */\r\n    function check_offer(uint256 token_offered, uint256 token_requested) public view returns (bool) {\r\n        NFT_offer memory offer = swap_offers[nft_out][token_offered];\r\n        bool approved = IERC721Enumerable(nft_out).getApproved(token_offered)==address(this);\r\n        return (offer.nft_address==nft_in && offer.token_id==token_requested && approved);\r\n    }\r\n\r\n}\r\n\r\ncontract IERC721Enumerable {\r\n    function transferFrom(address from, address to, uint256 tokenId) public {}\r\n    function getApproved(uint256 tokenId) external view returns (address operator) {}\r\n    function ownerOf(uint256 tokenId) external view returns (address owner) {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IERC721Enumerable","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3977621ec3bededee5cae7e7ebfc5694d303ce6b6a1b8ffc0e981c707e8ed83b"}]}