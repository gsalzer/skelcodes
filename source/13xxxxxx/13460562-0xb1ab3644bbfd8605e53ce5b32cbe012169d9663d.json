{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BloXmoveVesting.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.3;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title bloXmove Cliffing and Vesting Contract.\\r\\n */\\r\\ncontract BloXmoveVesting is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeMath for uint16;\\r\\n\\r\\n    // The ERC20 bloXmove token\\r\\n    IERC20 public immutable bloXmoveToken;\\r\\n    // The allowed total amount of all grants (currently estimated 49000000 tokens).\\r\\n    uint256 public immutable totalAmountOfGrants;\\r\\n    // The current total amount of added grants.\\r\\n    uint256 public storedAddedAmount = 0;\\r\\n\\r\\n    struct Grant {\\r\\n        address beneficiary;\\r\\n        uint16 vestingDuration; // in days\\r\\n        uint16 daysClaimed;\\r\\n        uint256 vestingStartTime;\\r\\n        uint256 amount;\\r\\n        uint256 totalClaimed;\\r\\n    }\\r\\n\\r\\n    // The start time of all Grants.\\r\\n    // starttime + cliffing time of Grant = starttime of vesting\\r\\n    uint256 public immutable startTime;\\r\\n\\r\\n    mapping(address => Grant) private tokenGrants;\\r\\n\\r\\n    event GrantAdded(address indexed beneficiary);\\r\\n\\r\\n    event GrantTokensClaimed(\\r\\n        address indexed beneficiary,\\r\\n        uint256 amountClaimed\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor to set the address of the token contract\\r\\n     * and the start time (timestamp in seconds).\\r\\n     */\\r\\n    constructor(\\r\\n        address _bloXmoveToken,\\r\\n        address _grantManagerAddr,\\r\\n        uint256 _totalAmountOfGrants,\\r\\n        uint256 _startTime\\r\\n    ) {\\r\\n        transferOwnership(_grantManagerAddr);\\r\\n        bloXmoveToken = IERC20(_bloXmoveToken);\\r\\n        totalAmountOfGrants = _totalAmountOfGrants;\\r\\n        startTime = _startTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Not supported receive function.\\r\\n     */\\r\\n    receive() external payable {\\r\\n        revert(\\\"Not supported receive function\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Not supported fallback function.\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        revert(\\\"Not supported fallback function\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add Token Grant for the beneficiary.\\r\\n     * @param _beneficiary the address of the account receiving the grant\\r\\n     * @param _amount the amount (in 1/18 token) of the grant\\r\\n     * @param _vestingDurationInDays the vesting period of the grant in days\\r\\n     * @param _vestingCliffInDays the cliff period of the grant in days\\r\\n     *\\r\\n     * Emits a {GrantAdded} event indicating the beneficiary address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The msg.sender is the owner of the contract.\\r\\n     * - The beneficiary has no other Grants.\\r\\n     * - The given grant amount + other added grants is smaller or equal to the totalAmountOfGrants\\r\\n     * - The amount vested per day (amount/vestingDurationInDays) is bigger than 0.\\r\\n     * - The requirement described in function {calculateGrantClaim} for msg.sender.\\r\\n     * - The contract can transfer token on behalf of the owner of the contract.\\r\\n     */\\r\\n    function addTokenGrant(\\r\\n        address _beneficiary,\\r\\n        uint256 _amount,\\r\\n        uint16 _vestingDurationInDays,\\r\\n        uint16 _vestingCliffInDays\\r\\n    ) external onlyOwner {\\r\\n        require(tokenGrants[_beneficiary].amount == 0, \\\"Grant already exists!\\\");\\r\\n        storedAddedAmount = storedAddedAmount.add(_amount);\\r\\n        require(\\r\\n            storedAddedAmount <= totalAmountOfGrants,\\r\\n            \\\"Amount exceeds grants balance!\\\"\\r\\n        );\\r\\n        uint256 amountVestedPerDay = _amount.div(_vestingDurationInDays);\\r\\n        require(amountVestedPerDay > 0, \\\"amountVestedPerDay is 0\\\");\\r\\n        require(\\r\\n            bloXmoveToken.transferFrom(owner(), address(this), _amount),\\r\\n            \\\"transferFrom Error\\\"\\r\\n        );\\r\\n\\r\\n        Grant memory grant = Grant({\\r\\n            vestingStartTime: startTime + _vestingCliffInDays * 1 days,\\r\\n            amount: _amount,\\r\\n            vestingDuration: _vestingDurationInDays,\\r\\n            daysClaimed: 0,\\r\\n            totalClaimed: 0,\\r\\n            beneficiary: _beneficiary\\r\\n        });\\r\\n        tokenGrants[_beneficiary] = grant;\\r\\n        emit GrantAdded(_beneficiary);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claim the available vested tokens.\\r\\n     *\\r\\n     * This function is called by the beneficiaries to claim their vested tokens.\\r\\n     *\\r\\n     * Emits a {GrantTokensClaimed} event indicating the beneficiary address and\\r\\n     * the claimed amount.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The vested amount to claim is bigger than 0\\r\\n     * - The requirement described in function {calculateGrantClaim} for msg.sender\\r\\n     * - The contract can transfer tokens to the beneficiary\\r\\n     */\\r\\n    function claimVestedTokens() external {\\r\\n        uint16 daysVested;\\r\\n        uint256 amountVested;\\r\\n        (daysVested, amountVested) = calculateGrantClaim(_msgSender());\\r\\n        require(amountVested > 0, \\\"Vested is 0\\\");\\r\\n        Grant storage tokenGrant = tokenGrants[_msgSender()];\\r\\n        tokenGrant.daysClaimed = uint16(tokenGrant.daysClaimed.add(daysVested));\\r\\n        tokenGrant.totalClaimed = uint256(\\r\\n            tokenGrant.totalClaimed.add(amountVested)\\r\\n        );\\r\\n        require(\\r\\n            bloXmoveToken.transfer(tokenGrant.beneficiary, amountVested),\\r\\n            \\\"no tokens\\\"\\r\\n        );\\r\\n        emit GrantTokensClaimed(tokenGrant.beneficiary, amountVested);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev calculate the days and the amount vested for a particular claim.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The Grant ist not fully claimed\\r\\n     * - The current time is bigger than the starttime.\\r\\n     *\\r\\n     * @return a tuple of days vested and amount of vested tokens.\\r\\n     */\\r\\n    function calculateGrantClaim(address _beneficiary)\\r\\n        private\\r\\n        view\\r\\n        returns (uint16, uint256)\\r\\n    {\\r\\n        Grant storage tokenGrant = tokenGrants[_beneficiary];\\r\\n        require(tokenGrant.amount > 0, \\\"no Grant\\\");\\r\\n        require(\\r\\n            tokenGrant.totalClaimed < tokenGrant.amount,\\r\\n            \\\"Grant fully claimed\\\"\\r\\n        );\\r\\n        // Check cliffing duration\\r\\n        if (currentTime() < tokenGrant.vestingStartTime) {\\r\\n            return (0, 0);\\r\\n        }\\r\\n\\r\\n        uint256 elapsedDays = currentTime()\\r\\n            .sub(tokenGrant.vestingStartTime - 1 days)\\r\\n            .div(1 days);\\r\\n\\r\\n        // If over vesting duration, all tokens vested\\r\\n        if (elapsedDays >= tokenGrant.vestingDuration) {\\r\\n            // solve the uneven vest issue that could accure\\r\\n            uint256 remainingGrant = tokenGrant.amount.sub(\\r\\n                tokenGrant.totalClaimed\\r\\n            );\\r\\n            return (tokenGrant.vestingDuration, remainingGrant);\\r\\n        } else {\\r\\n            uint16 daysVested = uint16(elapsedDays.sub(tokenGrant.daysClaimed));\\r\\n            uint256 amountVestedPerDay = tokenGrant.amount.div(\\r\\n                uint256(tokenGrant.vestingDuration)\\r\\n            );\\r\\n            uint256 amountVested = uint256(daysVested.mul(amountVestedPerDay));\\r\\n            return (daysVested, amountVested);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the amount of tokens that are currently available to claim for a given beneficiary.\\r\\n     * Reverts if there is no grant for the beneficiary.\\r\\n     *\\r\\n     * @return the amount of tokens that are currently available to claim, 0 if fully claimed.\\r\\n     */\\r\\n    function getCurrentAmountToClaim(address _beneficiary)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        Grant storage tokenGrant = tokenGrants[_beneficiary];\\r\\n        require(tokenGrant.amount > 0, \\\"no Grant\\\");\\r\\n        if (tokenGrant.totalClaimed == tokenGrant.amount) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 amountVested;\\r\\n        (, amountVested) = calculateGrantClaim(_beneficiary);\\r\\n        return amountVested;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the remaining grant amount for a given beneficiary.\\r\\n     * @return the remaining grant amount.\\r\\n     */\\r\\n    function getRemainingGrant(address _beneficiary)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        Grant storage tokenGrant = tokenGrants[_beneficiary];\\r\\n        return tokenGrant.amount.sub(tokenGrant.totalClaimed);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the vesting start time for a given beneficiary.\\r\\n     * @return the start time.\\r\\n     */\\r\\n    function getVestingStartTime(address _beneficiary)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        Grant storage tokenGrant = tokenGrants[_beneficiary];\\r\\n        return tokenGrant.vestingStartTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the grant amount for a given beneficiary.\\r\\n     * @return the grant amount.\\r\\n     */\\r\\n    function getGrantAmount(address _beneficiary)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        Grant storage tokenGrant = tokenGrants[_beneficiary];\\r\\n        return tokenGrant.amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the timestamp from the block set by the miners.\\r\\n     * @return the current timestamp of the block.\\r\\n     */\\r\\n    function currentTime() private view returns (uint256) {\\r\\n        return block.timestamp; // solhint-disable-line\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bloXmoveToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_grantManagerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmountOfGrants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"GrantAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"GrantTokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_vestingCliffInDays\",\"type\":\"uint16\"}],\"name\":\"addTokenGrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bloXmoveToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimVestedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getCurrentAmountToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getGrantAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getRemainingGrant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getVestingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storedAddedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountOfGrants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BloXmoveVesting","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000038d9eb07a7b8df7d86f440a4a5c4a4c1a27e1a080000000000000000000000003ce099bdbb0082fd28ba992f88334cb9bad4e2a30000000000000000000000000000000000000000001021491e409c19c38000000000000000000000000000000000000000000000000000000000000061735081","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}