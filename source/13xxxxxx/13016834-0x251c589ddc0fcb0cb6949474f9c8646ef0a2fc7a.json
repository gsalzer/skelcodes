{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ncontract ERC20_BTest15 is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    string private constant _name = \"BTest-15\"; \r\n    string private constant _symbol = \"BTest-15\";\r\n    uint8 private constant _decimals = 9;  \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 100000000000000000 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 public _tFeeTotal;\r\n    uint256 public _BTest15Burned;\r\n    bool public _cooldownEnabled = true;\r\n    bool public tradeAllowed = false;\r\n    bool private liquidityAdded = false;\r\n    bool private inSwap = false;\r\n    bool public swapEnabled = false;\r\n    bool public feeEnabled = false;\r\n    bool private limitTX = false;\r\n    bool public doubleFeeEnable = false;\r\n    uint256 private _maxTxAmount = _tTotal;     \r\n    uint256 private _reflection = 3;\r\n    uint256 private _contractFee = 10;\r\n    uint256 private _BTest15Burn = 2;    \r\n    uint256 private _maxBuyAmount;\r\n    uint256 private buyLimitEnd;\r\n    address payable private _development;\r\n    address payable private _boost;\r\n    // ROGE: address public targetToken = 0x45734927Fa2f616FbE19E65f42A0ef3d37d1c80A;  \r\n    // address public targetToken = 0x516de3a7A567d81737e3a46ec4FF9cFD1fcb0136; // USDT address \r\n    // address public targetToken = 0xaD6D458402F60fD3Bd25163575031ACDce07538D; //dai test net \r\n    \r\n    address public targetToken = 0x6B175474E89094C44Da98b954EedeAC495271d0F; //dai mainnet\r\n    \r\n    address public boostFund = 0xa638F4Bb8202049eb4A6782511c3b8A64A2F90a1;  \r\n    \r\n    address public whitelist = 0x2ADf3ddd9A238E8c0afea647137aE4F534405388;\r\n    \r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;  \r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping (address => User) private cooldown;\r\n    mapping(address => bool) private _isExcludedFromFee;  \r\n    mapping(address => bool) private _isBlacklisted;\r\n\r\n    struct User {\r\n        uint256 buy;\r\n        uint256 sell;\r\n        bool exists;\r\n    }\r\n\r\n    event CooldownEnabledUpdated(bool _cooldown);\r\n    event MaxBuyAmountUpdated(uint _maxBuyAmount);\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n        \r\n        \r\n    }\r\n\r\n    constructor(address payable addr1, address payable addr2, address addr3) {\r\n        _development = addr1;\r\n        _boost = addr2;\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_development] = true;\r\n        _isExcludedFromFee[_boost] = true;\r\n        _isExcludedFromFee[addr3] = true;\r\n        _isExcludedFromFee[whitelist] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n    \r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }    \r\n    \r\n    function setTargetAddress(address target_adr) external onlyOwner {\r\n        targetToken = target_adr;\r\n    }\r\n    \r\n    function setWhitelistAddress(address _address,bool _bool) external onlyOwner {\r\n        _isExcludedFromFee[_address] = _bool;\r\n    }\r\n    \r\n    function setExcludedFromFee(address account) external onlyOwner {\r\n        address addr3 = account;\r\n        _isExcludedFromFee[addr3] = true;\r\n    }\r\n\r\n    function setAddressIsBlackListed(address _address, bool _bool) external onlyOwner {\r\n        _isBlacklisted[_address] = _bool;\r\n    }\r\n\r\n    function viewIsBlackListed(address _address) public view returns(bool) {\r\n        return _isBlacklisted[_address];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    \r\n    function setFeeEnabled(bool enable) external onlyOwner {\r\n        feeEnabled = enable;\r\n    }\r\n    \r\n    function setdoubleFeeEnabled( bool enable) external onlyOwner {\r\n        doubleFeeEnable = enable;\r\n    }    \r\n    \r\n    function setLimitTx(bool enable) external onlyOwner {\r\n        limitTX = enable;\r\n    }\r\n\r\n    function enableTrading(bool enable) external onlyOwner {\r\n        require(liquidityAdded);\r\n        tradeAllowed = enable;\r\n        //  first 15 minutes after launch.\r\n        buyLimitEnd = block.timestamp + (900 seconds);\r\n    }\r\n\r\n    function addLiquidity() external onlyOwner() {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        swapEnabled = true;\r\n        liquidityAdded = true;\r\n        feeEnabled = true;\r\n        limitTX = true;\r\n        _maxTxAmount = 1000000000000000 * 10**9;\r\n        _maxBuyAmount = 300000000000000 * 10**9;\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);\r\n    }\r\n\r\n    function manualSwapTokensForEth() external onlyOwner() {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n\r\n    function manualDistributeETH() external onlyOwner() {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        distributeETH(contractETHBalance);\r\n    }\r\n    \r\n    function manualSwapEthForTargetToken(uint amount) external onlyOwner() {\r\n        swapETHfortargetToken(amount);\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n        require(maxTxPercent > 0, \"Amount must be greater than 0\");\r\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\r\n        emit MaxTxAmountUpdated(_maxTxAmount);\r\n    }    \r\n    \r\n    function setCooldownEnabled(bool onoff) external onlyOwner() {\r\n        _cooldownEnabled = onoff;\r\n        emit CooldownEnabledUpdated(_cooldownEnabled);\r\n    }\r\n\r\n    function timeToBuy(address buyer) public view returns (uint) {\r\n        return block.timestamp - cooldown[buyer].buy;\r\n    }\r\n\r\n    function timeToSell(address buyer) public view returns (uint) {\r\n        return block.timestamp - cooldown[buyer].sell;\r\n    }\r\n\r\n    function amountInPool() public view returns (uint) {\r\n        return balanceOf(uniswapV2Pair);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) private view returns (uint256) {\r\n        require(rAmount <= _rTotal,\"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (from != owner() && to != owner() && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {  \r\n            require(tradeAllowed);\r\n            require(!_isBlacklisted[from] && !_isBlacklisted[to]);          \r\n            if(_cooldownEnabled) {\r\n                if(!cooldown[msg.sender].exists) {\r\n                    cooldown[msg.sender] = User(0,0,true);\r\n                }\r\n            }\r\n            // buy\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router)) {                \r\n                if (limitTX) {\r\n                    require(amount <= _maxTxAmount);\r\n                }\r\n                if(_cooldownEnabled) {\r\n                    if(buyLimitEnd > block.timestamp) {\r\n                        require(amount <= _maxBuyAmount);\r\n                        require(cooldown[to].buy < block.timestamp, \"Your buy cooldown has not expired.\");\r\n                        //  2min BUY cooldown\r\n                        cooldown[to].buy = block.timestamp + (120 seconds);\r\n                    }\r\n                    // 5mins cooldown to SELL after a BUY to ban front-runner bots\r\n                    cooldown[to].sell = block.timestamp + (300 seconds);\r\n                }      \r\n                uint contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    swapETHfortargetToken(address(this).balance);\r\n                }   \r\n            }\r\n            // sell\r\n\r\n            if(to == address(uniswapV2Pair) || to == address(uniswapV2Router) ) {                    \r\n                if (doubleFeeEnable) {      \r\n                    doubleFee();                                                      \r\n                }            \r\n                if(_cooldownEnabled) {\r\n                    require(cooldown[from].sell < block.timestamp, \"Your sell cooldown has not expired.\");\r\n                }               \r\n                uint contractTokenBalance = balanceOf(address(this));\r\n                if (!inSwap && from != uniswapV2Pair && swapEnabled) {\r\n                    if (limitTX) {\r\n                    require(amount <= balanceOf(uniswapV2Pair).mul(3).div(100) && amount <= _maxTxAmount);\r\n                    }\r\n                    uint initialETHBalance = address(this).balance;\r\n                    swapTokensForEth(contractTokenBalance);\r\n                    uint newETHBalance = address(this).balance;\r\n                    uint ethToDistribute = newETHBalance.sub(initialETHBalance);\r\n                    if (ethToDistribute > 0) {\r\n                        distributeETH(ethToDistribute);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        bool takeFee = true;\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || !feeEnabled) {\r\n            takeFee = false;\r\n        }\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n        restoreAllFee;\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (_reflection == 0 && _contractFee == 0 && _BTest15Burn == 0) return;\r\n        _reflection = 0;\r\n        _contractFee = 0;\r\n        _BTest15Burn = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _reflection = 3;\r\n        _contractFee = 10;\r\n        _BTest15Burn = 2;\r\n    }\r\n    \r\n    function doubleFee() private {\r\n        _reflection = 6;\r\n        _contractFee = 20;\r\n        _BTest15Burn = 4;\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreAllFee();  \r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 amount) private {\r\n        (uint256 tAmount, uint256 tBurn) = _BTest15EthBurn(amount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount, tBurn);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeTeam(tTeam);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _takeTeam(uint256 tTeam) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n    }\r\n\r\n    function _BTest15EthBurn(uint amount) private returns (uint, uint) {  \r\n        uint orgAmount = amount;\r\n        uint256 currentRate = _getRate();\r\n        uint256 tBurn = amount.mul(_BTest15Burn).div(100);\r\n        uint256 rBurn = tBurn.mul(currentRate);\r\n        _tTotal = _tTotal.sub(tBurn);\r\n        _rTotal = _rTotal.sub(rBurn);\r\n        _BTest15Burned = _BTest15Burned.add(tBurn);\r\n        return (orgAmount, tBurn);\r\n    }\r\n    \r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount, uint256 tBurn) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {       \r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _reflection, _contractFee, tBurn);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 teamFee, uint256 tBurn) private pure returns (uint256, uint256, uint256) { \r\n        uint256 tFee = tAmount.mul(taxFee).div(100);\r\n        uint256 tTeam = tAmount.mul(teamFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam).sub(tBurn);\r\n        return (tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n    \r\n     function swapETHfortargetToken(uint ethAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(targetToken);\r\n\r\n        _approve(address(this), address(uniswapV2Router), ethAmount);\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(ethAmount,path,address(boostFund),block.timestamp);\r\n    }\r\n\r\n    function distributeETH(uint256 amount) private {\r\n        _development.transfer(amount.div(10));\r\n        _boost.transfer(amount.div(2));\r\n    }\r\n    \r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"addr2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr3\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_cooldown\",\"type\":\"bool\"}],\"name\":\"CooldownEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxBuyAmount\",\"type\":\"uint256\"}],\"name\":\"MaxBuyAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_BTest15Burned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doubleFeeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualDistributeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualSwapEthForTargetToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapTokensForEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setAddressIsBlackListed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setLimitTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target_adr\",\"type\":\"address\"}],\"name\":\"setTargetAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setWhitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setdoubleFeeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"timeToBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"timeToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"viewIsBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ERC20_BTest15","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cc41b6e83ca8b5e33d7578a545f5819fdd920bac000000000000000000000000a638f4bb8202049eb4a6782511c3b8a64a2f90a10000000000000000000000000317e732882664c864d8719fc2d43b0138048dfb","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dfe8d152a671e9d47370d9aad29e662cbc7ccb31e81df698bdf31f5811d4931b"}]}