{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"DumpBusterv1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract DumpBuster_v1 is Context, IERC20 {\\n\\n    mapping (address =\\u003e uint256) private _balances; // How much money everyone has\\n    mapping (address =\\u003e bool) private _exchanges; // A map of exchanges for swapping coins. These addresses are whitelisted from time based transactions.\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances; // For Uniswap. Used to let uniswap make exchanges for you.\\n\\n    address private _owner; // Who owns the token\\n    address private _banner; // Who can ban people\\n    address private _proxy; // Address of the proxy\\n    address private _tax; // The address of the wallet that project tax funds goes to\\n    uint256 private _taxAmount; // Amount we tax that goes to _tax wallet, treated as a percentage (10000 = 100%)\\n    address private _treasury; // Address of our treasury wallet\\n    uint256 private _sellTaxFactor; // Multiplicative factor by which sell tax differs from buy tax (10000 = 100%, 18000 = 1.8x)\\n\\n\\n    //mapping (address =\\u003e uint256) private _lastTransactBlocks; // Keeps track of the last block a user transacted in\\n    //mapping (address =\\u003e uint256) private _lastTransactTimes; // Keeps track of the last time a user transacted\\n    bool private _tradeIsOpen; // Is trading available\\n    bool private _buyIsOpen; // Is exchange buying available\\n    bool private _sellIsOpen; // Is exchange selling available\\n    //uint256 private _launchedBlock; // What block number did we launch on\\n    uint256 private _blockRestriction; // The number of blocks people need to wait til the second transaction\\n    uint256 private _timeRestriction; // How long folks need to wait between transactions\\n    uint256 private _transactRestriction; // Maximum number of tokens a user is allowed to trade in one transaction\\n    uint256 private _transactRestrictionTime; // How long is the transaction size restriction in effect\\n    uint256 private _transactRestrictionTimeStart; // What time does the transaction time restriction start\\n    bool private _transactRestrictionEnabled; // Is the transaction size restriction enabled\\n\\n    bool private _initialized; // Have we initialzed\\n    uint256 private _DECIMALS;\\n    uint256 private _DECIMALFACTOR;\\n    uint256 private _SUPPLY;\\n    uint256 private _TotalSupply;\\n    uint256 private _TENTHOUSANDUNITS;\\n    string private _NAME;\\n    string private _SYMBOL; // Our Ticker\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private botChecker; // For each coin the last time each wallet transacted.\\n    mapping (address =\\u003e mapping (address =\\u003e bool)) private blacklist; // For each coin which wallets are blacklisted?\\n    mapping (address =\\u003e bool) private _partners; // Map of which coins should be allowed to utilize DumpBuster methods\\n\\n    // event for EVM logging\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\n    event Transfer(address recipient, uint256 amount);\\n    event Approval(address spender, uint256 amount);\\n\\n    /**\\n     * Description: Check if a user is the owner. Used by methods that should only be run by the owner wallet.\\n     **/\\n    modifier isOwner() {\\n        // If the first argument of \\u0027require\\u0027 evaluates to \\u0027false\\u0027, execution terminates and all\\n        // changes to the state and to Ether balances are reverted.\\n        // This used to consume all gas in old EVM versions, but not anymore.\\n        // It is often a good idea to use \\u0027require\\u0027 to check if functions are called correctly.\\n        // As a second argument, you can also provide an explanation about what went wrong.\\n        require(_msgSender() == _owner, \\\"Caller is not owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Description: Check if a user is the owner or banner. Used by methods that should only be run by the owner or banner wallets.\\n     **/\\n    modifier isOwnerOrBanner() {\\n        require(_msgSender() == _owner || _msgSender() == _banner, \\\"Caller is not owner or banner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Description: Used to initialize all variables when contract is launched. Only ever run at launch.\\n     **/\\n    function initialize() public {\\n        require(!_initialized);\\n        _owner = _msgSender();\\n    \\t_tax = 0xefe5bb8529b6bF478EF8c18cd115746F162C9C2d;\\n    \\t_banner = _msgSender();\\n    \\t_treasury = _msgSender();\\n        _tradeIsOpen = false;\\n        _buyIsOpen = true;\\n        _sellIsOpen = false;\\n    \\t_blockRestriction = 2;\\n        _timeRestriction = 60;\\n    \\t_taxAmount = 320;\\n    \\t_sellTaxFactor = 18000;\\n    \\t_transactRestriction = 250000000;\\n    \\t_transactRestrictionTime = 60;\\n    \\t_transactRestrictionTimeStart = block.timestamp;\\n\\n    \\t_DECIMALS = 9;\\n    \\t_DECIMALFACTOR = 10 ** _DECIMALS;\\n    \\t_SUPPLY = 100000000000;\\n    \\t_TotalSupply = _SUPPLY * _DECIMALFACTOR;\\n    \\t_TENTHOUSANDUNITS = 10000;\\n    \\t_NAME = \\\"DumpBuster\\\";\\n    \\t_SYMBOL = \\\"GTFO\\\";\\n\\n    \\t_balances[_msgSender()] = _TotalSupply;\\n\\n    \\t_initialized = true;\\n\\n        emit OwnerSet(address(0), _owner);\\n    }\\n\\n    /**\\n     * Description: Change owner\\n     * @param newOwner address of new owner\\n     */\\n    function changeOwner(address newOwner) public isOwner {\\n        emit OwnerSet(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * Description: Change banner\\n     * @param newBanner address of new banner\\n     */\\n    function changeBanner(address newBanner) public isOwner {\\n        _banner = newBanner;\\n    }\\n\\n    /**\\n     * Description: Open trading after launch\\n     */\\n    function openTrade() public isOwner {\\n        _tradeIsOpen = true;\\n    }\\n\\n    /**\\n     * Description: Close trading in emergency, even transacts other than buys/sells\\n     */\\n    function closeTrade() public isOwner {\\n        _tradeIsOpen = false;\\n    }\\n\\n    /**\\n     * Description: Open buying on exchanges\\n     */\\n    function openBuys() public isOwner {\\n        _buyIsOpen = true;\\n    }\\n\\n    /**\\n     * Description: Open selling on exchanges\\n     */\\n    function openSells() public isOwner {\\n        _sellIsOpen = true;\\n    }\\n\\n    /**\\n     * Description: Close buying on exchanges\\n     */\\n    function closeBuys() public isOwner {\\n        _buyIsOpen = false;\\n    }\\n\\n    /**\\n     * Description: Close selling on exchanges\\n     */\\n    function closeSells() public isOwner {\\n        _sellIsOpen = false;\\n    }\\n\\n    /**\\n     * Description: Add an exchange LP to the exchange list\\n     */\\n    function addExchange(address exchangeToAdd) public isOwner {\\n        _exchanges[exchangeToAdd] = true;\\n    }\\n\\n    /**\\n     * Description: Remove an exchange LP to the exchange list\\n     */\\n    function removeExchange(address exchangeToRemove) public isOwner {\\n        _exchanges[exchangeToRemove] = false;\\n    }\\n\\n\\n    /**\\n     * Description: Set the address of our own coin up so we can utilize our own DumpBuster Methods. This can only be called once.\\n     * @param proxyAddress - The address of the proxy.\\n     */\\n    function setProxy(address proxyAddress) public isOwner {\\n        require(_proxy==address(0));\\n        _proxy = proxyAddress;\\n    }\\n\\n\\n    /**\\n     * Description: Used to white list contract addresses that utilize our methods.\\n     * @param partnerAddress - The address to add to our whitelist.\\n     */\\n    function addPartner(address partnerAddress) public isOwner {\\n        _partners[partnerAddress] = true;\\n    }\\n\\n    /**\\n     * Description: Used to remove people from the whitelist. Will not delete their data in case they decide to come back.\\n     * @param partnerAddress - The address of the contract to remove from the whitelist.\\n     */\\n    function removePartner(address partnerAddress) public isOwner {\\n        _partners[partnerAddress] = false;\\n    }\\n\\n    /**\\n     * Description: Allows admin to change the time restriction between transactions during time restriction windows.\\n     * @param newTime - The time in seconds to block after a transaction\\n     */\\n    function updateTimeRestriction(uint256 newTime) public isOwner {\\n        _timeRestriction = newTime;\\n    }\\n\\n    /**\\n     * Description: Update how many blocks we make people wait to transact more than once during launch window.\\n     * @param newBlock - Number of blocks we will make people wait.\\n     */\\n    function updateBlockRestriction(uint256 newBlock) public isOwner {\\n        _blockRestriction = newBlock;\\n    }\\n\\n    /**\\n     * Description: Update the wallet address general tax is sent to and change the general tax percentage (10000 = 100%).\\n     * @param taxAddress - The wallet address.\\n     * @param taxAmount - The percentage to send in tax to the general tax wallet (10000 = 100%).\\n     */\\n    function updateTax(address taxAddress, uint256 taxAmount) public isOwner {\\n        _tax = taxAddress;\\n        _taxAmount = taxAmount;\\n    }\\n\\n    /**\\n     * Description: Change the amount of tokens people are able to trade during the time restricted periods.\\n     * @param transactRestriction - The amount of tokens people can transact during restricted periods.\\n     */\\n    function updateTransactRestriction(uint256 transactRestriction) public isOwner {\\n        _transactRestriction = transactRestriction;\\n    }\\n\\n    /**\\n     * Description: Changes the amount of time the transaction restrictions are in effect and turns on or off transaction restrictions.\\n     * @param transactRestrictionTime - Amount of time to restrict transactions (number of seconds)\\n     * @param transactRestrictionEnabled - Should we start restrictions again.\\n     */\\n    function updateTransactRestrictionTime(uint256 transactRestrictionTime, bool transactRestrictionEnabled) public isOwner {\\n        _transactRestrictionTime = transactRestrictionTime;\\n        _transactRestrictionEnabled = transactRestrictionEnabled;\\n        _transactRestrictionTimeStart = block.timestamp;\\n    }\\n\\n    /**\\n     * Description: Changes the treasury wallet address.\\n     * @param treasury - Wallet address of treasury wallet.\\n     */\\n    function updateTreasury(address treasury) public isOwner {\\n        _treasury = treasury;\\n    }\\n\\n    /**\\n     * Description: Return owner address.\\n     * @return address of owner.\\n     */\\n    function getOwner() external view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * Description: Return coin name.\\n     * @return name of coin.\\n     */\\n    function name() public view returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    /**\\n     * Description: Return ticker symbol.\\n     * @return Ticker Symbol\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _SYMBOL;\\n    }\\n\\n    /**\\n     * Description: Return how many digits there are to the right of the decimal.\\n     * @return Number of digits to the right of the decimal.\\n     */\\n    function decimals() public view returns (uint256) {\\n        return _DECIMALS;\\n    }\\n\\n    /**\\n     * Description: Return total number of tokens in circulation.\\n     * @return Number of tokens in circulation.\\n     */\\n    function totalSupply() public override view returns (uint256) {\\n        return _TotalSupply;\\n    }\\n\\n    /**\\n     * Description: Get the number of tokens in a given wallet.\\n     * @param account - Address of wallet to check.\\n     * @return Number of tokens in wallet.\\n     */\\n    function balanceOf(address account) public override view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * Description: Lets a wallet transfer funds to another wallet.\\n     * @param recipient - Address of wallet to send funds to.\\n     * @param amount - Number of tokens to send to recipient.\\n     * @return Was transaction successful\\n     */\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        return _transfer(_msgSender(), recipient, amount);\\n    }\\n\\n    /**\\n     * Description: Lets a third wallet transfer funds from one wallet to another wallet.\\n     * @param sender - Address of wallet to take funds from.\\n     * @param recipient - Address of wallet to send funds to.\\n     * @param amount - Number of tokens to send to recipient.\\n     * @return Was transaction successful\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        require(amount \\u003c= _allowances[sender][_msgSender()], \\\"Insufficient allowance\\\");\\n        bool tranactionWentThrough = _transfer(sender, recipient, amount);\\n\\n        if (tranactionWentThrough) {\\n            _allowances[sender][_msgSender()] = _allowances[sender][_msgSender()] - amount;\\n        }\\n\\n        return tranactionWentThrough;\\n    }\\n\\n    /**\\n     * Description: Allows a wallet to see how much another wallet has approved a third wallet to spend.\\n     * @param owner - The wallet address with the funds.\\n     * @param spender - The wallet approved to spend funds.\\n     * @return The amount approved for the owner / spender pair.\\n     */\\n    function allowance(address owner, address spender) public override view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * Description: Allows a wallet to approve a certain number of funds another wallet can transact with.\\n     * @param spender - The wallet approved to spend funds.\\n     * @param amount - The amount being approved to spend.\\n     * @return Whether the transaction was successful.\\n     */\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _allowances[_msgSender()][spender] = amount;\\n        emit Approval(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function fullScan(address coinId, address accountId, uint256 timeThreshold, uint256 tokenAmount, uint256 totalTokens, uint256 percentageThreshold) public returns (bool isIssue){\\n        collectTax();\\n\\n        if (validateTimeBasedTransaction(coinId, accountId, timeThreshold, false)) {\\n            return true;\\n        }\\n\\n        if (validateVolumeBasedTransaction(tokenAmount, totalTokens, percentageThreshold, false)) {\\n            return true;\\n        }\\n\\n        if (validateManipulation(false)) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * Takes coin id, account id, and time threshold. If the account has traded the coin id since the time threshold we return true.\\n     **/\\n    function validateTimeBasedTransaction(address coinId, address accountId, uint256 timeThreshold) public returns (bool isIssue) {\\n        return validateTimeBasedTransaction(coinId, accountId, timeThreshold, true);\\n    }\\n\\n    function validateTimeBasedTransaction(address coinId, address accountId, uint256 timeThreshold, bool collectThreshold) private returns (bool isIssue) {\\n        if (collectThreshold) {\\n            collectTax();\\n        }\\n\\n        if ((block.timestamp - botChecker[coinId][accountId]) \\u003c timeThreshold) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function validateVolumeBasedTransaction(uint256 tokenAmount, uint256 totalTokens, uint256 percentageThreshold, address accountId) public returns (bool isIssue) {\\n        return validateVolumeBasedTransaction(tokenAmount, totalTokens, percentageThreshold, true);\\n    }\\n\\n    function validateVolumeBasedTransaction(uint256 tokenAmount, uint256 totalTokens, uint256 percentageThreshold, bool collectThreshold) private returns (bool isIssue) {\\n        if (collectThreshold) {\\n            collectTax();\\n        }\\n\\n        if (((tokenAmount * _TENTHOUSANDUNITS) / _TotalSupply) \\u003e (percentageThreshold)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function validateManipulation() public returns (bool isIssue) {\\n        return validateManipulation(true);\\n    }\\n\\n    function validateManipulation(bool collectThreshold) private returns (bool isIssue) {\\n        if (collectThreshold) {\\n            collectTax();\\n        }\\n    }\\n\\n    function isOnBlackList(address coinId, address accountId) public view returns (bool isIssue) {\\n        return blacklist[coinId][accountId] == true;\\n    }\\n\\n    function addToBlacklist(address coinId, address accountId) public isOwnerOrBanner {\\n        blacklist[coinId][accountId] = true;\\n    }\\n\\n    function removeFromBlacklist(address coinId, address accountId) public isOwnerOrBanner {\\n        blacklist[coinId][accountId] = false;\\n    }\\n\\n    /**\\n    * Call this method to log a transacttion which will update our tables.\\n     **/\\n    function transact(address coinId, address accountId) public returns (bool isIssue) {\\n        botChecker[coinId][accountId] = block.timestamp;\\n    }\\n\\n    function collectTax() private view returns (bool hadCoin) {\\n        require (_partners[_msgSender()]);\\n    }\\n\\n    /**\\n     * Description Method to handle transfer of funds from one account to another. Also handles taxes.\\n     * @param sender - wallet of sender\\n     * @param recipient - wallet of recipient\\n     * @param amount - number of tokens to transfer\\n     * @return Was transaction successful\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\\n        require(_owner == sender || _tradeIsOpen, \\\"Trading not currently open\\\");\\n\\n    \\t// Initializes to 0 - will only happen once - require always succeeds the first time\\n        //if (_lastTransactBlocks[sender] == 0) {\\n    \\t    //_lastTransactBlocks[sender] = _launchedBlock + _blockRestriction + 1;\\n    \\t//}\\n    \\t//require(_owner == sender || _lastTransactBlocks[sender] - _launchedBlock \\u003e _blockRestriction, \\\"Cannot transact twice in first blocks\\\");\\n\\n    \\tif (!_exchanges[sender]) {\\n    \\t    require(_owner == sender || block.timestamp - botChecker[_proxy][sender] \\u003e _timeRestriction, \\\"Cannot transact twice in short period of time\\\");\\n    \\t}\\n\\n    \\tif (!_exchanges[recipient]) {\\n    \\t    require(_owner == sender || block.timestamp - botChecker[_proxy][recipient] \\u003e _timeRestriction, \\\"The wallet you are sending funds to cannot transact twice in short period of time\\\");\\n    \\t}\\n\\n    \\tif (_owner == sender || (_transactRestrictionEnabled \\u0026\\u0026 block.timestamp \\u003c= _transactRestrictionTimeStart + _transactRestrictionTime)) {\\n    \\t    require(_owner == sender || amount \\u003c _transactRestriction, \\\"Cannot exceed transaction size limit\\\");\\n    \\t}\\n\\n        require(amount \\u003c= _balances[sender], \\\"Insufficient balance\\\");\\n\\n        require(_owner == sender || !blacklist[_proxy][sender], \\\"Sender Blacklisted\\\");\\n        require(_owner == sender || !blacklist[_proxy][recipient], \\\"Recipient Blacklisted\\\");\\n\\n        if (_exchanges[sender]) {\\n            require(_owner == sender || _buyIsOpen, \\\"Buying not currently open\\\");\\n        }\\n\\n        if (_exchanges[recipient]) {\\n            require(_owner == sender || _sellIsOpen, \\\"Selling not currently open\\\");\\n        }\\n\\n    \\tuint256 amountForTax;\\n    \\tuint256 amountForTransfer;\\n\\n    \\tamountForTax = amount * _taxAmount / _TENTHOUSANDUNITS;\\n\\n    \\tif (_exchanges[recipient] \\u0026\\u0026 _sellTaxFactor != _TENTHOUSANDUNITS) {\\n            amountForTax = amountForTax * _sellTaxFactor / _TENTHOUSANDUNITS;\\n        }\\n\\n    \\tamountForTransfer = amount - amountForTax;\\n\\n    \\t_balances[sender] = _balances[sender] - amount;\\n    \\t_balances[_tax] = _balances[_tax] + amountForTax;\\n        _balances[recipient] = _balances[recipient] + amountForTransfer;\\n        emit Transfer(sender, recipient, amountForTransfer);\\n\\n    \\tif (!_exchanges[sender]) {\\n    \\t    botChecker[_proxy][sender] = block.timestamp;\\n    \\t}\\n\\n    \\tif (!_exchanges[recipient]) {\\n    \\t    botChecker[_proxy][recipient] = block.timestamp;\\n    \\t}\\n\\n        return true;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchangeToAdd\",\"type\":\"address\"}],\"name\":\"addExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partnerAddress\",\"type\":\"address\"}],\"name\":\"addPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountId\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBanner\",\"type\":\"address\"}],\"name\":\"changeBanner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeBuys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeSells\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentageThreshold\",\"type\":\"uint256\"}],\"name\":\"fullScan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isIssue\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountId\",\"type\":\"address\"}],\"name\":\"isOnBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isIssue\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openBuys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openSells\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchangeToRemove\",\"type\":\"address\"}],\"name\":\"removeExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountId\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partnerAddress\",\"type\":\"address\"}],\"name\":\"removePartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountId\",\"type\":\"address\"}],\"name\":\"transact\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isIssue\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBlock\",\"type\":\"uint256\"}],\"name\":\"updateBlockRestriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taxAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"taxAmount\",\"type\":\"uint256\"}],\"name\":\"updateTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"updateTimeRestriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactRestriction\",\"type\":\"uint256\"}],\"name\":\"updateTransactRestriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactRestrictionTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transactRestrictionEnabled\",\"type\":\"bool\"}],\"name\":\"updateTransactRestrictionTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validateManipulation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isIssue\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeThreshold\",\"type\":\"uint256\"}],\"name\":\"validateTimeBasedTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isIssue\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentageThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"accountId\",\"type\":\"address\"}],\"name\":\"validateVolumeBasedTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isIssue\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DumpBuster_v1","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1e1453e4911eeac449b13e2f3a35240dd5408cb9f4f996045706d26a401b8050"}]}