{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MetadataCoordinator.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"./mixin/MixinOwnable.sol\\\";\\nimport \\\"./BaseMetadataRegistry.sol\\\";\\nimport \\\"./interface/IMetadataRegistry.sol\\\";\\n\\ncontract MetadataCoordinator is Ownable {\\n  uint256 constant internal TYPE_MASK = uint256(uint128(~0)) << 128;\\n\\n  string public runnableOffchainScript;\\n\\n  mapping(uint256 => mapping(uint256 => MetadataRegistryInfo)) public tokenTypeToMetadataRegistries;\\n  mapping(uint256 => uint256) public tokenTypeToMetadataRegistryMaxIndex;\\n\\n\\tstruct MetadataRegistryInfo {\\n\\t\\taddress registry;\\n    string key;\\n    string prefURI;\\n\\t}\\n\\n  constructor(\\n  ) {\\n  }\\n\\n  event UpdatedMetadataRegistryInfo(\\n      uint256 indexed tokenType,\\n      uint256 indexed index,\\n      address indexed registry,\\n      bool isBased\\n  );\\n\\n  function setTokenTypeToMetadataRegistries(uint256 tokenType, uint256[] memory indexes, MetadataRegistryInfo[] memory infos) public onlyOwner {\\n    for (uint i = 0; i < indexes.length; ++i) {\\n      tokenTypeToMetadataRegistries[tokenType][indexes[i]] = infos[i];\\n    }\\n  }\\n\\n  function setTokenTypeToMetadataRegistryMaxIndex(uint256 tokenType, uint256 maxIndex) public onlyOwner {\\n    tokenTypeToMetadataRegistryMaxIndex[tokenType] = maxIndex;\\n  }\\n\\n  function setRunnableOffchainScript(string memory runnableOffchainScript_) public onlyOwner {\\n    runnableOffchainScript = runnableOffchainScript_;\\n  }\\n\\n  function _getNonFungibleBaseType(uint256 id) pure internal returns (uint256) {\\n    return id & TYPE_MASK;\\n  }\\n\\n  function tokenIdToDocuments(uint256 tokenId) public view returns (IMetadataRegistry.Document[] memory, MetadataRegistryInfo[] memory) {\\n    uint256 tokenType = _getNonFungibleBaseType(tokenId);\\n    uint256 maxIndex = tokenTypeToMetadataRegistryMaxIndex[tokenType];\\n    MetadataRegistryInfo[] memory infos = new MetadataRegistryInfo[](maxIndex);\\n    IMetadataRegistry.Document[] memory documents = new IMetadataRegistry.Document[](maxIndex);\\n    for (uint i = 0; i < maxIndex; ++i) {\\n      MetadataRegistryInfo memory info = tokenTypeToMetadataRegistries[tokenType][i];\\n      infos[i] = info;\\n      IMetadataRegistry registry = IMetadataRegistry(info.registry);\\n      IMetadataRegistry.Document memory doc = registry.tokenIdToDocument(tokenId, info.key);\\n      documents[i] = doc;\\n    }\\n    return (documents, infos);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/mixin/MixinOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"contracts/BaseMetadataRegistry.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./mixin/MixinOwnable.sol\\\";\\nimport \\\"./library/LibString.sol\\\";\\nimport \\\"./interface/IMetadataRegistry.sol\\\";\\n\\ncontract BaseMetadataRegistry is Ownable, IMetadataRegistry {\\n  uint256 constant internal TYPE_MASK = uint256(uint128(~0)) << 128;\\n\\n  mapping(uint256 => mapping(string => IMetadataRegistry.Document)) public tokenTypeToBaseURIMap;\\n  mapping(address => bool) public permissedWriters;\\n\\n  constructor(\\n  ) {\\n  }\\n\\n  event UpdatedDocument(\\n      uint256 indexed tokenId,\\n      address indexed writer,\\n      string indexed key,\\n      string text\\n  );\\n\\n  function updatePermissedWriterStatus(address _writer, bool status) public onlyOwner {\\n    permissedWriters[_writer] = status;\\n  }\\n  \\n  modifier onlyIfPermissed(address writer) {\\n    require(permissedWriters[writer] == true, \\\"writer can't write to registry\\\");\\n    _;\\n  }\\n\\n  function writeDocuments(uint256 tokenType, string[] memory keys, string[] memory texts, address[] memory writers) public onlyIfPermissed(msg.sender) {\\n    require(keys.length == texts.length, \\\"keys and txHashes size mismatch\\\");\\n    require(writers.length == texts.length, \\\"writers and texts size mismatch\\\");\\n    for (uint256 i = 0; i < keys.length; ++i) {\\n      string memory key = keys[i];\\n      string memory text = texts[i];\\n      address writer = writers[i];\\n      tokenTypeToBaseURIMap[tokenType][key] = IMetadataRegistry.Document(writer, text, block.timestamp);\\n      emit UpdatedDocument(tokenType, writer, key, text); \\n    }\\n  }\\n\\n  function _getNonFungibleBaseType(uint256 id) pure internal returns (uint256) {\\n    return id & TYPE_MASK;\\n  }\\n\\n  function tokenIdToDocument(uint256 tokenId, string memory key) override external view returns (IMetadataRegistry.Document memory) {\\n    IMetadataRegistry.Document memory doc = tokenTypeToBaseURIMap[_getNonFungibleBaseType(tokenId)][key];\\n    string memory text =  LibString.strConcat(\\n        doc.text,\\n        LibString.uint2hexstr(tokenId)\\n    );\\n    return IMetadataRegistry.Document(doc.writer, text, doc.creationTime); \\n  }\\n}\"\r\n    },\r\n    \"contracts/interface/IMetadataRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IMetadataRegistry {\\n  struct Document {\\n\\t\\taddress writer;\\n\\t\\tstring text;\\n\\t\\tuint256 creationTime;\\n\\t}\\n\\n  function tokenIdToDocument(uint256 tokenId, string memory key) external view returns (Document memory);\\n}\"\r\n    },\r\n    \"contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _txOrigin() internal view virtual returns (address) {\\n        return tx.origin;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"contracts/library/LibString.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nlibrary LibString {\\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\\n  function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory) {\\n      bytes memory _ba = bytes(_a);\\n      bytes memory _bb = bytes(_b);\\n      bytes memory _bc = bytes(_c);\\n      bytes memory _bd = bytes(_d);\\n      bytes memory _be = bytes(_e);\\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\\n      bytes memory babcde = bytes(abcde);\\n      uint k = 0;\\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\\n      for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\\n      for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\\n      for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\\n      for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\\n      return string(babcde);\\n    }\\n\\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, _d, \\\"\\\");\\n    }\\n\\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, \\\"\\\", \\\"\\\");\\n    }\\n\\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\\n        return strConcat(_a, _b, \\\"\\\", \\\"\\\", \\\"\\\");\\n    }\\n\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = byte(uint8(48 + _i % 10));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function uint2hexstr(uint i) internal pure returns (string memory) {\\n        if (i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j = j >> 4;\\n        }\\n        uint mask = 15;\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (i != 0){\\n            uint curr = (i & mask);\\n            bstr[k--] = curr > 9 ? byte(uint8(55 + curr)) : byte(uint8(48 + curr));\\n            i = i >> 4;\\n        }\\n        return string(bstr);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBased\",\"type\":\"bool\"}],\"name\":\"UpdatedMetadataRegistryInfo\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runnableOffchainScript\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"runnableOffchainScript_\",\"type\":\"string\"}],\"name\":\"setRunnableOffchainScript\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prefURI\",\"type\":\"string\"}],\"internalType\":\"struct MetadataCoordinator.MetadataRegistryInfo[]\",\"name\":\"infos\",\"type\":\"tuple[]\"}],\"name\":\"setTokenTypeToMetadataRegistries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxIndex\",\"type\":\"uint256\"}],\"name\":\"setTokenTypeToMetadataRegistryMaxIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIdToDocuments\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"writer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IMetadataRegistry.Document[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prefURI\",\"type\":\"string\"}],\"internalType\":\"struct MetadataCoordinator.MetadataRegistryInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenTypeToMetadataRegistries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prefURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenTypeToMetadataRegistryMaxIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MetadataCoordinator","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}