{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of src/DssProxyActionsCharter.sol\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity =0.6.12;\r\n\r\n////// src/DssProxyActionsCharter.sol\r\n\r\n/// DssProxyActions.sol\r\n\r\n// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.6.12; */\r\n\r\ninterface GemLike_8 {\r\n    function approve(address, uint256) external;\r\n    function transfer(address, uint256) external;\r\n    function transferFrom(address, address, uint256) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint256) external;\r\n}\r\n\r\ninterface CharterLike {\r\n    function getOrCreateProxy(address) external returns (address);\r\n    function join(address, address, uint256) external;\r\n    function exit(address, address, uint256) external;\r\n    function frob(bytes32, address, address, address, int256, int256) external;\r\n    function quit(bytes32 ilk, address dst) external;\r\n    function gate(bytes32) external view returns (uint256);\r\n    function Nib(bytes32) external view returns (uint256);\r\n    function nib(bytes32, address) external view returns (uint256);\r\n}\r\n\r\ninterface VatLike_17 {\r\n    function can(address, address) external view returns (uint256);\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function flux(bytes32, address, address, uint256) external;\r\n}\r\n\r\ninterface GemJoinLike_2 {\r\n    function dec() external returns (uint256);\r\n    function gem() external returns (GemLike_8);\r\n    function ilk() external returns (bytes32);\r\n}\r\n\r\ninterface DaiJoinLike {\r\n    function dai() external returns (GemLike_8);\r\n    function join(address, uint256) external payable;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface EndLike_3 {\r\n    function fix(bytes32) external view returns (uint256);\r\n    function cash(bytes32, uint256) external;\r\n    function free(bytes32) external;\r\n    function pack(uint256) external;\r\n    function skim(bytes32, address) external;\r\n}\r\n\r\ninterface JugLike {\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface HopeLike_2 {\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n}\r\n\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// WARNING: These functions meant to be used as a a library for a DSProxy. Some are unsafe if you call them directly.\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\ncontract Common {\r\n    uint256 constant WAD = 10 ** 18;\r\n    uint256 constant RAY = 10 ** 27;\r\n    address immutable vat;\r\n    address immutable charter;\r\n\r\n    constructor(address vat_, address charter_) public {\r\n        vat = vat_;\r\n        charter = charter_;\r\n    }\r\n\r\n    // Internal functions\r\n\r\n    function _mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"mul-overflow\");\r\n    }\r\n\r\n    // Public functions\r\n\r\n    function daiJoin_join(address daiJoin, uint256 wad) public {\r\n        GemLike_8 dai = DaiJoinLike(daiJoin).dai();\r\n        // Gets DAI from the user's wallet\r\n        dai.transferFrom(msg.sender, address(this), wad);\r\n        // Approves adapter to take the DAI amount\r\n        dai.approve(daiJoin, wad);\r\n        // Joins DAI into the vat\r\n        DaiJoinLike(daiJoin).join(address(this), wad);\r\n    }\r\n}\r\n\r\ncontract DssProxyActionsCharter is Common {\r\n\r\n    constructor(address vat_, address charter_) public Common(vat_, charter_) {}\r\n\r\n    // Internal functions\r\n\r\n    function _sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    function _toInt256(uint256 x) internal pure returns (int256 y) {\r\n        y = int256(x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\r\n    function _convertTo18(address gemJoin, uint256 amt) internal returns (uint256 wad) {\r\n        // For those collaterals that have less than 18 decimals precision we\r\n        //   need to do the conversion before passing to frob function\r\n        // Adapters will automatically handle the difference of precision\r\n        wad = _mul(\r\n            amt,\r\n            10 ** (18 - GemJoinLike_2(gemJoin).dec())\r\n        );\r\n    }\r\n\r\n    function _getDrawDart(\r\n        address jug,\r\n        bytes32 ilk,\r\n        uint256 wad\r\n    )  internal returns (int256 dart) {\r\n        // Updates stability fee rate\r\n        uint256 rate = JugLike(jug).drip(ilk);\r\n\r\n        // Gets DAI balance of the urn in the vat\r\n        uint256 dai = VatLike_17(vat).dai(address(this));\r\n\r\n        // If there was already enough DAI in the vat balance,\r\n        //    just exits it without adding more debt\r\n        uint256 rad = _mul(wad, RAY);\r\n        if (dai < rad) {\r\n            uint256 netToDraw = rad - dai; // dai < rad\r\n\r\n            uint256 nib = (CharterLike(charter).gate(ilk) == 1) ?\r\n                CharterLike(charter).nib(ilk, address(this)) :\r\n                CharterLike(charter).Nib(ilk);\r\n\r\n            // Calculates the needed dart so together with the existing dai in the vat is enough to exit wad amount of DAI tokens\r\n            dart = _toInt256(_mul(netToDraw, WAD) / _sub(_mul(rate, WAD), _mul(rate, nib))); // wad\r\n            uint256 dtab = _mul(uint256(dart), rate);\r\n            // This is needed due lack of precision, it might need to sum an extra dart wei\r\n            dart = _sub(dtab, _mul(dtab, nib) / WAD) < netToDraw ? dart + 1 : dart;\r\n        }\r\n    }\r\n\r\n    function _getWipeDart(\r\n        uint256 dai,\r\n        address urp,\r\n        bytes32 ilk\r\n    ) internal view returns (int256 dart) {\r\n        // Gets actual rate from the vat\r\n        (, uint256 rate,,,) = VatLike_17(vat).ilks(ilk);\r\n        // Gets actual art value of the urn\r\n        (, uint256 art) = VatLike_17(vat).urns(ilk, urp);\r\n\r\n        // Uses the whole dai balance in the vat to reduce the debt\r\n        dart = _toInt256(dai / rate);\r\n        // Checks the calculated dart is not higher than urn.art (total debt),\r\n        //    otherwise uses its value\r\n        dart = uint256(dart) <= art ? - dart : - _toInt256(art);\r\n    }\r\n\r\n    function _getWipeAllWad(\r\n        address urp,\r\n        bytes32 ilk\r\n    ) internal view returns (uint256 wad) {\r\n        // Gets actual rate from the vat\r\n        (, uint256 rate,,,) = VatLike_17(vat).ilks(ilk);\r\n        // Gets actual art value of the urn\r\n        (, uint256 art) = VatLike_17(vat).urns(ilk, urp);\r\n\r\n        // Gets DAI balance of the urn in the vat\r\n        uint256 dai = VatLike_17(vat).dai(address(this));\r\n\r\n        // If there was already enough DAI in the vat balance, no need to join more\r\n        uint256 debt = _mul(art, rate);\r\n        if (debt > dai) {\r\n            uint256 rad = _sub(debt, dai);\r\n            wad = rad / RAY;\r\n\r\n            // If the rad precision has some dust, it will need to request for 1 extra wad wei\r\n            wad = _mul(wad, RAY) < rad ? wad + 1 : wad;\r\n        }\r\n    }\r\n\r\n    function _frob(\r\n        bytes32 ilk,\r\n        int256 dink,\r\n        int256 dart\r\n    ) internal {\r\n        CharterLike(charter).frob(ilk, address(this), address(this), address(this), dink, dart);\r\n    }\r\n\r\n    function _ethJoin_join(address ethJoin) internal {\r\n        GemLike_8 gem = GemJoinLike_2(ethJoin).gem();\r\n        // Wraps ETH in WETH\r\n        gem.deposit{value: msg.value}();\r\n        // Approves adapter to take the WETH amount\r\n        gem.approve(charter, msg.value);\r\n        // Joins WETH collateral into the vat\r\n        CharterLike(charter).join(ethJoin, address(this), msg.value);\r\n    }\r\n\r\n    function _gemJoin_join(address gemJoin, uint256 amt) internal {\r\n        GemLike_8 gem = GemJoinLike_2(gemJoin).gem();\r\n        // Gets token from the user's wallet\r\n        gem.transferFrom(msg.sender, address(this), amt);\r\n        // Approves adapter to take the token amount\r\n        gem.approve(charter, amt);\r\n        // Joins token collateral into the vat\r\n        CharterLike(charter).join(gemJoin, address(this), amt);\r\n    }\r\n\r\n    // Public functions\r\n\r\n    function transfer(address gem, address dst, uint256 amt) external {\r\n        GemLike_8(gem).transfer(dst, amt);\r\n    }\r\n\r\n    function hope(\r\n        address obj,\r\n        address usr\r\n    ) external {\r\n        HopeLike_2(obj).hope(usr);\r\n    }\r\n\r\n    function nope(\r\n        address obj,\r\n        address usr\r\n    ) external {\r\n        HopeLike_2(obj).nope(usr);\r\n    }\r\n\r\n    function quit(\r\n        bytes32 ilk,\r\n        address dst\r\n    ) external {\r\n        CharterLike(charter).quit(ilk, dst);\r\n    }\r\n\r\n    function lockETH(address ethJoin) external payable {\r\n        // Receives ETH amount, converts it to WETH and joins it into the vat\r\n        _ethJoin_join(ethJoin);\r\n        // Locks WETH amount into the CDP\r\n        _frob(GemJoinLike_2(ethJoin).ilk(), _toInt256(msg.value), 0);\r\n    }\r\n\r\n    function lockGem(\r\n        address gemJoin,\r\n        uint256 amt\r\n    ) external {\r\n        // Takes token amount from user's wallet and joins into the vat\r\n        _gemJoin_join(gemJoin, amt);\r\n        // Locks token amount into the CDP\r\n        _frob(GemJoinLike_2(gemJoin).ilk(), _toInt256(_convertTo18(gemJoin, amt)), 0);\r\n    }\r\n\r\n    function freeETH(\r\n        address ethJoin,\r\n        uint256 wad\r\n    ) external {\r\n        // Unlocks WETH amount from the CDP\r\n        _frob(GemJoinLike_2(ethJoin).ilk(), -_toInt256(wad), 0);\r\n        // Exits WETH amount to proxy address as a token\r\n        CharterLike(charter).exit(ethJoin, address(this), wad);\r\n        // Converts WETH to ETH\r\n        GemJoinLike_2(ethJoin).gem().withdraw(wad);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wad);\r\n    }\r\n\r\n    function freeGem(\r\n        address gemJoin,\r\n        uint256 amt\r\n    ) external {\r\n        // Unlocks token amount from the CDP\r\n        _frob(GemJoinLike_2(gemJoin).ilk(), -_toInt256(_convertTo18(gemJoin, amt)), 0);\r\n        // Exits token amount to the user's wallet as a token\r\n        CharterLike(charter).exit(gemJoin, msg.sender, amt);\r\n    }\r\n\r\n    function exitETH(\r\n        address ethJoin,\r\n        uint256 wad\r\n    ) external {\r\n        // Exits WETH amount to proxy address as a token\r\n        CharterLike(charter).exit(ethJoin, address(this), wad);\r\n        // Converts WETH to ETH\r\n        GemJoinLike_2(ethJoin).gem().withdraw(wad);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wad);\r\n    }\r\n\r\n    function exitGem(\r\n        address gemJoin,\r\n        uint256 amt\r\n    ) external {\r\n        // Exits token amount to the user's wallet as a token\r\n        CharterLike(charter).exit(gemJoin, msg.sender, amt);\r\n    }\r\n\r\n    function draw(\r\n        bytes32 ilk,\r\n        address jug,\r\n        address daiJoin,\r\n        uint256 wad\r\n    ) external {\r\n        // Generates debt in the CDP\r\n        _frob(ilk, 0, _getDrawDart(jug, ilk, wad));\r\n        // Allows adapter to access to proxy's DAI balance in the vat\r\n        if (VatLike_17(vat).can(address(this), address(daiJoin)) == 0) {\r\n            VatLike_17(vat).hope(daiJoin);\r\n        }\r\n        // Exits DAI to the user's wallet as a token\r\n        DaiJoinLike(daiJoin).exit(msg.sender, wad);\r\n    }\r\n\r\n    function wipe(\r\n        bytes32 ilk,\r\n        address daiJoin,\r\n        uint256 wad\r\n    ) external {\r\n        // Joins DAI amount into the vat\r\n        daiJoin_join(daiJoin, wad);\r\n        // Allows charter to access to proxy's DAI balance in the vat\r\n        VatLike_17(vat).hope(charter);\r\n        // Paybacks debt to the CDP\r\n        _frob(\r\n            ilk,\r\n            0,\r\n            _getWipeDart(\r\n                VatLike_17(vat).dai(address(this)),\r\n                CharterLike(charter).getOrCreateProxy(address(this)),\r\n                ilk\r\n            )\r\n        );\r\n        // Denies charter to access to proxy's DAI balance in the vat after execution\r\n        VatLike_17(vat).nope(charter);\r\n    }\r\n\r\n    function wipeAll(\r\n        bytes32 ilk,\r\n        address daiJoin\r\n    ) external {\r\n        address urp = CharterLike(charter).getOrCreateProxy(address(this));\r\n        (, uint256 art) = VatLike_17(vat).urns(ilk, urp);\r\n\r\n        // Joins DAI amount into the vat\r\n        daiJoin_join(daiJoin, _getWipeAllWad(urp, ilk));\r\n        // Allows charter to access to proxy's DAI balance in the vat\r\n        VatLike_17(vat).hope(charter);\r\n        // Paybacks debt to the CDP\r\n        _frob(ilk, 0, -_toInt256(art));\r\n        // Denies charter to access to proxy's DAI balance in the vat after execution\r\n        VatLike_17(vat).nope(charter);\r\n    }\r\n\r\n    function lockETHAndDraw(\r\n        address jug,\r\n        address ethJoin,\r\n        address daiJoin,\r\n        uint256 wadD\r\n    ) external payable {\r\n        bytes32 ilk = GemJoinLike_2(ethJoin).ilk();\r\n\r\n        // Receives ETH amount, converts it to WETH and joins it into the vat\r\n        _ethJoin_join(ethJoin);\r\n        // Locks WETH amount into the CDP and generates debt\r\n        _frob(\r\n            ilk,\r\n            _toInt256(msg.value),\r\n            _getDrawDart(\r\n                jug,\r\n                ilk,\r\n                wadD\r\n            )\r\n        );\r\n        // Allows adapter to access to proxy's DAI balance in the vat\r\n        if (VatLike_17(vat).can(address(this), address(daiJoin)) == 0) {\r\n            VatLike_17(vat).hope(daiJoin);\r\n        }\r\n        // Exits DAI to the user's wallet as a token\r\n        DaiJoinLike(daiJoin).exit(msg.sender, wadD);\r\n    }\r\n\r\n    function lockGemAndDraw(\r\n        address jug,\r\n        address gemJoin,\r\n        address daiJoin,\r\n        uint256 amtC,\r\n        uint256 wadD\r\n    ) external {\r\n        bytes32 ilk = GemJoinLike_2(gemJoin).ilk();\r\n\r\n        // Takes token amount from user's wallet and joins into the vat\r\n        _gemJoin_join(gemJoin, amtC);\r\n        // Locks token amount into the CDP and generates debt\r\n        _frob(\r\n            ilk,\r\n            _toInt256(_convertTo18(gemJoin, amtC)),\r\n            _getDrawDart(\r\n                jug,\r\n                ilk,\r\n                wadD\r\n            )\r\n        );\r\n        // Allows adapter to access to proxy's DAI balance in the vat\r\n        if (VatLike_17(vat).can(address(this), address(daiJoin)) == 0) {\r\n            VatLike_17(vat).hope(daiJoin);\r\n        }\r\n        // Exits DAI to the user's wallet as a token\r\n        DaiJoinLike(daiJoin).exit(msg.sender, wadD);\r\n    }\r\n\r\n    function wipeAndFreeETH(\r\n        address ethJoin,\r\n        address daiJoin,\r\n        uint256 wadC,\r\n        uint256 wadD\r\n    ) external {\r\n        bytes32 ilk = GemJoinLike_2(ethJoin).ilk();\r\n\r\n        // Joins DAI amount into the vat\r\n        daiJoin_join(daiJoin, wadD);\r\n        // Allows charter to access to proxy's DAI balance in the vat\r\n        VatLike_17(vat).hope(charter);\r\n        // Paybacks debt to the CDP and unlocks WETH amount from it\r\n        _frob(\r\n            ilk,\r\n            -_toInt256(wadC),\r\n            _getWipeDart(\r\n                VatLike_17(vat).dai(address(this)),\r\n                CharterLike(charter).getOrCreateProxy(address(this)),\r\n                ilk\r\n            )\r\n        );\r\n        // Denies charter to access to proxy's DAI balance in the vat after execution\r\n        VatLike_17(vat).nope(charter);\r\n        // Exits WETH amount to proxy address as a token\r\n        CharterLike(charter).exit(ethJoin, address(this), wadC);\r\n        // Converts WETH to ETH\r\n        GemJoinLike_2(ethJoin).gem().withdraw(wadC);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wadC);\r\n    }\r\n\r\n    function wipeAllAndFreeETH(\r\n        address ethJoin,\r\n        address daiJoin,\r\n        uint256 wadC\r\n    ) external {\r\n        address urp = CharterLike(charter).getOrCreateProxy(address(this));\r\n        bytes32 ilk = GemJoinLike_2(ethJoin).ilk();\r\n        (, uint256 art) = VatLike_17(vat).urns(ilk, urp);\r\n\r\n        // Joins DAI amount into the vat\r\n        daiJoin_join(daiJoin, _getWipeAllWad(urp, ilk));\r\n        // Allows charter to access to proxy's DAI balance in the vat\r\n        VatLike_17(vat).hope(charter);\r\n        // Paybacks debt to the CDP and unlocks WETH amount from it\r\n        _frob(ilk, -_toInt256(wadC), -_toInt256(art));\r\n        // Denies charter to access to proxy's DAI balance in the vat after execution\r\n        VatLike_17(vat).nope(charter);\r\n        // Exits WETH amount to proxy address as a token\r\n        CharterLike(charter).exit(ethJoin, address(this), wadC);\r\n        // Converts WETH to ETH\r\n        GemJoinLike_2(ethJoin).gem().withdraw(wadC);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wadC);\r\n    }\r\n\r\n    function wipeAndFreeGem(\r\n        address gemJoin,\r\n        address daiJoin,\r\n        uint256 amtC,\r\n        uint256 wadD\r\n    ) external {\r\n        bytes32 ilk = GemJoinLike_2(gemJoin).ilk();\r\n\r\n        // Joins DAI amount into the vat\r\n        daiJoin_join(daiJoin, wadD);\r\n        // Allows charter to access to proxy's DAI balance in the vat\r\n        VatLike_17(vat).hope(charter);\r\n        // Paybacks debt to the CDP and unlocks token amount from it\r\n        _frob(\r\n            ilk,\r\n            -_toInt256(_convertTo18(gemJoin, amtC)),\r\n            _getWipeDart(\r\n                VatLike_17(vat).dai(address(this)),\r\n                CharterLike(charter).getOrCreateProxy(address(this)),\r\n                ilk\r\n            )\r\n        );\r\n        // Denies charter to access to proxy's DAI balance in the vat after execution\r\n        VatLike_17(vat).nope(charter);\r\n        // Exits token amount to the user's wallet as a token\r\n        CharterLike(charter).exit(gemJoin, msg.sender, amtC);\r\n    }\r\n\r\n    function wipeAllAndFreeGem(\r\n        address gemJoin,\r\n        address daiJoin,\r\n        uint256 amtC\r\n    ) external {\r\n        address urp = CharterLike(charter).getOrCreateProxy(address(this));\r\n        bytes32 ilk = GemJoinLike_2(gemJoin).ilk();\r\n        (, uint256 art) = VatLike_17(vat).urns(ilk, urp);\r\n\r\n        // Joins DAI amount into the vat\r\n        daiJoin_join(daiJoin, _getWipeAllWad(urp, ilk));\r\n        // Allows charter to access to proxy's DAI balance in the vat\r\n        VatLike_17(vat).hope(charter);\r\n        // Paybacks debt to the CDP and unlocks token amount from it\r\n        _frob(ilk, -_toInt256(_convertTo18(gemJoin, amtC)), -_toInt256(art));\r\n        // Denies charter to access to proxy's DAI balance in the vat after execution\r\n        VatLike_17(vat).nope(charter);\r\n        // Exits token amount to the user's wallet as a token\r\n        CharterLike(charter).exit(gemJoin, msg.sender, amtC);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vat_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charter_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"daiJoin_join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"jug\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"exitETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"exitGem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"freeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"freeGem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"obj\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"hope\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"}],\"name\":\"lockETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jug\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"lockETHAndDraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"lockGem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jug\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amtC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"lockGemAndDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"obj\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"nope\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"quit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"wipe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"}],\"name\":\"wipeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wadC\",\"type\":\"uint256\"}],\"name\":\"wipeAllAndFreeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amtC\",\"type\":\"uint256\"}],\"name\":\"wipeAllAndFreeGem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wadC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"wipeAndFreeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amtC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"wipeAndFreeGem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DssProxyActionsCharter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492b0000000000000000000000007a80d1b7f09d2c60720e909cb98b3f1cb18832bf","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://100118b8916eaa0ac9cfb1b09520e521152247175eda3a17d14070a741aa8c51"}]}