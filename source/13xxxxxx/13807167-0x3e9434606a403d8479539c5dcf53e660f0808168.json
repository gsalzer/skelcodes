{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/EditionsMetadataHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * â–‘â–ˆâ–„â–ˆâ–‘â–„â–€â–„â–’â–ˆâ–€â–’â–„â–€â–„â–‘â–‘â–‘â–’â–‘â–‘â–‘â–’â–ˆâ–ˆâ–€â–‘â–ˆâ–€â–„â–‘â–ˆâ–‘â–€â–ˆâ–€â–‘â–ˆâ–‘â–„â–€â–„â–‘â–ˆâ–„â–‘â–ˆâ–‘â–„â–€â–€â–‘â–‘â–‘â–ˆâ–„â–‘â–ˆâ–’â–ˆâ–€â–‘â–€â–ˆâ–€\\r\\n * â–’â–ˆâ–’â–ˆâ–‘â–€â–„â–€â–‘â–ˆâ–€â–‘â–ˆâ–€â–ˆâ–’â–‘â–‘â–€â–€â–’â–‘â–‘â–ˆâ–„â–„â–’â–ˆâ–„â–€â–‘â–ˆâ–‘â–’â–ˆâ–’â–‘â–ˆâ–‘â–€â–„â–€â–‘â–ˆâ–’â–€â–ˆâ–’â–„â–ˆâ–ˆâ–’â–‘â–‘â–ˆâ–’â–€â–ˆâ–‘â–ˆâ–€â–‘â–’â–ˆâ–’\\r\\n * \\r\\n * Made with ðŸ§¡ by Kreation.tech\\r\\n */\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n\\r\\nimport {MetadataHelper} from \\\"./MetadataHelper.sol\\\";\\r\\n\\r\\n/**\\r\\n * Shared NFT logic for rendering metadata associated with editions\\r\\n */\\r\\ncontract EditionsMetadataHelper is MetadataHelper {\\r\\n\\r\\n    /**\\r\\n     * Generates edition metadata from storage information as base64-json blob\\r\\n     * Combines the media data and metadata\\r\\n     * \\r\\n     * @param name Name of NFT in metadata\\r\\n     * @param description Description of NFT in metadata\\r\\n     * @param contentUrl URL of content to render\\r\\n     * @param thumbnailUrl optional URL of a thumbnail to render, for animated content only\\r\\n     * @param tokenOfEdition unique identifier of a token edition\\r\\n     * @param size total count of editions\\r\\n     */\\r\\n    function createTokenURI(string memory name, string memory description, string memory contentUrl, string memory thumbnailUrl, uint256 tokenOfEdition, uint256 size) external pure returns (string memory) {\\r\\n        string memory _tokenMediaData = tokenMediaData(contentUrl, thumbnailUrl, tokenOfEdition);\\r\\n        bytes memory json = createMetadata(name, description, _tokenMediaData, tokenOfEdition, size);\\r\\n        return encodeMetadata(json);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * Function to create the metadata json string for the nft edition\\r\\n     * \\r\\n     * @param name Name of NFT in metadata\\r\\n     * @param description Description of NFT in metadata\\r\\n     * @param mediaData Data for media to include in json object\\r\\n     * @param tokenOfEdition Token ID for specific token\\r\\n     * @param size Size of entire edition to show\\r\\n    */\\r\\n    function createMetadata(string memory name, string memory description, string memory mediaData, uint256 tokenOfEdition, uint256 size) public pure returns (bytes memory) {\\r\\n        bytes memory sizeText;\\r\\n        if (size > 0) {\\r\\n            sizeText = abi.encodePacked(\\\"/\\\", numberToString(size));\\r\\n        }\\r\\n        return abi.encodePacked('{\\\"name\\\":\\\"', name, \\\" \\\", numberToString(tokenOfEdition), sizeText, '\\\",\\\"description\\\":\\\"', description, '\\\",\\\"',\\r\\n                mediaData, 'properties\\\":{\\\"number\\\":', numberToString(tokenOfEdition), ',\\\"name\\\":\\\"', name, '\\\"}}');\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * Generates edition metadata from storage information as base64-json blob\\r\\n     * Combines the media data and metadata\\r\\n     * \\r\\n     * @param contentUrl URL of image to render for edition\\r\\n     * @param thumbnailUrl index of the content type to render for edition\\r\\n     * @param tokenOfEdition token identifier\\r\\n     */\\r\\n    function tokenMediaData(string memory contentUrl, string memory thumbnailUrl, uint256 tokenOfEdition) public pure returns (string memory) {\\r\\n        if (bytes(thumbnailUrl).length == 0) {\\r\\n            return string(\\r\\n                abi.encodePacked(\\r\\n                    'image\\\":\\\"', contentUrl, \\\"?id=\\\", numberToString(tokenOfEdition),'\\\",\\\"'));\\r\\n        } else {\\r\\n            return string(\\r\\n                abi.encodePacked(\\r\\n                    'image\\\":\\\"', thumbnailUrl, \\\"?id=\\\", numberToString(tokenOfEdition),'\\\",\\\"animation_url\\\":\\\"', contentUrl, \\\"?id=\\\", numberToString(tokenOfEdition),'\\\",\\\"'));\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/MetadataHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * â–‘â–ˆâ–„â–ˆâ–‘â–„â–€â–„â–’â–ˆâ–€â–’â–„â–€â–„â–‘â–‘â–‘â–’â–‘â–‘â–‘â–’â–ˆâ–ˆâ–€â–‘â–ˆâ–€â–„â–‘â–ˆâ–‘â–€â–ˆâ–€â–‘â–ˆâ–‘â–„â–€â–„â–‘â–ˆâ–„â–‘â–ˆâ–‘â–„â–€â–€â–‘â–‘â–‘â–ˆâ–„â–‘â–ˆâ–’â–ˆâ–€â–‘â–€â–ˆâ–€\\r\\n * â–’â–ˆâ–’â–ˆâ–‘â–€â–„â–€â–‘â–ˆâ–€â–‘â–ˆâ–€â–ˆâ–’â–‘â–‘â–€â–€â–’â–‘â–‘â–ˆâ–„â–„â–’â–ˆâ–„â–€â–‘â–ˆâ–‘â–’â–ˆâ–’â–‘â–ˆâ–‘â–€â–„â–€â–‘â–ˆâ–’â–€â–ˆâ–’â–„â–ˆâ–ˆâ–’â–‘â–‘â–ˆâ–’â–€â–ˆâ–‘â–ˆâ–€â–‘â–’â–ˆâ–’\\r\\n * \\r\\n * Made with ðŸ§¡ by Kreation.tech\\r\\n */\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\r\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\r\\n\\r\\n/**\\r\\n * Shared utility functions for rendering on-chain metadata\\r\\n */\\r\\ncontract MetadataHelper {\\r\\n    /**\\r\\n     * @param unencoded bytes to base64-encode\\r\\n     */\\r\\n    function base64Encode(bytes memory unencoded) public pure returns (string memory) {\\r\\n        return Base64.encode(unencoded);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Encodes the argument json bytes into base64-data uri format\\r\\n     * \\r\\n     * @param json raw json to base64 and turn into a data-uri\\r\\n     */\\r\\n    function encodeMetadata(bytes memory json) public pure returns (string memory) {\\r\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", base64Encode(json)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Proxy to openzeppelin's toString function\\r\\n     *\\r\\n     * @param value number to return as a string\\r\\n     */\\r\\n    function numberToString(uint256 value) public pure returns (string memory) {\\r\\n        return StringsUpgradeable.toString(value);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"unencoded\",\"type\":\"bytes\"}],\"name\":\"base64Encode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mediaData\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"createMetadata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"thumbnailUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"createTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"encodeMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"numberToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contentUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"thumbnailUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"}],\"name\":\"tokenMediaData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"EditionsMetadataHelper","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}