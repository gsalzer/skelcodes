{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.0;\r\n\r\n\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.3.0/Strings\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: protosvglib.sol\r\n\r\n// General format for bytes array to Svg shape:\r\n// [0] : id => i1, i2, i3.. unset if '0'.\r\n// [1] : class => c1, c2, c3..\r\n// [2] : if 0, no ending tag '/>', just '>'. Assumes that you close the tag.\r\n// Specifics :\r\n// - styleColor : [3], [4], [5], [6] : RGBA\r\n// - ellipse: \r\n//   [3] : cx \r\n//   [4] : cy Where cx,cy defines the center.\r\n//   [5] : rx = X radius\r\n//   [6] : ry = Y radius\r\n// - triangle:\r\n//   [3],[4] x,y 1st point.\r\n//   [5],[6] x,y 2nd point.\r\n//   [7],[8] x,y 3rd point.\r\n\r\n\r\ncontract ProtoSvgLib {\r\n    using Strings for uint256;\r\n    using Strings for uint8;\r\n    bytes constant etherLogo_p0 = hex\"fafe01404e4000006a\";\r\n    bytes constant etherLogo_p1 = hex\"fbfe01404e4000806a\";\r\n    bytes constant etherLogo_p2 = hex\"fcfe01404e4090006a\";\r\n    bytes constant etherLogo_p3 = hex\"fdfe01404e4090806a\";\r\n    bytes constant etherLogo_p4 = hex\"feff0140d0409c0076\";\r\n    bytes constant etherLogo_p5 = hex\"ffff0140d0409c8076\";\r\n\r\n    function startSvg(uint _x, uint _y, uint _length, uint _width) external view returns (bytes memory) {\r\n        return abi.encodePacked(\r\n            \"<svg viewBox='\",\r\n            _x.toString(), \" \",\r\n            _y.toString(), \" \",\r\n            _length.toString(), \" \",\r\n            _width.toString(), \"' xmlns='http://www.w3.org/2000/svg'>\");\r\n    }\r\n\r\n    function endSvg() external view returns (bytes memory) {\r\n        return(\"</svg>\");\r\n    }\r\n\r\n    function styleColor(bytes memory _element, bytes memory _b ) external view returns (bytes memory) {\r\n        return abi.encodePacked(\r\n                \"<style>\", \r\n                _element, \"{ fill: rgba(\",\r\n                 byte2uint8(_b, 0).toString(), \",\",\r\n                 byte2uint8(_b, 1).toString(), \",\",\r\n                 byte2uint8(_b, 2).toString(), \",\",\r\n                 byte2uint8(_b, 3).toString(), \");\",\r\n                \"}\",\r\n                \"</style>\"\r\n        );\r\n    }\r\n\r\n    function ellipse(bytes memory _b) external view returns (bytes memory) {\r\n        return abi.encodePacked(\r\n            \"<ellipse \", setIdClass(_b),\r\n            \" cx='\", byte2uint8(_b, 3).toString(),\r\n            \"' cy='\", byte2uint8(_b, 4).toString(),\r\n            \"' rx='\", byte2uint8(_b, 5).toString(),\r\n            \"' ry='\", byte2uint8(_b, 6).toString(),\r\n            \"'\", endingtag(_b)\r\n        );  \r\n    }\r\n\r\n    function path(bytes memory _b, string memory _path) external view returns (bytes memory) {\r\n        return abi.encodePacked(\r\n            \"<path \", setIdClass(_b),\r\n            \"d='\", _path, \"'\", endingtag(_b)\r\n        );\r\n    }\r\n    // Bonus etherLogo\r\n    function renderEtherLogo() external view returns(bytes memory) {\r\n        return abi.encodePacked(\r\n            this.triangle(etherLogo_p0),\r\n            this.triangle(etherLogo_p1),\r\n            this.triangle(etherLogo_p2),\r\n            this.triangle(etherLogo_p3),\r\n            this.triangle(etherLogo_p4),\r\n            this.triangle(etherLogo_p5)\r\n        );\r\n    }\r\n\r\n    function triangle(bytes memory _b) external view returns (bytes memory) {\r\n        return abi.encodePacked(\r\n            \"<polygon \", setIdClass(_b),\r\n            \" points='\",\r\n            byte2uint8(_b, 3).toString(), \" \",\r\n            byte2uint8(_b, 4).toString(), \" \",\r\n            byte2uint8(_b, 5).toString(), \" \",\r\n            byte2uint8(_b, 6).toString(), \" \",\r\n            byte2uint8(_b, 7).toString(), \" \",\r\n            byte2uint8(_b, 8).toString(),\r\n            \"'\", endingtag(_b)\r\n        );\r\n    }\r\n\r\n// ------ tools -----------\r\n\r\n    // @dev define id and class in css format \"id='in' class='cn'\" \r\n    // where 0 <= n  >= 255  \r\n    function setIdClass(bytes memory _b) pure internal  returns (bytes memory) {\r\n        bytes memory idText;\r\n        if (byte2uint8(_b, 0) > 0){\r\n            //idText = string(abi.encodePacked(\r\n            idText = abi.encodePacked(\r\n                \"id='i\",\r\n                byte2uint8(_b, 0).toString(),\r\n                \"'\"\r\n            );\r\n        }\r\n        return abi.encodePacked(\r\n            idText,\r\n            \"class='c\", byte2uint8(_b, 1).toString(),\r\n            \"'\"\r\n        );\r\n    }\r\n    \r\n    // Returns the ending tag as defined in_b[3]\r\n    function endingtag(bytes memory _b) pure internal returns (string memory) {\r\n        if (byte2uint8(_b,2) > 0) {\r\n            return \" />\";\r\n        }\r\n        return \">\";\r\n    }\r\n\r\n\r\n    // Returns one uint8 in a byte array\r\n    function byte2uint8(bytes memory _data, uint256 _offset) pure internal returns (uint8) { \r\n        require (_data.length > _offset, \"Out of range\");\r\n        return uint8(_data[_offset]);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_b\",\"type\":\"bytes\"}],\"name\":\"ellipse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSvg\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_b\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"}],\"name\":\"path\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderEtherLogo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_width\",\"type\":\"uint256\"}],\"name\":\"startSvg\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_element\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_b\",\"type\":\"bytes\"}],\"name\":\"styleColor\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_b\",\"type\":\"bytes\"}],\"name\":\"triangle\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ProtoSvgLib","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://767180cad97ee9692e17ff4df4a2d37bfac70fe5262b43916f519902dfd7c063"}]}