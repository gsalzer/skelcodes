{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LooksRareExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// OpenZeppelin contracts\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// LooksRare interfaces\\nimport {ICurrencyManager} from \\\"./interfaces/ICurrencyManager.sol\\\";\\nimport {IExecutionManager} from \\\"./interfaces/IExecutionManager.sol\\\";\\nimport {IExecutionStrategy} from \\\"./interfaces/IExecutionStrategy.sol\\\";\\nimport {IRoyaltyFeeManager} from \\\"./interfaces/IRoyaltyFeeManager.sol\\\";\\nimport {ILooksRareExchange} from \\\"./interfaces/ILooksRareExchange.sol\\\";\\nimport {ITransferManagerNFT} from \\\"./interfaces/ITransferManagerNFT.sol\\\";\\nimport {ITransferSelectorNFT} from \\\"./interfaces/ITransferSelectorNFT.sol\\\";\\nimport {IWETH} from \\\"./interfaces/IWETH.sol\\\";\\n\\n// LooksRare libraries\\nimport {OrderTypes} from \\\"./libraries/OrderTypes.sol\\\";\\nimport {SignatureChecker} from \\\"./libraries/SignatureChecker.sol\\\";\\n\\n/**\\n * @title LooksRareExchange\\n * @notice It is the core contract of the LooksRare exchange.\\nLOOKSRARELOOKSRARELOOKSRLOOKSRARELOOKSRARELOOKSRARELOOKSRARELOOKSRLOOKSRARELOOKSRARELOOKSR\\nLOOKSRARELOOKSRARELOOKSRAR'''''''''''''''''''''''''''''''''''OOKSRLOOKSRARELOOKSRARELOOKSR\\nLOOKSRARELOOKSRARELOOKS:.                                        .;OOKSRARELOOKSRARELOOKSR\\nLOOKSRARELOOKSRARELOO,.                                            .,KSRARELOOKSRARELOOKSR\\nLOOKSRARELOOKSRAREL'                ..',;:LOOKS::;,'..                'RARELOOKSRARELOOKSR\\nLOOKSRARELOOKSRAR.              .,:LOOKSRARELOOKSRARELO:,.              .RELOOKSRARELOOKSR\\nLOOKSRARELOOKS:.             .;RARELOOKSRARELOOKSRARELOOKSl;.             .:OOKSRARELOOKSR\\nLOOKSRARELOO;.            .'OKSRARELOOKSRARELOOKSRARELOOKSRARE'.            .;KSRARELOOKSR\\nLOOKSRAREL,.            .,LOOKSRARELOOK:;;:\\\"\\\"\\\"\\\":;;;lELOOKSRARELO,.            .,RARELOOKSR\\nLOOKSRAR.             .;okLOOKSRAREx:.              .;OOKSRARELOOK;.             .RELOOKSR\\nLOOKS:.             .:dOOOLOOKSRARE'      .''''..     .OKSRARELOOKSR:.             .LOOKSR\\nLOx;.             .cKSRARELOOKSRAR'     'LOOKSRAR'     .KSRARELOOKSRARc..            .OKSR\\nL;.             .cxOKSRARELOOKSRAR.    .LOOKS.RARE'     ;kRARELOOKSRARExc.             .;R\\nLO'             .;oOKSRARELOOKSRAl.    .LOOKS.RARE.     :kRARELOOKSRAREo;.             'SR\\nLOOK;.            .,KSRARELOOKSRAx,     .;LOOKSR;.     .oSRARELOOKSRAo,.            .;OKSR\\nLOOKSk:.            .'RARELOOKSRARd;.      ....       'oOOOOOOOOOOxc'.            .:LOOKSR\\nLOOKSRARc.             .:dLOOKSRAREko;.            .,lxOOOOOOOOOd:.             .ARELOOKSR\\nLOOKSRARELo'             .;oOKSRARELOOxoc;,....,;:ldkOOOOOOOOkd;.             'SRARELOOKSR\\nLOOKSRARELOOd,.            .,lSRARELOOKSRARELOOKSRARELOOKSRkl,.            .,OKSRARELOOKSR\\nLOOKSRARELOOKSx;.            ..;oxELOOKSRARELOOKSRARELOkxl:..            .:LOOKSRARELOOKSR\\nLOOKSRARELOOKSRARc.              .':cOKSRARELOOKSRALOc;'.              .ARELOOKSRARELOOKSR\\nLOOKSRARELOOKSRARELl'                 ...'',,,,''...                 'SRARELOOKSRARELOOKSR\\nLOOKSRARELOOKSRARELOOo,.                                          .,OKSRARELOOKSRARELOOKSR\\nLOOKSRARELOOKSRARELOOKSx;.                                      .;xOOKSRARELOOKSRARELOOKSR\\nLOOKSRARELOOKSRARELOOKSRLO:.                                  .:SRLOOKSRARELOOKSRARELOOKSR\\nLOOKSRARELOOKSRARELOOKSRLOOKl.                              .lOKSRLOOKSRARELOOKSRARELOOKSR\\nLOOKSRARELOOKSRARELOOKSRLOOKSRo'.                        .'oLOOKSRLOOKSRARELOOKSRARELOOKSR\\nLOOKSRARELOOKSRARELOOKSRLOOKSRARd;.                    .;xRELOOKSRLOOKSRARELOOKSRARELOOKSR\\nLOOKSRARELOOKSRARELOOKSRLOOKSRARELO:.                .:kRARELOOKSRLOOKSRARELOOKSRARELOOKSR\\nLOOKSRARELOOKSRARELOOKSRLOOKSRARELOOKl.            .cOKSRARELOOKSRLOOKSRARELOOKSRARELOOKSR\\nLOOKSRARELOOKSRARELOOKSRLOOKSRARELOOKSRo'        'oLOOKSRARELOOKSRLOOKSRARELOOKSRARELOOKSR\\nLOOKSRARELOOKSRARELOOKSRLOOKSRARELOOKSRARE,.  .,dRELOOKSRARELOOKSRLOOKSRARELOOKSRARELOOKSR\\nLOOKSRARELOOKSRARELOOKSRLOOKSRARELOOKSRARELOOKSRARELOOKSRARELOOKSRLOOKSRARELOOKSRARELOOKSR\\n */\\ncontract LooksRareExchange is ILooksRareExchange, ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    using OrderTypes for OrderTypes.MakerOrder;\\n    using OrderTypes for OrderTypes.TakerOrder;\\n\\n    address public immutable WETH;\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n    address public protocolFeeRecipient;\\n\\n    ICurrencyManager public currencyManager;\\n    IExecutionManager public executionManager;\\n    IRoyaltyFeeManager public royaltyFeeManager;\\n    ITransferSelectorNFT public transferSelectorNFT;\\n\\n    mapping(address => uint256) public userMinOrderNonce;\\n    mapping(address => mapping(uint256 => bool)) private _isUserOrderNonceExecutedOrCancelled;\\n\\n    event CancelAllOrders(address indexed user, uint256 newMinNonce);\\n    event CancelMultipleOrders(address indexed user, uint256[] orderNonces);\\n    event NewCurrencyManager(address indexed currencyManager);\\n    event NewExecutionManager(address indexed executionManager);\\n    event NewProtocolFeeRecipient(address indexed protocolFeeRecipient);\\n    event NewRoyaltyFeeManager(address indexed royaltyFeeManager);\\n    event NewTransferSelectorNFT(address indexed transferSelectorNFT);\\n\\n    event RoyaltyPayment(\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        address indexed royaltyRecipient,\\n        address currency,\\n        uint256 amount\\n    );\\n\\n    event TakerAsk(\\n        bytes32 orderHash, // bid hash of the maker order\\n        uint256 orderNonce, // user order nonce\\n        address indexed taker, // sender address for the taker ask order\\n        address indexed maker, // maker address of the initial bid order\\n        address indexed strategy, // strategy that defines the execution\\n        address currency, // currency address\\n        address collection, // collection address\\n        uint256 tokenId, // tokenId transferred\\n        uint256 amount, // amount of tokens transferred\\n        uint256 price // final transacted price\\n    );\\n\\n    event TakerBid(\\n        bytes32 orderHash, // ask hash of the maker order\\n        uint256 orderNonce, // user order nonce\\n        address indexed taker, // sender address for the taker bid order\\n        address indexed maker, // maker address of the initial ask order\\n        address indexed strategy, // strategy that defines the execution\\n        address currency, // currency address\\n        address collection, // collection address\\n        uint256 tokenId, // tokenId transferred\\n        uint256 amount, // amount of tokens transferred\\n        uint256 price // final transacted price\\n    );\\n\\n    /**\\n     * @notice Constructor\\n     * @param _currencyManager currency manager address\\n     * @param _executionManager execution manager address\\n     * @param _royaltyFeeManager royalty fee manager address\\n     * @param _WETH wrapped ether address (for other chains, use wrapped native asset)\\n     * @param _protocolFeeRecipient protocol fee recipient\\n     */\\n    constructor(\\n        address _currencyManager,\\n        address _executionManager,\\n        address _royaltyFeeManager,\\n        address _WETH,\\n        address _protocolFeeRecipient\\n    ) {\\n        // Calculate the domain separator\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f, // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n                0xda9101ba92939daf4bb2e18cd5f942363b9297fbc3232c9dd964abb1fb70ed71, // keccak256(\\\"LooksRareExchange\\\")\\n                0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, // keccak256(bytes(\\\"1\\\")) for versionId = 1\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n\\n        currencyManager = ICurrencyManager(_currencyManager);\\n        executionManager = IExecutionManager(_executionManager);\\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\\n        WETH = _WETH;\\n        protocolFeeRecipient = _protocolFeeRecipient;\\n    }\\n\\n    /**\\n     * @notice Cancel all pending orders for a sender\\n     * @param minNonce minimum user nonce\\n     */\\n    function cancelAllOrdersForSender(uint256 minNonce) external {\\n        require(minNonce > userMinOrderNonce[msg.sender], \\\"Cancel: Order nonce lower than current\\\");\\n        require(minNonce < userMinOrderNonce[msg.sender] + 500000, \\\"Cancel: Cannot cancel more orders\\\");\\n        userMinOrderNonce[msg.sender] = minNonce;\\n\\n        emit CancelAllOrders(msg.sender, minNonce);\\n    }\\n\\n    /**\\n     * @notice Cancel maker orders\\n     * @param orderNonces array of order nonces\\n     */\\n    function cancelMultipleMakerOrders(uint256[] calldata orderNonces) external {\\n        require(orderNonces.length > 0, \\\"Cancel: Cannot be empty\\\");\\n\\n        for (uint256 i = 0; i < orderNonces.length; i++) {\\n            require(orderNonces[i] >= userMinOrderNonce[msg.sender], \\\"Cancel: Order nonce lower than current\\\");\\n            _isUserOrderNonceExecutedOrCancelled[msg.sender][orderNonces[i]] = true;\\n        }\\n\\n        emit CancelMultipleOrders(msg.sender, orderNonces);\\n    }\\n\\n    /**\\n     * @notice Match ask with a taker bid order using ETH\\n     * @param takerBid taker bid order\\n     * @param makerAsk maker ask order\\n     */\\n    function matchAskWithTakerBidUsingETHAndWETH(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    ) external payable override nonReentrant {\\n        require((makerAsk.isOrderAsk) && (!takerBid.isOrderAsk), \\\"Order: Wrong sides\\\");\\n        require(makerAsk.currency == WETH, \\\"Order: Currency must be WETH\\\");\\n        require(msg.sender == takerBid.taker, \\\"Order: Taker must be the sender\\\");\\n\\n        // If not enough ETH to cover the price, use WETH\\n        if (takerBid.price > msg.value) {\\n            IERC20(WETH).safeTransferFrom(msg.sender, address(this), (takerBid.price - msg.value));\\n        } else {\\n            require(takerBid.price == msg.value, \\\"Order: Msg.value too high\\\");\\n        }\\n\\n        // Wrap ETH sent to this contract\\n        IWETH(WETH).deposit{value: msg.value}();\\n\\n        // Check the maker ask order\\n        bytes32 askHash = makerAsk.hash();\\n        _validateOrder(makerAsk, askHash);\\n\\n        // Retrieve execution parameters\\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = IExecutionStrategy(makerAsk.strategy)\\n            .canExecuteTakerBid(takerBid, makerAsk);\\n\\n        require(isExecutionValid, \\\"Strategy: Execution invalid\\\");\\n\\n        // Update maker ask order status to true (prevents replay)\\n        _isUserOrderNonceExecutedOrCancelled[makerAsk.signer][makerAsk.nonce] = true;\\n\\n        // Execution part 1/2\\n        _transferFeesAndFundsWithWETH(\\n            makerAsk.strategy,\\n            makerAsk.collection,\\n            tokenId,\\n            makerAsk.signer,\\n            takerBid.price,\\n            makerAsk.minPercentageToAsk\\n        );\\n\\n        // Execution part 2/2\\n        _transferNonFungibleToken(makerAsk.collection, makerAsk.signer, takerBid.taker, tokenId, amount);\\n\\n        emit TakerBid(\\n            askHash,\\n            makerAsk.nonce,\\n            takerBid.taker,\\n            makerAsk.signer,\\n            makerAsk.strategy,\\n            makerAsk.currency,\\n            makerAsk.collection,\\n            tokenId,\\n            amount,\\n            takerBid.price\\n        );\\n    }\\n\\n    /**\\n     * @notice Match a takerBid with a matchAsk\\n     * @param takerBid taker bid order\\n     * @param makerAsk maker ask order\\n     */\\n    function matchAskWithTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        require((makerAsk.isOrderAsk) && (!takerBid.isOrderAsk), \\\"Order: Wrong sides\\\");\\n        require(msg.sender == takerBid.taker, \\\"Order: Taker must be the sender\\\");\\n\\n        // Check the maker ask order\\n        bytes32 askHash = makerAsk.hash();\\n        _validateOrder(makerAsk, askHash);\\n\\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = IExecutionStrategy(makerAsk.strategy)\\n            .canExecuteTakerBid(takerBid, makerAsk);\\n\\n        require(isExecutionValid, \\\"Strategy: Execution invalid\\\");\\n\\n        // Update maker ask order status to true (prevents replay)\\n        _isUserOrderNonceExecutedOrCancelled[makerAsk.signer][makerAsk.nonce] = true;\\n\\n        // Execution part 1/2\\n        _transferFeesAndFunds(\\n            makerAsk.strategy,\\n            makerAsk.collection,\\n            tokenId,\\n            makerAsk.currency,\\n            msg.sender,\\n            makerAsk.signer,\\n            takerBid.price,\\n            makerAsk.minPercentageToAsk\\n        );\\n\\n        // Execution part 2/2\\n        _transferNonFungibleToken(makerAsk.collection, makerAsk.signer, takerBid.taker, tokenId, amount);\\n\\n        emit TakerBid(\\n            askHash,\\n            makerAsk.nonce,\\n            takerBid.taker,\\n            makerAsk.signer,\\n            makerAsk.strategy,\\n            makerAsk.currency,\\n            makerAsk.collection,\\n            tokenId,\\n            amount,\\n            takerBid.price\\n        );\\n    }\\n\\n    /**\\n     * @notice Match a takerAsk with a makerBid\\n     * @param takerAsk taker ask order\\n     * @param makerBid maker bid order\\n     */\\n    function matchBidWithTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        require((!makerBid.isOrderAsk) && (takerAsk.isOrderAsk), \\\"Order: Wrong sides\\\");\\n        require(msg.sender == takerAsk.taker, \\\"Order: Taker must be the sender\\\");\\n\\n        // Check the maker bid order\\n        bytes32 bidHash = makerBid.hash();\\n        _validateOrder(makerBid, bidHash);\\n\\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = IExecutionStrategy(makerBid.strategy)\\n            .canExecuteTakerAsk(takerAsk, makerBid);\\n\\n        require(isExecutionValid, \\\"Strategy: Execution invalid\\\");\\n\\n        // Update maker bid order status to true (prevents replay)\\n        _isUserOrderNonceExecutedOrCancelled[makerBid.signer][makerBid.nonce] = true;\\n\\n        // Execution part 1/2\\n        _transferNonFungibleToken(makerBid.collection, msg.sender, makerBid.signer, tokenId, amount);\\n\\n        // Execution part 2/2\\n        _transferFeesAndFunds(\\n            makerBid.strategy,\\n            makerBid.collection,\\n            tokenId,\\n            makerBid.currency,\\n            makerBid.signer,\\n            takerAsk.taker,\\n            takerAsk.price,\\n            takerAsk.minPercentageToAsk\\n        );\\n\\n        emit TakerAsk(\\n            bidHash,\\n            makerBid.nonce,\\n            takerAsk.taker,\\n            makerBid.signer,\\n            makerBid.strategy,\\n            makerBid.currency,\\n            makerBid.collection,\\n            tokenId,\\n            amount,\\n            takerAsk.price\\n        );\\n    }\\n\\n    /**\\n     * @notice Update currency manager\\n     * @param _currencyManager new currency manager address\\n     */\\n    function updateCurrencyManager(address _currencyManager) external onlyOwner {\\n        require(_currencyManager != address(0), \\\"Owner: Cannot be null address\\\");\\n        currencyManager = ICurrencyManager(_currencyManager);\\n        emit NewCurrencyManager(_currencyManager);\\n    }\\n\\n    /**\\n     * @notice Update execution manager\\n     * @param _executionManager new execution manager address\\n     */\\n    function updateExecutionManager(address _executionManager) external onlyOwner {\\n        require(_executionManager != address(0), \\\"Owner: Cannot be null address\\\");\\n        executionManager = IExecutionManager(_executionManager);\\n        emit NewExecutionManager(_executionManager);\\n    }\\n\\n    /**\\n     * @notice Update protocol fee and recipient\\n     * @param _protocolFeeRecipient new recipient for protocol fees\\n     */\\n    function updateProtocolFeeRecipient(address _protocolFeeRecipient) external onlyOwner {\\n        protocolFeeRecipient = _protocolFeeRecipient;\\n        emit NewProtocolFeeRecipient(_protocolFeeRecipient);\\n    }\\n\\n    /**\\n     * @notice Update royalty fee manager\\n     * @param _royaltyFeeManager new fee manager address\\n     */\\n    function updateRoyaltyFeeManager(address _royaltyFeeManager) external onlyOwner {\\n        require(_royaltyFeeManager != address(0), \\\"Owner: Cannot be null address\\\");\\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\\n        emit NewRoyaltyFeeManager(_royaltyFeeManager);\\n    }\\n\\n    /**\\n     * @notice Update transfer selector NFT\\n     * @param _transferSelectorNFT new transfer selector address\\n     */\\n    function updateTransferSelectorNFT(address _transferSelectorNFT) external onlyOwner {\\n        require(_transferSelectorNFT != address(0), \\\"Owner: Cannot be null address\\\");\\n        transferSelectorNFT = ITransferSelectorNFT(_transferSelectorNFT);\\n\\n        emit NewTransferSelectorNFT(_transferSelectorNFT);\\n    }\\n\\n    /**\\n     * @notice Check whether user order nonce is executed or cancelled\\n     * @param user address of user\\n     * @param orderNonce nonce of the order\\n     */\\n    function isUserOrderNonceExecutedOrCancelled(address user, uint256 orderNonce) external view returns (bool) {\\n        return _isUserOrderNonceExecutedOrCancelled[user][orderNonce];\\n    }\\n\\n    /**\\n     * @notice Transfer fees and funds to royalty recipient, protocol, and seller\\n     * @param strategy address of the execution strategy\\n     * @param collection non fungible token address for the transfer\\n     * @param tokenId tokenId\\n     * @param currency currency being used for the purchase (e.g., WETH/USDC)\\n     * @param from sender of the funds\\n     * @param to seller's recipient\\n     * @param amount amount being transferred (in currency)\\n     * @param minPercentageToAsk minimum percentage of the gross amount that goes to ask\\n     */\\n    function _transferFeesAndFunds(\\n        address strategy,\\n        address collection,\\n        uint256 tokenId,\\n        address currency,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 minPercentageToAsk\\n    ) internal {\\n        // Initialize the final amount that is transferred to seller\\n        uint256 finalSellerAmount = amount;\\n\\n        // 1. Protocol fee\\n        {\\n            uint256 protocolFeeAmount = _calculateProtocolFee(strategy, amount);\\n\\n            // Check if the protocol fee is different than 0 for this strategy\\n            if ((protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)) {\\n                IERC20(currency).safeTransferFrom(from, protocolFeeRecipient, protocolFeeAmount);\\n                finalSellerAmount -= protocolFeeAmount;\\n            }\\n        }\\n\\n        // 2. Royalty fee\\n        {\\n            (address royaltyFeeRecipient, uint256 royaltyFeeAmount) = royaltyFeeManager\\n                .calculateRoyaltyFeeAndGetRecipient(collection, tokenId, amount);\\n\\n            // Check if there is a royalty fee and that it is different to 0\\n            if ((royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)) {\\n                IERC20(currency).safeTransferFrom(from, royaltyFeeRecipient, royaltyFeeAmount);\\n                finalSellerAmount -= royaltyFeeAmount;\\n\\n                emit RoyaltyPayment(collection, tokenId, royaltyFeeRecipient, currency, royaltyFeeAmount);\\n            }\\n        }\\n\\n        require((finalSellerAmount * 10000) >= (minPercentageToAsk * amount), \\\"Fees: Higher than expected\\\");\\n\\n        // 3. Transfer final amount (post-fees) to seller\\n        {\\n            IERC20(currency).safeTransferFrom(from, to, finalSellerAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer fees and funds to royalty recipient, protocol, and seller\\n     * @param strategy address of the execution strategy\\n     * @param collection non fungible token address for the transfer\\n     * @param tokenId tokenId\\n     * @param to seller's recipient\\n     * @param amount amount being transferred (in currency)\\n     * @param minPercentageToAsk minimum percentage of the gross amount that goes to ask\\n     */\\n    function _transferFeesAndFundsWithWETH(\\n        address strategy,\\n        address collection,\\n        uint256 tokenId,\\n        address to,\\n        uint256 amount,\\n        uint256 minPercentageToAsk\\n    ) internal {\\n        // Initialize the final amount that is transferred to seller\\n        uint256 finalSellerAmount = amount;\\n\\n        // 1. Protocol fee\\n        {\\n            uint256 protocolFeeAmount = _calculateProtocolFee(strategy, amount);\\n\\n            // Check if the protocol fee is different than 0 for this strategy\\n            if ((protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)) {\\n                IERC20(WETH).safeTransfer(protocolFeeRecipient, protocolFeeAmount);\\n                finalSellerAmount -= protocolFeeAmount;\\n            }\\n        }\\n\\n        // 2. Royalty fee\\n        {\\n            (address royaltyFeeRecipient, uint256 royaltyFeeAmount) = royaltyFeeManager\\n                .calculateRoyaltyFeeAndGetRecipient(collection, tokenId, amount);\\n\\n            // Check if there is a royalty fee and that it is different to 0\\n            if ((royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)) {\\n                IERC20(WETH).safeTransfer(royaltyFeeRecipient, royaltyFeeAmount);\\n                finalSellerAmount -= royaltyFeeAmount;\\n\\n                emit RoyaltyPayment(collection, tokenId, royaltyFeeRecipient, address(WETH), royaltyFeeAmount);\\n            }\\n        }\\n\\n        require((finalSellerAmount * 10000) >= (minPercentageToAsk * amount), \\\"Fees: Higher than expected\\\");\\n\\n        // 3. Transfer final amount (post-fees) to seller\\n        {\\n            IERC20(WETH).safeTransfer(to, finalSellerAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer NFT\\n     * @param collection address of the token collection\\n     * @param from address of the sender\\n     * @param to address of the recipient\\n     * @param tokenId tokenId\\n     * @param amount amount of tokens (1 for ERC721, 1+ for ERC1155)\\n     * @dev For ERC721, amount is not used\\n     */\\n    function _transferNonFungibleToken(\\n        address collection,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal {\\n        // Retrieve the transfer manager address\\n        address transferManager = transferSelectorNFT.checkTransferManagerForToken(collection);\\n\\n        // If no transfer manager found, it returns address(0)\\n        require(transferManager != address(0), \\\"Transfer: No NFT transfer manager available\\\");\\n\\n        // If one is found, transfer the token\\n        ITransferManagerNFT(transferManager).transferNonFungibleToken(collection, from, to, tokenId, amount);\\n    }\\n\\n    /**\\n     * @notice Calculate protocol fee for an execution strategy\\n     * @param executionStrategy strategy\\n     * @param amount amount to transfer\\n     */\\n    function _calculateProtocolFee(address executionStrategy, uint256 amount) internal view returns (uint256) {\\n        uint256 protocolFee = IExecutionStrategy(executionStrategy).viewProtocolFee();\\n        return (protocolFee * amount) / 10000;\\n    }\\n\\n    /**\\n     * @notice Verify the validity of the maker order\\n     * @param makerOrder maker order\\n     * @param orderHash computed hash for the order\\n     */\\n    function _validateOrder(OrderTypes.MakerOrder calldata makerOrder, bytes32 orderHash) internal view {\\n        // Verify whether order nonce has expired\\n        require(\\n            (!_isUserOrderNonceExecutedOrCancelled[makerOrder.signer][makerOrder.nonce]) &&\\n                (makerOrder.nonce >= userMinOrderNonce[makerOrder.signer]),\\n            \\\"Order: Matching order expired\\\"\\n        );\\n\\n        // Verify the signer is not address(0)\\n        require(makerOrder.signer != address(0), \\\"Order: Invalid signer\\\");\\n\\n        // Verify the amount is not 0\\n        require(makerOrder.amount > 0, \\\"Order: Amount cannot be 0\\\");\\n\\n        // Verify the validity of the signature\\n        require(\\n            SignatureChecker.verify(\\n                orderHash,\\n                makerOrder.signer,\\n                makerOrder.v,\\n                makerOrder.r,\\n                makerOrder.s,\\n                DOMAIN_SEPARATOR\\n            ),\\n            \\\"Signature: Invalid\\\"\\n        );\\n\\n        // Verify whether the currency is whitelisted\\n        require(currencyManager.isCurrencyWhitelisted(makerOrder.currency), \\\"Currency: Not whitelisted\\\");\\n\\n        // Verify whether strategy can be executed\\n        require(executionManager.isStrategyWhitelisted(makerOrder.strategy), \\\"Strategy: Not whitelisted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurrencyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICurrencyManager {\\n    function addCurrency(address currency) external;\\n\\n    function removeCurrency(address currency) external;\\n\\n    function isCurrencyWhitelisted(address currency) external view returns (bool);\\n\\n    function viewWhitelistedCurrencies(uint256 cursor, uint256 size) external view returns (address[] memory, uint256);\\n\\n    function viewCountWhitelistedCurrencies() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IExecutionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IExecutionManager {\\n    function addStrategy(address strategy) external;\\n\\n    function removeStrategy(address strategy) external;\\n\\n    function isStrategyWhitelisted(address strategy) external view returns (bool);\\n\\n    function viewWhitelistedStrategies(uint256 cursor, uint256 size) external view returns (address[] memory, uint256);\\n\\n    function viewCountWhitelistedStrategies() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IExecutionStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {OrderTypes} from \\\"../libraries/OrderTypes.sol\\\";\\n\\ninterface IExecutionStrategy {\\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n\\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n\\n    function viewProtocolFee() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRoyaltyFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoyaltyFeeManager {\\n    function calculateRoyaltyFeeAndGetRecipient(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view returns (address, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILooksRareExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {OrderTypes} from \\\"../libraries/OrderTypes.sol\\\";\\n\\ninterface ILooksRareExchange {\\n    function matchAskWithTakerBidUsingETHAndWETH(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    ) external payable;\\n\\n    function matchAskWithTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\\n        external;\\n\\n    function matchBidWithTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITransferManagerNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITransferManagerNFT {\\n    function transferNonFungibleToken(\\n        address collection,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITransferSelectorNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITransferSelectorNFT {\\n    function checkTransferManagerForToken(address collection) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/OrderTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OrderTypes\\n * @notice This library contains order types for the LooksRare exchange.\\n */\\nlibrary OrderTypes {\\n    // keccak256(\\\"MakerOrder(bool isOrderAsk,address signer,address collection,uint256 price,uint256 tokenId,uint256 amount,address strategy,address currency,uint256 nonce,uint256 startTime,uint256 endTime,uint256 minPercentageToAsk,bytes params)\\\")\\n    bytes32 internal constant MAKER_ORDER_HASH = 0x40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a85028;\\n\\n    struct MakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address signer; // signer of the maker order\\n        address collection; // collection address\\n        uint256 price; // price (used as )\\n        uint256 tokenId; // id of the token\\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\\n        address currency; // currency (e.g., WETH)\\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\\n        uint256 startTime; // startTime in timestamp\\n        uint256 endTime; // endTime in timestamp\\n        uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // additional parameters\\n        uint8 v; // v: parameter (27 or 28)\\n        bytes32 r; // r: parameter\\n        bytes32 s; // s: parameter\\n    }\\n\\n    struct TakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address taker; // msg.sender\\n        uint256 price; // final price for the purchase\\n        uint256 tokenId;\\n        uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // other params (e.g., tokenId)\\n    }\\n\\n    function hash(MakerOrder memory makerOrder) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    MAKER_ORDER_HASH,\\n                    makerOrder.isOrderAsk,\\n                    makerOrder.signer,\\n                    makerOrder.collection,\\n                    makerOrder.price,\\n                    makerOrder.tokenId,\\n                    makerOrder.amount,\\n                    makerOrder.strategy,\\n                    makerOrder.currency,\\n                    makerOrder.nonce,\\n                    makerOrder.startTime,\\n                    makerOrder.endTime,\\n                    makerOrder.minPercentageToAsk,\\n                    keccak256(makerOrder.params)\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SignatureChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @title SignatureChecker\\n * @notice This library allows verification of signatures for both EOAs and contracts.\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @notice Recovers the signer of a signature (for EOA)\\n     * @param hash the hash containing the signed mesage\\n     * @param v parameter (27 or 28). This prevents maleability since the public key recovery equation has two possible solutions.\\n     * @param r parameter\\n     * @param s parameter\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // https://ethereum.stackexchange.com/questions/83174/is-it-best-practice-to-check-signature-malleability-in-ecrecover\\n        // https://crypto.iacr.org/2019/affevents/wac/medias/Heninger-BiasedNonceSense.pdf\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"Signature: Invalid s parameter\\\"\\n        );\\n\\n        require(v == 27 || v == 28, \\\"Signature: Invalid v parameter\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"Signature: Invalid signer\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @notice Returns whether the signer matches the signed message\\n     * @param hash the hash containing the signed mesage\\n     * @param signer the signer address to confirm message validity\\n     * @param v parameter (27 or 28)\\n     * @param r parameter\\n     * @param s parameter\\n     * @param domainSeparator paramer to prevent signature being executed in other chains and environments\\n     * @return true --> if valid // false --> if invalid\\n     */\\n    function verify(\\n        bytes32 hash,\\n        address signer,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bytes32 domainSeparator\\n    ) internal view returns (bool) {\\n        // \\\\x19\\\\x01 is the standardized encoding prefix\\n        // https://eips.ethereum.org/EIPS/eip-712#specification\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, hash));\\n        if (Address.isContract(signer)) {\\n            // 0x1626ba7e is the interfaceId for signature contracts (see IERC1271)\\n            return IERC1271(signer).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e;\\n        } else {\\n            return recover(digest, v, r, s) == signer;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 888888\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currencyManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinNonce\",\"type\":\"uint256\"}],\"name\":\"CancelAllOrders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"orderNonces\",\"type\":\"uint256[]\"}],\"name\":\"CancelMultipleOrders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currencyManager\",\"type\":\"address\"}],\"name\":\"NewCurrencyManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executionManager\",\"type\":\"address\"}],\"name\":\"NewExecutionManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"NewProtocolFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyFeeManager\",\"type\":\"address\"}],\"name\":\"NewRoyaltyFeeManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transferSelectorNFT\",\"type\":\"address\"}],\"name\":\"NewTransferSelectorNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RoyaltyPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TakerAsk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TakerBid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minNonce\",\"type\":\"uint256\"}],\"name\":\"cancelAllOrdersForSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderNonces\",\"type\":\"uint256[]\"}],\"name\":\"cancelMultipleMakerOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyManager\",\"outputs\":[{\"internalType\":\"contract ICurrencyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executionManager\",\"outputs\":[{\"internalType\":\"contract IExecutionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"}],\"name\":\"isUserOrderNonceExecutedOrCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerBid\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerAsk\",\"type\":\"tuple\"}],\"name\":\"matchAskWithTakerBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerBid\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerAsk\",\"type\":\"tuple\"}],\"name\":\"matchAskWithTakerBidUsingETHAndWETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerAsk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerBid\",\"type\":\"tuple\"}],\"name\":\"matchBidWithTakerAsk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeManager\",\"outputs\":[{\"internalType\":\"contract IRoyaltyFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferSelectorNFT\",\"outputs\":[{\"internalType\":\"contract ITransferSelectorNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currencyManager\",\"type\":\"address\"}],\"name\":\"updateCurrencyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executionManager\",\"type\":\"address\"}],\"name\":\"updateExecutionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"updateProtocolFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyFeeManager\",\"type\":\"address\"}],\"name\":\"updateRoyaltyFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transferSelectorNFT\",\"type\":\"address\"}],\"name\":\"updateTransferSelectorNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMinOrderNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LooksRareExchange","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"888888","ConstructorArguments":"000000000000000000000000c881addf409ee2c4b6bbc8b607c2c5cafab93d250000000000000000000000009cc58bf22a173c0fa8791c13df396d18185d62b20000000000000000000000007358182024c9f1b2e6b0153e60bf6156b7ef4906000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}