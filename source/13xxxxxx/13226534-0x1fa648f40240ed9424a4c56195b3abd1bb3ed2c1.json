{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n\r\ncontract Stateless {\r\n\r\n    struct RNG {\r\n        int256 a;\r\n        int256 b;\r\n        int256 c;\r\n        int256 d;\r\n        int256 e;\r\n    }\r\n\r\n    function R(RNG memory rng, int256 n) pure private returns (RNG memory, int256) {\r\n        for (int256 i = 0; i < n; i++) {\r\n            rng.e = int256(int32(0) | int32(rng.a + rng.b + rng.d));\r\n            rng.d += 1;\r\n            rng.a = int256(int32(rng.b) ^ int32((int256(uint256(uint32(uint256(-1 * 0xFFFFFFFF ^ (rng.b))))) >> 9)));\r\n            rng.b = rng.c + int256(int32(rng.c << 3));\r\n            rng.c = int256(int32(int256(int32(rng.c << 21))) | int32((int256(uint256(uint32(uint256(-1 * 0xFFFFFFFF ^ (rng.c))))) >> 11))) + rng.e;\r\n        }\r\n\r\n        return (rng, (int256(uint256(uint32(uint256(0xFFFFFFFF ^ (rng.e * -1)))))) + 1);\r\n    }\r\n    \r\n    function W(RNG memory rng) pure private returns (RNG memory, int256) {\r\n        int256 r;\r\n        (rng, r) = R(rng, 18);\r\n        return (rng, (10 + (r >> 27)));\r\n    }\r\n\r\n    function M(RNG memory rng, int256 w) pure private returns (RNG memory, bool) {\r\n        int256 r;\r\n        (rng, r) = R(rng, 8 * w + 1);\r\n        return (rng, 42949673 > r);\r\n    }\r\n\r\n    function L(RNG memory rng, int256 w, bool m) pure private returns (int256) {\r\n        int256 r;\r\n        if (m == false) {\r\n            (rng, r) = R(rng, 1);\r\n        }\r\n        (rng, r) = R(rng, w + 4);\r\n\r\n        return ((r * 6) >> 32) + 1;\r\n    }\r\n\r\n    function XXX(uint256 I, address T) external payable {\r\n        bytes32 hash = keccak256(abi.encodePacked(I, block.number, block.difficulty, T));\r\n\r\n        RNG memory rng = RNG(2654435769, 608135816, 3084996962, int256(uint256(hash) >> 224), 0);\r\n\r\n        int256 w;\r\n        (rng, w) = W(rng);\r\n\r\n        bool m;\r\n        (rng, m) = M(rng, w);\r\n\r\n        int256 l = L(rng, w, m);\r\n        \r\n        bool t = m && l == 6;\r\n        require(t, \"BLNT!\");\r\n        block.coinbase.transfer(msg.value);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"I\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"T\",\"type\":\"address\"}],\"name\":\"XXX\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"Stateless","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"ipfs://14bb31acaedcd51797b7a5e32b3bad911939ec8775e29e5af307d02f659f6fb0"}]}