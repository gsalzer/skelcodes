{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/vesting/CompanyVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @author Jorge Gomes Dur√°n (jorge@smartrights.io)\\n/// @title A vesting contract to lock tokens for iCommunity token Icom\\n\\ncontract CompanyVesting {\\n\\n    enum WalletType {\\n        ICOHolders,\\n        Marketing,\\n        Team,\\n        Staking,\\n        Foundation,\\n        Treasury\\n    }\\n\\n    // Wallets\\n    address immutable private icoHoldersWallet;\\n    address immutable private marketingWallet;\\n    address immutable private teamWallet;\\n    address immutable private stakingWallet;\\n    address immutable private foundationWallet;\\n    address immutable private treasuryWallet;\\n    \\n    address immutable private icomToken;\\n    address immutable private owner;\\n\\n    uint32 private listingDate;\\n    uint256[6] internal withdrawnBalances;\\n\\n    uint32 constant private MAX_LISTING_DATE = 1672441200;  // 2022/12/31 00:00:00\\n    uint256 constant private ICOHOLDERS_MAX = 18333608 * 10 ** 18;\\n    uint256 constant private STAKING_MAX_FIRST_YEAR = 2500000 * 10 ** 18;\\n    uint256 constant private STAKING_MAX_AFTER_FIRST_YEAR = 12500000 * 10 ** 18;\\n    uint256 constant private MARKETING_MAX = 9666392 * 10 ** 18;\\n    uint256 constant private TEAM_MAX = 15000000 * 10 ** 18;\\n    uint256 constant private FOUNDATION_MAX = 4000000 * 10 ** 18;\\n    uint256 constant private TREASURY_MAX = 30000000 * 10 ** 18;\\n\\n    event onWithdrawToken(uint256 _type, uint256 _amount);\\n\\n    constructor(address _token, address _icoHoldersWallet, address _marketingWallet, address _teamWallet, address _stakingWallet, address _foundationWallet, address _treasuryWallet) {\\n        icoHoldersWallet = _icoHoldersWallet;\\n        marketingWallet = _marketingWallet;\\n        teamWallet = _teamWallet;\\n        stakingWallet = _stakingWallet;\\n        foundationWallet = _foundationWallet;\\n        treasuryWallet = _treasuryWallet;\\n        icomToken = _token;\\n        owner = msg.sender;\\n    }\\n\\n    function setListingDate(uint32 _listingDate) external {\\n        require(msg.sender == owner, \\\"OnlyOwner\\\");\\n        require(_listingDate < MAX_LISTING_DATE, \\\"CantDelayMoreListing\\\");\\n        require(block.timestamp < _listingDate, \\\"CantListInPast\\\");\\n\\n        listingDate = _listingDate;\\n    }\\n\\n    function withdrawICOHoldersTokens() external {\\n        require(block.timestamp >= listingDate + 150 days, \\\"TooEarly\\\");\\n        require(withdrawnBalances[uint256(WalletType.ICOHolders)] < ICOHOLDERS_MAX, \\\"MaxBalance\\\");\\n\\n        withdrawnBalances[uint256(WalletType.ICOHolders)] += ICOHOLDERS_MAX;\\n        _sendTokens(uint256(WalletType.ICOHolders), ICOHOLDERS_MAX);\\n    }\\n\\n    function withdrawStakingTokens() external {\\n        require(block.timestamp >= listingDate, \\\"TooEarly\\\");\\n\\n        if (block.timestamp < listingDate + 365 days) {\\n            require(withdrawnBalances[uint256(WalletType.Staking)] < STAKING_MAX_FIRST_YEAR, \\\"MaxBalance\\\");\\n\\n            withdrawnBalances[uint256(WalletType.Staking)] += STAKING_MAX_FIRST_YEAR;\\n            _sendTokens(uint256(WalletType.Staking), STAKING_MAX_FIRST_YEAR);\\n        } else {\\n            require(withdrawnBalances[uint256(WalletType.Staking)] < STAKING_MAX_FIRST_YEAR + STAKING_MAX_AFTER_FIRST_YEAR, \\\"MaxBalance\\\");\\n\\n            uint256 pendingBalance = STAKING_MAX_AFTER_FIRST_YEAR + STAKING_MAX_FIRST_YEAR - withdrawnBalances[uint256(WalletType.Staking)];\\n            withdrawnBalances[uint256(WalletType.Staking)] += pendingBalance;\\n            _sendTokens(uint256(WalletType.Staking), pendingBalance);\\n        }\\n    }\\n\\n    function withdrawMarketingTokens() external {\\n        require(block.timestamp >= listingDate + 150 days, \\\"TooEarly\\\");\\n        require(withdrawnBalances[uint256(WalletType.Marketing)] < MARKETING_MAX, \\\"MaxBalance\\\");\\n\\n        withdrawnBalances[uint256(WalletType.Marketing)] += MARKETING_MAX;\\n        _sendTokens(uint256(WalletType.Marketing), MARKETING_MAX);\\n    }\\n\\n    function withdrawTeamTokens() external {\\n        require(block.timestamp >= listingDate + 365 days, \\\"TooEarly\\\");\\n        require(withdrawnBalances[uint256(WalletType.Team)] < TEAM_MAX, \\\"MaxBalance\\\");\\n\\n        uint256 timeDiff = block.timestamp - (listingDate + 365 days);\\n        uint256 month = (timeDiff / 30 days) + 1;   // Month number after listing + 1 year\\n        require(month <= 36, \\\"Only36Months\\\");\\n        uint256 monthTranche = TEAM_MAX / 36;\\n        uint256 tranchesWithdrawed = withdrawnBalances[uint256(WalletType.Team)] / monthTranche;\\n\\n        require(month > tranchesWithdrawed, \\\"MaxForThisMonth\\\");\\n        uint256 numTranches = month - tranchesWithdrawed;\\n        uint256 availableAmount = monthTranche * numTranches;\\n\\n        withdrawnBalances[uint256(WalletType.Team)] += availableAmount;\\n        _sendTokens(uint256(WalletType.Team), availableAmount);\\n    }\\n\\n    function withdrawFoundationTokens() external {\\n        require(block.timestamp >= listingDate + 365 days, \\\"TooEarly\\\");\\n        require(withdrawnBalances[uint256(WalletType.Foundation)] < FOUNDATION_MAX, \\\"MaxBalance\\\");\\n\\n        uint256 timeDiff = block.timestamp - (listingDate + 365 days);\\n        uint256 month = (timeDiff / 30 days) + 1;   // Month number after listing + 1 year\\n        uint256 monthTranche = TEAM_MAX / 36;\\n        uint256 tranchesWithdrawed = withdrawnBalances[uint256(WalletType.Foundation)] / monthTranche;\\n\\n        if (month > tranchesWithdrawed) {\\n            uint256 numTranches = month - tranchesWithdrawed;\\n            uint256 availableAmount = monthTranche * numTranches;\\n\\n            withdrawnBalances[uint256(WalletType.Foundation)] += availableAmount;\\n            _sendTokens(uint256(WalletType.Foundation), availableAmount);\\n        }\\n    }\\n\\n    function withdrawTreasuryTokens(uint256 _amount) external {\\n        require(withdrawnBalances[uint256(WalletType.Treasury)] + _amount < TREASURY_MAX, \\\"MaxBalance\\\");\\n\\n        withdrawnBalances[uint256(WalletType.Treasury)] += _amount;\\n        _sendTokens(uint256(WalletType.Treasury), _amount);\\n    }\\n\\n    function getTokensInVesting() external view returns(uint256) {\\n        return IERC20(icomToken).balanceOf(address(this));\\n    }\\n\\n    function _sendTokens(uint256 _type, uint256 _amount) internal {\\n        if (_type == uint256(WalletType.ICOHolders)) IERC20(icomToken).transfer(icoHoldersWallet, _amount);\\n        else if (_type == uint256(WalletType.Marketing)) IERC20(icomToken).transfer(marketingWallet, _amount);\\n        else if (_type == uint256(WalletType.Team)) IERC20(icomToken).transfer(teamWallet, _amount);\\n        else if (_type == uint256(WalletType.Staking)) IERC20(icomToken).transfer(stakingWallet, _amount);\\n        else if (_type == uint256(WalletType.Foundation)) IERC20(icomToken).transfer(foundationWallet, _amount);\\n        else if (_type == uint256(WalletType.Treasury)) IERC20(icomToken).transfer(treasuryWallet, _amount);\\n\\n        emit onWithdrawToken(_type, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_icoHoldersWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_foundationWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onWithdrawToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getTokensInVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_listingDate\",\"type\":\"uint32\"}],\"name\":\"setListingDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFoundationTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawICOHoldersTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMarketingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStakingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTeamTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTreasuryTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CompanyVesting","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000010be237ba3d3d8c87731e68ee854fc98e3705f0e000000000000000000000000d7f8050a906a3aa5fc2dfb58243ae9dd414ce8ed000000000000000000000000fc434b64089a89ea2b44795005af91bb9878d46600000000000000000000000097c094d3f04f08f39c8862fabfcb91b498eb61b200000000000000000000000031408ce2a841c02c6f4cd163f75b21ca4ee29af5000000000000000000000000da6f06d509798faae5b2251b27877fdbd801eab5000000000000000000000000594bff47cfcd88f99e817a0f11d5a659f77c7146","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}