{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PunkRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"./interfaces/IWrappedPunks.sol\\\";\\nimport \\\"./interfaces/IAssetWrapper.sol\\\";\\nimport \\\"./interfaces/IPunks.sol\\\";\\n\\n/**\\n * @dev {ERC721} Router contract allowing users to automatically\\n *  wrap and deposit original cryptopunks into the AssetWrapper\\n */\\ncontract PunkRouter is ERC721Holder {\\n    IAssetWrapper public assetWrapper;\\n    IWrappedPunks public wrappedPunks;\\n    IPunks public punks;\\n    address public proxy;\\n\\n    constructor(\\n        IAssetWrapper _assetWrapper,\\n        IWrappedPunks _wrappedPunks,\\n        IPunks _punks\\n    ) {\\n        assetWrapper = _assetWrapper;\\n        punks = _punks;\\n        wrappedPunks = _wrappedPunks;\\n        wrappedPunks.registerProxy();\\n        proxy = wrappedPunks.proxyInfo(address(this));\\n    }\\n\\n    /**\\n     * @dev Wrap and deposit an original cryptopunk into an AssetWrapper bundle\\n     *\\n     * @param punkIndex The index of the CryptoPunk to deposit\\n     * @param bundleId The id of the wNFT to deposit into\\n     *\\n     * Requirements:\\n     *\\n     * - CryptoPunk punkIndex must be offered for sale to this address for 0 ETH\\n     *      Equivalent to an approval for normal ERC721s\\n     * - msg.sender must be the owner of punkIndex\\n     */\\n    function depositPunk(uint256 punkIndex, uint256 bundleId) external {\\n        IPunks _punks = punks;\\n        IWrappedPunks _wrappedPunks = wrappedPunks;\\n        IAssetWrapper _assetWrapper = assetWrapper;\\n        address owner = _punks.punkIndexToAddress(punkIndex);\\n        require(owner == msg.sender, \\\"PunkRouter: not owner\\\");\\n        _punks.buyPunk(punkIndex);\\n        _punks.transferPunk(proxy, punkIndex);\\n\\n        _wrappedPunks.mint(punkIndex);\\n        _wrappedPunks.approve(address(_assetWrapper), punkIndex);\\n        _assetWrapper.depositERC721(address(_wrappedPunks), punkIndex, bundleId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers.\\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWrappedPunks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @dev Interface for a permittable ERC721 contract\\n * See https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC72 allowance (see {IERC721-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC721-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IWrappedPunks is IERC721 {\\n    function mint(uint256 punkIndex) external;\\n\\n    function burn(uint256 punkIndex) external;\\n\\n    function registerProxy() external;\\n\\n    function proxyInfo(address user) external returns (address proxy);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAssetWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for an AssetWrapper contract\\n */\\ninterface IAssetWrapper {\\n    /**\\n     * @dev Emitted when an ERC20 token is deposited\\n     */\\n    event DepositERC20(address indexed depositor, uint256 indexed bundleId, address tokenAddress, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when an ERC721 token is deposited\\n     */\\n    event DepositERC721(address indexed depositor, uint256 indexed bundleId, address tokenAddress, uint256 tokenId);\\n\\n    /**\\n     * @dev Emitted when an ERC1155 token is deposited\\n     */\\n    event DepositERC1155(\\n        address indexed depositor,\\n        uint256 indexed bundleId,\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted when ETH is deposited\\n     */\\n    event DepositETH(address indexed depositor, uint256 indexed bundleId, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when ETH is deposited\\n     */\\n    event Withdraw(address indexed withdrawer, uint256 indexed bundleId);\\n\\n    /**\\n     * @dev Creates a new bundle token for `to`. Its token ID will be\\n     * automatically assigned (and available on the emitted {IERC721-Transfer} event)\\n     *\\n     * See {ERC721-_mint}.\\n     */\\n    function initializeBundle(address to) external;\\n\\n    /**\\n     * @dev Deposit some ERC20 tokens into a given bundle\\n     *\\n     * Requirements:\\n     *\\n     * - The bundle with id `bundleId` must have been initialized with {initializeBundle}\\n     * - `amount` tokens from `msg.sender` on `tokenAddress` must have been approved to this contract\\n     */\\n    function depositERC20(\\n        address tokenAddress,\\n        uint256 amount,\\n        uint256 bundleId\\n    ) external;\\n\\n    /**\\n     * @dev Deposit an ERC721 token into a given bundle\\n     *\\n     * Requirements:\\n     *\\n     * - The bundle with id `bundleId` must have been initialized with {initializeBundle}\\n     * - The `tokenId` NFT from `msg.sender` on `tokenAddress` must have been approved to this contract\\n     */\\n    function depositERC721(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 bundleId\\n    ) external;\\n\\n    /**\\n     * @dev Deposit an ERC1155 token into a given bundle\\n     *\\n     * Requirements:\\n     *\\n     * - The bundle with id `bundleId` must have been initialized with {initializeBundle}\\n     * - The `tokenId` from `msg.sender` on `tokenAddress` must have been approved for at least `amount`to this contract\\n     */\\n    function depositERC1155(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 bundleId\\n    ) external;\\n\\n    /**\\n     * @dev Deposit some ETH into a given bundle\\n     *\\n     * Requirements:\\n     *\\n     * - The bundle with id `bundleId` must have been initialized with {initializeBundle}\\n     */\\n    function depositETH(uint256 bundleId) external payable;\\n\\n    /**\\n     * @dev Withdraw all assets in the given bundle, returning them to the msg.sender\\n     *\\n     * Requirements:\\n     *\\n     * - The bundle with id `bundleId` must have been initialized with {initializeBundle}\\n     * - The bundle with id `bundleId` must be owned by or approved to msg.sender\\n     */\\n    function withdraw(uint256 bundleId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPunks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for a permittable ERC721 contract\\n * See https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC72 allowance (see {IERC721-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC721-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IPunks {\\n    function punkIndexToAddress(uint256 punkIndex) external view returns (address owner);\\n\\n    function buyPunk(uint256 punkIndex) external;\\n\\n    function transferPunk(address to, uint256 punkIndex) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IAssetWrapper\",\"name\":\"_assetWrapper\",\"type\":\"address\"},{\"internalType\":\"contract IWrappedPunks\",\"name\":\"_wrappedPunks\",\"type\":\"address\"},{\"internalType\":\"contract IPunks\",\"name\":\"_punks\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"assetWrapper\",\"outputs\":[{\"internalType\":\"contract IAssetWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bundleId\",\"type\":\"uint256\"}],\"name\":\"depositPunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"punks\",\"outputs\":[{\"internalType\":\"contract IPunks\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedPunks\",\"outputs\":[{\"internalType\":\"contract IWrappedPunks\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PunkRouter","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000001f563cdd688ad47b75e474fde74e87c643d129b7000000000000000000000000b7f7f6c52f2e2fdb1963eab30438024864c313f6000000000000000000000000b47e3cd837ddf8e4c57f05d70ab865de6e193bbb","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}