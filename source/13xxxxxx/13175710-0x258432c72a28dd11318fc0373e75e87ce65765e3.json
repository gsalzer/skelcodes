{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/clexmond/projects/influence/contracts/contracts/interfaces/IAsteroidFeatures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\n\\ninterface IAsteroidFeatures {\\n\\n  function getAsteroidSeed(uint _asteroidId) external pure returns (bytes32);\\n\\n  function getRadius(uint _asteroidId) external pure returns (uint);\\n\\n  function getSpectralType(uint _asteroidId) external pure returns (uint);\\n\\n  function getSpectralTypeBySeed(bytes32 _seed) external pure returns (uint);\\n\\n  function getOrbitalElements(uint _asteroidId) external pure returns (uint[6] memory orbitalElements);\\n\\n  function getOrbitalElementsBySeed(bytes32 _seed) external pure returns (uint[6] memory orbitalElements);\\n}\\n\"\r\n    },\r\n    \"/Users/clexmond/projects/influence/contracts/contracts/interfaces/IAsteroidScans.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\n\\ninterface IAsteroidScans {\\n\\n  function scanOrderCount() external returns (uint);\\n\\n  function recordScanOrder(uint _asteroidId) external;\\n\\n  function getScanOrder(uint _asteroidId) external view returns(uint);\\n\\n  function setInitialBonuses(uint[] calldata _asteroidIds, uint[] calldata _bonuses) external;\\n\\n  function finalizeScan(uint _asteroidId) external;\\n\\n  function retrieveScan(uint _asteroidId) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"/Users/clexmond/projects/influence/contracts/contracts/interfaces/IAsteroidToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n\\ninterface IAsteroidToken is IERC721 {\\n\\n  function mint(address _to, uint _tokenId) external;\\n\\n  function burn(address _owner, uint _tokenId) external;\\n\\n  function ownerOf(uint tokenId) external override view returns (address);\\n}\\n\"\r\n    },\r\n    \"/Users/clexmond/projects/influence/contracts/contracts/interfaces/ICrewFeatures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\n\\ninterface ICrewFeatures {\\n\\n  function setGeneratorSeed(uint _collId, bytes32 _seed) external;\\n\\n  function setToken(uint _crewId, uint _collId, uint _mod) external;\\n}\\n\"\r\n    },\r\n    \"/Users/clexmond/projects/influence/contracts/contracts/interfaces/ICrewToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n\\ninterface ICrewToken is IERC721 {\\n\\n  function mint(address _to) external returns (uint);\\n\\n  function ownerOf(uint256 tokenId) external override view returns (address);\\n}\\n\"\r\n    },\r\n    \"/Users/clexmond/projects/influence/contracts/contracts/sales/ArvadCrewSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IAsteroidToken.sol\\\";\\nimport \\\"../interfaces/IAsteroidFeatures.sol\\\";\\nimport \\\"../interfaces/IAsteroidScans.sol\\\";\\nimport \\\"../interfaces/ICrewToken.sol\\\";\\nimport \\\"../interfaces/ICrewFeatures.sol\\\";\\n\\n\\n/**\\n * @dev Manages the second sale including both asteroids and crew distribution for the first 11,100\\n */\\ncontract ArvadCrewSale is Ownable {\\n  IAsteroidToken asteroids;\\n  IAsteroidFeatures astFeatures;\\n  IAsteroidScans scans;\\n  ICrewToken crew;\\n  ICrewFeatures crewFeatures;\\n\\n  // Mapping from asteroidId to bool whether it's been used to generate a crew member\\n  mapping (uint => bool) private _asteroidsUsed;\\n\\n  uint public saleStartTime; // in seconds since epoch\\n  uint public baseAsteroidPrice;\\n  uint public baseLotPrice;\\n  uint public startScanCount; // count of total purchases when the sale starts\\n  uint public endScanCount; // count of total purchases after which to stop the sale\\n\\n  event SaleCreated(uint indexed start, uint asteroidPrice, uint lotPrice, uint startCount, uint endCount);\\n  event SaleCancelled(uint indexed start);\\n  event AsteroidUsed(uint indexed asteroidId, uint indexed crewId);\\n\\n  /**\\n   * @param _asteroids Reference to the AsteroidToken contract address\\n   * @param _astFeatures Reference to the AsteroidFeatures contract address\\n   * @param _scans Reference to the AsteroidScans contract address\\n   * @param _crew Reference to the CrewToken contract address\\n   * @param _crewFeatures Reference to the CrewFeatures contract address\\n   */\\n  constructor(\\n    IAsteroidToken _asteroids,\\n    IAsteroidFeatures _astFeatures,\\n    IAsteroidScans _scans,\\n    ICrewToken _crew,\\n    ICrewFeatures _crewFeatures\\n  ) {\\n    asteroids = _asteroids;\\n    astFeatures = _astFeatures;\\n    scans = _scans;\\n    crew = _crew;\\n    crewFeatures = _crewFeatures;\\n  }\\n\\n  /**\\n   * @dev Sets the initial parameters for the sale\\n   * @param _startTime Seconds since epoch to start the sale\\n   * @param _perAsteroid Price in wei per asteroid\\n   * @param _perLot Additional price per asteroid multiplied by the surface area of the asteroid\\n   * @param _startScanCount Starting scan count for the sale, impacts which collection is minted for crew\\n   * @param _endScanCount End the sale once this scan order is reached\\n   */\\n  function createSale(\\n    uint _startTime,\\n    uint _perAsteroid,\\n    uint _perLot,\\n    uint _startScanCount,\\n    uint _endScanCount\\n  ) external onlyOwner {\\n    saleStartTime = _startTime;\\n    baseAsteroidPrice = _perAsteroid;\\n    baseLotPrice = _perLot;\\n    startScanCount = _startScanCount;\\n    endScanCount = _endScanCount;\\n    emit SaleCreated(saleStartTime, baseAsteroidPrice, baseLotPrice, startScanCount, endScanCount);\\n  }\\n\\n  /**\\n   * @dev Cancels a future or ongoing sale\\n   **/\\n  function cancelSale() external onlyOwner {\\n    require(saleStartTime > 0, \\\"ArvadCrewSale: no sale defined\\\");\\n    _cancelSale();\\n  }\\n\\n  /**\\n   * @dev Retrieve the price for the given asteroid which includes a base price and a price scaled by surface area\\n   * @param _tokenId ERC721 token ID of the asteroid\\n   */\\n  function getAsteroidPrice(uint _tokenId) public view returns (uint) {\\n    require(baseAsteroidPrice > 0 && baseLotPrice > 0, \\\"ArvadCrewSale: base prices must be set\\\");\\n    uint radius = astFeatures.getRadius(_tokenId);\\n    uint lots = (radius * radius) / 250000;\\n    return baseAsteroidPrice + (baseLotPrice * lots);\\n  }\\n\\n  /**\\n   * @dev Purchase an asteroid\\n   * @param _asteroidId ERC721 token ID of the asteroid\\n   **/\\n  function buyAsteroid(uint _asteroidId) external payable {\\n    require(block.timestamp >= saleStartTime, \\\"ArvadCrewSale: no active sale\\\");\\n    require(msg.value == getAsteroidPrice(_asteroidId), \\\"ArvadCrewSale: incorrect amount of Ether sent\\\");\\n    uint scanCount = scans.scanOrderCount();\\n    require(scanCount < endScanCount, \\\"ArvadCrewSale: sale has completed\\\");\\n\\n    asteroids.mint(_msgSender(), _asteroidId);\\n    scans.recordScanOrder(_asteroidId);\\n\\n    // Complete sale if no more crew members available\\n    if (scanCount == (endScanCount - 1)) {\\n      _cancelSale();\\n      unlockCitizens();\\n    }\\n  }\\n\\n  /**\\n   * @dev Mints a crew member with an existing, already purchased asteroid\\n   * @param _asteroidId The ERC721 tokenID of the asteroid\\n   */\\n  function mintCrewWithAsteroid(uint _asteroidId) external {\\n    require(asteroids.ownerOf(_asteroidId) == _msgSender(), \\\"ArvadCrewSale: caller must own the asteroid\\\");\\n    require(!_asteroidsUsed[_asteroidId], \\\"ArvadCrewSale: asteroid has already been used to mint crew\\\");\\n    uint scanOrder = scans.getScanOrder(_asteroidId);\\n    require(scanOrder > 0 && scanOrder <= endScanCount, \\\"ArvadCrewSale: crew not mintable with this asteroid\\\");\\n    uint scanCount = scans.scanOrderCount();\\n    require(scanOrder <= startScanCount || scanCount >= endScanCount, \\\"ArvadCrewSale: Scanning citizens not unlocked\\\");\\n\\n    // Mint crew token and record asteroid usage\\n    uint crewId = crew.mint(_msgSender());\\n\\n    if (scanOrder <= startScanCount) {\\n      // Record crew as Arvad Specialists (collection #1) in CrewFeatures\\n      crewFeatures.setToken(crewId, 1, (250000 - _asteroidId) * (250000 - _asteroidId) / 25000000);\\n    } else {\\n      // Record crew as Arvad Citizens (collection #2) in CrewFeatures\\n      crewFeatures.setToken(crewId, 2, (250000 - _asteroidId) * (250000 - _asteroidId) / 25000000);\\n    }\\n\\n    _asteroidsUsed[_asteroidId] = true;\\n    emit AsteroidUsed(_asteroidId, crewId);\\n  }\\n\\n  /**\\n   * @dev Withdraw Ether from the contract to owner address\\n   */\\n  function withdraw() external onlyOwner {\\n    uint balance = address(this).balance;\\n    _msgSender().transfer(balance);\\n  }\\n\\n  /**\\n   * @dev Unlocks Arvad Citizens attribute generation by setting a seed. Can be called by anyone.\\n   */\\n  function unlockCitizens() internal {\\n    require(scans.scanOrderCount() >= endScanCount, \\\"ArvadCrewSale: all asteroids must be sold first\\\");\\n    bytes32 seed = blockhash(block.number - 1);\\n    crewFeatures.setGeneratorSeed(2, seed);\\n  }\\n\\n  /**\\n   * @dev Unlocks Arvad Citizens attribute generation before all asteroids are sold as a backup\\n   */\\n  function emergencyUnlockCitizens() external onlyOwner {\\n    bytes32 seed = blockhash(block.number - 1);\\n    crewFeatures.setGeneratorSeed(2, seed);\\n  }\\n\\n  /**\\n   * @dev Internal sale cancellation method\\n   */\\n  function _cancelSale() private {\\n    emit SaleCancelled(saleStartTime);\\n    saleStartTime = 0;\\n    baseAsteroidPrice = 0;\\n    baseLotPrice = 0;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IAsteroidToken\",\"name\":\"_asteroids\",\"type\":\"address\"},{\"internalType\":\"contract IAsteroidFeatures\",\"name\":\"_astFeatures\",\"type\":\"address\"},{\"internalType\":\"contract IAsteroidScans\",\"name\":\"_scans\",\"type\":\"address\"},{\"internalType\":\"contract ICrewToken\",\"name\":\"_crew\",\"type\":\"address\"},{\"internalType\":\"contract ICrewFeatures\",\"name\":\"_crewFeatures\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"asteroidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"crewId\",\"type\":\"uint256\"}],\"name\":\"AsteroidUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"SaleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"asteroidPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endCount\",\"type\":\"uint256\"}],\"name\":\"SaleCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseAsteroidPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseLotPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_asteroidId\",\"type\":\"uint256\"}],\"name\":\"buyAsteroid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perAsteroid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perLot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startScanCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endScanCount\",\"type\":\"uint256\"}],\"name\":\"createSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyUnlockCitizens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endScanCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAsteroidPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_asteroidId\",\"type\":\"uint256\"}],\"name\":\"mintCrewWithAsteroid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startScanCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ArvadCrewSale","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006e4c6d9b0930073e958abd2aba516b885260b8ff00000000000000000000000099ce24101bc957a0d02ec65ab7e3b507fee42a130000000000000000000000009b811024635626bc37e5d294b384077ab25dcf62000000000000000000000000746db7b1728af413c4e2b98216c6171b2fc9d00e000000000000000000000000f17fd8d6cfe43b5c79597f8325bcc4dc8d60672a","EVMVersion":"istanbul","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0f0e0335b254a1ea35af093ddf675a89ea0ff78575d45e1bfa50584e988fb551"}]}