// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

pragma abicoder v2;

import "./details/BackgroundDetail.sol";
import "./details/BodyDetail.sol";
import "./details/HairDetail.sol";
import "./details/MouthDetail.sol";
import "./details/NoseDetail.sol";
import "./details/EyesDetail.sol";
import "./details/EyebrowDetail.sol";
import "./details/MarkDetail.sol";
import "./details/AccessoryDetail.sol";
import "./details/EarringsDetail.sol";
import "./details/MaskDetail.sol";
import "./DetailHelper.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

/// @notice Helper to generate SVGs
library NFTDescriptor {
    struct SVGParams {
        uint8 hair;
        uint8 eye;
        uint8 eyebrow;
        uint8 nose;
        uint8 mouth;
        uint8 mark;
        uint8 earring;
        uint8 accessory;
        uint8 mask;
        uint8 background;
        uint8 skin;
        bool original;
        uint256 timestamp;
        address creator;
    }

    /// @dev Combine all the SVGs to generate the final image
    function generateSVGImage(SVGParams memory params) internal view returns (string memory) {
        return
            string(
                abi.encodePacked(
                    generateSVGHead(),
                    DetailHelper.getDetailSVG(address(BackgroundDetail), params.background),
                    generateSVGFace(params),
                    DetailHelper.getDetailSVG(address(EarringsDetail), params.earring),
                    DetailHelper.getDetailSVG(address(HairDetail), params.hair),
                    DetailHelper.getDetailSVG(address(MaskDetail), params.mask),
                    DetailHelper.getDetailSVG(address(AccessoryDetail), params.accessory),
                    generateCopy(params.original),
                    "</svg>"
                )
            );
    }

    /// @dev Combine face items
    function generateSVGFace(SVGParams memory params) private view returns (string memory) {
        return
            string(
                abi.encodePacked(
                    DetailHelper.getDetailSVG(address(BodyDetail), params.skin),
                    DetailHelper.getDetailSVG(address(MarkDetail), params.mark),
                    DetailHelper.getDetailSVG(address(MouthDetail), params.mouth),
                    DetailHelper.getDetailSVG(address(NoseDetail), params.nose),
                    DetailHelper.getDetailSVG(address(EyesDetail), params.eye),
                    DetailHelper.getDetailSVG(address(EyebrowDetail), params.eyebrow)
                )
            );
    }

    /// @dev generate Json Metadata name
    function generateName(SVGParams memory params, uint256 tokenId) internal pure returns (string memory) {
        return
            string(
                abi.encodePacked(
                    BackgroundDetail.getItemNameById(params.background),
                    " Onii ",
                    Strings.toString(tokenId)
                )
            );
    }

    /// @dev generate Json Metadata description
    function generateDescription(SVGParams memory params) internal pure returns (string memory) {
        return
            string(
                abi.encodePacked(
                    "Generated by ",
                    Strings.toHexString(uint256(uint160(params.creator))),
                    " at ",
                    Strings.toString(params.timestamp)
                )
            );
    }

    /// @dev generate SVG header
    function generateSVGHead() private pure returns (string memory) {
        return
            string(
                abi.encodePacked(
                    '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px"',
                    ' viewBox="0 0 420 420" style="enable-background:new 0 0 420 420;" xml:space="preserve">'
                )
            );
    }

    /// @dev generate the "Copy" SVG if the onii is not the original
    function generateCopy(bool original) private pure returns (string memory) {
        return
            !original
                ? string(
                    abi.encodePacked(
                        '<g id="Copy">',
                        '<path fill="none" stroke="#F26559" stroke-width="0.5" stroke-miterlimit="10" d="M239.5,300.6c-4.9,1.8-5.9,8.1,1.3,4.1"/>',
                        '<path fill="none" stroke="#F26559" stroke-width="0.5" stroke-miterlimit="10" d="M242.9,299.5c-2.6,0.8-1.8,4.3,0.8,4.2 C246.3,303.1,245.6,298.7,242.9,299.5"/>',
                        '<path fill="none" stroke="#F26559" stroke-width="0.5" stroke-miterlimit="10" d="M247.5,302.9c0.2-1.6-1.4-4-0.8-5.4 c0.4-1.2,2.5-1.4,3.2-0.3c0.1,1.5-0.9,2.7-2.3,2.5"/>',
                        '<path fill="none" stroke="#F26559" stroke-width="0.5" stroke-miterlimit="10" d="M250.6,295.4c1.1-0.1,2.2,0,3.3,0.1 c0.5-0.8,0.7-1.7,0.5-2.7"/>',
                        '<path fill="none" stroke="#F26559" stroke-width="0.5" stroke-miterlimit="10" d="M252.5,299.1c0.5-1.2,1.2-2.3,1.4-3.5"/>',
                        "</g>"
                    )
                )
                : "";
    }

    /// @dev generate Json Metadata attributes
    function generateAttributes(SVGParams memory params) internal pure returns (string memory) {
        return
            string(
                abi.encodePacked(
                    "[",
                    getJsonAttribute("Body", BodyDetail.getItemNameById(params.skin), false),
                    getJsonAttribute("Hair", HairDetail.getItemNameById(params.hair), false),
                    getJsonAttribute("Mouth", MouthDetail.getItemNameById(params.mouth), false),
                    getJsonAttribute("Nose", NoseDetail.getItemNameById(params.nose), false),
                    getJsonAttribute("Eyes", EyesDetail.getItemNameById(params.eye), false),
                    getJsonAttribute("Eyebrow", EyebrowDetail.getItemNameById(params.eyebrow), false),
                    abi.encodePacked(
                        getJsonAttribute("Mark", MarkDetail.getItemNameById(params.mark), false),
                        getJsonAttribute("Accessory", AccessoryDetail.getItemNameById(params.accessory), false),
                        getJsonAttribute("Earrings", EarringsDetail.getItemNameById(params.earring), false),
                        getJsonAttribute("Mask", MaskDetail.getItemNameById(params.mask), false),
                        getJsonAttribute("Background", BackgroundDetail.getItemNameById(params.background), false),
                        getJsonAttribute("Original", params.original ? "true" : "false", true),
                        "]"
                    )
                )
            );
    }

    /// @dev Get the json attribute as
    ///    {
    ///      "trait_type": "Skin",
    ///      "value": "Human"
    ///    }
    function getJsonAttribute(
        string memory trait,
        string memory value,
        bool end
    ) private pure returns (string memory json) {
        return string(abi.encodePacked('{ "trait_type" : "', trait, '", "value" : "', value, '" }', end ? "" : ","));
    }
}

