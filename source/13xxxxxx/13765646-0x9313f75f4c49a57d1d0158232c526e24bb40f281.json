{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/KlerosboardSuscription.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract KlerosboardSuscription is Ownable {\\n    /* Events */\\n    /**\\n    *  @dev Emitted when the maintainer is changed.\\n    *  @param oldMaintainer address of the new maintainer.\\n    *  @param newMaintainer address of the new maintainer.\\n    */\\n    event MaintainerChanged(address indexed oldMaintainer, address indexed newMaintainer);\\n\\n    /**\\n    *  @dev Emitted when the maintenance fee is changed.\\n    *  @param maintenanceFeeMultiplier new value of maintainance fee\\n    */\\n    event MaintenanceFeeChanged(uint maintenanceFeeMultiplier);\\n\\n    /**\\n    *  @dev Emitted when the contract of ubiburner is changed.\\n    *  @param oldUbiburner address of the old contract.\\n    *  @param ubiburner address of the new contract.\\n    */\\n    event UBIBurnerChanged(address oldUbiburner, address ubiburner);\\n\\n    /**\\n    *  @dev Emitted when the amount per month required of donation is changed.\\n    *  @param oldDonationAmount previous donation Amount\\n    *  @param donationAmount new donation Amount\\n    */\\n    event donationPerMonthChanged(uint256 oldDonationAmount, uint256 donationAmount);\\n\\n    /**\\n    *  @dev Emitted when a donation it's made\\n    *  @param from who made the donation.\\n    *  @param amount amount of ETH donated.\\n    *  @param ethToUbiBurner amount of ETH sent to UBI Burner\\n    */\\n    event Donation(address indexed from, uint256 amount, uint256 ethToUbiBurner);\\n\\n    /* Constants */\\n    /// @dev Contract Maintainer\\n    address public maintainer;\\n    /// @dev Maintenance Fee expresed in tens of thousands\\n    uint public maintenanceFeeMultiplier;\\n    /// @dev ubiburner Contract\\n    address public ubiburner;\\n    /// @dev Amount per month to Enable klerosboard Features\\n    uint256 public donationPerMonth;\\n    \\n    constructor(address _ubiburner, uint _maintenanceFee, uint96 _donationPerMonth) {\\n        maintainer = msg.sender;\\n        changeMaintenanceFee(_maintenanceFee);\\n        changeUBIburner(_ubiburner);\\n        changeDonationPerMonth(_donationPerMonth);\\n    }\\n\\n    /**\\n    *  @dev Donate ETH\\n    */\\n    function donate() payable external {\\n        uint256 maintenanceFee = msg.value * maintenanceFeeMultiplier / 10000;\\n        uint256 ETHToBurnUBI = msg.value - maintenanceFee;\\n\\n        // Send ETH - maintainanceFee to ubiburner\\n        (bool successTx, ) = ubiburner.call{value: ETHToBurnUBI}(\\\"\\\");\\n        require(successTx, \\\"ETH to ubiburner fail\\\");\\n\\n        emit Donation(msg.sender, msg.value, ETHToBurnUBI);\\n    }\\n\\n    function changeMaintainer (address _maintainer) public onlyOwner {\\n        require(_maintainer != address(0), 'Maintainer could not be null');\\n        address oldMaintainer = maintainer;\\n        maintainer = _maintainer;\\n        emit MaintainerChanged(oldMaintainer, maintainer);\\n    }\\n\\n    function changeMaintenanceFee (uint _newFee) public onlyOwner {\\n        require(_newFee <= 5000, '50% it is the max fee allowed');\\n        maintenanceFeeMultiplier = _newFee;\\n        // express maintainance as a multiplier in tens of thousands .\\n        emit MaintenanceFeeChanged(maintenanceFeeMultiplier);\\n    }\\n\\n    function changeUBIburner (address _ubiburner) public onlyOwner {\\n        require(_ubiburner != address(0), 'UBIBurner could not be null');\\n        address oldUbiburner = ubiburner;\\n        ubiburner = _ubiburner;\\n        emit UBIBurnerChanged(oldUbiburner, ubiburner);\\n    }\\n\\n    function changeDonationPerMonth (uint256 _donationPerMonth) public onlyOwner {\\n        require(_donationPerMonth > 0, 'donationPerMonth should not be zero');\\n        uint256 oldDonation = donationPerMonth;\\n        donationPerMonth = _donationPerMonth;\\n        emit donationPerMonthChanged(oldDonation, donationPerMonth);\\n    }\\n\\n    function withdrawMaintenance() external {\\n        require(msg.sender == maintainer, 'Only maintainer can withdraw');\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ubiburner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maintenanceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_donationPerMonth\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethToUbiBurner\",\"type\":\"uint256\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMaintainer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMaintainer\",\"type\":\"address\"}],\"name\":\"MaintainerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maintenanceFeeMultiplier\",\"type\":\"uint256\"}],\"name\":\"MaintenanceFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldUbiburner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ubiburner\",\"type\":\"address\"}],\"name\":\"UBIBurnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDonationAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"donationAmount\",\"type\":\"uint256\"}],\"name\":\"donationPerMonthChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_donationPerMonth\",\"type\":\"uint256\"}],\"name\":\"changeDonationPerMonth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maintainer\",\"type\":\"address\"}],\"name\":\"changeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"changeMaintenanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ubiburner\",\"type\":\"address\"}],\"name\":\"changeUBIburner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationPerMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintainer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenanceFeeMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ubiburner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMaintenance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"KlerosboardSuscription","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000481b24ed5feacb37e282729b9815e27529cf9ae200000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000002c68af0bb140000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}