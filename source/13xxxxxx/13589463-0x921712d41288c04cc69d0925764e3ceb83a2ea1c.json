{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/LockedBalanceChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n// ERC20 contract interface\\ninterface Token {\\n  function balanceOf(address) external view returns (uint256);\\n  function lockedBalanceOf(address) external view returns (uint256);\\n}\\n\\ncontract LockedBalanceChecker {\\n  /* Fallback function, don't accept any ETH */\\n  fallback () external payable {\\n    revert(\\\"no payments\\\");\\n  }\\n\\t/*\\n    Check the token balance of a wallet in a token contract\\n\\n    Returns the balance of the token for user. Avoids possible errors:\\n      - return 0 on non-contract address\\n      - returns 0 if the contract doesn't implement balanceOf\\n  */\\n\\tfunction tokenBalance(address user, address token) public view returns (uint) {\\n    // check if token is actually a contract\\n    uint256 tokenCode;\\n    assembly { tokenCode := extcodesize(token) } // contract code size\\n\\n    // is it a contract and does it implement balanceOf\\n    if (tokenCode > 0) {\\n      return Token(token).balanceOf(user);\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\tfunction lockedTokenBalance(address user, address token) public view returns (uint) {\\n\\t\\t// check if token is actually a contract\\n\\t\\tuint256 tokenCode;\\n\\t\\tassembly { tokenCode := extcodesize(token) } // contract code size\\n\\n\\t\\t// is it a contract and does it implement balanceOf\\n\\t\\tif (tokenCode > 0) {\\n\\t\\t\\treturn Token(token).lockedBalanceOf(user);\\n\\t\\t} else {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t}\\n\\n  /*\\n    Check the token balances of a wallet for multiple tokens.\\n    Pass 0x0 as a \\\"token\\\" address to get ETH balance.\\n\\n    Possible error throws:\\n      - extremely large arrays for user and or tokens (gas cost too high)\\n\\n    Returns a one-dimensional that's user.length * tokens.length long. The\\n    array is ordered by all of the 0th users token balances, then the 1th\\n    user, and so on.\\n  */\\n  function balances(address[] memory users, address[] memory tokens) external view returns (uint[] memory) {\\n    uint[] memory addrBalances = new uint[](tokens.length * users.length);\\n    for(uint i = 0; i < users.length; i++) {\\n      for (uint j = 0; j < tokens.length; j++) {\\n        uint addrIdx = j + tokens.length * i;\\n        if (tokens[j] != address(0x0)) {\\n          addrBalances[addrIdx] = tokenBalance(users[i], tokens[j]);\\n        } else {\\n          addrBalances[addrIdx] = users[i].balance; // ETH balance\\n        }\\n      }\\n    }\\n    return addrBalances;\\n  }\\n\\tfunction lockedBalances(address[] memory users, address token) external view returns (uint[] memory) {\\n\\t\\tuint[] memory addrBalances = new uint[](users.length);\\n\\t\\tfor(uint i = 0; i < users.length; i++) {\\n\\t\\t\\t\\taddrBalances[i] = lockedTokenBalance(users[i], token);\\n\\t\\t}\\n\\t\\treturn addrBalances;\\n\\t}\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"lockedTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LockedBalanceChecker","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}