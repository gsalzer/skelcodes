{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"Daemonica.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// https://kanon.art - K21\\n// https://daemonica.io\\n//\\n//\\n//                                   $@@@@@@@@@@@$$$\\n//                               $$@@@@@@$$$$$$$$$$$$$$##\\n//                           $$$$$$$$$$$$$$$$$#########***\\n//                        $$$$$$$$$$$$$$$#######**!!!!!!\\n//                     ##$$$$$$$$$$$$#######****!!!!=========\\n//                   ##$$$$$$$$$#$#######*#***!!!=!===;;;;;\\n//                 *#################*#***!*!!======;;;:::\\n//                ################********!!!!====;;;:::~~~~~\\n//              **###########******!!!!!!==;;;;::~~~--,,,-~\\n//             ***########*#*******!*!!!!====;;;::::~~-,,......,-\\n//            ******#**********!*!!!!=!===;;::~~~-,........\\n//           ***************!*!!!!====;;:::~~-,,..........\\n//         !************!!!!!!===;;::~~--,............\\n//         !!!*****!!*!!!!!===;;:::~~--,,..........\\n//        =!!!!!!!!!=!==;;;::~~-,,...........\\n//        =!!!!!!!!!====;;;;:::~~--,........\\n//       ==!!!!!!=!==;=;;:::~~--,...:~~--,,,..\\n//       ===!!!!!=====;;;;;:::~~~--,,..#*=;;:::~--,.\\n//       ;=============;;;;;;::::~~~-,,...$$###==;;:~--.\\n//      :;;==========;;;;;;::::~~~--,,....@@$$##*!=;:~-.\\n//      :;;;;;===;;;;;;;::::~~~--,,...$$$$#*!!=;~-\\n//       :;;;;;;;;;;:::::~~~~---,,...!*##**!==;~,\\n//       :::;:;;;;:::~~~~---,,,...~;=!!!!=;;:~.\\n//       ~:::::::::::::~~~~~---,,,....-:;;=;;;~,\\n//        ~~::::::::~~~~~~~-----,,,......,~~::::~-.\\n//         -~~~~~~~~~~~~~-----------,,,.......,-~~~~~,.\\n//          ---~~~-----,,,,,........,---,.\\n//           ,,--------,,,,,,.........\\n//             .,,,,,,,,,,,,......\\n//                ...............\\n//                    .........\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\nimport \\\"./OccultMath.sol\\\";\\nimport \\\"./Helpers.sol\\\";\\n\\n\\ninterface IBase64 is IERC721Enumerable, IERC721Metadata {}\\n\\ninterface IDaemonica {\\n  function getTau(address _hodler) external view returns (string[] memory);\\n  function getTheta(uint256 _tokenId, uint8 _modulo, string[] memory _tau) external view returns (uint8[8][8] memory);\\n  function isQualified(address _hodler) external view returns (bool);\\n}\\n\\n\\n/** @title Daemonica contract\\n  * @author @0xAnimist\\n  * @notice \\\"Daemonica generates an ever-changing 8 x 8 numerical matrix from base64-encoded\\n  * onchain art. Each matrix is associated with an \\\"Entity,\\\" which in turn can cast \\\"Xe_ntities.\\\"\\n  * The n dimensional relationships that exist within and between each Entity and Xe_ntity can be\\n  * freely interpreted and understood. Use Daemonica however you wish.\\\" –artist\\n  */\\ncontract Daemonica is Ownable, ReentrancyGuard {\\n\\n  uint8 public totalDims = 0;\\n\\n  uint8 public totalAddedDims = 0;\\n  uint8 public maxAddableDims = 128;\\n  mapping (string =\\u003e address) public dimAdder;\\n\\n\\n  uint8 public totalOwnerAddedDims = 0;\\n  uint8 public maxOwnerAddableDims = 128;\\n  bool public presale = true;\\n\\n  address public artist;\\n  uint256 public artistBalance = 0;\\n  uint256 public ownerBalance = 0;\\n\\n  mapping (string =\\u003e IBase64) private dims;\\n  mapping (uint8 =\\u003e string) private symbolStringByIndex;\\n  mapping (string =\\u003e uint8) private symbolIndexByString;\\n\\n\\n  /** @notice Allows only the artist to broadcast a message\\n    * @param  _artist Artists\\u0027s address\\n    * @param  _message Artist\\u0027s message\\n    */\\n  event Broadcast(address indexed _artist, string _message);\\n\\n\\n  /** @notice Only the artist can call function\\n    */\\n  modifier onlyArtist() {\\n    require(artist == _msgSender(), \\\"caller is not the artist\\\");\\n    _;\\n  }\\n\\n  /** @notice Only the artist or owner can call function\\n    */\\n  modifier onlyAdmin() {\\n    require(artist == _msgSender() || owner() == _msgSender(), \\\"caller is not the artist or owner\\\");\\n    _;\\n  }\\n\\n\\n  /** @notice Requires dim with symbol _symbol to be initialized\\n    * @param  _symbol Symbol associated with the dim\\u0027s contract\\n    */\\n  modifier dimExists(string memory _symbol) {\\n    require(Helpers.compareStrings(symbolStringByIndex[symbolIndexByString[_symbol]],_symbol), \\\"dim not exist\\\");\\n    _;\\n  }\\n\\n\\n  /** @notice Allows only the artist to broadcast a message\\n    * @param  _message Artist\\u0027s message\\n    */\\n  function artistBroadcast(string memory _message) external onlyArtist {\\n    emit Broadcast(msg.sender, _message);\\n  }\\n\\n\\n  /** @notice Allows the owner to set the presale flag\\n    * @param  _value the new value\\n    */\\n  function setPresale(bool _value) external onlyOwner {\\n    presale = _value;\\n  }\\n\\n\\n  /** @notice Returns lists of all dims by symbol and address\\n    * @dev    different contracts with the same symbol cannot be registered, only the first registered will be accepted\\n    * @return string array of each dim symbol\\n    * @return address array of each dim contract address\\n    */\\n  function getDims() external view returns (string[] memory, address[] memory) {\\n    string[] memory symbols = new string[](totalDims);\\n    address[] memory addresses = new address[](totalDims);\\n    for(uint8 i = 0; i \\u003c totalDims; i++){\\n      symbols[i] = symbolStringByIndex[i];\\n      addresses[i] = address(dims[symbols[i]]);\\n    }\\n    return (symbols, addresses);\\n  }\\n\\n\\n  /** @notice Registers a new dim\\n    * @dev    different contracts with the same symbol cannot be registered, only the first registered will be accepted\\n    * @param  _address  Contract address of dim to register\\n    */\\n  function registerDim(address _address) internal {\\n    IBase64 dim = IBase64(_address);\\n\\n    //name the new dim symbolically and increment the dims counter\\n    string memory symbol = dim.symbol();\\n    require(!Helpers.compareStrings(dim.symbol(), \\\"\\\"), \\\"requires symbol\\\");\\n    require(!Helpers.compareStrings(symbolStringByIndex[symbolIndexByString[symbol]],symbol), \\\"symbol already registered\\\");\\n\\n    //ensure the new dim is base64 encoded\\n    require(isValidLootverseURI(dim.tokenURI(1)));//test it against the first token\\n\\n    symbolStringByIndex[totalDims] = symbol;\\n    symbolIndexByString[symbol] = totalDims;\\n    totalDims++;\\n\\n    dims[symbol] = dim;\\n    dimAdder[symbol] = _msgSender();\\n  }\\n\\n\\n  /** @notice Allows owner to add a dim with a quota of maxOwnerAddableDims\\n    * @param  _address  Contract address of dim to register\\n    */\\n  function adminAddDim(address _address) external onlyAdmin {\\n    require(totalOwnerAddedDims \\u003c maxOwnerAddableDims, \\\"owner quota exceeded\\\");\\n    registerDim(_address);\\n    totalOwnerAddedDims++;\\n  }\\n\\n\\n  /** @notice Anyone can add a valid dim for 1 ether\\n    * @param  _address  Contract address of dim to register\\n    */\\n  function addDim(address _address) external payable nonReentrant {\\n    require(!presale, \\\"not yet\\\");\\n    require(msg.value \\u003e= 1 ether, \\\"costs 1 eth\\\");\\n    require(totalAddedDims \\u003c maxAddableDims, \\\"public quota exceeded\\\");\\n    registerDim(_address);\\n    totalAddedDims++;\\n    ownerBalance += msg.value/2;\\n    artistBalance += msg.value/2;//TODO (msg.value - msg.value/2);\\n  }\\n\\n  /** @notice Refunds a dimAdder if owner has to delete the dim the added in case\\n    * of emergency\\n    * @param  _symbol Symbol of the dim being removed that needs refunding\\n    */\\n  function refund(string memory _symbol) internal {\\n    require(address(this).balance \\u003e= 1 ether, \\\"owner cannot afford refund\\\");\\n    payable(dimAdder[_symbol]).transfer(1 ether);\\n\\n    uint256 half = (1 ether)/2;\\n    if(ownerBalance \\u003e= half){\\n      if(artistBalance \\u003e= half){\\n        ownerBalance -= half;\\n        artistBalance -= half;\\n      }else{\\n        ownerBalance -= (1 ether) - artistBalance;\\n        artistBalance = 0;\\n      }\\n    }else{\\n      artistBalance -= (1 ether) - ownerBalance;\\n      ownerBalance = 0;\\n    }\\n  }\\n\\n\\n  /** @notice Allows owner to remove a dim and refund the dimAdder\\n    * @dev  Emergency use only\\n    * @param  _symbol Symbol of the dim to remove\\n    */\\n  function adminRemoveDim(string memory _symbol) external onlyAdmin dimExists(_symbol) {\\n    require(totalDims \\u003e 0, \\\"no dims\\\");\\n\\n    refund(_symbol);\\n\\n    delete(dims[_symbol]);//delete the interface\\n    //refactor the mappings\\n    for(uint8 i = symbolIndexByString[_symbol]; i \\u003c totalDims; i++){\\n      symbolStringByIndex[i] = symbolStringByIndex[i+1];\\n      symbolIndexByString[symbolStringByIndex[i]] = i;\\n    }\\n    //delete the mappings\\n    delete(symbolIndexByString[_symbol]);\\n    delete(symbolStringByIndex[totalDims]);\\n    //decrement the count\\n    totalDims--;\\n\\n\\n  }\\n\\n\\n  /** @notice Returns true if the given tokenURI() return value has a valid base64 header, payload, and its contract has a valid symbol\\n    * @param  _str  Return value from tokenURI() to test\\n    * @return  true or false\\n    */\\n  function isValidLootverseURI(string memory _str) internal pure returns (bool) {\\n    require(Helpers.compareStrings(\\\"data:application/json;base64,\\\", Helpers.substring(_str, 0, 29)), \\u0027Invalid prefix\\u0027);\\n    string memory payload = Helpers.substring(_str, 29, 0);\\n    require( OccultMath.isValidBase64String(payload), \\\"non-base64 chars\\\");\\n    return true;\\n  }\\n\\n\\n  /** @notice Returns true if _hodler holds tokens from any dim in _animolist\\n    * @param  _hodler would be _hodler\\n    * @return True or false\\n    */\\n  function isQualified(address _hodler) external view returns (bool){\\n    for(uint8 i = 0; i \\u003c totalDims; i++){\\n      if(dims[symbolStringByIndex[i]].balanceOf(_hodler) \\u003e 0){\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n\\n  /** @notice 𝜏 = tau, a rarely used Greek symbol, *facta bruta* :( 𝜏 symbolizes  ( life | regeneration | resurrection | the power to find new life paths or choices )+. A striking phonetic relationship exists between 𝜏 and \\\"tao\\\", the Chinese term for ( the way | the true path | inner compass )+. *Hic et nunc*, the Daemonican way is death * life, or θ𝜏=X(ξ).\\n    * @dev    Returns any dims in which the _hodler owns at least one token of any tokenId\\n    * @param  _hodler entity hodler\\n    * @return A string array of the symbols of one or more tokens from each dim held by the hodler\\n    */\\n  function getTau(address _hodler) public view returns (string[] memory){\\n    string[] memory tau;\\n    uint8 count = 0;\\n\\n    if(_hodler == address(0)){//no hodler, default to first dim\\n      tau = new string[](1);\\n      tau[count++] = symbolStringByIndex[0];\\n      return tau;\\n    }else{\\n      tau = new string[](totalDims);\\n\\n      for(uint8 i = 0; i \\u003c totalDims; i++){\\n        if(dims[symbolStringByIndex[i]].balanceOf(_hodler) \\u003e 0){\\n          tau[count++] = symbolStringByIndex[i];\\n        }\\n      }\\n\\n      if(count == 0){//default to first dim\\n        string[] memory output = new string[](1);\\n        output[0] = symbolStringByIndex[0];\\n        return output;\\n      }else{//splice to length\\n        string[] memory output = new string[](count);\\n        for(uint8 i = 0; i \\u003c count; i++){\\n          output[i] = tau[i];\\n        }\\n        return output;\\n      }\\n    }\\n  }\\n\\n\\n  /** @notice θ = theta, symbol of change in angle or rotation. *Thanatos* (death) hides in this symbol. There is no ξ without θ, no *existentialia* without change. θ is also therefore a talismanic sign for passage to the “underworld”, to a realm closer to life’s origins.\\n    * @dev    Returns theta, the 8x8 base-_modulo frequency matrix of an entity\\n    * @param  _tokenId  tokenId of the entity being queried\\n    * @param  _modulo   caps all values at base-_modulo\\n    * @param  _tau      tau is the dimensions of _tokenId\\u0027s hodler\\n    */\\n  function getTheta(uint256 _tokenId, uint8 _modulo, string[] memory _tau) external view returns (uint8[8][8] memory) {\\n    bytes[] memory bytePayloads = new bytes[](_tau.length);\\n\\n    for(uint8 i = 0; i \\u003c _tau.length; i++){\\n      bytePayloads[i] = bytes(Helpers.substring(dims[_tau[i]].tokenURI(_tokenId), 29, 0));\\n    }\\n\\n    uint8[8][8] memory thetas = OccultMath.sixtyFourier(bytePayloads, _modulo);\\n\\n    return thetas;\\n  }\\n\\n\\n  /** @notice Allows owner to withdraw available balance\\n    */\\n  function ownerWithdrawAvailableBalance() public nonReentrant onlyOwner {\\n      uint256 b = ownerBalance;\\n      ownerBalance = 0;\\n      payable(msg.sender).transfer(b);\\n  }\\n\\n  /** @notice Allows artist to withdraw available balance\\n    */\\n  function artistWithdrawAvailableBalance() public nonReentrant onlyArtist {\\n      uint256 b = artistBalance;\\n      artistBalance = 0;\\n      payable(msg.sender).transfer(b);\\n  }\\n\\n\\n  /** @notice Daemonica constructor\\n    * @param _artist The Ethereum address of the artist\\n    */\\n  constructor (address _artist) {\\n    artist = _artist;\\n  }\\n\\n\\n}\\n\"},\"Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// https://kanon.art - K21\\n// https://daemonica.io\\n//\\n//\\n//                                   $@@@@@@@@@@@$$$\\n//                               $$@@@@@@$$$$$$$$$$$$$$##\\n//                           $$$$$$$$$$$$$$$$$#########***\\n//                        $$$$$$$$$$$$$$$#######**!!!!!!\\n//                     ##$$$$$$$$$$$$#######****!!!!=========\\n//                   ##$$$$$$$$$#$#######*#***!!!=!===;;;;;\\n//                 *#################*#***!*!!======;;;:::\\n//                ################********!!!!====;;;:::~~~~~\\n//              **###########******!!!!!!==;;;;::~~~--,,,-~\\n//             ***########*#*******!*!!!!====;;;::::~~-,,......,-\\n//            ******#**********!*!!!!=!===;;::~~~-,........\\n//           ***************!*!!!!====;;:::~~-,,..........\\n//         !************!!!!!!===;;::~~--,............\\n//         !!!*****!!*!!!!!===;;:::~~--,,..........\\n//        =!!!!!!!!!=!==;;;::~~-,,...........\\n//        =!!!!!!!!!====;;;;:::~~--,........\\n//       ==!!!!!!=!==;=;;:::~~--,...:~~--,,,..\\n//       ===!!!!!=====;;;;;:::~~~--,,..#*=;;:::~--,.\\n//       ;=============;;;;;;::::~~~-,,...$$###==;;:~--.\\n//      :;;==========;;;;;;::::~~~--,,....@@$$##*!=;:~-.\\n//      :;;;;;===;;;;;;;::::~~~--,,...$$$$#*!!=;~-\\n//       :;;;;;;;;;;:::::~~~~---,,...!*##**!==;~,\\n//       :::;:;;;;:::~~~~---,,,...~;=!!!!=;;:~.\\n//       ~:::::::::::::~~~~~---,,,....-:;;=;;;~,\\n//        ~~::::::::~~~~~~~-----,,,......,~~::::~-.\\n//         -~~~~~~~~~~~~~-----------,,,.......,-~~~~~,.\\n//          ---~~~-----,,,,,........,---,.\\n//           ,,--------,,,,,,.........\\n//             .,,,,,,,,,,,,......\\n//                ...............\\n//                    .........\\n\\npragma solidity ^0.8.0;\\n\\n\\n/** @title Daemonica helper functions\\n  * @author @0xAnimist\\n  * @notice Misc support for Daemonica contract suite\\n  */\\nlibrary Helpers{\\n\\n  /** @notice Converts boolean to a string\\n    * @param  value The boolean value\\n    * @return A string that reads \\\"true\\\" or \\\"false\\\"\\n    */\\n  function boolToString(bool value) public pure returns (string memory) {\\n    if(value){\\n      return \\\"true\\\";\\n    }else{\\n      return \\\"false\\\";\\n    }\\n  }\\n\\n  /** @notice Converts uint256 to a string\\n    * @param  value The uint256 value\\n    * @return A string that represents the numerical value of the input\\n    */\\n  function toString(uint256 value) public pure returns (string memory) {\\n  // Inspired by OraclizeAPI\\u0027s implementation - MIT license\\n  // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n      if (value == 0) {\\n          return \\\"0\\\";\\n      }\\n      uint256 temp = value;\\n      uint256 digits;\\n      while (temp != 0) {\\n          digits++;\\n          temp /= 10;\\n      }\\n      bytes memory buffer = new bytes(digits);\\n      while (value != 0) {\\n          digits -= 1;\\n          buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n          value /= 10;\\n      }\\n      return string(buffer);\\n  }\\n\\n  /** @notice Converts uint8 to a string\\n    * @param  value The uint8 value\\n    * @return A string that represents the numerical value of the input\\n    */\\n  function toString8(uint8 value) public pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"00\\\";\\n    }\\n\\n    uint8 temp = value;\\n    uint8 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer;\\n    if(digits == 1){\\n      buffer = new bytes(2);\\n      buffer[0] = bytes1(uint8(48));\\n      buffer[1] = bytes1(uint8(48 + uint8(value % 10)));\\n    }else{\\n      buffer = new bytes(digits);\\n      while (value != 0) {\\n        digits -= 1;\\n        buffer[digits] = bytes1(uint8(48 + uint8(value % 10)));\\n        value /= 10;\\n      }\\n    }\\n\\n    return string(buffer);\\n  }\\n\\n\\n\\n  /** @notice Returns a _delimiter delimited string of all the values in an 8 uint8 long array\\n    * @param  _array Array of uint8 values to concatenate\\n    * @param  _delimiter String to delimit each value\\n    * @return Concatenated string of all the values delimited by _delimiter\\n    */\\n  function stringifyRow(uint8[8] memory _array, string memory _delimiter) internal pure returns (string memory) {\\n    string memory output = string(abi.encodePacked(\\n      \\u0027\\u003ctspan x=\\\"153\\\"\\u003e\\u0027,toString8(_array[0]),\\u0027\\u003c/tspan\\u003e\\u0027,_delimiter,\\n      \\u0027\\u003ctspan x=\\\"198\\\"\\u003e\\u0027,toString8(_array[1]),\\u0027\\u003c/tspan\\u003e\\u0027,_delimiter,\\n      \\u0027\\u003ctspan x=\\\"243\\\"\\u003e\\u0027,toString8(_array[2]),\\u0027\\u003c/tspan\\u003e\\u0027,_delimiter\\n    ));\\n\\n    output = string(abi.encodePacked(\\n      output,\\n      \\u0027\\u003ctspan x=\\\"288\\\"\\u003e\\u0027,toString8(_array[3]),\\u0027\\u003c/tspan\\u003e\\u0027,_delimiter,\\n      \\u0027\\u003ctspan x=\\\"333\\\"\\u003e\\u0027,toString8(_array[4]),\\u0027\\u003c/tspan\\u003e\\u0027,_delimiter,\\n      \\u0027\\u003ctspan x=\\\"378\\\"\\u003e\\u0027,toString8(_array[5]),\\u0027\\u003c/tspan\\u003e\\u0027,_delimiter\\n    ));\\n\\n    return string(abi.encodePacked(\\n      output,\\n      \\u0027\\u003ctspan x=\\\"423\\\"\\u003e\\u0027,toString8(_array[6]),\\u0027\\u003c/tspan\\u003e\\u0027,_delimiter,\\n      \\u0027\\u003ctspan x=\\\"468\\\"\\u003e\\u0027,toString8(_array[7]),\\u0027\\u003c/tspan\\u003e\\u0027,_delimiter\\n    ));\\n  }\\n\\n  /** @notice Compares two strings\\n    * @param  _a First string to compare\\n    * @param  _b Second string to compare\\n    * @return True if equal, false if not\\n    */\\n  function compareStrings(string memory _a, string memory _b) public pure returns (bool) {\\n    return (keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b))));\\n  }\\n\\n\\n  /** @notice Returns a substring of the given string\\n    * @param  str The string\\n    * @param  startIndex Starting index determining the substring to return\\n    * @param  endIndex Ending index determining the substring to return\\n    * @return Substring parsed from the string\\n    */\\n  function substring(string memory str, uint startIndex, uint endIndex) public pure returns (string memory) {\\n      bytes memory strBytes = bytes(str);\\n      if(endIndex == 0){\\n        endIndex = strBytes.length;\\n      }\\n      bytes memory result = new bytes(endIndex-startIndex);\\n      for(uint i = startIndex; i \\u003c endIndex; i++) {\\n          result[i-startIndex] = strBytes[i];\\n      }\\n      return string(result);\\n  }\\n\\n\\n  /** @notice Returns a pseudorandom number from a string input\\n    * @param  input A string to seed the pseudorandom number generator\\n    * @return  A pseudorandom uint256 number based on the input string\\n    */\\n  function random(string memory input) internal pure returns (uint256) {\\n      return uint256(keccak256(abi.encodePacked(input)));\\n  }\\n\\n\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``\\u0027s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"},\"IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"OccultMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// https://kanon.art - K21\\n// https://daemonica.io\\n//\\n//\\n//                                   $@@@@@@@@@@@$$$\\n//                               $$@@@@@@$$$$$$$$$$$$$$##\\n//                           $$$$$$$$$$$$$$$$$#########***\\n//                        $$$$$$$$$$$$$$$#######**!!!!!!\\n//                     ##$$$$$$$$$$$$#######****!!!!=========\\n//                   ##$$$$$$$$$#$#######*#***!!!=!===;;;;;\\n//                 *#################*#***!*!!======;;;:::\\n//                ################********!!!!====;;;:::~~~~~\\n//              **###########******!!!!!!==;;;;::~~~--,,,-~\\n//             ***########*#*******!*!!!!====;;;::::~~-,,......,-\\n//            ******#**********!*!!!!=!===;;::~~~-,........\\n//           ***************!*!!!!====;;:::~~-,,..........\\n//         !************!!!!!!===;;::~~--,............\\n//         !!!*****!!*!!!!!===;;:::~~--,,..........\\n//        =!!!!!!!!!=!==;;;::~~-,,...........\\n//        =!!!!!!!!!====;;;;:::~~--,........\\n//       ==!!!!!!=!==;=;;:::~~--,...:~~--,,,..\\n//       ===!!!!!=====;;;;;:::~~~--,,..#*=;;:::~--,.\\n//       ;=============;;;;;;::::~~~-,,...$$###==;;:~--.\\n//      :;;==========;;;;;;::::~~~--,,....@@$$##*!=;:~-.\\n//      :;;;;;===;;;;;;;::::~~~--,,...$$$$#*!!=;~-\\n//       :;;;;;;;;;;:::::~~~~---,,...!*##**!==;~,\\n//       :::;:;;;;:::~~~~---,,,...~;=!!!!=;;:~.\\n//       ~:::::::::::::~~~~~---,,,....-:;;=;;;~,\\n//        ~~::::::::~~~~~~~-----,,,......,~~::::~-.\\n//         -~~~~~~~~~~~~~-----------,,,.......,-~~~~~,.\\n//          ---~~~-----,,,,,........,---,.\\n//           ,,--------,,,,,,.........\\n//             .,,,,,,,,,,,,......\\n//                ...............\\n//                    .........\\n\\npragma solidity ^0.8.0;\\n\\n\\n/*\\n * @title OccultMath library\\n * @author @0xAnimist\\n * @notice Unsafe Math\\n */\\nlibrary OccultMath {\\n\\n  string public constant defaultTic = \\\":\\\";\\n  string public constant defaultNthPrimeOpen = \\\"(\\\";\\n  string public constant defaultNthPrimeClose = \\\")\\\";\\n  string public constant defaultDeplex = \\\"-P\\\";\\n\\n  struct Index {\\n    uint8 i;\\n    uint8 j;\\n  }\\n\\n\\n  /** @notice Slices an array\\n    * @param _array The array\\n    * @param _length The length of the resulting array\\n    * @return An array with the first _length values of the input array, _array\\n    */\\n  function slice(uint256[] memory _array, uint256 _length) public pure returns (uint256[] memory){\\n    uint256[] memory output = new uint256[](_length);\\n\\n    for (uint256 i = 0; i \\u003c _length; i++) {\\n        output[i] = _array[i];\\n    }\\n\\n    return output;\\n  }\\n\\n\\n  /** @notice Square root of a number\\n    * @param y The number\\n    * @return z Square root of the number, y\\n    */\\n  function sqrt(uint256 y) public pure returns (uint256 z) {\\n      if (y \\u003e 3) {\\n          z = y;\\n          uint256 x = y / 2 + 1;\\n          while (x \\u003c z) {\\n              z = x;\\n              x = (y / x + x) / 2;\\n          }\\n      } else if (y != 0) {\\n          z = 1;\\n      }\\n  }\\n\\n\\n  /** @notice Returns the smallest factor of a number\\n    * @param _number The number\\n    * @return Smallest factor of the number, _number\\n    */\\n  function smallestFactor(uint _number) public pure returns (uint256){\\n    require(_number \\u003e= 2, \\\"Number must be greater than or equal to 2\\\");\\n\\n    if((_number % 2) == 0){\\n      return 2;\\n    }\\n\\n    uint end = sqrt(_number);\\n\\n\\t\\tfor(uint i = 3; i \\u003c= end; i += 2) {\\n\\t\\t\\tif (_number % i == 0)\\n\\t\\t\\t\\treturn i;\\n\\t\\t}\\n\\t\\treturn _number;\\n\\t}\\n\\n\\n  /** @notice Returns an array of the factors of a number\\n    * @param _number The number\\n    * @return Array of factors of the number, _number\\n    */\\n  function factorize(uint256 _number) public pure returns (uint256[] memory){\\n    uint n = _number;\\n    uint[] memory factors = new uint[](100);\\n    uint len = 0;\\n\\n\\t\\twhile (n \\u003e 1) {\\n\\t\\t\\tuint smallest = smallestFactor(n);\\n      require(len \\u003c 100, \\\"factor overflow\\\");\\n      factors[len] = smallest;\\n      len = len + 1;\\n      n = n / smallest;\\n\\t\\t}\\n\\n    uint[] memory output = slice(factors, len);\\n\\n\\t\\treturn output;\\n  }\\n\\n\\n  /** @notice Returns an array of the prime numbers between _first and _last\\n    * @param _first The smallest number to consider\\n    * @param _last The largest number to consider\\n    * @return Array of prime numbers between _first and _last\\n    */\\n  function listPrimes(uint256 _first, uint256 _last) public pure returns (uint256[] memory){\\n    // Validate input and initialize storage for primes\\n    require(_first \\u003e 1, \\\"The starting number must be a positive integer greater than 1\\\");\\n    require(_last \\u003e _first, \\\"The range of search values must be greater than 0\\\");\\n\\n    uint firstPrime = 2;\\n\\n    uint len = _last - firstPrime + 1;\\n    uint256[] memory list = new uint256[](len);\\n\\n    // Generate list of all natural numbers in [_first, _first+_total]\\n    for(uint i = 0; i \\u003c len; i++){\\n      list[i] = i + firstPrime;\\n    }\\n\\n    // Find primes and eliminate their multiples\\n    uint256 limit = sqrt(len);\\n    for(uint256 i = 0; i \\u003c= limit; i++) {\\n      if(list[i] != 0) {\\n        for(uint256 pos = i + list[i]; pos \\u003c len; pos += list[i]) {\\n          list[pos] = 0;\\n        }\\n      }\\n    }\\n\\n    uint256 primesTotal = 0;\\n    uint256 primesIndex = 0;\\n\\n    for(uint256 i = 0; i \\u003c len; i++){\\n      if(list[i] != 0){\\n        primesTotal++;\\n      }\\n    }\\n\\n    uint256[] memory primesList = new uint256[](primesTotal);\\n\\n    // Populate primes[] with all prime numbers in order\\n    for (uint256 i = 0; i \\u003c len; i++) {\\n      if(list[i] != 0){\\n        primesList[primesIndex++] = list[i];\\n      }\\n    }\\n\\n    // Trim primes from given start and return\\n    if (_first != 2) {\\n      uint returnTotal = 0;\\n      for(uint i = 0; i \\u003c primesTotal; i++){\\n        if(primesList[i] \\u003e= _first){\\n          returnTotal = returnTotal + 1;\\n        }\\n      }\\n\\n      uint256[] memory sliced = new uint256[](returnTotal);\\n      uint diff = primesTotal - returnTotal;\\n\\n      for (uint256 i = 0; i \\u003c returnTotal; i++) {\\n        sliced[i] = primesList[i+diff];\\n      }\\n      return sliced;\\n    }\\n\\n    return primesList;\\n  }\\n\\n\\n  /** @notice Returns the base-_base syzygetic pair of a given 8 x 8 matrix of uint8 values\\n    * @param _entity The matrix of an entity\\n    * @param _base The numerical base of the operation\\n    * @return The base-_base syzygetic pair matrix\\n    */\\n  function syzygy888(uint8[8][8] memory _entity, uint8 _base) public pure returns (uint8[8][8] memory) {\\n    uint8[8][8] memory pair;\\n    for(uint8 i = 0; i \\u003c 8; i++){\\n      for(uint8 j = 0; j \\u003c 8; j++){\\n        require(_entity[i][j] \\u003c _base, \\\"entity value out of range\\\");\\n        pair[i][j] = _base - 1 - _entity[i][j];\\n      }\\n    }\\n    return pair;\\n  }\\n\\n\\n  /** @notice Returns the base-_base syzygetic pair of a given uint8 value\\n    * @param _i The uint8 value\\n    * @param _base The numerical base of the operation\\n    * @return The base-_base syzygetic pair value\\n    */\\n  function getSyzygyPartner8(uint8 _i, uint8 _base) public pure returns (uint8) {\\n    require(_i \\u003c= _base, \\\"pair out of range\\\");\\n    return _base - 1 - _i;\\n  }\\n\\n\\n  /** @notice Returns the absolute value of the difference between uint8 values in\\n    * corresponding cells in two 8 x 8 matrices\\n    * @param _a The first matrix\\n    * @param _b The second matrix\\n    * @return The matrix of absolute value differences\\n    */\\n  function sub888(uint8[8][8] memory _a, uint8[8][8] memory _b) public pure returns (uint8[8][8] memory) {\\n    uint8[8][8] memory diff;\\n    for(uint8 i = 0; i \\u003c 8; i++){\\n      for(uint8 j = 0; j \\u003c 8; j++){\\n        if(_a[i][j] \\u003e= _b[i][j]){\\n          diff[i][j] = _a[i][j] - _b[i][j];\\n        }else{\\n          diff[i][j] = _b[i][j] - _a[i][j];\\n        }\\n      }\\n    }\\n    return diff;\\n\\n  }\\n\\n\\n\\n  /** @notice Implements the canonical version of D.C. Barker\\u0027s Tic Xenotation\\n    * @param _number The number to encode\\n    * @return The encoded string value\\n    */\\n  function encodeTX(uint256 _number) public view returns (string memory) {\\n    return encodeTX(_number, defaultTic, defaultNthPrimeOpen, defaultNthPrimeClose, defaultDeplex);\\n  }\\n\\n\\n  /** @notice Implements a customizable version of D.C. Barker\\u0027s Tic Xenotation\\n    * @param _number The number to encode\\n    * @param tic The tic string\\n    * @param nthPrimeOpen Open parenthesis\\n    * @param nthPrimeClose Close parenthesis\\n    * @param deplexToken Deplex token\\n    * @return The encoded string value\\n    */\\n  function encodeTX(\\n    uint256 _number,\\n    string memory tic,//canonically \\\":\\\"\\n    string memory nthPrimeOpen,//canonically \\\"(\\\"\\n    string memory nthPrimeClose,//canonically \\\")\\\"\\n    string memory deplexToken//canonically \\\"-P\\\"\\n  ) public view returns (string memory) {\\n    //zero\\n    if(_number == 0){\\n      return string(abi.encodePacked(nthPrimeOpen, nthPrimeOpen, deplexToken, nthPrimeClose, nthPrimeClose, tic));\\n    }\\n\\n    //one\\n    if(_number == 1){\\n      return string(abi.encodePacked(nthPrimeOpen, deplexToken, nthPrimeClose, tic));\\n    }\\n\\n    //1st prime\\n    if(_number == 2){\\n      return tic;\\n    }\\n\\n    //2nd prime\\n    if(_number == 3){\\n      return string(abi.encodePacked(nthPrimeOpen, tic, nthPrimeClose));\\n    }\\n\\n    //initialize primes\\n    uint256[] memory primes = listPrimes(2, _number);\\n\\n    //initialize hyprimes\\n    uint256[] memory hyprimes = new uint256[](primes[primes.length-1]+1);\\n    for(uint256 i = 0; i \\u003c primes.length; i++){\\n      hyprimes[primes[i]] = i+1; //+1 because primes is 0-based array and hyprimes is 1-based\\n    }\\n\\n    if(primes[primes.length-1] == _number){//ie. if _number is prime it would be the last in the primes array\\n      //nth prime\\n      uint256 ordinate = hyprimes[_number];\\n\\n      string memory output;\\n\\n      if(hyprimes[ordinate] != 0){//ie. if ordinate is prime\\n        //_number is hyprime\\n        output = string(\\n          abi.encodePacked(\\n            encodeTX(\\n              ordinate,\\n              tic,\\n              nthPrimeOpen,\\n              nthPrimeClose,\\n              deplexToken\\n            )));\\n      }else{\\n        //_number is !hyprime\\n        uint[] memory ordinateFactors = factorize(ordinate);\\n\\n        for(uint i = 0; i \\u003c ordinateFactors.length; i++){\\n          output = string(\\n            abi.encodePacked(\\n              encodeTX(\\n                ordinateFactors[i],\\n                tic,\\n                nthPrimeOpen,\\n                nthPrimeClose,\\n                deplexToken\\n              ), output));\\n        }\\n      }\\n      return string(abi.encodePacked(nthPrimeOpen, output, nthPrimeClose));\\n    }else{\\n      uint[] memory factors = factorize(_number);\\n      string memory output = encodeTX(\\n        factors[0],\\n        tic,\\n        nthPrimeOpen,\\n        nthPrimeClose,\\n        deplexToken\\n      );\\n\\n      for(uint i = 1; i \\u003c factors.length; i++){\\n        //encode left to right from the largest factor to the smallest\\n        output = string(\\n          abi.encodePacked(\\n            encodeTX(\\n              factors[i],\\n              tic,\\n              nthPrimeOpen,\\n              nthPrimeClose,\\n              deplexToken\\n            ), output));\\n      }\\n\\n      return output;\\n    }\\n  }\\n\\n\\n  /** @notice Returns the 2d base64 8 x 8 alphanumeric gematria matrix\\n    * @return The Gematrix\\n    */\\n  function getGEMATRIX() public pure returns (uint8[8][8] memory){\\n\\n    uint8[8][8] memory GEMATRIX = [\\n      [ 65,  66,  67,  68,  69,  70,  71,  72], // A B C D E F G H\\n      [ 73,  74,  75,  76,  77,  78,  79,  80], // I J K L M N O P\\n      [ 81,  82,  83,  84,  85,  86,  87,  88], // Q R S T U V W X\\n      [ 89,  90,  97,  98,  99, 100, 101, 102], // Y Z a b c d e f\\n      [103, 104, 105, 106, 107, 108, 109, 110], // g h i j k l m n\\n      [111, 112, 113, 114, 115, 116, 117, 118], // o p q r s t u v\\n      [119, 120, 121, 122,  48,  49,  50,  51], // w x y z 0 1 2 3\\n      [ 52,  53,  54,  55,  56,  57,  43,  47]  // 4 5 6 7 8 9 + /\\n    ];\\n\\n    return GEMATRIX;\\n  }\\n\\n\\n  /** @notice An occult Fourier transform that onverts base64 tokenURI values of\\n    * an array of onchain NFTs into base-_modulo frequency values conformal mapped\\n    * (surjective) to the Gematrix\\n    * @dev For doing onchain art exegesis\\n    * @return The resulting 8 x 8 uint8 matrix of frequency values\\n    */\\n  function sixtyFourier(bytes[] memory _tokenURIs, uint8 _modulo) public pure returns (uint8[8][8] memory) {\\n    require(_modulo \\u003c= 256, \\\"Mod \\u003e 2^8\\\");//modulo cannot exceed max value of uint8\\n    uint8[8][8] memory GEMATRIX = getGEMATRIX();\\n\\n    //build a linear index of the GEMATRIX\\n    Index[] memory index = new Index[](123);//122 is the highest value in the GEMATRIX\\n\\n    //fill in the index values that point on map\\n    for(uint8 i = 0; i \\u003c 8; i++){\\n      for(uint8 j = 0; j \\u003c 8; j++){\\n        index[GEMATRIX[i][j]] = Index(i,j);\\n      }\\n    }\\n\\n    //construct the frequency cipher\\n    uint8[8][8] memory frequencies;\\n    uint8 zero = 0;\\n\\n    for(uint8 t = 0; t \\u003c _tokenURIs.length; t++){\\n\\n      for(uint256 b = 0; b \\u003c _tokenURIs[t].length; b++){\\n        uint8 char = uint8(bytes1(_tokenURIs[t][b]));\\n        if(char != 61){//skip \\\"=\\\"\\n          uint8 i = index[char].i;//TODO plex variable down uint8 i = index[uint8(_tokenURIs[t][d])].i\\n          uint8 j = index[char].j;//TODO plex variable down uint8 j = index[uint8(_tokenURIs[t][d])].j;\\n\\n          //map frequency onto a _modulo-degree circle\\n          //since we are counting one-by-one, this is equivalent to % _modulo\\n          if(frequencies[i][j] == (_modulo - 1)){\\n            frequencies[i][j] = zero;\\n          }else{\\n            frequencies[i][j]++;\\n          }\\n        }\\n\\n      }\\n    }\\n\\n    return frequencies;\\n  }\\n\\n\\n  function isBase64Character(bytes1 _c) public pure returns (bool) {\\n    uint8 _cint = uint8(_c);\\n    //+\\n    if(_cint == 43 || _cint == 47){//+/\\n      return true;\\n    }else if(_cint \\u003e= 48 \\u0026\\u0026 _cint \\u003c= 57){//0-9\\n      return true;\\n    }else if(_cint \\u003e= 65 \\u0026\\u0026 _cint \\u003c= 90){//A-Z\\n      return true;\\n    }else if(_cint \\u003e= 97 \\u0026\\u0026 _cint \\u003c= 122) {//a-z\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n\\n  function isValidBase64String(string memory _string) public pure returns (bool) {\\n    bytes memory data = bytes(_string);\\n    require( (data.length % 4) == 0, \\\"!= %4\\\");\\n\\n    for (uint i = 0; i \\u003c data.length; i++) {\\n      bytes1 c = data[i];\\n      if(!isBase64Character(c)){\\n        if(i \\u003e= (data.length - 3)){//last two bytes may be = for padding\\n          if(uint8(c) != 61){//=\\n            return false;\\n          }\\n        }else{\\n          return false;\\n        }\\n      }\\n    }\\n    return true;\\n  }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_artist\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_artist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"Broadcast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addDim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"adminAddDim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"adminRemoveDim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"artistBroadcast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistWithdrawAvailableBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"dimAdder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDims\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hodler\",\"type\":\"address\"}],\"name\":\"getTau\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_modulo\",\"type\":\"uint8\"},{\"internalType\":\"string[]\",\"name\":\"_tau\",\"type\":\"string[]\"}],\"name\":\"getTheta\",\"outputs\":[{\"internalType\":\"uint8[8][8]\",\"name\":\"\",\"type\":\"uint8[8][8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hodler\",\"type\":\"address\"}],\"name\":\"isQualified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAddableDims\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOwnerAddableDims\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWithdrawAvailableBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAddedDims\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDims\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOwnerAddedDims\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Daemonica","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002f59aa8b33b0db6ef148f9be2b88a896bd908e9b","EVMVersion":"Default","Library":"OccultMath:2175b6b2219dcaaf7020cde8f2b59e0a6f373d45;Helpers:30d432918c74193032c0cd03935b02a3e026b933","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2773c7afb204c85bfd4856a75b1a24f182d428b277b50e6661cdf8cccecdd5a1"}]}