{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0 \\u003c=0.5.15;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0 \\u003c=0.5.15;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: no zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"VerifierList.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0 \\u003c=0.5.15;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract VerifierList is Ownable {\\n    struct VerifierDetails {\\n        address owner;\\n        string typeOfVerifier;\\n        string verifierParams; // typically a json of parameters required\\n        bool isCreated;\\n    }\\n\\n    event VerifierAdded(string verifier, string typeOfVerifier);\\n\\n    event VerifierUpdated(string verifier);\\n\\n    mapping(string =\\u003e VerifierDetails) public verifiers;\\n\\n    string[] public verifierList;\\n\\n    modifier verifierExists(string memory verifier) {\\n        require(verifiers[verifier].isCreated, \\\"verifier doesnt exist\\\");\\n        _;\\n    }\\n\\n    modifier verifierDoesNotExists(string memory verifier) {\\n        require(!verifiers[verifier].isCreated, \\\"verifier already exists\\\");\\n        _;\\n    }\\n\\n    modifier verifierOwnerOnly(string memory verifier) {\\n        require(verifiers[verifier].owner == msg.sender, \\\"not owner of verifier\\\");\\n        _;\\n    }\\n\\n    function addVerifier(\\n        string calldata _verifier,\\n        string calldata _typeOfVerifier,\\n        string calldata _verifierParams,\\n        address _owner\\n    ) external onlyOwner verifierDoesNotExists(_verifier) {\\n        verifiers[_verifier] = VerifierDetails({owner: _owner, typeOfVerifier: _typeOfVerifier, verifierParams: _verifierParams, isCreated: true});\\n        verifierList.push(_verifier);\\n        emit VerifierAdded(_verifier, _typeOfVerifier);\\n    }\\n\\n    function updateVerifier(string calldata _verifier, string calldata _verifierParams)\\n        external\\n        verifierOwnerOnly(_verifier)\\n        verifierExists(_verifier)\\n    {\\n        verifiers[_verifier].verifierParams = _verifierParams;\\n        emit VerifierUpdated(_verifier);\\n    }\\n\\n    function getVerifierListCount() external view returns (uint256 verifierListCount) {\\n        return verifierList.length;\\n    }\\n}\\n\"},\"VerifierRouter.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0 \\u003c=0.5.15;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./VerifierList.sol\\\";\\n\\ncontract VerifierRouter is Ownable {\\n    VerifierList private verifierListContract;\\n\\n    mapping(string =\\u003e string) public routes;\\n\\n    constructor(address _verifierListContract) public {\\n        verifierListContract = VerifierList(_verifierListContract);\\n    }\\n\\n    function setVerifier(address _verifierListContract) external onlyOwner {\\n        verifierListContract = VerifierList(_verifierListContract);\\n    }\\n\\n    function setRoute(string memory source, string memory target) public onlyOwner {\\n        routes[source] = target;\\n    }\\n\\n    function verifierList(uint256 index) external view returns (string memory) {\\n        return verifierListContract.verifierList(index);\\n    }\\n\\n    function verifiers(string memory verifierID) public view returns (address owner, string memory typeOfVerifier,string memory verifierParams,bool isCreated) {\\n        string memory targetVerifierID = verifierID;\\n        if (keccak256(abi.encodePacked(routes[verifierID])) != keccak256(abi.encodePacked(\\\"\\\"))){\\n            targetVerifierID = routes[verifierID];\\n        }\\n\\n        return verifierListContract.verifiers(targetVerifierID);\\n    }\\n\\n    function getVerifierListCount() external view returns (uint256 verifierListCount) {\\n        return verifierListContract.getVerifierListCount();\\n    }\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierListContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVerifierListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"verifierListCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"routes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"target\",\"type\":\"string\"}],\"name\":\"setRoute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierListContract\",\"type\":\"address\"}],\"name\":\"setVerifier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"verifierList\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"verifierID\",\"type\":\"string\"}],\"name\":\"verifiers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"typeOfVerifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"verifierParams\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isCreated\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VerifierRouter","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a24793e5da2bdbba7d48068a36048145733ecec7","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a6e7c652a975209768c0466ce251dc2a18c24c5b23650d027f558d363edee076"}]}