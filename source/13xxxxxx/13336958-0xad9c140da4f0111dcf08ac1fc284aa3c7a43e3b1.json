{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-09-27\r\n*/\r\n\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\npragma abicoder v2;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function sqrrt(uint256 a) internal pure returns (uint c) {\r\n        if (a > 3) {\r\n            c = a;\r\n            uint b = add( div( a, 2), 1 );\r\n            while (b < c) {\r\n                c = b;\r\n                b = div( add( div( a, b ), b), 2 );\r\n            }\r\n        } else if (a != 0) {\r\n            c = 1;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addressToString(address _address) internal pure returns(string memory) {\r\n        bytes32 _bytes = bytes32(uint256(_address));\r\n        bytes memory HEX = \"0123456789abcdef\";\r\n        bytes memory _addr = new bytes(42);\r\n\r\n        _addr[0] = '0';\r\n        _addr[1] = 'x';\r\n\r\n        for(uint256 i = 0; i < 20; i++) {\r\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n        }\r\n\r\n        return string(_addr);\r\n\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function mint( address to, uint amount ) external;\r\n\r\n    function burn( address from, uint amount ) external;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ncontract StablePool {\r\n\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n\r\n\r\n    /* ========== STRUCTS ========== */\r\n\r\n    struct PoolToken {\r\n        uint lowAP; // 5 decimals\r\n        uint highAP; // 5 decimals\r\n        bool accepting; // can send in (swap or add)\r\n        bool pushed; // pushed to poolTokens\r\n    }\r\n\r\n    struct Fee {\r\n        uint fee;\r\n        uint collected;\r\n        address collector;\r\n    }\r\n\r\n\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    IERC20 public immutable shareToken; // represents 1 token in the pool\r\n\r\n    address[] public poolTokens; // tokens in pool\r\n    mapping( address => PoolToken ) public tokenInfo; // info for tokens in pool\r\n\r\n    uint public totalTokens; // total tokens in pool\r\n\r\n    Fee public fees;\r\n    \r\n    \r\n    \r\n    /* ========== CONSTRUCTOR ========== */\r\n    \r\n    constructor( address token ) {\r\n        require( token != address(0) );\r\n        shareToken = IERC20( token );\r\n    }\r\n\r\n\r\n\r\n    /* ========== EXCHANGE FUNCTIONS ========== */\r\n\r\n    // swap tokens and send outbound token to sender\r\n    function swap( address firstToken, uint amount, address secondToken ) external {\r\n        IERC20( firstToken ).safeTransferFrom( msg.sender, address(this), amount );\r\n\r\n        IERC20( secondToken ).safeTransfer( msg.sender, _swap( firstToken, amount, secondToken ) );\r\n    }\r\n\r\n    // swap tokens, specifying sender and receiver\r\n    // used by router for chain swaps\r\n    function swapThrough( \r\n        address from, \r\n        address to, \r\n        address firstToken, \r\n        uint amount, \r\n        address secondToken\r\n    ) external returns ( uint amount_ ) {\r\n        IERC20( firstToken ).safeTransferFrom( from, address(this), amount );\r\n\r\n        amount_ = _swap( firstToken, amount, secondToken );\r\n\r\n        IERC20( secondToken ).approve( to, amount_ );\r\n    }\r\n\r\n    // add token to pool as liquidity, returning share token\r\n    // rejects if token added will exit bounds\r\n    function add( address token, uint amount ) external {\r\n        totalTokens = totalTokens.add( amount ); // add amount to pool\r\n\r\n        require( amount <= maxCanAdd( token ), \"Exceeds limit in\" );\r\n\r\n        IERC20( token ).safeTransferFrom( msg.sender, address(this), amount ); // send token added\r\n\r\n        shareToken.mint( msg.sender, amount ); // mint pool token\r\n    }\r\n\r\n    // remove token from liquidity, burning share token\r\n    // rejects if token removed will exit bounds\r\n    function remove( address token, uint amount ) external {\r\n        shareToken.burn( msg.sender, amount ); // burn pool token\r\n\r\n        uint fee = amount.mul( fees.fee ).div( 1e4 ); // trading fee collected\r\n\r\n        require( amount.sub( fee ) <= maxCanRemove( token ), \"Exceeds limit out\" );\r\n\r\n        fees.collected = fees.collected.add( fee ); // add to total fees\r\n        totalTokens = totalTokens.sub( amount.sub( fee ) ); // remove amount from pool less fees\r\n\r\n        IERC20( token ).safeTransfer( msg.sender, amount.sub( fee ) ); // send token removed\r\n    }\r\n\r\n    // remove liquidity evenly across all tokens \r\n    function removeAll( uint amount ) external {\r\n        shareToken.burn( msg.sender, amount );\r\n\r\n        uint fee = amount.mul( fees.fee ).div( 1e4 ); // trading fee collected\r\n        fees.collected = fees.collected.add( fee ); // add to total fees\r\n\r\n        amount = amount.sub( fee );\r\n\r\n        for ( uint i = 0; i < poolTokens.length; i++ ) {\r\n            IERC20 token = IERC20( poolTokens[ i ] );\r\n\r\n            uint send = amount.mul( token.balanceOf( address(this) ) ).div( totalTokens );\r\n            token.safeTransfer( msg.sender, send );\r\n        }\r\n        totalTokens = totalTokens.sub( amount ); // remove amount from pool less fees\r\n    }\r\n\r\n    // send collected fees to collector\r\n    function collectFees( address token ) public {\r\n        if ( fees.collected > 0 ) {\r\n            totalTokens = totalTokens.sub( fees.collected );\r\n\r\n            IERC20( token ).safeTransfer( fees.collector, fees.collected );\r\n\r\n            fees.collected = 0;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /* ========== INTERNAL FUNCTIONS ========== */\r\n\r\n    // token swap logic\r\n    function _swap( address firstToken, uint amount, address secondToken ) internal returns ( uint ) {\r\n        require( amount <= maxCanAdd( firstToken ), \"Exceeds limit in\" );\r\n        require( amount <= maxCanRemove( secondToken ), \"Exceeds limit out\" );\r\n\r\n        uint fee = amount.mul( fees.fee ).div( 1e9 );\r\n\r\n        fees.collected = fees.collected.add( fee );\r\n        return amount.sub( fee );\r\n    }\r\n\r\n\r\n\r\n    /* ========== VIEW FUNCTIONS ========== */\r\n\r\n    // maximum number of token that can be added to pool\r\n    function maxCanAdd( address token ) public view returns ( uint ) {\r\n        uint maximum = totalTokens.mul( tokenInfo[ token ].highAP ).div( 1e5 );\r\n        uint balance = IERC20( token ).balanceOf( address(this) );\r\n        return maximum.sub( balance );\r\n    }\r\n\r\n    // maximum number of token that can be removed from pool\r\n    function maxCanRemove( address token ) public view returns ( uint ) {\r\n        uint minimum = totalTokens.mul( tokenInfo[ token ].lowAP ).div( 1e5 );\r\n        uint balance = IERC20( token ).balanceOf( address(this) );\r\n        return balance.sub( minimum );\r\n    }\r\n\r\n    // maximum size of trade from first token to second token\r\n    function maxSize( address firstToken, address secondToken ) public view returns ( uint ) {\r\n        return maxCanAdd( firstToken ).add( maxCanRemove( secondToken ) );\r\n    }\r\n\r\n\r\n\r\n     /* ========== POLICY FUNCTIONS ========== */\r\n\r\n    // change bounds of tokens in pool\r\n    function changeBound( address token, uint newHigh, uint newLow ) external {\r\n        tokenInfo[ token ].highAP = newHigh;\r\n        tokenInfo[ token ].lowAP = newLow;\r\n    }\r\n\r\n    // add new token to pool\r\n    // must call toggleAccept to activate token\r\n    function addToken( address token, uint lowAP, uint highAP ) external {\r\n        if ( !tokenInfo[ token ].pushed ) {\r\n            poolTokens.push( token );\r\n        }\r\n\r\n        tokenInfo[ token ] = PoolToken({\r\n            lowAP: lowAP,\r\n            highAP: highAP,\r\n            accepting: false,\r\n            pushed: true\r\n        });\r\n    }\r\n\r\n    // toggle whether to accept incoming token\r\n    // setting token to false will not allow swaps as incoming token or adds\r\n    function toggleAccept( address token ) external {\r\n        tokenInfo[ token ].accepting = !tokenInfo[ token ].accepting;\r\n    }\r\n     \r\n    // set fee taken on trades and fee collector\r\n    function setFee( uint newFee, address collector, address collectToken ) external {\r\n        require( collector != address(0) );\r\n\r\n        collectFees( collectToken ); // clear cache before changes\r\n\r\n        fees.fee = newFee;\r\n        fees.collector = collector;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lowAP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highAP\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newHigh\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLow\",\"type\":\"uint256\"}],\"name\":\"changeBound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collected\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxCanAdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxCanRemove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"firstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondToken\",\"type\":\"address\"}],\"name\":\"maxSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectToken\",\"type\":\"address\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"firstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"secondToken\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"firstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"secondToken\",\"type\":\"address\"}],\"name\":\"swapThrough\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"toggleAccept\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lowAP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highAP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"accepting\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pushed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StablePool","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000004963e524bacb5cfc0de5571f3c37bc8cdd4aee8e","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8cff54dc9d1a8ada8533666b0b9a09fde8502b4091eb4d367e1af91dd4c1bcb2"}]}