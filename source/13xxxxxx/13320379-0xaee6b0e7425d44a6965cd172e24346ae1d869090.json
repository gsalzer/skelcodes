{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\n/**\r\n * @title Staking\r\n * @author gotbit\r\n */\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address who) external view returns (uint256 balance);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool trans1);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool trans);\r\n}\r\n\r\ncontract OwnableAndWhitelistble {\r\n    address public owner;\r\n    mapping(address => bool) internal whitelist;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event WhitelistAdded(address indexed sender, address indexed whitelistUser);\r\n    event WhitelistRemoved(address indexed sender, address indexed whitelistUser);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"You cant transfer ownerships to address 0x0\");\r\n        require(newOwner != owner, \"You cant transfer ownerships to yourself\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        whitelist[owner] = false;\r\n        whitelist[newOwner] = true;\r\n        owner = newOwner;\r\n    }\r\n\r\n    modifier onlyWhitelist() {\r\n        require(whitelist[msg.sender], \"Only whitelist users can call this function\");\r\n        _;\r\n    }\r\n\r\n    function addToWhitelist(address newWhitelistUser) external onlyOwner {\r\n        require(newWhitelistUser != address(0), \"You cant add to whitelist address 0x0\");\r\n        emit WhitelistAdded(msg.sender, newWhitelistUser);\r\n        whitelist[newWhitelistUser] = true;\r\n    }\r\n\r\n    function removeFromWhitelist(address newWhitelistUser) external onlyOwner {\r\n        require(whitelist[newWhitelistUser], \"You cant remove from whitelist\");\r\n        emit WhitelistRemoved(msg.sender, newWhitelistUser);\r\n        whitelist[newWhitelistUser] = false;\r\n    }\r\n}\r\n\r\ncontract StakingAddble is OwnableAndWhitelistble {\r\n    struct Stake {\r\n        uint256 lastHarvest;\r\n        uint256 startStaking;\r\n        uint256 amount;\r\n        uint256 boost;\r\n    }\r\n\r\n    IERC20 public mainToken;\r\n\r\n    address public dividends;\r\n\r\n    uint256 public rate = 25;\r\n    uint256 public constant beforeCutoff = 15;\r\n    uint256 public constant afterCutoff = 10;\r\n\r\n    uint256 public constant cutoff = 48 hours;\r\n    uint256 public constant maxStakePeriod = 365 days;\r\n\r\n    mapping(address => Stake) public stakes;\r\n\r\n    event Staked(address indexed who, uint256 startTime, uint256 amount);\r\n    event Harvested(address indexed who, uint256 value, uint256 toDividends);\r\n    event Unstaked(address indexed who, uint256 amount);\r\n    event AddedAmount(address indexed who, uint256 amount);\r\n    event Boosted(address indexed who, uint256 boost);\r\n    event SettedDividends(address indexed who);\r\n    event SettedRate(address indexed who, uint256 rate);\r\n\r\n    constructor(\r\n        address _owner,\r\n        IERC20 _token,\r\n        address _dividends\r\n    ) {\r\n        owner = _owner;\r\n        whitelist[_owner] = true;\r\n        mainToken = _token;\r\n        dividends = _dividends;\r\n    }\r\n\r\n    function stake(uint256 _amount) external {\r\n        require(stakes[msg.sender].startStaking == 0, \"You have already staked\");\r\n        require(_amount > 0, \"Amount must be greater then zero\");\r\n        require(mainToken.balanceOf(msg.sender) >= _amount, \"You dont enough DES\");\r\n        require(maxReward(_amount) < mainToken.balanceOf(address(this)), \"Pool is empty\");\r\n\r\n        stakes[msg.sender] = Stake(block.timestamp, block.timestamp, _amount, 0);\r\n        emit Staked(msg.sender, block.timestamp, _amount);\r\n\r\n        mainToken.transferFrom(msg.sender, address(this), _amount);\r\n    }\r\n\r\n    function addAmount(uint256 _amount) external {\r\n        require(stakes[msg.sender].startStaking != 0, \"You dont have stake\");\r\n        require(_amount > 0, \"Amount must be greater then zero\");\r\n        require(mainToken.transferFrom(msg.sender, address(this), _amount), \"Transfer issues\");\r\n\r\n        stakes[msg.sender].amount += _amount;\r\n\r\n        emit AddedAmount(msg.sender, _amount);\r\n    }\r\n\r\n    function maxReward(uint256 _amount) public view returns (uint256) {\r\n        return (_amount * rate) / 100;\r\n    }\r\n\r\n    function harvest() public returns (uint256 value, uint256 toDividends) {\r\n        require(stakes[msg.sender].startStaking != 0, \"You dont have stake\");\r\n\r\n        (uint256 _value, uint256 _toDividends) = harvested(msg.sender);\r\n        require(mainToken.balanceOf(address(this)) >= (_value + _toDividends), \"Contract doesnt have enough DES\");\r\n\r\n        stakes[msg.sender].lastHarvest = block.timestamp;\r\n        emit Harvested(msg.sender, _value, _toDividends);\r\n\r\n        require(mainToken.transfer(msg.sender, _value), \"Transfer issues\");\r\n        require(mainToken.transfer(dividends, _toDividends), \"Transfer issues\");\r\n\r\n        return (_value, _toDividends);\r\n    }\r\n\r\n    function harvested(address _who) public view returns (uint256 _value, uint256 _toDividends) {\r\n        if (stakes[_who].lastHarvest == 0) return (0, 0);\r\n\r\n        Stake memory _stake = stakes[_who];\r\n\r\n        uint256 timeNow = block.timestamp;\r\n        if ((block.timestamp - _stake.startStaking) > maxStakePeriod) {\r\n            timeNow = _stake.startStaking + maxStakePeriod;\r\n        }\r\n\r\n        uint256 _timePassed = timeNow - _stake.lastHarvest;\r\n        uint256 _percentDiv = _timePassed < cutoff ? beforeCutoff : afterCutoff;\r\n\r\n        uint256 _reward = (_stake.amount * _timePassed * (rate + _stake.boost)) / (100 * (365 days));\r\n        uint256 _toDiv = (_reward * _percentDiv) / 100;\r\n\r\n        return (_reward - _toDiv, _toDiv);\r\n    }\r\n\r\n    function unstake() external {\r\n        require(stakes[msg.sender].startStaking != 0, \"You dont have stake\");\r\n\r\n        harvest();\r\n\r\n        uint256 _amount = stakes[msg.sender].amount;\r\n        require(mainToken.balanceOf(address(this)) >= _amount, \"Contract doesnt have enough DES\");\r\n\r\n        delete stakes[msg.sender];\r\n        emit Unstaked(msg.sender, _amount);\r\n\r\n        require(mainToken.transfer(msg.sender, _amount), \"Transfer issues\");\r\n    }\r\n\r\n    function getStake(address _user) external view returns (Stake memory) {\r\n        return stakes[_user];\r\n    }\r\n\r\n    function setRate(uint256 _rate) external onlyOwner {\r\n        rate = _rate;\r\n        emit SettedRate(msg.sender, _rate);\r\n    }\r\n\r\n    function setBoost(address _for, uint256 _boost) external onlyWhitelist {\r\n        stakes[_for].boost = _boost;\r\n        emit Boosted(_for, _boost);\r\n    }\r\n\r\n    function setDividends(address _newDividends) external onlyOwner {\r\n        dividends = _newDividends;\r\n        emit SettedDividends(_newDividends);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dividends\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddedAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"name\":\"Boosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toDividends\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"SettedDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"SettedRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelistUser\",\"type\":\"address\"}],\"name\":\"WhitelistAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelistUser\",\"type\":\"address\"}],\"name\":\"WhitelistRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWhitelistUser\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"afterCutoff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforeCutoff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cutoff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividends\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastHarvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingAddble.Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toDividends\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"harvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toDividends\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"maxReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWhitelistUser\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_boost\",\"type\":\"uint256\"}],\"name\":\"setBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDividends\",\"type\":\"address\"}],\"name\":\"setDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastHarvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingAddble","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f7909ae68bf8287f692d03fdda35441621b554c3000000000000000000000000634239cfa331df0291653139d1a6083b9cf705e3000000000000000000000000bf434b109a9cced493903abdb104ddbcb3470428","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://26a17f60d287d87a344bb69c2d43361b1d4dce032f05b1c8c5a9a0954f5a83f4"}]}