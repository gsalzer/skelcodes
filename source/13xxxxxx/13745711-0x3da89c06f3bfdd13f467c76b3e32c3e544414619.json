{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BuildColors.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-SA-4.0\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BuildColors is Ownable {\\n    using Strings for uint256;\\n\\n    constructor() Ownable() {}\\n\\n    function buildColorString(\\n        uint32 colorR,\\n        uint32 colorG,\\n        uint32 colorB\\n    ) pure internal returns (string memory) {\\n        return string(abi.encodePacked(\\n                'rgb(',\\n                Strings.toString(colorR),\\n                ',',\\n                Strings.toString(colorG),\\n                ',',\\n                Strings.toString(colorB),\\n                ')'\\n            ));\\n    }\\n\\n    function buildSCColorString(\\n        uint32 colorR,\\n        uint32 colorG,\\n        uint32 colorB\\n    ) pure internal returns (string memory) {\\n        // TOO DARK, lighter\\n        if (\\n            colorR >= 127 &&\\n            colorG >= 127 &&\\n            colorB >= 127\\n        ) {\\n            colorR = colorR / 3;\\n            colorG = colorG / 3;\\n            colorB = colorB / 3;\\n        }\\n\\n        // TOO light, darker\\n        if (\\n            colorR < 127 &&\\n            colorG < 127 &&\\n            colorB < 127\\n        ) {\\n            colorR = (255 - colorR) / 3;\\n            colorG = (255 - colorG) / 3;\\n            colorB = (255 - colorB) / 3;\\n        }\\n\\n        return string(abi.encodePacked(\\n                'rgb(',\\n                Strings.toString(colorR),\\n                ',',\\n                Strings.toString(colorG),\\n                ',',\\n                Strings.toString(colorB),\\n                ')'\\n            ));\\n    }\\n\\n    function buildXTextPosition(\\n        uint32 positionX,\\n        uint32 positionY\\n    ) pure internal returns (string memory) {\\n        return positionX > 65 && positionY > 70 ? Strings.toString(96) : Strings.toString(96);\\n    }\\n\\n    function buildYTextPosition(\\n        uint32 positionX,\\n        uint32 positionY\\n    ) pure internal returns (string memory) {\\n        return positionX > 65 && positionY > 70 ? Strings.toString(8) : Strings.toString(94);\\n    }\\n\\n    function buildSVG(\\n        uint32 colorR,\\n        uint32 colorG,\\n        uint32 colorB,\\n        uint32 positionX,\\n        uint32 positionY\\n    ) external onlyOwner returns (string memory) {\\n\\n        return string(abi.encodePacked(\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" x=\\\"0px\\\" y=\\\"0px\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 100 100\\\"><rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"100\\\" height=\\\"100\\\" fill=\\\"',\\n                buildColorString(\\n                    colorR,\\n                    colorG,\\n                    colorB\\n                ),\\n                '\\\"/><rect x=\\\"',\\n                Strings.toString(positionX),\\n                '\\\" y=\\\"',\\n                Strings.toString(positionY),\\n                '\\\" width=\\\"1\\\" height=\\\"1\\\" fill=\\\"',\\n                buildSCColorString(\\n                    colorG,\\n                    colorB,\\n                    colorR\\n                ),\\n                '\\\"/><text id=\\\"coordsText\\\" text-anchor=\\\"end\\\" dominant-baseline=\\\"middle\\\" transform=\\\"matrix(0.5 0 0 0.5 ',\\n                buildXTextPosition(positionX, positionY),\\n                ' ',\\n                buildYTextPosition(positionX, positionY),\\n                ')\\\" fill=\\\"',\\n                buildSCColorString(\\n                    colorG,\\n                    colorB,\\n                    colorR\\n                ),\\n                '\\\">',\\n                Strings.toString(positionX),\\n                ':',\\n                Strings.toString(positionY),\\n                '</text></svg>'\\n            ));\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"colorR\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"colorG\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"colorB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"positionX\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"positionY\",\"type\":\"uint32\"}],\"name\":\"buildSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BuildColors","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}