{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/viewers/DaoViewer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../interfaces/IFactory.sol\\\";\\nimport \\\"../interfaces/IDao.sol\\\";\\nimport \\\"../interfaces/ILP.sol\\\";\\nimport \\\"../interfaces/IShop.sol\\\";\\n\\ncontract DaoViewer {\\n    struct DaoInfo {\\n        address dao;\\n        string daoName;\\n        string daoSymbol;\\n        address lp;\\n        string lpName;\\n        string lpSymbol;\\n    }\\n\\n    function getDao(address _dao) public view returns (DaoInfo memory) {\\n        address lp = IDao(_dao).lp();\\n\\n        if (lp == address(0)) {\\n            return\\n                DaoInfo({\\n                    dao: _dao,\\n                    daoName: IDao(_dao).name(),\\n                    daoSymbol: IDao(_dao).symbol(),\\n                    lp: address(0),\\n                    lpName: \\\"\\\",\\n                    lpSymbol: \\\"\\\"\\n                });\\n        }\\n\\n        return\\n            DaoInfo({\\n                dao: _dao,\\n                daoName: IDao(_dao).name(),\\n                daoSymbol: IDao(_dao).symbol(),\\n                lp: lp,\\n                lpName: ILP(lp).name(),\\n                lpSymbol: ILP(lp).symbol()\\n            });\\n    }\\n\\n    function getDaos(address _factory) public view returns (DaoInfo[] memory) {\\n        address[] memory _daosRaw = IFactory(_factory).getDaos();\\n\\n        DaoInfo[] memory _daos = new DaoInfo[](_daosRaw.length);\\n\\n        if (_daosRaw.length == 0) {\\n            return new DaoInfo[](0);\\n        } else {\\n            for (uint256 i = 0; i < _daosRaw.length; i++) {\\n                _daos[i] = getDao(_daosRaw[i]);\\n            }\\n\\n            return _daos;\\n        }\\n    }\\n\\n    function userDaos(address _user, address _factory)\\n        external\\n        view\\n        returns (DaoInfo[] memory)\\n    {\\n        DaoInfo[] memory _daos = getDaos(_factory);\\n\\n        if (_daos.length == 0) {\\n            return new DaoInfo[](0);\\n        } else {\\n            DaoInfo[] memory _userDaos = new DaoInfo[](_daos.length);\\n\\n            for (uint256 i = 0; i < _daos.length; i++) {\\n                if (IERC20Metadata(_daos[i].dao).balanceOf(_user) > 0) {\\n                    _userDaos[i] = _daos[i];\\n                }\\n            }\\n\\n            return _userDaos;\\n        }\\n    }\\n\\n    function getShare(address _dao, address[] memory _users)\\n        external\\n        view\\n        returns (\\n            uint256 share,\\n            uint256 totalSupply,\\n            uint8 quorum\\n        )\\n    {\\n        quorum = IDao(_dao).quorum();\\n        totalSupply = IERC20Metadata(_dao).totalSupply();\\n\\n        if (_users.length == 0) {\\n            return (0, totalSupply, quorum);\\n        }\\n\\n        share = 0;\\n\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            share += IERC20Metadata(_dao).balanceOf(_users[i]);\\n        }\\n\\n        return (share, totalSupply, quorum);\\n    }\\n\\n    function getShares(address _dao, address[][] memory _users)\\n        external\\n        view\\n        returns (\\n            uint256[] memory shares,\\n            uint256 totalSupply,\\n            uint8 quorum\\n        )\\n    {\\n        quorum = IDao(_dao).quorum();\\n        totalSupply = IERC20Metadata(_dao).totalSupply();\\n\\n        shares = new uint256[](_users.length);\\n\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            if (_users[i].length == 0) {\\n                shares[i] = 0;\\n            } else {\\n                uint256 share = 0;\\n\\n                for (uint256 j = 0; j < _users[i].length; j++) {\\n                    share += IERC20Metadata(_dao).balanceOf(_users[i][j]);\\n                }\\n\\n                shares[i] = share;\\n            }\\n        }\\n\\n        return (shares, totalSupply, quorum);\\n    }\\n\\n    function balances(address[] memory users, address[] memory tokens)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory addrBalances = new uint256[](\\n            tokens.length * users.length\\n        );\\n\\n        for (uint256 i = 0; i < users.length; i++) {\\n            for (uint256 j = 0; j < tokens.length; j++) {\\n                uint256 addrIdx = j + tokens.length * i;\\n\\n                if (tokens[j] != address(0x0)) {\\n                    addrBalances[addrIdx] = IERC20Metadata(tokens[j]).balanceOf(\\n                        users[i]\\n                    );\\n                } else {\\n                    addrBalances[addrIdx] = users[i].balance;\\n                }\\n            }\\n        }\\n\\n        return addrBalances;\\n    }\\n\\n    function getHashStatuses(address _dao, bytes32[] memory _txHashes)\\n        external\\n        view\\n        returns (bool[] memory)\\n    {\\n        bool[] memory hashStatuses = new bool[](_txHashes.length);\\n\\n        for (uint256 i = 0; i < _txHashes.length; i++) {\\n            hashStatuses[i] = IDao(_dao).executedTx(_txHashes[i]);\\n        }\\n\\n        return hashStatuses;\\n    }\\n\\n    struct DaoConfiguration {\\n        bool gtMintable;\\n        bool gtBurnable;\\n        address lpAddress;\\n        bool lpMintable;\\n        bool lpBurnable;\\n        bool lpMintableStatusFrozen;\\n        bool lpBurnableStatusFrozen;\\n        uint256 permittedLength;\\n        uint256 adaptersLength;\\n        uint256 monthlyCost;\\n        uint256 numberOfPrivateOffers;\\n    }\\n\\n    function getDaoConfiguration(address _factory, address _dao)\\n        external\\n        view\\n        returns (DaoConfiguration memory)\\n    {\\n        address lp = IDao(_dao).lp();\\n\\n        if (lp == address(0)) {\\n            return\\n                DaoConfiguration({\\n                    gtMintable: IDao(_dao).mintable(),\\n                    gtBurnable: IDao(_dao).burnable(),\\n                    lpAddress: address(0),\\n                    lpMintable: false,\\n                    lpBurnable: false,\\n                    lpMintableStatusFrozen: false,\\n                    lpBurnableStatusFrozen: false,\\n                    permittedLength: IDao(_dao).numberOfPermitted(),\\n                    adaptersLength: IDao(_dao).numberOfAdapters(),\\n                    monthlyCost: IFactory(_factory).monthlyCost(),\\n                    numberOfPrivateOffers: 0\\n                });\\n        } else {\\n            return\\n                DaoConfiguration({\\n                    gtMintable: IDao(_dao).mintable(),\\n                    gtBurnable: IDao(_dao).burnable(),\\n                    lpAddress: lp,\\n                    lpMintable: ILP(lp).mintable(),\\n                    lpBurnable: ILP(lp).burnable(),\\n                    lpMintableStatusFrozen: ILP(lp).mintableStatusFrozen(),\\n                    lpBurnableStatusFrozen: ILP(lp).burnableStatusFrozen(),\\n                    permittedLength: IDao(_dao).numberOfPermitted(),\\n                    adaptersLength: IDao(_dao).numberOfAdapters(),\\n                    monthlyCost: IFactory(_factory).monthlyCost(),\\n                    numberOfPrivateOffers: IShop(IFactory(_factory).shop())\\n                        .numberOfPrivateOffers(_dao)\\n                });\\n        }\\n    }\\n\\n    function getInvestInfo(address _factory)\\n        external\\n        view\\n        returns (\\n            DaoInfo[] memory,\\n            IShop.PublicOffer[] memory,\\n            string[] memory,\\n            uint8[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        DaoInfo[] memory daos = getDaos(_factory);\\n\\n        uint256 daosLength = daos.length;\\n\\n        if (daosLength == 0) {\\n            return (\\n                new DaoInfo[](0),\\n                new IShop.PublicOffer[](0),\\n                new string[](0),\\n                new uint8[](0),\\n                new uint256[](0)\\n            );\\n        }\\n\\n        IShop.PublicOffer[] memory publicOffers = new IShop.PublicOffer[](\\n            daosLength\\n        );\\n\\n        for (uint256 i = 0; i < daosLength; i++) {\\n            publicOffers[i] = IShop(IFactory(_factory).shop()).publicOffers(\\n                daos[i].dao\\n            );\\n        }\\n\\n        string[] memory symbols = new string[](daosLength);\\n        uint8[] memory decimals = new uint8[](daosLength);\\n\\n        for (uint256 i = 0; i < daosLength; i++) {\\n            if (publicOffers[i].currency != address(0)) {\\n                try IERC20Metadata(publicOffers[i].currency).symbol() returns (\\n                    string memory s\\n                ) {\\n                    symbols[i] = s;\\n                } catch {}\\n\\n                try\\n                    IERC20Metadata(publicOffers[i].currency).decimals()\\n                returns (uint8 d) {\\n                    decimals[i] = d;\\n                } catch {}\\n            }\\n        }\\n\\n        uint256[] memory numberOfPrivateOffers = new uint256[](daosLength);\\n\\n        for (uint256 i = 0; i < daosLength; i++) {\\n            numberOfPrivateOffers[i] = IShop(IFactory(_factory).shop())\\n                .numberOfPrivateOffers(daos[i].dao);\\n        }\\n\\n        return (daos, publicOffers, symbols, decimals, numberOfPrivateOffers);\\n    }\\n\\n    function getPrivateOffersInfo(address _factory)\\n        external\\n        view\\n        returns (\\n            DaoInfo[] memory,\\n            uint256[] memory,\\n            IShop.PrivateOffer[] memory,\\n            string[] memory,\\n            uint8[] memory\\n        )\\n    {\\n        DaoInfo[] memory daos = getDaos(_factory);\\n\\n        uint256 daosLength = daos.length;\\n\\n        if (daosLength == 0) {\\n            return (\\n                new DaoInfo[](0),\\n                new uint256[](0),\\n                new IShop.PrivateOffer[](0),\\n                new string[](0),\\n                new uint8[](0)\\n            );\\n        }\\n\\n        uint256[] memory totalPrivateOffers = new uint256[](daosLength);\\n\\n        uint256 privateOffersLength = 0;\\n\\n        IShop shop = IShop(IFactory(_factory).shop());\\n\\n        for (uint256 i = 0; i < daosLength; i++) {\\n            uint256 numberOfPrivateOffers = shop.numberOfPrivateOffers(\\n                daos[i].dao\\n            );\\n\\n            totalPrivateOffers[i] = numberOfPrivateOffers;\\n\\n            privateOffersLength += numberOfPrivateOffers;\\n        }\\n\\n        IShop.PrivateOffer[] memory privateOffers = new IShop.PrivateOffer[](\\n            privateOffersLength\\n        );\\n\\n        string[] memory symbols = new string[](privateOffersLength);\\n\\n        uint8[] memory decimals = new uint8[](privateOffersLength);\\n\\n        uint256 indexCounter = 0;\\n\\n        for (uint256 i = 0; i < daosLength; i++) {\\n            for (uint256 j = 0; j < totalPrivateOffers[i]; j++) {\\n                IShop.PrivateOffer memory privateOffer = shop.privateOffers(\\n                    daos[i].dao,\\n                    j\\n                );\\n\\n                privateOffers[indexCounter] = privateOffer;\\n\\n                try IERC20Metadata(privateOffer.currency).symbol() returns (\\n                    string memory s\\n                ) {\\n                    symbols[indexCounter] = s;\\n                } catch {}\\n\\n                try IERC20Metadata(privateOffer.currency).decimals() returns (\\n                    uint8 d\\n                ) {\\n                    decimals[indexCounter] = d;\\n                } catch {}\\n\\n                indexCounter++;\\n            }\\n        }\\n\\n        return (daos, totalPrivateOffers, privateOffers, symbols, decimals);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IFactory {\\n    function getDaos() external view returns (address[] memory);\\n\\n    function shop() external view returns (address);\\n\\n    function monthlyCost() external view returns (uint256);\\n\\n    function subscriptions(address _dao) external view returns (uint256);\\n\\n    function containsDao(address _dao) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDao.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IDao {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function lp() external view returns (address);\\n\\n    function burnLp(\\n        address _recipient,\\n        uint256 _share,\\n        address[] memory _tokens,\\n        address[] memory _adapters,\\n        address[] memory _pools\\n    ) external returns (bool);\\n\\n    function setLp(address _lp) external returns (bool);\\n\\n    function quorum() external view returns (uint8);\\n\\n    function executedTx(bytes32 _txHash) external view returns (bool);\\n\\n    function mintable() external view returns (bool);\\n\\n    function burnable() external view returns (bool);\\n\\n    function numberOfPermitted() external view returns (uint256);\\n\\n    function numberOfAdapters() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILP.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface ILP {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function burn(address _to, uint256 _amount) external returns (bool);\\n\\n    function mint(address _to, uint256 _amount) external returns (bool);\\n\\n    function mintable() external view returns (bool);\\n\\n    function burnable() external view returns (bool);\\n\\n    function mintableStatusFrozen() external view returns (bool);\\n\\n    function burnableStatusFrozen() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IShop.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IShop {\\n    struct PublicOffer {\\n        bool isActive;\\n        address currency;\\n        uint256 rate;\\n    }\\n\\n    function publicOffers(address _dao)\\n        external\\n        view\\n        returns (PublicOffer memory);\\n\\n    struct PrivateOffer {\\n        bool isActive;\\n        address recipient;\\n        address currency;\\n        uint256 currencyAmount;\\n        uint256 lpAmount;\\n    }\\n\\n    function privateOffers(address _dao, uint256 _index)\\n        external\\n        view\\n        returns (PrivateOffer memory);\\n\\n    function numberOfPrivateOffers(address _dao)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"getDao\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"daoName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"daoSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"lpName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpSymbol\",\"type\":\"string\"}],\"internalType\":\"struct DaoViewer.DaoInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"getDaoConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"gtMintable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"gtBurnable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"lpMintable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lpBurnable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lpMintableStatusFrozen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lpBurnableStatusFrozen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"permittedLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adaptersLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthlyCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfPrivateOffers\",\"type\":\"uint256\"}],\"internalType\":\"struct DaoViewer.DaoConfiguration\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"getDaos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"daoName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"daoSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"lpName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpSymbol\",\"type\":\"string\"}],\"internalType\":\"struct DaoViewer.DaoInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_txHashes\",\"type\":\"bytes32[]\"}],\"name\":\"getHashStatuses\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"getInvestInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"daoName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"daoSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"lpName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpSymbol\",\"type\":\"string\"}],\"internalType\":\"struct DaoViewer.DaoInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct IShop.PublicOffer[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"getPrivateOffersInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"daoName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"daoSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"lpName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpSymbol\",\"type\":\"string\"}],\"internalType\":\"struct DaoViewer.DaoInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IShop.PrivateOffer[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"getShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"quorum\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address[][]\",\"name\":\"_users\",\"type\":\"address[][]\"}],\"name\":\"getShares\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"quorum\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"userDaos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"daoName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"daoSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"lpName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpSymbol\",\"type\":\"string\"}],\"internalType\":\"struct DaoViewer.DaoInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DaoViewer","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}