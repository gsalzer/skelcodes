{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract StandardRewardCalculator is Ownable {\r\n    uint224 internal constant SCALE = 1e18;\r\n\r\n    // blocks per day\r\n    uint224 public blocksPerDay;\r\n\r\n    // blocksPerDay should never exceeds this value\r\n    uint224 internal MAX_BLOCKS_PER_DAY = 24 * 3600 / 10;\r\n    // blocksPerDay should never be under this value\r\n    uint224 internal MIN_BLOCKS_PER_DAY = 24 * 3600 / 15;\r\n\r\n    // Average quality of last 24 hours should never exceeds this value\r\n    uint224 internal MAX_AVERAGE_QUALITY = 1e18;\r\n\r\n    // A checkpoint for marking quality from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint224 value;\r\n    }\r\n\r\n    // Total number of checkpoints\r\n    uint32 public numCheckpoints;\r\n\r\n    // Mapping of index to Checkpoint\r\n    mapping(uint32 => Checkpoint) public checkpoints;\r\n\r\n    /*** Events ***/\r\n\r\n    // Emitted when blocksPerDay changed\r\n    event BlocksPerDayChanged(uint blocksPerDay);\r\n\r\n    // poster\r\n    address public poster;\r\n\r\n    constructor(address poster_, uint blocksPerDay_) public {\r\n        addCheckpoint(0);\r\n        setPoster(poster_);\r\n        setBlocksPerDay(blocksPerDay_);\r\n    }\r\n\r\n    // calculate rewards with given params\r\n    function calculate(uint filstAmount, uint accrualBlockNumber) external view returns (uint) {\r\n        // require(numCheckpoints > 0, \"missing checkpoints\");\r\n        // Checkpoint memory checkpoint0 = checkpoints[0];\r\n        // require(checkpoint0.fromBlock <= accrualBlockNumber, \"bad checkpoint 0\");\r\n\r\n        uint accumulatedFactor;\r\n        uint endBlock = block.number;\r\n        uint32 nextCheckIndex = numCheckpoints - 1;\r\n        while (endBlock > accrualBlockNumber) {\r\n            Checkpoint memory checkpoint = checkpoints[nextCheckIndex];\r\n            uint beginBlock = accrualBlockNumber > checkpoint.fromBlock ? accrualBlockNumber : checkpoint.fromBlock;\r\n            uint blockDelta = sub(endBlock, beginBlock, \"blockDelta\");\r\n            uint factor = mul(checkpoint.value, blockDelta, \"factor\");\r\n            accumulatedFactor = add(accumulatedFactor, factor, \"accumulatedFactor\");\r\n            nextCheckIndex = sub32(nextCheckIndex, uint32(1), \"nextCheckIndex\");\r\n            endBlock = beginBlock;\r\n        }\r\n\r\n        uint rewardAccumulatedMinUnit = mul(filstAmount, accumulatedFactor, \"rewardAccumulatedMinUnit\") / SCALE;\r\n        return rewardAccumulatedMinUnit / 10 ** 18; // FILST's decimals is 18\r\n    }\r\n\r\n    function getAverageQualityOfLast24Hours() public view returns(uint){\r\n        uint224 scaledQualityPerDay = mul224(checkpoints[numCheckpoints - 1].value, blocksPerDay, \"scaledQualityPerDay overflow\");\r\n        uint224 qualityPerDay = div224(scaledQualityPerDay, SCALE, \"qualityPerDay\");\r\n        return qualityPerDay;\r\n    }\r\n\r\n    function setAverageQualityOfLast24Hours(uint quality) external {\r\n        require(msg.sender == poster, \"poster check\");\r\n\r\n        uint224 quality224 = safe224(quality, \"quality exceeds 224 bits\");\r\n        require(quality224 > 0 && quality224 < MAX_AVERAGE_QUALITY, \"Bad quality value\");\r\n\r\n        uint224 scaledQuality = mul224(quality224, SCALE, \"scaledQuality\");\r\n        uint224 qualityPerBlock = div224(scaledQuality, blocksPerDay, \"qualityPerBlock\");\r\n\r\n        addCheckpoint(qualityPerBlock);\r\n    }\r\n\r\n    function addCheckpoint(uint224 qualityPerBlock) internal {\r\n        uint32 blockNumber = safe32(block.number, \"block number exceeds 32 bits\");\r\n        checkpoints[numCheckpoints] = Checkpoint({fromBlock: blockNumber, value: qualityPerBlock});\r\n        numCheckpoints = numCheckpoints + 1;\r\n    }\r\n\r\n    /* admin functions */\r\n\r\n    // set poster\r\n    function setPoster(address newPoster) public onlyOwner {\r\n        require(newPoster != address(0), \"invalid new poster\");\r\n        // update\r\n        poster = newPoster;\r\n    }\r\n\r\n    // set blocksPerDay\r\n    function setBlocksPerDay(uint newBlocksPerDay) public onlyOwner {\r\n        uint224 newBlocksPerDay224 = safe224(newBlocksPerDay, \"newBlocksPerDay exceeds 224 bits\");\r\n        require(newBlocksPerDay224 >= MIN_BLOCKS_PER_DAY, \"exceeds min\");\r\n        require(newBlocksPerDay224 <= MAX_BLOCKS_PER_DAY, \"exceeds max\");\r\n\r\n        // update\r\n        blocksPerDay = newBlocksPerDay224;\r\n\r\n        emit BlocksPerDayChanged(newBlocksPerDay);\r\n    }\r\n\r\n    /* helper functions */\r\n\r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function safe224(uint n, string memory errorMessage) internal pure returns (uint224) {\r\n        require(n < 2**224, errorMessage);\r\n        return uint224(n);\r\n    }\r\n\r\n    function mul224(uint224 a, uint224 b, string memory errorMessage) internal pure returns (uint224) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        uint224 c = a * b;\r\n        require(c / a == b, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function div224(uint224 a, uint224 b, string memory errorMessage) pure internal returns (uint224) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    function add(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function sub32(uint32 a, uint32 b, string memory errorMessage) pure internal returns (uint32) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, errorMessage);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poster_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blocksPerDay_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocksPerDay\",\"type\":\"uint256\"}],\"name\":\"BlocksPerDayChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksPerDay\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"filstAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accrualBlockNumber\",\"type\":\"uint256\"}],\"name\":\"calculate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"value\",\"type\":\"uint224\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAverageQualityOfLast24Hours\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quality\",\"type\":\"uint256\"}],\"name\":\"setAverageQualityOfLast24Hours\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBlocksPerDay\",\"type\":\"uint256\"}],\"name\":\"setBlocksPerDay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPoster\",\"type\":\"address\"}],\"name\":\"setPoster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StandardRewardCalculator","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007b871f97435b841e489b71607cc5cc4c0cc2459c0000000000000000000000000000000000000000000000000000000000001680","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1205748941400713ea28914ab225dbd655895a9229891964252d8050f04cd9ce"}]}