{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.1 https://hardhat.org\r\n\r\n// File contracts/general/Ownable.sol\r\npragma solidity ^0.6.6;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * \r\n * @dev We've added a second owner to share control of the timelocked owner contract.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n    address private _pendingOwner;\r\n    \r\n    // Second allows a DAO to share control.\r\n    address private _secondOwner;\r\n    address private _pendingSecond;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event SecondOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function initializeOwnable() internal {\r\n        require(_owner == address(0), \"already initialized\");\r\n        _owner = msg.sender;\r\n        _secondOwner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n        emit SecondOwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function secondOwner() public view returns (address) {\r\n        return _secondOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"msg.sender is not owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyFirstOwner() {\r\n        require(msg.sender == _owner, \"msg.sender is not owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlySecondOwner() {\r\n        require(msg.sender == _secondOwner, \"msg.sender is not owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner || msg.sender == _secondOwner;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyFirstOwner {\r\n        _pendingOwner = newOwner;\r\n    }\r\n\r\n    function receiveOwnership() public {\r\n        require(msg.sender == _pendingOwner, \"only pending owner can call this function\");\r\n        _transferOwnership(_pendingOwner);\r\n        _pendingOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferSecondOwnership(address newOwner) public onlySecondOwner {\r\n        _pendingSecond = newOwner;\r\n    }\r\n\r\n    function receiveSecondOwnership() public {\r\n        require(msg.sender == _pendingSecond, \"only pending owner can call this function\");\r\n        _transferSecondOwnership(_pendingSecond);\r\n        _pendingSecond = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferSecondOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit SecondOwnershipTransferred(_secondOwner, newOwner);\r\n        _secondOwner = newOwner;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/libraries/Address.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/SafeMath.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n * \r\n * @dev Default OpenZeppelin\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20.sol\r\npragma solidity ^0.6.6;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function mint(address to, uint256 amount) external returns (bool);\r\n    \r\n    function burn(address from, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libraries/SafeERC20.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IWNXM.sol\r\npragma solidity ^0.6.6;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IWNXM {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function mint(address to, uint256 amount) external returns (bool);\r\n    \r\n    function burn(address from, uint256 amount) external returns (bool);\r\n\r\n    function wrap(uint256 amount) external;\r\n    \r\n    function unwrap(uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/interfaces/INexusMutual.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/**\r\n * @dev Quick interface for the Nexus Mutual contract to work with the Armor Contracts.\r\n **/\r\n\r\n// to get nexus mutual contract address\r\ninterface INxmMaster {\r\n    function tokenAddress() external view returns(address);\r\n    function owner() external view returns(address);\r\n    function pauseTime() external view returns(uint);\r\n    function masterInitialized() external view returns(bool);\r\n    function isPause() external view returns(bool check);\r\n    function isMember(address _add) external view returns(bool);\r\n    function getLatestAddress(bytes2 _contractName) external view returns(address payable contractAddress);\r\n}\r\ninterface IPooledStaking {\r\n    function unstakeRequests(uint256 id) external view returns(uint256 amount, uint256 unstakeAt, address contractAddress, address stakerAddress, uint256 next);\r\n    function processPendingActions(uint256 iterations) external returns(bool success);\r\n    function MAX_EXPOSURE() external view returns(uint256);\r\n    function lastUnstakeRequestId() external view returns(uint256);\r\n    function stakerDeposit(address user) external view returns (uint256);\r\n    function stakerMaxWithdrawable(address user) external view returns (uint256);\r\n    function withdrawReward(address user) external;\r\n    function requestUnstake(address[] calldata protocols, uint256[] calldata amounts, uint256 insertAfter) external;\r\n    function depositAndStake(uint256 deposit, address[] calldata protocols, uint256[] calldata amounts) external;\r\n    function stakerContractCount(address staker) external view returns(uint256);\r\n    function stakerContractAtIndex(address staker, uint contractIndex) external view returns (address);\r\n    function stakerContractStake(address staker, address protocol) external view returns (uint256);\r\n    function stakerContractsArray(address staker) external view returns (address[] memory);\r\n    function stakerContractPendingUnstakeTotal(address staker, address protocol) external view returns(uint256);\r\n    function withdraw(uint256 amount) external;\r\n    function stakerReward(address staker) external view returns (uint256);\r\n}\r\n\r\ninterface IClaimsData {\r\n    function getClaimStatusNumber(uint256 claimId) external view returns (uint256, uint256);\r\n    function getClaimDateUpd(uint256 claimId) external view returns (uint256);\r\n}\r\n\r\ninterface INXMPool {\r\n    function buyNXM(uint minTokensOut) external payable;\r\n}\r\n\r\ninterface IGovernance {\r\n    function submitVote(uint256 _proposalId, uint256 _solution) external;\r\n}\r\n\r\ninterface IQuotation {\r\n    function getWithdrawableCoverNoteCoverIds(address owner) external view returns(uint256[] memory, bytes32[] memory);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IRewardDistributionRecipient.sol\r\npragma solidity ^0.6.6;\r\n\r\ninterface IRewardDistributionRecipient {\r\n    function notifyRewardAmount(uint256 reward) payable external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IRewardManager.sol\r\npragma solidity ^0.6.6;\r\n\r\ninterface IRewardManager is IRewardDistributionRecipient {\r\n  function initialize(address _rewardToken, address _stakeController) external;\r\n  function stake(address _user, address _referral, uint256 _coverPrice) external;\r\n  function withdraw(address _user, address _referral, uint256 _coverPrice) external;\r\n  function getReward(address payable _user) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IShieldMining.sol\r\npragma solidity ^0.6.0;\r\n\r\ninterface IShieldMining {\r\n  function claimRewards(\r\n    address[] calldata stakedContracts,\r\n    address[] calldata sponsors,\r\n    address[] calldata tokenAddresses\r\n  ) external returns (uint[] memory tokensRewarded);\r\n}\r\n\r\n\r\n// File contracts/core/arNXMVault.sol\r\n\r\npragma solidity ^0.6.6;\r\n/**\r\n * @title arNXM Vault\r\n * @dev Vault to stake wNXM or NXM in Nexus Mutual while maintaining your liquidity.\r\n *      This is V2 which replaces V1 behind a proxy. Updated variables at the bottom.\r\n * @author Armor.fi -- Robert M.C. Forster, Taek Lee\r\n * SPDX-License-Identifier: (c) Armor.Fi DAO, 2021\r\n**/\r\n\r\ncontract arNXMVault is Ownable {\r\n\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 constant private DENOMINATOR = 1000;\r\n\r\n    // Amount of time between\r\n    uint256 private ____deprecated____0;\r\n\r\n    // Amount of time that rewards are distributed over.\r\n    uint256 public rewardDuration;\r\n\r\n    // This used to be unstake percent but has now been deprecated in favor of individual unstakes.\r\n    // Paranoia results in this not being replaced but rather deprecated and new variables placed at the bottom.\r\n    uint256 private ____deprecated____1;\r\n\r\n    // Amount of wNXM (in token Wei) to reserve each period.\r\n    // Overwrites reservePercent in update.\r\n    uint256 public reserveAmount;\r\n\r\n    // Withdrawals may be paused if a hack has recently happened. Timestamp of when the pause happened.\r\n    uint256 public withdrawalsPaused;\r\n\r\n    // Amount of time withdrawals may be paused after a hack.\r\n    uint256 public pauseDuration;\r\n\r\n    // Address that will receive administration funds from the contract.\r\n    address public beneficiary;\r\n\r\n    // Percent of funds to be distributed for administration of the contract. 10 == 1%; 1000 == 100%.\r\n    uint256 public adminPercent;\r\n\r\n    // Percent of staking rewards that referrers get.\r\n    uint256 public referPercent;\r\n\r\n    // Timestamp of when the last restake took place--7 days between each.\r\n    uint256 public lastRestake;\r\n\r\n    // The amount of the last reward.\r\n    uint256 public lastReward;\r\n\r\n    // Uniswap, Maker, Compound, Aave, Curve, Synthetix, Yearn, RenVM, Balancer, dForce.\r\n    address[] public protocols;\r\n\r\n    // Amount to unstake each time.\r\n    uint256[] private amounts;\r\n\r\n    // Protocols being actively used in staking or unstaking.\r\n    address[] private activeProtocols;\r\n\r\n    struct WithdrawalRequest {\r\n        uint48 requestTime;\r\n        uint104 nAmount;\r\n        uint104 arAmount;\r\n    }\r\n\r\n    // Nxm tokens.\r\n    IERC20 public wNxm;\r\n    IERC20 public nxm;\r\n    IERC20 public arNxm;\r\n\r\n    // Nxm Master address.\r\n    INxmMaster public nxmMaster;\r\n\r\n    // Reward manager for referrers.\r\n    IRewardManager public rewardManager;\r\n\r\n    // Referral => referrer\r\n    mapping (address => address) public referrers;\r\n\r\n    event Deposit(address indexed user, uint256 nAmount, uint256 arAmount, uint256 timestamp);\r\n    event WithdrawRequested(address indexed user, uint256 arAmount, uint256 nAmount, uint256 requestTime, uint256 withdrawTime);\r\n    event Withdrawal(address indexed user, uint256 nAmount, uint256 arAmount, uint256 timestamp);\r\n    event Restake(uint256 withdrawn, uint256 unstaked, uint256 staked, uint256 totalAum, uint256 timestamp);\r\n    event NxmReward(uint256 reward, uint256 timestamp, uint256 totalAum);\r\n\r\n    // Avoid composability issues for liquidation.\r\n    modifier notContract {\r\n        require(msg.sender == tx.origin, \"Sender must be an EOA.\");\r\n        _;\r\n    }\r\n\r\n    // Functions as re-entrancy protection and more.\r\n    // Mapping down below with other update variables.\r\n    modifier oncePerTx {\r\n        require(block.timestamp > lastCall[tx.origin], \"May only call this contract once per transaction.\");\r\n        lastCall[tx.origin] = block.timestamp;\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @param _wNxm Address of the wNxm contract.\r\n     * @param _arNxm Address of the arNxm contract.\r\n     * @param _nxmMaster Address of Nexus' master address (to fetch others).\r\n     * @param _rewardManager Address of the ReferralRewards smart contract.\r\n    **/\r\n    function initialize(\r\n        address _wNxm,\r\n        address _arNxm,\r\n        address _nxm,\r\n        address _nxmMaster,\r\n        address _rewardManager\r\n    )\r\n      public\r\n    {\r\n        require(address(arNxm) == address(0), \"Contract has already been initialized.\");\r\n\r\n        Ownable.initializeOwnable();\r\n        wNxm = IERC20(_wNxm);\r\n        nxm = IERC20(_nxm);\r\n        arNxm = IERC20(_arNxm);\r\n        nxmMaster = INxmMaster(_nxmMaster);\r\n        rewardManager = IRewardManager(_rewardManager);\r\n        // unstakePercent = 100;\r\n        adminPercent = 0;\r\n        referPercent = 25;\r\n        reserveAmount = 30 ether;\r\n        pauseDuration = 10 days;\r\n        beneficiary = msg.sender;\r\n        // restakePeriod = 3 days;\r\n        rewardDuration = 9 days;\r\n\r\n        // Approve to wrap and send funds to reward manager.\r\n        arNxm.approve( _rewardManager, uint256(-1) );\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit wNxm or NXM to get arNxm in return.\r\n     * @param _nAmount The amount of NXM to stake.\r\n     * @param _referrer The address that referred this user.\r\n     * @param _isNxm True if the token is NXM, false if the token is wNXM.\r\n    **/\r\n    function deposit(uint256 _nAmount, address _referrer, bool _isNxm)\r\n      external\r\n      oncePerTx\r\n    {\r\n        if ( referrers[msg.sender] == address(0) ) {\r\n            referrers[msg.sender] = _referrer != address(0) ? _referrer : beneficiary;\r\n            address refToSet = _referrer != address(0) ? _referrer : beneficiary;\r\n            referrers[msg.sender] = refToSet;\r\n\r\n            // A wallet with a previous arNXM balance would be able to subtract referral weight that it never added.\r\n            uint256 prevBal = arNxm.balanceOf(msg.sender);\r\n            if (prevBal > 0) rewardManager.stake(refToSet, msg.sender, prevBal);\r\n        }\r\n\r\n        // This amount must be determined before arNxm mint.\r\n        uint256 arAmount = arNxmValue(_nAmount);\r\n\r\n        if (_isNxm) {\r\n            nxm.safeTransferFrom(msg.sender, address(this), _nAmount);\r\n        } else {\r\n            wNxm.safeTransferFrom(msg.sender, address(this), _nAmount);\r\n            _unwrapWnxm(_nAmount);\r\n        }\r\n\r\n        // Mint also increases sender's referral balance through alertTransfer.\r\n        arNxm.mint(msg.sender, arAmount);\r\n\r\n        emit Deposit(msg.sender, _nAmount, arAmount, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw an amount of wNxm or NXM by burning arNxm.\r\n     * @param _arAmount The amount of arNxm to burn for the wNxm withdraw.\r\n     * @param _payFee Flag to pay fee to withdraw without delay.\r\n    **/\r\n    function withdraw(uint256 _arAmount, bool _payFee)\r\n      external\r\n      oncePerTx\r\n    {\r\n        require(block.timestamp.sub(withdrawalsPaused) > pauseDuration, \"Withdrawals are temporarily paused.\");\r\n\r\n        // This amount must be determined before arNxm burn.\r\n        uint256 nAmount = nxmValue(_arAmount);\r\n        require(totalPending.add(nAmount) <= nxm.balanceOf(address(this)), \"Not enough NXM available for witthdrawal.\");\r\n\r\n        if (_payFee) {\r\n            uint256 fee = nAmount.mul(withdrawFee).div(1000);\r\n            uint256 disbursement = nAmount.sub(fee);\r\n\r\n            // Burn also decreases sender's referral balance through alertTransfer.\r\n            arNxm.burn(msg.sender, _arAmount);\r\n            _wrapNxm(disbursement);\r\n            wNxm.safeTransfer(msg.sender, disbursement);\r\n\r\n            emit Withdrawal(msg.sender, nAmount, _arAmount, block.timestamp);\r\n        } else {\r\n            totalPending = totalPending.add(nAmount);\r\n            arNxm.safeTransferFrom(msg.sender, address(this), _arAmount);\r\n            WithdrawalRequest memory prevWithdrawal = withdrawals[msg.sender];\r\n            withdrawals[msg.sender] = WithdrawalRequest(\r\n                uint48(block.timestamp),\r\n                prevWithdrawal.nAmount + uint104(nAmount),\r\n                prevWithdrawal.arAmount + uint104(_arAmount)\r\n            );\r\n\r\n            emit WithdrawRequested(msg.sender, _arAmount, nAmount, block.timestamp, block.timestamp.add(withdrawDelay));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw from request\r\n    **/\r\n    function withdrawFinalize()\r\n      external\r\n      oncePerTx\r\n    {\r\n        WithdrawalRequest memory withdrawal = withdrawals[msg.sender];\r\n        uint256 nAmount = uint256(withdrawal.nAmount);\r\n        uint256 arAmount = uint256(withdrawal.arAmount);\r\n        uint256 requestTime = uint256(withdrawal.requestTime);\r\n\r\n        require(block.timestamp.sub(withdrawalsPaused) > pauseDuration, \"Withdrawals are temporarily paused.\");\r\n        require(requestTime.add(withdrawDelay) <= block.timestamp, \"Not ready to withdraw\");\r\n        require(nAmount > 0, \"No pending amount to withdraw\");\r\n\r\n        // Burn also decreases sender's referral balance through alertTransfer.\r\n        arNxm.burn(address(this), arAmount);\r\n        _wrapNxm(nAmount);\r\n        wNxm.safeTransfer(msg.sender, nAmount);\r\n        delete withdrawals[msg.sender];\r\n        totalPending = totalPending.sub(nAmount);\r\n\r\n        emit Withdrawal(msg.sender, nAmount, arAmount, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Split off from restake() function to enable reward fetching at any time.\r\n    **/\r\n    function getRewardNxm()\r\n      external\r\n      notContract\r\n    {\r\n        uint256 prevAum = aum();\r\n        uint256 rewards = _getRewardsNxm();\r\n\r\n        if (rewards > 0) {\r\n            lastRewardTimestamp = block.timestamp;\r\n            emit NxmReward(rewards, block.timestamp, prevAum);\r\n        } else if(lastRewardTimestamp == 0) {\r\n            lastRewardTimestamp = block.timestamp;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev claim rewards from shield mining\r\n     * @param _shieldMining shield mining contract address\r\n     * @param _protocols Protocol funding the rewards.\r\n     * @param _sponsors sponsor address who funded the shield mining\r\n     * @param _tokens token address that sponsor is distributing\r\n    **/\r\n    function getShieldMiningRewards(address _shieldMining, address[] calldata _protocols, address[] calldata _sponsors, address[] calldata _tokens)\r\n      external\r\n      notContract\r\n    {\r\n        IShieldMining(_shieldMining).claimRewards(_protocols, _sponsors, _tokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Find the arNxm value of a certain amount of wNxm.\r\n     * @param _nAmount The amount of NXM to check arNxm value of.\r\n     * @return arAmount The amount of arNxm the input amount of wNxm is worth.\r\n    **/\r\n    function arNxmValue(uint256 _nAmount)\r\n      public\r\n      view\r\n    returns (uint256 arAmount)\r\n    {\r\n        // Get reward allowed to be distributed.\r\n        uint256 reward = _currentReward();\r\n\r\n        // aum() holds full reward so we sub lastReward (which needs to be distributed over time)\r\n        // and add reward that has been distributed\r\n        uint256 totalN = aum().add(reward).sub(lastReward);\r\n        uint256 totalAr = arNxm.totalSupply();\r\n\r\n        // Find exchange amount of one token, then find exchange amount for full value.\r\n        if (totalN == 0) {\r\n            arAmount = _nAmount;\r\n        } else {\r\n            uint256 oneAmount = ( totalAr.mul(1e18) ).div(totalN);\r\n            arAmount = _nAmount.mul(oneAmount).div(1e18);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Find the wNxm value of a certain amount of arNxm.\r\n     * @param _arAmount The amount of arNxm to check wNxm value of.\r\n     * @return nAmount The amount of wNxm the input amount of arNxm is worth.\r\n    **/\r\n    function nxmValue(uint256 _arAmount)\r\n      public\r\n      view\r\n    returns (uint256 nAmount)\r\n    {\r\n        // Get reward allowed to be distributed.\r\n        uint256 reward = _currentReward();\r\n\r\n        // aum() holds full reward so we sub lastReward (which needs to be distributed over time)\r\n        // and add reward that has been distributed\r\n        uint256 totalN = aum().add(reward).sub(lastReward);\r\n        uint256 totalAr = arNxm.totalSupply();\r\n\r\n        // Find exchange amount of one token, then find exchange amount for full value.\r\n        uint256 oneAmount = ( totalN.mul(1e18) ).div(totalAr);\r\n        nAmount = _arAmount.mul(oneAmount).div(1e18);\r\n    }\r\n\r\n    /**\r\n     * @dev Used to determine total Assets Under Management.\r\n     * @return aumTotal Full amount of assets under management (wNXM balance + stake deposit).\r\n    **/\r\n    function aum()\r\n      public\r\n      view\r\n    returns (uint256 aumTotal)\r\n    {\r\n        IPooledStaking pool = IPooledStaking( _getPool() );\r\n        uint256 balance = nxm.balanceOf( address(this) );\r\n        uint256 stakeDeposit = pool.stakerDeposit( address(this) );\r\n        aumTotal = balance.add(stakeDeposit);\r\n    }\r\n\r\n    /**\r\n     * @dev Used to determine staked nxm amount in pooled staking contract.\r\n     * @return staked Staked nxm amount.\r\n    **/\r\n    function stakedNxm()\r\n      public\r\n      view\r\n    returns (uint256 staked)\r\n    {\r\n        IPooledStaking pool = IPooledStaking( _getPool() );\r\n        staked = pool.stakerDeposit( address(this) );\r\n    }\r\n\r\n    /**\r\n     * @dev Used to determine distributed reward amount\r\n     * @return reward distributed reward amount\r\n    **/\r\n    function currentReward()\r\n      external\r\n      view\r\n    returns (uint256 reward)\r\n    {\r\n        reward = _currentReward();\r\n    }\r\n\r\n    /**\r\n     * @dev Anyone may call this function to pause withdrawals for a certain amount of time.\r\n     *      We check Nexus contracts for a recent accepted claim, then can pause to avoid further withdrawals.\r\n     * @param _claimId The ID of the cover that has been accepted for a confirmed hack.\r\n    **/\r\n    function pauseWithdrawals(uint256 _claimId)\r\n      external\r\n    {\r\n        IClaimsData claimsData = IClaimsData( _getClaimsData() );\r\n\r\n        (/*coverId*/, uint256 status) = claimsData.getClaimStatusNumber(_claimId);\r\n        uint256 dateUpdate = claimsData.getClaimDateUpd(_claimId);\r\n\r\n        // Status must be 14 and date update must be within the past 7 days.\r\n        if (status == 14 && block.timestamp.sub(dateUpdate) <= 7 days) {\r\n            withdrawalsPaused = block.timestamp;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev When arNXM tokens are transferred, the referrer stakes must be adjusted on RewardManager.\r\n     *      This is taken care of by a \"_beforeTokenTransfer\" function on the arNXM ERC20.\r\n     * @param _from The user that tokens are being transferred from.\r\n     * @param _to The user that tokens are being transferred to.\r\n     * @param _amount The amount of tokens that are being transferred.\r\n    **/\r\n    function alertTransfer(address _from, address _to, uint256 _amount)\r\n      external\r\n    {\r\n        require(msg.sender == address(arNxm), \"Sender must be the token contract.\");\r\n\r\n        // address(0) means the contract or EOA has not interacted directly with arNXM Vault.\r\n        if ( referrers[_from] != address(0) ) rewardManager.withdraw(referrers[_from], _from, _amount);\r\n        if ( referrers[_to] != address(0) ) rewardManager.stake(referrers[_to], _to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw any available rewards from Nexus.\r\n     * @return finalReward The amount of rewards to be given to users (full reward - admin reward - referral reward).\r\n    **/\r\n    function _getRewardsNxm()\r\n      internal\r\n      returns (uint256 finalReward)\r\n    {\r\n        IPooledStaking pool = IPooledStaking( _getPool() );\r\n\r\n        // Find current reward, find user reward (transfers reward to admin within this).\r\n        uint256 fullReward = pool.stakerReward( address(this) );\r\n        finalReward = _feeRewardsNxm(fullReward);\r\n\r\n        pool.withdrawReward( address(this) );\r\n        lastReward = finalReward;\r\n    }\r\n\r\n    /**\r\n     * @dev Find and distribute administrator rewards.\r\n     * @param reward Full reward given from this week.\r\n     * @return userReward Reward amount given to users (full reward - admin reward).\r\n    **/\r\n    function _feeRewardsNxm(uint256 reward)\r\n      internal\r\n    returns (uint256 userReward)\r\n    {\r\n        // Find both rewards before minting any.\r\n        uint256 adminReward = arNxmValue( reward.mul(adminPercent).div(DENOMINATOR) );\r\n        uint256 referReward = arNxmValue( reward.mul(referPercent).div(DENOMINATOR) );\r\n\r\n        // Mint to beneficary then this address (to then transfer to rewardManager).\r\n        if (adminReward > 0) {\r\n            arNxm.mint(beneficiary, adminReward);\r\n        }\r\n        if (referReward > 0) {\r\n            arNxm.mint(address(this), referReward);\r\n            rewardManager.notifyRewardAmount(referReward);\r\n        }\r\n\r\n        userReward = reward.sub(adminReward).sub(referReward);\r\n    }\r\n\r\n    /**\r\n     * @dev Used to withdraw nxm from staking pool\r\n    **/\r\n    function withdrawNxm()\r\n      external\r\n      onlyOwner\r\n    {\r\n        _withdrawNxm();\r\n    }\r\n\r\n    /**\r\n     * @dev Used to unwrap wnxm tokens to nxm\r\n    **/\r\n    function unwrapWnxm()\r\n      external\r\n    {\r\n        uint256 balance = wNxm.balanceOf(address(this));\r\n        _unwrapWnxm(balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Used to stake nxm tokens to stake pool. it is determined manually\r\n    **/\r\n    function stakeNxm(address[] calldata _protocols, uint256[] calldata _stakeAmounts) external onlyOwner{\r\n        _stakeNxm(_protocols, _stakeAmounts);\r\n    }\r\n\r\n    /**\r\n     * @dev Used to unstake nxm tokens from stake pool. it is determined manually\r\n    **/\r\n    function unstakeNxm(uint256 _lastId, address[] calldata _protocols, uint256[] calldata _unstakeAmounts) external onlyOwner{\r\n        _unstakeNxm(_lastId, _protocols, _unstakeAmounts);\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraw any Nxm we can from the staking pool.\r\n     * @return amount The amount of funds that are being withdrawn.\r\n    **/\r\n    function _withdrawNxm()\r\n      internal\r\n      returns (uint256 amount)\r\n    {\r\n        IPooledStaking pool = IPooledStaking( _getPool() );\r\n        amount = pool.stakerMaxWithdrawable( address(this) );\r\n        pool.withdraw(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Stake any wNxm over the amount we need to keep in reserve (bufferPercent% more than withdrawals last week).\r\n     * @param _protocols List of protocols to stake in (NOT list of all protocols).\r\n     * @param _stakeAmounts List of amounts to stake in each relevant protocol--this is only ADDITIONAL stake rather than full stake.\r\n     * @return toStake Amount of token that we will be staking.\r\n     **/\r\n    function _stakeNxm(address[] memory _protocols, uint256[] memory _stakeAmounts)\r\n      internal\r\n      returns (uint256 toStake)\r\n    {\r\n        IPooledStaking pool = IPooledStaking( _getPool() );\r\n        uint256 balance = nxm.balanceOf( address(this) );\r\n        // If we do need to restake funds...\r\n        // toStake == additional stake on top of old ones\r\n        if (reserveAmount.add(totalPending) > balance) {\r\n            toStake = 0;\r\n        } else {\r\n            toStake = balance.sub(reserveAmount.add(totalPending));\r\n            _approveNxm(_getTokenController(), toStake);\r\n        }\r\n\r\n        // get current data from pooled staking\r\n        address[] memory currentProtocols = pool.stakerContractsArray(address(this));\r\n        // this will be used to calculate the remaining exposure\r\n        for (uint256 i = 0; i < currentProtocols.length; i++) {\r\n            amounts.push(pool.stakerContractStake(address(this), currentProtocols[i]));\r\n            activeProtocols.push(currentProtocols[i]);\r\n        }\r\n\r\n        // push additional stake data\r\n        for(uint256 i = 0; i < _protocols.length; i++) {\r\n            address protocol = _protocols[i];\r\n            uint256 curIndex = _addressArrayFind(currentProtocols, protocol);\r\n            if(curIndex == type(uint256).max) {\r\n                activeProtocols.push(protocol);\r\n                amounts.push(_stakeAmounts[i]);\r\n            } else {\r\n                amounts[curIndex] += _stakeAmounts[i];\r\n            }\r\n        }\r\n        // now calculate the new staking protocols\r\n        pool.depositAndStake(toStake, activeProtocols, amounts);\r\n        delete activeProtocols;\r\n        delete amounts;\r\n    }\r\n\r\n    /**\r\n     * @dev Unstake an amount from each protocol on Nxm (takes 30 days to unstake).\r\n     * @param _lastId The ID of the last unstake request on Nexus Mutual (needed for unstaking).\r\n    **/\r\n    function _unstakeNxm(uint256 _lastId, address[] memory _protocols, uint256[] memory _amounts)\r\n      internal\r\n    {\r\n        IPooledStaking pool = IPooledStaking( _getPool() );\r\n        pool.requestUnstake(_protocols, _amounts, _lastId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount we can unstake (if we can't unstake the full amount desired).\r\n     * @param _protocol The address of the protocol we're checking.\r\n     * @param _unstakeAmount Amount we want to unstake.\r\n     * @return The amount of funds that can be unstaked from this protocol if not the full amount desired.\r\n    **/\r\n    function _protocolUnstakeable(address _protocol, uint256 _unstakeAmount)\r\n      internal\r\n      view\r\n    returns (uint256) {\r\n        IPooledStaking pool = IPooledStaking( _getPool() );\r\n        uint256 stake = pool.stakerContractStake(address(this), _protocol);\r\n        uint256 requested = pool.stakerContractPendingUnstakeTotal(address(this), _protocol);\r\n\r\n        // Scenario in which all staked has already been requested to be unstaked.\r\n        if (requested >= stake) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 available = stake - requested;\r\n\r\n        return _unstakeAmount <= available ? _unstakeAmount : available;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate what the current reward is. We stream this to arNxm value to avoid dumps.\r\n     * @return reward Amount of reward currently calculated into arNxm value.\r\n    **/\r\n    function _currentReward()\r\n      internal\r\n      view\r\n    returns (uint256 reward)\r\n    {\r\n        uint256 duration = rewardDuration;\r\n        uint256 timeElapsed = block.timestamp.sub(lastRewardTimestamp);\r\n        if(timeElapsed == 0){\r\n            return 0;\r\n        }\r\n\r\n        // Full reward is added to the balance if it's been more than the disbursement duration.\r\n        if (timeElapsed >= duration) {\r\n            reward = lastReward;\r\n        // Otherwise, disburse amounts linearly over duration.\r\n        } else {\r\n            // 1e18 just for a buffer.\r\n            uint256 portion = ( duration.mul(1e18) ).div(timeElapsed);\r\n            reward = ( lastReward.mul(1e18) ).div(portion);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Wrap Nxm tokens to be able to be withdrawn as wNxm.\r\n    **/\r\n    function _wrapNxm(uint256 _amount)\r\n      internal\r\n    {\r\n        _approveNxm(address(wNxm), _amount);\r\n        IWNXM(address(wNxm)).wrap(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Unwrap wNxm tokens to be able to be used within the Nexus Mutual system.\r\n     * @param _amount Amount of wNxm tokens to be unwrapped.\r\n    **/\r\n    function _unwrapWnxm(uint256 _amount)\r\n      internal\r\n    {\r\n        IWNXM(address(wNxm)).unwrap(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve wNxm contract to be able to transferFrom Nxm from this contract.\r\n    **/\r\n    function _approveNxm(address _to, uint256 _amount)\r\n      internal\r\n    {\r\n        nxm.approve( _to, _amount );\r\n    }\r\n\r\n    /**\r\n     * @dev Get current address of the Nexus staking pool.\r\n     * @return pool Address of the Nexus staking pool contract.\r\n    **/\r\n    function _getPool()\r\n      internal\r\n      view\r\n    returns (address pool)\r\n    {\r\n        pool = nxmMaster.getLatestAddress(\"PS\");\r\n    }\r\n\r\n    /**\r\n     * @dev Get the current NXM token controller (for NXM actions) from Nexus Mutual.\r\n     * @return controller Address of the token controller.\r\n    **/\r\n    function _getTokenController()\r\n      internal\r\n      view\r\n    returns(address controller)\r\n    {\r\n        controller = nxmMaster.getLatestAddress(\"TC\");\r\n    }\r\n\r\n    /**\r\n     * @dev Get current address of the Nexus Claims Data contract.\r\n     * @return claimsData Address of the Nexus Claims Data contract.\r\n    **/\r\n    function _getClaimsData()\r\n      internal\r\n      view\r\n    returns (address claimsData)\r\n    {\r\n        claimsData = nxmMaster.getLatestAddress(\"CD\");\r\n    }\r\n\r\n    function _addressArrayFind(address[] memory arr, address elem) internal pure returns(uint256 index) {\r\n        for(uint256 i = 0; i<arr.length; i++) {\r\n            if(arr[i] == elem) {\r\n                return i;\r\n            }\r\n        }\r\n        return type(uint256).max;\r\n    }\r\n\r\n    /*---- Ownable functions ----*/\r\n\r\n    /**\r\n     * @dev pull nxm from arNFT and wrap it to wnxm\r\n    **/\r\n    function pullNXM(address _from, uint256 _amount, address _to)\r\n      external\r\n      onlyOwner\r\n    {\r\n        nxm.transferFrom(_from, address(this), _amount);\r\n        _wrapNxm(_amount);\r\n        wNxm.transfer(_to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Buy NXM direct from Nexus Mutual. Used by ExchangeManager.\r\n     * @param _minNxm Minimum amount of NXM tokens to receive in return for the Ether.\r\n    **/\r\n    function buyNxmWithEther(uint256 _minNxm)\r\n      external\r\n      payable\r\n    {\r\n        require(msg.sender == 0x1337DEF157EfdeF167a81B3baB95385Ce5A14477, \"Sender must be ExchangeManager.\");\r\n        INXMPool pool = INXMPool(nxmMaster.getLatestAddress(\"P1\"));\r\n        pool.buyNXM{value:address(this).balance}(_minNxm);\r\n    }\r\n\r\n    /**\r\n     * @dev Vote on Nexus Mutual governance proposals using tokens.\r\n     * @param _proposalId ID of the proposal to vote on.\r\n     * @param _solutionChosen Side of the proposal we're voting for (0 for no, 1 for yes).\r\n    **/\r\n    function submitVote(uint256 _proposalId, uint256 _solutionChosen)\r\n      external\r\n      onlyOwner\r\n    {\r\n        address gov = nxmMaster.getLatestAddress(\"GV\");\r\n        IGovernance(gov).submitVote(_proposalId, _solutionChosen);\r\n    }\r\n\r\n    /**\r\n     * @dev rescue tokens locked in contract\r\n     * @param token address of token to withdraw\r\n     */\r\n    function rescueToken(address token)\r\n      external\r\n      onlyOwner\r\n    {\r\n        require(token != address(nxm) && token != address(wNxm) && token != address(arNxm), \"Cannot rescue NXM-based tokens\");\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).safeTransfer(msg.sender, balance);\r\n    }\r\n\r\n    /*---- Admin functions ----*/\r\n\r\n    /**\r\n     * @dev Owner may change how much of the AUM should be saved in reserve each period.\r\n     * @param _reserveAmount The amount of wNXM (in token Wei) to reserve each period.\r\n    **/\r\n    function changeReserveAmount(uint256 _reserveAmount)\r\n      external\r\n      onlyOwner\r\n    {\r\n        reserveAmount = _reserveAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Owner may change the percent of insurance fees referrers receive.\r\n     * @param _referPercent The percent of fees referrers receive. 50 == 5%.\r\n    **/\r\n    function changeReferPercent(uint256 _referPercent)\r\n      external\r\n      onlyOwner\r\n    {\r\n        require(_referPercent <= 500, \"Cannot give referrer more than 50% of rewards.\");\r\n        referPercent = _referPercent;\r\n    }\r\n\r\n    /**\r\n     * @dev Owner may change the withdraw fee.\r\n     * @param _withdrawFee The fee of withdraw.\r\n    **/\r\n    function changeWithdrawFee(uint256 _withdrawFee)\r\n      external\r\n      onlyOwner\r\n    {\r\n        require(_withdrawFee <= DENOMINATOR, \"Cannot take more than 100% of withdraw\");\r\n        withdrawFee = _withdrawFee;\r\n    }\r\n\r\n    /**\r\n     * @dev Owner may change the withdraw delay.\r\n     * @param _withdrawDelay Withdraw delay.\r\n    **/\r\n    function changeWithdrawDelay(uint256 _withdrawDelay)\r\n      external\r\n      onlyOwner\r\n    {\r\n        withdrawDelay = _withdrawDelay;\r\n    }\r\n\r\n    /**\r\n     * @dev Change the percent of rewards that are given for administration of the contract.\r\n     * @param _adminPercent The percent of rewards to be given for administration (10 == 1%, 1000 == 100%)\r\n    **/\r\n    function changeAdminPercent(uint256 _adminPercent)\r\n      external\r\n      onlyOwner\r\n    {\r\n        require(_adminPercent <= 500, \"Cannot give admin more than 50% of rewards.\");\r\n        adminPercent = _adminPercent;\r\n    }\r\n\r\n    /**\r\n     * @dev Owner may change the amount of time it takes to distribute rewards from Nexus.\r\n     * @param _rewardDuration The amount of time it takes to fully distribute rewards.\r\n    **/\r\n    function changeRewardDuration(uint256 _rewardDuration)\r\n      external\r\n      onlyOwner\r\n    {\r\n        require(_rewardDuration <= 30 days, \"Reward duration cannot be more than 30 days.\");\r\n        rewardDuration = _rewardDuration;\r\n    }\r\n\r\n    /**\r\n     * @dev Owner may change the amount of time that withdrawals are paused after a hack is confirmed.\r\n     * @param _pauseDuration The new amount of time that withdrawals will be paused.\r\n    **/\r\n    function changePauseDuration(uint256 _pauseDuration)\r\n      external\r\n      onlyOwner\r\n    {\r\n        require(_pauseDuration <= 30 days, \"Pause duration cannot be more than 30 days.\");\r\n        pauseDuration = _pauseDuration;\r\n    }\r\n\r\n    /**\r\n     * @dev Change beneficiary of the administration funds.\r\n     * @param _newBeneficiary Address of the new beneficiary to receive funds.\r\n    **/\r\n    function changeBeneficiary(address _newBeneficiary)\r\n      external\r\n      onlyOwner\r\n    {\r\n        beneficiary = _newBeneficiary;\r\n    }\r\n\r\n    //// Update addition. Proxy paranoia brought it down here. ////\r\n\r\n    uint256 public lastRewardTimestamp;\r\n\r\n    //// Second update additions. ////\r\n\r\n    // Protocol that the next restaking will begin on.\r\n    uint256 private ____deprecated____2;\r\n\r\n    // Checkpoint in case we want to cut off certain buckets (where we begin the rotations).\r\n    // To bar protocols from being staked/unstaked, move them to before checkpointProtocol.\r\n    uint256 private ____deprecated____3;\r\n\r\n    // Number of protocols to stake each time.\r\n    uint256 private ____deprecated____4;\r\n\r\n    // Individual percent to unstake.\r\n    uint256[] private ____deprecated____5;\r\n\r\n    // Last time an EOA has called this contract.\r\n    mapping (address => uint256) public lastCall;\r\n\r\n    ///// Third update additions. /////\r\n\r\n    // Withdraw fee to withdraw immediately.\r\n    uint256 public withdrawFee;\r\n\r\n    // Delay to withdraw\r\n    uint256 public withdrawDelay;\r\n\r\n    // Total amount of withdrawals pending.\r\n    uint256 public totalPending;\r\n\r\n    mapping (address => WithdrawalRequest) public withdrawals;\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAum\",\"type\":\"uint256\"}],\"name\":\"NxmReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Restake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SecondOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adminPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"alertTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arNxm\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nAmount\",\"type\":\"uint256\"}],\"name\":\"arNxmValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"arAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aumTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minNxm\",\"type\":\"uint256\"}],\"name\":\"buyNxmWithEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adminPercent\",\"type\":\"uint256\"}],\"name\":\"changeAdminPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBeneficiary\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pauseDuration\",\"type\":\"uint256\"}],\"name\":\"changePauseDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referPercent\",\"type\":\"uint256\"}],\"name\":\"changeReferPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reserveAmount\",\"type\":\"uint256\"}],\"name\":\"changeReserveAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardDuration\",\"type\":\"uint256\"}],\"name\":\"changeRewardDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawDelay\",\"type\":\"uint256\"}],\"name\":\"changeWithdrawDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"}],\"name\":\"changeWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isNxm\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardNxm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shieldMining\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_protocols\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_sponsors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getShieldMiningRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wNxm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_arNxm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nxm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nxmMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRestake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nxm\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nxmMaster\",\"outputs\":[{\"internalType\":\"contract INxmMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_arAmount\",\"type\":\"uint256\"}],\"name\":\"nxmValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimId\",\"type\":\"uint256\"}],\"name\":\"pauseWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"protocols\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"pullNXM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveSecondOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"contract IRewardManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_protocols\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_stakeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"stakeNxm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedNxm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_solutionChosen\",\"type\":\"uint256\"}],\"name\":\"submitVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferSecondOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_protocols\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_unstakeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"unstakeNxm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unwrapWnxm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wNxm\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_arAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_payFee\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFinalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawNxm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"requestTime\",\"type\":\"uint48\"},{\"internalType\":\"uint104\",\"name\":\"nAmount\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"arAmount\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalsPaused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"arNXMVault","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8e65c3639603491a3b4afbb278ada5488fad05a461c4283f7fcc5263045bc34f"}]}