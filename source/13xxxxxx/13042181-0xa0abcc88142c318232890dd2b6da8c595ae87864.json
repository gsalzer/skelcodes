{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/governance/GovRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IReign.sol\\\";\\nimport \\\"../libraries/LibRewardsDistribution.sol\\\";\\n\\ncontract GovRewards {\\n    // lib\\n    using SafeMath for uint256;\\n    using SafeMath for uint128;\\n\\n    // state variables\\n\\n    address private _rewardsVault;\\n    // contracts\\n    IERC20 private _reignToken;\\n    IReign private _reign;\\n\\n    mapping(uint128 => uint256) private _sizeAtEpoch;\\n    mapping(uint128 => uint256) private _epochInitTime;\\n    mapping(address => uint128) private lastEpochIdHarvested;\\n\\n    uint256 public epochDuration; // init from reignDiamond contract\\n    uint256 public epochStart; // init from reignDiamond contract\\n    uint128 public lastInitializedEpoch;\\n\\n    // events\\n    event MassHarvest(\\n        address indexed user,\\n        uint256 epochsHarvested,\\n        uint256 totalValue\\n    );\\n    event Harvest(\\n        address indexed user,\\n        uint128 indexed epochId,\\n        uint256 amount\\n    );\\n    event InitEpoch(address indexed caller, uint128 indexed epochId);\\n\\n    // constructor\\n    constructor(\\n        address reignTokenAddress,\\n        address reign,\\n        address rewardsVault\\n    ) {\\n        _reignToken = IERC20(reignTokenAddress);\\n        _reign = IReign(reign);\\n        _rewardsVault = rewardsVault;\\n    }\\n\\n    //before this the epoch start date is 0\\n    function initialize() public {\\n        require(epochStart == 0, \\\"Can only be initialized once\\\");\\n        epochDuration = _reign.getEpochDuration();\\n        epochStart = _reign.getEpoch1Start();\\n    }\\n\\n    // public method to harvest all the unharvested epochs until current epoch - 1\\n    function massHarvest() external returns (uint256) {\\n        uint256 totalDistributedValue;\\n        uint256 epochId = _getEpochId().sub(1); // fails in epoch 0\\n\\n        for (\\n            uint128 i = lastEpochIdHarvested[msg.sender] + 1;\\n            i <= epochId;\\n            i++\\n        ) {\\n            // i = epochId\\n            // compute distributed Value and do one single transfer at the end\\n            uint256 userRewards = _harvest(i);\\n            totalDistributedValue = totalDistributedValue.add(userRewards);\\n        }\\n\\n        emit MassHarvest(\\n            msg.sender,\\n            epochId - lastEpochIdHarvested[msg.sender],\\n            totalDistributedValue\\n        );\\n\\n        _reignToken.transferFrom(\\n            _rewardsVault,\\n            msg.sender,\\n            totalDistributedValue\\n        );\\n\\n        return totalDistributedValue;\\n    }\\n\\n    //gets the rewards for a single epoch\\n    function harvest(uint128 epochId) external returns (uint256) {\\n        // checks for requested epoch\\n        require(_getEpochId() > epochId, \\\"This epoch is in the future\\\");\\n        require(\\n            lastEpochIdHarvested[msg.sender].add(1) == epochId,\\n            \\\"Harvest in order\\\"\\n        );\\n        // get amount to transfer and transfer it\\n        uint256 userReward = _harvest(epochId);\\n        if (userReward > 0) {\\n            _reignToken.transferFrom(_rewardsVault, msg.sender, userReward);\\n        }\\n\\n        emit Harvest(msg.sender, epochId, userReward);\\n        return userReward;\\n    }\\n\\n    /*\\n     * internal methods\\n     */\\n\\n    function _harvest(uint128 epochId) internal returns (uint256) {\\n        // try to initialize an epoch\\n        if (lastInitializedEpoch < epochId) {\\n            _initEpoch(epochId);\\n        }\\n        // Set user state for last harvested\\n        lastEpochIdHarvested[msg.sender] = epochId;\\n\\n        // exit if there is no stake on the epoch\\n        if (_sizeAtEpoch[epochId] == 0) {\\n            return 0;\\n        }\\n\\n        // compute and return user total reward.\\n        // For optimization reasons the transfer have been moved to an upper layer\\n        // (i.e. massHarvest needs to do a single transfer)\\n        uint256 epochRewards = getRewardsForEpoch();\\n        uint256 boostMultiplier = getBoost(msg.sender, epochId);\\n        uint256 userEpochRewards = epochRewards\\n            .mul(_getUserBalancePerEpoch(msg.sender, epochId))\\n            .mul(boostMultiplier)\\n            .div(_sizeAtEpoch[epochId])\\n            .div(1 * 10**18); // apply boost multiplier\\n\\n        return userEpochRewards;\\n    }\\n\\n    function _initEpoch(uint128 epochId) internal {\\n        require(\\n            lastInitializedEpoch.add(1) == epochId,\\n            \\\"Epoch can be init only in order\\\"\\n        );\\n        lastInitializedEpoch = epochId;\\n        _epochInitTime[epochId] = block.timestamp;\\n        // call the staking smart contract to init the epoch\\n        _sizeAtEpoch[epochId] = _getPoolSizeAtTs(block.timestamp);\\n\\n        emit InitEpoch(msg.sender, epochId);\\n    }\\n\\n    /*\\n     *   VIEWS\\n     */\\n\\n    //returns the current epoch\\n    function getCurrentEpoch() external view returns (uint256) {\\n        return _getEpochId();\\n    }\\n\\n    // gets the total amount of rewards accrued to a pool during an epoch\\n    function getRewardsForEpoch() public view returns (uint256) {\\n        return LibRewardsDistribution.rewardsPerEpochStaking(epochStart);\\n    }\\n\\n    // calls to the staking smart contract to retrieve user balance for an epoch\\n    function getEpochStake(address userAddress, uint128 epochId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _getUserBalancePerEpoch(userAddress, epochId);\\n    }\\n\\n    function userLastEpochIdHarvested() external view returns (uint256) {\\n        return lastEpochIdHarvested[msg.sender];\\n    }\\n\\n    // calls to the staking smart contract to retrieve the epoch total poolLP size\\n    function getPoolSizeAtTs(uint256 timestamp)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _getPoolSizeAtTs(timestamp);\\n    }\\n\\n    // calls to the staking smart contract to retrieve the epoch total poolLP size\\n    function getPoolSize(uint128 epochId) external view returns (uint256) {\\n        return _sizeAtEpoch[epochId];\\n    }\\n\\n    // checks if the user has voted that epoch and returns accordingly\\n    function getBoost(address user, uint128 epoch)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _reign.stakingBoostAtEpoch(user, epoch);\\n    }\\n\\n    // get how many rewards the user gets for an epoch\\n    function getUserRewardsForEpoch(uint128 epochId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        // exit if there is no stake on the epoch\\n        if (_sizeAtEpoch[epochId] == 0) {\\n            return 0;\\n        }\\n\\n        uint256 epochRewards = getRewardsForEpoch();\\n        uint256 boostMultiplier = getBoost(msg.sender, epochId);\\n        uint256 userEpochRewards = epochRewards\\n            .mul(_getUserBalancePerEpoch(msg.sender, epochId))\\n            .mul(boostMultiplier)\\n            .div(_sizeAtEpoch[epochId])\\n            .div(1 * 10**18); // apply boost multiplier\\n\\n        return userEpochRewards;\\n    }\\n\\n    function _getPoolSizeAtTs(uint256 timestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // retrieve unilp token balance\\n        return _reign.reignStakedAtTs(timestamp);\\n    }\\n\\n    function _getUserBalancePerEpoch(address userAddress, uint128 epochId)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // retrieve unilp token balance per user per epoch\\n        return _reign.getEpochUserBalance(userAddress, epochId);\\n    }\\n\\n    // compute epoch id from blocktimestamp and\\n    function _getEpochId() internal view returns (uint128 epochId) {\\n        if (block.timestamp < epochStart) {\\n            return 0;\\n        }\\n        epochId = uint128(\\n            block.timestamp.sub(epochStart).div(epochDuration).add(1)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReign.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libraries/LibReignStorage.sol\\\";\\n\\ninterface IReign {\\n    function BASE_MULTIPLIER() external view returns (uint256);\\n\\n    // deposit allows a user to add more bond to his staked balance\\n    function deposit(uint256 amount) external;\\n\\n    // withdraw allows a user to withdraw funds if the balance is not locked\\n    function withdraw(uint256 amount) external;\\n\\n    // lock a user's currently staked balance until timestamp & add the bonus to his voting power\\n    function lock(uint256 timestamp) external;\\n\\n    // delegate allows a user to delegate his voting power to another user\\n    function delegate(address to) external;\\n\\n    // stopDelegate allows a user to take back the delegated voting power\\n    function stopDelegate() external;\\n\\n    // lock the balance of a proposal creator until the voting ends; only callable by DAO\\n    function lockCreatorBalance(address user, uint256 timestamp) external;\\n\\n    // balanceOf returns the current BOND balance of a user (bonus not included)\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    // balanceAtTs returns the amount of BOND that the user currently staked (bonus NOT included)\\n    function balanceAtTs(address user, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // stakeAtTs returns the Stake object of the user that was valid at `timestamp`\\n    function stakeAtTs(address user, uint256 timestamp)\\n        external\\n        view\\n        returns (LibReignStorage.Stake memory);\\n\\n    // votingPower returns the voting power (bonus included) + delegated voting power for a user at the current block\\n    function votingPower(address user) external view returns (uint256);\\n\\n    // votingPowerAtTs returns the voting power (bonus included) + delegated voting power for a user at a point in time\\n    function votingPowerAtTs(address user, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // bondStaked returns the total raw amount of BOND staked at the current block\\n    function reignStaked() external view returns (uint256);\\n\\n    // reignStakedAtTs returns the total raw amount of BOND users have deposited into the contract\\n    // it does not include any bonus\\n    function reignStakedAtTs(uint256 timestamp) external view returns (uint256);\\n\\n    // delegatedPower returns the total voting power that a user received from other users\\n    function delegatedPower(address user) external view returns (uint256);\\n\\n    // delegatedPowerAtTs returns the total voting power that a user received from other users at a point in time\\n    function delegatedPowerAtTs(address user, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // stakingBoost calculates the multiplier on the user's stake at the current timestamp\\n    function stakingBoost(address user) external view returns (uint256);\\n\\n    // stackingBoostAtTs calculates the multiplier at a given timestamp based on the user's stake a the given timestamp\\n    function stackingBoostAtTs(address user, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // userLockedUntil returns the timestamp until the user's balance is locked\\n    function userLockedUntil(address user) external view returns (uint256);\\n\\n    // userDidDelegate returns the address to which a user delegated their voting power; address(0) if not delegated\\n    function userDelegatedTo(address user) external view returns (address);\\n\\n    // returns the last timestamp in which the user intercated with the staking contarct\\n    function userLastAction(address user) external view returns (uint256);\\n\\n    // reignCirculatingSupply returns the current circulating supply of BOND\\n    function reignCirculatingSupply() external view returns (uint256);\\n\\n    function getEpochDuration() external view returns (uint256);\\n\\n    function getEpoch1Start() external view returns (uint256);\\n\\n    function getCurrentEpoch() external view returns (uint128);\\n\\n    function stakingBoostAtEpoch(address, uint128)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getEpochUserBalance(address, uint128)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibRewardsDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary LibRewardsDistribution {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant TOTAL_REIGN_SUPPLY = 1_000_000_000 * 10**18;\\n\\n    uint256 public constant WRAPPING_TOKENS = 500_000_000 * 10**18;\\n    uint256 public constant TEAM = 140_000_000 * 10**18;\\n    uint256 public constant TREASURY_SALE = 120_000_000 * 10**18;\\n    uint256 public constant STAKING_TOKENS = 100_000_000 * 10**18;\\n    uint256 public constant TREASURY = 50_000_000 * 10**18;\\n    uint256 public constant DEV_FUND = 50_000_000 * 10**18;\\n    uint256 public constant LP_REWARDS_TOKENS = 40_000_000 * 10**18;\\n\\n    uint256 public constant HALVING_PERIOD = 62899200; // 104 Weeks in Seconds\\n    uint256 public constant EPOCHS_IN_PERIOD = 104; // Weeks in 2 years\\n    uint256 public constant BLOCKS_IN_PERIOD = 2300000 * 2;\\n    uint256 public constant BLOCKS_IN_EPOCH = 44230;\\n\\n    uint256 public constant TOTAL_ALLOCATION = 1000000000;\\n\\n    /*\\n     *   WRAPPING\\n     */\\n\\n    function wrappingRewardsPerEpochTotal(uint256 epoch1start)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return wrappingRewardsPerPeriodTotal(epoch1start) / EPOCHS_IN_PERIOD;\\n    }\\n\\n    function wrappingRewardsPerPeriodTotal(uint256 epoch1start)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _timeElapsed = (block.timestamp.sub(epoch1start));\\n        uint256 _periodNr = (_timeElapsed / HALVING_PERIOD).add(1); // this creates the 2 year step function\\n        return WRAPPING_TOKENS.div(2 * _periodNr);\\n    }\\n\\n    /*\\n     *   GOV STAKING\\n     */\\n\\n    function rewardsPerEpochStaking(uint256 epoch1start)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return stakingRewardsPerPeriodTotal(epoch1start) / EPOCHS_IN_PERIOD;\\n    }\\n\\n    function stakingRewardsPerPeriodTotal(uint256 epoch1start)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (epoch1start > block.timestamp) {\\n            return 0;\\n        }\\n        uint256 _timeElapsed = (block.timestamp.sub(epoch1start));\\n        uint256 _periodNr = (_timeElapsed / HALVING_PERIOD).add(1); // this creates the 2 year step function\\n        return STAKING_TOKENS.div(2 * _periodNr);\\n    }\\n\\n    /*\\n     *   LP REWARDS\\n     */\\n\\n    function rewardsPerEpochLPRewards(uint256 totalAmount, uint256 nrOfEpochs)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return totalAmount / nrOfEpochs;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibReignStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary LibReignStorage {\\n\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"org.sovreign.reign.storage\\\");\\n\\n    struct Checkpoint {\\n        uint256 timestamp;\\n        uint256 amount;\\n    }\\n\\n    struct EpochBalance {\\n        uint128 epochId;\\n        uint128 multiplier;\\n        uint256 startBalance;\\n        uint256 newDeposits;\\n    }\\n\\n    struct Stake {\\n        uint256 timestamp;\\n        uint256 amount;\\n        uint256 expiryTimestamp;\\n        address delegatedTo;\\n        uint256 stakingBoost;\\n    }\\n\\n    struct Storage {\\n        bool initialized;\\n        // mapping of user address to history of Stake objects\\n        // every user action creates a new object in the history\\n        mapping(address => Stake[]) userStakeHistory;\\n        mapping(address => EpochBalance[]) userBalanceHistory;\\n        mapping(address => uint128) lastWithdrawEpochId;\\n        // array of reign staked Checkpoint\\n        // deposits/withdrawals create a new object in the history (max one per block)\\n        Checkpoint[] reignStakedHistory;\\n        // mapping of user address to history of delegated power\\n        // every delegate/stopDelegate call create a new checkpoint (max one per block)\\n        mapping(address => Checkpoint[]) delegatedPowerHistory;\\n        IERC20 reign; // the reign Token\\n        uint256 epoch1Start;\\n        uint256 epochDuration;\\n    }\\n\\n    function reignStorage() internal pure returns (Storage storage ds) {\\n        bytes32 position = STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reignTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reign\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"InitEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochsHarvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"}],\"name\":\"MassHarvest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"epochDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"epoch\",\"type\":\"uint128\"}],\"name\":\"getBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"getEpochStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"getPoolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPoolSizeAtTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsForEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"getUserRewardsForEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastInitializedEpoch\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userLastEpochIdHarvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GovRewards","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f34c55b03e4bd6c541786743e9c67ef1abd9ec6700000000000000000000000043fad3bd3fae2b445bcfd0d20acadc24ba12aec00000000000000000000000000154a62f17d08e7fe00584d819eef3610765a481","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}