{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"./interfaces/IController.sol\\\";\\nimport \\\"./TellorVars.sol\\\";\\n\\n/**\\n @author Tellor Inc.\\n @title Oracle\\n @dev This is the Oracle contract which defines the functionality for the Tellor\\n * oracle, where reporters submit values on chain and users can retrieve values.\\n*/\\ncontract Oracle is TellorVars {\\n    // Storage\\n    uint256 public reportingLock = 12 hours; // amount of time before a reporter is able to submit a value again\\n    uint256 public timeBasedReward = 5e17; // time based reward for a reporter for successfully submitting a value\\n    uint256 public timeOfLastNewValue = block.timestamp; // time of the last new submitted value, originally set to the block timestamp\\n    uint256 public tipsInContract; // amount of tips within the contract\\n    mapping(bytes32 => Report) private reports; // mapping of query IDs to a report\\n    mapping(bytes32 => uint256) public tips; // mapping of query IDs to the amount of TRB they are tipped\\n    mapping(address => uint256) private reporterLastTimestamp; // mapping of reporter addresses to the timestamp of their last reported value\\n    mapping(address => uint256) private reportsSubmittedByAddress; // mapping of reporter addresses to the number of reports they've submitted\\n    mapping(address => uint256) private tipsByUser; // mapping of a user to the amount of tips they've paid\\n\\n    // Structs\\n    struct Report {\\n        uint256[] timestamps; // array of all newValueTimestamps reported\\n        mapping(uint256 => uint256) timestampIndex; // mapping of timestamps to respective indices\\n        mapping(uint256 => uint256) timestampToBlockNum; // mapping of timestamp to block number\\n        mapping(uint256 => bytes) valueByTimestamp; // mapping of timestamps to values\\n        mapping(uint256 => address) reporterByTimestamp; // mapping of timestamps to reporters\\n    }\\n\\n    // Events\\n    event ReportingLockChanged(uint256 _newReportingLock);\\n    event NewReport(\\n        bytes32 _queryId,\\n        uint256 _time,\\n        bytes _value,\\n        uint256 _reward,\\n        uint256 _nonce,\\n        bytes _queryData,\\n        address _reporter\\n    );\\n    event TimeBasedRewardsChanged(uint256 _newTimeBasedReward);\\n    event TipAdded(\\n        address indexed _user,\\n        bytes32 indexed _queryId,\\n        uint256 _tip,\\n        uint256 _totalTip,\\n        bytes _queryData\\n    );\\n\\n    /**\\n     * @dev Changes reporting lock for reporters.\\n     * Note: this function is only callable by the Governance contract.\\n     * @param _newReportingLock is the new reporting lock.\\n     */\\n    function changeReportingLock(uint256 _newReportingLock) external {\\n        require(\\n            msg.sender ==\\n                IController(TELLOR_ADDRESS).addresses(_GOVERNANCE_CONTRACT),\\n            \\\"Only governance contract can change reporting lock.\\\"\\n        );\\n        require(_newReportingLock < 8640000, \\\"Invalid _newReportingLock value\\\");\\n        reportingLock = _newReportingLock;\\n        emit ReportingLockChanged(_newReportingLock);\\n    }\\n\\n    /**\\n     * @dev Changes time based reward for reporters.\\n     * Note: this function is only callable by the Governance contract.\\n     * @param _newTimeBasedReward is the new time based reward.\\n     */\\n    function changeTimeBasedReward(uint256 _newTimeBasedReward) external {\\n        require(\\n            msg.sender ==\\n                IController(TELLOR_ADDRESS).addresses(_GOVERNANCE_CONTRACT),\\n            \\\"Only governance contract can change time based reward.\\\"\\n        );\\n        timeBasedReward = _newTimeBasedReward;\\n        emit TimeBasedRewardsChanged(_newTimeBasedReward);\\n    }\\n\\n    /**\\n     * @dev Removes a value from the oracle.\\n     * Note: this function is only callable by the Governance contract.\\n     * @param _queryId is ID of the specific data feed\\n     * @param _timestamp is the timestamp of the data value to remove\\n     */\\n    function removeValue(bytes32 _queryId, uint256 _timestamp) external {\\n        require(\\n            msg.sender ==\\n                IController(TELLOR_ADDRESS).addresses(_GOVERNANCE_CONTRACT) ||\\n                msg.sender ==\\n                IController(TELLOR_ADDRESS).addresses(_ORACLE_CONTRACT),\\n            \\\"caller must be the governance contract or the oracle contract\\\"\\n        );\\n        Report storage rep = reports[_queryId];\\n        uint256 _index = rep.timestampIndex[_timestamp];\\n        // Shift all timestamps back to reflect deletion of value\\n        for (uint256 i = _index; i < rep.timestamps.length - 1; i++) {\\n            rep.timestamps[i] = rep.timestamps[i + 1];\\n            rep.timestampIndex[rep.timestamps[i]] -= 1;\\n        }\\n        // Delete and reset timestamp and value\\n        delete rep.timestamps[rep.timestamps.length - 1];\\n        rep.timestamps.pop();\\n        rep.valueByTimestamp[_timestamp] = \\\"\\\";\\n        rep.timestampIndex[_timestamp] = 0;\\n    }\\n\\n    /**\\n     * @dev Allows a reporter to submit a value to the oracle\\n     * @param _queryId is ID of the specific data feed. Equals keccak256(_queryData) for non-legacy IDs\\n     * @param _value is the value the user submits to the oracle\\n     * @param _nonce is the current value count for the query id\\n     * @param _queryData is the data used to fulfill the data query\\n     */\\n    function submitValue(\\n        bytes32 _queryId,\\n        bytes calldata _value,\\n        uint256 _nonce,\\n        bytes memory _queryData\\n    ) external {\\n        Report storage rep = reports[_queryId];\\n        require(\\n            _nonce == rep.timestamps.length,\\n            \\\"nonce must match timestamp index\\\"\\n        );\\n        // Require reporter to abide by given reporting lock\\n        require(\\n            block.timestamp - reporterLastTimestamp[msg.sender] > reportingLock,\\n            \\\"still in reporter time lock, please wait!\\\"\\n        );\\n        require(\\n            address(this) ==\\n                IController(TELLOR_ADDRESS).addresses(_ORACLE_CONTRACT),\\n            \\\"can only submit to current oracle contract\\\"\\n        );\\n        require(\\n            _queryId == keccak256(_queryData) || uint256(_queryId) <= 100,\\n            \\\"id must be hash of bytes data\\\"\\n        );\\n        reporterLastTimestamp[msg.sender] = block.timestamp;\\n        IController _tellor = IController(TELLOR_ADDRESS);\\n        // Checks that reporter is not already staking TRB\\n        (uint256 _status, ) = _tellor.getStakerInfo(msg.sender);\\n        require(_status == 1, \\\"Reporter status is not staker\\\");\\n        // Check is in case the stake amount increases\\n        require(\\n            _tellor.balanceOf(msg.sender) >= _tellor.uints(_STAKE_AMOUNT),\\n            \\\"balance must be greater than stake amount\\\"\\n        );\\n        // Checks for no double reporting of timestamps\\n        require(\\n            rep.reporterByTimestamp[block.timestamp] == address(0),\\n            \\\"timestamp already reported for\\\"\\n        );\\n        // Update number of timestamps, value for given timestamp, and reporter for timestamp\\n        rep.timestampIndex[block.timestamp] = rep.timestamps.length;\\n        rep.timestamps.push(block.timestamp);\\n        rep.timestampToBlockNum[block.timestamp] = block.number;\\n        rep.valueByTimestamp[block.timestamp] = _value;\\n        rep.reporterByTimestamp[block.timestamp] = msg.sender;\\n        // Send tips + timeBasedReward to reporter of value, and reset tips for ID\\n        (uint256 _tip, uint256 _reward) = getCurrentReward(_queryId);\\n        tipsInContract -= _tip;\\n        if (_reward + _tip > 0) {\\n            _tellor.transfer(msg.sender, _reward + _tip);\\n        }\\n        tips[_queryId] = 0;\\n        // Update last oracle value and number of values submitted by a reporter\\n        timeOfLastNewValue = block.timestamp;\\n        reportsSubmittedByAddress[msg.sender]++;\\n        emit NewReport(\\n            _queryId,\\n            block.timestamp,\\n            _value,\\n            _tip + _reward,\\n            _nonce,\\n            _queryData,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @dev Adds tips to incentivize reporters to submit values for specific data IDs.\\n     * @param _queryId is ID of the specific data feed\\n     * @param _tip is the amount to tip the given data ID\\n     * @param _queryData is required for IDs greater than 100, informs reporters how to fulfill request. See github.com/tellor-io/dataSpecs\\n     */\\n    function tipQuery(\\n        bytes32 _queryId,\\n        uint256 _tip,\\n        bytes memory _queryData\\n    ) external {\\n        // Require tip to be greater than 1 and be paid\\n        require(_tip > 1, \\\"Tip should be greater than 1\\\");\\n        require(\\n            IController(TELLOR_ADDRESS).approveAndTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _tip\\n            ),\\n            \\\"tip must be paid\\\"\\n        );\\n        require(\\n            _queryId == keccak256(_queryData) ||\\n                uint256(_queryId) <= 100 ||\\n                msg.sender ==\\n                IController(TELLOR_ADDRESS).addresses(_GOVERNANCE_CONTRACT),\\n            \\\"id must be hash of bytes data\\\"\\n        );\\n        // Burn half the tip\\n        _tip = _tip / 2;\\n        IController(TELLOR_ADDRESS).burn(_tip);\\n        // Update total tip amount for user, data ID, and in total contract\\n        tips[_queryId] += _tip;\\n        tipsByUser[msg.sender] += _tip;\\n        tipsInContract += _tip;\\n        emit TipAdded(msg.sender, _queryId, _tip, tips[_queryId], _queryData);\\n    }\\n\\n    //Getters\\n    /**\\n     * @dev Returns the block number at a given timestamp\\n     * @param _queryId is ID of the specific data feed\\n     * @param _timestamp is the timestamp to find the corresponding block number for\\n     * @return uint256 block number of the timestamp for the given data ID\\n     */\\n    function getBlockNumberByTimestamp(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return reports[_queryId].timestampToBlockNum[_timestamp];\\n    }\\n\\n    /**\\n     * @dev Calculates the current reward for a reporter given tips\\n     * and time based reward\\n     * @param _queryId is ID of the specific data feed\\n     * @return uint256 tips on given queryId\\n     * @return uint256 time based reward\\n     */\\n    function getCurrentReward(bytes32 _queryId)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        IController _tellor = IController(TELLOR_ADDRESS);\\n        uint256 _timeDiff = block.timestamp - timeOfLastNewValue;\\n        uint256 _reward = (_timeDiff * timeBasedReward) / 300; //.5 TRB per 5 minutes (should we make this upgradeable)\\n        if (_tellor.balanceOf(address(this)) < _reward + tipsInContract) {\\n            _reward = _tellor.balanceOf(address(this)) - tipsInContract;\\n        }\\n        return (tips[_queryId], _reward);\\n    }\\n\\n    /**\\n     * @dev Returns the current value of a data feed given a specific ID\\n     * @param _queryId is the ID of the specific data feed\\n     * @return bytes memory of the current value of data\\n     */\\n    function getCurrentValue(bytes32 _queryId)\\n        external\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            reports[_queryId].valueByTimestamp[\\n                reports[_queryId].timestamps[\\n                    reports[_queryId].timestamps.length - 1\\n                ]\\n            ];\\n    }\\n\\n    /**\\n     * @dev Returns the reporting lock time, the amount of time a reporter must wait to submit again\\n     * @return uint256 reporting lock time\\n     */\\n    function getReportingLock() external view returns (uint256) {\\n        return reportingLock;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the reporter who submitted a value for a data ID at a specific time\\n     * @param _queryId is ID of the specific data feed\\n     * @param _timestamp is the timestamp to find a corresponding reporter for\\n     * @return address of the reporter who reported the value for the data ID at the given timestamp\\n     */\\n    function getReporterByTimestamp(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return reports[_queryId].reporterByTimestamp[_timestamp];\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp of the reporter's last submission\\n     * @param _reporter is address of the reporter\\n     * @return uint256 timestamp of the reporter's last submission\\n     */\\n    function getReporterLastTimestamp(address _reporter)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return reporterLastTimestamp[_reporter];\\n    }\\n\\n    /**\\n     * @dev Returns the number of values submitted by a specific reporter address\\n     * @param _reporter is the address of a reporter\\n     * @return uint256 of the number of values submitted by the given reporter\\n     */\\n    function getReportsSubmittedByAddress(address _reporter)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return reportsSubmittedByAddress[_reporter];\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp of a reported value given a data ID and timestamp index\\n     * @param _queryId is ID of the specific data feed\\n     * @param _index is the index of the timestamp\\n     * @return uint256 timestamp of the given queryId and index\\n     */\\n    function getReportTimestampByIndex(bytes32 _queryId, uint256 _index)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return reports[_queryId].timestamps[_index];\\n    }\\n\\n    /**\\n     * @dev Returns the time based reward for submitting a value\\n     * @return uint256 of time based reward\\n     */\\n    function getTimeBasedReward() external view returns (uint256) {\\n        return timeBasedReward;\\n    }\\n\\n    /**\\n     * @dev Returns the number of timestamps/reports for a specific data ID\\n     * @param _queryId is ID of the specific data feed\\n     * @return uint256 of the number of timestamps/reports for the given data ID\\n     */\\n    function getTimestampCountById(bytes32 _queryId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return reports[_queryId].timestamps.length;\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp for the last value of any ID from the oracle\\n     * @return uint256 of timestamp of the last oracle value\\n     */\\n    function getTimeOfLastNewValue() external view returns (uint256) {\\n        return timeOfLastNewValue;\\n    }\\n\\n    /**\\n     * @dev Returns the index of a reporter timestamp in the timestamp array for a specific data ID\\n     * @param _queryId is ID of the specific data feed\\n     * @param _timestamp is the timestamp to find in the timestamps array\\n     * @return uint256 of the index of the reporter timestamp in the array for specific ID\\n     */\\n    function getTimestampIndexByTimestamp(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return reports[_queryId].timestampIndex[_timestamp];\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tips available for a specific query ID\\n     * @param _queryId is ID of the specific data feed\\n     * @return uint256 of the amount of tips added for the specific ID\\n     */\\n    function getTipsById(bytes32 _queryId) external view returns (uint256) {\\n        return tips[_queryId];\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tips made by a user\\n     * @param _user is the address of the user\\n     * @return uint256 of the amount of tips made by the user\\n     */\\n    function getTipsByUser(address _user) external view returns (uint256) {\\n        return tipsByUser[_user];\\n    }\\n\\n    /**\\n     * @dev Returns the value of a data feed given a specific ID and timestamp\\n     * @param _queryId is the ID of the specific data feed\\n     * @param _timestamp is the timestamp to look for data\\n     * @return bytes memory of the value of data at the associated timestamp\\n     */\\n    function getValueByTimestamp(bytes32 _queryId, uint256 _timestamp)\\n        external\\n        view\\n        returns (bytes memory)\\n    {\\n        return reports[_queryId].valueByTimestamp[_timestamp];\\n    }\\n\\n    /**\\n     * @dev Used during the upgrade process to verify valid Tellor Contracts\\n     */\\n    function verify() external pure returns (uint256) {\\n        return 9999;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.3;\\r\\n\\r\\ninterface IController{\\r\\n    function addresses(bytes32) external returns(address);\\r\\n    function uints(bytes32) external returns(uint256);\\r\\n    function burn(uint256 _amount) external;\\r\\n    function changeDeity(address _newDeity) external;\\r\\n    function changeOwner(address _newOwner) external;\\r\\n    function changeTellorContract(address _tContract) external;\\r\\n    function changeControllerContract(address _newController) external;\\r\\n    function changeGovernanceContract(address _newGovernance) external;\\r\\n    function changeOracleContract(address _newOracle) external;\\r\\n    function changeTreasuryContract(address _newTreasury) external;\\r\\n    function changeUint(bytes32 _target, uint256 _amount) external;\\r\\n    function migrate() external;\\r\\n    function mint(address _reciever, uint256 _amount) external;\\r\\n    function init() external;\\r\\n    function getDisputeIdByDisputeHash(bytes32 _hash) external view returns (uint256);\\r\\n    function getLastNewValueById(uint256 _requestId) external view returns (uint256, bool);\\r\\n    function retrieveData(uint256 _requestId, uint256 _timestamp) external view returns (uint256);\\r\\n    function getNewValueCountbyRequestId(uint256 _requestId) external view returns (uint256);\\r\\n    function getAddressVars(bytes32 _data) external view returns (address);\\r\\n    function getUintVar(bytes32 _data) external view returns (uint256);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function allowance(address _user, address _spender) external view  returns (uint256);\\r\\n    function allowedToTrade(address _user, uint256 _amount) external view returns (bool);\\r\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\r\\n    function approveAndTransferFrom(address _from, address _to, uint256 _amount) external returns(bool);\\r\\n    function balanceOf(address _user) external view returns (uint256);\\r\\n    function balanceOfAt(address _user, uint256 _blockNumber)external view returns (uint256);\\r\\n    function transfer(address _to, uint256 _amount)external returns (bool success);\\r\\n    function transferFrom(address _from,address _to,uint256 _amount) external returns (bool success) ;\\r\\n    function depositStake() external;\\r\\n    function requestStakingWithdraw() external;\\r\\n    function withdrawStake() external;\\r\\n    function changeStakingStatus(address _reporter, uint _status) external;\\r\\n    function slashReporter(address _reporter, address _disputer) external;\\r\\n    function getStakerInfo(address _staker) external view returns (uint256, uint256);\\r\\n    function getTimestampbyRequestIDandIndex(uint256 _requestID, uint256 _index) external view returns (uint256);\\r\\n    function getNewCurrentVariables()external view returns (bytes32 _c,uint256[5] memory _r,uint256 _d,uint256 _t);\\r\\n    //in order to call fallback function\\r\\n    function beginDispute(uint256 _requestId, uint256 _timestamp,uint256 _minerIndex) external;\\r\\n    function unlockDisputeFee(uint256 _disputeId) external;\\r\\n    function vote(uint256 _disputeId, bool _supportsDispute) external;\\r\\n    function tallyVotes(uint256 _disputeId) external;\\r\\n    //test functions\\r\\n    function tipQuery(uint,uint,bytes memory) external;\\r\\n    function getNewVariablesOnDeck() external view returns (uint256[5] memory idsOnDeck, uint256[5] memory tipsOnDeck);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/TellorVars.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"./tellor3/TellorVariables.sol\\\";\\n\\n/**\\n @author Tellor Inc.\\n @title TellorVariables\\n @dev Helper contract to store hashes of variables.\\n * For each of the bytes32 constants, the values are equal to\\n * keccak256([VARIABLE NAME])\\n*/\\ncontract TellorVars is TellorVariables {\\n    // Storage\\n    address constant TELLOR_ADDRESS =\\n        0x88dF592F8eb5D7Bd38bFeF7dEb0fBc02cf3778a0; // Address of main Tellor Contract\\n    // Hashes for each pertinent contract\\n    bytes32 constant _GOVERNANCE_CONTRACT =\\n        0xefa19baa864049f50491093580c5433e97e8d5e41f8db1a61108b4fa44cacd93;\\n    bytes32 constant _ORACLE_CONTRACT =\\n        0xfa522e460446113e8fd353d7fa015625a68bc0369712213a42e006346440891e;\\n    bytes32 constant _TREASURY_CONTRACT =\\n        0x1436a1a60dca0ebb2be98547e57992a0fa082eb479e7576303cbd384e934f1fa;\\n    bytes32 constant _SWITCH_TIME =\\n        0x6c0e91a96227393eb6e42b88e9a99f7c5ebd588098b549c949baf27ac9509d8f;\\n    bytes32 constant _MINIMUM_DISPUTE_FEE =\\n        0x7335d16d7e7f6cb9f532376441907fe76aa2ea267285c82892601f4755ed15f0;\\n}\\n\"\r\n    },\r\n    \"contracts/tellor3/TellorVariables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.4;\\n\\n/**\\n @author Tellor Inc.\\n @title TellorVariables\\n @dev Helper contract to store hashes of variables\\n*/\\ncontract TellorVariables {\\n    bytes32 constant _BLOCK_NUMBER =\\n        0x4b4cefd5ced7569ef0d091282b4bca9c52a034c56471a6061afd1bf307a2de7c; //keccak256(\\\"_BLOCK_NUMBER\\\");\\n    bytes32 constant _CURRENT_CHALLENGE =\\n        0xd54702836c9d21d0727ffacc3e39f57c92b5ae0f50177e593bfb5ec66e3de280; //keccak256(\\\"_CURRENT_CHALLENGE\\\");\\n    bytes32 constant _CURRENT_REQUESTID =\\n        0xf5126bb0ac211fbeeac2c0e89d4c02ac8cadb2da1cfb27b53c6c1f4587b48020; //keccak256(\\\"_CURRENT_REQUESTID\\\");\\n    bytes32 constant _CURRENT_REWARD =\\n        0xd415862fd27fb74541e0f6f725b0c0d5b5fa1f22367d9b78ec6f61d97d05d5f8; //keccak256(\\\"_CURRENT_REWARD\\\");\\n    bytes32 constant _CURRENT_TOTAL_TIPS =\\n        0x09659d32f99e50ac728058418d38174fe83a137c455ff1847e6fb8e15f78f77a; //keccak256(\\\"_CURRENT_TOTAL_TIPS\\\");\\n    bytes32 constant _DEITY =\\n        0x5fc094d10c65bc33cc842217b2eccca0191ff24148319da094e540a559898961; //keccak256(\\\"_DEITY\\\");\\n    bytes32 constant _DIFFICULTY =\\n        0xf758978fc1647996a3d9992f611883adc442931dc49488312360acc90601759b; //keccak256(\\\"_DIFFICULTY\\\");\\n    bytes32 constant _DISPUTE_COUNT =\\n        0x310199159a20c50879ffb440b45802138b5b162ec9426720e9dd3ee8bbcdb9d7; //keccak256(\\\"_DISPUTE_COUNT\\\");\\n    bytes32 constant _DISPUTE_FEE =\\n        0x675d2171f68d6f5545d54fb9b1fb61a0e6897e6188ca1cd664e7c9530d91ecfc; //keccak256(\\\"_DISPUTE_FEE\\\");\\n    bytes32 constant _DISPUTE_ROUNDS =\\n        0x6ab2b18aafe78fd59c6a4092015bddd9fcacb8170f72b299074f74d76a91a923; //keccak256(\\\"_DISPUTE_ROUNDS\\\");\\n    bytes32 constant _EXTENSION =\\n        0x2b2a1c876f73e67ebc4f1b08d10d54d62d62216382e0f4fd16c29155818207a4; //keccak256(\\\"_EXTENSION\\\");\\n    bytes32 constant _FEE =\\n        0x1da95f11543c9b03927178e07951795dfc95c7501a9d1cf00e13414ca33bc409; //keccak256(\\\"_FEE\\\");\\n    bytes32 constant _FORK_EXECUTED =\\n        0xda571dfc0b95cdc4a3835f5982cfdf36f73258bee7cb8eb797b4af8b17329875; //keccak256(\\\"_FORK_EXECUTED\\\");\\n    bytes32 constant _LOCK =\\n        0xd051321aa26ce60d202f153d0c0e67687e975532ab88ce92d84f18e39895d907;\\n    bytes32 constant _MIGRATOR =\\n        0xc6b005d45c4c789dfe9e2895b51df4336782c5ff6bd59a5c5c9513955aa06307; //keccak256(\\\"_MIGRATOR\\\");\\n    bytes32 constant _MIN_EXECUTION_DATE =\\n        0x46f7d53798d31923f6952572c6a19ad2d1a8238d26649c2f3493a6d69e425d28; //keccak256(\\\"_MIN_EXECUTION_DATE\\\");\\n    bytes32 constant _MINER_SLOT =\\n        0x6de96ee4d33a0617f40a846309c8759048857f51b9d59a12d3c3786d4778883d; //keccak256(\\\"_MINER_SLOT\\\");\\n    bytes32 constant _NUM_OF_VOTES =\\n        0x1da378694063870452ce03b189f48e04c1aa026348e74e6c86e10738514ad2c4; //keccak256(\\\"_NUM_OF_VOTES\\\");\\n    bytes32 constant _OLD_TELLOR =\\n        0x56e0987db9eaec01ed9e0af003a0fd5c062371f9d23722eb4a3ebc74f16ea371; //keccak256(\\\"_OLD_TELLOR\\\");\\n    bytes32 constant _ORIGINAL_ID =\\n        0xed92b4c1e0a9e559a31171d487ecbec963526662038ecfa3a71160bd62fb8733; //keccak256(\\\"_ORIGINAL_ID\\\");\\n    bytes32 constant _OWNER =\\n        0x7a39905194de50bde334d18b76bbb36dddd11641d4d50b470cb837cf3bae5def; //keccak256(\\\"_OWNER\\\");\\n    bytes32 constant _PAID =\\n        0x29169706298d2b6df50a532e958b56426de1465348b93650fca42d456eaec5fc; //keccak256(\\\"_PAID\\\");\\n    bytes32 constant _PENDING_OWNER =\\n        0x7ec081f029b8ac7e2321f6ae8c6a6a517fda8fcbf63cabd63dfffaeaafa56cc0; //keccak256(\\\"_PENDING_OWNER\\\");\\n    bytes32 constant _REQUEST_COUNT =\\n        0x3f8b5616fa9e7f2ce4a868fde15c58b92e77bc1acd6769bf1567629a3dc4c865; //keccak256(\\\"_REQUEST_COUNT\\\");\\n    bytes32 constant _REQUEST_ID =\\n        0x9f47a2659c3d32b749ae717d975e7962959890862423c4318cf86e4ec220291f; //keccak256(\\\"_REQUEST_ID\\\");\\n    bytes32 constant _REQUEST_Q_POSITION =\\n        0xf68d680ab3160f1aa5d9c3a1383c49e3e60bf3c0c031245cbb036f5ce99afaa1; //keccak256(\\\"_REQUEST_Q_POSITION\\\");\\n    bytes32 constant _SLOT_PROGRESS =\\n        0xdfbec46864bc123768f0d134913175d9577a55bb71b9b2595fda21e21f36b082; //keccak256(\\\"_SLOT_PROGRESS\\\");\\n    bytes32 constant _STAKE_AMOUNT =\\n        0x5d9fadfc729fd027e395e5157ef1b53ef9fa4a8f053043c5f159307543e7cc97; //keccak256(\\\"_STAKE_AMOUNT\\\");\\n    bytes32 constant _STAKE_COUNT =\\n        0x10c168823622203e4057b65015ff4d95b4c650b308918e8c92dc32ab5a0a034b; //keccak256(\\\"_STAKE_COUNT\\\");\\n    bytes32 constant _T_BLOCK =\\n        0xf3b93531fa65b3a18680d9ea49df06d96fbd883c4889dc7db866f8b131602dfb; //keccak256(\\\"_T_BLOCK\\\");\\n    bytes32 constant _TALLY_DATE =\\n        0xf9e1ae10923bfc79f52e309baf8c7699edb821f91ef5b5bd07be29545917b3a6; //keccak256(\\\"_TALLY_DATE\\\");\\n    bytes32 constant _TARGET_MINERS =\\n        0x0b8561044b4253c8df1d9ad9f9ce2e0f78e4bd42b2ed8dd2e909e85f750f3bc1; //keccak256(\\\"_TARGET_MINERS\\\");\\n    bytes32 constant _TELLOR_CONTRACT =\\n        0x0f1293c916694ac6af4daa2f866f0448d0c2ce8847074a7896d397c961914a08; //keccak256(\\\"_TELLOR_CONTRACT\\\");\\n    bytes32 constant _TELLOR_GETTERS =\\n        0xabd9bea65759494fe86471c8386762f989e1f2e778949e94efa4a9d1c4b3545a; //keccak256(\\\"_TELLOR_GETTERS\\\");\\n    bytes32 constant _TIME_OF_LAST_NEW_VALUE =\\n        0x2c8b528fbaf48aaf13162a5a0519a7ad5a612da8ff8783465c17e076660a59f1; //keccak256(\\\"_TIME_OF_LAST_NEW_VALUE\\\");\\n    bytes32 constant _TIME_TARGET =\\n        0xd4f87b8d0f3d3b7e665df74631f6100b2695daa0e30e40eeac02172e15a999e1; //keccak256(\\\"_TIME_TARGET\\\");\\n    bytes32 constant _TIMESTAMP =\\n        0x2f9328a9c75282bec25bb04befad06926366736e0030c985108445fa728335e5; //keccak256(\\\"_TIMESTAMP\\\");\\n    bytes32 constant _TOTAL_SUPPLY =\\n        0xe6148e7230ca038d456350e69a91b66968b222bfac9ebfbea6ff0a1fb7380160; //keccak256(\\\"_TOTAL_SUPPLY\\\");\\n    bytes32 constant _TOTAL_TIP =\\n        0x1590276b7f31dd8e2a06f9a92867333eeb3eddbc91e73b9833e3e55d8e34f77d; //keccak256(\\\"_TOTAL_TIP\\\");\\n    bytes32 constant _VALUE =\\n        0x9147231ab14efb72c38117f68521ddef8de64f092c18c69dbfb602ffc4de7f47; //keccak256(\\\"_VALUE\\\");\\n    bytes32 constant _EIP_SLOT =\\n        0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_value\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_queryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"}],\"name\":\"NewReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newReportingLock\",\"type\":\"uint256\"}],\"name\":\"ReportingLockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTimeBasedReward\",\"type\":\"uint256\"}],\"name\":\"TimeBasedRewardsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tip\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalTip\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_queryData\",\"type\":\"bytes\"}],\"name\":\"TipAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newReportingLock\",\"type\":\"uint256\"}],\"name\":\"changeReportingLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTimeBasedReward\",\"type\":\"uint256\"}],\"name\":\"changeTimeBasedReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getBlockNumberByTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getCurrentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getCurrentValue\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getReportTimestampByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getReporterByTimestamp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"}],\"name\":\"getReporterLastTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReportingLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"}],\"name\":\"getReportsSubmittedByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeBasedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeOfLastNewValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getTimestampCountById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getTimestampIndexByTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getTipsById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTipsByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getValueByTimestamp\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"removeValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reportingLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_value\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_queryData\",\"type\":\"bytes\"}],\"name\":\"submitValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeBasedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeOfLastNewValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_tip\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_queryData\",\"type\":\"bytes\"}],\"name\":\"tipQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tipsInContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Oracle","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"300","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}