{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n\n\n// Part: AggregatorV3Interface\n\ninterface AggregatorV3Interface {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n\n// Part: ICToken\n\ninterface ICToken {\n    function underlying() external view returns (address);\n\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function balanceOfUnderlying(address owner) external returns (uint256);\n\n    function accrueInterest() external returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function supplyRatePerBlock() external view returns (uint256);\n\n    function totalReserves() external view returns (uint256);\n\n    function getCash() external view returns (uint256);\n\n    function totalBorrows() external view returns (uint256);\n\n    function reserveFactorMantissa() external view returns (uint256);\n\n    function interestRateModel() external view returns (address);\n}\n\n// Part: IComptroller\n\ninterface IComptroller {\n    function claimComp(address holder, address[] memory) external;\n\n    function compAccrued(address holder) external view returns (uint256);\n\n    function compSpeeds(address cToken) external view returns (uint256);\n}\n\n// Part: IFund\n\ninterface IFund {\n    function underlying() external view returns (address);\n\n    function fundManager() external view returns (address);\n\n    function relayer() external view returns (address);\n\n    function deposit(uint256 amountWei) external;\n\n    function depositFor(uint256 amountWei, address holder) external;\n\n    function withdraw(uint256 numberOfShares) external;\n\n    function getPricePerShare() external view returns (uint256);\n\n    function totalValueLocked() external view returns (uint256);\n\n    function underlyingBalanceWithInvestmentForHolder(address holder)\n        external\n        view\n        returns (uint256);\n}\n\n// Part: IGovernable\n\ninterface IGovernable {\n    function governance() external view returns (address);\n}\n\n// Part: IStrategy\n\ninterface IStrategy {\n    function name() external pure returns (string memory);\n\n    function version() external pure returns (string memory);\n\n    function underlying() external view returns (address);\n\n    function fund() external view returns (address);\n\n    function creator() external view returns (address);\n\n    function withdrawAllToFund() external;\n\n    function withdrawToFund(uint256 amount) external;\n\n    function investedUnderlyingBalance() external view returns (uint256);\n\n    function doHardWork() external;\n}\n\n// Part: IStrategyUnderOptimizer\n\ninterface IStrategyUnderOptimizer {\n    function aprAfterDeposit(uint256 depositAmount)\n        external\n        view\n        returns (uint256);\n\n    function apr() external view returns (uint256);\n}\n\n// Part: IUniswapV2Router01\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/Address\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/Context\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/IERC20\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/SafeMath\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Part: WhitePaperInterestRateModel\n\ninterface WhitePaperInterestRateModel {\n    function getSupplyRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves,\n        uint256 reserveFactorMantissa\n    ) external view returns (uint256);\n}\n\n// Part: IUniswapV2Router02\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/ERC20\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/SafeERC20\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// Part: PriceFeedLibrary\n\nlibrary PriceFeedLibrary {\n    using Address for address;\n\n    function _getDecimals(address priceFeed) internal view returns (uint8) {\n        return AggregatorV3Interface(priceFeed).decimals();\n    }\n\n    /* solhint-disable no-unused-vars */\n    function _getPrice(address priceFeed) internal view returns (int256) {\n        (\n            uint80 roundID,\n            int256 price,\n            uint256 startedAt,\n            uint256 timeStamp,\n            uint80 answeredInRound\n        ) = AggregatorV3Interface(priceFeed).latestRoundData();\n        require(answeredInRound >= roundID, \"Stale data from price feed\");\n        return price;\n    }\n    /* solhint-enable no-unused-vars */\n}\n\n// Part: SwapTokensLibrary\n\nlibrary SwapTokensLibrary {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    function _getPath(\n        address _from,\n        address _to,\n        address _baseCurrency\n    ) internal pure returns (address[] memory) {\n        address[] memory path;\n        if (_from == _baseCurrency || _to == _baseCurrency) {\n            path = new address[](2);\n            path[0] = _from;\n            path[1] = _to;\n        } else {\n            path = new address[](3);\n            path[0] = _from;\n            path[1] = _baseCurrency;\n            path[2] = _to;\n        }\n        return path;\n    }\n\n    function _liquidateRewards(\n        address rewardToken,\n        address underlying,\n        address _dEXRouter,\n        address _baseCurrency,\n        uint256 minUnderlyingExpected\n    ) internal {\n        uint256 rewardAmount = IERC20(rewardToken).balanceOf(address(this));\n        if (rewardAmount != 0) {\n            IUniswapV2Router02 dEXRouter = IUniswapV2Router02(_dEXRouter);\n            address[] memory path =\n                _getPath(rewardToken, underlying, _baseCurrency);\n            uint256 underlyingAmountOut =\n                dEXRouter.getAmountsOut(rewardAmount, path)[path.length - 1];\n            if (underlyingAmountOut != 0) {\n                IERC20(rewardToken).safeApprove(_dEXRouter, rewardAmount);\n                uint256 underlyingBalanceBefore =\n                    IERC20(underlying).balanceOf(address(this));\n                dEXRouter.swapExactTokensForTokens(\n                    rewardAmount,\n                    minUnderlyingExpected,\n                    path,\n                    address(this),\n                    // solhint-disable-next-line not-rely-on-time\n                    now\n                );\n                uint256 underlyingBalanceAfter =\n                    IERC20(underlying).balanceOf(address(this));\n                require(\n                    underlyingBalanceAfter.sub(underlyingBalanceBefore) >=\n                        minUnderlyingExpected,\n                    \"Not liquidated properly\"\n                );\n            }\n        }\n    }\n}\n\n// Part: CompoundLendingStrategyBase\n\n/**\n * @title Lending strategy for Compound\n * @author Mesh Finance\n * @notice This strategy lends asset to compound\n */\nabstract contract CompoundLendingStrategyBase is\n    IStrategy,\n    IStrategyUnderOptimizer\n{\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    uint256 internal constant PRECISION = 10**18;\n\n    uint256 internal constant MAX_BPS = 10000;\n    uint256 internal constant APR_BASE = 10**6;\n\n    uint256 internal constant BLOCKS_PER_YEAR = 2371428;\n\n    address public immutable override underlying;\n    address public immutable override fund;\n    address public immutable override creator;\n\n    // the c-token corresponding to the underlying asset\n    address public immutable cToken;\n\n    // Reward Token\n    address public immutable rewardToken;\n\n    // Comptroller to claim reward tokens\n    address public immutable comptroller;\n\n    // Price feed for reward token\n    address internal immutable _rewardTokenPriceFeed;\n\n    // DEX router to liquidate rewards to underlying\n    address internal immutable _dEXRouter;\n\n    // base currency serves as path to convert rewards to underlying\n    address internal immutable _baseCurrency;\n\n    uint256 internal allowedSlippage = 500; // In BPS, can be changed\n\n    // these tokens cannot be claimed by the governance\n    mapping(address => bool) public canNotSweep;\n\n    bool public investActivated;\n\n    constructor(\n        address _fund,\n        address _cToken,\n        address _rewardToken,\n        address _comptroller,\n        address rewardTokenPriceFeed_,\n        address dEXRouter_,\n        address baseCurrency_\n    ) public {\n        require(_fund != address(0), \"Fund cannot be empty\");\n        require(_cToken != address(0), \"cToken cannot be empty\");\n        fund = _fund;\n        address _underlying = IFund(_fund).underlying();\n        require(\n            _underlying == ICToken(_cToken).underlying(),\n            \"Underlying do not match\"\n        );\n        underlying = _underlying;\n        cToken = _cToken;\n        rewardToken = _rewardToken;\n        comptroller = _comptroller;\n        _rewardTokenPriceFeed = rewardTokenPriceFeed_;\n        _dEXRouter = dEXRouter_;\n        _baseCurrency = baseCurrency_;\n        creator = msg.sender;\n\n        // restricted tokens, can not be swept\n        canNotSweep[_underlying] = true;\n        canNotSweep[_cToken] = true;\n        canNotSweep[_rewardToken] = true;\n\n        investActivated = true;\n    }\n\n    function _governance() internal view returns (address) {\n        return IGovernable(fund).governance();\n    }\n\n    function _fundManager() internal view returns (address) {\n        return IFund(fund).fundManager();\n    }\n\n    function _relayer() internal view returns (address) {\n        return IFund(fund).relayer();\n    }\n\n    modifier onlyFund() {\n        require(msg.sender == fund, \"The sender has to be the fund\");\n        _;\n    }\n\n    modifier onlyFundOrGovernance() {\n        require(\n            msg.sender == fund || msg.sender == _governance(),\n            \"The sender has to be the governance or fund\"\n        );\n        _;\n    }\n\n    modifier onlyFundManagerOrGovernance() {\n        require(\n            msg.sender == _fundManager() || msg.sender == _governance(),\n            \"The sender has to be the governance or fund manager\"\n        );\n        _;\n    }\n\n    modifier onlyFundManagerOrRelayer() {\n        require(\n            msg.sender == _fundManager() || msg.sender == _relayer(),\n            \"The sender has to be the relayer or fund manager\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Allows Governance/Fund manager to withdraw partial shares to reduce slippage incurred\n     * and facilitate migration / withdrawal / strategy switch\n     * @param shares cTokens to withdraw\n     */\n    function withdrawPartialShares(uint256 shares)\n        external\n        onlyFundManagerOrGovernance\n    {\n        require(shares > 0, \"Shares should be greater than 0\");\n        uint256 redeemResult = ICToken(cToken).redeem(shares);\n        require(redeemResult == 0, \"Error calling redeem on Compound\");\n    }\n\n    /**\n     * @notice Allows Governance/Fund Manager to stop/start lending assets from this strategy to Compound\n     * @dev Used for emergencies\n     * @param _investActivated Set investment to True/False\n     */\n    function setInvestActivated(bool _investActivated)\n        external\n        onlyFundManagerOrGovernance\n    {\n        investActivated = _investActivated;\n    }\n\n    /**\n     * @notice Withdraws an underlying asset from the strategy to the fund in the specified amount.\n     * It tries to withdraw from the strategy contract if this has enough balance.\n     * Otherwise, we redeem cToken. Transfer the required underlying amount to fund.\n     * Reinvest any remaining underlying.\n     * @param underlyingAmount Underlying amount to withdraw to fund\n     */\n    function withdrawToFund(uint256 underlyingAmount)\n        external\n        override\n        onlyFund\n    {\n        uint256 underlyingBalanceBefore =\n            IERC20(underlying).balanceOf(address(this));\n\n        if (underlyingBalanceBefore >= underlyingAmount) {\n            IERC20(underlying).safeTransfer(fund, underlyingAmount);\n            return;\n        }\n\n        uint256 redeemResult =\n            ICToken(cToken).redeemUnderlying(\n                underlyingAmount.sub(underlyingBalanceBefore)\n            );\n\n        require(\n            redeemResult == 0,\n            \"Error calling redeemUnderlying on Compound\"\n        );\n\n        // we can transfer the asset to the fund\n        uint256 underlyingBalance = IERC20(underlying).balanceOf(address(this));\n        if (underlyingBalance > 0) {\n            if (underlyingAmount < underlyingBalance) {\n                IERC20(underlying).safeTransfer(fund, underlyingAmount);\n                _investAllUnderlying();\n            } else {\n                IERC20(underlying).safeTransfer(fund, underlyingBalance);\n            }\n        }\n    }\n\n    /**\n     * @notice Withdraws all assets from compound and transfers all underlying to fund.\n     */\n    function withdrawAllToFund() external override onlyFund {\n        uint256 cTokenBalance = ICToken(cToken).balanceOf(address(this));\n        uint256 redeemResult = ICToken(cToken).redeem(cTokenBalance);\n        require(redeemResult == 0, \"Error calling redeem on Compound\");\n        uint256 underlyingBalance = IERC20(underlying).balanceOf(address(this));\n        if (underlyingBalance > 0) {\n            IERC20(underlying).safeTransfer(fund, underlyingBalance);\n        }\n    }\n\n    /**\n     * @notice Invests all underlying assets into compound.\n     */\n    function _investAllUnderlying() internal {\n        if (!investActivated) {\n            return;\n        }\n\n        uint256 underlyingBalance = IERC20(underlying).balanceOf(address(this));\n        if (underlyingBalance > 0) {\n            // approve amount per transaction\n            IERC20(underlying).safeApprove(cToken, 0);\n            IERC20(underlying).safeApprove(cToken, underlyingBalance);\n            // deposits the entire balance to compound\n            uint256 mintResult = ICToken(cToken).mint(underlyingBalance);\n            require(mintResult == 0, \"Error calling mint on Compound\");\n        }\n    }\n\n    /**\n     * @notice This claims and liquidates all comp rewards.\n     * Then invests all the underlying balance to Compound.\n     */\n    function doHardWork() external override onlyFund {\n        _claimRewards();\n        _liquidateRewards();\n        _investAllUnderlying();\n    }\n\n    /**\n     * @notice Returns the underlying invested balance. This is the underlying amount in cToken, plus the current balance of the underlying asset.\n     * @return Total balance invested in the strategy\n     */\n    function investedUnderlyingBalance()\n        external\n        view\n        override\n        returns (uint256)\n    {\n        uint256 cTokenBalance = ICToken(cToken).balanceOf(address(this));\n        uint256 exchangeRate = ICToken(cToken).exchangeRateStored();\n        uint256 underlyingBalanceinCToken =\n            cTokenBalance.mul(exchangeRate).div(PRECISION);\n        return\n            underlyingBalanceinCToken.add(\n                IERC20(underlying).balanceOf(address(this))\n            );\n    }\n\n    /**\n     * Returns the value of the underlying token in cToken\n     */\n    function _shareValueFromUnderlying(uint256 underlyingAmount)\n        internal\n        view\n        returns (uint256)\n    {\n        \n        uint256 exchangeRate = ICToken(cToken).exchangeRateStored();\n        return underlyingAmount.mul(PRECISION).div(exchangeRate);\n    }\n\n    \n    function _getRewardsBalance() internal view returns (uint256) {\n        uint256 rewardsBalance =\n            IComptroller(comptroller).compAccrued(address(this));\n        return rewardsBalance;\n    }\n\n    /**\n     * @notice This returns unclaimed comp rewards.\n     * @dev Used for testing.\n     */\n    function getRewardsBalance() external view returns (uint256) {\n        return _getRewardsBalance();\n    }\n\n    function _claimRewards() internal {\n        address[] memory markets = new address[](1);\n        markets[0] = cToken;\n        IComptroller(comptroller).claimComp(address(this), markets);\n    }\n\n    /**\n     * @notice This claims comp rewards.\n     * @dev Usually claimLiquidateAndReinvestRewards should be called instead of this. This is used for testing or if for any reason we don't want to liquidate right now.\n     */\n    function claimRewards() external {\n        _claimRewards();\n    }\n\n    function _getRewardPriceInUnderlying() internal view returns (uint256) {\n        return uint256(PriceFeedLibrary._getPrice(_rewardTokenPriceFeed));\n    }\n\n    /**\n     * @notice This updates the slippage used to calculate liquidation price. This can be set by fund manager or governance.\n     * @param newSlippage New slippage in BPS\n     */\n    function updateSlippage(uint256 newSlippage)\n        external\n        onlyFundManagerOrGovernance\n    {\n        require(newSlippage > 0, \"The slippage should be greater than 0\");\n        require(\n            newSlippage < MAX_BPS,\n            \"The slippage should be less than 10000\"\n        );\n        allowedSlippage = newSlippage;\n    }\n\n    /**\n     * @notice This uses price feed to get minimum balance of underlying expected during liquidation of rewards.\n     * @dev The slippage can be set by fund manager or governance.\n     * @return Minimum underlying expected when liquidating rewards.\n     */\n    function _getMinUnderlyingExpectedFromRewards()\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 rewardPriceInUnderlying = _getRewardPriceInUnderlying();\n        uint256 rewardAmount = IERC20(rewardToken).balanceOf(address(this));\n        uint256 minUnderlyingExpected =\n            rewardPriceInUnderlying\n                .mul(\n                rewardAmount.sub(rewardAmount.mul(allowedSlippage).div(MAX_BPS))\n            )\n                .mul(10**uint256(ERC20(underlying).decimals()))\n                .div(\n                10 **\n                    uint256(\n                        PriceFeedLibrary._getDecimals(_rewardTokenPriceFeed)\n                    )\n            )\n                .div(10**uint256(ERC20(rewardToken).decimals()));\n        return minUnderlyingExpected;\n    }\n\n    /**\n     * @notice This liquidates all the reward token to underlying and reinvests.\n     * @dev This does not claim the rewards.\n     */\n    function _liquidateRewards() internal {\n        uint256 minUnderlyingExpected = _getMinUnderlyingExpectedFromRewards();\n        SwapTokensLibrary._liquidateRewards(\n            rewardToken,\n            underlying,\n            _dEXRouter,\n            _baseCurrency,\n            minUnderlyingExpected\n        );\n    }\n\n    /**\n     * @notice This claims the rewards, liquidates all the reward token to underlying and reinvests.\n     * @dev This is same as hardwork, but can be called externally (without fund)\n     */\n    function claimLiquidateAndReinvestRewards()\n        external\n        onlyFundManagerOrRelayer\n    {\n        _claimRewards();\n        _liquidateRewards();\n        _investAllUnderlying();\n    }\n\n    /**\n     * @notice This gives expected base(supply) APR after depositing more amount to the strategy.\n     * This is used in the optimizer strategy to decide where to invest.\n     * @param depositAmount New amount to deposit in the strategy\n     * @return Yearly net rate multiplied by 10**6\n     */\n    function baseAprAfterDeposit(uint256 depositAmount)\n        public\n        view\n        returns (uint256)\n    {\n        WhitePaperInterestRateModel white =\n            WhitePaperInterestRateModel(ICToken(cToken).interestRateModel());\n        uint256 ratePerBlock =\n            white.getSupplyRate(\n                ICToken(cToken).getCash().add(depositAmount),\n                ICToken(cToken).totalBorrows(),\n                ICToken(cToken).totalReserves(),\n                ICToken(cToken).reserveFactorMantissa()\n            );\n        return ratePerBlock.mul(BLOCKS_PER_YEAR).mul(APR_BASE).div(PRECISION);\n    }\n\n    /**\n     * @notice This gives expected reward APR after depositing more amount to the strategy.\n     * This is used in the optimizer strategy to decide where to invest.\n     * @param depositAmount New amount to deposit in the strategy\n     * @return Yearly net rate multiplied by 10**6\n     */\n    function rewardAprAfterDeposit(uint256 depositAmount)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 compSpeed = IComptroller(comptroller).compSpeeds(cToken); // Will divide by PRECISION at last step to keep calculations reliable\n        uint256 cTokenSupply = IERC20(cToken).totalSupply().add(_shareValueFromUnderlying(depositAmount)); // Divided by decimals at next step\n        uint256 compPerUnderlyingPerBlock =\n            compSpeed\n                .mul(PRECISION) // Scaling factor for exchangeRateStored\n                .mul(10**uint256(ERC20(underlying).decimals()))\n                .div(cTokenSupply)\n                .div(ICToken(cToken).exchangeRateStored());\n        uint256 rewardRatePerBlock =\n            _getRewardPriceInUnderlying().mul(compPerUnderlyingPerBlock).div(\n                10 **\n                    uint256(\n                        PriceFeedLibrary._getDecimals(_rewardTokenPriceFeed)\n                    )\n            );\n        return (\n            rewardRatePerBlock.mul(BLOCKS_PER_YEAR).mul(APR_BASE).div(PRECISION)\n        );\n    }\n\n    /**\n     * @notice This gives expected APR after depositing more amount to the strategy.\n     * This is used in the optimizer strategy to decide where to invest.\n     * @param depositAmount New amount to deposit in the strategy\n     * @return Yearly net rate multiplied by 10**6\n     */\n    function aprAfterDeposit(uint256 depositAmount)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return baseAprAfterDeposit(depositAmount).add(rewardAprAfterDeposit(depositAmount));\n    }\n\n    /**\n     * @notice This gives current base(supply) APR of the strategy\n     * @return Yearly net rate mulltiplied by 10**6\n     */\n    function baseApr() external view returns (uint256) {\n        return baseAprAfterDeposit(0);\n    }\n\n    /**\n     * @notice This gives current COMP APR of the strategy.\n     * @return Yearly net rate multiplied by 10**6\n     */\n    function rewardApr() external view returns (uint256) {\n        return rewardAprAfterDeposit(0);\n    }\n\n    /**\n     * @notice This gives current APR of the strategy including supply apr and rewards apr\n     * @return Yearly net rate mulltiplied by 10**6\n     */\n    function apr() external view override returns (uint256) {\n        return aprAfterDeposit(0);\n    }\n\n    /**\n     * @notice No tokens apart from underlying assets, shares and rewards should ever be stored on this contract.\n     * Any tokens that are sent here by mistake are recoverable by owner.\n     * @dev Not applicable for ETH, different function needs to be written\n     * @param  _token  Token address that needs to be recovered\n     * @param  _sweepTo  Address to which tokens are sent\n     */\n    function sweep(address _token, address _sweepTo) external {\n        require(_governance() == msg.sender, \"Not governance\");\n        require(!canNotSweep[_token], \"Token is restricted\");\n        require(_sweepTo != address(0), \"can not sweep to zero\");\n        IERC20(_token).safeTransfer(\n            _sweepTo,\n            IERC20(_token).balanceOf(address(this))\n        );\n    }\n}\n\n// File: CompoundLendingStrategyMainnetUSDC.sol\n\n/**\n * Adds the mainnet usdc addresses to the CompoundLendingStrategyBase\n */\ncontract CompoundLendingStrategyMainnetUSDC is CompoundLendingStrategyBase {\n    string public constant override name = \"CompoundLendingStrategyMainnetUSDC\";\n    string public constant override version = \"V1\";\n\n    address internal constant _cToken =\n        address(0x39AA39c021dfbaE8faC545936693aC917d5E7563);\n\n    // COMP token as reward\n    address internal constant _rewardToken =\n        address(0xc00e94Cb662C3520282E6f5717214004A7f26888);\n\n    // Comptroller to claim reward\n    address internal constant _comptroller =\n        address(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\n\n    // Reward token price feed\n    address internal constant rewardTokenPriceFeed_ =\n        address(0xdbd020CAeF83eFd542f4De03e3cF0C28A4428bd5);\n\n    // Uniswap V2s router to liquidate COMP rewards to underlying\n    address internal constant _uniswapRouter =\n        address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\n    // WETH serves as path to convert rewards to underlying\n    address internal constant WETH =\n        address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\n    constructor(address _fund)\n        public\n        CompoundLendingStrategyBase(\n            _fund,\n            _cToken,\n            _rewardToken,\n            _comptroller,\n            rewardTokenPriceFeed_,\n            _uniswapRouter,\n            WETH\n        )\n    // solhint-disable-next-line no-empty-blocks\n    {\n\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fund\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"apr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"aprAfterDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"baseAprAfterDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canNotSweep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLiquidateAndReinvestRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investedUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"rewardAprAfterDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_investActivated\",\"type\":\"bool\"}],\"name\":\"setInvestActivated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sweepTo\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSlippage\",\"type\":\"uint256\"}],\"name\":\"updateSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllToFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdrawPartialShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawToFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CompoundLendingStrategyMainnetUSDC","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f01401aea874d97740ace973461facf9a443773b","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}