{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/EnglishAuctionReservePriceCloneFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.7;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./interfaces/IEnglishAuctionReservePrice.sol\\\";\\n\\ncontract EnglishAuctionReservePriceCloneFactory {\\n\\n    event EnglishAuctionReservePriceCloneDeployed(address indexed cloneAddress);\\n\\n    address public referenceEnglishAuctionReservePrice;\\n    address public cloner;\\n\\n    constructor(address _referenceEnglishAuctionReservePrice) public {\\n        referenceEnglishAuctionReservePrice = _referenceEnglishAuctionReservePrice;\\n        cloner = msg.sender;\\n    }\\n\\n    modifier onlyCloner {\\n        require(msg.sender == cloner);\\n        _;\\n    }\\n\\n    function changeCloner(address _newCloner) external onlyCloner {\\n        cloner = _newCloner;\\n    }\\n\\n    function newEnglishAuctionReservePriceClone(\\n        uint256 _tokenId,\\n        address _tokenAddress,\\n        uint256 _reservePriceWei,\\n        uint256 _minimumStartTime,\\n        uint256 _stakingRewardPercentageBasisPoints,\\n        uint8 _percentageIncreasePerBid,\\n        address _hausAddress,\\n        address _stakingSwapContract\\n    ) external onlyCloner returns (address) {\\n        // Create new EnglishAuctionReservePriceClone\\n        address newEnglishAuctionReservePriceCloneAddress = Clones.clone(referenceEnglishAuctionReservePrice);\\n        IEnglishAuctionReservePrice reservePriceAuction = IEnglishAuctionReservePrice(newEnglishAuctionReservePriceCloneAddress);\\n        reservePriceAuction.initialize(\\n            _tokenId,\\n            _tokenAddress,\\n            _reservePriceWei,\\n            _minimumStartTime,\\n            _stakingRewardPercentageBasisPoints,\\n            _percentageIncreasePerBid,\\n            _hausAddress,\\n            _stakingSwapContract,\\n            msg.sender\\n        );\\n        emit EnglishAuctionReservePriceCloneDeployed(newEnglishAuctionReservePriceCloneAddress);\\n        return newEnglishAuctionReservePriceCloneAddress;\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address master) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `master` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(master, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEnglishAuctionReservePrice.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.7;\\n\\ninterface IEnglishAuctionReservePrice {\\n\\n  function initialize(\\n    uint256 _tokenId,\\n    address _tokenAddress,\\n    uint256 _reservePriceWei,\\n    uint256 _minimumStartTime,\\n    uint256 _stakingRewardPercentageBasisPoints,\\n    uint8 _percentageIncreasePerBid,\\n    address _hausAddress,\\n    address _stakingSwapContract,\\n    address _controllerAddress\\n  ) external;\\n      \\n  function bid() external payable;\\n  \\n  function end() external;\\n  \\n  function pull() external;\\n  \\n  function live() external view returns(bool);\\n\\n  function containsAuctionNFT() external view returns(bool);\\n  \\n  function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure returns(bytes4);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referenceEnglishAuctionReservePrice\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cloneAddress\",\"type\":\"address\"}],\"name\":\"EnglishAuctionReservePriceCloneDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCloner\",\"type\":\"address\"}],\"name\":\"changeCloner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cloner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reservePriceWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingRewardPercentageBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_percentageIncreasePerBid\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_hausAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingSwapContract\",\"type\":\"address\"}],\"name\":\"newEnglishAuctionReservePriceClone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referenceEnglishAuctionReservePrice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EnglishAuctionReservePriceCloneFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000046c8a0aff610b02f4ab48dde2f98211fa1254577","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}