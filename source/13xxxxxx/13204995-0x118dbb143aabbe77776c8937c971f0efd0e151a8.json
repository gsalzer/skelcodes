{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address initialOwner) internal {\r\n        require(initialOwner != address(0));\r\n        _owner = initialOwner;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\n interface IERC20 {\r\n     function transfer(address to, uint256 value) external returns (bool);\r\n     function approve(address spender, uint256 value) external returns (bool);\r\n     function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n     function totalSupply() external view returns (uint256);\r\n     function balanceOf(address who) external view returns (uint256);\r\n     function allowance(address owner, address spender) external view returns (uint256);\r\n     function mint(address to, uint256 value) external returns (bool);\r\n     function burnFrom(address from, uint256 value) external;\r\n }\r\n\r\n interface IUSDT {\r\n     function totalSupply() external view returns (uint256);\r\n     function balanceOf(address account) external view returns (uint256);\r\n     function transfer(address recipient, uint256 amount) external;\r\n     function allowance(address owner, address spender) external view returns (uint256);\r\n     function approve(address spender, uint256 amount) external;\r\n     function transferFrom(address sender, address recipient, uint256 amount) external;\r\n     function decimals() external view returns(uint8);\r\n }\r\n\r\n/**\r\n * @title Exchange contract\r\n */\r\ncontract Exchange is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUSDT public USDT;\r\n    IERC20 public TCCO;\r\n\r\n    struct User {\r\n        uint256 rate;\r\n        address[] referrals;\r\n        address referrer;\r\n        uint256 totalBonuses;\r\n    }\r\n\r\n    mapping (address => User) users;\r\n\r\n    address public wallet;\r\n    uint256 public defaultRate;\r\n\r\n    event ExchangeUsdtToTcco(address indexed account, uint256 usdt, uint256 tcco);\r\n    event ExchangeTccoToUsdt(address indexed account, uint256 tcco, uint256 usdt);\r\n    event RefBonus(address indexed account, address indexed referrer, uint256 bonus);\r\n\r\n    constructor(address USDTAddr, address TCCOAddr, address initialOwner, address initialWallet) public Ownable(initialOwner) {\r\n        require(USDTAddr != address(0) && TCCOAddr != address(0) && initialWallet != address(0));\r\n\r\n        USDT = IUSDT(USDTAddr);\r\n        TCCO = IERC20(TCCOAddr);\r\n\r\n        wallet = initialWallet;\r\n        defaultRate = 50;\r\n    }\r\n\r\n    function receiveApproval(address from, uint256 amount, address token, bytes calldata extraData) external {\r\n        if (token == address(TCCO)) {\r\n            exchangeTccoToUsdt(from, amount, _bytesToAddress(extraData));\r\n        } else if (token == address(USDT)) {\r\n            exchangeUsdtToTcco(from, amount, _bytesToAddress(extraData));\r\n        }\r\n    }\r\n\r\n    function exchangeUsdtToTcco(address from, uint256 amount, address referrer) public {\r\n        require(msg.sender == from || msg.sender == address(USDT));\r\n\r\n        USDT.transferFrom(from, address(this), amount);\r\n\r\n        if (users[from].referrer == address(0) && referrer != address(0)) {\r\n            users[from].referrer = referrer;\r\n            users[referrer].referrals.push(from);\r\n        }\r\n\r\n        uint256 refBonus;\r\n        if (users[from].referrer != address(0)) {\r\n            uint256 rate = users[users[from].referrer].rate > 0 ? users[users[from].referrer].rate : defaultRate;\r\n            refBonus = amount * rate / 10000;\r\n            users[from].totalBonuses += refBonus;\r\n            USDT.transfer(users[from].referrer, refBonus);\r\n\r\n            emit RefBonus(from, users[from].referrer, refBonus);\r\n        }\r\n\r\n        uint256 fee = amount * 250 / 10000;\r\n        if (fee - refBonus > 0) {\r\n            USDT.transfer(wallet, fee - refBonus);\r\n        }\r\n\r\n        TCCO.mint(from, amount - fee);\r\n\r\n        emit ExchangeUsdtToTcco(from, amount, amount - fee);\r\n    }\r\n\r\n    function exchangeTccoToUsdt(address from, uint256 amount, address referrer) public {\r\n        require(msg.sender == from || msg.sender == address(TCCO));\r\n\r\n        TCCO.burnFrom(from, amount);\r\n\r\n        if (users[from].referrer == address(0) && referrer != address(0)) {\r\n            users[from].referrer = referrer;\r\n            users[referrer].referrals.push(from);\r\n        }\r\n\r\n        uint256 refBonus;\r\n        if (users[from].referrer != address(0)) {\r\n            uint256 rate = users[users[from].referrer].rate > 0 ? users[users[from].referrer].rate : defaultRate;\r\n            refBonus = amount * rate / 10000;\r\n            users[from].totalBonuses += refBonus;\r\n            USDT.transfer(users[from].referrer, refBonus);\r\n\r\n            emit RefBonus(from, users[from].referrer, refBonus);\r\n        }\r\n\r\n        uint256 fee = amount * 250 / 10000;\r\n        if (fee - refBonus > 0) {\r\n            USDT.transfer(wallet, fee - refBonus);\r\n        }\r\n\r\n        USDT.transfer(from, amount - fee);\r\n\r\n        emit ExchangeTccoToUsdt(from, amount, amount - fee);\r\n    }\r\n\r\n    function setReferrerRate(address account, uint256 rate) public onlyOwner {\r\n        require(account != address(0) && rate <= 250);\r\n        users[account].rate = rate;\r\n    }\r\n\r\n    function setDefaultRate(uint256 rate) public onlyOwner {\r\n        require(rate <= 250);\r\n        defaultRate = rate;\r\n    }\r\n\r\n    function setWallet(address account) public onlyOwner {\r\n        require(account != address(0));\r\n        wallet = account;\r\n    }\r\n\r\n    function getReferrerInfo(address account) public view returns(address referrer, uint256 rate, uint256 amountOfReferrals, uint256 totalBonuses) {\r\n        referrer = users[account].referrer;\r\n        rate = users[account].rate > 0 ? users[account].rate : defaultRate;\r\n        amountOfReferrals = users[account].referrals.length;\r\n        totalBonuses = users[account].totalBonuses;\r\n    }\r\n\r\n    function getReferralInfo(address account, uint256 from, uint256 to) public view returns(address[] memory referrals, uint256[] memory bonuses) {\r\n        uint256 amountOfReferrals = users[account].referrals.length;\r\n\r\n        if (to > amountOfReferrals) {\r\n            to = amountOfReferrals;\r\n        }\r\n\r\n        require(to >= from);\r\n\r\n        uint256 length = to - from;\r\n\r\n        referrals = new address[](length);\r\n        bonuses = new uint256[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            referrals[i] = users[account].referrals[from + i];\r\n            bonuses[i] = users[referrals[i]].totalBonuses;\r\n        }\r\n    }\r\n\r\n    function _bytesToAddress(bytes memory source) internal pure returns(address parsedreferrer) {\r\n        assembly {\r\n            parsedreferrer := mload(add(source,0x14))\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"defaultRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getReferralInfo\",\"outputs\":[{\"name\":\"referrals\",\"type\":\"address[]\"},{\"name\":\"bonuses\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setReferrerRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setDefaultRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TCCO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"exchangeUsdtToTcco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"exchangeTccoToUsdt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReferrerInfo\",\"outputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"amountOfReferrals\",\"type\":\"uint256\"},{\"name\":\"totalBonuses\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"USDTAddr\",\"type\":\"address\"},{\"name\":\"TCCOAddr\",\"type\":\"address\"},{\"name\":\"initialOwner\",\"type\":\"address\"},{\"name\":\"initialWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"usdt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tcco\",\"type\":\"uint256\"}],\"name\":\"ExchangeUsdtToTcco\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tcco\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"usdt\",\"type\":\"uint256\"}],\"name\":\"ExchangeTccoToUsdt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Exchange","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000001d112286657befb718becbcef6c26679eef7cbdd000000000000000000000000b89664c90c4aeb06ac1e1229ab097c08eddf05e00000000000000000000000004c1168e4dea3affa386ef812d6947a85f1a322bf","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b4b4ab5bb97965b8df93aad438aaf50afc38b5759fc195b34530ef80b154c0cd"}]}