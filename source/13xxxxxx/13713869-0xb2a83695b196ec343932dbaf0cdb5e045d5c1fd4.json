{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"},\"Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library\\u0027s function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value \\u003e 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IRegistry {\\n  event SystemWalletUpdated(address newWallet);\\n  event FeeVariablesChanged(uint256 indexed newFee, uint256 indexed newScale);\\n  event ContractStatusChanged(address indexed changed, bool indexed status);\\n  event CurrencyStatusChanged(address indexed changed, bool indexed status);\\n\\n  function feeInfo(uint256 _salePrice) external view returns(address, uint256);\\n  function isPlatformContract(address toCheck) external view returns(bool);\\n  function isApprovedCurrency(address tokenContract) external view returns(bool);\\n  function setSystemWallet(address newWallet) external;\\n  function setFeeVariables(uint256 newFee, uint256 newScale) external;\\n  function setContractStatus(address toChange, bool status) external;\\n  function setCurrencyStatus(address tokenContract, bool status) external;\\n  function approveAllCurrencies() external;\\n}\"},\"ISale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface ISale {\\n  struct Sale {\\n    uint256 id; // id of sale\\n    address owner; // address of NFT owner\\n    address nftContract;\\n    uint256 tokenId;\\n    uint256 amount; // amount of NFTs being sold\\n    uint256 purchased; // amount of NFTs purchased thus far\\n    uint256 startTime;\\n    uint256 endTime;\\n    uint256 price;\\n    uint256 maxBuyAmount;\\n    address currency; // use 0xaAaAaAaaAaAaAaaAaAAAAAAAAaaaAaAaAaaAaaAa for ETH\\n  }\\n\\n  event NewSale(uint256 indexed id, Sale newSale);\\n  event SaleCancelled(uint256 indexed saleId);\\n  event Purchase(\\n    uint256 saleId, \\n    address purchaser, \\n    address recipient, \\n    uint256 quantity\\n  );\\n  event NFTsReclaimed(uint256 indexed id, address indexed owner, uint256 indexed amount);\\n  event BalanceUpdated(\\n    address indexed accountOf, \\n    address indexed tokenAddress, \\n    uint256 indexed newBalance\\n  );\\n\\n  function getSaleDetails(uint256 saleId) external view returns(Sale memory);\\n  function getSaleStatus(uint256 saleId) external view returns(string memory);\\n  function getClaimableBalance(address account, address token) external view returns(uint256);\\n  function createSale(\\n    address nftContract,\\n    uint256 tokenId,\\n    uint256 amount,\\n    uint256 startTime,\\n    uint256 endTime,\\n    uint256 price,\\n    uint256 maxBuyAmount,\\n    address currency\\n  ) external returns(uint256);\\n  function buy(uint256 saleId, address recipient, uint256 amountToBuy, uint256 amountFromBalance) external payable returns(bool);\\n  function claimNfts(uint256 saleId) external;\\n  function claimFunds(address tokenContract) external;\\n  function cancelSale(uint256 saleId) external;\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"},\"Sale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Sales contract for Etched NFTs\\n * @author Linum Labs\\n */\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./Counters.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./ISale.sol\\\";\\nimport \\\"./IRegistry.sol\\\";\\n\\ninterface IEtchedNFT {\\n  function royaltyInfo(uint256 tokenId, uint256 _salePrice) external view returns(address, uint256);\\n  function balanceOf(address account, uint256 id) external view returns(uint256);\\n  function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) external;\\n  function supportsInterface(bytes4 interfaceID) external returns(bool);\\n}\\n\\ncontract EtchedNFTSale is ISale, Ownable, ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n  using Counters for Counters.Counter;\\n\\n  // already declared in ISale\\n\\n  // struct Sale {\\n  //   uint256 id; // id of sale\\n  //   address owner; // address of NFT owner\\n  //   address nftContract;\\n  //   uint256 tokenId;\\n  //   uint256 amount; // amount of NFTs being sold\\n  //   uint256 purchased; // amount of NFTs purchased\\n  //   uint256 startTime;\\n  //   uint256 endTime;\\n  //   uint256 price;\\n  //   uint256 maxBuyAmount;\\n  //   address currency; // use 0xaAaAaAaaAaAaAaaAaAAAAAAAAaaaAaAaAaaAaaAa for ETH\\n  // }\\n\\n  // address alias for using ETH as a currency\\n  address constant ETH = address(0xaAaAaAaaAaAaAaaAaAAAAAAAAaaaAaAaAaaAaaAa);\\n\\n  Counters.Counter private _saleId;\\n  IRegistry private Registry;\\n\\n  mapping(uint256 =\\u003e Sale) private sales;\\n  mapping(uint256 =\\u003e bool) private cancelled;\\n  mapping(uint256 =\\u003e mapping(address =\\u003e uint256)) private purchased;\\n  // user address =\\u003e tokenAddress =\\u003e amount\\n  mapping(address =\\u003e mapping(address =\\u003e uint256)) private claimableFunds;\\n\\n  // already declared in ISale\\n  // event NewSale(uint256 indexed id, Sale indexed newSale);\\n  // event Purchase(\\n  //   uint256 saleId, \\n  //   address purchaser, \\n  //   address recipient, \\n  //   uint256 quantity\\n  // );\\n  // event NFTsReclaimed(uint256 indexed id, address indexed owner, uint256 indexed amount);\\n  // event BalanceUpdated(\\n  //   address indexed accountOf, \\n  //   address indexed tokenAddress, \\n  //   uint256 indexed newBalance\\n  // );\\n\\n  constructor(address registry) {\\n    Registry = IRegistry(registry);\\n  }\\n\\n  /// @notice returns the details of a particular Sale\\n  /// @param saleId the index of the Sale to return the details of\\n  /// @return a Sale struct with the Sale details\\n  function getSaleDetails(uint256 saleId) external view returns(Sale memory) {\\n    require(saleId \\u003c= _saleId.current() \\u0026\\u0026 saleId \\u003e 0, \\\"sale does not exist\\\");\\n    return sales[saleId];\\n  }\\n\\n  /// @notice returns the status of a particular Sale\\n  /// @dev possible statuses: PENDING, ACTIVE, ENDED, CANCELLED\\n  /// @param saleId the index of the Sale to return the status of\\n  /// @return an all-caps string of the status\\n  function getSaleStatus(uint256 saleId) public view override returns(string memory) {\\n    require(saleId \\u003c= _saleId.current() \\u0026\\u0026 saleId \\u003e 0, \\\"sale does not exist\\\");\\n    if(cancelled[saleId] || !Registry.isPlatformContract(address(this))) return \\\"CANCELLED\\\";\\n    if(block.timestamp \\u003c sales[saleId].startTime) return \\\"PENDING\\\";\\n    if(\\n      block.timestamp \\u003e= sales[saleId].startTime \\u0026\\u0026\\n      block.timestamp \\u003c sales[saleId].endTime \\u0026\\u0026\\n      sales[saleId].purchased \\u003c sales[saleId].amount\\n    ) return \\\"ACTIVE\\\";\\n    if(\\n      block.timestamp \\u003e= sales[saleId].endTime || \\n      sales[saleId].purchased == sales[saleId].amount\\n    ) return \\\"ENDED\\\";\\n    revert(\\\"error\\\");\\n  }\\n\\n  /// @notice returns the user\\u0027s balance of a particular token in the contract\\n  /// @dev use 0xaAaAaAaaAaAaAaaAaAAAAAAAAaaaAaAaAaaAaaAa for ETH\\n  /// @param account the address to query the balance of\\n  /// @param token the address of the token to query the account\\u0027s balance of\\n  /// @return the uint256 balance of the account in the token queried\\n  function getClaimableBalance(address account, address token) external view returns(uint256){\\n    return claimableFunds[account][token];\\n  }\\n\\n  /// @notice Creates a sale of NFTs from an approved contract\\n  /// @dev this custodies the NFTs in the contract until they are sold or reclaimed by the seller\\n  /// @dev use 0xaAaAaAaaAaAaAaaAaAAAAAAAAaaaAaAaAaaAaaAa for currency if ETH is being used\\n  /// @param nftContract the address of the contract the NFTs are from\\n  /// @param tokenId the index of the NFTs being sold in the NFT contract\\n  /// @param amount the amount of NFTs to sell\\n  /// @param startTime the uint256 Solidity timestamp the sale should start at\\n  /// @param endTime the uint256 Solidity timestamp the sale should end at\\n  /// @param maxBuyAmount the maximum amount a signle address can buy from the sale\\n  /// @param currency the address of the token NFTs can be bought in\\n  /// @return the uint256 ID of the sale\\n  function createSale(\\n    address nftContract,\\n    uint256 tokenId,\\n    uint256 amount,\\n    uint256 startTime,\\n    uint256 endTime,\\n    uint256 price,\\n    uint256 maxBuyAmount,\\n    address currency\\n  ) external nonReentrant returns(uint256) {\\n    IEtchedNFT NftContract = IEtchedNFT(nftContract);\\n    require(Registry.isPlatformContract(nftContract) == true, \\\"NFT not in approved contract\\\");\\n    require(Registry.isPlatformContract(address(this)) == true, \\\"This contract is deprecated\\\");\\n    require(Registry.isApprovedCurrency(currency) == true, \\\"currency not supported\\\");\\n    require(NftContract.supportsInterface(0x2a55205a), \\\"contract must support ERC2981\\\");\\n    require(NftContract.balanceOf(msg.sender, tokenId) \\u003e= amount, \\\"insufficient NFT balance\\\");\\n    require(endTime \\u003e startTime, \\\"error in start/end params\\\");\\n    require(maxBuyAmount \\u003e 0, \\\"maxBuyAmount must be non-zero\\\");\\n    _saleId.increment();\\n    uint256 saleId = _saleId.current();\\n\\n    sales[saleId] = Sale({\\n      id: saleId,\\n      owner: msg.sender,\\n      nftContract: nftContract,\\n      tokenId: tokenId,\\n      amount: amount,\\n      purchased: 0,\\n      startTime: startTime,\\n      endTime: endTime,\\n      price: price,\\n      maxBuyAmount: maxBuyAmount,\\n      currency: currency\\n    });\\n\\n    NftContract.safeTransferFrom(\\n      msg.sender, \\n      address(this), \\n      tokenId,\\n      amount,\\n      \\\"\\\"\\n    );\\n\\n    emit NewSale(\\n      saleId,\\n      sales[saleId]\\n    );\\n\\n    return saleId;\\n  }\\n\\n  /// @notice purchases NFTs from a sale\\n  /// @dev system fees and royalties are automatically split off\\n  /// @param saleId the index of the sale to purchase from\\n  /// @param recipient the address the purchased NFTs should be sent to\\n  /// @param amountToBuy the amount of NFTs to purchase\\n  /// @param amountFromBalance the amount of claimable balance on this contract to use\\n  ///    towards the purchase\\n  /// @return a bool indicating success\\n  function buy(\\n    uint256 saleId, \\n    address recipient, \\n    uint256 amountToBuy,\\n    uint256 amountFromBalance\\n  ) external payable nonReentrant returns(bool) {\\n    require(Registry.isPlatformContract(address(this)) == true, \\\"This contract is deprecated\\\");\\n    require(keccak256(bytes(getSaleStatus(saleId))) == keccak256(bytes(\\\"ACTIVE\\\")), \\\"sale is not active\\\");\\n    Sale memory currentSale = sales[saleId];\\n    require(purchased[saleId][msg.sender] + amountToBuy \\u003c= currentSale.maxBuyAmount, \\\"buy quantity too high\\\");\\n    require(amountToBuy \\u003c= currentSale.amount - currentSale.purchased,\\n      \\\"not enough stock for purchase\\\");\\n    address currency = currentSale.currency;\\n    require(amountFromBalance \\u003c= claimableFunds[msg.sender][currency],\\n      \\\"not enough balance\\\"\\n    );\\n\\n    uint256 tokenId = currentSale.tokenId;\\n\\n    IEtchedNFT Nft = IEtchedNFT(currentSale.nftContract);\\n    (address artistAddress, uint256 royalties) = Nft.royaltyInfo(tokenId, amountToBuy * currentSale.price);\\n\\n    if(currency != ETH) {\\n      IERC20 Token = IERC20(currency);\\n\\n      Token.safeTransferFrom(msg.sender, address(this), (amountToBuy * currentSale.price) - amountFromBalance);\\n    } else {\\n      require(msg.value == (amountToBuy * currentSale.price) - amountFromBalance, \\\"msg.value + balance != price\\\");\\n    }\\n    if(amountFromBalance \\u003e 0){\\n      claimableFunds[msg.sender][currency] -= amountFromBalance;\\n      emit BalanceUpdated(msg.sender, currency, claimableFunds[msg.sender][currency]);\\n    }\\n\\n    // system fee\\n    (address systemWallet, uint256 fee) = Registry.feeInfo(amountToBuy * currentSale.price);\\n    claimableFunds[systemWallet][currency] += fee;\\n    emit BalanceUpdated(systemWallet, currency, claimableFunds[systemWallet][currency]);\\n\\n    // artist royalty if artist isn\\u0027t the seller\\n    if(currentSale.owner != artistAddress){\\n      claimableFunds[artistAddress][currency] += royalties;\\n      emit BalanceUpdated(artistAddress, currency, claimableFunds[artistAddress][currency]);\\n    } else {\\n      // since the artist is the seller\\n      royalties = 0;\\n    }\\n\\n    // seller gains\\n    claimableFunds[currentSale.owner][currency] += (amountToBuy * currentSale.price) - fee - royalties;\\n    emit BalanceUpdated(currentSale.owner, currency, claimableFunds[currentSale.owner][currency]);\\n\\n    sales[saleId].purchased += amountToBuy;\\n    purchased[saleId][msg.sender] += amountToBuy;\\n\\n    Nft.safeTransferFrom(\\n      address(this), \\n      recipient, \\n      tokenId,\\n      amountToBuy, \\n      \\\"\\\"\\n    );\\n\\n    emit Purchase(saleId, msg.sender, recipient, amountToBuy);\\n\\n    return true;\\n  }\\n\\n  /// @notice claims unsold NFTs\\n  /// @dev this is for the original seller to reclaim unsold NFTs\\n  ///    from an ended or cancelled sale\\n  /// @param saleId the index of the sale to reclaim the NFTs from\\n  function claimNfts(uint256 saleId) external {\\n    bytes32 status = keccak256(bytes(getSaleStatus(saleId)));\\n    require(\\n      status == keccak256(bytes(\\\"CANCELLED\\\")) || \\n      status == keccak256(bytes(\\\"ENDED\\\")),\\n      \\\"cannot claim before sale closes\\\"  \\n    );\\n    require(msg.sender == sales[saleId].owner,\\n      \\\"only nft owner can claim\\\"\\n    );\\n    require(sales[saleId].purchased \\u003c sales[saleId].amount, \\\"stock already sold or claimed\\\");\\n\\n    uint256 stock = sales[saleId].amount - sales[saleId].purchased;\\n    sales[saleId].purchased = sales[saleId].amount;\\n    IEtchedNFT Nft = IEtchedNFT(sales[saleId].nftContract);\\n    Nft.safeTransferFrom(\\n      address(this),\\n      sales[saleId].owner, \\n      sales[saleId].tokenId,\\n      stock,\\n      \\\"\\\"\\n    );\\n\\n    emit NFTsReclaimed(saleId, msg.sender, stock);\\n  }\\n\\n  /// @notice Explain to an end user what this does\\n  /// @dev use 0xaAaAaAaaAaAaAaaAaAAAAAAAAaaaAaAaAaaAaaAa for ETH\\n  /// @param tokenContract the address of the token being claimed\\n  function claimFunds(address tokenContract) external {\\n    require(claimableFunds[msg.sender][tokenContract] \\u003e 0, \\\"nothing to claim\\\");\\n    uint256 payout = claimableFunds[msg.sender][tokenContract];\\n    if(tokenContract != ETH) {\\n      IERC20 Token = IERC20(tokenContract);\\n      claimableFunds[msg.sender][tokenContract] = 0;\\n      Token.safeTransfer(msg.sender, payout);\\n    } else {\\n      claimableFunds[msg.sender][tokenContract] = 0;\\n      (bool success,) = msg.sender.call{ value: payout }(\\\"\\\");\\n      require(success, \\\"ETH payout failed\\\");\\n    }\\n    emit BalanceUpdated(msg.sender, tokenContract, claimableFunds[msg.sender][tokenContract]);\\n  }\\n\\n  /// @notice cancels a sale\\n  /// @dev can only be called by NFT owner or platform owner\\n  /// @param saleId the index of the sale to cancel\\n  function cancelSale(uint256 saleId) external {\\n    require(msg.sender == sales[saleId].owner || \\n      msg.sender == owner(),\\n      \\\"only owner or sale creator\\\"  \\n    );\\n    cancelled[saleId] = true;\\n\\n    emit SaleCancelled(saleId);\\n  }\\n\\n  /// @notice callback functioning for signalling ERC1155 support\\n  /// @dev in order to receive a safeTransfer, contracts must return\\n  ///    `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n  ///    (0xf23a6e61) when queried\\n  /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n  /// @param from The address which previously owned the token\\n  /// @param id The ID of the token being transferred\\n  /// @param value The amount of tokens being transferred\\n  /// @param data Additional data with no specified format\\n  /// @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n  function onERC1155Received(\\n    address operator, \\n    address from,\\n    uint256 id, \\n    uint256 value, \\n    bytes memory data\\n    ) external pure returns(bytes4){\\n    // 0xf23a6e61 = bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\")\\n    return 0xf23a6e61;\\n  }\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountOf\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"BalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NFTsReclaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ISale.Sale\",\"name\":\"newSale\",\"type\":\"tuple\"}],\"name\":\"NewSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"SaleCancelled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFromBalance\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"cancelSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"claimFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"claimNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"createSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getClaimableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"getSaleDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct ISale.Sale\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"}],\"name\":\"getSaleStatus\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EtchedNFTSale","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000097b746b9b09ccab04cf588d5f6384abc0c45415","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7602f693aac7306a6f5f5e0f17f7f31bff1b7ffdc6ae00b8a1e17a86c1ae6f22"}]}