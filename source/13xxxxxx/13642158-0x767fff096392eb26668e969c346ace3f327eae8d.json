{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Router.sol\": {\r\n      \"content\": \"import \\\"./interfaces/IHypervisor.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Router {\\n  IHypervisor public pos;\\n  IERC20 public token0;\\n  IERC20 public token1;\\n  address public owner;\\n  address payable public client;\\n  address public keeper;\\n  uint256 MAX_INT = 2**256 - 1;\\n\\n  constructor(\\n    address _token0,\\n    address _token1,\\n    address _pos\\n  ) {\\n    owner = msg.sender;\\n    client = msg.sender;\\n    keeper = msg.sender;\\n    token0 = IERC20(_token0);\\n    token1 = IERC20(_token1);\\n    pos = IHypervisor(_pos);\\n    token0.approve(_pos, MAX_INT);\\n    token1.approve(_pos, MAX_INT);\\n    pos.approve(_pos, MAX_INT);\\n  }\\n\\n  function deposit(\\n        uint256 deposit0,\\n        uint256 deposit1\\n  ) external {\\n    require(msg.sender == keeper, \\\"Only keeper allowed to execute deposit\\\");\\n    pos.deposit(deposit0, deposit1, client);\\n  }\\n\\n  function depositAll() external {\\n    require(msg.sender == keeper, \\\"Only keeper allowed to execute deposit\\\");\\n    pos.deposit(\\n      token0.balanceOf(address(this)),\\n      token1.balanceOf(address(this)),\\n      client\\n    );\\n  }\\n\\n  function withdraw(uint256 shares) external {\\n    require(msg.sender == client, \\\"Only client allowed to withdraw\\\");\\n    pos.transferFrom(client, address(this), shares);\\n    pos.withdraw(shares, client, address(this));\\n  }\\n\\n  function withdrawAll() external {\\n    require(msg.sender == client, \\\"Only client allowed to withdraw\\\");\\n    pos.transferFrom(client, address(this), pos.balanceOf(client)); \\n    pos.withdraw(pos.balanceOf(address(this)), client, address(this));\\n  }\\n\\n  function sweepTokens(address token) external {\\n    require(msg.sender == owner, \\\"Only owner allowed to pull tokens\\\");\\n    IERC20(token).transfer(owner, IERC20(token).balanceOf(address(this)));\\n  }\\n\\n  function sweepEth() external {\\n    require(msg.sender == owner, \\\"Only owner allowed to pull tokens\\\");\\n    client.transfer(address(this).balance);\\n  }\\n\\n  function transferClient(address payable newClient) external {\\n    require(msg.sender == owner, \\\"Only owner allowed to change client\\\");\\n    client = newClient;\\n  }\\n\\n  function transferKeeper(address newKeeper) external {\\n    require(msg.sender == keeper, \\\"Only keeper allowed to change keeper\\\");\\n    keeper = newKeeper; \\n  }\\n\\n  function transferOwnership(address newOwner) external {\\n    require(msg.sender == owner, \\\"Only owner alloed to change owner\\\");\\n    owner = newOwner;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHypervisor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IHypervisor {\\n\\n    function deposit(\\n        uint256,\\n        uint256,\\n        address\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        uint256,\\n        address,\\n        address\\n    ) external returns (uint256, uint256);\\n\\n\\n    function rebalance(\\n        int24 _baseLower,\\n        int24 _baseUpper,\\n        int24 _limitLower,\\n        int24 _limitUpper,\\n        address _feeRecipient,\\n        int256 swapQuantity\\n    ) external;\\n\\n    function addBaseLiquidity(\\n      uint256 amount0, \\n      uint256 amount1\\n    ) external;\\n\\n    function addLimitLiquidity(\\n      uint256 amount0, \\n      uint256 amount1\\n    ) external;   \\n\\n    function pullLiquidity(uint256 shares)\\n    external returns(\\n        uint256 base0,\\n        uint256 base1,\\n        uint256 limit0,\\n        uint256 limit1\\n    );\\n\\n    function token0() external view returns (IERC20);\\n\\n    function token1() external view returns (IERC20);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function getTotalAmounts() external view returns (uint256 total0, uint256 total1);\\n\\n    function pendingFees() external returns (uint256 fees0, uint256 fees1);\\n    \\n    function totalSupply() external view returns (uint256 );\\n\\n    function setMaxTotalSupply(uint256 _maxTotalSupply) external;\\n\\n    function setDepositMax(uint256 _deposit0Max, uint256 _deposit1Max) external;\\n\\n    function appendList(address[] memory listed) external;\\n\\n    function toggleWhitelist() external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pos\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"client\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit1\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pos\",\"outputs\":[{\"internalType\":\"contract IHypervisor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sweepTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newClient\",\"type\":\"address\"}],\"name\":\"transferClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"transferKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Router","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"000000000000000000000000956f47f50a910163d8bf957cf5846d573e7f87ca000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000704ececabe7855996cede5cefa660eccd3c01dbe","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}