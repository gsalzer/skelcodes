{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.8.0;\r\n\r\ninterface IInbox {\r\n    \r\n    \r\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\r\n\r\n    function sendUnsignedTransaction(\r\n        uint256 maxGas,\r\n        uint256 gasPriceBid,\r\n        uint256 nonce,\r\n        address destAddr,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external returns (uint256);\r\n\r\n    function sendContractTransaction(\r\n        uint256 maxGas,\r\n        uint256 gasPriceBid,\r\n        address destAddr,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external returns (uint256);\r\n\r\n   function sendL1FundedUnsignedTransaction(\r\n        uint256 maxGas,\r\n        uint256 gasPriceBid,\r\n        uint256 nonce,\r\n        address destAddr,\r\n        bytes calldata data\r\n    ) external payable returns (uint256);\r\n\r\n    function sendL1FundedContractTransaction(\r\n        uint256 maxGas,\r\n        uint256 gasPriceBid,\r\n        address destAddr,\r\n        bytes calldata data\r\n    ) external payable returns (uint256);\r\n\r\n    function createRetryableTicket(\r\n        address destAddr,\r\n        uint256 arbTxCallValue,\r\n        uint256 maxSubmissionCost,\r\n        address submissionRefundAddress,\r\n        address valueRefundAddress,\r\n        uint256 maxGas,\r\n        uint256 gasPriceBid,\r\n        bytes calldata data\r\n    ) external payable returns (uint256);\r\n\r\n    function depositEth(uint256 maxSubmissionCost) external payable returns (uint256);\r\n\r\n    function bridge() external view returns (IBridge);\r\n}\r\n\r\n\r\ninterface IBridge {\r\n    event MessageDelivered(\r\n        uint256 indexed messageIndex,\r\n        bytes32 indexed beforeInboxAcc,\r\n        address inbox,\r\n        uint8 kind,\r\n        address sender,\r\n        bytes32 messageDataHash\r\n    );\r\n\r\n    function deliverMessageToInbox(\r\n        uint8 kind,\r\n        address sender,\r\n        bytes32 messageDataHash\r\n    ) external payable returns (uint256);\r\n\r\n    function executeCall(\r\n        address destAddr,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external returns (bool success, bytes memory returnData);\r\n\r\n    // These are only callable by the admin\r\n    function setInbox(address inbox, bool enabled) external;\r\n\r\n    function setOutbox(address inbox, bool enabled) external;\r\n\r\n    // View functions\r\n\r\n    function activeOutbox() external view returns (address);\r\n\r\n    function allowedInboxes(address inbox) external view returns (bool);\r\n\r\n    function allowedOutboxes(address outbox) external view returns (bool);\r\n\r\n    function inboxAccs(uint256 index) external view returns (bytes32);\r\n\r\n    function messageCount() external view returns (uint256);\r\n}\r\n\r\ninterface IMessageProvider {\r\n    event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\r\n\r\n    event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\r\n}\r\n\r\ncontract SaitoArbPool {\r\n  // address owner;\r\n  address immutable SaitoL2;\r\n  IInbox public arbitrum;\r\n  mapping(address => uint256) public poolBalance;\r\n  address[] public poolUsers;\r\n  uint256 public poolUsersQty;\r\n  uint256 public poolTotal;\r\n  bool public isPoolOpen;\r\n\r\n  uint256 public MIN_USERS;\r\n  uint256 public MIN_TOTAL;\r\n\r\n  constructor(address _saitoL2, address _arbitrum, uint256 _minUsers, uint256 _minTotal) {\r\n    SaitoL2 = applyL1ToL2Alias(_saitoL2);\r\n    arbitrum = IInbox(_arbitrum);\r\n    MIN_USERS = _minUsers;\r\n    MIN_TOTAL = _minTotal;\r\n\r\n    isPoolOpen = true;\r\n  }\r\n\r\n  // helper functions\r\n  function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n    if (y > 3) {\r\n        z = y;\r\n        uint x = y / 2 + 1;\r\n        while (x < z) {\r\n            z = x;\r\n            x = (y / x + x) / 2;\r\n        }\r\n    } else if (y != 0) {\r\n        z = 1;\r\n    }\r\n  }\r\n\r\n  function remove(address _addressToRemove) public {\r\n    uint256 index = 0;\r\n\r\n    for (uint i = 0; i < poolUsers.length; i++){\r\n        if(poolUsers[i] != _addressToRemove)\r\n            index = i;\r\n    }\r\n\r\n    delete poolUsers[index];\r\n  }\r\n\r\n  function checkDeposit() public returns(bool success) {\r\n    if (poolUsersQty >= MIN_USERS && poolTotal >= MIN_TOTAL) {\r\n      closePool();\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function calcTotalFees(uint256 _avgGas) public returns(uint256 fees) {\r\n    uint256 fees = _avgGas + (_avgGas * sqrt(poolUsersQty));\r\n\r\n    return fees;\r\n  }\r\n\r\n  function applyL1ToL2Alias(address l1Address) internal pure returns (address l2Address) {\r\n    uint160 offset = uint160(0x1111000000000000000000000000000000001111);\r\n    l2Address = address(uint160(l1Address) + offset);\r\n  }\r\n\r\n\r\n  // pool user functions\r\n  function addPoolUser(address _depositer, uint256 _amount) public returns(bool success) {\r\n    if (poolBalance[_depositer] == 0) {\r\n      poolUsersQty += 1;\r\n      poolUsers.push(_depositer);\r\n    }\r\n\r\n    poolBalance[_depositer] += _amount;\r\n    poolTotal += _amount;\r\n\r\n    return true;\r\n  }\r\n\r\n  function removePoolUser(address _depositer) public returns(bool success) {\r\n    poolUsersQty -= 1;\r\n    remove(_depositer);\r\n\r\n    return true;\r\n  }\r\n\r\n  function withdrawPoolUser(address _depositer, uint256 _amount) public returns(bool success) {\r\n    require(poolBalance[_depositer] >= _amount);\r\n\r\n    poolBalance[_depositer] -= _amount;\r\n    poolTotal -= _amount;\r\n\r\n    if (poolBalance[_depositer] == 0) {\r\n      removePoolUser(_depositer);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // pool actions\r\n  function openPool() public returns(bool success) {\r\n    isPoolOpen = true;\r\n  }\r\n\r\n  function closePool() public returns(bool success) {\r\n    isPoolOpen = false;\r\n\r\n    return true;\r\n  }\r\n\r\n  function bridge() public returns(bool success) {\r\n    require(!isPoolOpen);\r\n    uint256 fees = calcTotalFees(10000000000000000);\r\n    uint256 poolTotalNetFees = poolTotal - fees;\r\n\r\n    arbitrum.createRetryableTicket{value: poolTotalNetFees}(SaitoL2, 0, 100000000000, SaitoL2, SaitoL2, 0, 0, '0x');\r\n    openPool();\r\n\r\n    return true;\r\n  }\r\n\r\n  // allow deposits\r\n  fallback() payable external {}\t\t\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_saitoL2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_arbitrum\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MIN_TOTAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_USERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addPoolUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrum\",\"outputs\":[{\"internalType\":\"contract IInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_avgGas\",\"type\":\"uint256\"}],\"name\":\"calcTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPoolOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolUsersQty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressToRemove\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositer\",\"type\":\"address\"}],\"name\":\"removePoolUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPoolUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SaitoArbPool","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008a8b5a97978db4a54367d7dcf6a50980990f2373000000000000000000000000578bade599406a8fe3d24fd7f7211c0911f5b29e00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9ddb3e48bda17b11b5eb7253d5ecd8c8f0173ab2f3bcd9e278807db03894e455"}]}