{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/main/VeXBE.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\n\\nimport \\\"./interfaces/ILockSubscription.sol\\\";\\n\\n// @title Voting Escrow XBE\\n// @author Curve Finance | Translation to Solidity - Integral Team O\\n// @license MIT\\n// @notice Votes have a weight depending on time, so that users are\\n//         committed to the future of (whatever they are voting for)\\n// @dev Vote weight decays linearly over time. Lock time cannot be\\n//     more than `MAXTIME` (2 years).\\ncontract VeXBE is Initializable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    // # Voting escrow to have time-weighted votes\\n    // # Votes have a weight depending on time, so that users are committed\\n    // # to the future of (whatever they are voting for).\\n    // # The weight in this implementation is linear, and lock cannot be more than maxtime:\\n    // # w ^\\n    // # 1 +        /\\n    // #   |      /\\n    // #   |    /\\n    // #   |  /\\n    // #   |/\\n    // # 0 +--------+------> time\\n    // #       maxtime (2 years?)\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // - dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint256 end;\\n    }\\n\\n    event CommitOwnership(address admin);\\n    event ApplyOwnership(address admin);\\n    event Deposit(\\n        address indexed provider,\\n        uint256 value,\\n        uint256 indexed locktime,\\n        int128 _type,\\n        uint256 ts\\n    );\\n    event Withdraw(address indexed provider, uint256 value, uint256 ts);\\n    event Supply(uint256 prevSupply, uint256 supply);\\n\\n    int128 public constant DEPOSIT_FOR_TYPE = 0;\\n    int128 public constant CREATE_LOCK_TYPE = 1;\\n    int128 public constant INCREASE_LOCK_AMOUNT = 2;\\n    int128 public constant INCREASE_UNLOCK_TIME = 3;\\n\\n    // General constants\\n    uint256 public constant YEAR = 86400 * 365;\\n    uint256 public constant WEEK = 7 * 86400; // all future times are rounded by week\\n    uint256 public constant MAXTIME = 100 * WEEK; // 2 years (23.333 Months)\\n    uint256 public constant MULTIPLIER = 10**18;\\n\\n    uint256 public supply;\\n\\n    mapping(address => LockedBalance) public locked;\\n    mapping(address => uint256) internal _lockStarts;\\n\\n    uint256 public epoch;\\n    mapping(uint256 => Point) public pointHistory; // epoch -> unsigned point /*Point[100000000000000000000000000000]*/\\n\\n    // Point[1000000000]\\n    mapping(address => mapping(uint256 => Point)) public userPointHistory; // user -> Point[user_epoch]\\n\\n    mapping(address => uint256) public userPointEpoch;\\n    mapping(uint256 => int128) public slopeChanges; // time -> signed slope change\\n\\n    address public votingStakingRewards;\\n    ILockSubscription public registrationMediator;\\n\\n    address public controller;\\n\\n    string public name;\\n    string public symbol;\\n    string public version;\\n    uint256 public decimals;\\n\\n    address public admin;\\n    address public futureAdmin;\\n\\n    uint256 public minLockDuration;\\n\\n    mapping(address => mapping(address => bool)) public createLockAllowance;\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"!admin\\\");\\n        _;\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Contract constructor\\n    // @param token_addr `ERC20CRV` token address\\n    // @param _name Token name\\n    // @param _symbol Token symbol\\n    // @param _version Contract version - required for Aragon compatibility\\n    // \\\"\\\"\\\"\\n    function configure(\\n        address tokenAddr,\\n        address _votingStakingRewards,\\n        address _registrationMediator,\\n        uint256 _minLockDuration,\\n        string calldata _name,\\n        string calldata _symbol,\\n        string calldata _version\\n    ) external initializer {\\n        admin = msg.sender;\\n        pointHistory[0].blk = block.number;\\n        pointHistory[0].ts = block.timestamp;\\n        controller = msg.sender;\\n        uint256 _decimals = ERC20(tokenAddr).decimals();\\n        require(_decimals <= 255, \\\"decimalsOverflow\\\");\\n        decimals = _decimals;\\n        name = _name;\\n        symbol = _symbol;\\n        version = _version;\\n        votingStakingRewards = _votingStakingRewards;\\n        registrationMediator = ILockSubscription(_registrationMediator);\\n\\n        _setMinLockDuration(_minLockDuration);\\n    }\\n\\n    function _setMinLockDuration(uint256 _minLockDuration) private {\\n        require(_minLockDuration < MAXTIME, \\\"!badMinLockDuration\\\");\\n        minLockDuration = _minLockDuration;\\n    }\\n\\n    function setMinLockDuration(uint256 _minLockDuration) external onlyAdmin {\\n        _setMinLockDuration(_minLockDuration);\\n    }\\n\\n    function setVoting(address _votingStakingRewards) external onlyAdmin {\\n        require(_votingStakingRewards != address(0), \\\"addressIsZero\\\");\\n        votingStakingRewards = _votingStakingRewards;\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Transfer ownership of VotingEscrow contract to `addr`\\n    // @param addr Address to have ownership transferred to\\n    // \\\"\\\"\\\"\\n    function commitTransferOwnership(address addr) external onlyAdmin {\\n        futureAdmin = addr;\\n        emit CommitOwnership(addr);\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Apply ownership transfer\\n    // \\\"\\\"\\\"\\n    function applyTransferOwnership() external onlyAdmin {\\n        address _admin = futureAdmin;\\n        require(_admin != address(0), \\\"adminIsZero\\\");\\n        admin = _admin;\\n        emit ApplyOwnership(_admin);\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Get the most recently recorded rate of voting power decrease for `addr`\\n    // @param addr Address of the user wallet\\n    // @return Value of the slope\\n    // \\\"\\\"\\\"\\n    function getLastUserSlope(address addr) external view returns (int128) {\\n        uint256 uepoch = userPointEpoch[addr];\\n        return userPointHistory[addr][uepoch].slope;\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Get the timestamp for checkpoint `_idx` for `_addr`\\n    // @param _addr User wallet address\\n    // @param _idx User epoch number\\n    // @return Epoch time of the checkpoint\\n    // \\\"\\\"\\\"\\n    function userPointHistoryTs(address addr, uint256 idx)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return userPointHistory[addr][idx].ts;\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Get timestamp when `_addr`'s lock finishes\\n    // @param _addr User wallet\\n    // @return Epoch time of the lock end\\n    // \\\"\\\"\\\"\\n    function lockedEnd(address addr) external view returns (uint256) {\\n        return locked[addr].end;\\n    }\\n\\n    function lockStarts(address addr) external view returns (uint256) {\\n        return _lockStarts[addr];\\n    }\\n\\n    function lockedAmount(address addr) external view returns (uint256) {\\n        return uint256(locked[addr].amount);\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Record global and per-user data to checkpoint\\n    // @param addr User's wallet address. No user checkpoint if 0x0\\n    // @param old_locked Pevious locked amount / end lock time for the user\\n    // @param new_locked New locked amount / end lock time for the user\\n    // \\\"\\\"\\\"\\n    function _checkpoint(\\n        address addr,\\n        LockedBalance memory oldLocked,\\n        LockedBalance memory newLocked\\n    ) internal {\\n        Point memory uOld;\\n        Point memory uNew;\\n        int128 oldDSlope = 0;\\n        int128 newDSlope = 0;\\n        // uint256 _epoch = epoch;\\n\\n        if (addr != address(0)) {\\n            // # Calculate slopes and biases\\n            // # Kept at zero when they have to\\n            if (oldLocked.end > block.timestamp && oldLocked.amount > 0) {\\n                uOld.slope = int128(uint256(oldLocked.amount) / MAXTIME);\\n                uOld.bias =\\n                    uOld.slope *\\n                    int128(oldLocked.end - block.timestamp);\\n            }\\n            if (newLocked.end > block.timestamp && newLocked.amount > 0) {\\n                uNew.slope = int128(uint256(newLocked.amount) / MAXTIME);\\n                uNew.bias =\\n                    uNew.slope *\\n                    int128(newLocked.end - block.timestamp);\\n            }\\n\\n            // # Read values of scheduled changes in the slope\\n            // # old_locked.end can be in the past and in the future\\n            // # new_locked.end can ONLY by in the FUTURE unless everything expired: than zeros\\n            oldDSlope = slopeChanges[oldLocked.end];\\n            if (newLocked.end != 0) {\\n                if (newLocked.end == oldLocked.end) {\\n                    newDSlope = oldDSlope;\\n                } else {\\n                    newDSlope = slopeChanges[newLocked.end];\\n                }\\n            }\\n        }\\n        Point memory lastPoint = Point({\\n            bias: 0,\\n            slope: 0,\\n            ts: block.timestamp,\\n            blk: block.number\\n        });\\n        if (\\n            epoch > 0 /*_epoch*/\\n        ) {\\n            lastPoint = pointHistory[\\n                epoch /*_epoch*/\\n            ];\\n        }\\n        // uint256 lastCheckpoint = lastPoint.ts;\\n\\n        // # initial_last_point is used for extrapolation to calculate block number\\n        // # (approximately, for *At methods) and save them\\n        // # as we cannot figure that out exactly from inside the contract\\n\\n        Point memory initialLastPoint = lastPoint;\\n        uint256 blockSlope = 0;\\n        if (block.timestamp > lastPoint.ts) {\\n            blockSlope =\\n                (MULTIPLIER * (block.number - lastPoint.blk)) /\\n                (block.timestamp - lastPoint.ts);\\n        }\\n\\n        // # If last point is already recorded in this block, slope=0\\n        // # But that's ok b/c we know the block in such case\\n        //\\n        // # Go over weeks to fill history and calculate what the current point is\\n        uint256 tI = (lastPoint.ts / WEEK) * WEEK; /*lastCheckpoint*/\\n\\n        for (uint256 i = 0; i < 255; i++) {\\n            // # Hopefully it won't happen that this won't get used in 5 years!\\n            // # If it does, users will be able to withdraw but vote weight will be broken\\n            tI += WEEK;\\n            int128 dSlope = 0;\\n\\n            if (tI > block.timestamp) {\\n                tI = block.timestamp;\\n            } else {\\n                dSlope = slopeChanges[tI];\\n            }\\n\\n            lastPoint.bias -=\\n                lastPoint.slope *\\n                int128(\\n                    tI - lastPoint.ts /*lastCheckpoint*/\\n                );\\n            lastPoint.slope += dSlope;\\n\\n            if (lastPoint.bias < 0) {\\n                // # This can happen\\n                lastPoint.bias = 0;\\n            }\\n\\n            if (lastPoint.slope < 0) {\\n                // # This cannot happen - just in case\\n                lastPoint.slope = 0;\\n            }\\n\\n            // lastCheckpoint = tI;\\n            lastPoint.ts = tI;\\n            lastPoint.blk =\\n                initialLastPoint.blk +\\n                (blockSlope * (tI - initialLastPoint.ts)) /\\n                MULTIPLIER;\\n            epoch += 1; /*_epoch*/\\n\\n            if (tI == block.timestamp) {\\n                lastPoint.blk = block.number;\\n                break;\\n            } else {\\n                pointHistory[\\n                    epoch /*_epoch*/\\n                ] = lastPoint;\\n            }\\n        }\\n\\n        // epoch = _epoch;\\n        // # Now point_history is filled until t=now\\n\\n        if (addr != address(0)) {\\n            // # If last point was in this block, the slope change has been applied already\\n            // # But in such case we have 0 slope(s)\\n            lastPoint.slope += (uNew.slope - uOld.slope);\\n            lastPoint.bias += (uNew.bias - uOld.bias);\\n            if (lastPoint.slope < 0) {\\n                lastPoint.slope = 0;\\n            }\\n            if (lastPoint.bias < 0) {\\n                lastPoint.bias = 0;\\n            }\\n        }\\n\\n        // # Record the changed point into history\\n        pointHistory[\\n            epoch /*_epoch*/\\n        ] = lastPoint;\\n\\n        if (addr != address(0)) {\\n            // # Schedule the slope changes (slope is going down)\\n            // # We subtract new_user_slope from [new_locked.end]\\n            // # and add old_user_slope to [old_locked.end]\\n            if (oldLocked.end > block.timestamp) {\\n                // # old_dslope was <something> - u_old.slope, so we cancel that\\n                oldDSlope += uOld.slope;\\n                if (newLocked.end == oldLocked.end) {\\n                    oldDSlope -= uNew.slope;\\n                }\\n                slopeChanges[oldLocked.end] = oldDSlope;\\n            }\\n            if (newLocked.end > block.timestamp) {\\n                if (newLocked.end > oldLocked.end) {\\n                    newDSlope -= uNew.slope;\\n                    slopeChanges[newLocked.end] = newDSlope;\\n                }\\n                // else: we recorded it already in old_dslope\\n            }\\n\\n            // Now handle user history\\n            // uint256 userEpoch = userPointEpoch[addr] + 1;\\n\\n            userPointEpoch[addr] += 1; //= userPointEpoch[addr] + 1/*userEpoch*/;\\n            uNew.ts = block.timestamp;\\n            uNew.blk = block.number;\\n            userPointHistory[addr][\\n                userPointEpoch[addr] /*userEpoch*/\\n            ] = uNew;\\n        }\\n    }\\n\\n    function _canConvertInt128(uint256 value) internal pure returns (bool) {\\n        return value < 2**127;\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Deposit and lock tokens for a user\\n    // @param _addr User's wallet address\\n    // @param _value Amount to deposit\\n    // @param unlock_time New time when to unlock the tokens, or 0 if unchanged\\n    // @param locked_balance Previous locked amount / timestamp\\n    // \\\"\\\"\\\"\\n    function _depositFor(\\n        address _addr,\\n        uint256 _value,\\n        uint256 unlockTime,\\n        LockedBalance memory lockedBalance,\\n        int128 _type\\n    ) internal {\\n        LockedBalance memory _locked = LockedBalance({\\n            amount: lockedBalance.amount,\\n            end: lockedBalance.end\\n        });\\n        uint256 supplyBefore = supply;\\n\\n        supply = supplyBefore.add(_value);\\n        LockedBalance memory oldLocked = lockedBalance;\\n        // # Adding to existing lock, or if a lock is expired - creating a new one\\n\\n        require(_canConvertInt128(_value), \\\"!convertInt128\\\");\\n        _locked.amount += int128(_value);\\n        if (unlockTime != 0) {\\n            _locked.end = unlockTime;\\n        }\\n        locked[_addr] = _locked;\\n\\n        // # Possibilities:\\n        // # Both old_locked.end could be current or expired (>/< block.timestamp)\\n        // # value == 0 (extend lock) or value > 0 (add to lock or extend lock)\\n        // # _locked.end > block.timestamp (always)\\n        _checkpoint(_addr, oldLocked, _locked);\\n\\n        require(\\n            IERC20(votingStakingRewards).balanceOf(_addr) >=\\n                uint256(_locked.amount),\\n            \\\"notEnoughStake\\\"\\n        );\\n\\n        registrationMediator.processLockEvent(\\n            _addr,\\n            _lockStarts[_addr],\\n            _locked.end,\\n            uint256(_locked.amount)\\n        );\\n\\n        emit Deposit(_addr, _value, _locked.end, _type, block.timestamp);\\n        emit Supply(supplyBefore, supplyBefore.add(_value));\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Record global data to checkpoint\\n    // \\\"\\\"\\\"\\n    function checkpoint() external {\\n        LockedBalance memory _emptyBalance;\\n        _checkpoint(address(0), _emptyBalance, _emptyBalance);\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Deposit `_value` tokens for `_addr` and add to the lock\\n    // @dev Anyone (even a smart contract) can deposit for someone else, but\\n    //      cannot extend their locktime and deposit for a brand new user\\n    // @param _addr User's wallet address\\n    // @param _value Amount to add to user's lock\\n    // \\\"\\\"\\\"\\n    function depositFor(address _addr, uint256 _value) external nonReentrant {\\n        LockedBalance memory _locked = locked[_addr];\\n        require(_value > 0, \\\"!zeroValue\\\");\\n        require(_locked.amount > 0, \\\"!zeroLockedAmount\\\");\\n        require(_locked.end > block.timestamp, \\\"lockExpired\\\");\\n        _depositFor(_addr, _value, 0, _locked, DEPOSIT_FOR_TYPE);\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Deposit `_value` tokens for `msg.sender` and lock until `_unlock_time`\\n    // @param _value Amount to deposit\\n    // @param _unlock_time Epoch time when tokens unlock, rounded down to whole weeks\\n    // \\\"\\\"\\\"\\n    function createLock(uint256 _value, uint256 _unlockTime)\\n        external\\n        nonReentrant\\n    {\\n        // assertNotContract(msg.sender);\\n        _createLockFor(msg.sender, _value, _unlockTime);\\n    }\\n\\n    function setCreateLockAllowance(address _sender, bool _status) external {\\n        createLockAllowance[msg.sender][_sender] = _status;\\n    }\\n\\n    function _createLockFor(\\n        address _for,\\n        uint256 _value,\\n        uint256 _unlockTime\\n    ) internal {\\n        uint256 unlockTime = (_unlockTime / WEEK) * WEEK; // # Locktime is rounded down to weeks\\n        LockedBalance memory _locked = locked[_for];\\n\\n        require(_value > 0, \\\"!zeroValue\\\");\\n        require(_locked.amount == 0, \\\"!withdrawOldTokensFirst\\\");\\n        require(unlockTime > block.timestamp, \\\"!futureTime\\\");\\n        require(\\n            unlockTime >= minLockDuration + block.timestamp,\\n            \\\"!minLockDuration\\\"\\n        );\\n        require(\\n            unlockTime <= block.timestamp.add(MAXTIME),\\n            \\\"invalidFutureTime\\\"\\n        );\\n\\n        _lockStarts[_for] = block.timestamp;\\n\\n        _depositFor(_for, _value, unlockTime, _locked, CREATE_LOCK_TYPE);\\n    }\\n\\n    function createLockFor(\\n        address _for,\\n        uint256 _value,\\n        uint256 _unlockTime\\n    ) external nonReentrant {\\n        if (msg.sender != votingStakingRewards) {\\n            require(createLockAllowance[msg.sender][_for], \\\"!allowed\\\");\\n        }\\n        _createLockFor(_for, _value, _unlockTime);\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Deposit `_value` additional tokens for `msg.sender`\\n    //         without modifying the unlock time\\n    // @param _value Amount of tokens to deposit and add to the lock\\n    // \\\"\\\"\\\"\\n    function increaseAmount(uint256 _value) external nonReentrant {\\n        // assertNotContract(msg.sender);\\n        LockedBalance memory _locked = locked[msg.sender];\\n        require(_value > 0, \\\"!zeroValue\\\");\\n        require(_locked.amount > 0, \\\"!zeroLockedAmount\\\");\\n        require(_locked.end > block.timestamp, \\\"lockExpired\\\");\\n        _depositFor(msg.sender, _value, 0, _locked, INCREASE_LOCK_AMOUNT);\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Extend the unlock time for `msg.sender` to `_unlock_time`\\n    // @param _unlock_time New epoch time for unlocking\\n    // \\\"\\\"\\\"\\n    function increaseUnlockTime(uint256 _unlockTime) external nonReentrant {\\n        // assertNotContract(msg.sender);\\n        LockedBalance memory _locked = locked[msg.sender];\\n        uint256 unlockTime = (_unlockTime / WEEK) * WEEK; // Locktime is rounded down to weeks\\n\\n        require(_locked.end > block.timestamp, \\\"lockExpired\\\");\\n        require(_locked.amount > 0, \\\"!zeroLockedAmount\\\");\\n        require(unlockTime > _locked.end, \\\"canOnlyIncreaseLockDuration\\\");\\n        require(\\n            unlockTime <= block.timestamp.add(MAXTIME),\\n            \\\"lockOnlyToValidFutureTime\\\"\\n        );\\n\\n        _depositFor(msg.sender, 0, unlockTime, _locked, INCREASE_UNLOCK_TIME);\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Withdraw all tokens for `msg.sender`\\n    // @dev Only possible if the lock has expired\\n    // \\\"\\\"\\\"\\n    function withdraw() external nonReentrant {\\n        LockedBalance memory _locked = locked[msg.sender];\\n        require(block.timestamp >= _locked.end, \\\"lockDidntExpired\\\");\\n        uint256 value = uint256(_locked.amount);\\n\\n        LockedBalance memory oldLocked = _locked;\\n        _locked.end = 0;\\n        _locked.amount = 0;\\n        locked[msg.sender] = _locked;\\n        uint256 supplyBefore = supply;\\n        supply = supplyBefore - value;\\n\\n        // # old_locked can have either expired <= timestamp or zero end\\n        // # _locked has only 0 end\\n        // # Both can have >= 0 amount\\n        _checkpoint(msg.sender, oldLocked, _locked);\\n\\n        emit Withdraw(msg.sender, value, block.timestamp);\\n        emit Supply(supplyBefore, supplyBefore - value);\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Binary search to estimate timestamp for block number\\n    // @param _block Block to find\\n    // @param max_epoch Don't go beyond this epoch\\n    // @return Approximate timestamp for block\\n    // \\\"\\\"\\\"\\n    function findBlockEpoch(uint256 _block, uint256 maxEpoch)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _min = 0;\\n        uint256 _max = maxEpoch;\\n        for (uint256 i = 0; i < 128; i++) {\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint256 _mid = (_min + _max + 1) / 2;\\n            if (pointHistory[_mid].blk <= _block) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Get the current voting power for `msg.sender`\\n    // @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\n    // @param addr User wallet address\\n    // @param _t Epoch time to return voting power at\\n    // @return User voting power\\n    // \\\"\\\"\\\"\\n    function balanceOf(address addr) public view returns (uint256) {\\n        return balanceOf(addr, block.timestamp);\\n    }\\n\\n    function balanceOf(address addr, uint256 _t) public view returns (uint256) {\\n        uint256 _epoch = userPointEpoch[addr];\\n        if (_epoch == 0) {\\n            return 0;\\n        } else {\\n            Point memory lastPoint = userPointHistory[addr][_epoch];\\n            lastPoint.bias -= lastPoint.slope * int128(_t - lastPoint.ts);\\n            if (lastPoint.bias < 0) {\\n                lastPoint.bias = 0;\\n            }\\n            return uint256(lastPoint.bias);\\n        }\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Measure voting power of `addr` at block height `_block`\\n    // @dev Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime\\n    // @param addr User's wallet address\\n    // @param _block Block to calculate the voting power at\\n    // @return Voting power\\n    // \\\"\\\"\\\"\\n    function balanceOfAt(address addr, uint256 _block)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        // # Copying and pasting totalSupply code because Vyper cannot pass by\\n        // # reference yet\\n        require(_block <= block.number, \\\"onlyPast\\\");\\n\\n        // Binary search\\n        uint256 _min = 0;\\n        uint256 _max = userPointEpoch[addr];\\n        for (uint256 i = 0; i < 128; i++) {\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint256 _mid = (_min + _max + 1) / 2;\\n            if (userPointHistory[addr][_mid].blk <= _block) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n\\n        Point memory upoint = userPointHistory[addr][_min];\\n\\n        uint256 maxEpoch = epoch;\\n        uint256 _epoch = findBlockEpoch(_block, maxEpoch);\\n        Point memory point0 = pointHistory[_epoch];\\n        uint256 dBlock = 0;\\n        uint256 dT = 0;\\n        if (_epoch < maxEpoch) {\\n            Point memory point1 = pointHistory[_epoch + 1];\\n            dBlock = point1.blk - point0.blk;\\n            dT = point1.ts - point0.ts;\\n        } else {\\n            dBlock = block.number - point0.blk;\\n            dT = block.timestamp - point0.ts;\\n        }\\n        uint256 blockTime = point0.ts;\\n        if (dBlock != 0) {\\n            blockTime += (dT * (_block - point0.blk)) / dBlock;\\n        }\\n\\n        upoint.bias -= upoint.slope * int128(blockTime - upoint.ts);\\n        if (upoint.bias >= 0) {\\n            return uint256(upoint.bias);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Calculate total voting power at some point in the past\\n    // @param point The point (bias/slope) to start search from\\n    // @param t Time to calculate the total voting power at\\n    // @return Total voting power at that time\\n    // \\\"\\\"\\\"\\n    function supplyAt(Point memory point, uint256 t)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        Point memory lastPoint = point;\\n        uint256 tI = (lastPoint.ts / WEEK) * WEEK;\\n        for (uint256 i = 0; i < 255; i++) {\\n            tI += WEEK;\\n            int128 dSlope = 0;\\n            if (tI > t) {\\n                tI = t;\\n            } else {\\n                dSlope = slopeChanges[tI];\\n            }\\n            lastPoint.bias -= lastPoint.slope * int128(tI - lastPoint.ts);\\n            if (tI == t) {\\n                break;\\n            }\\n            lastPoint.slope += dSlope;\\n            lastPoint.ts = tI;\\n        }\\n\\n        if (lastPoint.bias < 0) {\\n            lastPoint.bias = 0;\\n        }\\n        return uint256(lastPoint.bias);\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Calculate total voting power\\n    // @dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\\n    // @return Total voting power\\n    // \\\"\\\"\\\"\\n    function totalSupply() external view returns (uint256) {\\n        return totalSupply(block.timestamp);\\n    }\\n\\n    // returns supply of locked tokens\\n    function lockedSupply() external view returns (uint256) {\\n        return supply;\\n    }\\n\\n    function totalSupply(uint256 t) public view returns (uint256) {\\n        uint256 _epoch = epoch;\\n        Point memory lastPoint = pointHistory[_epoch];\\n        return supplyAt(lastPoint, t);\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @notice Calculate total voting power at some point in the past\\n    // @param _block Block to calculate the total voting power at\\n    // @return Total voting power at `_block`\\n    // \\\"\\\"\\\"\\n    function totalSupplyAt(uint256 _block) external view returns (uint256) {\\n        require(_block <= block.number, \\\"onlyPastAllowed\\\");\\n        uint256 _epoch = epoch;\\n        uint256 targetEpoch = findBlockEpoch(_block, _epoch);\\n\\n        Point memory point = pointHistory[targetEpoch];\\n        uint256 dt = 0; // difference in total voting power between _epoch and targetEpoch\\n\\n        if (targetEpoch < _epoch) {\\n            Point memory pointNext = pointHistory[targetEpoch + 1];\\n            if (point.blk != pointNext.blk) {\\n                dt =\\n                    ((_block - point.blk) * (pointNext.ts - point.ts)) /\\n                    (pointNext.blk - point.blk);\\n            }\\n        } else {\\n            if (point.blk != block.number) {\\n                dt =\\n                    ((_block - point.blk) * (block.timestamp - point.ts)) /\\n                    (block.number - point.blk);\\n            }\\n        }\\n\\n        // # Now dt contains info on how far are we beyond point\\n        return supplyAt(point, point.ts + dt);\\n    }\\n\\n    // \\\"\\\"\\\"\\n    // @dev Dummy method required for Aragon compatibility\\n    // \\\"\\\"\\\"\\n    function changeController(address _newController) external {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        controller = _newController;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/main/interfaces/ILockSubscription.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface ILockSubscription {\\n    function processLockEvent(\\n        address account,\\n        uint256 lockStart,\\n        uint256 lockEnd,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"ApplyOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"CommitOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"_type\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATE_LOCK_TYPE\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_FOR_TYPE\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCREASE_LOCK_AMOUNT\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCREASE_UNLOCK_TIME\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"commitTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_votingStakingRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registrationMediator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minLockDuration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"createLockAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"createLockFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getLastUserSlope\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"increaseUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"lockStarts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"amount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"lockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"lockedEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointHistory\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationMediator\",\"outputs\":[{\"internalType\":\"contract ILockSubscription\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setCreateLockAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLockDuration\",\"type\":\"uint256\"}],\"name\":\"setMinLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_votingStakingRewards\",\"type\":\"address\"}],\"name\":\"setVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slopeChanges\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPointEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPointHistory\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"userPointHistoryTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingStakingRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VeXBE","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}