{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier:MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract ERC20 {\r\n    function totalSupply() virtual public view returns (uint256);\r\n    function balanceOf(address) virtual public view returns (uint256);\r\n    function transfer(address, uint256) virtual public returns (bool);\r\n    function transferFrom(address, address, uint256) virtual public returns (bool);\r\n    function approve(address, uint256) virtual public returns (bool);\r\n    function allowance(address, address) virtual public view returns (uint256);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // allow transfer of ownership to another address in case shit hits the fan.\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    function transfer(address _to, uint256 _value) virtual override public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n    \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) virtual override public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) override public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) override public returns (bool success) {\r\n        // Added to prevent potential race attack.\r\n        // forces caller of this function to ensure address allowance is already 0\r\n        // ref: https://github.com/ethereum/EIPs/issues/738\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) override public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    /**\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n//token contract\r\ncontract Token is Owned, StandardToken {\r\n    using SafeMath for uint;\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /* Public variables of the token */\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    uint256 private _totalSupply;\r\n    address public distributionAddress;\r\n    bool public isTransferable = false;\r\n\r\n\r\n    constructor() {\r\n        name = \"Twistcode Token\";\r\n        decimals = 18;\r\n        symbol = \"TCDT\";\r\n        _totalSupply = 1500000000 * 10 ** uint256(decimals);\r\n        owner = msg.sender;\r\n\r\n        //transfer all to handler address\r\n        balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) override public returns (bool) {\r\n        require(isTransferable);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) override public returns (bool) {\r\n        require(isTransferable);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Get totalSupply of tokens - Minus any from address 0 if that was used as a burnt method\r\n     * Suggested way is still to use the burnSent function\r\n     */\r\n    function totalSupply() override public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * unlocks tokens, only allowed once\r\n     */\r\n    function enableTransfers() public onlyOwner {\r\n        isTransferable = true;\r\n    }\r\n\r\n    /**\r\n     * Callable by anyone\r\n     * Accepts an input of the number of tokens to be burnt held by the sender.\r\n     */\r\n    function burnSent(uint256 _value) public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        emit Burn(burner, _value);\r\n    }\r\n\r\n    \r\n    /**\r\n    * Allow distribution helper to help with distributeToken function\r\n    * Here we should update the distributionAddress with the crowdsale contract address upon deployment\r\n    * Allows for added flexibility in terms of scheduling, token allocation, etc.\r\n    */\r\n    function setDistributionAddress(address _setAddress) public onlyOwner {\r\n        distributionAddress = _setAddress;\r\n    }\r\n\r\n    /**\r\n     * Called by owner to transfer tokens - Managing manual distribution.\r\n     * Also allow distribution contract to call for this function\r\n     */\r\n    function distributeTokens(address _to, uint256 _value) public {\r\n        require(distributionAddress == msg.sender || owner == msg.sender);\r\n        super.transfer(_to, _value);\r\n    }\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract OwnedBySaleOwner {\r\n    address payable public owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // allow transfer of ownership to another address in case shit hits the fan.\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenCrowdSale is OwnedBySaleOwner  {\r\n    // all values dealt with in wei, unless explicitly specified.\r\n    // Note: Contract to be loaded with the allocated tokens prior to pre/public sales\r\n\r\n    // ====     start and end dates     ==== //\r\n    uint256 public startDate;               // Start date - to be determined\r\n    uint256 public endDate;                 // End date - to be determined\r\n\r\n    // ==== address of Token ==== //\r\n    Token public token;\r\n\r\n    // ==== funds will be transferred to these addresses ==== //\r\n    address payable public TwistcodeAddress = payable(0xe23a95fF8531dDF0Eab22DF35F131fBc7F074ed7);\r\n\r\n    // ==== hardcap of Sale ==== //\r\n    bool public isHalted;               // is the crowdsale halted\r\n    \r\n    // ==== AggregatorV3Interface so that we rely on oracle for eth price instead of hardcoding ==== //\r\n    AggregatorV3Interface public oracle;\r\n\r\n    // ==== bonus ==== //\r\n    uint8 public bonusCollected;\r\n    uint8 public maxBonusCollected;\r\n    uint256 public bonusToGive;\r\n    uint256 public bonusThreshold;\r\n    mapping (address => bool) public bonusCollectionList;\r\n    mapping (address => uint256) public bonusCollectionAmount;\r\n\r\n    using SafeMath for uint256;\r\n\r\n    constructor(address _Token,\r\n                uint256 _startDate, uint256 _endDate, \r\n                address _oracle) {\r\n        token = Token(_Token);             // initialising reference to ERC20\r\n        startDate = _startDate;                  // Sale start date in UNIX time\r\n        endDate = _endDate;                      // Sale end date in UNIX time\r\n        owner = payable(msg.sender);                      // Set contract ownership\r\n        oracle = AggregatorV3Interface(_oracle); // Set Oracle for Eth Price\r\n\r\n        bonusCollected = 0; // how many have collected their bonus?\r\n        maxBonusCollected = 30; // only 30 can get bonus\r\n        bonusToGive = 10000 * 10 ** 18; // how much bonus to give\r\n        bonusThreshold = 100000 * 10 ** 18; // how much of a threshold.\r\n    }\r\n\r\n    receive() external payable {\r\n        buyTokens();\r\n    }\r\n\r\n    function buyTokens() public payable {\r\n        // crowdsale checks\r\n        require(isCrowdSaleOngoing(), \"Crowdsale ended\");\r\n        \r\n        // Get ethPrice from an oracle\r\n        uint256 ethPrice = uint256(getLatestPrice()); // int256 unlikely to break uint256, judging that price would be astronomical.\r\n\r\n        // get amount sent\r\n        uint256 payAmt = msg.value;\r\n\r\n        //send tokens\r\n        uint256 toSend = calculateBonuses(payAmt, ethPrice);\r\n        // if bonus is given, increment bonus that is collection count. \r\n        if(toSend > payAmt.mul(ethPrice * 10)) {\r\n            bonusCollectionList[msg.sender] = true;\r\n            bonusCollected++;\r\n        }\r\n        // tally into amount for sender.\r\n        bonusCollectionAmount[msg.sender] = bonusCollectionAmount[msg.sender].add(toSend);\r\n\r\n        token.distributeTokens(msg.sender, toSend);\r\n\r\n        // send ethers to respective parties\r\n        TwistcodeAddress.transfer(payAmt);\r\n    }\r\n    \r\n    function getLatestPrice() public view returns (int) {\r\n        (\r\n            ,\r\n            int256 answer, // we shall note that the latest price is times 8 decimal places. which we want to get rid of.\r\n            ,\r\n            ,\r\n        ) = oracle.latestRoundData();\r\n        return answer / (10 ** 8); // if eth goes below 1 dollar we will have more than the crowdsale to worry about.\r\n    }\r\n\r\n    function calculateBonuses(uint256 amount, uint256 ethPrice) public view returns (uint256 total) {\r\n        // 0.1$ per token. at 100,000 threshhold (including previous collection). award 10,000 tokens. first 30 only. no duplicate address allowed.\r\n        if(bonusCollected < maxBonusCollected && amount.mul(ethPrice * 10).add(bonusCollectionAmount[msg.sender]) >= bonusThreshold && !bonusCollectionList[msg.sender]){\r\n            return amount.mul(ethPrice * 10).add(bonusToGive);\r\n        } else {\r\n            return amount.mul(ethPrice * 10);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Halts token sales - Only callable by owner\r\n     */\r\n    function haltTokenSales(bool _status) public onlyOwner {\r\n        isHalted = _status;\r\n    }\r\n\r\n    /**\r\n     * Internal check to see if crowdsale is still ongoing.\r\n     * Defaults to return false unless within crowdsale timeframe.\r\n     */\r\n    function isCrowdSaleOngoing() internal view returns (bool ongoing) {\r\n        require(!isHalted, \"Sales halted.\");\r\n        require(block.timestamp >= startDate && block.timestamp <= endDate, \"Sales ended.\");\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Withdraws token from smart contract.\r\n     */\r\n    function withdrawTokens(uint256 amount) public onlyOwner {\r\n        token.distributeTokens(owner, amount);\r\n    }\r\n    \r\n    /**\r\n     * If somehow the chainlink oracle goes down... lets hope there is a saving grace somewhere.\r\n     */\r\n    function changeOracle(address newOracle) public onlyOwner {\r\n        oracle = AggregatorV3Interface(newOracle);\r\n    }\r\n\r\n    /**\r\n     * If someone sends some ERC20 tokens, we could withdraw and return them\r\n     * Full credits to KyberNetwork.\r\n     */\r\n    function emergencyERC20Drain(ERC20 _token, uint256 amount) public onlyOwner {\r\n        _token.transfer(owner, amount);\r\n    }\r\n\r\n    function emergencyETHDrain() public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TwistcodeAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusCollected\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonusCollectionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonusCollectionList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusToGive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"}],\"name\":\"calculateBonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"changeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyETHDrain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"haltTokenSales\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isHalted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBonusCollected\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TokenCrowdSale","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d3714b6159ba78de515ddb0732eb073087d4d86f0000000000000000000000000000000000000000000000000000000061564f800000000000000000000000000000000000000000000000000000000061cf997f0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8e8fec0fb7887827c6e0c02a44a7671894e1dbcd77016d729317d7d9fa19a7e6"}]}