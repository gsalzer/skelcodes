{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MoodyMonsterasVIPs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./OpenSeaSharedStorefrontIds.sol\\\";\\nimport \\\"./OpenSeaSharedStorefrontInterface.sol\\\";\\n\\nlibrary MoodyMonsterasVIPs {\\n  using SafeMath for uint256;\\n  using Counters for Counters.Counter;\\n\\n  address public constant OS_ADDRESS = 0x495f947276749Ce646f68AC8c248420045cb7b5e; // Mainnet\\n\\n\\n  function isVipToken(uint _tokenId) public pure returns (bool) {\\n    uint256[50] memory allVIPIds = OpenSeaSharedStorefrontIds.vipIds();\\n    bool isInVIPIds = false;\\n\\n    for (uint256 i = 0; i < allVIPIds.length; i++) {\\n      if (_tokenId == allVIPIds[i]) {\\n        isInVIPIds = true;\\n        break;\\n      }\\n    }\\n\\n    return isInVIPIds;\\n  }\\n\\n\\n  function vipIdsOwned(address _address) public view returns (uint256[] memory) {\\n\\n    OpenSeaSharedStorefrontInterface openSeaSharedStorefront = OpenSeaSharedStorefrontInterface(OS_ADDRESS);\\n\\n    address[] memory senderAddressArray = new address[](50);\\n    uint256[] memory allVIPIdsArray = new uint256[](50);\\n    uint256[50] memory allVIPIds = OpenSeaSharedStorefrontIds.vipIds();\\n\\n    for (uint256 i = 0; i < allVIPIds.length; i++) {\\n      senderAddressArray[i] = _address;\\n      allVIPIdsArray[i] = allVIPIds[i];\\n    }\\n\\n    uint256[] memory balanceOfResult = openSeaSharedStorefront.balanceOfBatch(senderAddressArray, allVIPIdsArray);\\n    uint256[] memory ownedVIPIds = new uint256[](balanceOfResult.length);\\n    uint ownedVIPCounter = 0;\\n\\n    for (uint256 i = 0; i < balanceOfResult.length; i++) {\\n      if (balanceOfResult[i] == 1) {\\n        ownedVIPIds[ownedVIPCounter] = allVIPIds[i];\\n        ownedVIPCounter += 1;\\n      }\\n    }\\n\\n    uint256[] memory ownedVIPIdsTrimmed = new uint256[](ownedVIPCounter);\\n\\n    for (uint256 i = 0; i < ownedVIPCounter; i++) {\\n      ownedVIPIdsTrimmed[i] = ownedVIPIds[i];\\n    }\\n\\n    return ownedVIPIdsTrimmed;\\n  }\\n\\n\\n  function vipIdsClaimable(address _address, mapping (uint256 => uint256) storage _idsUsed) public view returns (uint256[] memory) {\\n\\n    uint256[] memory ownedVIPIds = vipIdsOwned(_address);\\n    uint256[] memory claimableVIPIds = new uint256[](ownedVIPIds.length);\\n    uint claimableVIPCounter = 0;\\n\\n    for (uint256 i = 0; i < ownedVIPIds.length; i++) {\\n      if (_idsUsed[ownedVIPIds[i]] == 0) {\\n        claimableVIPIds[claimableVIPCounter] = ownedVIPIds[i];\\n        claimableVIPCounter += 1;\\n      }\\n    }\\n\\n    uint256[] memory claimableVIPIdsTrimmed = new uint256[](claimableVIPCounter);\\n\\n    for (uint256 i = 0; i < claimableVIPCounter; i++) {\\n      claimableVIPIdsTrimmed[i] = claimableVIPIds[i];\\n    }\\n\\n    return claimableVIPIdsTrimmed;\\n  }\\n\\n\\n  function ownsToken(address _address, uint _tokenId) public view returns (bool) {\\n\\n    OpenSeaSharedStorefrontInterface openSeaSharedStorefront = OpenSeaSharedStorefrontInterface(OS_ADDRESS);\\n    return (openSeaSharedStorefront.balanceOf(_address, _tokenId) == 1);\\n  }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OpenSeaSharedStorefrontIds.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary OpenSeaSharedStorefrontIds {\\n\\n  function vipIds() public pure returns(uint256[50] memory) {\\n\\n  uint256[50] memory VIP_OS_IDS = [\\n    78763235517899702300642317908544281341520076745003203023483945953226286694401, // 1\\n    78763235517899702300642317908544281341520076745003203023483945954325798322177, // 2\\n    78763235517899702300642317908544281341520076745003203023483945955425309949953, // 3\\n    78763235517899702300642317908544281341520076745003203023483945956524821577729, // 4\\n    78763235517899702300642317908544281341520076745003203023483945957624333205505, // 5\\n    78763235517899702300642317908544281341520076745003203023483945958723844833281, // 6\\n    78763235517899702300642317908544281341520076745003203023483945959823356461057, // 7\\n    78763235517899702300642317908544281341520076745003203023483945960922868088833, // 8\\n    78763235517899702300642317908544281341520076745003203023483945962022379716609, // 9\\n    78763235517899702300642317908544281341520076745003203023483945963121891344385, // 10\\n    78763235517899702300642317908544281341520076745003203023483945964221402972161, // 11\\n    78763235517899702300642317908544281341520076745003203023483945965320914599937, // 12\\n    78763235517899702300642317908544281341520076745003203023483945966420426227713, // 13\\n    78763235517899702300642317908544281341520076745003203023483945967519937855489, // 14\\n    78763235517899702300642317908544281341520076745003203023483945968619449483265, // 15\\n    78763235517899702300642317908544281341520076745003203023483945969718961111041, // 16\\n    78763235517899702300642317908544281341520076745003203023483945970818472738817, // 17\\n    78763235517899702300642317908544281341520076745003203023483945971917984366593, // 18\\n    78763235517899702300642317908544281341520076745003203023483945973017495994369, // 19\\n    78763235517899702300642317908544281341520076745003203023483945974117007622145, // 20\\n    78763235517899702300642317908544281341520076745003203023483945975216519249921, // 21\\n    78763235517899702300642317908544281341520076745003203023483945976316030877697, // 22\\n    78763235517899702300642317908544281341520076745003203023483945977415542505473, // 23\\n    78763235517899702300642317908544281341520076745003203023483945978515054133249, // 24\\n    78763235517899702300642317908544281341520076745003203023483945979614565761025, // 25\\n    78763235517899702300642317908544281341520076745003203023483945980714077388801, // 26\\n    78763235517899702300642317908544281341520076745003203023483945981813589016577, // 27\\n    78763235517899702300642317908544281341520076745003203023483945982913100644353, // 28\\n    78763235517899702300642317908544281341520076745003203023483945984012612272129, // 29\\n    78763235517899702300642317908544281341520076745003203023483945985112123899905, // 30\\n    78763235517899702300642317908544281341520076745003203023483945986211635527681, // 31\\n    78763235517899702300642317908544281341520076745003203023483945987311147155457, // 32\\n    78763235517899702300642317908544281341520076745003203023483945988410658783233, // 33\\n    78763235517899702300642317908544281341520076745003203023483945989510170411009, // 34\\n    78763235517899702300642317908544281341520076745003203023483945990609682038785, // 35\\n    78763235517899702300642317908544281341520076745003203023483945991709193666561, // 36\\n    78763235517899702300642317908544281341520076745003203023483945992808705294337, // 37\\n    78763235517899702300642317908544281341520076745003203023483945993908216922113, // 38\\n    78763235517899702300642317908544281341520076745003203023483945995007728549889, // 39\\n    78763235517899702300642317908544281341520076745003203023483945996107240177665, // 40\\n    78763235517899702300642317908544281341520076745003203023483945997206751805441, // 41\\n    78763235517899702300642317908544281341520076745003203023483945998306263433217, // 42\\n    78763235517899702300642317908544281341520076745003203023483945999405775060993, // 43\\n    78763235517899702300642317908544281341520076745003203023483946000505286688769, // 44\\n    78763235517899702300642317908544281341520076745003203023483946001604798316545, // 45\\n    78763235517899702300642317908544281341520076745003203023483946002704309944321, // 46\\n    78763235517899702300642317908544281341520076745003203023483946003803821572097, // 47\\n    78763235517899702300642317908544281341520076745003203023483946004903333199873, // 48\\n    78763235517899702300642317908544281341520076745003203023483946006002844827649, // 49\\n    78763235517899702300642317908544281341520076745003203023483946007102356455425  // 50\\n  ];\\n\\n  return VIP_OS_IDS;\\n\\n  }\\n}\"\r\n    },\r\n    \"contracts/OpenSeaSharedStorefrontInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract OpenSeaSharedStorefrontInterface {\\n  function balanceOf(address _owner, uint256 _id) external view returns (uint256){}\\n  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory){}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/OpenSeaSharedStorefrontIds.sol\": {\r\n        \"OpenSeaSharedStorefrontIds\": \"0xdce3d74292a6b424c99bf86d0cde7f3e6230a1ef\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"OS_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isVipToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownsToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"vipIdsOwned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MoodyMonsterasVIPs","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}