{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/dao/QuadraticTimelockedDelegator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../utils/timelock/QuadraticTokenTimelock.sol\\\";\\n\\ninterface IVotingToken is IERC20 {\\n    function delegate(address delegatee) external;\\n}\\n\\n/// @title a timelock for tokens allowing for bulk delegation\\n/// @author Fei Protocol\\n/// @notice allows the timelocked tokens to be delegated by the beneficiary while locked\\ncontract QuadraticTimelockedDelegator is QuadraticTokenTimelock {\\n    /// @notice QuadraticTimelockedDelegator constructor\\n    /// @param _token the token address\\n    /// @param _beneficiary admin, and timelock beneficiary\\n    /// @param _duration duration of the token timelock window\\n    /// @param _cliff the seconds before first claim is allowed\\n    /// @param _clawbackAdmin the address which can trigger a clawback\\n    /// @param _startTime the unix epoch for starting timelock. Use 0 to start at deployment\\n    constructor(\\n        address _token,\\n        address _beneficiary,\\n        uint256 _duration,\\n        uint256 _cliff,\\n        address _clawbackAdmin,\\n        uint256 _startTime\\n    ) QuadraticTokenTimelock(_beneficiary, _duration, _token, _cliff, _clawbackAdmin, _startTime) {}\\n\\n    /// @notice accept beneficiary role over timelocked TRIBE\\n    function acceptBeneficiary() public override {\\n        _setBeneficiary(msg.sender);\\n    }\\n\\n    /// @notice delegate all held TRIBE to the `to` address\\n    function delegate(address to) public onlyBeneficiary {\\n        IVotingToken(address(lockedToken)).delegate(to);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/timelock/QuadraticTokenTimelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./TokenTimelock.sol\\\";\\n\\ncontract QuadraticTokenTimelock is TokenTimelock {\\n\\n    constructor (\\n        address _beneficiary,\\n        uint256 _duration,\\n        address _lockedToken,\\n        uint256 _cliffDuration,\\n        address _clawbackAdmin,\\n        uint256 _startTime\\n    ) TokenTimelock(\\n        _beneficiary, \\n        _duration, \\n        _cliffDuration,\\n        _lockedToken, \\n        _clawbackAdmin\\n    ) {\\n        if (_startTime != 0) {\\n            startTime = _startTime;\\n        }\\n    }\\n\\n    function _proportionAvailable(\\n        uint256 initialBalance,\\n        uint256 elapsed,\\n        uint256 duration\\n    ) internal pure override returns (uint256) {\\n        return initialBalance * elapsed * elapsed / duration / duration;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/timelock/TokenTimelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\n// Inspired by OpenZeppelin TokenTimelock contract\\n// Reference: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/TokenTimelock.sol\\n\\nimport \\\"../Timed.sol\\\";\\nimport \\\"./ITokenTimelock.sol\\\";\\n\\nabstract contract TokenTimelock is ITokenTimelock, Timed {\\n\\n    /// @notice ERC20 basic token contract being held in timelock\\n    IERC20 public override lockedToken;\\n\\n    /// @notice beneficiary of tokens after they are released\\n    address public override beneficiary;\\n\\n    /// @notice pending beneficiary appointed by current beneficiary\\n    address public override pendingBeneficiary;\\n\\n    /// @notice initial balance of lockedToken\\n    uint256 public override initialBalance;\\n\\n    uint256 internal lastBalance;\\n\\n    /// @notice number of seconds before releasing is allowed\\n    uint256 public immutable cliffSeconds;\\n\\n    address public immutable clawbackAdmin;\\n\\n    constructor(\\n        address _beneficiary,\\n        uint256 _duration,\\n        uint256 _cliffSeconds,\\n        address _lockedToken,\\n        address _clawbackAdmin\\n    ) Timed(_duration) {\\n        require(_duration != 0, \\\"TokenTimelock: duration is 0\\\");\\n        require(\\n            _beneficiary != address(0),\\n            \\\"TokenTimelock: Beneficiary must not be 0 address\\\"\\n        );\\n\\n        beneficiary = _beneficiary;\\n        _initTimed();\\n\\n        _setLockedToken(_lockedToken);\\n\\n        cliffSeconds = _cliffSeconds;\\n\\n        clawbackAdmin = _clawbackAdmin;\\n    }\\n\\n    // Prevents incoming LP tokens from messing up calculations\\n    modifier balanceCheck() {\\n        if (totalToken() > lastBalance) {\\n            uint256 delta = totalToken() - lastBalance;\\n            initialBalance = initialBalance + delta;\\n        }\\n        _;\\n        lastBalance = totalToken();\\n    }\\n\\n    modifier onlyBeneficiary() {\\n        require(\\n            msg.sender == beneficiary,\\n            \\\"TokenTimelock: Caller is not a beneficiary\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice releases `amount` unlocked tokens to address `to`\\n    function release(address to, uint256 amount) external override onlyBeneficiary balanceCheck {\\n        require(amount != 0, \\\"TokenTimelock: no amount desired\\\");\\n        require(passedCliff(), \\\"TokenTimelock: Cliff not passed\\\");\\n\\n        uint256 available = availableForRelease();\\n        require(amount <= available, \\\"TokenTimelock: not enough released tokens\\\");\\n\\n        _release(to, amount);\\n    }\\n\\n    /// @notice releases maximum unlocked tokens to address `to`\\n    function releaseMax(address to) external override onlyBeneficiary balanceCheck {\\n        require(passedCliff(), \\\"TokenTimelock: Cliff not passed\\\");\\n        _release(to, availableForRelease());\\n    }\\n\\n    /// @notice the total amount of tokens held by timelock\\n    function totalToken() public view override virtual returns (uint256) {\\n        return lockedToken.balanceOf(address(this));\\n    }\\n\\n    /// @notice amount of tokens released to beneficiary\\n    function alreadyReleasedAmount() public view override returns (uint256) {\\n        return initialBalance - totalToken();\\n    }\\n\\n    /// @notice amount of held tokens unlocked and available for release\\n    function availableForRelease() public view override returns (uint256) {\\n        uint256 elapsed = timeSinceStart();\\n\\n        uint256 totalAvailable = _proportionAvailable(initialBalance, elapsed, duration);\\n        uint256 netAvailable = totalAvailable - alreadyReleasedAmount();\\n        return netAvailable;\\n    }\\n\\n    /// @notice current beneficiary can appoint new beneficiary, which must be accepted\\n    function setPendingBeneficiary(address _pendingBeneficiary)\\n        public\\n        override\\n        onlyBeneficiary\\n    {\\n        pendingBeneficiary = _pendingBeneficiary;\\n        emit PendingBeneficiaryUpdate(_pendingBeneficiary);\\n    }\\n\\n    /// @notice pending beneficiary accepts new beneficiary\\n    function acceptBeneficiary() public override virtual {\\n        _setBeneficiary(msg.sender);\\n    }\\n\\n    function clawback() public balanceCheck {\\n        require(msg.sender == clawbackAdmin, \\\"TokenTimelock: Only clawbackAdmin\\\");\\n        if (passedCliff()) {\\n            _release(beneficiary, availableForRelease());\\n        }\\n        _release(clawbackAdmin, totalToken());\\n    }\\n\\n    function passedCliff() public view returns (bool) {\\n        return timeSinceStart() >= cliffSeconds;\\n    }\\n\\n    function _proportionAvailable(uint256 initialBalance, uint256 elapsed, uint256 duration) internal pure virtual returns (uint256);\\n\\n    function _setBeneficiary(address newBeneficiary) internal {\\n        require(\\n            newBeneficiary == pendingBeneficiary,\\n            \\\"TokenTimelock: Caller is not pending beneficiary\\\"\\n        );\\n        beneficiary = newBeneficiary;\\n        emit BeneficiaryUpdate(newBeneficiary);\\n        pendingBeneficiary = address(0);\\n    }\\n\\n    function _setLockedToken(address tokenAddress) internal {\\n        lockedToken = IERC20(tokenAddress);\\n    }\\n\\n    function _release(address to, uint256 amount) internal {\\n        lockedToken.transfer(to, amount);\\n        emit Release(beneficiary, to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/Timed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\n/// @title an abstract contract for timed events\\n/// @author Fei Protocol\\nabstract contract Timed {\\n\\n    /// @notice the start timestamp of the timed period\\n    uint256 public startTime;\\n\\n    /// @notice the duration of the timed period\\n    uint256 public duration;\\n\\n    event DurationUpdate(uint256 oldDuration, uint256 newDuration);\\n\\n    event TimerReset(uint256 startTime);\\n\\n    constructor(uint256 _duration) {\\n        _setDuration(_duration);\\n    }\\n\\n    modifier duringTime() {\\n        require(isTimeStarted(), \\\"Timed: time not started\\\");\\n        require(!isTimeEnded(), \\\"Timed: time ended\\\");\\n        _;\\n    }\\n\\n    modifier afterTime() {\\n        require(isTimeEnded(), \\\"Timed: time not ended\\\");\\n        _;\\n    }\\n\\n    /// @notice return true if time period has ended\\n    function isTimeEnded() public view returns (bool) {\\n        return remainingTime() == 0;\\n    }\\n\\n    /// @notice number of seconds remaining until time is up\\n    /// @return remaining\\n    function remainingTime() public view returns (uint256) {\\n        return duration - timeSinceStart(); // duration always >= timeSinceStart which is on [0,d]\\n    }\\n\\n    /// @notice number of seconds since contract was initialized\\n    /// @return timestamp\\n    /// @dev will be less than or equal to duration\\n    function timeSinceStart() public view returns (uint256) {\\n        if (!isTimeStarted()) {\\n            return 0; // uninitialized\\n        }\\n        uint256 _duration = duration;\\n        uint256 timePassed = block.timestamp - startTime; // block timestamp always >= startTime\\n        return timePassed > _duration ? _duration : timePassed;\\n    }\\n\\n    function isTimeStarted() public view returns (bool) {\\n        return startTime != 0;\\n    }\\n\\n    function _initTimed() internal {\\n        startTime = block.timestamp;\\n        \\n        emit TimerReset(block.timestamp);\\n    }\\n\\n    function _setDuration(uint256 newDuration) internal {\\n        require(newDuration != 0, \\\"Timed: zero duration\\\");\\n\\n        uint256 oldDuration = duration;\\n        duration = newDuration;\\n        emit DurationUpdate(oldDuration, newDuration);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/timelock/ITokenTimelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title TokenTimelock interface\\n/// @author Fei Protocol\\ninterface ITokenTimelock {\\n    // ----------- Events -----------\\n\\n    event Release(address indexed _beneficiary, address indexed _recipient, uint256 _amount);\\n    event BeneficiaryUpdate(address indexed _beneficiary);\\n    event PendingBeneficiaryUpdate(address indexed _pendingBeneficiary);\\n\\n    // ----------- State changing api -----------\\n\\n    function release(address to, uint256 amount) external;\\n\\n    function releaseMax(address to) external;\\n\\n    function setPendingBeneficiary(address _pendingBeneficiary) external;\\n\\n    function acceptBeneficiary() external;\\n\\n\\n    // ----------- Getters -----------\\n\\n    function lockedToken() external view returns (IERC20);\\n\\n    function beneficiary() external view returns (address);\\n\\n    function pendingBeneficiary() external view returns (address);\\n\\n    function initialBalance() external view returns (uint256);\\n\\n    function availableForRelease() external view returns (uint256);\\n\\n    function totalToken() external view returns(uint256);\\n\\n    function alreadyReleasedAmount() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_clawbackAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"DurationUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pendingBeneficiary\",\"type\":\"address\"}],\"name\":\"PendingBeneficiaryUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"TimerReset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alreadyReleasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableForRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clawback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clawbackAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliffSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTimeEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTimeStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passedCliff\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"releaseMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingBeneficiary\",\"type\":\"address\"}],\"name\":\"setPendingBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeSinceStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"QuadraticTimelockedDelegator","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c7283b66eb1eb5fb86327f08e1b5816b0720212b000000000000000000000000ead815d7fad76bf587ebbc27ce3c0212c3b256be000000000000000000000000000000000000000000000000000000000966018000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f8eed60","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://13382079bd665f55e416f11d2bf14fd78b37a1ee85e646bcd387f3facb5ae397"}]}