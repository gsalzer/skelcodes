{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/tokenStaking/FeeSharingSetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport {FeeSharingSystem} from \\\"./FeeSharingSystem.sol\\\";\\nimport {TokenDistributor} from \\\"./TokenDistributor.sol\\\";\\n\\nimport {IRewardConvertor} from \\\"../interfaces/IRewardConvertor.sol\\\";\\n\\n/**\\n * @title FeeSharingSetter\\n * @notice It receives LooksRare protocol fees and owns the FeeSharingSystem contract.\\n * It can plug to AMMs for converting all received currencies to WETH.\\n */\\ncontract FeeSharingSetter is ReentrancyGuard, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n\\n    // Operator role\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    // Min duration for each fee-sharing period (in blocks)\\n    uint256 public immutable MIN_REWARD_DURATION_IN_BLOCKS;\\n\\n    // Max duration for each fee-sharing period (in blocks)\\n    uint256 public immutable MAX_REWARD_DURATION_IN_BLOCKS;\\n\\n    IERC20 public immutable looksRareToken;\\n\\n    IERC20 public immutable rewardToken;\\n\\n    FeeSharingSystem public feeSharingSystem;\\n\\n    TokenDistributor public immutable tokenDistributor;\\n\\n    // Reward convertor (tool to convert other currencies to rewardToken)\\n    IRewardConvertor public rewardConvertor;\\n\\n    // Last reward block of distribution\\n    uint256 public lastRewardDistributionBlock;\\n\\n    // Next reward duration in blocks\\n    uint256 public nextRewardDurationInBlocks;\\n\\n    // Reward duration in blocks\\n    uint256 public rewardDurationInBlocks;\\n\\n    // Set of addresses that are staking only the fee sharing\\n    EnumerableSet.AddressSet private _feeStakingAddresses;\\n\\n    event ConversionToRewardToken(address indexed token, uint256 amountConverted, uint256 amountReceived);\\n    event FeeStakingAddressesAdded(address[] feeStakingAddresses);\\n    event FeeStakingAddressesRemoved(address[] feeStakingAddresses);\\n    event NewFeeSharingSystemOwner(address newOwner);\\n    event NewRewardDurationInBlocks(uint256 rewardDurationInBlocks);\\n    event NewRewardConvertor(address rewardConvertor);\\n\\n    /**\\n     * @notice Constructor\\n     * @param _feeSharingSystem address of the fee sharing system\\n     * @param _minRewardDurationInBlocks minimum reward duration in blocks\\n     * @param _maxRewardDurationInBlocks maximum reward duration in blocks\\n     * @param _rewardDurationInBlocks reward duration between two updates in blocks\\n     */\\n    constructor(\\n        address _feeSharingSystem,\\n        uint256 _minRewardDurationInBlocks,\\n        uint256 _maxRewardDurationInBlocks,\\n        uint256 _rewardDurationInBlocks\\n    ) {\\n        require(\\n            (_rewardDurationInBlocks <= _maxRewardDurationInBlocks) &&\\n                (_rewardDurationInBlocks >= _minRewardDurationInBlocks),\\n            \\\"Owner: Reward duration in blocks outside of range\\\"\\n        );\\n\\n        MIN_REWARD_DURATION_IN_BLOCKS = _minRewardDurationInBlocks;\\n        MAX_REWARD_DURATION_IN_BLOCKS = _maxRewardDurationInBlocks;\\n\\n        feeSharingSystem = FeeSharingSystem(_feeSharingSystem);\\n\\n        rewardToken = feeSharingSystem.rewardToken();\\n        looksRareToken = feeSharingSystem.looksRareToken();\\n        tokenDistributor = feeSharingSystem.tokenDistributor();\\n\\n        rewardDurationInBlocks = _rewardDurationInBlocks;\\n        nextRewardDurationInBlocks = _rewardDurationInBlocks;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Update the reward per block (in rewardToken)\\n     * @dev It automatically retrieves the number of pending WETH and adjusts\\n     * based on the balance of LOOKS in fee-staking addresses that exist in the set.\\n     */\\n    function updateRewards() external onlyRole(OPERATOR_ROLE) {\\n        if (lastRewardDistributionBlock > 0) {\\n            require(block.number > (rewardDurationInBlocks + lastRewardDistributionBlock), \\\"Reward: Too early to add\\\");\\n        }\\n\\n        // Adjust for this period\\n        if (rewardDurationInBlocks != nextRewardDurationInBlocks) {\\n            rewardDurationInBlocks = nextRewardDurationInBlocks;\\n        }\\n\\n        lastRewardDistributionBlock = block.number;\\n\\n        // Calculate the reward to distribute as the balance held by this address\\n        uint256 reward = rewardToken.balanceOf(address(this));\\n\\n        require(reward != 0, \\\"Reward: Nothing to distribute\\\");\\n\\n        // Check if there is any address eligible for fee-sharing only\\n        uint256 numberAddressesForFeeStaking = _feeStakingAddresses.length();\\n\\n        // If there are eligible addresses for fee-sharing only, calculate their shares\\n        if (numberAddressesForFeeStaking > 0) {\\n            uint256[] memory looksBalances = new uint256[](numberAddressesForFeeStaking);\\n            (uint256 totalAmountStaked, ) = tokenDistributor.userInfo(address(feeSharingSystem));\\n\\n            for (uint256 i = 0; i < numberAddressesForFeeStaking; i++) {\\n                uint256 looksBalance = looksRareToken.balanceOf(_feeStakingAddresses.at(i));\\n                totalAmountStaked += looksBalance;\\n                looksBalances[i] = looksBalance;\\n            }\\n\\n            // Only apply the logic if the totalAmountStaked > 0 (to prevent division by 0)\\n            if (totalAmountStaked > 0) {\\n                uint256 adjustedReward = reward;\\n\\n                for (uint256 i = 0; i < numberAddressesForFeeStaking; i++) {\\n                    uint256 amountToTransfer = (looksBalances[i] * reward) / totalAmountStaked;\\n                    if (amountToTransfer > 0) {\\n                        adjustedReward -= amountToTransfer;\\n                        rewardToken.safeTransfer(_feeStakingAddresses.at(i), amountToTransfer);\\n                    }\\n                }\\n\\n                // Adjust reward accordingly\\n                reward = adjustedReward;\\n            }\\n        }\\n\\n        // Transfer tokens to fee sharing system\\n        rewardToken.safeTransfer(address(feeSharingSystem), reward);\\n\\n        // Update rewards\\n        feeSharingSystem.updateRewards(reward, rewardDurationInBlocks);\\n    }\\n\\n    /**\\n     * @notice Convert currencies to reward token\\n     * @dev Function only usable only for whitelisted currencies (where no potential side effect)\\n     * @param token address of the token to sell\\n     * @param additionalData additional data (e.g., slippage)\\n     */\\n    function convertCurrencyToRewardToken(address token, bytes calldata additionalData)\\n        external\\n        nonReentrant\\n        onlyRole(OPERATOR_ROLE)\\n    {\\n        require(address(rewardConvertor) != address(0), \\\"Convert: RewardConvertor not set\\\");\\n        require(token != address(rewardToken), \\\"Convert: Cannot be reward token\\\");\\n\\n        uint256 amountToConvert = IERC20(token).balanceOf(address(this));\\n        require(amountToConvert != 0, \\\"Convert: Amount to convert must be > 0\\\");\\n\\n        // Adjust allowance for this transaction only\\n        IERC20(token).safeIncreaseAllowance(address(rewardConvertor), amountToConvert);\\n\\n        // Exchange token to reward token\\n        uint256 amountReceived = rewardConvertor.convert(token, address(rewardToken), amountToConvert, additionalData);\\n\\n        emit ConversionToRewardToken(token, amountToConvert, amountReceived);\\n    }\\n\\n    /**\\n     * @notice Add staking addresses\\n     * @param _stakingAddresses array of addresses eligible for fee-sharing only\\n     */\\n    function addFeeStakingAddresses(address[] calldata _stakingAddresses) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        for (uint256 i = 0; i < _stakingAddresses.length; i++) {\\n            require(!_feeStakingAddresses.contains(_stakingAddresses[i]), \\\"Owner: Address already registered\\\");\\n            _feeStakingAddresses.add(_stakingAddresses[i]);\\n        }\\n\\n        emit FeeStakingAddressesAdded(_stakingAddresses);\\n    }\\n\\n    /**\\n     * @notice Remove staking addresses\\n     * @param _stakingAddresses array of addresses eligible for fee-sharing only\\n     */\\n    function removeFeeStakingAddresses(address[] calldata _stakingAddresses) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        for (uint256 i = 0; i < _stakingAddresses.length; i++) {\\n            require(_feeStakingAddresses.contains(_stakingAddresses[i]), \\\"Owner: Address not registered\\\");\\n            _feeStakingAddresses.remove(_stakingAddresses[i]);\\n        }\\n\\n        emit FeeStakingAddressesRemoved(_stakingAddresses);\\n    }\\n\\n    /**\\n     * @notice Set new reward duration in blocks for next update\\n     * @param _newRewardDurationInBlocks number of blocks for new reward period\\n     */\\n    function setNewRewardDurationInBlocks(uint256 _newRewardDurationInBlocks) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            (_newRewardDurationInBlocks <= MAX_REWARD_DURATION_IN_BLOCKS) &&\\n                (_newRewardDurationInBlocks >= MIN_REWARD_DURATION_IN_BLOCKS),\\n            \\\"Owner: New reward duration in blocks outside of range\\\"\\n        );\\n\\n        nextRewardDurationInBlocks = _newRewardDurationInBlocks;\\n\\n        emit NewRewardDurationInBlocks(_newRewardDurationInBlocks);\\n    }\\n\\n    /**\\n     * @notice Set reward convertor contract\\n     * @param _rewardConvertor address of the reward convertor (set to null to deactivate)\\n     */\\n    function setRewardConvertor(address _rewardConvertor) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        rewardConvertor = IRewardConvertor(_rewardConvertor);\\n\\n        emit NewRewardConvertor(_rewardConvertor);\\n    }\\n\\n    /**\\n     * @notice Transfer ownership of fee sharing system\\n     * @param _newOwner address of the new owner\\n     */\\n    function transferOwnershipOfFeeSharingSystem(address _newOwner) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_newOwner != address(0), \\\"Owner: New owner cannot be null address\\\");\\n        feeSharingSystem.transferOwnership(_newOwner);\\n\\n        emit NewFeeSharingSystemOwner(_newOwner);\\n    }\\n\\n    /**\\n     * @notice See addresses eligible for fee-staking\\n     */\\n    function viewFeeStakingAddresses() external view returns (address[] memory) {\\n        uint256 length = _feeStakingAddresses.length();\\n\\n        address[] memory feeStakingAddresses = new address[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            feeStakingAddresses[i] = _feeStakingAddresses.at(i);\\n        }\\n\\n        return (feeStakingAddresses);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokenStaking/FeeSharingSystem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {TokenDistributor} from \\\"./TokenDistributor.sol\\\";\\n\\n/**\\n * @title FeeSharingSystem\\n * @notice It handles the distribution of fees using\\n * WETH along with the auto-compounding of LOOKS.\\n */\\ncontract FeeSharingSystem is ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 shares; // shares of token staked\\n        uint256 userRewardPerTokenPaid; // user reward per token paid\\n        uint256 rewards; // pending rewards\\n    }\\n\\n    // Precision factor for calculating rewards and exchange rate\\n    uint256 public constant PRECISION_FACTOR = 10**18;\\n\\n    IERC20 public immutable looksRareToken;\\n\\n    IERC20 public immutable rewardToken;\\n\\n    TokenDistributor public immutable tokenDistributor;\\n\\n    // Reward rate (block)\\n    uint256 public currentRewardPerBlock;\\n\\n    // Last reward adjustment block number\\n    uint256 public lastRewardAdjustment;\\n\\n    // Last update block for rewards\\n    uint256 public lastUpdateBlock;\\n\\n    // Current end block for the current reward period\\n    uint256 public periodEndBlock;\\n\\n    // Reward per token stored\\n    uint256 public rewardPerTokenStored;\\n\\n    // Total existing shares\\n    uint256 public totalShares;\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    event Deposit(address indexed user, uint256 amount, uint256 harvestedAmount);\\n    event Harvest(address indexed user, uint256 harvestedAmount);\\n    event NewRewardPeriod(uint256 numberBlocks, uint256 rewardPerBlock, uint256 reward);\\n    event Withdraw(address indexed user, uint256 amount, uint256 harvestedAmount);\\n\\n    /**\\n     * @notice Constructor\\n     * @param _looksRareToken address of the token staked (LOOKS)\\n     * @param _rewardToken address of the reward token\\n     * @param _tokenDistributor address of the token distributor contract\\n     */\\n    constructor(\\n        address _looksRareToken,\\n        address _rewardToken,\\n        address _tokenDistributor\\n    ) {\\n        rewardToken = IERC20(_rewardToken);\\n        looksRareToken = IERC20(_looksRareToken);\\n        tokenDistributor = TokenDistributor(_tokenDistributor);\\n    }\\n\\n    /**\\n     * @notice Deposit staked tokens (and collect reward tokens if requested)\\n     * @param amount amount to deposit (in LOOKS)\\n     * @param claimRewardToken whether to claim reward tokens\\n     * @dev There is a limit of 1 LOOKS per deposit to prevent potential manipulation of current shares\\n     */\\n    function deposit(uint256 amount, bool claimRewardToken) external nonReentrant {\\n        require(amount >= PRECISION_FACTOR, \\\"Deposit: Amount must be >= 1 LOOKS\\\");\\n\\n        // Auto compounds for everyone\\n        tokenDistributor.harvestAndCompound();\\n\\n        // Update reward for user\\n        _updateReward(msg.sender);\\n\\n        // Retrieve total amount staked by this contract\\n        (uint256 totalAmountStaked, ) = tokenDistributor.userInfo(address(this));\\n\\n        // Transfer LOOKS tokens to this address\\n        looksRareToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 currentShares;\\n\\n        // Calculate the number of shares to issue for the user\\n        if (totalShares != 0) {\\n            currentShares = (amount * totalShares) / totalAmountStaked;\\n            // This is a sanity check to prevent deposit for 0 shares\\n            require(currentShares != 0, \\\"Deposit: Fail\\\");\\n        } else {\\n            currentShares = amount;\\n        }\\n\\n        // Adjust internal shares\\n        userInfo[msg.sender].shares += currentShares;\\n        totalShares += currentShares;\\n\\n        uint256 pendingRewards;\\n\\n        if (claimRewardToken) {\\n            // Fetch pending rewards\\n            pendingRewards = userInfo[msg.sender].rewards;\\n\\n            if (pendingRewards > 0) {\\n                userInfo[msg.sender].rewards = 0;\\n                rewardToken.safeTransfer(msg.sender, pendingRewards);\\n            }\\n        }\\n\\n        // Verify LOOKS token allowance and adjust if necessary\\n        _checkAndAdjustLOOKSTokenAllowanceIfRequired(amount, address(tokenDistributor));\\n\\n        // Deposit user amount in the token distributor contract\\n        tokenDistributor.deposit(amount);\\n\\n        emit Deposit(msg.sender, amount, pendingRewards);\\n    }\\n\\n    /**\\n     * @notice Harvest reward tokens that are pending\\n     */\\n    function harvest() external nonReentrant {\\n        // Auto compounds for everyone\\n        tokenDistributor.harvestAndCompound();\\n\\n        // Update reward for user\\n        _updateReward(msg.sender);\\n\\n        // Retrieve pending rewards\\n        uint256 pendingRewards = userInfo[msg.sender].rewards;\\n\\n        // If pending rewards are null, revert\\n        require(pendingRewards > 0, \\\"Harvest: Pending rewards must be > 0\\\");\\n\\n        // Adjust user rewards and transfer\\n        userInfo[msg.sender].rewards = 0;\\n\\n        // Transfer reward token to sender\\n        rewardToken.safeTransfer(msg.sender, pendingRewards);\\n\\n        emit Harvest(msg.sender, pendingRewards);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked tokens (and collect reward tokens if requested)\\n     * @param shares shares to withdraw\\n     * @param claimRewardToken whether to claim reward tokens\\n     */\\n    function withdraw(uint256 shares, bool claimRewardToken) external nonReentrant {\\n        require(\\n            (shares > 0) && (shares <= userInfo[msg.sender].shares),\\n            \\\"Withdraw: Shares equal to 0 or larger than user shares\\\"\\n        );\\n\\n        _withdraw(shares, claimRewardToken);\\n    }\\n\\n    /**\\n     * @notice Withdraw all staked tokens (and collect reward tokens if requested)\\n     * @param claimRewardToken whether to claim reward tokens\\n     */\\n    function withdrawAll(bool claimRewardToken) external nonReentrant {\\n        _withdraw(userInfo[msg.sender].shares, claimRewardToken);\\n    }\\n\\n    /**\\n     * @notice Update the reward per block (in rewardToken)\\n     * @dev Only callable by owner. Owner is meant to be another smart contract.\\n     */\\n    function updateRewards(uint256 reward, uint256 rewardDurationInBlocks) external onlyOwner {\\n        // Adjust the current reward per block\\n        if (block.number >= periodEndBlock) {\\n            currentRewardPerBlock = reward / rewardDurationInBlocks;\\n        } else {\\n            currentRewardPerBlock =\\n                (reward + ((periodEndBlock - block.number) * currentRewardPerBlock)) /\\n                rewardDurationInBlocks;\\n        }\\n\\n        lastUpdateBlock = block.number;\\n        periodEndBlock = block.number + rewardDurationInBlocks;\\n\\n        emit NewRewardPeriod(rewardDurationInBlocks, currentRewardPerBlock, reward);\\n    }\\n\\n    /**\\n     * @notice Calculate pending rewards (WETH) for a user\\n     * @param user address of the user\\n     */\\n    function calculatePendingRewards(address user) external view returns (uint256) {\\n        return _calculatePendingRewards(user);\\n    }\\n\\n    /**\\n     * @notice Calculate value of LOOKS for a user given a number of shares owned\\n     * @param user address of the user\\n     */\\n    function calculateSharesValueInLOOKS(address user) external view returns (uint256) {\\n        // Retrieve amount staked\\n        (uint256 totalAmountStaked, ) = tokenDistributor.userInfo(address(this));\\n\\n        // Adjust for pending rewards\\n        totalAmountStaked += tokenDistributor.calculatePendingRewards(address(this));\\n\\n        // Return user pro-rata of total shares\\n        return userInfo[user].shares == 0 ? 0 : (totalAmountStaked * userInfo[user].shares) / totalShares;\\n    }\\n\\n    /**\\n     * @notice Calculate price of one share (in LOOKS token)\\n     * Share price is expressed times 1e18\\n     */\\n    function calculateSharePriceInLOOKS() external view returns (uint256) {\\n        (uint256 totalAmountStaked, ) = tokenDistributor.userInfo(address(this));\\n\\n        // Adjust for pending rewards\\n        totalAmountStaked += tokenDistributor.calculatePendingRewards(address(this));\\n\\n        return totalShares == 0 ? PRECISION_FACTOR : (totalAmountStaked * PRECISION_FACTOR) / (totalShares);\\n    }\\n\\n    /**\\n     * @notice Return last block where trading rewards were distributed\\n     */\\n    function lastRewardBlock() external view returns (uint256) {\\n        return _lastRewardBlock();\\n    }\\n\\n    /**\\n     * @notice Calculate pending rewards for a user\\n     * @param user address of the user\\n     */\\n    function _calculatePendingRewards(address user) internal view returns (uint256) {\\n        return\\n            ((userInfo[user].shares * (_rewardPerToken() - (userInfo[user].userRewardPerTokenPaid))) /\\n                PRECISION_FACTOR) + userInfo[user].rewards;\\n    }\\n\\n    /**\\n     * @notice Check current allowance and adjust if necessary\\n     * @param _amount amount to transfer\\n     * @param _to token to transfer\\n     */\\n    function _checkAndAdjustLOOKSTokenAllowanceIfRequired(uint256 _amount, address _to) internal {\\n        if (looksRareToken.allowance(address(this), _to) < _amount) {\\n            looksRareToken.approve(_to, type(uint256).max);\\n        }\\n    }\\n\\n    /**\\n     * @notice Return last block where rewards must be distributed\\n     */\\n    function _lastRewardBlock() internal view returns (uint256) {\\n        return block.number < periodEndBlock ? block.number : periodEndBlock;\\n    }\\n\\n    /**\\n     * @notice Return reward per token\\n     */\\n    function _rewardPerToken() internal view returns (uint256) {\\n        if (totalShares == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        return\\n            rewardPerTokenStored +\\n            ((_lastRewardBlock() - lastUpdateBlock) * (currentRewardPerBlock * PRECISION_FACTOR)) /\\n            totalShares;\\n    }\\n\\n    /**\\n     * @notice Update reward for a user account\\n     * @param _user address of the user\\n     */\\n    function _updateReward(address _user) internal {\\n        if (block.number != lastUpdateBlock) {\\n            rewardPerTokenStored = _rewardPerToken();\\n            lastUpdateBlock = _lastRewardBlock();\\n        }\\n\\n        userInfo[_user].rewards = _calculatePendingRewards(_user);\\n        userInfo[_user].userRewardPerTokenPaid = rewardPerTokenStored;\\n    }\\n\\n    /**\\n     * @notice Withdraw staked tokens (and collect reward tokens if requested)\\n     * @param shares shares to withdraw\\n     * @param claimRewardToken whether to claim reward tokens\\n     */\\n    function _withdraw(uint256 shares, bool claimRewardToken) internal {\\n        // Auto compounds for everyone\\n        tokenDistributor.harvestAndCompound();\\n\\n        // Update reward for user\\n        _updateReward(msg.sender);\\n\\n        // Retrieve total amount staked and calculated current amount (in LOOKS)\\n        (uint256 totalAmountStaked, ) = tokenDistributor.userInfo(address(this));\\n        uint256 currentAmount = (totalAmountStaked * shares) / totalShares;\\n\\n        userInfo[msg.sender].shares -= shares;\\n        totalShares -= shares;\\n\\n        // Withdraw amount equivalent in shares\\n        tokenDistributor.withdraw(currentAmount);\\n\\n        uint256 pendingRewards;\\n\\n        if (claimRewardToken) {\\n            // Fetch pending rewards\\n            pendingRewards = userInfo[msg.sender].rewards;\\n\\n            if (pendingRewards > 0) {\\n                userInfo[msg.sender].rewards = 0;\\n                rewardToken.safeTransfer(msg.sender, pendingRewards);\\n            }\\n        }\\n\\n        // Transfer LOOKS tokens to sender\\n        looksRareToken.safeTransfer(msg.sender, currentAmount);\\n\\n        emit Withdraw(msg.sender, currentAmount, pendingRewards);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokenStaking/TokenDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {ILooksRareToken} from \\\"../interfaces/ILooksRareToken.sol\\\";\\n\\n/**\\n * @title TokenDistributor\\n * @notice It handles the distribution of LOOKS token.\\n * It auto-adjusts block rewards over a set number of periods.\\n */\\ncontract TokenDistributor is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for ILooksRareToken;\\n\\n    struct StakingPeriod {\\n        uint256 rewardPerBlockForStaking;\\n        uint256 rewardPerBlockForOthers;\\n        uint256 periodLengthInBlock;\\n    }\\n\\n    struct UserInfo {\\n        uint256 amount; // Amount of staked tokens provided by user\\n        uint256 rewardDebt; // Reward debt\\n    }\\n\\n    // Precision factor for calculating rewards\\n    uint256 public constant PRECISION_FACTOR = 10**12;\\n\\n    ILooksRareToken public immutable looksRareToken;\\n\\n    address public immutable tokenSplitter;\\n\\n    // Number of reward periods\\n    uint256 public immutable NUMBER_PERIODS;\\n\\n    // Block number when rewards start\\n    uint256 public immutable START_BLOCK;\\n\\n    // Accumulated tokens per share\\n    uint256 public accTokenPerShare;\\n\\n    // Current phase for rewards\\n    uint256 public currentPhase;\\n\\n    // Block number when rewards end\\n    uint256 public endBlock;\\n\\n    // Block number of the last update\\n    uint256 public lastRewardBlock;\\n\\n    // Tokens distributed per block for other purposes (team + treasury + trading rewards)\\n    uint256 public rewardPerBlockForOthers;\\n\\n    // Tokens distributed per block for staking\\n    uint256 public rewardPerBlockForStaking;\\n\\n    // Total amount staked\\n    uint256 public totalAmountStaked;\\n\\n    mapping(uint256 => StakingPeriod) public stakingPeriod;\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    event Compound(address indexed user, uint256 harvestedAmount);\\n    event Deposit(address indexed user, uint256 amount, uint256 harvestedAmount);\\n    event NewRewardsPerBlock(\\n        uint256 indexed currentPhase,\\n        uint256 startBlock,\\n        uint256 rewardPerBlockForStaking,\\n        uint256 rewardPerBlockForOthers\\n    );\\n    event Withdraw(address indexed user, uint256 amount, uint256 harvestedAmount);\\n\\n    /**\\n     * @notice Constructor\\n     * @param _looksRareToken LOOKS token address\\n     * @param _tokenSplitter token splitter contract address (for team and trading rewards)\\n     * @param _startBlock start block for reward program\\n     * @param _rewardsPerBlockForStaking array of rewards per block for staking\\n     * @param _rewardsPerBlockForOthers array of rewards per block for other purposes (team + treasury + trading rewards)\\n     * @param _periodLengthesInBlocks array of period lengthes\\n     * @param _numberPeriods number of periods with different rewards/lengthes (e.g., if 3 changes --> 4 periods)\\n     */\\n    constructor(\\n        address _looksRareToken,\\n        address _tokenSplitter,\\n        uint256 _startBlock,\\n        uint256[] memory _rewardsPerBlockForStaking,\\n        uint256[] memory _rewardsPerBlockForOthers,\\n        uint256[] memory _periodLengthesInBlocks,\\n        uint256 _numberPeriods\\n    ) {\\n        require(\\n            (_periodLengthesInBlocks.length == _numberPeriods) &&\\n                (_rewardsPerBlockForStaking.length == _numberPeriods) &&\\n                (_rewardsPerBlockForStaking.length == _numberPeriods),\\n            \\\"Distributor: Lengthes must match numberPeriods\\\"\\n        );\\n\\n        // 1. Operational checks for supply\\n        uint256 nonCirculatingSupply = ILooksRareToken(_looksRareToken).SUPPLY_CAP() -\\n            ILooksRareToken(_looksRareToken).totalSupply();\\n\\n        uint256 amountTokensToBeMinted;\\n\\n        for (uint256 i = 0; i < _numberPeriods; i++) {\\n            amountTokensToBeMinted +=\\n                (_rewardsPerBlockForStaking[i] * _periodLengthesInBlocks[i]) +\\n                (_rewardsPerBlockForOthers[i] * _periodLengthesInBlocks[i]);\\n\\n            stakingPeriod[i] = StakingPeriod({\\n                rewardPerBlockForStaking: _rewardsPerBlockForStaking[i],\\n                rewardPerBlockForOthers: _rewardsPerBlockForOthers[i],\\n                periodLengthInBlock: _periodLengthesInBlocks[i]\\n            });\\n        }\\n\\n        require(amountTokensToBeMinted == nonCirculatingSupply, \\\"Distributor: Wrong reward parameters\\\");\\n\\n        // 2. Store values\\n        looksRareToken = ILooksRareToken(_looksRareToken);\\n        tokenSplitter = _tokenSplitter;\\n        rewardPerBlockForStaking = _rewardsPerBlockForStaking[0];\\n        rewardPerBlockForOthers = _rewardsPerBlockForOthers[0];\\n\\n        START_BLOCK = _startBlock;\\n        endBlock = _startBlock + _periodLengthesInBlocks[0];\\n\\n        NUMBER_PERIODS = _numberPeriods;\\n\\n        // Set the lastRewardBlock as the startBlock\\n        lastRewardBlock = _startBlock;\\n    }\\n\\n    /**\\n     * @notice Deposit staked tokens and compounds pending rewards\\n     * @param amount amount to deposit (in LOOKS)\\n     */\\n    function deposit(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"Deposit: Amount must be > 0\\\");\\n\\n        // Update pool information\\n        _updatePool();\\n\\n        // Transfer LOOKS tokens to this contract\\n        looksRareToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 pendingRewards;\\n\\n        // If not new deposit, calculate pending rewards (for auto-compounding)\\n        if (userInfo[msg.sender].amount > 0) {\\n            pendingRewards =\\n                ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\\n                userInfo[msg.sender].rewardDebt;\\n        }\\n\\n        // Adjust user information\\n        userInfo[msg.sender].amount += (amount + pendingRewards);\\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\\n\\n        // Increase totalAmountStaked\\n        totalAmountStaked += (amount + pendingRewards);\\n\\n        emit Deposit(msg.sender, amount, pendingRewards);\\n    }\\n\\n    /**\\n     * @notice Compound based on pending rewards\\n     */\\n    function harvestAndCompound() external nonReentrant {\\n        // Update pool information\\n        _updatePool();\\n\\n        // Calculate pending rewards\\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\\n            userInfo[msg.sender].rewardDebt;\\n\\n        // Return if no pending rewards\\n        if (pendingRewards == 0) {\\n            // It doesn't throw revertion (to help with the fee-sharing auto-compounding contract)\\n            return;\\n        }\\n\\n        // Adjust user amount for pending rewards\\n        userInfo[msg.sender].amount += pendingRewards;\\n\\n        // Adjust totalAmountStaked\\n        totalAmountStaked += pendingRewards;\\n\\n        // Recalculate reward debt based on new user amount\\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\\n\\n        emit Compound(msg.sender, pendingRewards);\\n    }\\n\\n    /**\\n     * @notice Update pool rewards\\n     */\\n    function updatePool() external nonReentrant {\\n        _updatePool();\\n    }\\n\\n    /**\\n     * @notice Withdraw staked tokens and compound pending rewards\\n     * @param amount amount to withdraw\\n     */\\n    function withdraw(uint256 amount) external nonReentrant {\\n        require(\\n            (userInfo[msg.sender].amount >= amount) && (amount > 0),\\n            \\\"Withdraw: Amount must be > 0 or lower than user balance\\\"\\n        );\\n\\n        // Update pool\\n        _updatePool();\\n\\n        // Calculate pending rewards\\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\\n            userInfo[msg.sender].rewardDebt;\\n\\n        // Adjust user information\\n        userInfo[msg.sender].amount = userInfo[msg.sender].amount + pendingRewards - amount;\\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\\n\\n        // Adjust total amount staked\\n        totalAmountStaked = totalAmountStaked + pendingRewards - amount;\\n\\n        // Transfer LOOKS tokens to the sender\\n        looksRareToken.safeTransfer(msg.sender, amount);\\n\\n        emit Withdraw(msg.sender, amount, pendingRewards);\\n    }\\n\\n    /**\\n     * @notice Withdraw all staked tokens and collect tokens\\n     */\\n    function withdrawAll() external nonReentrant {\\n        require(userInfo[msg.sender].amount > 0, \\\"Withdraw: Amount must be > 0\\\");\\n\\n        // Update pool\\n        _updatePool();\\n\\n        // Calculate pending rewards and amount to transfer (to the sender)\\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\\n            userInfo[msg.sender].rewardDebt;\\n\\n        uint256 amountToTransfer = userInfo[msg.sender].amount + pendingRewards;\\n\\n        // Adjust total amount staked\\n        totalAmountStaked = totalAmountStaked - userInfo[msg.sender].amount;\\n\\n        // Adjust user information\\n        userInfo[msg.sender].amount = 0;\\n        userInfo[msg.sender].rewardDebt = 0;\\n\\n        // Transfer LOOKS tokens to the sender\\n        looksRareToken.safeTransfer(msg.sender, amountToTransfer);\\n\\n        emit Withdraw(msg.sender, amountToTransfer, pendingRewards);\\n    }\\n\\n    /**\\n     * @notice Calculate pending rewards for a user\\n     * @param user address of the user\\n     * @return Pending rewards\\n     */\\n    function calculatePendingRewards(address user) external view returns (uint256) {\\n        if ((block.number > lastRewardBlock) && (totalAmountStaked != 0)) {\\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\n\\n            uint256 tokenRewardForStaking = multiplier * rewardPerBlockForStaking;\\n\\n            uint256 adjustedEndBlock = endBlock;\\n            uint256 adjustedCurrentPhase = currentPhase;\\n\\n            // Check whether to adjust multipliers and reward per block\\n            while ((block.number > adjustedEndBlock) && (adjustedCurrentPhase < (NUMBER_PERIODS - 1))) {\\n                // Update current phase\\n                adjustedCurrentPhase++;\\n\\n                // Update rewards per block\\n                uint256 adjustedRewardPerBlockForStaking = stakingPeriod[adjustedCurrentPhase].rewardPerBlockForStaking;\\n\\n                // Calculate adjusted block number\\n                uint256 previousEndBlock = adjustedEndBlock;\\n\\n                // Update end block\\n                adjustedEndBlock = previousEndBlock + stakingPeriod[adjustedCurrentPhase].periodLengthInBlock;\\n\\n                // Calculate new multiplier\\n                uint256 newMultiplier = (block.number <= adjustedEndBlock)\\n                    ? (block.number - previousEndBlock)\\n                    : stakingPeriod[adjustedCurrentPhase].periodLengthInBlock;\\n\\n                // Adjust token rewards for staking\\n                tokenRewardForStaking += (newMultiplier * adjustedRewardPerBlockForStaking);\\n            }\\n\\n            uint256 adjustedTokenPerShare = accTokenPerShare +\\n                (tokenRewardForStaking * PRECISION_FACTOR) /\\n                totalAmountStaked;\\n\\n            return (userInfo[user].amount * adjustedTokenPerShare) / PRECISION_FACTOR - userInfo[user].rewardDebt;\\n        } else {\\n            return (userInfo[user].amount * accTokenPerShare) / PRECISION_FACTOR - userInfo[user].rewardDebt;\\n        }\\n    }\\n\\n    /**\\n     * @notice Update reward variables of the pool\\n     */\\n    function _updatePool() internal {\\n        if (block.number <= lastRewardBlock) {\\n            return;\\n        }\\n\\n        if (totalAmountStaked == 0) {\\n            lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        // Calculate multiplier\\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\n\\n        // Calculate rewards for staking and others\\n        uint256 tokenRewardForStaking = multiplier * rewardPerBlockForStaking;\\n        uint256 tokenRewardForOthers = multiplier * rewardPerBlockForOthers;\\n\\n        // Check whether to adjust multipliers and reward per block\\n        while ((block.number > endBlock) && (currentPhase < (NUMBER_PERIODS - 1))) {\\n            // Update rewards per block\\n            _updateRewardsPerBlock(endBlock);\\n\\n            uint256 previousEndBlock = endBlock;\\n\\n            // Adjust the end block\\n            endBlock += stakingPeriod[currentPhase].periodLengthInBlock;\\n\\n            // Adjust multiplier to cover the missing periods with other lower inflation schedule\\n            uint256 newMultiplier = _getMultiplier(previousEndBlock, block.number);\\n\\n            // Adjust token rewards\\n            tokenRewardForStaking += (newMultiplier * rewardPerBlockForStaking);\\n            tokenRewardForOthers += (newMultiplier * rewardPerBlockForOthers);\\n        }\\n\\n        // Mint tokens only if token rewards for staking are not null\\n        if (tokenRewardForStaking > 0) {\\n            // It allows protection against potential issues to prevent funds from being locked\\n            bool mintStatus = looksRareToken.mint(address(this), tokenRewardForStaking);\\n            if (mintStatus) {\\n                accTokenPerShare = accTokenPerShare + ((tokenRewardForStaking * PRECISION_FACTOR) / totalAmountStaked);\\n            }\\n\\n            looksRareToken.mint(tokenSplitter, tokenRewardForOthers);\\n        }\\n\\n        // Update last reward block only if it wasn't updated after or at the end block\\n        if (lastRewardBlock <= endBlock) {\\n            lastRewardBlock = block.number;\\n        }\\n    }\\n\\n    /**\\n     * @notice Update rewards per block\\n     * @dev Rewards are halved by 2 (for staking + others)\\n     */\\n    function _updateRewardsPerBlock(uint256 _newStartBlock) internal {\\n        // Update current phase\\n        currentPhase++;\\n\\n        // Update rewards per block\\n        rewardPerBlockForStaking = stakingPeriod[currentPhase].rewardPerBlockForStaking;\\n        rewardPerBlockForOthers = stakingPeriod[currentPhase].rewardPerBlockForOthers;\\n\\n        emit NewRewardsPerBlock(currentPhase, _newStartBlock, rewardPerBlockForStaking, rewardPerBlockForOthers);\\n    }\\n\\n    /**\\n     * @notice Return reward multiplier over the given \\\"from\\\" to \\\"to\\\" block.\\n     * @param from block to start calculating reward\\n     * @param to block to finish calculating reward\\n     * @return the multiplier for the period\\n     */\\n    function _getMultiplier(uint256 from, uint256 to) internal view returns (uint256) {\\n        if (to <= endBlock) {\\n            return to - from;\\n        } else if (from >= endBlock) {\\n            return 0;\\n        } else {\\n            return endBlock - from;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardConvertor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRewardConvertor {\\n    function convert(\\n        address tokenToSell,\\n        address tokenToBuy,\\n        uint256 amount,\\n        bytes calldata additionalData\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILooksRareToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILooksRareToken is IERC20 {\\n    function SUPPLY_CAP() external view returns (uint256);\\n\\n    function mint(address account, uint256 amount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 888888\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeSharingSystem\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minRewardDurationInBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxRewardDurationInBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardDurationInBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountConverted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"ConversionToRewardToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"feeStakingAddresses\",\"type\":\"address[]\"}],\"name\":\"FeeStakingAddressesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"feeStakingAddresses\",\"type\":\"address[]\"}],\"name\":\"FeeStakingAddressesRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewFeeSharingSystemOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardConvertor\",\"type\":\"address\"}],\"name\":\"NewRewardConvertor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardDurationInBlocks\",\"type\":\"uint256\"}],\"name\":\"NewRewardDurationInBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REWARD_DURATION_IN_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_REWARD_DURATION_IN_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakingAddresses\",\"type\":\"address[]\"}],\"name\":\"addFeeStakingAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"additionalData\",\"type\":\"bytes\"}],\"name\":\"convertCurrencyToRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSharingSystem\",\"outputs\":[{\"internalType\":\"contract FeeSharingSystem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardDistributionBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"looksRareToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRewardDurationInBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakingAddresses\",\"type\":\"address[]\"}],\"name\":\"removeFeeStakingAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardConvertor\",\"outputs\":[{\"internalType\":\"contract IRewardConvertor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDurationInBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRewardDurationInBlocks\",\"type\":\"uint256\"}],\"name\":\"setNewRewardDurationInBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardConvertor\",\"type\":\"address\"}],\"name\":\"setRewardConvertor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipOfFeeSharingSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewFeeStakingAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FeeSharingSetter","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"888888","ConstructorArguments":"000000000000000000000000bcd7254a1d759efa08ec7c3291b2e85c5dcc12ce00000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000001964","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}