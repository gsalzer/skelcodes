{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/bear-trap/BearTrapWithTemperatureAugmentationMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC721 } from \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n\\ninterface IKey is IERC721 {\\n  function getBlockNumber(\\n    uint256 tokenId\\n  )\\n    external\\n    view\\n    returns (uint256);\\n}\\n\\n/**\\n * @title BearTrapWithTemperatureAugmentationMixin\\n * @author the-torn\\n */\\ncontract BearTrapWithTemperatureAugmentationMixin {\\n\\n  address public constant LAVA = 0x000000000000000000000000000000000000dEaD;\\n\\n  IERC721 public immutable BEAR_CONTRACT;\\n  IKey public immutable KEY_CONTRACT;\\n  uint256 public immutable TIME_AT_WHICH_WE_DROP_THE_BEAR_IN_THE_LAVA;\\n\\n  uint256 public _bearId = 0;\\n  bool public _bearSaved = false;\\n  mapping(uint256 => address) public _lockedKeyOwner;\\n\\n  constructor(\\n    IERC721 bearContract,\\n    IKey keyContract,\\n    uint256 ttd\\n  ) {\\n    BEAR_CONTRACT = bearContract;\\n    KEY_CONTRACT = keyContract;\\n    TIME_AT_WHICH_WE_DROP_THE_BEAR_IN_THE_LAVA = block.timestamp + ttd;\\n  }\\n\\n  function tieUpTheBear(\\n    uint256 bearId\\n  )\\n    external\\n  {\\n    require(\\n      _bearId == 0,\\n      \\\"Already trapped the bear\\\"\\n    );\\n    require(\\n      BEAR_CONTRACT.ownerOf(bearId) == address(this),\\n      \\\"Bear not received\\\"\\n    );\\n    _bearId = bearId;\\n  }\\n\\n  function saveBearWithKey(\\n    uint256 keyId\\n  )\\n    external\\n  {\\n    require(\\n      _bearId != 0,\\n      \\\"There is no bear\\\"\\n    );\\n    require(\\n      !_bearSaved,\\n      \\\"Bear already saved\\\"\\n    );\\n    uint256 keyNumber = KEY_CONTRACT.getBlockNumber(keyId);\\n    require(\\n      isValidKey(keyNumber),\\n      \\\"Invalid key\\\"\\n    );\\n    require(\\n      KEY_CONTRACT.ownerOf(keyId) == msg.sender,\\n      \\\"Sender does not have the key\\\"\\n    );\\n    _bearSaved = true;\\n    BEAR_CONTRACT.safeTransferFrom(address(this), msg.sender, _bearId);\\n  }\\n\\n  function dropTheBear()\\n    external\\n  {\\n    require(\\n      block.timestamp >= TIME_AT_WHICH_WE_DROP_THE_BEAR_IN_THE_LAVA,\\n      \\\"TTD has not elapsed\\\"\\n    );\\n    BEAR_CONTRACT.safeTransferFrom(address(this), LAVA, _bearId);\\n  }\\n\\n  function lockKey(\\n    uint256 keyId\\n  )\\n    external\\n  {\\n    uint256 keyNumber = KEY_CONTRACT.getBlockNumber(keyId);\\n    require(\\n      isValidKey(keyNumber),\\n      \\\"Invalid key\\\"\\n    );\\n    KEY_CONTRACT.safeTransferFrom(msg.sender, address(this), keyId);\\n    _lockedKeyOwner[keyId] = msg.sender;\\n  }\\n\\n  function retrievePreviouslyLockedKeyOnlyIfTheBearIsGone(\\n    uint256 keyId\\n  )\\n    external\\n  {\\n    require(\\n      BEAR_CONTRACT.ownerOf(_bearId) != address(this),\\n      \\\"Still got the bear\\\"\\n    );\\n    require(\\n      _lockedKeyOwner[keyId] == msg.sender,\\n      \\\"Not the sender's key\\\"\\n    );\\n    delete _lockedKeyOwner[keyId];\\n    KEY_CONTRACT.safeTransferFrom(address(this), msg.sender, keyId);\\n  }\\n\\n  function onERC721Received(\\n    address,\\n    address,\\n    uint256,\\n    bytes memory\\n  )\\n    external\\n    pure\\n    returns(bytes4)\\n  {\\n    return 0x150b7a02;\\n  }\\n\\n  function isValidKey(\\n    uint256 x\\n  )\\n    private\\n    view\\n    returns (bool)\\n  {\\n    uint256 z;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let p := mload(0x40)\\n      mstore(p, 0x20)\\n      mstore(add(p, 0x20), 0x20)\\n      mstore(add(p, 0x40), 0x20)\\n      mstore(add(p, 0x60), 0x02)\\n      mstore(add(p, 0x80), sub(x, 1))\\n      mstore(add(p, 0xa0), x)\\n      if iszero(staticcall(sub(gas(), 2000), 0x05, p, 0xc0, p, 0x20)) {\\n        revert(0, 0)\\n      }\\n      z := mload(p)\\n    }\\n    return z == 1;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"bearContract\",\"type\":\"address\"},{\"internalType\":\"contract IKey\",\"name\":\"keyContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ttd\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BEAR_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEY_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IKey\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAVA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_AT_WHICH_WE_DROP_THE_BEAR_IN_THE_LAVA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bearId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bearSaved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_lockedKeyOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropTheBear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"keyId\",\"type\":\"uint256\"}],\"name\":\"lockKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"keyId\",\"type\":\"uint256\"}],\"name\":\"retrievePreviouslyLockedKeyOnlyIfTheBearIsGone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"keyId\",\"type\":\"uint256\"}],\"name\":\"saveBearWithKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bearId\",\"type\":\"uint256\"}],\"name\":\"tieUpTheBear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BearTrapWithTemperatureAugmentationMixin","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c8bcbe0e8ae36d8f9238cd320ef6de88784b173400000000000000000000000092c02a905e41584e582bbfc5be1b2e9011b9dfaf00000000000000000000000000000000000000000000000000000000000927c0","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}