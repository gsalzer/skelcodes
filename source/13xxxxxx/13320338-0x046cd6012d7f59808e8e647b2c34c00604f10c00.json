{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"IBridgeAVM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/**\\r\\n * @title IBridgeAVM\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\ninterface IBridgeAVM {\\r\\n    function initialize(address l1Exchange, address l2Exchange, address l2Factory) external;\\r\\n    function receiveExchangeStaticVars(uint tradingFeeInvested) external;\\r\\n    function receiveExchangePlatformVars(uint marketID, uint dai, uint invested, uint platformFeeInvested) external;\\r\\n    function receiveExchangeTokenVars(uint marketID, uint[] calldata tokenIDs, string[] calldata names, uint[] calldata supplies, uint[] calldata dais, uint[] calldata investeds) external;\\r\\n    function setTokenVars(uint marketID, uint[] calldata tokenID) external;\\r\\n    function receiveIdeaTokenTransfer(uint marketID, uint tokenID, uint amount, address to) external;\\r\\n}\"},\"IdeaTokenExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IIdeaTokenExchange.sol\\\";\\r\\nimport \\\"./IIdeaToken.sol\\\";\\r\\nimport \\\"./IIdeaTokenFactory.sol\\\";\\r\\nimport \\\"./IInterestManager.sol\\\";\\r\\nimport \\\"./Initializable.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IdeaTokenExchange\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * Exchanges Dai \\u003c-\\u003e IdeaTokens using a bonding curve. Sits behind a proxy\\r\\n */\\r\\ncontract IdeaTokenExchange is IIdeaTokenExchange, Initializable, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // Stored for every IdeaToken and market.\\r\\n    // Keeps track of the amount of invested dai in this token, and the amount of investment tokens (e.g. cDai).\\r\\n    struct ExchangeInfo {\\r\\n        // The amount of Dai collected by trading\\r\\n        uint dai;\\r\\n        // The amount of \\\"investment tokens\\\", e.g. cDai\\r\\n        uint invested; \\r\\n    }\\r\\n\\r\\n    uint constant FEE_SCALE = 10000;\\r\\n\\r\\n    // The address authorized to set token and platform owners.\\r\\n    // It is only allowed to change these when the current owner is not set (zero address).\\r\\n    // Using such an address allows an external program to make authorization calls without having to go through the timelock.\\r\\n    address _authorizer;\\r\\n\\r\\n    // The amount of \\\"investment tokens\\\" for the collected trading fee, e.g. cDai \\r\\n    uint _tradingFeeInvested; \\r\\n    // The address which receives the trading fee when withdrawTradingFee is called\\r\\n    address _tradingFeeRecipient;\\r\\n\\r\\n    // marketID =\\u003e owner. The owner of a platform.\\r\\n    // This address is allowed to withdraw platform fee.\\r\\n    // When allInterestToPlatform=true then this address can also withdraw the platform interest\\r\\n    mapping(uint =\\u003e address) _platformOwner;\\r\\n\\r\\n    // marketID =\\u003e amount. The amount of \\\"investment tokens\\\" for the collected platform fee, e.g. cDai\\r\\n    mapping(uint =\\u003e uint) _platformFeeInvested;\\r\\n    \\r\\n\\r\\n    // marketID =\\u003e ExchangeInfo. Stores ExchangeInfo structs for platforms\\r\\n    mapping(uint =\\u003e ExchangeInfo) _platformsExchangeInfo;\\r\\n\\r\\n    // IdeaToken address =\\u003e owner. The owner of an IdeaToken.\\r\\n    // This address is allowed to withdraw the interest for an IdeaToken\\r\\n    mapping(address =\\u003e address) _tokenOwner;\\r\\n    // IdeaToken address =\\u003e ExchangeInfo. Stores ExchangeInfo structs for IdeaTokens\\r\\n    mapping(address =\\u003e ExchangeInfo) _tokensExchangeInfo;\\r\\n\\r\\n    // IdeaTokenFactory contract\\r\\n    IIdeaTokenFactory _ideaTokenFactory;\\r\\n    // InterestManager contract\\r\\n    IInterestManager _interestManager;\\r\\n    // Dai contract\\r\\n    IERC20 _dai;\\r\\n\\r\\n    // IdeaToken address =\\u003e bool. Whether or not to disable all fee collection for a specific IdeaToken.\\r\\n    mapping(address =\\u003e bool) _tokenFeeKillswitch;\\r\\n\\r\\n    event NewTokenOwner(address ideaToken, address owner);\\r\\n    event NewPlatformOwner(uint marketID, address owner);\\r\\n\\r\\n    event InvestedState(uint marketID, address ideaToken, uint dai, uint daiInvested, uint tradingFeeInvested, uint platformFeeInvested, uint volume);\\r\\n    \\r\\n    event PlatformInterestRedeemed(uint marketID, uint investmentToken, uint daiRedeemed);\\r\\n    event TokenInterestRedeemed(address ideaToken, uint investmentToken, uint daiRedeemed);\\r\\n    event TradingFeeRedeemed(uint daiRedeemed);\\r\\n    event PlatformFeeRedeemed(uint marketID, uint daiRedeemed);\\r\\n    \\r\\n    /**\\r\\n     * Initializes the contract\\r\\n     *\\r\\n     * @param owner The owner of the contract\\r\\n     * @param tradingFeeRecipient The address of the recipient of the trading fee\\r\\n     * @param interestManager The address of the InterestManager\\r\\n     * @param dai The address of Dai\\r\\n     */\\r\\n    function initialize(address owner,\\r\\n                        address authorizer,\\r\\n                        address tradingFeeRecipient,\\r\\n                        address interestManager,\\r\\n                        address dai) external virtual initializer {\\r\\n        require(authorizer != address(0) \\u0026\\u0026\\r\\n                tradingFeeRecipient != address(0) \\u0026\\u0026\\r\\n                interestManager != address(0) \\u0026\\u0026\\r\\n                dai != address(0),\\r\\n                \\\"invalid-params\\\");\\r\\n\\r\\n        setOwnerInternal(owner); // Checks owner to be non-zero\\r\\n        _authorizer = authorizer;\\r\\n        _tradingFeeRecipient = tradingFeeRecipient;\\r\\n        _interestManager = IInterestManager(interestManager);\\r\\n        _dai = IERC20(dai);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Burns IdeaTokens in exchange for Dai\\r\\n     *\\r\\n     * @param ideaToken The IdeaToken to sell\\r\\n     * @param amount The amount of IdeaTokens to sell\\r\\n     * @param minPrice The minimum allowed price in Dai for selling `amount` IdeaTokens\\r\\n     * @param recipient The recipient of the redeemed Dai\\r\\n     */\\r\\n    function sellTokens(address ideaToken, uint amount, uint minPrice, address recipient) external virtual override {\\r\\n\\r\\n        MarketDetails memory marketDetails = _ideaTokenFactory.getMarketDetailsByTokenAddress(ideaToken);\\r\\n        require(marketDetails.exists, \\\"token-not-exist\\\");\\r\\n        uint marketID = marketDetails.id;\\r\\n\\r\\n        CostAndPriceAmounts memory amounts = getPricesForSellingTokens(marketDetails, IERC20(ideaToken).totalSupply(), amount, _tokenFeeKillswitch[ideaToken]);\\r\\n\\r\\n        require(amounts.total \\u003e= minPrice, \\\"below-min-price\\\");\\r\\n        require(IIdeaToken(ideaToken).balanceOf(msg.sender) \\u003e= amount, \\\"insufficient-tokens\\\");\\r\\n        \\r\\n        IIdeaToken(ideaToken).burn(msg.sender, amount);\\r\\n\\r\\n        _interestManager.accrueInterest();\\r\\n\\r\\n        ExchangeInfo storage exchangeInfo;\\r\\n        if(marketDetails.allInterestToPlatform) {\\r\\n            exchangeInfo = _platformsExchangeInfo[marketID];\\r\\n        } else {\\r\\n            exchangeInfo = _tokensExchangeInfo[ideaToken];\\r\\n        }\\r\\n\\r\\n        uint tradingFeeInvested;\\r\\n        uint platformFeeInvested;\\r\\n        uint invested;\\r\\n        uint dai;\\r\\n        {\\r\\n        uint totalRedeemed = _interestManager.redeem(address(this), amounts.total);\\r\\n        uint tradingFeeRedeemed = _interestManager.underlyingToInvestmentToken(amounts.tradingFee);\\r\\n        uint platformFeeRedeemed = _interestManager.underlyingToInvestmentToken(amounts.platformFee);\\r\\n\\r\\n        invested = exchangeInfo.invested.sub(totalRedeemed.add(tradingFeeRedeemed).add(platformFeeRedeemed));\\r\\n        exchangeInfo.invested = invested;\\r\\n        tradingFeeInvested = _tradingFeeInvested.add(tradingFeeRedeemed);\\r\\n        _tradingFeeInvested = tradingFeeInvested;\\r\\n        platformFeeInvested = _platformFeeInvested[marketID].add(platformFeeRedeemed);\\r\\n        _platformFeeInvested[marketID] = platformFeeInvested;\\r\\n        dai = exchangeInfo.dai.sub(amounts.raw);\\r\\n        exchangeInfo.dai = dai;\\r\\n        }\\r\\n\\r\\n        emit InvestedState(marketID, ideaToken, dai, invested, tradingFeeInvested, platformFeeInvested, amounts.raw);\\r\\n        require(_dai.transfer(recipient, amounts.total), \\\"dai-transfer\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Returns the price for selling IdeaTokens\\r\\n     *\\r\\n     * @param ideaToken The IdeaToken to sell\\r\\n     * @param amount The amount of IdeaTokens to sell\\r\\n     *\\r\\n     * @return The price in Dai for selling `amount` IdeaTokens\\r\\n     */\\r\\n    function getPriceForSellingTokens(address ideaToken, uint amount) external virtual view override returns (uint) {\\r\\n        MarketDetails memory marketDetails = _ideaTokenFactory.getMarketDetailsByTokenAddress(ideaToken);\\r\\n        return getPricesForSellingTokens(marketDetails, IERC20(ideaToken).totalSupply(), amount, _tokenFeeKillswitch[ideaToken]).total;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculates each price related to selling tokens\\r\\n     *\\r\\n     * @param marketDetails The market details\\r\\n     * @param supply The existing supply of the IdeaToken\\r\\n     * @param amount The amount of IdeaTokens to sell\\r\\n     *\\r\\n     * @return total cost, raw cost and trading fee\\r\\n     */\\r\\n    function getPricesForSellingTokens(MarketDetails memory marketDetails, uint supply, uint amount, bool feesDisabled) public virtual pure override returns (CostAndPriceAmounts memory) {\\r\\n        \\r\\n        uint rawPrice = getRawPriceForSellingTokens(marketDetails.baseCost,\\r\\n                                                    marketDetails.priceRise,\\r\\n                                                    marketDetails.hatchTokens,\\r\\n                                                    supply,\\r\\n                                                    amount);\\r\\n\\r\\n        uint tradingFee = 0;\\r\\n        uint platformFee = 0;\\r\\n\\r\\n        if(!feesDisabled) {\\r\\n            tradingFee = rawPrice.mul(marketDetails.tradingFeeRate).div(FEE_SCALE);\\r\\n            platformFee = rawPrice.mul(marketDetails.platformFeeRate).div(FEE_SCALE);\\r\\n        }   \\r\\n        \\r\\n        uint totalPrice = rawPrice.sub(tradingFee).sub(platformFee);\\r\\n\\r\\n        return CostAndPriceAmounts({\\r\\n            total: totalPrice,\\r\\n            raw: rawPrice,\\r\\n            tradingFee: tradingFee,\\r\\n            platformFee: platformFee\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the price for selling tokens without any fees applied\\r\\n     *\\r\\n     * @param baseCost The baseCost of the token\\r\\n     * @param priceRise The priceRise of the token\\r\\n     * @param hatchTokens The amount of hatch tokens\\r\\n     * @param supply The current total supply of the token\\r\\n     * @param amount The amount of IdeaTokens to sell\\r\\n     *\\r\\n     * @return The price selling `amount` IdeaTokens without any fees applied\\r\\n     */\\r\\n    function getRawPriceForSellingTokens(uint baseCost, uint priceRise, uint hatchTokens, uint supply, uint amount) internal virtual pure returns (uint) {\\r\\n\\r\\n        uint hatchPrice = 0;\\r\\n        uint updatedAmount = amount;\\r\\n        uint updatedSupply;\\r\\n\\r\\n        if(supply.sub(amount) \\u003c hatchTokens) {\\r\\n\\r\\n            if(supply \\u003c= hatchTokens) {\\r\\n                return baseCost.mul(amount).div(10**18);\\r\\n            }\\r\\n\\r\\n            // No SafeMath required because supply - amount \\u003c hatchTokens\\r\\n            uint tokensInHatch = hatchTokens - (supply - amount);\\r\\n            hatchPrice = baseCost.mul(tokensInHatch).div(10**18);\\r\\n            updatedAmount = amount.sub(tokensInHatch);\\r\\n            // No SafeMath required because supply \\u003e= hatchTokens\\r\\n            updatedSupply = supply - hatchTokens;\\r\\n        } else {\\r\\n            // No SafeMath required because supply \\u003e= hatchTokens\\r\\n            updatedSupply = supply - hatchTokens;\\r\\n        }\\r\\n\\r\\n        uint priceAtSupply = baseCost.add(priceRise.mul(updatedSupply).div(10**18));\\r\\n        uint priceAtSupplyMinusAmount = baseCost.add(priceRise.mul(updatedSupply.sub(updatedAmount)).div(10**18));\\r\\n        uint average = priceAtSupply.add(priceAtSupplyMinusAmount).div(2);\\r\\n    \\r\\n        return hatchPrice.add(average.mul(updatedAmount).div(10**18));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Mints IdeaTokens in exchange for Dai\\r\\n     *\\r\\n     * @param ideaToken The IdeaToken to buy\\r\\n     * @param amount The amount of IdeaTokens to buy\\r\\n     * @param fallbackAmount The fallback amount to buy in case the price changed\\r\\n     * @param cost The maximum allowed cost in Dai\\r\\n     * @param recipient The recipient of the bought IdeaTokens\\r\\n     */\\r\\n    function buyTokens(address ideaToken, uint amount, uint fallbackAmount, uint cost, address recipient) external virtual override {\\r\\n        MarketDetails memory marketDetails = _ideaTokenFactory.getMarketDetailsByTokenAddress(ideaToken);\\r\\n        require(marketDetails.exists, \\\"token-not-exist\\\");\\r\\n        uint marketID = marketDetails.id;\\r\\n\\r\\n        uint supply = IERC20(ideaToken).totalSupply();\\r\\n        bool feesDisabled = _tokenFeeKillswitch[ideaToken];\\r\\n        uint actualAmount = amount;\\r\\n\\r\\n        CostAndPriceAmounts memory amounts = getCostsForBuyingTokens(marketDetails, supply, actualAmount, feesDisabled);\\r\\n\\r\\n        if(amounts.total \\u003e cost) {\\r\\n            actualAmount = fallbackAmount;\\r\\n            amounts = getCostsForBuyingTokens(marketDetails, supply, actualAmount, feesDisabled);\\r\\n    \\r\\n            require(amounts.total \\u003c= cost, \\\"slippage\\\");\\r\\n        }\\r\\n\\r\\n        \\r\\n        require(_dai.allowance(msg.sender, address(this)) \\u003e= amounts.total, \\\"insufficient-allowance\\\");\\r\\n        require(_dai.transferFrom(msg.sender, address(_interestManager), amounts.total), \\\"dai-transfer\\\");\\r\\n        \\r\\n        _interestManager.accrueInterest();\\r\\n        _interestManager.invest(amounts.total);\\r\\n\\r\\n\\r\\n        ExchangeInfo storage exchangeInfo;\\r\\n        if(marketDetails.allInterestToPlatform) {\\r\\n            exchangeInfo = _platformsExchangeInfo[marketID];\\r\\n        } else {\\r\\n            exchangeInfo = _tokensExchangeInfo[ideaToken];\\r\\n        }\\r\\n\\r\\n        exchangeInfo.invested = exchangeInfo.invested.add(_interestManager.underlyingToInvestmentToken(amounts.raw));\\r\\n        uint tradingFeeInvested = _tradingFeeInvested.add(_interestManager.underlyingToInvestmentToken(amounts.tradingFee));\\r\\n        _tradingFeeInvested = tradingFeeInvested;\\r\\n        uint platformFeeInvested = _platformFeeInvested[marketID].add(_interestManager.underlyingToInvestmentToken(amounts.platformFee));\\r\\n        _platformFeeInvested[marketID] = platformFeeInvested;\\r\\n        exchangeInfo.dai = exchangeInfo.dai.add(amounts.raw);\\r\\n    \\r\\n        emit InvestedState(marketID, ideaToken, exchangeInfo.dai, exchangeInfo.invested, tradingFeeInvested, platformFeeInvested, amounts.total);\\r\\n        IIdeaToken(ideaToken).mint(recipient, actualAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the cost for buying IdeaTokens\\r\\n     *\\r\\n     * @param ideaToken The IdeaToken to buy\\r\\n     * @param amount The amount of IdeaTokens to buy\\r\\n     *\\r\\n     * @return The cost in Dai for buying `amount` IdeaTokens\\r\\n     */\\r\\n    function getCostForBuyingTokens(address ideaToken, uint amount) external virtual view override returns (uint) {\\r\\n        MarketDetails memory marketDetails = _ideaTokenFactory.getMarketDetailsByTokenAddress(ideaToken);\\r\\n\\r\\n        return getCostsForBuyingTokens(marketDetails, IERC20(ideaToken).totalSupply(), amount, _tokenFeeKillswitch[ideaToken]).total;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculates each cost related to buying tokens\\r\\n     *\\r\\n     * @param marketDetails The market details\\r\\n     * @param supply The existing supply of the IdeaToken\\r\\n     * @param amount The amount of IdeaTokens to buy\\r\\n     *\\r\\n     * @return total cost, raw cost, trading fee, platform fee\\r\\n     */\\r\\n    function getCostsForBuyingTokens(MarketDetails memory marketDetails, uint supply, uint amount, bool feesDisabled) public virtual pure override returns (CostAndPriceAmounts memory) {\\r\\n        uint rawCost = getRawCostForBuyingTokens(marketDetails.baseCost,\\r\\n                                                 marketDetails.priceRise,\\r\\n                                                 marketDetails.hatchTokens,\\r\\n                                                 supply,\\r\\n                                                 amount);\\r\\n\\r\\n        uint tradingFee = 0;\\r\\n        uint platformFee = 0;\\r\\n\\r\\n        if(!feesDisabled) {\\r\\n            tradingFee = rawCost.mul(marketDetails.tradingFeeRate).div(FEE_SCALE);\\r\\n            platformFee = rawCost.mul(marketDetails.platformFeeRate).div(FEE_SCALE);\\r\\n        }\\r\\n        \\r\\n        uint totalCost = rawCost.add(tradingFee).add(platformFee);\\r\\n\\r\\n        return CostAndPriceAmounts({\\r\\n            total: totalCost,\\r\\n            raw: rawCost,\\r\\n            tradingFee: tradingFee,\\r\\n            platformFee: platformFee\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the cost for buying tokens without any fees applied\\r\\n     *\\r\\n     * @param baseCost The baseCost of the token\\r\\n     * @param priceRise The priceRise of the token\\r\\n     * @param hatchTokens The amount of hatch tokens\\r\\n     * @param supply The current total supply of the token\\r\\n     * @param amount The amount of IdeaTokens to buy\\r\\n     *\\r\\n     * @return The cost buying `amount` IdeaTokens without any fees applied\\r\\n     */\\r\\n    function getRawCostForBuyingTokens(uint baseCost, uint priceRise, uint hatchTokens, uint supply, uint amount) internal virtual pure returns (uint) {\\r\\n\\r\\n        uint hatchCost = 0;\\r\\n        uint updatedAmount = amount;\\r\\n        uint updatedSupply;\\r\\n\\r\\n        if(supply \\u003c hatchTokens) {\\r\\n            // No SafeMath required because supply \\u003c hatchTokens\\r\\n            uint remainingHatchTokens = hatchTokens - supply;\\r\\n\\r\\n            if(amount \\u003c= remainingHatchTokens) {\\r\\n                return baseCost.mul(amount).div(10**18);\\r\\n            }\\r\\n\\r\\n            hatchCost = baseCost.mul(remainingHatchTokens).div(10**18);\\r\\n            updatedSupply = 0;\\r\\n            // No SafeMath required because remainingHatchTokens \\u003c amount\\r\\n            updatedAmount = amount - remainingHatchTokens;\\r\\n        } else {\\r\\n            // No SafeMath required because supply \\u003e= hatchTokens\\r\\n            updatedSupply = supply - hatchTokens;\\r\\n        }\\r\\n\\r\\n        uint priceAtSupply = baseCost.add(priceRise.mul(updatedSupply).div(10**18));\\r\\n        uint priceAtSupplyPlusAmount = baseCost.add(priceRise.mul(updatedSupply.add(updatedAmount)).div(10**18));\\r\\n        uint average = priceAtSupply.add(priceAtSupplyPlusAmount).div(2);\\r\\n\\r\\n        return hatchCost.add(average.mul(updatedAmount).div(10**18));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdraws available interest for a publisher\\r\\n     *\\r\\n     * @param token The token from which the generated interest is to be withdrawn\\r\\n     */\\r\\n    function withdrawTokenInterest(address token) external virtual override {\\r\\n        require(_tokenOwner[token] == msg.sender, \\\"not-authorized\\\");\\r\\n        _interestManager.accrueInterest();\\r\\n\\r\\n        uint interestPayable = getInterestPayable(token);\\r\\n        if(interestPayable == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        ExchangeInfo storage exchangeInfo = _tokensExchangeInfo[token];\\r\\n        exchangeInfo.invested = exchangeInfo.invested.sub(_interestManager.redeem(msg.sender, interestPayable));\\r\\n\\r\\n        emit TokenInterestRedeemed(token, exchangeInfo.invested, interestPayable);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the interest available to be paid out for a token\\r\\n     *\\r\\n     * @param token The token from which the generated interest is to be withdrawn\\r\\n     *\\r\\n     * @return The interest available to be paid out\\r\\n     */\\r\\n    function getInterestPayable(address token) public virtual view override returns (uint) {\\r\\n        ExchangeInfo storage exchangeInfo = _tokensExchangeInfo[token];\\r\\n        return _interestManager.investmentTokenToUnderlying(exchangeInfo.invested).sub(exchangeInfo.dai);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets an address as owner of a token, allowing the address to withdraw interest\\r\\n     *\\r\\n     * @param token The token for which to authorize an address\\r\\n     * @param owner The address to be set as owner\\r\\n     */\\r\\n    function setTokenOwner(address token, address owner) external virtual override {\\r\\n        address sender = msg.sender;\\r\\n        address current = _tokenOwner[token];\\r\\n\\r\\n        require((current == address(0) \\u0026\\u0026 (sender == _owner || sender == _authorizer)) ||\\r\\n                (current != address(0) \\u0026\\u0026 (sender == _owner || sender == current)),\\r\\n                \\\"not-authorized\\\");\\r\\n\\r\\n        _tokenOwner[token] = owner;\\r\\n\\r\\n        emit NewTokenOwner(token, owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdraws available interest for a platform\\r\\n     *\\r\\n     * @param marketID The market id from which the generated interest is to be withdrawn\\r\\n     */\\r\\n    function withdrawPlatformInterest(uint marketID) external virtual override {\\r\\n        address sender = msg.sender;\\r\\n\\r\\n        require(_platformOwner[marketID] == sender, \\\"not-authorized\\\");\\r\\n        _interestManager.accrueInterest();\\r\\n\\r\\n        uint platformInterestPayable = getPlatformInterestPayable(marketID);\\r\\n        if(platformInterestPayable == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        ExchangeInfo storage exchangeInfo = _platformsExchangeInfo[marketID];\\r\\n        exchangeInfo.invested = exchangeInfo.invested.sub(_interestManager.redeem(sender, platformInterestPayable));\\r\\n\\r\\n        emit PlatformInterestRedeemed(marketID, exchangeInfo.invested, platformInterestPayable);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the interest available to be paid out for a platform\\r\\n     *\\r\\n     * @param marketID The market id from which the generated interest is to be withdrawn\\r\\n     *\\r\\n     * @return The interest available to be paid out\\r\\n     */\\r\\n    function getPlatformInterestPayable(uint marketID) public virtual view override returns (uint) {\\r\\n        ExchangeInfo storage exchangeInfo = _platformsExchangeInfo[marketID];\\r\\n        return _interestManager.investmentTokenToUnderlying(exchangeInfo.invested).sub(exchangeInfo.dai);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdraws available platform fee\\r\\n     *\\r\\n     * @param marketID The market from which the generated platform fee is to be withdrawn\\r\\n     */\\r\\n    function withdrawPlatformFee(uint marketID) external virtual override {\\r\\n        address sender = msg.sender;\\r\\n    \\r\\n        require(_platformOwner[marketID] == sender, \\\"not-authorized\\\");\\r\\n        _interestManager.accrueInterest();\\r\\n\\r\\n        uint platformFeePayable = getPlatformFeePayable(marketID);\\r\\n        if(platformFeePayable == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        _platformFeeInvested[marketID] = 0;\\r\\n        _interestManager.redeem(sender, platformFeePayable);\\r\\n\\r\\n        emit PlatformFeeRedeemed(marketID, platformFeePayable);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the platform fee available to be paid out\\r\\n     *\\r\\n     * @param marketID The market from which the generated interest is to be withdrawn\\r\\n     *\\r\\n     * @return The platform fee available to be paid out\\r\\n     */\\r\\n    function getPlatformFeePayable(uint marketID) public virtual view override returns (uint) {\\r\\n        return _interestManager.investmentTokenToUnderlying(_platformFeeInvested[marketID]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Authorizes an address as owner of a platform/market, which is allowed to withdraw platform fee and platform interest\\r\\n     *\\r\\n     * @param marketID The market for which to authorize an address\\r\\n     * @param owner The address to be authorized\\r\\n     */\\r\\n    function setPlatformOwner(uint marketID, address owner) external virtual override {\\r\\n        address sender = msg.sender;\\r\\n        address current = _platformOwner[marketID];\\r\\n\\r\\n        require((current == address(0) \\u0026\\u0026 (sender == _owner || sender == _authorizer)) ||\\r\\n                (current != address(0) \\u0026\\u0026 (sender == _owner || sender == current)),\\r\\n                \\\"not-authorized\\\");\\r\\n        \\r\\n        _platformOwner[marketID] = owner;\\r\\n\\r\\n        emit NewPlatformOwner(marketID, owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdraws available trading fee\\r\\n     */\\r\\n    function withdrawTradingFee() external virtual override {\\r\\n\\r\\n        uint invested = _tradingFeeInvested;\\r\\n        if(invested == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        _interestManager.accrueInterest();\\r\\n\\r\\n        _tradingFeeInvested = 0;\\r\\n        uint redeem = _interestManager.investmentTokenToUnderlying(invested);\\r\\n        _interestManager.redeem(_tradingFeeRecipient, redeem);\\r\\n\\r\\n        emit TradingFeeRedeemed(redeem);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the trading fee available to be paid out\\r\\n     *\\r\\n     * @return The trading fee available to be paid out\\r\\n     */\\r\\n    function getTradingFeePayable() public virtual view override returns (uint) {\\r\\n        return _interestManager.investmentTokenToUnderlying(_tradingFeeInvested);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the authorizer address\\r\\n     *\\r\\n     * @param authorizer The new authorizer address\\r\\n     */\\r\\n    function setAuthorizer(address authorizer) external virtual override onlyOwner {\\r\\n        require(authorizer != address(0), \\\"invalid-params\\\");\\r\\n        _authorizer = authorizer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns whether or not fees are disabled for a specific IdeaToken\\r\\n     *\\r\\n     * @param ideaToken The IdeaToken\\r\\n     *\\r\\n     * @return Whether or not fees are disabled for a specific IdeaToken\\r\\n     */\\r\\n    function isTokenFeeDisabled(address ideaToken) external virtual view override returns (bool) {\\r\\n        return _tokenFeeKillswitch[ideaToken];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the fee killswitch for an IdeaToken\\r\\n     *\\r\\n     * @param ideaToken The IdeaToken\\r\\n     * @param set Whether or not to enable the killswitch\\r\\n     */\\r\\n    function setTokenFeeKillswitch(address ideaToken, bool set) external virtual override onlyOwner {\\r\\n        _tokenFeeKillswitch[ideaToken] = set;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the IdeaTokenFactory address. Only required once for deployment\\r\\n     *\\r\\n     * @param factory The address of the IdeaTokenFactory \\r\\n     */\\r\\n    function setIdeaTokenFactoryAddress(address factory) external virtual onlyOwner {\\r\\n        require(address(_ideaTokenFactory) == address(0));\\r\\n        _ideaTokenFactory = IIdeaTokenFactory(factory);\\r\\n    }\\r\\n}\"},\"IdeaTokenExchangeStateTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IIdeaTokenExchangeStateTransfer.sol\\\";\\r\\nimport \\\"./IdeaTokenExchange.sol\\\"; \\r\\nimport \\\"./IBridgeAVM.sol\\\";\\r\\nimport \\\"./IInbox.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IdeaTokenExchangeStateTransfer\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * Replaces the L1 IdeaTokenExchange logic for the state transfer to Arbitrum L2.\\r\\n * \\r\\n * This implementation will disable all state-altering methods and adds state transfer\\r\\n * methods which can be called by a transfer manager EOA. State transfer methods will call \\r\\n * Arbitrum\\u0027s Inbox contract to execute a transaction on L2.\\r\\n */\\r\\ncontract IdeaTokenExchangeStateTransfer is IdeaTokenExchange, IIdeaTokenExchangeStateTransfer {\\r\\n\\r\\n    uint __gapStateTransfer__;\\r\\n\\r\\n    // EOA which is allowed to manage the state transfer\\r\\n    address public _transferManager;\\r\\n    // Address of the BridgeAVM contract on L2\\r\\n    address public _l2Bridge;\\r\\n    // Address of Arbitrum\\u0027s Inbox contract on L1\\r\\n    IInbox public _l1Inbox;\\r\\n    // Switch to enable token transfers once the initial state transfer is complete\\r\\n    bool public _tokenTransferEnabled;\\r\\n\\r\\n    event StaticVarsTransferred();\\r\\n    event PlatformVarsTransferred(uint marketID);\\r\\n    event TokenVarsTransferred(uint marketID, uint tokenID);\\r\\n    event TokensTransferred(uint marketID, uint tokenID, address user, uint amount, address recipient);\\r\\n    event TokenTransferEnabled();\\r\\n\\r\\n    modifier onlyTransferManager {\\r\\n        require(msg.sender == _transferManager, \\\"only-transfer-manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Initializes the contract\\u0027s variables.\\r\\n     *\\r\\n     * @param transferManager EOA which is allowed to manage the state transfer\\r\\n     * @param l2Bridge Address of the BridgeAVM contract on L2\\r\\n     * @param l1Inbox Address of Arbitrum\\u0027s Inbox contract on L1\\r\\n     */\\r\\n    function initializeStateTransfer(address transferManager, address l2Bridge, address l1Inbox) external override {\\r\\n        require(_transferManager == address(0), \\\"already-init\\\");\\r\\n        require(transferManager != address(0) \\u0026\\u0026 l2Bridge != address(0) \\u0026\\u0026  l1Inbox != address(0), \\\"invalid-args\\\");\\r\\n\\r\\n        _transferManager = transferManager;\\r\\n        _l2Bridge = l2Bridge;\\r\\n        _l1Inbox = IInbox(l1Inbox);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Transfers _tradingFeeInvested to L2.\\r\\n     *\\r\\n     * @param l2GasPriceBid Gas price for the L2 tx\\r\\n     *\\r\\n     * @return L1 -\\u003e L2 tx ticket id\\r\\n     */\\r\\n    function transferStaticVars(uint gasLimit, uint maxSubmissionCost, uint l2GasPriceBid) external payable override onlyTransferManager returns (uint) {\\r\\n        address l2Bridge = _l2Bridge;\\r\\n        bytes4 selector = IBridgeAVM(l2Bridge).receiveExchangeStaticVars.selector;\\r\\n        bytes memory cdata = abi.encodeWithSelector(selector, _tradingFeeInvested);\\r\\n        \\r\\n        uint ticketID = sendL2TxInternal(l2Bridge, msg.sender, gasLimit, maxSubmissionCost, l2GasPriceBid, cdata);\\r\\n\\r\\n        emit StaticVarsTransferred();\\r\\n\\r\\n        return ticketID;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Transfers a market\\u0027s state to L2.\\r\\n     *\\r\\n     * @param marketID The ID of the market\\r\\n     * @param l2GasPriceBid Gas price for the L2 tx\\r\\n     *\\r\\n     * @return L1 -\\u003e L2 tx ticket id\\r\\n     */\\r\\n    function transferPlatformVars(uint marketID, uint gasLimit, uint maxSubmissionCost, uint l2GasPriceBid) external payable override onlyTransferManager returns (uint) {\\r\\n        MarketDetails memory marketDetails = _ideaTokenFactory.getMarketDetailsByID(marketID);\\r\\n        require(marketDetails.exists, \\\"not-exist\\\");\\r\\n\\r\\n        ExchangeInfo memory exchangeInfo = _platformsExchangeInfo[marketID];\\r\\n\\r\\n        address l2Bridge = _l2Bridge;\\r\\n        bytes4 selector = IBridgeAVM(l2Bridge).receiveExchangePlatformVars.selector;\\r\\n        bytes memory cdata = abi.encodeWithSelector(selector, marketID, exchangeInfo.dai, exchangeInfo.invested, _platformFeeInvested[marketID]);\\r\\n        \\r\\n        uint ticketID = sendL2TxInternal(l2Bridge, msg.sender, gasLimit, maxSubmissionCost, l2GasPriceBid, cdata);\\r\\n\\r\\n        emit PlatformVarsTransferred(marketID);\\r\\n\\r\\n        return ticketID;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Transfers token\\u0027s state to L2.\\r\\n     *\\r\\n     * @param marketID The ID of the tokens\\u0027 market\\r\\n     * @param tokenIDs The IDs of the tokens\\r\\n     * @param l2GasPriceBid Gas price for the L2 tx\\r\\n     *\\r\\n     * @return L1 -\\u003e L2 tx ticket id\\r\\n     */\\r\\n    function transferTokenVars(uint marketID, uint[] calldata tokenIDs, uint gasLimit, uint maxSubmissionCost, uint l2GasPriceBid) external payable override onlyTransferManager returns (uint) {\\r\\n        {\\r\\n        MarketDetails memory marketDetails = _ideaTokenFactory.getMarketDetailsByID(marketID);\\r\\n        require(marketDetails.exists, \\\"market-not-exist\\\");\\r\\n        }\\r\\n\\r\\n        (string[] memory names, uint[] memory supplies, uint[] memory dais, uint[] memory investeds) = makeTokenStateArraysInternal(marketID, tokenIDs);        \\r\\n\\r\\n        address l2Bridge = _l2Bridge;\\r\\n        bytes4 selector = IBridgeAVM(l2Bridge).receiveExchangeTokenVars.selector;\\r\\n        bytes memory cdata = abi.encodeWithSelector(selector, marketID, tokenIDs, names, supplies, dais, investeds);\\r\\n\\r\\n        return sendL2TxInternal(l2Bridge, msg.sender, gasLimit, maxSubmissionCost, l2GasPriceBid, cdata);\\r\\n    }\\r\\n\\r\\n    // Stack too deep\\r\\n    function makeTokenStateArraysInternal(uint marketID, uint[] memory tokenIDs) internal returns (string[] memory, uint[] memory, uint[] memory, uint[] memory) {\\r\\n        uint length = tokenIDs.length;\\r\\n        require(length \\u003e 0, \\\"length-0\\\");\\r\\n\\r\\n        string[] memory names = new string[](length);\\r\\n        uint[] memory supplies = new uint[](length);\\r\\n        uint[] memory dais = new uint[](length);\\r\\n        uint[] memory investeds = new uint[](length);\\r\\n\\r\\n        for(uint i = 0; i \\u003c length; i++) {\\r\\n\\r\\n            uint tokenID = tokenIDs[i];\\r\\n            {\\r\\n            TokenInfo memory tokenInfo = _ideaTokenFactory.getTokenInfo(marketID, tokenID);\\r\\n            require(tokenInfo.exists, \\\"token-not-exist\\\");\\r\\n\\r\\n            IIdeaToken ideaToken = tokenInfo.ideaToken;\\r\\n            ExchangeInfo memory exchangeInfo = _tokensExchangeInfo[address(ideaToken)];\\r\\n            \\r\\n            names[i] = tokenInfo.name;\\r\\n            supplies[i] = ideaToken.totalSupply();\\r\\n            dais[i] = exchangeInfo.dai;\\r\\n            investeds[i] = exchangeInfo.invested;\\r\\n            }\\r\\n\\r\\n            emit TokenVarsTransferred(marketID, tokenID);\\r\\n        }\\r\\n\\r\\n        return (names, supplies, dais, investeds);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Transfers an user\\u0027s IdeaTokens to L2.\\r\\n     *\\r\\n     * @param marketID The ID of the token\\u0027s market\\r\\n     * @param tokenID The ID of the token\\r\\n     * @param l2Recipient The address of the recipient on L2\\r\\n     * @param l2GasPriceBid Gas price for the L2 tx\\r\\n     *\\r\\n     * @return L1 -\\u003e L2 tx ticket id\\r\\n     */\\r\\n    function transferIdeaTokens(uint marketID, uint tokenID, address l2Recipient, uint gasLimit, uint maxSubmissionCost, uint l2GasPriceBid) external payable override returns (uint) {\\r\\n        \\r\\n        require(_tokenTransferEnabled, \\\"not-enabled\\\");\\r\\n        require(l2Recipient != address(0), \\\"zero-addr\\\");\\r\\n\\r\\n        TokenInfo memory tokenInfo = _ideaTokenFactory.getTokenInfo(marketID, tokenID);\\r\\n        require(tokenInfo.exists, \\\"not-exists\\\");\\r\\n\\r\\n        IIdeaToken ideaToken = tokenInfo.ideaToken;\\r\\n        uint balance = ideaToken.balanceOf(msg.sender);\\r\\n        require(balance \\u003e 0, \\\"no-balance\\\");\\r\\n\\r\\n        ideaToken.burn(msg.sender, balance);\\r\\n        \\r\\n        address l2Bridge = _l2Bridge;\\r\\n        bytes4 selector = IBridgeAVM(l2Bridge).receiveIdeaTokenTransfer.selector;\\r\\n        bytes memory cdata = abi.encodeWithSelector(selector, marketID, tokenID, balance, l2Recipient);\\r\\n        \\r\\n        uint ticketID = sendL2TxInternal(l2Bridge, l2Recipient, gasLimit, maxSubmissionCost, l2GasPriceBid, cdata);\\r\\n\\r\\n        emitTokensTransferredEventInternal(marketID, tokenID, balance, l2Recipient);\\r\\n    \\r\\n        return ticketID;\\r\\n    }\\r\\n\\r\\n    // Stack too deep\\r\\n    function emitTokensTransferredEventInternal(uint marketID, uint tokenID, uint balance, address l2Recipient) internal {\\r\\n        emit TokensTransferred(marketID, tokenID, msg.sender, balance, l2Recipient); \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Enables transferIdeaTokens to be called.\\r\\n     */\\r\\n    function setTokenTransferEnabled() external override onlyTransferManager {\\r\\n        _tokenTransferEnabled = true;\\r\\n\\r\\n        emit TokenTransferEnabled();\\r\\n    }\\r\\n\\r\\n    function sendL2TxInternal(address to, address refund, uint gasLimit, uint maxSubmissionCost, uint l2GasPriceBid, bytes memory cdata) internal returns (uint) {\\r\\n        require(gasLimit \\u003e 0 \\u0026\\u0026 maxSubmissionCost \\u003e 0 \\u0026\\u0026 l2GasPriceBid \\u003e 0, \\\"l2-gas\\\");\\r\\n        require(msg.value == maxSubmissionCost.add(gasLimit.mul(l2GasPriceBid)), \\\"value\\\");\\r\\n\\r\\n        return _l1Inbox.createRetryableTicket{value: msg.value}(\\r\\n            to,                     // L2 destination\\r\\n            0,                      // value\\r\\n            maxSubmissionCost,      // maxSubmissionCost\\r\\n            refund,                 // submission refund address\\r\\n            refund,                 // value refund address\\r\\n            gasLimit,               // max gas\\r\\n            l2GasPriceBid,          // gas price bid\\r\\n            cdata                   // L2 calldata\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* **********************************************\\r\\n     * ************  Disabled functions  ************\\r\\n     * ********************************************** \\r\\n     */\\r\\n\\r\\n    function initialize(address owner, address authorizer, address tradingFeeRecipient, address interestManager, address dai) external override {\\r\\n        owner; authorizer; tradingFeeRecipient; interestManager; dai;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function sellTokens(address ideaToken, uint amount, uint minPrice, address recipient) external override {\\r\\n        ideaToken; amount; minPrice; recipient;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function getPriceForSellingTokens(address ideaToken, uint amount) external view override returns (uint) {\\r\\n        ideaToken; amount;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function getPricesForSellingTokens(MarketDetails memory marketDetails, uint supply, uint amount, bool feesDisabled) public pure override returns (CostAndPriceAmounts memory) {\\r\\n        marketDetails; supply; amount; feesDisabled;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function getRawPriceForSellingTokens(uint baseCost, uint priceRise, uint hatchTokens, uint supply, uint amount) internal pure override returns (uint) {\\r\\n        baseCost; priceRise; hatchTokens; supply; amount;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function buyTokens(address ideaToken, uint amount, uint fallbackAmount, uint cost, address recipient) external override {\\r\\n        ideaToken; amount; fallbackAmount; cost; recipient;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function getCostForBuyingTokens(address ideaToken, uint amount) external view override returns (uint) {\\r\\n        ideaToken; amount;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function getCostsForBuyingTokens(MarketDetails memory marketDetails, uint supply, uint amount, bool feesDisabled) public pure override returns (CostAndPriceAmounts memory) {\\r\\n        marketDetails; supply; amount; feesDisabled;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function getRawCostForBuyingTokens(uint baseCost, uint priceRise, uint hatchTokens, uint supply, uint amount) internal pure override returns (uint) {\\r\\n        baseCost; priceRise; hatchTokens; supply; amount;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function withdrawTokenInterest(address token) external override {\\r\\n        token;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function getInterestPayable(address token) public view override returns (uint) {\\r\\n        token;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function setTokenOwner(address token, address owner) external virtual override {\\r\\n        token; owner;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function withdrawPlatformInterest(uint marketID) external override {\\r\\n        marketID;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function getPlatformInterestPayable(uint marketID) public view override returns (uint) {\\r\\n        marketID;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function withdrawPlatformFee(uint marketID) external override {\\r\\n        marketID;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function getPlatformFeePayable(uint marketID) public view override returns (uint) {\\r\\n        marketID;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function setPlatformOwner(uint marketID, address owner) external override {\\r\\n        marketID; owner;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function withdrawTradingFee() external override {\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function getTradingFeePayable() public view override returns (uint) {\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function setAuthorizer(address authorizer) external override {\\r\\n        authorizer;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function isTokenFeeDisabled(address ideaToken) external view override returns (bool) {\\r\\n        ideaToken;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function setTokenFeeKillswitch(address ideaToken, bool set) external override {\\r\\n        ideaToken; set;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n\\r\\n    function setIdeaTokenFactoryAddress(address factory) external override {\\r\\n        factory;\\r\\n        revert(\\\"x\\\");\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"IIdeaToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IIdeaToken\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\ninterface IIdeaToken is IERC20 {\\r\\n    function initialize(string calldata __name, address owner) external;\\r\\n    function mint(address account, uint256 amount) external;\\r\\n    function burn(address account, uint256 amount) external;\\r\\n}\"},\"IIdeaTokenExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IIdeaTokenFactory.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IIdeaTokenExchange\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\n\\r\\nstruct CostAndPriceAmounts {\\r\\n    uint total;\\r\\n    uint raw;\\r\\n    uint tradingFee;\\r\\n    uint platformFee;\\r\\n}\\r\\n\\r\\ninterface IIdeaTokenExchange {\\r\\n    function sellTokens(address ideaToken, uint amount, uint minPrice, address recipient) external;\\r\\n    function getPriceForSellingTokens(address ideaToken, uint amount) external view returns (uint);\\r\\n    function getPricesForSellingTokens(MarketDetails memory marketDetails, uint supply, uint amount, bool feesDisabled) external pure returns (CostAndPriceAmounts memory);\\r\\n    function buyTokens(address ideaToken, uint amount, uint fallbackAmount, uint cost, address recipient) external;\\r\\n    function getCostForBuyingTokens(address ideaToken, uint amount) external view returns (uint);\\r\\n    function getCostsForBuyingTokens(MarketDetails memory marketDetails, uint supply, uint amount, bool feesDisabled) external pure returns (CostAndPriceAmounts memory);\\r\\n    function setTokenOwner(address ideaToken, address owner) external;\\r\\n    function setPlatformOwner(uint marketID, address owner) external;\\r\\n    function withdrawTradingFee() external;\\r\\n    function withdrawTokenInterest(address token) external;\\r\\n    function withdrawPlatformInterest(uint marketID) external;\\r\\n    function withdrawPlatformFee(uint marketID) external;\\r\\n    function getInterestPayable(address token) external view returns (uint);\\r\\n    function getPlatformInterestPayable(uint marketID) external view returns (uint);\\r\\n    function getPlatformFeePayable(uint marketID) external view returns (uint);\\r\\n    function getTradingFeePayable() external view returns (uint);\\r\\n    function setAuthorizer(address authorizer) external;\\r\\n    function isTokenFeeDisabled(address ideaToken) external view returns (bool);\\r\\n    function setTokenFeeKillswitch(address ideaToken, bool set) external;\\r\\n}\"},\"IIdeaTokenExchangeStateTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title IIdeaTokenExchangeStateTransfer\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\ninterface IIdeaTokenExchangeStateTransfer {\\r\\n    function initializeStateTransfer(address transferManager, address l2InterestManager, address l1Inbox) external;\\r\\n    function transferStaticVars(uint gasLimit, uint maxSubmissionCost, uint l2GasPriceBid) external payable returns (uint);\\r\\n    function transferPlatformVars(uint marketID, uint gasLimit, uint maxSubmissionCost, uint l2GasPriceBid) external payable returns (uint);\\r\\n    function transferTokenVars(uint marketID, uint[] calldata tokenIDs, uint gasLimit, uint maxSubmissionCost, uint l2GasPriceBid) external payable returns (uint);\\r\\n    function transferIdeaTokens(uint marketID, uint tokenID, address l2Recipient, uint gasLimit, uint maxSubmissionCost, uint l2GasPriceBid) external payable returns (uint);\\r\\n    function setTokenTransferEnabled() external;\\r\\n}\\r\\n\\r\\n\"},\"IIdeaTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IIdeaToken.sol\\\";\\r\\nimport \\\"./IIdeaTokenNameVerifier.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IIdeaTokenFactory\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\n\\r\\nstruct IDPair {\\r\\n    bool exists;\\r\\n    uint marketID;\\r\\n    uint tokenID;\\r\\n}\\r\\n\\r\\nstruct TokenInfo {\\r\\n    bool exists;\\r\\n    uint id;\\r\\n    string name;\\r\\n    IIdeaToken ideaToken;\\r\\n}\\r\\n\\r\\nstruct MarketDetails {\\r\\n    bool exists;\\r\\n    uint id;\\r\\n    string name;\\r\\n\\r\\n    IIdeaTokenNameVerifier nameVerifier;\\r\\n    uint numTokens;\\r\\n\\r\\n    uint baseCost;\\r\\n    uint priceRise;\\r\\n    uint hatchTokens;\\r\\n    uint tradingFeeRate;\\r\\n    uint platformFeeRate;\\r\\n\\r\\n    bool allInterestToPlatform;\\r\\n}\\r\\n\\r\\ninterface IIdeaTokenFactory {\\r\\n    function addMarket(string calldata marketName, address nameVerifier,\\r\\n                       uint baseCost, uint priceRise, uint hatchTokens,\\r\\n                       uint tradingFeeRate, uint platformFeeRate, bool allInterestToPlatform) external;\\r\\n\\r\\n    function addToken(string calldata tokenName, uint marketID, address lister) external;\\r\\n\\r\\n    function isValidTokenName(string calldata tokenName, uint marketID) external view returns (bool);\\r\\n    function getMarketIDByName(string calldata marketName) external view returns (uint);\\r\\n    function getMarketDetailsByID(uint marketID) external view returns (MarketDetails memory);\\r\\n    function getMarketDetailsByName(string calldata marketName) external view returns (MarketDetails memory);\\r\\n    function getMarketDetailsByTokenAddress(address ideaToken) external view returns (MarketDetails memory);\\r\\n    function getNumMarkets() external view returns (uint);\\r\\n    function getTokenIDByName(string calldata tokenName, uint marketID) external view returns (uint);\\r\\n    function getTokenInfo(uint marketID, uint tokenID) external view returns (TokenInfo memory);\\r\\n    function getTokenIDPair(address token) external view returns (IDPair memory);\\r\\n    function setTradingFee(uint marketID, uint tradingFeeRate) external;\\r\\n    function setPlatformFee(uint marketID, uint platformFeeRate) external;\\r\\n    function setNameVerifier(uint marketID, address nameVerifier) external;\\r\\n}\"},\"IIdeaTokenNameVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title IIdeaTokenNameVerifier\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * Interface for token name verifiers\\r\\n */\\r\\ninterface IIdeaTokenNameVerifier {\\r\\n    function verifyTokenName(string calldata name) external pure returns (bool);\\r\\n}\"},\"IInbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// See https://github.com/OffchainLabs/arbitrum/blob/develop/packages/arb-bridge-eth/contracts/bridge/interfaces/IInbox.sol\\r\\n\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title IInbox\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\ninterface IInbox {\\r\\n    function createRetryableTicket(\\r\\n        address destAddr,\\r\\n        uint256 arbTxCallValue,\\r\\n        uint256 maxSubmissionCost,\\r\\n        address submissionRefundAddress,\\r\\n        address valueRefundAddress,\\r\\n        uint256 maxGas,\\r\\n        uint256 gasPriceBid,\\r\\n        bytes calldata data\\r\\n    ) external payable returns (uint256);\\r\\n}\"},\"IInterestManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title IInterestManager\\r\\n * @author Alexander Schlindwein\\r\\n */\\r\\ninterface IInterestManager {\\r\\n    function invest(uint amount) external returns (uint);\\r\\n    function redeem(address recipient, uint amount) external returns (uint);\\r\\n    function redeemInvestmentToken(address recipient, uint amount) external returns (uint);\\r\\n    function donateInterest(uint amount) external;\\r\\n    function redeemDonated(uint amount) external;\\r\\n    function accrueInterest() external;\\r\\n    function underlyingToInvestmentToken(uint underlyingAmount) external view returns (uint);\\r\\n    function investmentTokenToUnderlying(uint investmentTokenAmount) external view returns (uint);\\r\\n}\"},\"Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/contracts/Initializable.sol\\r\\n\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Initializable\\r\\n *\\r\\n * @dev Helper contract to support initializer functions. To use it, replace\\r\\n * the constructor with a function that has the `initializer` modifier.\\r\\n * WARNING: Unlike constructors, initializer functions must be manually\\r\\n * invoked. This applies both to deploying an Initializable contract, as well\\r\\n * as extending an Initializable contract via inheritance.\\r\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\r\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\r\\n * because this is not dealt with automatically as with constructors.\\r\\n */\\r\\ncontract Initializable {\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  bool private initialized;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to use in the initializer function of a contract.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    require(initializing || isConstructor() || !initialized, \\\"already-initialized\\\");\\r\\n\\r\\n    bool isTopLevelCall = !initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = true;\\r\\n      initialized = true;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Returns true if and only if the function is running in the constructor\\r\\n  function isConstructor() private view returns (bool) {\\r\\n    // extcodesize checks the size of the code stored in an address, and\\r\\n    // address returns the current address. Since the code is still not\\r\\n    // deployed when running a constructor, any checks on its code size will\\r\\n    // yield zero, making it an effective way to detect if a contract is\\r\\n    // under construction or not.\\r\\n    address self = address(this);\\r\\n    uint256 cs;\\r\\n    assembly { cs := extcodesize(self) }\\r\\n    return cs == 0;\\r\\n  }\\r\\n\\r\\n  // Reserved storage space to allow for layout changes in the future.\\r\\n  uint256[50] private ______gap;\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.9;\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @author Alexander Schlindwein\\r\\n *\\r\\n * @dev Implements only-owner functionality\\r\\n */\\r\\ncontract Ownable {\\r\\n\\r\\n    address _owner;\\r\\n\\r\\n    event OwnershipChanged(address oldOwner, address newOwner);\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        require(_owner == msg.sender, \\\"only-owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setOwner(address newOwner) external onlyOwner {\\r\\n        setOwnerInternal(newOwner);\\r\\n    }\\r\\n\\r\\n    function setOwnerInternal(address newOwner) internal {\\r\\n        require(newOwner != address(0), \\\"zero-addr\\\");\\r\\n\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n\\r\\n        emit OwnershipChanged(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    function getOwner() external view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        uint256 c = a + b;\\r\\n        if (c \\u003c a) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b \\u003e a) return (false, 0);\\r\\n        return (true, a - b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) return (true, 0);\\r\\n        uint256 c = a * b;\\r\\n        if (c / a != b) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a / b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a % b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) return 0;\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ideaToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiInvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFeeInvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFeeInvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"name\":\"InvestedState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewPlatformOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ideaToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewTokenOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiRedeemed\",\"type\":\"uint256\"}],\"name\":\"PlatformFeeRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiRedeemed\",\"type\":\"uint256\"}],\"name\":\"PlatformInterestRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"}],\"name\":\"PlatformVarsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StaticVarsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ideaToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiRedeemed\",\"type\":\"uint256\"}],\"name\":\"TokenInterestRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenTransferEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"TokenVarsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"TokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiRedeemed\",\"type\":\"uint256\"}],\"name\":\"TradingFeeRedeemed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_l1Inbox\",\"outputs\":[{\"internalType\":\"contract IInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_l2Bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenTransferEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ideaToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fallbackAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ideaToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getCostForBuyingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract IIdeaTokenNameVerifier\",\"name\":\"nameVerifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceRise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatchTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allInterestToPlatform\",\"type\":\"bool\"}],\"internalType\":\"struct MarketDetails\",\"name\":\"marketDetails\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"feesDisabled\",\"type\":\"bool\"}],\"name\":\"getCostsForBuyingTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"}],\"internalType\":\"struct CostAndPriceAmounts\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getInterestPayable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"}],\"name\":\"getPlatformFeePayable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"}],\"name\":\"getPlatformInterestPayable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ideaToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPriceForSellingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract IIdeaTokenNameVerifier\",\"name\":\"nameVerifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceRise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatchTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allInterestToPlatform\",\"type\":\"bool\"}],\"internalType\":\"struct MarketDetails\",\"name\":\"marketDetails\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"feesDisabled\",\"type\":\"bool\"}],\"name\":\"getPricesForSellingTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"}],\"internalType\":\"struct CostAndPriceAmounts\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradingFeePayable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dai\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l1Inbox\",\"type\":\"address\"}],\"name\":\"initializeStateTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ideaToken\",\"type\":\"address\"}],\"name\":\"isTokenFeeDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ideaToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sellTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"setIdeaTokenFactoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setPlatformOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ideaToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"setTokenFeeKillswitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTokenTransferEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"l2Recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2GasPriceBid\",\"type\":\"uint256\"}],\"name\":\"transferIdeaTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2GasPriceBid\",\"type\":\"uint256\"}],\"name\":\"transferPlatformVars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2GasPriceBid\",\"type\":\"uint256\"}],\"name\":\"transferStaticVars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2GasPriceBid\",\"type\":\"uint256\"}],\"name\":\"transferTokenVars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"}],\"name\":\"withdrawPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"}],\"name\":\"withdrawPlatformInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokenInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTradingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IdeaTokenExchangeStateTransfer","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4855a9eb72f26591ab9a4bb5ad90c9128b4ae4900e2862f837eb9f9bd8edde7f"}]}