{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"main/version-6/swap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// File: @openzeppelin/contracts/utils/Context.sol\\n\\npragma solidity ^0.6.6;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal pure virtual returns (bytes memory) {\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\n\\npragma solidity ^0.6.6;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            _initializing || !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\npragma solidity ^0.6.6;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context, Initializable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() public {}\\n\\n    function init(address owner_) internal initializer {\\n        _setOwner(owner_);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\npragma solidity ^0.6.6;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\\n\\npragma solidity ^0.6.6;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\npragma solidity ^0.6.6;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\n\\npragma solidity ^0.6.6;\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        require(\\n            oldAllowance >= value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        uint256 newAllowance = oldAllowance - value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\\n// File: @uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\n\\npragma solidity ^0.6.6;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes calldata path, uint256 amountIn)\\n        external\\n        returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes calldata path, uint256 amountOut)\\n        external\\n        returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\\n// File: @uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\\n\\npragma solidity ^0.6.6;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File: @uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\n\\npragma solidity ^0.6.6;\\npragma experimental ABIEncoderV2;\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountIn);\\n}\\n\\n// File: @uniswap/lib/contracts/libraries/TransferHelper.sol\\n\\npragma solidity ^0.6.6;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeApprove: approve failed\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::safeTransfer: transfer failed\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper::transferFrom: transferFrom failed\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(\\n            success,\\n            \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\"\\n        );\\n    }\\n}\\n\\n// File: customAggV2.sol\\n\\npragma solidity ^0.6.6;\\n\\ninterface IUniswapV2Router {\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function WETH() external pure returns (address);\\n\\n    function factory() external pure returns (address);\\n}\\n\\ninterface IUniswapV3Router is ISwapRouter {\\n    function refundETH() external payable;\\n\\n    function factory() external pure returns (address);\\n\\n    function WETH9() external pure returns (address);\\n\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pair);\\n}\\n\\ninterface IUniswapV2Pair {\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function token0() external pure returns (address);\\n\\n    function token1() external pure returns (address);\\n}\\n\\nlibrary UniversalERC20 {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public constant ZERO_ADDRESS =\\n        IERC20(0x0000000000000000000000000000000000000000);\\n    IERC20 public constant ETH_ADDRESS =\\n        IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    function universalBalanceOf(IERC20 token, address who)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (isETH(token)) {\\n            return who.balance;\\n        } else {\\n            return token.balanceOf(who);\\n        }\\n    }\\n\\n    function isETH(IERC20 token) public pure returns (bool) {\\n        return (address(token) == address(ZERO_ADDRESS) ||\\n            address(token) == address(ETH_ADDRESS));\\n    }\\n}\\n\\n// DAI = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\\n// WETH9 = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\\n\\ncontract Swap is Ownable {\\n    using SafeMath for uint256;\\n    using UniversalERC20 for IERC20;\\n\\n    IUniswapV2Router public sushiswapRouter;\\n\\n    IUniswapV2Router public uniswapRouterV2;\\n\\n    IUniswapV3Router public uniswapRouterV3;\\n\\n    IQuoter public quoterV3;\\n\\n    uint24 public poolFee;\\n\\n    function initialize(address _owner) public initializer {\\n        Ownable.init(_owner);\\n\\n        sushiswapRouter = IUniswapV2Router(\\n            0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F\\n        );\\n        uniswapRouterV2 = IUniswapV2Router(\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n        );\\n        uniswapRouterV3 = IUniswapV3Router(\\n            0xE592427A0AEce92De3Edee1F18E0157C05861564\\n        );\\n        quoterV3 = IQuoter(0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6);\\n        poolFee = 3000;\\n    }\\n\\n    function getPairRateSushi(\\n        IERC20 _tokenIn,\\n        IERC20 _tokenOut,\\n        uint256 _amountIn\\n    ) internal view returns (uint256 _amountOut) {\\n        require(_tokenIn != _tokenOut, \\\"Both tokens are same\\\");\\n\\n        if (UniversalERC20.isETH(_tokenIn)) {\\n            _tokenIn = IERC20(sushiswapRouter.WETH());\\n        } else if (UniversalERC20.isETH(_tokenOut)) {\\n            _tokenOut = IERC20(sushiswapRouter.WETH());\\n        }\\n\\n        if (\\n            IUniswapV2Router(sushiswapRouter.factory()).getPair(\\n                address(_tokenIn),\\n                address(_tokenOut)\\n            ) != address(0)\\n        ) {\\n            address[] memory path = new address[](2);\\n            path[0] = address(_tokenIn);\\n            path[1] = address(_tokenOut);\\n\\n            uint256[] memory amountsOut = sushiswapRouter.getAmountsOut(\\n                _amountIn,\\n                path\\n            );\\n\\n            _amountOut = amountsOut[1];\\n        }\\n    }\\n\\n    function getPairRateUniV2(\\n        IERC20 _tokenIn,\\n        IERC20 _tokenOut,\\n        uint256 _amountIn\\n    ) internal view returns (uint256 _amountOut) {\\n        require(_tokenIn != _tokenOut, \\\"Both tokens are same\\\");\\n\\n        if (UniversalERC20.isETH(_tokenIn)) {\\n            _tokenIn = IERC20(uniswapRouterV2.WETH());\\n        } else if (UniversalERC20.isETH(_tokenOut)) {\\n            _tokenOut = IERC20(uniswapRouterV2.WETH());\\n        }\\n\\n        if (\\n            IUniswapV2Router(uniswapRouterV2.factory()).getPair(\\n                address(_tokenIn),\\n                address(_tokenOut)\\n            ) != address(0)\\n        ) {\\n            address[] memory path = new address[](2);\\n            path[0] = address(_tokenIn);\\n            path[1] = address(_tokenOut);\\n\\n            uint256[] memory amountsOut = uniswapRouterV2.getAmountsOut(\\n                _amountIn,\\n                path\\n            );\\n\\n            _amountOut = amountsOut[1];\\n        }\\n    }\\n\\n    function getPairRateUniV3(\\n        IERC20 _tokenIn,\\n        IERC20 _tokenOut,\\n        uint256 _amountIn\\n    ) internal returns (uint256 _amountOut) {\\n        require(_tokenIn != _tokenOut, \\\"Both tokens are same\\\");\\n\\n        if (UniversalERC20.isETH(_tokenIn)) {\\n            _tokenIn = IERC20(uniswapRouterV3.WETH9());\\n        } else if (UniversalERC20.isETH(_tokenOut)) {\\n            _tokenOut = IERC20(uniswapRouterV3.WETH9());\\n        }\\n\\n        if (\\n            IUniswapV3Router(uniswapRouterV3.factory()).getPool(\\n                address(_tokenIn),\\n                address(_tokenOut),\\n                poolFee\\n            ) != address(0)\\n        ) {\\n            uint160 sqrtPriceLimitX96 = 0;\\n\\n            _amountOut = quoterV3.quoteExactInputSingle(\\n                address(_tokenIn),\\n                address(_tokenOut),\\n                poolFee,\\n                _amountIn,\\n                sqrtPriceLimitX96\\n            );\\n        }\\n    }\\n\\n    // important to receive ETH\\n    receive() external payable {}\\n\\n    function getBestExchangeRate(\\n        IERC20 _tokenIn,\\n        IERC20 _tokenOut,\\n        uint256 _amountIn\\n    ) external payable returns (uint256 amountOut, uint8 platform) {\\n        uint256[] memory returnAmounts = new uint256[](3);\\n\\n        returnAmounts[0] = getPairRateSushi(_tokenIn, _tokenOut, _amountIn);\\n        returnAmounts[1] = getPairRateUniV2(_tokenIn, _tokenOut, _amountIn);\\n        returnAmounts[2] = getPairRateUniV3(_tokenIn, _tokenOut, _amountIn);\\n\\n        uint256 amount = 0;\\n        uint8 index;\\n\\n        for (uint8 i = 0; i < returnAmounts.length; i++) {\\n            if (amount < returnAmounts[i]) {\\n                amount = returnAmounts[i];\\n                index = i;\\n            }\\n        }\\n\\n        require(amount > 0, \\\"No liquidity added\\\");\\n\\n        amountOut = amount;\\n        platform = index;\\n    }\\n\\n    function getPairV2(\\n        address factory,\\n        address token0,\\n        address token1\\n    ) internal view returns (address) {\\n        return IUniswapV2Router(factory).getPair(token0, token1);\\n    }\\n\\n    function getPairV3(\\n        address factory,\\n        address token0,\\n        address token1\\n    ) internal view returns (address) {\\n        return IUniswapV3Router(factory).getPool(token0, token1, poolFee);\\n    }\\n\\n    function getReserveV2(address pairAddress)\\n        internal\\n        view\\n        returns (\\n            address _tokenIn,\\n            uint256 _tokenInBal,\\n            uint256 _tokenoutBal\\n        )\\n    {\\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\n        (uint112 liq1, uint112 liq2, ) = pair.getReserves();\\n        _tokenIn = pair.token0();\\n        _tokenInBal = uint256(liq1).sub(pair.MINIMUM_LIQUIDITY());\\n        _tokenoutBal = uint256(liq2).sub(pair.MINIMUM_LIQUIDITY());\\n    }\\n\\n    function getReserveV3(address pair, IERC20 token0)\\n        internal\\n        view\\n        returns (uint256 token0Bal)\\n    {\\n        token0Bal = token0.balanceOf(pair);\\n    }\\n\\n    function sushiSwap(\\n        IERC20 _tokenIn,\\n        IERC20 _tokenOut,\\n        uint256 _amountIn,\\n        uint256 _amountOutMinimum\\n    ) internal {\\n        require(_tokenIn != _tokenOut, \\\"Both tokens are same\\\");\\n        require(_amountIn > 0, \\\"Amount too small to swap\\\");\\n        require(\\n            getPairRateSushi(_tokenIn, _tokenOut, _amountIn) >=\\n                _amountOutMinimum,\\n            \\\"Insufficient output amount\\\"\\n        );\\n\\n        address[] memory path = new address[](2);\\n\\n        if (UniversalERC20.isETH(_tokenIn)) {\\n            path[0] = sushiswapRouter.WETH();\\n            path[1] = address(_tokenOut);\\n        } else if (UniversalERC20.isETH(_tokenOut)) {\\n            path[0] = address(_tokenIn);\\n            path[1] = sushiswapRouter.WETH();\\n        } else {\\n            path[0] = address(_tokenIn);\\n            path[1] = address(_tokenOut);\\n        }\\n\\n        address pairAddress = getPairV2(\\n            sushiswapRouter.factory(),\\n            path[0],\\n            path[1]\\n        );\\n\\n        require(pairAddress != address(0), \\\"Pair doesn't exist\\\");\\n\\n        (\\n            address token0,\\n            uint256 _tokenInSwapAmount,\\n            uint256 _tokenOutSwapAmount\\n        ) = getReserveV2(pairAddress);\\n\\n        uint256 maxSwapAmount;\\n\\n        if (path[0] == token0) {\\n            maxSwapAmount = _tokenInSwapAmount;\\n        } else {\\n            maxSwapAmount = _tokenOutSwapAmount;\\n        }\\n\\n        require(_amountIn <= maxSwapAmount, \\\"Not enough liquidity\\\");\\n\\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            address(this),\\n            _amountIn\\n        );\\n\\n        TransferHelper.safeApprove(\\n            path[0],\\n            address(sushiswapRouter),\\n            _amountIn\\n        );\\n\\n        if (UniversalERC20.isETH(_tokenIn)) {\\n            sushiswapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n                value: msg.value\\n            }(_amountOutMinimum, path, msg.sender, block.timestamp);\\n        } else if (UniversalERC20.isETH(_tokenOut)) {\\n            sushiswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                _amountIn,\\n                _amountOutMinimum,\\n                path,\\n                msg.sender,\\n                block.timestamp\\n            );\\n        } else {\\n            sushiswapRouter\\n                .swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                    _amountIn,\\n                    _amountOutMinimum,\\n                    path,\\n                    msg.sender,\\n                    block.timestamp\\n                );\\n        }\\n    }\\n\\n    function uniSwapV2(\\n        IERC20 _tokenIn,\\n        IERC20 _tokenOut,\\n        uint256 _amountIn,\\n        uint256 _amountOutMinimum\\n    ) internal {\\n        require(_tokenIn != _tokenOut, \\\"Both tokens are same\\\");\\n        require(_amountIn > 0, \\\"Amount too small to swap\\\");\\n        require(\\n            getPairRateUniV2(_tokenIn, _tokenOut, _amountIn) >=\\n                _amountOutMinimum,\\n            \\\"Insufficient output amount\\\"\\n        );\\n\\n        address[] memory path = new address[](2);\\n\\n        if (UniversalERC20.isETH(_tokenIn)) {\\n            path[0] = uniswapRouterV2.WETH();\\n            path[1] = address(_tokenOut);\\n        } else if (UniversalERC20.isETH(_tokenOut)) {\\n            path[0] = address(_tokenIn);\\n            path[1] = uniswapRouterV2.WETH();\\n        } else {\\n            path[0] = address(_tokenIn);\\n            path[1] = address(_tokenOut);\\n        }\\n\\n        address pairAddress = getPairV2(\\n            uniswapRouterV2.factory(),\\n            address(path[0]),\\n            address(path[1])\\n        );\\n\\n        require(pairAddress != address(0), \\\"Pair doesn't exist\\\");\\n\\n        (\\n            address token0,\\n            uint256 _tokenInSwapAmount,\\n            uint256 _tokenOutSwapAmount\\n        ) = getReserveV2(pairAddress);\\n\\n        uint256 maxSwapAmount;\\n\\n        if (path[0] == token0) {\\n            maxSwapAmount = _tokenInSwapAmount;\\n        } else {\\n            maxSwapAmount = _tokenOutSwapAmount;\\n        }\\n\\n        require(_amountIn <= maxSwapAmount, \\\"Not enough liquidity\\\");\\n        if(!UniversalERC20.isETH(_tokenIn)){\\n        TransferHelper.safeTransferFrom(\\n            path[0],\\n            msg.sender,\\n            address(this),\\n            _amountIn\\n        );\\n\\n        TransferHelper.safeApprove(\\n            path[0],\\n            address(uniswapRouterV2),\\n            _amountIn\\n        );\\n\\n        }\\n\\n        if (UniversalERC20.isETH(_tokenIn)) {\\n            uniswapRouterV2.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n                value: msg.value\\n            }(_amountOutMinimum, path, msg.sender, block.timestamp);\\n        } else if (UniversalERC20.isETH(_tokenOut)) {\\n            uniswapRouterV2.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                _amountIn,\\n                _amountOutMinimum,\\n                path,\\n                msg.sender,\\n                block.timestamp\\n            );\\n        } else {\\n            uniswapRouterV2\\n                .swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                    _amountIn,\\n                    _amountOutMinimum,\\n                    path,\\n                    msg.sender,\\n                    block.timestamp\\n                );\\n        }\\n    }\\n\\n    function uniSwapV3(\\n        IERC20 _tokenIn,\\n        IERC20 _tokenOut,\\n        uint256 _amountIn,\\n        uint256 _amountOutMinimum\\n    ) internal {\\n        require(_tokenIn != _tokenOut, \\\"Both tokens are same\\\");\\n        require(_amountIn > 0, \\\"Amount too small to swap\\\");\\n        require(\\n            getPairRateUniV3(_tokenIn, _tokenOut, _amountIn) >=\\n                _amountOutMinimum,\\n            \\\"Insufficient output amount\\\"\\n        );\\n\\n        if (UniversalERC20.isETH(_tokenIn)) {\\n            _tokenIn = IERC20(uniswapRouterV3.WETH9());\\n        } else if (UniversalERC20.isETH(_tokenOut)) {\\n            _tokenOut = IERC20(uniswapRouterV3.WETH9());\\n        }\\n\\n        address pairAddress = getPairV3(\\n            uniswapRouterV3.factory(),\\n            address(_tokenIn),\\n            address(_tokenOut)\\n        );\\n\\n        require(pairAddress != address(0), \\\"Pair doesn't exist\\\");\\n\\n        uint256 _tokenInSwapAmount = getReserveV3(pairAddress, _tokenIn);\\n\\n        require(_amountIn <= _tokenInSwapAmount, \\\"Not enough liquidity\\\");\\n\\n        TransferHelper.safeTransferFrom(\\n            address(_tokenIn),\\n            msg.sender,\\n            address(this),\\n            _amountIn\\n        );\\n\\n        TransferHelper.safeApprove(\\n            address(_tokenIn),\\n            address(uniswapRouterV3),\\n            _amountIn\\n        );\\n\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\n            .ExactInputSingleParams({\\n                tokenIn: address(_tokenIn),\\n                tokenOut: address(_tokenOut),\\n                fee: poolFee,\\n                recipient: msg.sender,\\n                deadline: block.timestamp,\\n                amountIn: _amountIn,\\n                amountOutMinimum: _amountOutMinimum,\\n                sqrtPriceLimitX96: 0\\n            });\\n\\n        uniswapRouterV3.exactInputSingle(params);\\n    }\\n\\n    function swapFromBestExchange(\\n        IERC20 _tokenIn,\\n        IERC20 _tokenOut,\\n        uint256 _amountIn,\\n        uint256 _amountOutMinimum,\\n        uint24 _exchange\\n    ) external payable returns (uint256 returnAmount) {\\n        Balances memory beforeBalances = _getFirstAndLastBalances(\\n            _tokenIn,\\n            _tokenOut\\n        );\\n\\n        if (_exchange == 0) {\\n            sushiSwap(_tokenIn, _tokenOut, _amountIn, _amountOutMinimum);\\n        } else if (_exchange == 1) {\\n            uniSwapV2(_tokenIn, _tokenOut, _amountIn, _amountOutMinimum);\\n        } else if (_exchange == 2) {\\n            uniSwapV3(_tokenIn, _tokenOut, _amountIn, _amountOutMinimum);\\n        } else {\\n            revert(\\\"No more swaps available\\\");\\n        }\\n\\n        Balances memory afterBalances = _getFirstAndLastBalances(\\n            _tokenIn,\\n            _tokenOut\\n        );\\n\\n        returnAmount = afterBalances.ofDestToken.sub(\\n            beforeBalances.ofDestToken\\n        );\\n    }\\n\\n    struct Balances {\\n        uint256 ofFromToken;\\n        uint256 ofDestToken;\\n    }\\n\\n    function _getFirstAndLastBalances(IERC20 _tokenIn, IERC20 _tokenOut)\\n        internal\\n        view\\n        returns (Balances memory)\\n    {\\n        return\\n            Balances({\\n                ofFromToken: _tokenIn.universalBalanceOf(msg.sender),\\n                ofDestToken: _tokenOut.universalBalanceOf(msg.sender)\\n            });\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"main/version-6/swap.sol\": {\r\n        \"UniversalERC20\": \"0x4af66235e09ff3f1e44af116434c21740781ceef\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getBestExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"platform\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoterV3\",\"outputs\":[{\"internalType\":\"contract IQuoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_exchange\",\"type\":\"uint24\"}],\"name\":\"swapFromBestExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterV2\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterV3\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Swap","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}