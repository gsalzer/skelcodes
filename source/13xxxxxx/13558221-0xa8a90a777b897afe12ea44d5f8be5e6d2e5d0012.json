{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/StakingFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./lib/AssetLib.sol\\\";\\n\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"./interfaces/IStakingFactory.sol\\\";\\nimport \\\"./pancake-swap/interfaces/IPancakePair.sol\\\";\\n\\ncontract StakingFactory is AccessControl, ReentrancyGuard, IStakingFactory {\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    address public immutable YDR_TOKEN;\\n    address public immutable FACTORY;\\n    address public immutable DEX_ROUTER;\\n    address public immutable DEX_FACTORY;\\n\\n    address public masterStaking;\\n    address[] public stakes;\\n\\n    mapping(address => address) public pools;\\n    mapping(address => uint256) public rewardPerBlock;\\n    mapping(address => bool) internal _isAllowedToken;\\n\\n    struct Reward {\\n        address token;\\n        uint256 rewardPerBlock;\\n    }\\n\\n    event Deposit(address token, address sender, uint256 amount);\\n    event Withdraw(address token, address sender, uint256 amount);\\n    event StakeCreate(address token, address newStaking);\\n    event RewardAdded(Reward[] rewards, uint256 currentTimestamp);\\n\\n    modifier onlyManagerOrAdmin {\\n        address sender = _msgSender();\\n        address factory = FACTORY;\\n        require(\\n            AccessControl(factory).hasRole(MANAGER_ROLE, sender) ||\\n                AccessControl(factory).hasRole(0x00, sender),\\n            \\\"Access error\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyFactory {\\n        require(_msgSender() == FACTORY, \\\"Access error\\\");\\n        _;\\n    }\\n\\n    modifier isInitialize {\\n        require(masterStaking != address(0), \\\"Not initialized yet\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address ydrToken,\\n        address factory,\\n        address dexRouter,\\n        address dexFactory\\n    ) {\\n        YDR_TOKEN = ydrToken;\\n        FACTORY = factory;\\n        DEX_ROUTER = dexRouter;\\n        DEX_FACTORY = dexFactory;\\n        _isAllowedToken[ydrToken] = true;\\n    }\\n\\n    /**\\n     * @notice Create stake with allowed index, lp index, ydr and ydr lp\\n     * @param token: address of token which must be allowed\\n     */\\n    function createStaking(address token) external onlyManagerOrAdmin isInitialize {\\n        require(token != address(0), \\\"Input error\\\");\\n        require(_isAllowedTokenCheck(token), \\\"Wrong token\\\");\\n        require(pools[token] == address(0), \\\"Already create pool\\\");\\n        address newStaking = Clones.clone(masterStaking);\\n        IStaking(newStaking).initialize(token);\\n        pools[token] = newStaking;\\n        IERC20(YDR_TOKEN).approve(newStaking, type(uint256).max);\\n        stakes.push(newStaking);\\n        emit StakeCreate(token, newStaking);\\n    }\\n\\n    /**\\n     * @notice Input reward to stake\\n     * @param rewards: {address token, rewardPerBlock}\\n     */\\n    function inputReward(Reward[] calldata rewards) external onlyManagerOrAdmin isInitialize {\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            if (pools[rewards[i].token] != address(0)) {\\n                rewardPerBlock[rewards[i].token] = rewards[i].rewardPerBlock;\\n            }\\n        }\\n        emit RewardAdded(rewards, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Add token to allowed token\\n     * @dev must call just from assetFactory\\n     * @param token: address of asset\\n     */\\n    function createPool(address token) external override onlyFactory {\\n        _isAllowedToken[token] = true;\\n    }\\n\\n    /**\\n     * @notice Change master staking\\n     * @param newMasterStaking: address of new master staking\\n     */\\n    function changeMasterStaking(address newMasterStaking) external onlyManagerOrAdmin {\\n        require(masterStaking == address(0) && newMasterStaking != address(0), \\\"Bad use\\\");\\n        masterStaking = newMasterStaking;\\n    }\\n\\n    /**\\n     * @notice Get stake count\\n     * @return stakes count\\n     */\\n    function getStakedCount() external view returns (uint256) {\\n        return stakes.length;\\n    }\\n\\n    function _isAllowedTokenCheck(address token) private view returns (bool) {\\n        if (_isAllowedToken[token]) {\\n            return true;\\n        } else {\\n            address token0;\\n            try IPancakePair(token).token0() returns (address _token0) {\\n                token0 = _token0;\\n            } catch (bytes memory) {\\n                return false;\\n            }\\n\\n            address token1;\\n            try IPancakePair(token).token1() returns (address _token1) {\\n                token1 = _token1;\\n            } catch (bytes memory) {\\n                return false;\\n            }\\n\\n            address goodPair = IPancakeFactory(DEX_FACTORY).getPair(token0, token1);\\n            if (goodPair != token) {\\n                return false;\\n            }\\n\\n            if (!_isAllowedToken[token0] && !_isAllowedToken[token1]) {\\n                return false;\\n            }\\n\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IAssetFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAssetFactory {\\n    function notDefaultDexRouterToken(address) external view returns (address);\\n\\n    function notDefaultDexFactoryToken(address) external view returns (address);\\n\\n    function defaultDexRouter() external view returns (address);\\n\\n    function defaultDexFactory() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function isAddressDexRouter(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    function getData(address[] calldata tokens)\\n        external\\n        view\\n        returns (bool[] memory isValidValue, uint256[] memory tokensPrices);\\n\\n    function uploadData(address[] calldata tokens, uint256[] calldata values) external;\\n\\n    function getTimestampsOfLastUploads(address[] calldata tokens)\\n        external\\n        view\\n        returns (uint256[] memory timestamps);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStaking {\\n    function stakedToken() external view returns (address);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function getUserBalance(address user) external view returns (uint256);\\n\\n    function initialize(address token) external;\\n\\n    function deposit(uint256 amount, address sender) external returns (bool);\\n\\n    function withdraw(uint256 amount, address sender) external returns (bool);\\n\\n    function addReward(uint256 amountReward) external;\\n\\n    function claimDividends(address user) external returns (uint256);\\n\\n    function availDividends(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IStakingFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStakingFactory {\\n    function createPool(address token) external;\\n\\n    function rewardPerBlock(address stake) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/AssetLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"../pancake-swap/interfaces/IPancakeRouter02.sol\\\";\\nimport \\\"../pancake-swap/interfaces/IPangolinRouter02.sol\\\";\\nimport \\\"../pancake-swap/interfaces/IPancakeRouter02BNB.sol\\\";\\nimport \\\"../pancake-swap/interfaces/IPancakeFactory.sol\\\";\\nimport \\\"../pancake-swap/interfaces/IWETH.sol\\\";\\n\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/IAssetFactory.sol\\\";\\n\\nlibrary AssetLib {\\n    function calculateUserWeight(\\n        address user,\\n        address[] memory tokens,\\n        uint256[] memory tokenPricesInIme,\\n        mapping(address => mapping(address => uint256)) storage userEnters\\n    ) external view returns (uint256) {\\n        uint256 totalUserWeight;\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            uint256 decimals_;\\n            if (tokens[i] == address(0)) {\\n                decimals_ = 18;\\n            } else {\\n                decimals_ = IERC20Metadata(tokens[i]).decimals();\\n            }\\n            totalUserWeight +=\\n                (userEnters[user][tokens[i]] * tokenPricesInIme[i]) /\\n                (10**decimals_);\\n        }\\n        return totalUserWeight;\\n    }\\n\\n    function checkIfTokensHavePair(address[] memory tokens, address assetFactory) public view {\\n        address defaultDexFactory = IAssetFactory(assetFactory).defaultDexFactory();\\n        address defaultDexRouter = IAssetFactory(assetFactory).defaultDexRouter();\\n\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            address dexFactory = IAssetFactory(assetFactory).notDefaultDexFactoryToken(tokens[i]);\\n            address dexRouter;\\n            address weth;\\n            if (dexFactory != address(0)) {\\n                dexRouter = IAssetFactory(assetFactory).notDefaultDexRouterToken(tokens[i]);\\n            } else {\\n                dexFactory = defaultDexFactory;\\n                dexRouter = defaultDexRouter;\\n            }\\n            weth = getWethFromDex(dexRouter);\\n\\n            if (tokens[i] == weth) {\\n                continue;\\n            }\\n            bool isValid = checkIfAddressIsToken(tokens[i]);\\n            require(isValid == true, \\\"Address is not token\\\");\\n\\n            address pair = IPancakeFactory(dexFactory).getPair(tokens[i], weth);\\n            require(pair != address(0), \\\"Not have eth pair\\\");\\n        }\\n    }\\n\\n    function checkIfAddressIsToken(address token) public view returns (bool) {\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(token)\\n        }\\n        if (size == 0) {\\n            return false;\\n        }\\n        try IERC20Metadata(token).decimals() returns (uint8) {\\n            return true;\\n        } catch (bytes memory) {\\n            return false;\\n        }\\n    }\\n\\n    function initTokenToBuyInfo(\\n        address[] memory tokensToBuy,\\n        uint256 totalWeight,\\n        mapping(address => uint256) storage tokensDistribution,\\n        IOracle oracle\\n    ) external view returns (uint256[][5] memory, uint256[] memory) {\\n        /*\\n        tokenToBuyInfo\\n        0 - tokens to buy amounts\\n        1 - actual number to buy (tokens to buy amounts - tokensInAssetNow)\\n        2 - actual weight to buy\\n        3 - tokens decimals\\n        4 - is in asset already\\n         */\\n        uint256[][5] memory tokenToBuyInfo;\\n        for (uint256 i = 0; i < tokenToBuyInfo.length; ++i) {\\n            tokenToBuyInfo[i] = new uint256[](tokensToBuy.length);\\n        }\\n\\n        (bool[] memory isValidValue, uint256[] memory tokensPrices) = oracle.getData(tokensToBuy);\\n        for (uint256 i = 0; i < tokensToBuy.length; ++i) {\\n            require(isValidValue[i] == true, \\\"Oracle price error\\\");\\n\\n            tokenToBuyInfo[3][i] = IERC20Metadata(tokensToBuy[i]).decimals();\\n\\n            uint256 tokenWeight = (tokensDistribution[tokensToBuy[i]] * totalWeight) / 1e4;\\n            tokenToBuyInfo[0][i] = (tokenWeight * (10**tokenToBuyInfo[3][i])) / tokensPrices[i];\\n        }\\n\\n        return (tokenToBuyInfo, tokensPrices);\\n    }\\n\\n    function initTokenToSellInfo(\\n        address[] memory tokensOld,\\n        IOracle oracle,\\n        mapping(address => uint256) storage totalTokenAmount\\n    ) external view returns (uint256[][3] memory, uint256) {\\n        uint256[][3] memory tokensOldInfo;\\n        for (uint256 i = 0; i < tokensOldInfo.length; ++i) {\\n            tokensOldInfo[i] = new uint256[](tokensOld.length);\\n        }\\n\\n        (bool[] memory isValidValue, uint256[] memory tokensPrices) = oracle.getData(tokensOld);\\n        uint256 oldWeight;\\n        for (uint256 i = 0; i < tokensOld.length; ++i) {\\n            tokensOldInfo[0][i] = totalTokenAmount[tokensOld[i]];\\n            tokensOldInfo[2][i] = IERC20Metadata(tokensOld[i]).decimals();\\n            require(isValidValue[i] == true, \\\"Oracle error\\\");\\n            oldWeight += (tokensOldInfo[0][i] * tokensPrices[i]) / (10**tokensOldInfo[2][i]);\\n        }\\n        require(oldWeight != 0, \\\"No value in asset\\\");\\n\\n        return (tokensOldInfo, oldWeight);\\n    }\\n\\n    function checkAndWriteDistribution(\\n        address[] memory newTokensInAsset,\\n        uint256[] memory distribution,\\n        address[] memory oldTokens,\\n        mapping(address => uint256) storage tokensDistribution\\n    ) external {\\n        require(newTokensInAsset.length == distribution.length, \\\"Input error\\\");\\n        require(newTokensInAsset.length > 0, \\\"Len error\\\");\\n        uint256 totalPerc;\\n        for (uint256 i = 0; i < newTokensInAsset.length; ++i) {\\n            require(newTokensInAsset[i] != address(0), \\\"Wrong token\\\");\\n            require(distribution[i] > 0, \\\"Zero distribution\\\");\\n            for (uint256 j = i + 1; j < newTokensInAsset.length; ++j) {\\n                require(newTokensInAsset[i] != newTokensInAsset[j], \\\"Input error\\\");\\n            }\\n            tokensDistribution[newTokensInAsset[i]] = distribution[i];\\n            totalPerc += distribution[i];\\n        }\\n        require(totalPerc == 1e4, \\\"Perc error\\\");\\n\\n        for (uint256 i = 0; i < oldTokens.length; ++i) {\\n            bool isFound = false;\\n            for (uint256 j = 0; j < newTokensInAsset.length && isFound == false; ++j) {\\n                if (newTokensInAsset[j] == oldTokens[i]) {\\n                    isFound = true;\\n                }\\n            }\\n\\n            if (isFound == false) {\\n                tokensDistribution[oldTokens[i]] = 0;\\n            }\\n        }\\n    }\\n\\n    function withdrawFromYForOwner(\\n        address[] memory tokensInAsset,\\n        uint256[] memory tokenAmounts,\\n        address sender,\\n        mapping(address => uint256) storage yVaultAmount,\\n        mapping(address => uint256) storage yVaultAmountInStaking\\n    ) external {\\n        require(tokenAmounts.length == tokensInAsset.length, \\\"Invalid input\\\");\\n        for (uint256 i = 0; i < tokensInAsset.length; ++i) {\\n            uint256 yAmount = yVaultAmount[tokensInAsset[i]];\\n            require(yAmount >= tokenAmounts[i], \\\"Not enough y balance\\\");\\n            yAmount -= tokenAmounts[i];\\n            yVaultAmount[tokensInAsset[i]] = yAmount;\\n            yVaultAmountInStaking[tokensInAsset[i]] += tokenAmounts[i];\\n\\n            safeTransfer(tokensInAsset[i], sender, tokenAmounts[i]);\\n        }\\n    }\\n\\n    function checkAndWriteWhitelist(\\n        address[] memory tokenWhitelist,\\n        address assetFactory,\\n        EnumerableSet.AddressSet storage tokenWhitelistSet\\n    ) external {\\n        checkIfTokensHavePair(tokenWhitelist, assetFactory);\\n        for (uint256 i = 0; i < tokenWhitelist.length; ++i) {\\n            require(tokenWhitelist[i] != address(0), \\\"No zero address\\\");\\n            for (uint256 j = 0; j < i; ++j) {\\n                require(tokenWhitelist[i] != tokenWhitelist[j], \\\"Whitelist error\\\");\\n            }\\n            EnumerableSet.add(tokenWhitelistSet, tokenWhitelist[i]);\\n        }\\n    }\\n\\n    function changeWhitelist(\\n        address token,\\n        bool value,\\n        address assetFactory,\\n        EnumerableSet.AddressSet storage set\\n    ) external {\\n        require(token != address(0), \\\"Token error\\\");\\n\\n        if (value) {\\n            address[] memory temp = new address[](1);\\n            temp[0] = token;\\n            checkIfTokensHavePair(temp, assetFactory);\\n            require(EnumerableSet.add(set, token), \\\"Wrong value\\\");\\n        } else {\\n            require(EnumerableSet.remove(set, token), \\\"Wrong value\\\");\\n        }\\n    }\\n\\n    function sellTokensInAssetNow(\\n        address[] memory tokensInAssetNow,\\n        uint256[][3] memory tokensInAssetNowInfo,\\n        address weth,\\n        address assetFactory,\\n        mapping(address => uint256) storage totalTokenAmount\\n    ) external returns (uint256 availableWeth) {\\n        for (uint256 i = 0; i < tokensInAssetNow.length; ++i) {\\n            {\\n                address temp = tokensInAssetNow[i];\\n                if (totalTokenAmount[temp] == 0) {\\n                    totalTokenAmount[temp] = tokensInAssetNowInfo[0][i];\\n                }\\n            }\\n\\n            if (tokensInAssetNowInfo[1][i] == 0) continue;\\n\\n            if (tokensInAssetNow[i] == address(0)) {\\n                IWETH(weth).deposit{value: tokensInAssetNowInfo[1][i]}();\\n                availableWeth += tokensInAssetNowInfo[1][i];\\n            } else if (tokensInAssetNow[i] == address(weth)) {\\n                availableWeth += tokensInAssetNowInfo[1][i];\\n            } else if (tokensInAssetNow[i] != address(weth)) {\\n                availableWeth += safeSwap(\\n                    [tokensInAssetNow[i], weth],\\n                    tokensInAssetNowInfo[1][i],\\n                    assetFactory,\\n                    0\\n                );\\n            }\\n            {\\n                address temp = tokensInAssetNow[i];\\n                totalTokenAmount[temp] -= tokensInAssetNowInfo[1][i];\\n            }\\n        }\\n    }\\n\\n    function buyTokensInAssetRebase(\\n        address[] memory tokensToBuy,\\n        uint256[][5] memory tokenToBuyInfo,\\n        uint256[2] memory tokenToBuyInfoGlobals,\\n        address weth,\\n        address assetFactory,\\n        uint256 availableWeth,\\n        mapping(address => uint256) storage totalTokenAmount\\n    ) external returns (uint256[] memory outputAmounts) {\\n        outputAmounts = new uint256[](tokensToBuy.length);\\n        if (tokenToBuyInfoGlobals[0] == 0 || availableWeth == 0) {\\n            return outputAmounts;\\n        }\\n        uint256 restWeth = availableWeth;\\n        for (uint256 i = 0; i < tokensToBuy.length && tokenToBuyInfoGlobals[1] > 0; ++i) {\\n            uint256 wethToSpend;\\n            // if actual weight to buy = 0\\n            if (tokenToBuyInfo[2][i] == 0) {\\n                continue;\\n            }\\n            if (tokenToBuyInfoGlobals[1] > 1) {\\n                wethToSpend = (availableWeth * tokenToBuyInfo[2][i]) / tokenToBuyInfoGlobals[0];\\n            } else {\\n                wethToSpend = restWeth;\\n            }\\n            require(wethToSpend > 0 && wethToSpend <= restWeth, \\\"Internal error\\\");\\n\\n            restWeth -= wethToSpend;\\n            --tokenToBuyInfoGlobals[1];\\n\\n            outputAmounts[i] = safeSwap([weth, tokensToBuy[i]], wethToSpend, assetFactory, 1);\\n\\n            {\\n                address temp = tokensToBuy[i];\\n                totalTokenAmount[temp] += outputAmounts[i];\\n            }\\n        }\\n\\n        require(restWeth == 0, \\\"Internal error\\\");\\n\\n        return outputAmounts;\\n    }\\n\\n    function transferTokenAndSwapToWeth(\\n        address tokenToPay,\\n        uint256 amount,\\n        address sender,\\n        address weth,\\n        address assetFactory\\n    ) external returns (address, uint256) {\\n        tokenToPay = transferFromToGoodToken(tokenToPay, sender, amount, weth);\\n        uint256 totalWeth;\\n        if (tokenToPay == weth) {\\n            totalWeth = amount;\\n        } else {\\n            totalWeth = safeSwap([tokenToPay, weth], amount, assetFactory, 0);\\n        }\\n\\n        return (tokenToPay, totalWeth);\\n    }\\n\\n    function transferFromToGoodToken(\\n        address token,\\n        address user,\\n        uint256 amount,\\n        address weth\\n    ) public returns (address) {\\n        if (token == address(0)) {\\n            require(msg.value == amount, \\\"Value error\\\");\\n            token = weth;\\n            IWETH(weth).deposit{value: amount}();\\n        } else {\\n            require(msg.value == 0, \\\"Value error\\\");\\n            AssetLib.safeTransferFrom(token, user, amount);\\n        }\\n        return token;\\n    }\\n\\n    function checkCurrency(\\n        address currency,\\n        address weth,\\n        EnumerableSet.AddressSet storage tokenWhitelistSet\\n    ) external view {\\n        address currencyToCheck;\\n        if (currency == address(0)) {\\n            currencyToCheck = weth;\\n        } else {\\n            currencyToCheck = currency;\\n        }\\n        require(EnumerableSet.contains(tokenWhitelistSet, currencyToCheck), \\\"Not allowed currency\\\");\\n    }\\n\\n    function buyTokensMint(\\n        uint256 totalWeth,\\n        address[] memory tokensInAsset,\\n        address[2] memory wethAndAssetFactory,\\n        mapping(address => uint256) storage tokensDistribution,\\n        mapping(address => uint256) storage totalTokenAmount\\n    ) external returns (uint256[] memory buyAmounts, uint256[] memory oldDistribution) {\\n        buyAmounts = new uint256[](tokensInAsset.length);\\n        oldDistribution = new uint256[](tokensInAsset.length);\\n        uint256 restWeth = totalWeth;\\n        for (uint256 i = 0; i < tokensInAsset.length; ++i) {\\n            uint256 wethToThisToken;\\n            if (i < tokensInAsset.length - 1) {\\n                wethToThisToken = (totalWeth * tokensDistribution[tokensInAsset[i]]) / 1e4;\\n            } else {\\n                wethToThisToken = restWeth;\\n            }\\n            require(wethToThisToken > 0 && wethToThisToken <= restWeth, \\\"Internal error\\\");\\n\\n            restWeth -= wethToThisToken;\\n\\n            oldDistribution[i] = totalTokenAmount[tokensInAsset[i]];\\n\\n            buyAmounts[i] = safeSwap(\\n                [wethAndAssetFactory[0], tokensInAsset[i]],\\n                wethToThisToken,\\n                wethAndAssetFactory[1],\\n                1\\n            );\\n\\n            totalTokenAmount[tokensInAsset[i]] = oldDistribution[i] + buyAmounts[i];\\n        }\\n    }\\n\\n    function getMintAmount(\\n        address[] memory tokensInAsset,\\n        uint256[] memory buyAmounts,\\n        uint256[] memory oldDistribution,\\n        uint256 totalSupply,\\n        uint256 decimals,\\n        IOracle oracle,\\n        uint256 initialPrice\\n    ) public view returns (uint256 mintAmount) {\\n        uint256 totalPriceInAsset;\\n        uint256 totalPriceUser;\\n        (bool[] memory isValidValue, uint256[] memory tokensPrices) = oracle.getData(tokensInAsset);\\n        for (uint256 i = 0; i < tokensInAsset.length; ++i) {\\n            require(isValidValue[i] == true, \\\"Oracle error\\\");\\n            uint256 decimalsToken = IERC20Metadata(tokensInAsset[i]).decimals();\\n            totalPriceInAsset += (oldDistribution[i] * tokensPrices[i]) / (10**decimalsToken);\\n            totalPriceUser += (buyAmounts[i] * tokensPrices[i]) / (10**decimalsToken);\\n        }\\n\\n        if (totalPriceInAsset == 0 || totalSupply == 0) {\\n            return (totalPriceUser * 10**decimals) / initialPrice;\\n        } else {\\n            return (totalSupply * totalPriceUser) / totalPriceInAsset;\\n        }\\n    }\\n\\n    function safeSwap(\\n        address[2] memory path,\\n        uint256 amount,\\n        address assetFactory,\\n        uint256 forWhatTokenDex\\n    ) public returns (uint256) {\\n        if (path[0] == path[1]) {\\n            return amount;\\n        }\\n\\n        address dexRouter = getTokenDexRouter(assetFactory, path[forWhatTokenDex]);\\n        checkAllowance(path[0], dexRouter, amount);\\n\\n        address[] memory _path = new address[](2);\\n        _path[0] = path[0];\\n        _path[1] = path[1];\\n        uint256[] memory amounts =\\n            IPancakeRouter02(dexRouter).swapExactTokensForTokens(\\n                amount,\\n                0,\\n                _path,\\n                address(this),\\n                // solhint-disable-next-line not-rely-on-time\\n                block.timestamp\\n            );\\n\\n        return amounts[1];\\n    }\\n\\n    function redeemAndTransfer(\\n        uint256[2] memory amountAndTotalSupply,\\n        address[4] memory userCurrencyToPayWethFactory,\\n        mapping(address => uint256) storage totalTokenAmount,\\n        address[] memory tokensInAsset,\\n        uint256[] memory feePercentages\\n    )\\n        public\\n        returns (\\n            uint256 feeTotal,\\n            uint256[] memory inputAmounts,\\n            uint256 outputAmountTotal\\n        )\\n    {\\n        inputAmounts = new uint256[](tokensInAsset.length);\\n        for (uint256 i = 0; i < tokensInAsset.length; ++i) {\\n            inputAmounts[i] =\\n                (totalTokenAmount[tokensInAsset[i]] * amountAndTotalSupply[0]) /\\n                amountAndTotalSupply[1];\\n\\n            uint256 outputAmount =\\n                swapToCurrency(\\n                    tokensInAsset[i],\\n                    userCurrencyToPayWethFactory[1],\\n                    inputAmounts[i],\\n                    [userCurrencyToPayWethFactory[2], userCurrencyToPayWethFactory[3]]\\n                );\\n\\n            uint256 fee = (outputAmount * feePercentages[i]) / 1e4;\\n            outputAmountTotal += outputAmount - fee;\\n            feeTotal += fee;\\n\\n            totalTokenAmount[tokensInAsset[i]] -= inputAmounts[i];\\n        }\\n\\n        if (userCurrencyToPayWethFactory[1] == address(0)) {\\n            IWETH(userCurrencyToPayWethFactory[2]).withdraw(outputAmountTotal);\\n            safeTransfer(address(0), userCurrencyToPayWethFactory[0], outputAmountTotal);\\n        } else {\\n            safeTransfer(\\n                userCurrencyToPayWethFactory[1],\\n                userCurrencyToPayWethFactory[0],\\n                outputAmountTotal\\n            );\\n        }\\n    }\\n\\n    function initTokenInfoFromWhitelist(\\n        address[] memory tokensWhitelist,\\n        mapping(address => uint256) storage tokenEntersIme\\n    ) external view returns (uint256[][3] memory tokensIncomeAmounts) {\\n        tokensIncomeAmounts[0] = new uint256[](tokensWhitelist.length);\\n        tokensIncomeAmounts[1] = new uint256[](tokensWhitelist.length);\\n        tokensIncomeAmounts[2] = new uint256[](tokensWhitelist.length);\\n        for (uint256 i = 0; i < tokensWhitelist.length; ++i) {\\n            tokensIncomeAmounts[0][i] = tokenEntersIme[tokensWhitelist[i]];\\n            tokensIncomeAmounts[2][i] = IERC20Metadata(tokensWhitelist[i]).decimals();\\n        }\\n    }\\n\\n    function calculateXYAfterIme(\\n        address[] memory tokensInAsset,\\n        mapping(address => uint256) storage totalTokenAmount,\\n        mapping(address => uint256) storage xVaultAmount,\\n        mapping(address => uint256) storage yVaultAmount\\n    ) external {\\n        for (uint256 i = 0; i < tokensInAsset.length; ++i) {\\n            uint256 amountTotal = totalTokenAmount[tokensInAsset[i]];\\n            uint256 amountToX = (amountTotal * 2000) / 1e4;\\n\\n            xVaultAmount[tokensInAsset[i]] = amountToX;\\n            yVaultAmount[tokensInAsset[i]] = amountTotal - amountToX;\\n        }\\n    }\\n\\n    function depositToY(\\n        address[] memory tokensInAsset,\\n        uint256[] memory tokenAmountsOfY,\\n        address sender,\\n        address assetFactory,\\n        address weth,\\n        mapping(address => uint256) storage yVaultAmountInStaking,\\n        mapping(address => uint256) storage yVaultAmount\\n    ) external {\\n        require(tokensInAsset.length == tokenAmountsOfY.length, \\\"Input error 1\\\");\\n\\n        for (uint256 i = 0; i < tokensInAsset.length; ++i) {\\n            uint256 amountInStaking = yVaultAmountInStaking[tokensInAsset[i]];\\n            require(amountInStaking >= tokenAmountsOfY[i], \\\"Trying to send more\\\");\\n            amountInStaking -= tokenAmountsOfY[i];\\n            yVaultAmountInStaking[tokensInAsset[i]] = amountInStaking;\\n            yVaultAmount[tokensInAsset[i]] += tokenAmountsOfY[i];\\n\\n            safeTransferFrom(tokensInAsset[i], sender, tokenAmountsOfY[i]);\\n        }\\n    }\\n\\n    function proceedIme(\\n        address[] memory tokens,\\n        IOracle oracle,\\n        mapping(address => uint256) storage tokenEntersIme\\n    ) external view returns (uint256, uint256[] memory) {\\n        (bool[] memory isValidValue, uint256[] memory tokensPrices) = oracle.getData(tokens);\\n\\n        uint256 totalWeight;\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            require(isValidValue[i] == true, \\\"Not valid oracle values\\\");\\n            uint256 decimals_ = IERC20Metadata(tokens[i]).decimals();\\n            totalWeight += (tokenEntersIme[tokens[i]] * tokensPrices[i]) / (10**decimals_);\\n        }\\n\\n        return (totalWeight, tokensPrices);\\n    }\\n\\n    function getFeePercentagesRedeem(\\n        address[] memory tokensInAsset,\\n        mapping(address => uint256) storage totalTokenAmount,\\n        mapping(address => uint256) storage xVaultAmount\\n    ) external view returns (uint256[] memory feePercentages) {\\n        feePercentages = new uint256[](tokensInAsset.length);\\n\\n        for (uint256 i = 0; i < tokensInAsset.length; ++i) {\\n            uint256 totalAmount = totalTokenAmount[tokensInAsset[i]];\\n            uint256 xAmount = xVaultAmount[tokensInAsset[i]];\\n\\n            if (xAmount >= (1500 * totalAmount) / 1e4) {\\n                feePercentages[i] = 200;\\n            } else if (\\n                xAmount < (1500 * totalAmount) / 1e4 && xAmount >= (500 * totalAmount) / 1e4\\n            ) {\\n                uint256 xAmountPertcentage = (xAmount * 1e4) / totalAmount;\\n                feePercentages[i] = 600 - (400 * (xAmountPertcentage - 500)) / 1000;\\n            } else {\\n                revert(\\\"xAmount percentage error\\\");\\n            }\\n        }\\n    }\\n\\n    function swapToCurrency(\\n        address inputCurrency,\\n        address outputCurrency,\\n        uint256 amount,\\n        address[2] memory wethAndAssetFactory\\n    ) internal returns (uint256) {\\n        require(inputCurrency != address(0), \\\"Internal error\\\");\\n        if (inputCurrency != outputCurrency) {\\n            uint256 outputAmount;\\n            if (outputCurrency == wethAndAssetFactory[0] || outputCurrency == address(0)) {\\n                outputAmount = safeSwap(\\n                    [inputCurrency, wethAndAssetFactory[0]],\\n                    amount,\\n                    wethAndAssetFactory[1],\\n                    0\\n                );\\n            } else {\\n                outputAmount = safeSwap(\\n                    [inputCurrency, wethAndAssetFactory[0]],\\n                    amount,\\n                    wethAndAssetFactory[1],\\n                    0\\n                );\\n                outputAmount = safeSwap(\\n                    [wethAndAssetFactory[0], outputCurrency],\\n                    outputAmount,\\n                    wethAndAssetFactory[1],\\n                    1\\n                );\\n            }\\n            return outputAmount;\\n        } else {\\n            return amount;\\n        }\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        if (token == address(0)) {\\n            require(msg.value == amount, \\\"Value error\\\");\\n        } else {\\n            require(IERC20(token).transferFrom(from, address(this), amount), \\\"TransferFrom failed\\\");\\n        }\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) public {\\n        if (to == address(this)) {\\n            return;\\n        }\\n        if (token == address(0)) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = to.call{value: amount}(new bytes(0));\\n            require(success, \\\"Transfer eth failed\\\");\\n        } else {\\n            require(IERC20(token).transfer(to, amount), \\\"Transfer token failed\\\");\\n        }\\n    }\\n\\n    function checkAllowance(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) public {\\n        uint256 allowance = IERC20(token).allowance(address(this), to);\\n\\n        if (amount > allowance) {\\n            IERC20(token).approve(to, type(uint256).max);\\n        }\\n    }\\n\\n    function getWethFromDex(address dexRouter) public view returns (address) {\\n        try IPancakeRouter02(dexRouter).WETH() returns (address weth) {\\n            return weth;\\n        } catch (bytes memory) {} // solhint-disable-line no-empty-blocks\\n\\n        try IPangolinRouter02(dexRouter).WAVAX() returns (address weth) {\\n            return weth;\\n        } catch (bytes memory) {} // solhint-disable-line no-empty-blocks\\n\\n        try IPancakeRouter02BNB(dexRouter).WBNB() returns (address weth) {\\n            return weth;\\n        } catch (bytes memory) {\\n            return address(0);\\n        }\\n    }\\n\\n    function getTokenDexRouter(address factory, address token) public view returns (address) {\\n        address customDexRouter = IAssetFactory(factory).notDefaultDexRouterToken(token);\\n\\n        if (customDexRouter != address(0)) {\\n            return customDexRouter;\\n        } else {\\n            return IAssetFactory(factory).defaultDexRouter();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/pancake-swap/interfaces/IPancakeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/pancake-swap/interfaces/IPancakeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/pancake-swap/interfaces/IPancakePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPancakeERC20.sol\\\";\\n\\ninterface IPancakePair is IPancakeERC20 {\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/pancake-swap/interfaces/IPancakeRouter01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"/contracts/pancake-swap/interfaces/IPancakeRouter01BNB.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeRouter01BNB {\\n    function factory() external view returns (address);\\n\\n    function WBNB() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityBNB(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountBNBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountBNB,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityBNB(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountBNBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountBNB);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityBNBWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountBNBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountBNB);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactBNBForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactBNB(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForBNB(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapBNBForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"/contracts/pancake-swap/interfaces/IPancakeRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPancakeRouter01.sol\\\";\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/pancake-swap/interfaces/IPancakeRouter02BNB.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPancakeRouter01BNB.sol\\\";\\n\\ninterface IPancakeRouter02BNB is IPancakeRouter01BNB {\\n    function removeLiquidityBNBSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountBNBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountBNB);\\n\\n    function removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountBNBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountBNB);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactBNBForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForBNBSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/pancake-swap/interfaces/IPangolinRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPangolinRouter02 {\\n    function WAVAX() external view returns (address);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function addLiquidityAVAX(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n}\\n\"\r\n    },\r\n    \"/contracts/pancake-swap/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {\r\n      \"/contracts/lib/AssetLib.sol\": {\r\n        \"AssetLib\": \"0xf03Dccaec9A28200A6708c686cf0b8BF26dDc356\"\r\n      },\r\n      \"/contracts/lib/AssetLib2.sol\": {\r\n        \"AssetLib2\": \"0xE248d52eD1A0c68EAbE6D607d535b5e30Ef842c7\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ydrToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dexRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dexFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StakingFactory.Reward[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStaking\",\"type\":\"address\"}],\"name\":\"StakeCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEX_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEX_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YDR_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMasterStaking\",\"type\":\"address\"}],\"name\":\"changeMasterStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"createStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingFactory.Reward[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"}],\"name\":\"inputReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingFactory","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003757232b55e60da4a8793183ac030cfce4c3865d000000000000000000000000ac1994bd71fe2d5a6d09e7b8a861fa406c39de940000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}