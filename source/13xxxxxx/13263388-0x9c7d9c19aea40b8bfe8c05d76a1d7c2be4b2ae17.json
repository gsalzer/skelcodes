{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Timelock/XifraVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"../Token/ERC20/IERC20.sol\\\";\\n\\ncontract XifraVesting {\\n    address immutable private xifraWallet;\\n    address immutable private xifraToken;\\n    uint256 private listingDate;\\n    uint256 private tokensWithdrawn;\\n\\n    uint32 internal constant _1_YEAR_IN_SECONDS = 31536000;\\n    uint32 internal constant _1_MONTH_IN_SECONDS = 2592000;\\n    uint32 internal constant _3_MONTH_IN_SECONDS = _1_MONTH_IN_SECONDS * 3;\\n    uint32 internal constant _6_MONTH_IN_SECONDS = _1_MONTH_IN_SECONDS * 6;\\n    uint32 internal constant _9_MONTH_IN_SECONDS = _1_MONTH_IN_SECONDS * 9;\\n    uint32 internal constant _12_MONTH_IN_SECONDS = _1_MONTH_IN_SECONDS * 12;\\n    uint32 internal constant _15_MONTH_IN_SECONDS = _1_MONTH_IN_SECONDS * 15;\\n    uint32 internal constant _18_MONTH_IN_SECONDS = _1_MONTH_IN_SECONDS * 18;\\n    uint32 internal constant _21_MONTH_IN_SECONDS = _1_MONTH_IN_SECONDS * 21;\\n    uint32 internal constant _24_MONTH_IN_SECONDS = _1_MONTH_IN_SECONDS * 24;\\n    uint32 internal constant _27_MONTH_IN_SECONDS = _1_MONTH_IN_SECONDS * 27;\\n    uint32 internal constant _30_MONTH_IN_SECONDS = _1_MONTH_IN_SECONDS * 30;\\n    uint32 internal constant _33_MONTH_IN_SECONDS = _1_MONTH_IN_SECONDS * 33;\\n    uint32 internal constant _36_MONTH_IN_SECONDS = _1_MONTH_IN_SECONDS * 36;\\n    uint32 internal constant _39_MONTH_IN_SECONDS = _1_MONTH_IN_SECONDS * 39;\\n    uint32 internal constant _42_MONTH_IN_SECONDS = _1_MONTH_IN_SECONDS * 42;\\n    uint32 internal constant _45_MONTH_IN_SECONDS = _1_MONTH_IN_SECONDS * 45;\\n    uint32 internal constant _48_MONTH_IN_SECONDS = _1_MONTH_IN_SECONDS * 48;\\n    \\n    event onUnlockNewTokens(address _user, uint256 _maxTokensUnlocked);\\n\\n    constructor(address _token, uint256 _listingDate) {\\n        xifraToken = _token;\\n        listingDate = _listingDate;\\n        xifraWallet = msg.sender;\\n    }\\n\\n    function unlockTokens() external {\\n        require(listingDate > 0, \\\"NoListingDate\\\");\\n        require(block.timestamp >= listingDate + _1_YEAR_IN_SECONDS, \\\"NotAvailable\\\");\\n\\n        uint256 maxTokensAllowed = 0;\\n        uint256 initTime = listingDate + _1_YEAR_IN_SECONDS;\\n        if ((block.timestamp >= initTime) && (block.timestamp < initTime + _3_MONTH_IN_SECONDS)) {\\n            maxTokensAllowed = 18750000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + _3_MONTH_IN_SECONDS) && (block.timestamp < initTime + _6_MONTH_IN_SECONDS)) {\\n            maxTokensAllowed = 37500000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + _6_MONTH_IN_SECONDS) && (block.timestamp < initTime + _9_MONTH_IN_SECONDS)) {\\n            maxTokensAllowed = 56250000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + _9_MONTH_IN_SECONDS) && (block.timestamp < initTime + _12_MONTH_IN_SECONDS)) {\\n            maxTokensAllowed = 75000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + _12_MONTH_IN_SECONDS) && (block.timestamp < initTime + _15_MONTH_IN_SECONDS)) {\\n            maxTokensAllowed = 92500000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + _15_MONTH_IN_SECONDS) && (block.timestamp < initTime + _18_MONTH_IN_SECONDS)) {\\n            maxTokensAllowed = 110000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + _18_MONTH_IN_SECONDS) && (block.timestamp < initTime + _21_MONTH_IN_SECONDS)) {\\n            maxTokensAllowed = 127500000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + _21_MONTH_IN_SECONDS) && (block.timestamp < initTime + _24_MONTH_IN_SECONDS)) {\\n            maxTokensAllowed = 145000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + _24_MONTH_IN_SECONDS) && (block.timestamp < initTime + _27_MONTH_IN_SECONDS)) {\\n            maxTokensAllowed = 170000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + _27_MONTH_IN_SECONDS) && (block.timestamp < initTime + _30_MONTH_IN_SECONDS)) {\\n            maxTokensAllowed = 195000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + _30_MONTH_IN_SECONDS) && (block.timestamp < initTime + _33_MONTH_IN_SECONDS)) {\\n            maxTokensAllowed = 220000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + _33_MONTH_IN_SECONDS) && (block.timestamp < initTime + _36_MONTH_IN_SECONDS)) {\\n            maxTokensAllowed = 245000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + _36_MONTH_IN_SECONDS) && (block.timestamp < initTime + _39_MONTH_IN_SECONDS)) {\\n            maxTokensAllowed = 270000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + _39_MONTH_IN_SECONDS) && (block.timestamp < initTime + _42_MONTH_IN_SECONDS)) {\\n            maxTokensAllowed = 295000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + _42_MONTH_IN_SECONDS) && (block.timestamp < initTime + _45_MONTH_IN_SECONDS)) {\\n            maxTokensAllowed = 320000000 * 10 ** 18;\\n        } else if ((block.timestamp >= initTime + _45_MONTH_IN_SECONDS) && (block.timestamp < initTime + _48_MONTH_IN_SECONDS)) {\\n            maxTokensAllowed = 345000000 * 10 ** 18;\\n        }\\n\\n        maxTokensAllowed -= tokensWithdrawn;\\n        require(maxTokensAllowed > 0, \\\"NoTokensToUnlock\\\");\\n\\n        tokensWithdrawn += maxTokensAllowed;\\n        require(IERC20(xifraToken).transfer(xifraWallet, maxTokensAllowed));\\n\\n        emit onUnlockNewTokens(msg.sender, maxTokensAllowed);\\n    }\\n\\n    function getTokensInVesting() external view returns(uint256) {\\n        return IERC20(xifraToken).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice OnlyOwner function. Change the listing date to start the vesting\\n     * @param _listDate --> New listing date in UnixDateTime UTC format\\n     */\\n    function setTokenListDate(uint256 _listDate) external {\\n        require(msg.sender == xifraWallet, \\\"BadOwner\\\");\\n        require(block.timestamp <= listingDate, \\\"TokenListedYet\\\");\\n\\n        listingDate = _listDate;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/Token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_listingDate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTokensUnlocked\",\"type\":\"uint256\"}],\"name\":\"onUnlockNewTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getTokensInVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listDate\",\"type\":\"uint256\"}],\"name\":\"setTokenListDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"XifraVesting","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c987b821048edcb9f5aa126125b95e44e2532a6a0000000000000000000000000000000000000000000000000000000061d78280","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}