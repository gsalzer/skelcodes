{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"libraries/BlitmapHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// @author fishboy\\n// @title A helper class for some more Blitmap related things\\n// Credit to the Blitmap contract for several methods here: https://etherscan.io/address/0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63#code\\nlibrary BlitmapHelper {\\n\\n    function uintToHexDigit(uint8 d) public pure returns (bytes1) {\\n        if (0 <= d && d <= 9) {\\n            return bytes1(uint8(bytes1('0')) + d);\\n        } else if (10 <= uint8(d) && uint8(d) <= 15) {\\n            return bytes1(uint8(bytes1('a')) + d - 10);\\n        }\\n        revert();\\n    }\\n\\n    function uintToHexString(uint a) public pure returns (string memory) {\\n        uint count = 0;\\n        uint b = a;\\n        while (b != 0) {\\n            count++;\\n            b /= 16;\\n        }\\n        bytes memory res = new bytes(count);\\n        for (uint i=0; i<count; ++i) {\\n            b = a % 16;\\n            res[count - i - 1] = uintToHexDigit(uint8(b));\\n            a /= 16;\\n        }\\n        \\n        string memory str = string(res);\\n        if (bytes(str).length == 0) {\\n            return \\\"00\\\";\\n        } else if (bytes(str).length == 1) {\\n            return string(abi.encodePacked(\\\"0\\\", str));\\n        }\\n        return str;\\n    }\\n    \\n    function byteToUint(bytes1 b) public pure returns (uint) {\\n        return uint(uint8(b));\\n    }\\n    \\n    function byteToHexString(bytes1 b) public pure returns (string memory) {\\n        return uintToHexString(byteToUint(b));\\n    }\\n\\n    function getColorToUse(uint8 a, uint8 b) public pure returns (uint256) {\\n        if (a == 0 && b == 0) {\\n            return 0;\\n        } else if (a == 1 && b == 0) {\\n           return 1;\\n        } else if (a == 0 && b == 1) {\\n            return 2;\\n        } else {\\n            return 3;\\n        }\\n    }\\n\\n    function getBit(bytes1 b, uint8 loc) internal pure returns (uint8) {\\n        return uint8(b) >> loc & 1;\\n    }\\n\\n    function getColorsAsHex(bytes memory tokenData) public pure returns (string[4] memory) {\\n        return [\\n            string(abi.encodePacked(\\\"#\\\", byteToHexString(tokenData[0]), byteToHexString(tokenData[1]), byteToHexString(tokenData[2]))),\\n            string(abi.encodePacked(\\\"#\\\", byteToHexString(tokenData[3]), byteToHexString(tokenData[4]), byteToHexString(tokenData[5]))),\\n            string(abi.encodePacked(\\\"#\\\", byteToHexString(tokenData[6]), byteToHexString(tokenData[7]), byteToHexString(tokenData[8]))),\\n            string(abi.encodePacked(\\\"#\\\", byteToHexString(tokenData[9]), byteToHexString(tokenData[10]), byteToHexString(tokenData[11])))\\n        ];\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"b\",\"type\":\"bytes1\"}],\"name\":\"byteToHexString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"b\",\"type\":\"bytes1\"}],\"name\":\"byteToUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"a\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"}],\"name\":\"getColorToUse\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"tokenData\",\"type\":\"bytes\"}],\"name\":\"getColorsAsHex\",\"outputs\":[{\"internalType\":\"string[4]\",\"name\":\"\",\"type\":\"string[4]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"d\",\"type\":\"uint8\"}],\"name\":\"uintToHexDigit\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"uintToHexString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"BlitmapHelper","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}