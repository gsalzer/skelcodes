{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"FixedSplitPooledPriceGate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"IPriceGate.sol\\\";\\nimport \\\"IIncinerator.sol\\\";\\n\\ncontract FixedSplitPooledPriceGate is IPriceGate {\\n\\n    struct Gate {\\n        uint ethReceived;\\n        uint ethCost;\\n        address burnToken;\\n        address incinerator;\\n        address payable beneficiary;\\n        uint beneficiaryPct;\\n    }\\n\\n    uint public numGates;\\n    mapping (uint => Gate) public gates;\\n\\n    address public management;\\n\\n    modifier managementOnly() {\\n        require (msg.sender == management, 'Only management may call this');\\n        _;\\n    }\\n\\n    constructor (address mgmt) {\\n        management = mgmt;\\n    }\\n\\n    function addGate(uint _ethCost, uint _beneficiaryPct, address _incinerator, address _burnToken, address payable _beneficiary) external managementOnly {\\n        numGates += 1;\\n        Gate storage gate = gates[numGates];\\n\\n        require(_beneficiaryPct <= 100, 'Percents must be between 0 and 100');\\n\\n        gate.ethCost = _ethCost;\\n        gate.burnToken = _burnToken;\\n        gate.incinerator = _incinerator;\\n        gate.beneficiary = _beneficiary;\\n        gate.beneficiaryPct = _beneficiaryPct;\\n    }\\n\\n    // change the management key\\n    function setManagement(address newMgmt) external managementOnly {\\n        management = newMgmt;\\n    }\\n\\n    function getCost(uint index) override external view returns (uint _ethCost) {\\n        Gate memory gate = gates[index];\\n        return gate.ethCost;\\n    }\\n\\n   function passThruGate(uint index, address) override external payable {\\n        Gate storage gate = gates[index];\\n        require(msg.value >= gate.ethCost, 'Please send more ETH');\\n        gate.ethReceived += msg.value;\\n    }\\n\\n    function distribute(uint index) external {\\n        Gate memory gate = gates[index];\\n        uint balance = gate.ethReceived;\\n        uint beneficiaryAmt = balance * gate.beneficiaryPct / 100;\\n        uint incinerateAmt = balance - beneficiaryAmt;\\n        gate.beneficiary.transfer(beneficiaryAmt);\\n        IIncinerator(gate.incinerator).incinerate{value: incinerateAmt}(gate.burnToken);\\n    }\\n}\\n\"\r\n    },\r\n    \"IPriceGate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\ninterface IPriceGate {\\n\\n    function getCost(uint) external view returns (uint ethCost);\\n\\n    function passThruGate(uint, address) external payable;\\n}\\n\"\r\n    },\r\n    \"IIncinerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\ninterface IIncinerator {\\n\\n    function incinerate(address tokenAddr) external payable;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"FixedSplitPooledPriceGate.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mgmt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_beneficiaryPct\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_incinerator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addGate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incinerator\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"beneficiaryPct\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethCost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"management\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numGates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"passThruGate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMgmt\",\"type\":\"address\"}],\"name\":\"setManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FixedSplitPooledPriceGate","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000288fe43139741f91a8cbb6f4add83811c794851b","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}