{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/tim/src/katana/tokenomics/contracts/VestingContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nstruct Member {\\n  address account;\\n  uint256 totalAmount;\\n  uint256 claimedAmount;\\n  uint256 remainingAmount;\\n  uint256 startTime;\\n  uint256 endTime;\\n  bool locked;\\n}\\n\\ncontract VestingContract is Ownable {\\n\\n  event Claimed(address account, uint256 amount);\\n\\n  event Added(address account, uint256 amount);\\n  event Removed(address account, uint256 amount);\\n\\n  IERC20 kataToken;\\n\\n  string public name;\\n\\n  mapping(address => Member) public members;\\n\\n  uint256 public tgeTime;\\n  uint256 public tgePercent;\\n  uint256 public cliffDuration;\\n  uint256 public cliffPercent;\\n  uint256 public linearDuration;\\n\\n  uint256 public allocatedAmount;\\n\\n  /**\\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\\n   * of the balance will have vested.\\n   * @param _name beneficiary of tokens after they are released\\n   * @param _tgeTime duration in seconds of the period in which tokens will begin to vest\\n   * @param _cliffDuration duration in seconds of the cliff in which tokens will begin to vest\\n   * @param _cliffPercent dd\\n   * @param _linearDuration duration in seconds of the period in which the tokens will vest\\n   */\\n  constructor(\\n    string memory _name,\\n    uint256 _tgeTime,\\n    uint256 _tgePercent,\\n    uint256 _cliffDuration,\\n    uint256 _cliffPercent,\\n    uint256 _linearDuration\\n  ) {\\n    require(_tgeTime > 0, \\\"invalid tgeTime\\\");\\n\\n    name = _name;\\n    tgeTime = _tgeTime;\\n    tgePercent = _tgePercent;\\n    cliffDuration = _cliffDuration;\\n    cliffPercent = _cliffPercent;\\n    linearDuration = _linearDuration;\\n  }\\n\\n  modifier onlyMember() {\\n    require(members[msg.sender].account != address(0), \\\"You are not a valid member\\\");\\n    _;\\n  }\\n\\n  function balance() public view returns (uint256) {\\n    if (address(kataToken) == address(0)) {\\n      return 0;\\n    }\\n\\n    uint256 _balance = kataToken.balanceOf(address(this));\\n    _balance -= allocatedAmount;\\n    return _balance;\\n  }\\n\\n  /**\\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\\n   */\\n  function claimableAmount(address addr, uint256 timestamp) public view returns (uint256) {\\n    Member memory _member = members[addr];\\n\\n    uint256 vested = vestedAmount(addr, timestamp);\\n\\n    if (vested < _member.claimedAmount) {\\n      return 0;\\n    }\\n\\n    return vested - _member.claimedAmount;\\n  }\\n\\n  /**\\n   * @dev Calculates the amount that has already vested.\\n   */\\n  function vestedAmount(address addr, uint256 timestamp) public view returns (uint256) {\\n    if (address(kataToken) == address(0)) {\\n      return 0;\\n    }\\n\\n    Member memory _member = members[addr];\\n\\n    if (timestamp < _member.startTime) {\\n      return 0;\\n    }\\n\\n    uint256 _tgeAmount = (_member.totalAmount * tgePercent) / 100;\\n    uint256 _cliffTime = _member.startTime + cliffDuration;\\n\\n    if (timestamp < _cliffTime) {\\n      return _tgeAmount;\\n    }\\n\\n    if (_member.endTime != 0) {\\n      return _member.totalAmount;\\n    }\\n\\n    if (timestamp >= (_cliffTime + linearDuration)) {\\n      return _member.totalAmount;\\n    }\\n\\n    uint256 _cliffAmount = (_member.totalAmount * cliffPercent) / 100;\\n\\n    uint256 _linearAmount = (_member.totalAmount - _tgeAmount) - _cliffAmount;\\n    _linearAmount = (_linearAmount * (timestamp - _cliffTime)) / linearDuration;\\n\\n    return _tgeAmount + _cliffAmount + _linearAmount;\\n  }\\n\\n  function claim() external onlyMember {\\n    Member memory _member = members[msg.sender];\\n    uint256 timestamp = block.timestamp;\\n\\n    uint256 claimable = claimableAmount(_member.account, timestamp);\\n\\n    require(claimable > 0, \\\"no tokens claimable\\\");\\n    require(_member.totalAmount >= (_member.claimedAmount + claimable), \\\"token pool exhausted\\\");\\n\\n    kataToken.transfer(_member.account, claimable);\\n    _member.claimedAmount += claimable;\\n    allocatedAmount -= claimable;\\n\\n    members[msg.sender] = _member;\\n\\n    emit Claimed(_member.account, claimable);\\n  }\\n\\n  function addMembers(address[] calldata addrs, uint256[] calldata tokenAmounts) external onlyOwner {\\n    uint256 _balance = balance();\\n\\n    for (uint256 i = 0; i < addrs.length; i++) {\\n      Member memory _member = members[addrs[i]];\\n\\n      require(tokenAmounts[i] <= _balance + _member.remainingAmount, 'allocation would exceed remaining balance');\\n\\n      if (_member.account == address(0)) {\\n        _member.account = addrs[i];\\n        _member.startTime = block.timestamp;\\n\\n        if (_member.startTime < tgeTime) {\\n          _member.startTime = tgeTime;\\n        }\\n      }\\n\\n      _member.endTime = 0;\\n      _member.totalAmount += tokenAmounts[i];\\n\\n      if (_member.remainingAmount > tokenAmounts[i]) {\\n        _member.remainingAmount -= tokenAmounts[i];\\n      } else {\\n        allocatedAmount += tokenAmounts[i] - _member.remainingAmount;\\n        _balance -= tokenAmounts[i] - _member.remainingAmount;\\n        _member.remainingAmount = 0;\\n      }\\n\\n      members[addrs[i]] = _member;\\n\\n      emit Added(addrs[i], tokenAmounts[i]);\\n    }\\n  }\\n\\n  function lockMember(address addr) external onlyOwner {\\n    require(members[addr].account != address(0), \\\"member not initialized\\\");\\n    require(!members[addr].locked, \\\"member already locked\\\");\\n    members[addr].locked = true;\\n  }\\n\\n  function setStartTime(address addr, uint256 startTime) external onlyOwner {\\n    require(members[addr].account != address(0), \\\"member not initialized\\\");\\n    require(!members[addr].locked, \\\"member locked\\\");\\n    members[addr].startTime = startTime;\\n  }\\n\\n  function removeMember(address addr) external onlyOwner {\\n    Member memory _member = members[addr];\\n\\n    uint256 remaining = _member.totalAmount;\\n    _member.totalAmount = _member.claimedAmount + claimableAmount(addr, block.timestamp);\\n    remaining -= _member.totalAmount;\\n\\n    if (_member.locked) {\\n      // don't refund to pool\\n      _member.remainingAmount += remaining;\\n    } else {\\n      allocatedAmount -= remaining;\\n    }\\n\\n    _member.endTime = block.timestamp;\\n\\n    members[addr] = _member;\\n\\n    emit Removed(addr, remaining);\\n  }\\n\\n  function setKataToken(address _erc) external onlyOwner {\\n    kataToken = IERC20(_erc);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tgeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tgePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_linearDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Added\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Removed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"addMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocatedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliffDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliffPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linearDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"lockMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc\",\"type\":\"address\"}],\"name\":\"setKataToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VestingContract","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000061c487e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b18a0000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000003b5380000000000000000000000000000000000000000000000000000000000000000164b6174616e6120496e75202d2041647669736f72203200000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}