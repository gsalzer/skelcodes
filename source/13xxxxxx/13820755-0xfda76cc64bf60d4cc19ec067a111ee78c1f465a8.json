{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/Globals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nuint256 constant SECONDS_IN_THE_YEAR = 365 * 24 * 60 * 60; // 365 days * 24 hours * 60 minutes * 60 seconds\\nuint256 constant DAYS_IN_THE_YEAR = 365;\\nuint256 constant MAX_INT = type(uint256).max;\\n\\nuint256 constant DECIMALS18 = 10**18;\\n\\nuint256 constant PRECISION = 10**25;\\nuint256 constant PERCENTAGE_100 = 100 * PRECISION;\\n\\nuint256 constant BLOCKS_PER_DAY = 6450;\\nuint256 constant BLOCKS_PER_YEAR = BLOCKS_PER_DAY * 365;\\n\\nuint256 constant APY_TOKENS = DECIMALS18;\\n\\nuint256 constant PROTOCOL_PERCENTAGE = 20 * PRECISION;\\n\\nuint256 constant DEFAULT_REBALANCING_THRESHOLD = 10**23;\\n\\nuint256 constant EPOCH_DAYS_AMOUNT = 7;\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/LeveragePortfolioView.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/ILeveragePortfolioView.sol\\\";\\nimport \\\"./interfaces/IPolicyBookFacade.sol\\\";\\nimport \\\"./interfaces/IPolicyBookRegistry.sol\\\";\\nimport \\\"./interfaces/IContractsRegistry.sol\\\";\\nimport \\\"./interfaces/IPolicyQuote.sol\\\";\\n\\nimport \\\"./abstract/AbstractDependant.sol\\\";\\nimport \\\"./Globals.sol\\\";\\n\\ncontract LeveragePortfolioView is ILeveragePortfolioView, AbstractDependant {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant SAFE_MIN_UR = 16 * PRECISION; // 16%\\n\\n    uint256 public constant RISKY_MIN_UR = 64 * 10**24; //6.4%\\n\\n    IPolicyBookRegistry public policyBookRegistry;\\n\\n    //new state post v2 deployment\\n    IPolicyQuote public policyQuote;\\n\\n    function setDependencies(IContractsRegistry _contractsRegistry)\\n        external\\n        override\\n        onlyInjectorOrZero\\n    {\\n        policyBookRegistry = IPolicyBookRegistry(\\n            _contractsRegistry.getPolicyBookRegistryContract()\\n        );\\n\\n        policyQuote = IPolicyQuote(_contractsRegistry.getPolicyQuoteContract());\\n    }\\n\\n    /// @notice calc M factor by formual M = min( abs((1/ (Tur-UR))*d) /a, max)\\n    /// @param poolUR uint256 utitilization ratio for a coverage pool\\n    /// @return uint256 M facotr\\n    function calcM(uint256 poolUR, address leveragePoolAddress)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        ILeveragePortfolio leveragePool = ILeveragePortfolio(leveragePoolAddress);\\n        uint256 _targetUR = leveragePool.targetUR();\\n\\n        uint256 _PRECISION = 10**27;\\n        uint256 _ur;\\n        if (_targetUR > poolUR) {\\n            _ur = _targetUR.sub(poolUR);\\n        } else {\\n            _ur = poolUR.sub(_targetUR);\\n        }\\n\\n        uint256 _multiplier =\\n            Math.min(\\n                leveragePool.d_ProtocolConstant().mul(_PRECISION).div(_ur).mul(_PRECISION).div(\\n                    leveragePool.a_ProtocolConstant()\\n                ),\\n                leveragePool.max_ProtocolConstant()\\n            );\\n\\n        return _multiplier;\\n    }\\n\\n    /// @dev If Formula 1 < 0 or Formula 1 causes dividing by 0, then the system will use Formula 2.\\n    /// Otherwise, it is always the lowest amount calculated by Formula1 or Formula2.\\n    function calcMaxLevFunds(ILeveragePortfolio.LevFundsFactors memory factors)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        IPolicyBook _coveragepool = IPolicyBook(factors.policyBookAddr);\\n\\n        uint256 _poolTotalLiquidity = _coveragepool.totalLiquidity();\\n        uint256 _totalCoverTokens = _coveragepool.totalCoverTokens();\\n        uint256 _poolUR;\\n        if (_poolTotalLiquidity > 0) {\\n            _poolUR = _totalCoverTokens.mul(PERCENTAGE_100).div(_poolTotalLiquidity);\\n        }\\n        uint256 _minUR = _getPoolMINUR(factors.policyBookAddr);\\n\\n        uint256 _formula2;\\n\\n        uint256 _ur = Math.max(_poolUR, _minUR);\\n\\n        uint256 _res1 = _poolUR.mul(_poolTotalLiquidity).div(PERCENTAGE_100);\\n        uint256 _res2 = _ur.mul(_poolTotalLiquidity).div(_minUR);\\n\\n        if (_res2 > _poolTotalLiquidity && factors.netMPL > 0) {\\n            _formula2 = (_res2.sub(_poolTotalLiquidity)).mul(factors.netMPL).div(\\n                factors.netMPL.add(factors.netMPLn)\\n            );\\n        }\\n\\n        if (_res1 > factors.netMPL) {\\n            uint256 _formula1 = _res1.sub(factors.netMPL);\\n            _formula1 = factors.netMPL.mul(_poolTotalLiquidity).div(_formula1);\\n\\n            return Math.min(_formula1, _formula2);\\n        } else {\\n            return _formula2;\\n        }\\n    }\\n\\n    function calcvStableFormulaforAllPools() internal view returns (uint256) {\\n        uint256 _coveragePoolCount = policyBookRegistry.count();\\n        address[] memory _policyBooksArr = policyBookRegistry.list(0, _coveragePoolCount);\\n\\n        uint256 sum;\\n        for (uint256 i = 0; i < _policyBooksArr.length; i++) {\\n            if (policyBookRegistry.isUserLeveragePool(_policyBooksArr[i])) continue;\\n            sum += calcvStableFormulaforOnePool(_policyBooksArr[i]);\\n        }\\n        return sum;\\n    }\\n\\n    function calcvStableFormulaforOnePool(address _policybookAddress)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 res;\\n\\n        IPolicyBook _policyBook = IPolicyBook(_policybookAddress);\\n\\n        uint256 _poolTotalLiquidity = _policyBook.totalLiquidity();\\n        uint256 _poolCoverToken = _policyBook.totalCoverTokens();\\n\\n        if (\\n            _poolTotalLiquidity == 0 ||\\n            _poolCoverToken == 0 ||\\n            getPolicyBookFacade(_policybookAddress).reinsurancePoolMPL() == 0\\n        ) return res;\\n\\n        uint256 _poolUR = _poolCoverToken.mul(PERCENTAGE_100).div(_poolTotalLiquidity);\\n        res = (_poolUR).mul(_poolTotalLiquidity).div(PERCENTAGE_100).mul(_poolUR).div(\\n            PERCENTAGE_100\\n        );\\n\\n        return res;\\n    }\\n\\n    function calcBMIMultiplier(IUserLeveragePool.BMIMultiplierFactors memory factors)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            factors\\n                .poolMultiplier\\n                .mul(factors.leverageProvided)\\n                .mul(factors.multiplier)\\n                .div(PERCENTAGE_100)\\n                .mul(ILeveragePortfolio(msg.sender).a_ProtocolConstant())\\n                .div(PERCENTAGE_100)\\n                .div(10**3);\\n    }\\n\\n    /// @notice Returns the policybook facade that stores the leverage storage from a policybook\\n    /// @param _policybookAddress address of the policybook\\n    /// @return _coveragePool\\n    function getPolicyBookFacade(address _policybookAddress)\\n        public\\n        view\\n        override\\n        returns (IPolicyBookFacade _coveragePool)\\n    {\\n        IPolicyBook _policyBook = IPolicyBook(_policybookAddress);\\n        _coveragePool = IPolicyBookFacade(_policyBook.policyBookFacade());\\n    }\\n\\n    function calcNetMPLn(\\n        ILeveragePortfolio.LeveragePortfolio leveragePoolType,\\n        address _policyBookFacade\\n    ) public view override returns (uint256 _netMPLn) {\\n        address[] memory _userLeverageArr =\\n            policyBookRegistry.listByType(\\n                IPolicyBookFabric.ContractType.VARIOUS,\\n                0,\\n                policyBookRegistry.countByType(IPolicyBookFabric.ContractType.VARIOUS)\\n            );\\n\\n        for (uint256 i = 0; i < _userLeverageArr.length; i++) {\\n            if (leveragePoolType == ILeveragePortfolio.LeveragePortfolio.USERLEVERAGEPOOL) {\\n                if (_userLeverageArr[i] == address(msg.sender)) continue;\\n            }\\n            _netMPLn += ILeveragePortfolio(_userLeverageArr[i])\\n                .totalLiquidity()\\n                .mul(IPolicyBookFacade(_policyBookFacade).userleveragedMPL())\\n                .div(PERCENTAGE_100);\\n        }\\n    }\\n\\n    function calcMaxVirtualFunds(address policyBookAddress)\\n        external\\n        view\\n        override\\n        returns (uint256 _amountToDeploy, uint256 _maxAmount)\\n    {\\n        IPolicyBookFacade _policyBookFacade = getPolicyBookFacade(policyBookAddress);\\n        uint256 _mpl = _policyBookFacade.reinsurancePoolMPL();\\n\\n        uint256 _netMPL =\\n            _mpl.mul(ILeveragePortfolio(msg.sender).totalLiquidity()).div(PERCENTAGE_100);\\n\\n        uint256 _netMPLn =\\n            calcNetMPLn(\\n                ILeveragePortfolio.LeveragePortfolio.REINSURANCEPOOL,\\n                address(_policyBookFacade)\\n            );\\n\\n        _maxAmount = calcMaxLevFunds(\\n            ILeveragePortfolio.LevFundsFactors(_netMPL, _netMPLn, policyBookAddress)\\n        );\\n\\n        uint256 result1 = calcvStableFormulaforOnePool(policyBookAddress);\\n\\n        uint256 result2 = calcvStableFormulaforAllPools();\\n\\n        if (result2 != 0) {\\n            _amountToDeploy = result1.mul(ILeveragePortfolio(msg.sender).totalLiquidity()).div(\\n                result2\\n            );\\n        }\\n    }\\n\\n    function _getPoolMINUR(address policyBookAddr) internal view returns (uint256 _minUR) {\\n        IPolicyBookFacade _policyBookFacade = getPolicyBookFacade(policyBookAddr);\\n        _minUR = policyQuote.getMINUR(_policyBookFacade.safePricingModel());\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/abstract/AbstractDependant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"../interfaces/IContractsRegistry.sol\\\";\\n\\nabstract contract AbstractDependant {\\n    /// @dev keccak256(AbstractDependant.setInjector(address)) - 1\\n    bytes32 private constant _INJECTOR_SLOT =\\n        0xd6b8f2e074594ceb05d47c27386969754b6ad0c15e5eb8f691399cd0be980e76;\\n\\n    modifier onlyInjectorOrZero() {\\n        address _injector = injector();\\n\\n        require(_injector == address(0) || _injector == msg.sender, \\\"Dependant: Not an injector\\\");\\n        _;\\n    }\\n\\n    function setInjector(address _injector) external onlyInjectorOrZero {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            sstore(slot, _injector)\\n        }\\n    }\\n\\n    /// @dev has to apply onlyInjectorOrZero() modifier\\n    function setDependencies(IContractsRegistry) external virtual;\\n\\n    function injector() public view returns (address _injector) {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            _injector := sload(slot)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IClaimingRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\n\\ninterface IClaimingRegistry {\\n    enum ClaimStatus {\\n        CAN_CLAIM,\\n        UNCLAIMABLE,\\n        PENDING,\\n        AWAITING_CALCULATION,\\n        REJECTED_CAN_APPEAL,\\n        REJECTED,\\n        ACCEPTED\\n    }\\n\\n    struct ClaimInfo {\\n        address claimer;\\n        address policyBookAddress;\\n        string evidenceURI;\\n        uint256 dateSubmitted;\\n        uint256 dateEnded;\\n        bool appeal;\\n        ClaimStatus status;\\n        uint256 claimAmount;\\n    }\\n\\n    /// @notice returns anonymous voting duration\\n    function anonymousVotingDuration(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns the whole voting duration\\n    function votingDuration(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns how many time should pass before anyone could calculate a claim result\\n    function anyoneCanCalculateClaimResultAfter(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns true if a user can buy new policy of specified PolicyBook\\n    function canBuyNewPolicy(address buyer, address policyBookAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice submits new PolicyBook claim for the user\\n    function submitClaim(\\n        address user,\\n        address policyBookAddress,\\n        string calldata evidenceURI,\\n        uint256 cover,\\n        bool appeal\\n    ) external returns (uint256);\\n\\n    /// @notice returns true if the claim with this index exists\\n    function claimExists(uint256 index) external view returns (bool);\\n\\n    /// @notice returns claim submition time\\n    function claimSubmittedTime(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns claim end time or zero in case it is pending\\n    function claimEndTime(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns true if the claim is anonymously votable\\n    function isClaimAnonymouslyVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if the claim is exposably votable\\n    function isClaimExposablyVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if claim is anonymously votable or exposably votable\\n    function isClaimVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if a claim can be calculated by anyone\\n    function canClaimBeCalculatedByAnyone(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if this claim is pending or awaiting\\n    function isClaimPending(uint256 index) external view returns (bool);\\n\\n    /// @notice returns how many claims the holder has\\n    function countPolicyClaimerClaims(address user) external view returns (uint256);\\n\\n    /// @notice returns how many pending claims are there\\n    function countPendingClaims() external view returns (uint256);\\n\\n    /// @notice returns how many claims are there\\n    function countClaims() external view returns (uint256);\\n\\n    /// @notice returns a claim index of it's claimer and an ordinal number\\n    function claimOfOwnerIndexAt(address claimer, uint256 orderIndex)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice returns pending claim index by its ordinal index\\n    function pendingClaimIndexAt(uint256 orderIndex) external view returns (uint256);\\n\\n    /// @notice returns claim index by its ordinal index\\n    function claimIndexAt(uint256 orderIndex) external view returns (uint256);\\n\\n    /// @notice returns current active claim index by policybook and claimer\\n    function claimIndex(address claimer, address policyBookAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice returns true if the claim is appealed\\n    function isClaimAppeal(uint256 index) external view returns (bool);\\n\\n    /// @notice returns current status of a claim\\n    function policyStatus(address claimer, address policyBookAddress)\\n        external\\n        view\\n        returns (ClaimStatus);\\n\\n    /// @notice returns current status of a claim\\n    function claimStatus(uint256 index) external view returns (ClaimStatus);\\n\\n    /// @notice returns the claim owner (claimer)\\n    function claimOwner(uint256 index) external view returns (address);\\n\\n    /// @notice returns the claim PolicyBook\\n    function claimPolicyBook(uint256 index) external view returns (address);\\n\\n    /// @notice returns claim info by its index\\n    function claimInfo(uint256 index) external view returns (ClaimInfo memory _claimInfo);\\n\\n    function getAllPendingClaimsAmount() external view returns (uint256 _totalClaimsAmount);\\n\\n    function getClaimableAmounts(uint256[] memory _claimIndexes) external view returns (uint256);\\n\\n    /// @notice marks the user's claim as Accepted\\n    function acceptClaim(uint256 index) external;\\n\\n    /// @notice marks the user's claim as Rejected\\n    function rejectClaim(uint256 index) external;\\n\\n    /// @notice Update Image Uri in case it contains material that is ilegal\\n    ///         or offensive.\\n    /// @dev Only the owner of the PolicyBookAdmin can erase/update evidenceUri.\\n    /// @param _claimIndex Claim Index that is going to be updated\\n    /// @param _newEvidenceURI New evidence uri. It can be blank.\\n    function updateImageUriOfClaim(uint256 _claimIndex, string calldata _newEvidenceURI) external;\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IContractsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IContractsRegistry {\\n    function getUniswapRouterContract() external view returns (address);\\n\\n    function getUniswapBMIToETHPairContract() external view returns (address);\\n\\n    function getUniswapBMIToUSDTPairContract() external view returns (address);\\n\\n    function getSushiswapRouterContract() external view returns (address);\\n\\n    function getSushiswapBMIToETHPairContract() external view returns (address);\\n\\n    function getSushiswapBMIToUSDTPairContract() external view returns (address);\\n\\n    function getSushiSwapMasterChefV2Contract() external view returns (address);\\n\\n    function getWETHContract() external view returns (address);\\n\\n    function getUSDTContract() external view returns (address);\\n\\n    function getBMIContract() external view returns (address);\\n\\n    function getPriceFeedContract() external view returns (address);\\n\\n    function getPolicyBookRegistryContract() external view returns (address);\\n\\n    function getPolicyBookFabricContract() external view returns (address);\\n\\n    function getBMICoverStakingContract() external view returns (address);\\n\\n    function getBMICoverStakingViewContract() external view returns (address);\\n\\n    function getLegacyRewardsGeneratorContract() external view returns (address);\\n\\n    function getRewardsGeneratorContract() external view returns (address);\\n\\n    function getBMIUtilityNFTContract() external view returns (address);\\n\\n    function getNFTStakingContract() external view returns (address);\\n\\n    function getLiquidityMiningContract() external view returns (address);\\n\\n    function getClaimingRegistryContract() external view returns (address);\\n\\n    function getPolicyRegistryContract() external view returns (address);\\n\\n    function getLiquidityRegistryContract() external view returns (address);\\n\\n    function getClaimVotingContract() external view returns (address);\\n\\n    function getReinsurancePoolContract() external view returns (address);\\n\\n    function getLeveragePortfolioViewContract() external view returns (address);\\n\\n    function getCapitalPoolContract() external view returns (address);\\n\\n    function getPolicyBookAdminContract() external view returns (address);\\n\\n    function getPolicyQuoteContract() external view returns (address);\\n\\n    function getLegacyBMIStakingContract() external view returns (address);\\n\\n    function getBMIStakingContract() external view returns (address);\\n\\n    function getSTKBMIContract() external view returns (address);\\n\\n    function getVBMIContract() external view returns (address);\\n\\n    function getLegacyLiquidityMiningStakingContract() external view returns (address);\\n\\n    function getLiquidityMiningStakingETHContract() external view returns (address);\\n\\n    function getLiquidityMiningStakingUSDTContract() external view returns (address);\\n\\n    function getReputationSystemContract() external view returns (address);\\n\\n    function getAaveProtocolContract() external view returns (address);\\n\\n    function getAaveLendPoolAddressProvdierContract() external view returns (address);\\n\\n    function getAaveATokenContract() external view returns (address);\\n\\n    function getCompoundProtocolContract() external view returns (address);\\n\\n    function getCompoundCTokenContract() external view returns (address);\\n\\n    function getCompoundComptrollerContract() external view returns (address);\\n\\n    function getYearnProtocolContract() external view returns (address);\\n\\n    function getYearnVaultContract() external view returns (address);\\n\\n    function getYieldGeneratorContract() external view returns (address);\\n\\n    function getShieldMiningContract() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/ILeveragePortfolio.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\ninterface ILeveragePortfolio {\\n    enum LeveragePortfolio {USERLEVERAGEPOOL, REINSURANCEPOOL}\\n    struct LevFundsFactors {\\n        uint256 netMPL;\\n        uint256 netMPLn;\\n        address policyBookAddr;\\n        // uint256 poolTotalLiquidity;\\n        // uint256 poolUR;\\n        // uint256 minUR;\\n    }\\n\\n    function targetUR() external view returns (uint256);\\n\\n    function d_ProtocolConstant() external view returns (uint256);\\n\\n    function a_ProtocolConstant() external view returns (uint256);\\n\\n    function max_ProtocolConstant() external view returns (uint256);\\n\\n    /// @notice deploy lStable from user leverage pool or reinsurance pool using 2 formulas: access by policybook.\\n    /// @param leveragePoolType LeveragePortfolio is determine the pool which call the function\\n    function deployLeverageStableToCoveragePools(LeveragePortfolio leveragePoolType)\\n        external\\n        returns (uint256);\\n\\n    /// @notice deploy the vStable from RP in v2 and for next versions it will be from RP and LP : access by policybook.\\n    function deployVirtualStableToCoveragePools() external returns (uint256);\\n\\n    /// @notice set the threshold % for re-evaluation of the lStable provided across all Coverage pools : access by owner\\n    /// @param threshold uint256 is the reevaluatation threshold\\n    function setRebalancingThreshold(uint256 threshold) external;\\n\\n    /// @notice set the protocol constant : access by owner\\n    /// @param _targetUR uint256 target utitlization ration\\n    /// @param _d_ProtocolConstant uint256 D protocol constant\\n    /// @param  _a_ProtocolConstant uint256 A protocol constant\\n    /// @param _max_ProtocolConstant uint256 the max % included\\n    function setProtocolConstant(\\n        uint256 _targetUR,\\n        uint256 _d_ProtocolConstant,\\n        uint256 _a_ProtocolConstant,\\n        uint256 _max_ProtocolConstant\\n    ) external;\\n\\n    /// @notice calc M factor by formual M = min( abs((1/ (Tur-UR))*d) /a, max)\\n    /// @param poolUR uint256 utitilization ratio for a coverage pool\\n    /// @return uint256 M facotr\\n    //function calcM(uint256 poolUR) external returns (uint256);\\n\\n    /// @return uint256 the amount of vStable stored in the pool\\n    function totalLiquidity() external view returns (uint256);\\n\\n    /// @notice add the portion of 80% of premium to user leverage pool where the leverage provide lstable : access policybook\\n    /// add the 20% of premium + portion of 80% of premium where reisnurance pool participate in coverage pools (vStable)  : access policybook\\n    /// @param epochsNumber uint256 the number of epochs which the policy holder will pay a premium for\\n    /// @param  premiumAmount uint256 the premium amount which is a portion of 80% of the premium\\n    function addPolicyPremium(uint256 epochsNumber, uint256 premiumAmount) external;\\n\\n    /// @notice Used to get a list of coverage pools which get leveraged , use with count()\\n    /// @return _coveragePools a list containing policybook addresses\\n    function listleveragedCoveragePools(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _coveragePools);\\n\\n    /// @notice get count of coverage pools which get leveraged\\n    function countleveragedCoveragePools() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/ILeveragePortfolioView.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ILeveragePortfolio.sol\\\";\\nimport \\\"./IUserLeveragePool.sol\\\";\\n\\ninterface ILeveragePortfolioView {\\n    function calcM(uint256 poolUR, address leveragePoolAddress) external view returns (uint256);\\n\\n    function calcMaxLevFunds(ILeveragePortfolio.LevFundsFactors memory factors)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calcBMIMultiplier(IUserLeveragePool.BMIMultiplierFactors memory factors)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPolicyBookFacade(address _policybookAddress)\\n        external\\n        view\\n        returns (IPolicyBookFacade _coveragePool);\\n\\n    function calcNetMPLn(\\n        ILeveragePortfolio.LeveragePortfolio leveragePoolType,\\n        address _policyBookFacade\\n    ) external view returns (uint256 _netMPLn);\\n\\n    function calcMaxVirtualFunds(address policyBookAddress)\\n        external\\n        returns (uint256 _amountToDeploy, uint256 _maxAmount);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IPolicyBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\nimport \\\"./IClaimingRegistry.sol\\\";\\nimport \\\"./IPolicyBookFacade.sol\\\";\\n\\ninterface IPolicyBook {\\n    enum WithdrawalStatus {NONE, PENDING, READY, EXPIRED}\\n\\n    struct PolicyHolder {\\n        uint256 coverTokens;\\n        uint256 startEpochNumber;\\n        uint256 endEpochNumber;\\n        uint256 paid;\\n        uint256 reinsurancePrice;\\n    }\\n\\n    struct WithdrawalInfo {\\n        uint256 withdrawalAmount;\\n        uint256 readyToWithdrawDate;\\n        bool withdrawalAllowed;\\n    }\\n\\n    struct BuyPolicyParameters {\\n        address buyer;\\n        address holder;\\n        uint256 epochsNumber;\\n        uint256 coverTokens;\\n        uint256 distributorFee;\\n        address distributor;\\n    }\\n\\n    function policyHolders(address _holder)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function policyBookFacade() external view returns (IPolicyBookFacade);\\n\\n    function setPolicyBookFacade(address _policyBookFacade) external;\\n\\n    function EPOCH_DURATION() external view returns (uint256);\\n\\n    function stblDecimals() external view returns (uint256);\\n\\n    function READY_TO_WITHDRAW_PERIOD() external view returns (uint256);\\n\\n    function whitelisted() external view returns (bool);\\n\\n    function epochStartTime() external view returns (uint256);\\n\\n    // @TODO: should we let DAO to change contract address?\\n    /// @notice Returns address of contract this PolicyBook covers, access: ANY\\n    /// @return _contract is address of covered contract\\n    function insuranceContractAddress() external view returns (address _contract);\\n\\n    /// @notice Returns type of contract this PolicyBook covers, access: ANY\\n    /// @return _type is type of contract\\n    function contractType() external view returns (IPolicyBookFabric.ContractType _type);\\n\\n    function totalLiquidity() external view returns (uint256);\\n\\n    function totalCoverTokens() external view returns (uint256);\\n\\n    // /// @notice return MPL for user leverage pool\\n    // function userleveragedMPL() external view returns (uint256);\\n\\n    // /// @notice return MPL for reinsurance pool\\n    // function reinsurancePoolMPL() external view returns (uint256);\\n\\n    // function bmiRewardMultiplier() external view returns (uint256);\\n\\n    function withdrawalsInfo(address _userAddr)\\n        external\\n        view\\n        returns (\\n            uint256 _withdrawalAmount,\\n            uint256 _readyToWithdrawDate,\\n            bool _withdrawalAllowed\\n        );\\n\\n    function __PolicyBook_init(\\n        address _insuranceContract,\\n        IPolicyBookFabric.ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol\\n    ) external;\\n\\n    function whitelist(bool _whitelisted) external;\\n\\n    function getEpoch(uint256 time) external view returns (uint256);\\n\\n    /// @notice get STBL equivalent\\n    function convertBMIXToSTBL(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice get BMIX equivalent\\n    function convertSTBLToBMIX(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice submits new claim of the policy book\\n    function submitClaimAndInitializeVoting(string calldata evidenceURI) external;\\n\\n    /// @notice submits new appeal claim of the policy book\\n    function submitAppealAndInitializeVoting(string calldata evidenceURI) external;\\n\\n    /// @notice updates info on claim acceptance\\n    function commitClaim(\\n        address claimer,\\n        uint256 claimAmount,\\n        uint256 claimEndTime,\\n        IClaimingRegistry.ClaimStatus status\\n    ) external;\\n\\n    /// @notice forces an update of RewardsGenerator multiplier\\n    function forceUpdateBMICoverStakingRewardMultiplier() external;\\n\\n    /// @notice function to get precise current cover and liquidity\\n    function getNewCoverAndLiquidity()\\n        external\\n        view\\n        returns (uint256 newTotalCoverTokens, uint256 newTotalLiquidity);\\n\\n    /// @notice view function to get precise policy price\\n    /// @param _epochsNumber is number of epochs to cover\\n    /// @param _coverTokens is number of tokens to cover\\n    /// @param _buyer address of the user who buy the policy\\n    /// @return totalSeconds is number of seconds to cover\\n    /// @return totalPrice is the policy price which will pay by the buyer\\n    function getPolicyPrice(\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens,\\n        address _buyer\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalSeconds,\\n            uint256 totalPrice,\\n            uint256 pricePercentage\\n        );\\n\\n    /// @notice Let user to buy policy by supplying stable coin, access: ANY\\n    /// @param _buyer who is transferring funds\\n    /// @param _holder who owns coverage\\n    /// @param _epochsNumber period policy will cover\\n    /// @param _coverTokens amount paid for the coverage\\n    /// @param _distributorFee distributor fee (commission). It can't be greater than PROTOCOL_PERCENTAGE\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\n    function buyPolicy(\\n        address _buyer,\\n        address _holder,\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens,\\n        uint256 _distributorFee,\\n        address _distributor\\n    ) external returns (uint256, uint256);\\n\\n    function updateEpochsInfo() external;\\n\\n    function secondsToEndCurrentEpoch() external view returns (uint256);\\n\\n    /// @notice Let eligible contracts add liqiudity for another user by supplying stable coin\\n    /// @param _liquidityHolderAddr is address of address to assign cover\\n    /// @param _liqudityAmount is amount of stable coin tokens to secure\\n    function addLiquidityFor(address _liquidityHolderAddr, uint256 _liqudityAmount) external;\\n\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\n    /// @param _liquidityBuyerAddr address the one that transfer funds\\n    /// @param _liquidityHolderAddr address the one that owns liquidity\\n    /// @param _liquidityAmount uint256 amount to be added on behalf the sender\\n    /// @param _stakeSTBLAmount uint256 the staked amount if add liq and stake\\n    function addLiquidity(\\n        address _liquidityBuyerAddr,\\n        address _liquidityHolderAddr,\\n        uint256 _liquidityAmount,\\n        uint256 _stakeSTBLAmount\\n    ) external;\\n\\n    function getAvailableBMIXWithdrawableAmount(address _userAddr) external view returns (uint256);\\n\\n    function getWithdrawalStatus(address _userAddr) external view returns (WithdrawalStatus);\\n\\n    function requestWithdrawal(uint256 _tokensToWithdraw, address _user) external;\\n\\n    // function requestWithdrawalWithPermit(\\n    //     uint256 _tokensToWithdraw,\\n    //     uint8 _v,\\n    //     bytes32 _r,\\n    //     bytes32 _s\\n    // ) external;\\n\\n    function unlockTokens() external;\\n\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\n    function withdrawLiquidity(address sender) external returns (uint256);\\n\\n    function getAPY() external view returns (uint256);\\n\\n    /// @notice Getting user stats, access: ANY\\n    function userStats(address _user) external view returns (PolicyHolder memory);\\n\\n    /// @notice Getting number stats, access: ANY\\n    /// @return _maxCapacities is a max token amount that a user can buy\\n    /// @return _totalSTBLLiquidity is PolicyBook's liquidity\\n    /// @return _totalLeveragedLiquidity is PolicyBook's leveraged liquidity\\n    /// @return _stakedSTBL is how much stable coin are staked on this PolicyBook\\n    /// @return _annualProfitYields is its APY\\n    /// @return _annualInsuranceCost is percentage of cover tokens that is required to be paid for 1 year of insurance\\n    function numberStats()\\n        external\\n        view\\n        returns (\\n            uint256 _maxCapacities,\\n            uint256 _totalSTBLLiquidity,\\n            uint256 _totalLeveragedLiquidity,\\n            uint256 _stakedSTBL,\\n            uint256 _annualProfitYields,\\n            uint256 _annualInsuranceCost,\\n            uint256 _bmiXRatio\\n        );\\n\\n    /// @notice Getting info, access: ANY\\n    /// @return _symbol is the symbol of PolicyBook (bmiXCover)\\n    /// @return _insuredContract is an addres of insured contract\\n    /// @return _contractType is a type of insured contract\\n    /// @return _whitelisted is a state of whitelisting\\n    function info()\\n        external\\n        view\\n        returns (\\n            string memory _symbol,\\n            address _insuredContract,\\n            IPolicyBookFabric.ContractType _contractType,\\n            bool _whitelisted\\n        );\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IPolicyBookFabric.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\ninterface IPolicyBookFabric {\\n    enum ContractType {CONTRACT, STABLECOIN, SERVICE, EXCHANGE, VARIOUS}\\n\\n    /// @notice Create new Policy Book contract, access: ANY\\n    /// @param _contract is Contract to create policy book for\\n    /// @param _contractType is Contract to create policy book for\\n    /// @param _description is bmiXCover token desription for this policy book\\n    /// @param _projectSymbol replaces x in bmiXCover token symbol\\n    /// @param _initialDeposit is an amount user deposits on creation (addLiquidity())\\n    /// @return _policyBook is address of created contract\\n    function create(\\n        address _contract,\\n        ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol,\\n        uint256 _initialDeposit,\\n        address _shieldMiningToken\\n    ) external returns (address);\\n\\n    function createLeveragePools(\\n        ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IPolicyBookFacade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"./IPolicyBook.sol\\\";\\nimport \\\"./ILeveragePortfolio.sol\\\";\\n\\ninterface IPolicyBookFacade {\\n    /// @notice Let user to buy policy by supplying stable coin, access: ANY\\n    /// @param _epochsNumber period policy will cover\\n    /// @param _coverTokens amount paid for the coverage\\n    function buyPolicy(uint256 _epochsNumber, uint256 _coverTokens) external;\\n\\n    /// @param _holder who owns coverage\\n    /// @param _epochsNumber period policy will cover\\n    /// @param _coverTokens amount paid for the coverage\\n    function buyPolicyFor(\\n        address _holder,\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens\\n    ) external;\\n\\n    function policyBook() external view returns (IPolicyBook);\\n\\n    function userLiquidity(address account) external view returns (uint256);\\n\\n    /// @notice virtual funds deployed by reinsurance pool\\n    function VUreinsurnacePool() external view returns (uint256);\\n\\n    /// @notice leverage funds deployed by reinsurance pool\\n    function LUreinsurnacePool() external view returns (uint256);\\n\\n    /// @notice leverage funds deployed by user leverage pool\\n    function LUuserLeveragePool(address userLeveragePool) external view returns (uint256);\\n\\n    /// @notice total leverage funds deployed to the pool sum of (VUreinsurnacePool,LUreinsurnacePool,LUuserLeveragePool)\\n    function totalLeveragedLiquidity() external view returns (uint256);\\n\\n    function userleveragedMPL() external view returns (uint256);\\n\\n    function reinsurancePoolMPL() external view returns (uint256);\\n\\n    function rebalancingThreshold() external view returns (uint256);\\n\\n    function safePricingModel() external view returns (bool);\\n\\n    /// @notice policyBookFacade initializer\\n    /// @param pbProxy polciybook address upgreadable cotnract.\\n    function __PolicyBookFacade_init(\\n        address pbProxy,\\n        address liquidityProvider,\\n        uint256 initialDeposit\\n    ) external;\\n\\n    /// @param _epochsNumber period policy will cover\\n    /// @param _coverTokens amount paid for the coverage\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\n    function buyPolicyFromDistributor(\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens,\\n        address _distributor\\n    ) external;\\n\\n    /// @param _buyer who is buying the coverage\\n    /// @param _epochsNumber period policy will cover\\n    /// @param _coverTokens amount paid for the coverage\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\n    function buyPolicyFromDistributorFor(\\n        address _buyer,\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens,\\n        address _distributor\\n    ) external;\\n\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\n    /// @param _liquidityAmount is amount of stable coin tokens to secure\\n    function addLiquidity(uint256 _liquidityAmount) external;\\n\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\n    /// @param _user the one taht add liquidity\\n    /// @param _liquidityAmount is amount of stable coin tokens to secure\\n    function addLiquidityFromDistributorFor(address _user, uint256 _liquidityAmount) external;\\n\\n    /// @notice Let user to add liquidity by supplying stable coin and stake it,\\n    /// @dev access: ANY\\n    function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _stakeSTBLAmount) external;\\n\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\n    function withdrawLiquidity() external;\\n\\n    /// @notice fetches all the pools data\\n    /// @return uint256 VUreinsurnacePool\\n    /// @return uint256 LUreinsurnacePool\\n    /// @return uint256 LUleveragePool\\n    /// @return uint256 user leverage pool address\\n    function getPoolsData()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            address\\n        );\\n\\n    /// @notice deploy leverage funds (RP lStable, ULP lStable)\\n    /// @param  deployedAmount uint256 the deployed amount to be added or substracted from the total liquidity\\n    /// @param leveragePool whether user leverage or reinsurance leverage\\n    function deployLeverageFundsAfterRebalance(\\n        uint256 deployedAmount,\\n        ILeveragePortfolio.LeveragePortfolio leveragePool\\n    ) external;\\n\\n    /// @notice deploy virtual funds (RP vStable)\\n    /// @param  deployedAmount uint256 the deployed amount to be added to the liquidity\\n    function deployVirtualFundsAfterRebalance(uint256 deployedAmount) external;\\n\\n    /// @notice set the MPL for the user leverage and the reinsurance leverage\\n    /// @param _userLeverageMPL uint256 value of the user leverage MPL\\n    /// @param _reinsuranceLeverageMPL uint256  value of the reinsurance leverage MPL\\n    function setMPLs(uint256 _userLeverageMPL, uint256 _reinsuranceLeverageMPL) external;\\n\\n    /// @notice sets the rebalancing threshold value\\n    /// @param _newRebalancingThreshold uint256 rebalancing threshhold value\\n    function setRebalancingThreshold(uint256 _newRebalancingThreshold) external;\\n\\n    /// @notice sets the rebalancing threshold value\\n    /// @param _safePricingModel bool is pricing model safe (true) or not (false)\\n    function setSafePricingModel(bool _safePricingModel) external;\\n\\n    /// @notice returns how many BMI tokens needs to approve in order to submit a claim\\n    function getClaimApprovalAmount(address user) external view returns (uint256);\\n\\n    /// @notice upserts a withdraw request\\n    /// @dev prevents adding a request if an already pending or ready request is open.\\n    /// @param _tokensToWithdraw uint256 amount of tokens to withdraw\\n    function requestWithdrawal(uint256 _tokensToWithdraw) external;\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IPolicyBookRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\n\\ninterface IPolicyBookRegistry {\\n    struct PolicyBookStats {\\n        string symbol;\\n        address insuredContract;\\n        IPolicyBookFabric.ContractType contractType;\\n        uint256 maxCapacity;\\n        uint256 totalSTBLLiquidity;\\n        uint256 totalLeveragedLiquidity;\\n        uint256 stakedSTBL;\\n        uint256 APY;\\n        uint256 annualInsuranceCost;\\n        uint256 bmiXRatio;\\n        bool whitelisted;\\n    }\\n\\n    function policyBooksByInsuredAddress(address insuredContract) external view returns (address);\\n\\n    function policyBookFacades(address facadeAddress) external view returns (address);\\n\\n    /// @notice Adds PolicyBook to registry, access: PolicyFabric\\n    function add(\\n        address insuredContract,\\n        IPolicyBookFabric.ContractType contractType,\\n        address policyBook,\\n        address facadeAddress\\n    ) external;\\n\\n    function whitelist(address policyBookAddress, bool whitelisted) external;\\n\\n    /// @notice returns required allowances for the policybooks\\n    function getPoliciesPrices(\\n        address[] calldata policyBooks,\\n        uint256[] calldata epochsNumbers,\\n        uint256[] calldata coversTokens\\n    ) external view returns (uint256[] memory _durations, uint256[] memory _allowances);\\n\\n    /// @notice Buys a batch of policies\\n    function buyPolicyBatch(\\n        address[] calldata policyBooks,\\n        uint256[] calldata epochsNumbers,\\n        uint256[] calldata coversTokens\\n    ) external;\\n\\n    /// @notice Checks if provided address is a PolicyBook\\n    function isPolicyBook(address policyBook) external view returns (bool);\\n\\n    /// @notice Checks if provided address is a policyBookFacade\\n    function isPolicyBookFacade(address _facadeAddress) external view returns (bool);\\n\\n    /// @notice Checks if provided address is a user leverage pool\\n    function isUserLeveragePool(address policyBookAddress) external view returns (bool);\\n\\n    /// @notice Returns number of registered PolicyBooks with certain contract type\\n    function countByType(IPolicyBookFabric.ContractType contractType)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns number of registered PolicyBooks, access: ANY\\n    function count() external view returns (uint256);\\n\\n    function countByTypeWhitelisted(IPolicyBookFabric.ContractType contractType)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function countWhitelisted() external view returns (uint256);\\n\\n    /// @notice Listing registered PolicyBooks with certain contract type, access: ANY\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses with certain contract type\\n    function listByType(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr);\\n\\n    /// @notice Listing registered PolicyBooks, access: ANY\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses\\n    function list(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr);\\n\\n    function listByTypeWhitelisted(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr);\\n\\n    function listWhitelisted(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr);\\n\\n    /// @notice Listing registered PolicyBooks with stats and certain contract type, access: ANY\\n    function listWithStatsByType(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    /// @notice Listing registered PolicyBooks with stats, access: ANY\\n    function listWithStats(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    function listWithStatsByTypeWhitelisted(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    function listWithStatsWhitelisted(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    /// @notice Getting stats from policy books, access: ANY\\n    /// @param policyBooks is list of PolicyBooks addresses\\n    function stats(address[] calldata policyBooks)\\n        external\\n        view\\n        returns (PolicyBookStats[] memory _stats);\\n\\n    /// @notice Return existing Policy Book contract, access: ANY\\n    /// @param insuredContract is contract address to lookup for created IPolicyBook\\n    function policyBookFor(address insuredContract) external view returns (address);\\n\\n    /// @notice Getting stats from policy books, access: ANY\\n    /// @param insuredContracts is list of insuredContracts in registry\\n    function statsByInsuredContracts(address[] calldata insuredContracts)\\n        external\\n        view\\n        returns (PolicyBookStats[] memory _stats);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IPolicyQuote.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\ninterface IPolicyQuote {\\n    /// @notice Let user to calculate policy cost in stable coin, access: ANY\\n    /// @param _durationSeconds is number of seconds to cover\\n    /// @param _tokens is a number of tokens to cover\\n    /// @param _totalCoverTokens is a number of covered tokens\\n    /// @param _totalLiquidity is a liquidity amount\\n    /// @param _totalLeveragedLiquidity is a totale deployed leverage to the pool\\n    /// @param _safePricingModel the pricing model configured for this bool safe or risk\\n    /// @return amount of stable coin policy costs\\n    function getQuotePredefined(\\n        uint256 _durationSeconds,\\n        uint256 _tokens,\\n        uint256 _totalCoverTokens,\\n        uint256 _totalLiquidity,\\n        uint256 _totalLeveragedLiquidity,\\n        bool _safePricingModel\\n    ) external view returns (uint256, uint256);\\n\\n    /// @notice Let user to calculate policy cost in stable coin, access: ANY\\n    /// @param _durationSeconds is number of seconds to cover\\n    /// @param _tokens is number of tokens to cover\\n    /// @param _policyBookAddr is address of policy book\\n    /// @return amount of stable coin policy costs\\n    function getQuote(\\n        uint256 _durationSeconds,\\n        uint256 _tokens,\\n        address _policyBookAddr\\n    ) external view returns (uint256);\\n\\n    /// @notice setup all pricing model varlues\\n    ///@param _riskyAssetThresholdPercentage URRp Utilization ration for pricing model when the assets is considered risky, %\\n    ///@param _minimumCostPercentage MC minimum cost of cover (Premium), %;\\n    ///@param _minimumInsuranceCost minimum cost of insurance (Premium) , (10**18)\\n    ///@param _lowRiskMaxPercentPremiumCost TMCI target maximum cost of cover when the asset is not considered risky (Premium)\\n    ///@param _lowRiskMaxPercentPremiumCost100Utilization MCI not risky\\n    ///@param _highRiskMaxPercentPremiumCost TMCI target maximum cost of cover when the asset is considered risky (Premium)\\n    ///@param _highRiskMaxPercentPremiumCost100Utilization MCI risky\\n    function setupPricingModel(\\n        uint256 _riskyAssetThresholdPercentage,\\n        uint256 _minimumCostPercentage,\\n        uint256 _minimumInsuranceCost,\\n        uint256 _lowRiskMaxPercentPremiumCost,\\n        uint256 _lowRiskMaxPercentPremiumCost100Utilization,\\n        uint256 _highRiskMaxPercentPremiumCost,\\n        uint256 _highRiskMaxPercentPremiumCost100Utilization\\n    ) external;\\n\\n    ///@notice return min ur under the current pricing model\\n    ///@param _safePricingModel pricing model of the pool wethere it is safe or risky model\\n    function getMINUR(bool _safePricingModel) external view returns (uint256 _minUR);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/codereview2/contracts/interfaces/IUserLeveragePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\nimport \\\"./IClaimingRegistry.sol\\\";\\nimport \\\"./IPolicyBookFacade.sol\\\";\\n\\ninterface IUserLeveragePool {\\n    enum WithdrawalStatus {NONE, PENDING, READY, EXPIRED}\\n\\n    struct WithdrawalInfo {\\n        uint256 withdrawalAmount;\\n        uint256 readyToWithdrawDate;\\n        bool withdrawalAllowed;\\n    }\\n\\n    struct BMIMultiplierFactors {\\n        uint256 poolMultiplier;\\n        uint256 leverageProvided;\\n        uint256 multiplier;\\n    }\\n\\n    /// @notice Returns type of contract this PolicyBook covers, access: ANY\\n    /// @return _type is type of contract\\n    function contractType() external view returns (IPolicyBookFabric.ContractType _type);\\n\\n    function userLiquidity(address account) external view returns (uint256);\\n\\n    function EPOCH_DURATION() external view returns (uint256);\\n\\n    function READY_TO_WITHDRAW_PERIOD() external view returns (uint256);\\n\\n    function epochStartTime() external view returns (uint256);\\n\\n    function withdrawalsInfo(address _userAddr)\\n        external\\n        view\\n        returns (\\n            uint256 _withdrawalAmount,\\n            uint256 _readyToWithdrawDate,\\n            bool _withdrawalAllowed\\n        );\\n\\n    function __UserLeveragePool_init(\\n        IPolicyBookFabric.ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol\\n    ) external;\\n\\n    function getEpoch(uint256 time) external view returns (uint256);\\n\\n    /// @notice get STBL equivalent\\n    function convertBMIXToSTBL(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice get BMIX equivalent\\n    function convertSTBLToBMIX(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice forces an update of RewardsGenerator multiplier\\n    function forceUpdateBMICoverStakingRewardMultiplier() external;\\n\\n    /// @notice function to get precise current cover and liquidity\\n    function getNewCoverAndLiquidity()\\n        external\\n        view\\n        returns (uint256 newTotalCoverTokens, uint256 newTotalLiquidity);\\n\\n    function updateEpochsInfo() external;\\n\\n    function secondsToEndCurrentEpoch() external view returns (uint256);\\n\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\n    /// @param _liqudityAmount is amount of stable coin tokens to secure\\n    function addLiquidity(uint256 _liqudityAmount) external;\\n\\n    // /// @notice Let eligible contracts add liqiudity for another user by supplying stable coin\\n    // /// @param _liquidityHolderAddr is address of address to assign cover\\n    // /// @param _liqudityAmount is amount of stable coin tokens to secure\\n    // function addLiquidityFor(address _liquidityHolderAddr, uint256 _liqudityAmount) external;\\n\\n    function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _stakeSTBLAmount) external;\\n\\n    function getAvailableBMIXWithdrawableAmount(address _userAddr) external view returns (uint256);\\n\\n    function getWithdrawalStatus(address _userAddr) external view returns (WithdrawalStatus);\\n\\n    function requestWithdrawal(uint256 _tokensToWithdraw) external;\\n\\n    // function requestWithdrawalWithPermit(\\n    //     uint256 _tokensToWithdraw,\\n    //     uint8 _v,\\n    //     bytes32 _r,\\n    //     bytes32 _s\\n    // ) external;\\n\\n    function unlockTokens() external;\\n\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\n    function withdrawLiquidity() external;\\n\\n    function getAPY() external view returns (uint256);\\n\\n    function whitelisted() external view returns (bool);\\n\\n    function whitelist(bool _whitelisted) external;\\n\\n    /// @notice set max total liquidity for the pool\\n    /// @param _maxCapacities uint256 the max total liquidity\\n    function setMaxCapacities(uint256 _maxCapacities) external;\\n\\n    /// @notice Getting number stats, access: ANY\\n    /// @return _maxCapacities is a max liquidity of the pool\\n    /// @return _totalSTBLLiquidity is PolicyBook's liquidity\\n    /// @return _totalLeveragedLiquidity is becuase to follow the same function in policy book\\n    /// @return _stakedSTBL is how much stable coin are staked on this PolicyBook\\n    /// @return _annualProfitYields is its APY\\n    /// @return _annualInsuranceCost is becuase to follow the same function in policy book\\n    /// @return  _bmiXRatio is multiplied by 10**18. To get STBL representation\\n    function numberStats()\\n        external\\n        view\\n        returns (\\n            uint256 _maxCapacities,\\n            uint256 _totalSTBLLiquidity,\\n            uint256 _totalLeveragedLiquidity,\\n            uint256 _stakedSTBL,\\n            uint256 _annualProfitYields,\\n            uint256 _annualInsuranceCost,\\n            uint256 _bmiXRatio\\n        );\\n\\n    /// @notice Getting info, access: ANY\\n    /// @return _symbol is the symbol of PolicyBook (bmiXCover)\\n    /// @return _insuredContract is an addres of insured contract\\n    /// @return _contractType is becuase to follow the same function in policy book\\n    /// @return _whitelisted is a state of whitelisting\\n    function info()\\n        external\\n        view\\n        returns (\\n            string memory _symbol,\\n            address _insuredContract,\\n            IPolicyBookFabric.ContractType _contractType,\\n            bool _whitelisted\\n        );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"RISKY_MIN_UR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAFE_MIN_UR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverageProvided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct IUserLeveragePool.BMIMultiplierFactors\",\"name\":\"factors\",\"type\":\"tuple\"}],\"name\":\"calcBMIMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolUR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"leveragePoolAddress\",\"type\":\"address\"}],\"name\":\"calcM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"netMPL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netMPLn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"policyBookAddr\",\"type\":\"address\"}],\"internalType\":\"struct ILeveragePortfolio.LevFundsFactors\",\"name\":\"factors\",\"type\":\"tuple\"}],\"name\":\"calcMaxLevFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"}],\"name\":\"calcMaxVirtualFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToDeploy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ILeveragePortfolio.LeveragePortfolio\",\"name\":\"leveragePoolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_policyBookFacade\",\"type\":\"address\"}],\"name\":\"calcNetMPLn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_netMPLn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policybookAddress\",\"type\":\"address\"}],\"name\":\"getPolicyBookFacade\",\"outputs\":[{\"internalType\":\"contract IPolicyBookFacade\",\"name\":\"_coveragePool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"injector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyBookRegistry\",\"outputs\":[{\"internalType\":\"contract IPolicyBookRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyQuote\",\"outputs\":[{\"internalType\":\"contract IPolicyQuote\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractsRegistry\",\"name\":\"_contractsRegistry\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"name\":\"setInjector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LeveragePortfolioView","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}