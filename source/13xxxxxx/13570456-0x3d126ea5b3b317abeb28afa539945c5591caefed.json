{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/TreasuryDAO.sol\": {\r\n      \"content\": \"// contracts/utilities/TreasuryDAO.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract TreasuryDAO {\\n  string public name;\\n\\n  address public owner;\\n  uint256 public totalShares;\\n\\n  address public changeDAO;\\n  address public community;\\n\\n  address[] public tokens;\\n  uint256 public totalFunds;\\n\\n  mapping(address => uint256) public shares;\\n  uint256 public shareUnit;\\n  uint256 public thumbs;\\n  mapping(address => uint256) public lastShares;\\n\\n  constructor(string memory name_) {\\n    name = name_;\\n    owner = msg.sender;\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"Permission denied\\\");\\n    _;\\n  }\\n\\n  function addShare(address account, uint256 share) internal {\\n    require(account != address(0), \\\"Invalid account\\\");\\n    require(shares[account] == 0, \\\"Share exists\\\");\\n    totalShares += share;\\n    shares[account] = share;\\n    lastShares[account] = shareUnit;\\n  }\\n\\n  function addShares(address[] memory accounts, uint256[] memory sharings) external onlyOwner {\\n    require(accounts.length == sharings.length, \\\"Invalid counts\\\");\\n    require(accounts.length < 256, \\\"Invalid length\\\");\\n    for (uint8 i = 0; i < accounts.length; i++) {\\n      addShare(accounts[i], sharings[i]);\\n    }\\n  }\\n\\n  function removeShare(address account) internal {\\n    require(shares[account] > 0, \\\"Invalid share\\\");\\n    uint256 share = shares[account];\\n    delete shares[account];\\n    totalShares -= share;\\n    if (shareUnit > lastShares[account]) {\\n      uint256 refund = (shareUnit - lastShares[account]) * share;\\n      lastShares[account] = shareUnit;\\n      addFund(refund);\\n    }\\n  }\\n\\n  function removeShares(address[] memory accounts) external onlyOwner {\\n    require(accounts.length < 256, \\\"Invalid length\\\");\\n    for (uint8 i = 0; i < accounts.length; i++) {\\n      removeShare(accounts[i]);\\n    }\\n  }\\n\\n  function addFund(uint256 amount) internal {\\n    require(totalShares > 0, \\\"No shares\\\");\\n    totalFunds += amount;\\n    uint256 newAmount = amount + thumbs;\\n    uint256 newUnit = newAmount / totalShares;\\n    shareUnit += newUnit;\\n    thumbs = newAmount - (newUnit * totalShares);\\n  }\\n\\n  function getAllocation(address account) public view returns (uint256 allocation) {\\n    allocation = (shareUnit - lastShares[account]) * shares[account];\\n  }\\n\\n  function withdraw() external {\\n    uint256 allocation = getAllocation(msg.sender);\\n    require(allocation > 0, \\\"Funds empty\\\");\\n    lastShares[msg.sender] = shareUnit;\\n    payable(msg.sender).transfer(allocation);\\n  }\\n\\n  function raise() external payable {\\n    addFund(msg.value);\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sharings\",\"type\":\"uint256[]\"}],\"name\":\"addShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"community\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raise\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"removeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thumbs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TreasuryDAO","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001650726f6a65637453756d6d697420547265617375727900000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}