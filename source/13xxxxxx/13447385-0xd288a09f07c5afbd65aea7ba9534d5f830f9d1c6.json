{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n// Sources flattened with hardhat v2.6.4 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.2\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.3.2\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.3.2\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.3.2\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/proxy/utils/Initializable.sol@v4.3.2\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IBakeryRouterV2.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IBakeryV2Router {\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactBNBForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForBNB(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IDODOV2Proxy.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IDODOV2Proxy {\r\n    function dodoSwapV2ETHToToken(\r\n        address toToken,\r\n        uint256 minReturnAmount,\r\n        address[] memory dodoPairs,\r\n        uint256 directions,\r\n        bool isIncentive,\r\n        uint256 deadLine\r\n    ) external payable returns (uint256 returnAmount);\r\n\r\n    function dodoSwapV2TokenToETH(\r\n        address fromToken,\r\n        uint256 fromTokenAmount,\r\n        uint256 minReturnAmount,\r\n        address[] memory dodoPairs,\r\n        uint256 directions,\r\n        bool isIncentive,\r\n        uint256 deadLine\r\n    ) external returns (uint256 returnAmount);\r\n\r\n    function dodoSwapV2TokenToToken(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 fromTokenAmount,\r\n        uint256 minReturnAmount,\r\n        address[] memory dodoPairs,\r\n        uint256 directions,\r\n        bool isIncentive,\r\n        uint256 deadLine\r\n    ) external returns (uint256 returnAmount);\r\n\r\n    function dodoSwapV1(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 fromTokenAmount,\r\n        uint256 minReturnAmount,\r\n        address[] memory dodoPairs,\r\n        uint256 directions,\r\n        bool isIncentive,\r\n        uint256 deadLine\r\n    ) external payable returns (uint256 returnAmount);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IVyperSwap.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IVyperSwap {\r\n    function exchange(\r\n        int128 tokenIndexFrom,\r\n        int128 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IVyperUnderlyingSwap.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IVyperUnderlyingSwap {\r\n    function exchange(\r\n        int128 tokenIndexFrom,\r\n        int128 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external;\r\n\r\n    function exchange_underlying(\r\n        int128 tokenIndexFrom,\r\n        int128 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IDoppleSwap.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IDoppleSwap {\r\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\r\n\r\n    function swap(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.2\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/lib/OwnableUpgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract OwnableUpgradeable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function ownableUpgradeableInitialize() internal {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), 'Ownable: caller is not the owner');\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            'Ownable: new owner is the zero address'\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ArkenDexV1.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n// import 'hardhat/console.sol';\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ArkenDexV1 is Initializable, OwnableUpgradeable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    /*\r\n    ==============================================================================\r\n\r\n    █▀ ▀█▀ █▀█ █▀█ ▄▀█ █▀▀ █▀▀\r\n    ▄█ ░█░ █▄█ █▀▄ █▀█ █▄█ ██▄\r\n\r\n    only add. do not change. cuz proxy.\r\n\r\n    ==============================================================================\r\n    */\r\n    uint256 public constant _DEADLINE_ = 2**256 - 1;\r\n    address public constant _ETH_ = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address payable public _FEE_WALLET_ADDR_;\r\n    address public _DODO_APPROVE_ADDR_;\r\n    address public _WETH_;\r\n    address public _WETH_DFYN_;\r\n    /* ---- add here ---- */\r\n\r\n    /*\r\n    ==============================================================================\r\n\r\n    █▀▀ █░█ █▀▀ █▄░█ ▀█▀ █▀\r\n    ██▄ ▀▄▀ ██▄ █░▀█ ░█░ ▄█\r\n\r\n    ==============================================================================\r\n    */\r\n    event Swapped(\r\n        address srcToken,\r\n        address dstToken,\r\n        uint256 amountIn,\r\n        uint256 returnAmount\r\n    );\r\n    event UpdateVyper(address dexAddr, address[] tokens);\r\n    event Received(address sender, uint256 amount);\r\n    event FeeWalletUpdated(address newFeeWallet);\r\n    event WETHUpdated(address newWETH);\r\n    event WETHDfynUpdated(address newWETHDfyn);\r\n    event DODOApproveUpdated(address newDODOApproveAddress);\r\n\r\n    /*\r\n    ==============================================================================\r\n\r\n    █▀▀ █▀█ █▄░█ █▀▀ █ █▀▀ █░█ █▀█ ▄▀█ ▀█▀ █ █▀█ █▄░█ █▀\r\n    █▄▄ █▄█ █░▀█ █▀░ █ █▄█ █▄█ █▀▄ █▀█ ░█░ █ █▄█ █░▀█ ▄█\r\n\r\n    ==============================================================================\r\n    */\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() initializer {}\r\n\r\n    function initialize(\r\n        address _ownerAddress,\r\n        address payable _feeWalletAddress,\r\n        address _wrappedEther,\r\n        address _wrappedEtherDfyn,\r\n        address _dodoApproveAddress\r\n    ) public initializer {\r\n        _FEE_WALLET_ADDR_ = _feeWalletAddress;\r\n        _DODO_APPROVE_ADDR_ = _dodoApproveAddress;\r\n        _WETH_ = _wrappedEther;\r\n        _WETH_DFYN_ = _wrappedEtherDfyn;\r\n        OwnableUpgradeable.ownableUpgradeableInitialize();\r\n        transferOwnership(_ownerAddress);\r\n    }\r\n\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    function updateFeeWallet(address payable _feeWallet) external onlyOwner {\r\n        _FEE_WALLET_ADDR_ = _feeWallet;\r\n        emit FeeWalletUpdated(_FEE_WALLET_ADDR_);\r\n    }\r\n\r\n    function updateWETH(address _weth) external onlyOwner {\r\n        _WETH_ = _weth;\r\n        emit WETHUpdated(_WETH_);\r\n    }\r\n\r\n    function updateWETHDfyn(address _weth_dfyn) external onlyOwner {\r\n        _WETH_DFYN_ = _weth_dfyn;\r\n        emit WETHDfynUpdated(_WETH_DFYN_);\r\n    }\r\n\r\n    function updateDODOApproveAddress(address _dodoApproveAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _DODO_APPROVE_ADDR_ = _dodoApproveAddress;\r\n        emit DODOApproveUpdated(_DODO_APPROVE_ADDR_);\r\n    }\r\n\r\n    /*\r\n    ==================================================================================\r\n\r\n    ▀█▀ █▀█ ▄▀█ █▀▄ █▀▀ ░   ▀█▀ █▀█ ▄▀█ █▀▄ █▀▀ ░   ▀█▀ █▀█ ▄▀█ █▀▄ █▀▀ ░\r\n    ░█░ █▀▄ █▀█ █▄▀ ██▄ ▄   ░█░ █▀▄ █▀█ █▄▀ ██▄ ▄   ░█░ █▀▄ █▀█ █▄▀ ██▄ ▄\r\n\r\n    ==================================================================================\r\n    */\r\n\r\n    enum RouterInterface {\r\n        UNISWAP,\r\n        BAKERY,\r\n        VYPER,\r\n        VYPER_UNDERLYING,\r\n        DOPPLE,\r\n        DODO_V2,\r\n        DODO_V1,\r\n        DFYN\r\n    }\r\n    struct TradeRoute {\r\n        address dexAddr;\r\n        uint256 direction; // DODO\r\n        uint256 part;\r\n        int128 fromTokenIndex; // Vyper\r\n        int128 toTokenIndex; // Vyper\r\n        address[] paths;\r\n        address[] lpAddresses; // Mostly DODO\r\n        RouterInterface dexInterface;\r\n    }\r\n    struct MultiSwapDesctiption {\r\n        IERC20 srcToken;\r\n        IERC20 dstToken;\r\n        TradeRoute[] routes;\r\n        uint256 amountIn;\r\n        uint256 amountOutMin;\r\n        address payable to;\r\n    }\r\n\r\n    function multiTrade(MultiSwapDesctiption memory desc)\r\n        external\r\n        payable\r\n        returns (uint256 returnAmount, uint256 blockNumber)\r\n    {\r\n        IERC20 dstToken = desc.dstToken;\r\n        IERC20 srcToken = desc.srcToken;\r\n        uint256 beforeDstAmt;\r\n        if (_ETH_ == address(desc.dstToken)) {\r\n            beforeDstAmt = desc.to.balance;\r\n        } else {\r\n            beforeDstAmt = dstToken.balanceOf(desc.to);\r\n        }\r\n        (returnAmount, blockNumber) = _trade(desc);\r\n        if (_ETH_ == address(desc.dstToken)) {\r\n            (bool sent, ) = desc.to.call{value: returnAmount}('');\r\n            require(sent, 'Failed to send Ether');\r\n        } else {\r\n            dstToken.safeTransfer(desc.to, returnAmount);\r\n        }\r\n        uint256 afterDstAmt;\r\n        if (_ETH_ == address(desc.dstToken)) {\r\n            afterDstAmt = desc.to.balance;\r\n        } else {\r\n            afterDstAmt = dstToken.balanceOf(desc.to);\r\n        }\r\n        uint256 receivedAmt = afterDstAmt.sub(beforeDstAmt);\r\n        require(\r\n            receivedAmt > desc.amountOutMin,\r\n            'Received token is not enough'\r\n        );\r\n\r\n        emit Swapped(\r\n            address(srcToken),\r\n            address(dstToken),\r\n            desc.amountIn,\r\n            returnAmount\r\n        );\r\n    }\r\n\r\n    function _trade(MultiSwapDesctiption memory desc)\r\n        internal\r\n        returns (uint256 returnAmount, uint256 blockNumber)\r\n    {\r\n        require(desc.amountIn > 0, 'Amount-in needs to be more than zero');\r\n        blockNumber = block.number;\r\n\r\n        IERC20 srcToken = desc.srcToken;\r\n\r\n        if (_ETH_ == address(desc.srcToken)) {\r\n            require(msg.value == desc.amountIn, 'Value not match amountIn');\r\n        } else {\r\n            uint256 allowance = srcToken.allowance(msg.sender, address(this));\r\n            require(allowance >= desc.amountIn, 'Allowance not enough');\r\n            srcToken.safeTransferFrom(msg.sender, address(this), desc.amountIn);\r\n        }\r\n\r\n        TradeRoute[] memory routes = desc.routes;\r\n        uint256 srcTokenAmount;\r\n\r\n        for (uint256 i = 0; i < routes.length; i++) {\r\n            TradeRoute memory route = routes[i];\r\n            IERC20 startToken = IERC20(route.paths[0]);\r\n            IERC20 endToken = IERC20(route.paths[route.paths.length - 1]);\r\n            if (_ETH_ == address(startToken)) {\r\n                srcTokenAmount = address(this).balance;\r\n            } else {\r\n                srcTokenAmount = startToken.balanceOf(address(this));\r\n            }\r\n            uint256 inputAmount = srcTokenAmount.mul(route.part).div(100000000); // 1% = 10^6\r\n            require(\r\n                route.part <= 100000000,\r\n                'Route percentage can not exceed 100000000'\r\n            );\r\n            if (route.dexInterface == RouterInterface.BAKERY) {\r\n                _tradeIBakery(\r\n                    startToken,\r\n                    endToken,\r\n                    inputAmount,\r\n                    0,\r\n                    route.paths,\r\n                    address(this),\r\n                    route.dexAddr\r\n                );\r\n            } else if (route.dexInterface == RouterInterface.VYPER) {\r\n                _tradeVyper(\r\n                    startToken,\r\n                    endToken,\r\n                    inputAmount,\r\n                    0,\r\n                    route.dexAddr,\r\n                    route.fromTokenIndex,\r\n                    route.toTokenIndex\r\n                );\r\n            } else if (route.dexInterface == RouterInterface.VYPER_UNDERLYING) {\r\n                _tradeVyperUnderlying(\r\n                    startToken,\r\n                    endToken,\r\n                    inputAmount,\r\n                    0,\r\n                    route.dexAddr,\r\n                    route.fromTokenIndex,\r\n                    route.toTokenIndex\r\n                );\r\n            } else if (route.dexInterface == RouterInterface.DOPPLE) {\r\n                _tradeDopple(\r\n                    startToken,\r\n                    endToken,\r\n                    inputAmount,\r\n                    0,\r\n                    route.dexAddr\r\n                );\r\n            } else if (route.dexInterface == RouterInterface.DODO_V2) {\r\n                _tradeIDODOV2(\r\n                    startToken,\r\n                    endToken,\r\n                    inputAmount,\r\n                    1, // DODO doesn't allow zero min amount\r\n                    route.lpAddresses,\r\n                    route.direction,\r\n                    route.dexAddr\r\n                );\r\n            } else if (route.dexInterface == RouterInterface.DODO_V1) {\r\n                _tradeIDODOV1(\r\n                    startToken,\r\n                    endToken,\r\n                    inputAmount,\r\n                    1, // DODO doesn't allow zero min amount\r\n                    route.lpAddresses,\r\n                    route.direction,\r\n                    route.dexAddr\r\n                );\r\n            } else if (route.dexInterface == RouterInterface.DFYN) {\r\n                _tradeIDfyn(\r\n                    startToken,\r\n                    endToken,\r\n                    inputAmount,\r\n                    0,\r\n                    route.paths,\r\n                    address(this),\r\n                    route.dexAddr\r\n                );\r\n            } else {\r\n                _tradeIUniswap(\r\n                    startToken,\r\n                    endToken,\r\n                    inputAmount,\r\n                    0,\r\n                    route.paths,\r\n                    address(this),\r\n                    route.dexAddr\r\n                );\r\n            }\r\n        }\r\n\r\n        if (_ETH_ == address(desc.dstToken)) {\r\n            returnAmount = address(this).balance;\r\n        } else {\r\n            returnAmount = desc.dstToken.balanceOf(address(this));\r\n        }\r\n\r\n        returnAmount = _collectFee(returnAmount, desc.dstToken);\r\n        // console.log(\r\n        //     'after fee: %d ,, out min: %d',\r\n        //     returnAmount,\r\n        //     desc.amountOutMin\r\n        // );\r\n        require(\r\n            returnAmount >= desc.amountOutMin,\r\n            'Return amount is not enough'\r\n        );\r\n    }\r\n\r\n    /*\r\n\r\n    █▀▀ █▀█ █░░ █░░ █▀▀ █▀▀ ▀█▀   █▀▀ █▀▀ █▀▀\r\n    █▄▄ █▄█ █▄▄ █▄▄ ██▄ █▄▄ ░█░   █▀░ ██▄ ██▄\r\n\r\n    */\r\n\r\n    function _collectFee(uint256 amount, IERC20 token)\r\n        private\r\n        returns (uint256 remainingAmount)\r\n    {\r\n        uint256 fee = amount.div(1000); // 0.1%\r\n        require(fee < amount, 'Fee exceeds amount');\r\n        if (_ETH_ == address(token)) {\r\n            _FEE_WALLET_ADDR_.transfer(fee);\r\n        } else {\r\n            token.safeTransfer(_FEE_WALLET_ADDR_, fee);\r\n        }\r\n        remainingAmount = amount.sub(fee);\r\n    }\r\n\r\n    /*\r\n\r\n    █▀▄ █▀▀ ▀▄▀\r\n    █▄▀ ██▄ █░█\r\n\r\n    */\r\n\r\n    function _tradeIUniswap(\r\n        IERC20 _src,\r\n        IERC20 _dest,\r\n        uint256 inputAmount,\r\n        uint256 minOutputAmount,\r\n        address[] memory paths,\r\n        address to,\r\n        address dexAddr\r\n    ) private returns (uint256[] memory amounts) {\r\n        IUniswapV2Router02 uniRouter = IUniswapV2Router02(dexAddr);\r\n        if (_ETH_ == address(_src)) {\r\n            // ETH => TOKEN\r\n            if (paths[0] == address(_ETH_)) {\r\n                paths[0] = address(_WETH_);\r\n            }\r\n            amounts = uniRouter.swapExactETHForTokens{value: inputAmount}(\r\n                minOutputAmount,\r\n                paths,\r\n                to,\r\n                _DEADLINE_\r\n            );\r\n        } else if (_ETH_ == address(_dest)) {\r\n            // TOKEN => ETH\r\n            if (paths[paths.length - 1] == address(_ETH_)) {\r\n                paths[paths.length - 1] = address(_WETH_);\r\n            }\r\n            _src.safeApprove(dexAddr, inputAmount);\r\n            amounts = uniRouter.swapExactTokensForETH(\r\n                inputAmount,\r\n                minOutputAmount,\r\n                paths,\r\n                to,\r\n                _DEADLINE_\r\n            );\r\n        } else {\r\n            // TOKEN => TOKEN\r\n            _src.safeApprove(dexAddr, inputAmount);\r\n            amounts = uniRouter.swapExactTokensForTokens(\r\n                inputAmount,\r\n                minOutputAmount,\r\n                paths,\r\n                to,\r\n                _DEADLINE_\r\n            );\r\n        }\r\n    }\r\n\r\n    function _tradeIDfyn(\r\n        IERC20 _src,\r\n        IERC20 _dest,\r\n        uint256 inputAmount,\r\n        uint256 minOutputAmount,\r\n        address[] memory paths,\r\n        address to,\r\n        address dexAddr\r\n    ) private returns (uint256[] memory amounts) {\r\n        IUniswapV2Router02 uniRouter = IUniswapV2Router02(dexAddr);\r\n        if (_ETH_ == address(_src)) {\r\n            // ETH => TOKEN\r\n            if (paths[0] == address(_ETH_)) {\r\n                paths[0] = address(_WETH_DFYN_);\r\n            }\r\n            amounts = uniRouter.swapExactETHForTokens{value: inputAmount}(\r\n                minOutputAmount,\r\n                paths,\r\n                to,\r\n                _DEADLINE_\r\n            );\r\n        } else if (_ETH_ == address(_dest)) {\r\n            // TOKEN => ETH\r\n            if (paths[paths.length - 1] == address(_ETH_)) {\r\n                paths[paths.length - 1] = address(_WETH_DFYN_);\r\n            }\r\n            _src.safeApprove(dexAddr, inputAmount);\r\n            amounts = uniRouter.swapExactTokensForETH(\r\n                inputAmount,\r\n                minOutputAmount,\r\n                paths,\r\n                to,\r\n                _DEADLINE_\r\n            );\r\n        } else {\r\n            // TOKEN => TOKEN\r\n            _src.safeApprove(dexAddr, inputAmount);\r\n            amounts = uniRouter.swapExactTokensForTokens(\r\n                inputAmount,\r\n                minOutputAmount,\r\n                paths,\r\n                to,\r\n                _DEADLINE_\r\n            );\r\n        }\r\n    }\r\n\r\n    function _tradeIDODOV2(\r\n        IERC20 _src,\r\n        IERC20 _dest,\r\n        uint256 inputAmount,\r\n        uint256 minOutputAmount,\r\n        address[] memory dodoPairs,\r\n        uint256 direction,\r\n        address dexAddr\r\n    ) private returns (uint256 amount) {\r\n        IDODOV2Proxy dodoProxy = IDODOV2Proxy(dexAddr);\r\n        if (_ETH_ == address(_src)) {\r\n            // ETH => TOKEN\r\n            amount = dodoProxy.dodoSwapV2ETHToToken{value: inputAmount}(\r\n                address(_dest),\r\n                minOutputAmount,\r\n                dodoPairs,\r\n                direction,\r\n                false,\r\n                _DEADLINE_\r\n            );\r\n        } else if (_ETH_ == address(_dest)) {\r\n            // TOKEN => ETH\r\n            _src.safeApprove(_DODO_APPROVE_ADDR_, inputAmount);\r\n            amount = dodoProxy.dodoSwapV2TokenToETH(\r\n                address(_src),\r\n                inputAmount,\r\n                minOutputAmount,\r\n                dodoPairs,\r\n                direction,\r\n                false,\r\n                _DEADLINE_\r\n            );\r\n        } else {\r\n            // TOKEN => TOKEN\r\n            _src.safeApprove(_DODO_APPROVE_ADDR_, inputAmount);\r\n            amount = dodoProxy.dodoSwapV2TokenToToken(\r\n                address(_src),\r\n                address(_dest),\r\n                inputAmount,\r\n                minOutputAmount,\r\n                dodoPairs,\r\n                direction,\r\n                false,\r\n                _DEADLINE_\r\n            );\r\n        }\r\n    }\r\n\r\n    function _tradeIDODOV1(\r\n        IERC20 _src,\r\n        IERC20 _dest,\r\n        uint256 inputAmount,\r\n        uint256 minOutputAmount,\r\n        address[] memory dodoPairs,\r\n        uint256 direction,\r\n        address dexAddr\r\n    ) private returns (uint256 amount) {\r\n        IDODOV2Proxy dodoProxy = IDODOV2Proxy(dexAddr);\r\n        if (_ETH_ == address(_src)) {\r\n            amount = dodoProxy.dodoSwapV1{value: inputAmount}(\r\n                address(_src),\r\n                address(_dest),\r\n                inputAmount,\r\n                minOutputAmount,\r\n                dodoPairs,\r\n                direction,\r\n                false,\r\n                _DEADLINE_\r\n            );\r\n        } else {\r\n            _src.safeApprove(_DODO_APPROVE_ADDR_, inputAmount);\r\n            amount = dodoProxy.dodoSwapV1(\r\n                address(_src),\r\n                address(_dest),\r\n                inputAmount,\r\n                minOutputAmount,\r\n                dodoPairs,\r\n                direction,\r\n                false,\r\n                _DEADLINE_\r\n            );\r\n        }\r\n    }\r\n\r\n    function _tradeIBakery(\r\n        IERC20 _src,\r\n        IERC20 _dest,\r\n        uint256 inputAmount,\r\n        uint256 minOutputAmount,\r\n        address[] memory paths,\r\n        address to,\r\n        address dexAddr\r\n    ) private returns (uint256[] memory amounts) {\r\n        IBakeryV2Router bakeryRouter = IBakeryV2Router(dexAddr);\r\n        if (_ETH_ == address(_src)) {\r\n            // ETH => TOKEN\r\n            if (paths[0] == address(_ETH_)) {\r\n                paths[0] = address(_WETH_);\r\n            }\r\n            amounts = bakeryRouter.swapExactBNBForTokens{value: inputAmount}(\r\n                minOutputAmount,\r\n                paths,\r\n                to,\r\n                _DEADLINE_\r\n            );\r\n        } else if (_ETH_ == address(_dest)) {\r\n            // TOKEN => ETH\r\n            if (paths[paths.length - 1] == address(_ETH_)) {\r\n                paths[paths.length - 1] = address(_WETH_);\r\n            }\r\n            _src.safeApprove(dexAddr, inputAmount);\r\n            amounts = bakeryRouter.swapExactTokensForBNB(\r\n                inputAmount,\r\n                minOutputAmount,\r\n                paths,\r\n                to,\r\n                _DEADLINE_\r\n            );\r\n        } else {\r\n            // TOKEN => TOKEN\r\n            _src.safeApprove(dexAddr, inputAmount);\r\n            amounts = bakeryRouter.swapExactTokensForTokens(\r\n                inputAmount,\r\n                minOutputAmount,\r\n                paths,\r\n                to,\r\n                _DEADLINE_\r\n            );\r\n        }\r\n    }\r\n\r\n    function _tradeVyper(\r\n        IERC20 _src,\r\n        IERC20,\r\n        uint256 inputAmount,\r\n        uint256 minOutputAmount,\r\n        address dexAddr,\r\n        int128 fromTokenIndex,\r\n        int128 toTokenIndex\r\n    ) private {\r\n        IVyperSwap vyperSwap = IVyperSwap(dexAddr);\r\n        _src.safeApprove(dexAddr, inputAmount);\r\n        vyperSwap.exchange(\r\n            fromTokenIndex,\r\n            toTokenIndex,\r\n            inputAmount,\r\n            minOutputAmount\r\n        );\r\n    }\r\n\r\n    function _tradeVyperUnderlying(\r\n        IERC20 _src,\r\n        IERC20,\r\n        uint256 inputAmount,\r\n        uint256 minOutputAmount,\r\n        address dexAddr,\r\n        int128 fromTokenIndex,\r\n        int128 toTokenIndex\r\n    ) private {\r\n        IVyperUnderlyingSwap vyperSwap = IVyperUnderlyingSwap(dexAddr);\r\n        _src.safeApprove(dexAddr, inputAmount);\r\n        vyperSwap.exchange_underlying(\r\n            fromTokenIndex,\r\n            toTokenIndex,\r\n            inputAmount,\r\n            minOutputAmount\r\n        );\r\n    }\r\n\r\n    function _tradeDopple(\r\n        IERC20 _src,\r\n        IERC20 _dest,\r\n        uint256 inputAmount,\r\n        uint256 minOutputAmount,\r\n        address dexAddr\r\n    ) private returns (uint256 amount) {\r\n        IDoppleSwap doppleSwap = IDoppleSwap(dexAddr);\r\n        _src.safeApprove(dexAddr, inputAmount);\r\n        uint8 tokenIndexFrom = doppleSwap.getTokenIndex(address(_src));\r\n        uint8 tokenIndexTo = doppleSwap.getTokenIndex(address(_dest));\r\n        amount = doppleSwap.swap(\r\n            tokenIndexFrom,\r\n            tokenIndexTo,\r\n            inputAmount,\r\n            minOutputAmount,\r\n            _DEADLINE_\r\n        );\r\n    }\r\n\r\n    /*\r\n\r\n    █▀▄ █▀▀ █░█\r\n    █▄▀ ██▄ ▀▄▀\r\n\r\n    */\r\n    function testTransfer(MultiSwapDesctiption memory desc)\r\n        external\r\n        payable\r\n        returns (uint256 returnAmount, uint256 blockNumber)\r\n    {\r\n        IERC20 dstToken = desc.dstToken;\r\n        (returnAmount, blockNumber) = _trade(desc);\r\n        uint256 beforeAmount = dstToken.balanceOf(desc.to);\r\n        dstToken.safeTransfer(desc.to, returnAmount);\r\n        uint256 afterAmount = dstToken.balanceOf(desc.to);\r\n        uint256 got = afterAmount.sub(beforeAmount);\r\n        require(got == returnAmount, 'ArkenTester: Has Tax');\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDODOApproveAddress\",\"type\":\"address\"}],\"name\":\"DODOApproveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeWallet\",\"type\":\"address\"}],\"name\":\"FeeWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dexAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"UpdateVyper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWETHDfyn\",\"type\":\"address\"}],\"name\":\"WETHDfynUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWETH\",\"type\":\"address\"}],\"name\":\"WETHUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_DEADLINE_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DODO_APPROVE_ADDR_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ETH_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_FEE_WALLET_ADDR_\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_WETH_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_WETH_DFYN_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedEther\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedEtherDfyn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dodoApproveAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"dexAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"direction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"fromTokenIndex\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"toTokenIndex\",\"type\":\"int128\"},{\"internalType\":\"address[]\",\"name\":\"paths\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"lpAddresses\",\"type\":\"address[]\"},{\"internalType\":\"enum ArkenDexV1.RouterInterface\",\"name\":\"dexInterface\",\"type\":\"uint8\"}],\"internalType\":\"struct ArkenDexV1.TradeRoute[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"internalType\":\"struct ArkenDexV1.MultiSwapDesctiption\",\"name\":\"desc\",\"type\":\"tuple\"}],\"name\":\"multiTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"dexAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"direction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"fromTokenIndex\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"toTokenIndex\",\"type\":\"int128\"},{\"internalType\":\"address[]\",\"name\":\"paths\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"lpAddresses\",\"type\":\"address[]\"},{\"internalType\":\"enum ArkenDexV1.RouterInterface\",\"name\":\"dexInterface\",\"type\":\"uint8\"}],\"internalType\":\"struct ArkenDexV1.TradeRoute[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"internalType\":\"struct ArkenDexV1.MultiSwapDesctiption\",\"name\":\"desc\",\"type\":\"tuple\"}],\"name\":\"testTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dodoApproveAddress\",\"type\":\"address\"}],\"name\":\"updateDODOApproveAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"updateFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"updateWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth_dfyn\",\"type\":\"address\"}],\"name\":\"updateWETHDfyn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ArkenDexV1","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a1f0f496fa70f5b50e170af7f26b15235fe6fb56f170a1d3153af09963d35566"}]}