{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n//\r\n// Developed by https://1block.one\r\n//\r\n\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: BBstaking.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\n\r\n/*\r\n    Interfaces for Bohemian Bulldogs service Smart Contracts\r\n*/ \r\ninterface TokenContract { \r\n    function allowanceFor(address spender) external view returns(uint256); \r\n    function transferFrom(address _from, address _to, uint256 _value) external returns(bool); \r\n    function balanceOf(address owner) external view returns(uint); function burnFrom(address account, uint256 amount) external; \r\n}\r\n\r\ninterface NFTContract { \r\n    function ownerOf(uint256 _tokenId) external view returns (address); \r\n    function transferFrom(address from, address to, uint tokenId) external payable; \r\n} \r\n/* \r\n    End of interfaces\r\n*/\r\n\r\ncontract BulldogsStaking is ReentrancyGuard {\r\n\r\n    //// Events\r\n    event _adminSetCollectionEarnRate(uint collectionId, uint _earnRate);\r\n    event _adminSetCollectionSwapCost(uint collectionId, uint _swapRate);\r\n    event _adminSetTokensCollections(uint[] _tokenIds, uint _collectionId);\r\n    event _adminSetMinStakingPerion(uint period);\r\n    event _adminSetFreezePeriod(uint period);\r\n    event _adminSetClaimableBalance(address[] _address, uint amount);\r\n    event _adminAddBonus(address[] _address, uint amount);\r\n\r\n    event _userSetTokenCollection(uint _tokenId, uint _collectionId);\r\n    event _setTokenContract(address _address);\r\n    event _setNFTContract(address _address);\r\n\r\n    event Staked(uint tokenId);\r\n    event Unstaked(uint256 tokenId);\r\n    event BBonesClaimed(address _address, uint amount);\r\n    event bulldogUpgraded(uint tokenId);\r\n    event bulldogSwapped(uint tokenId);\r\n\r\n    // Base variables\r\n    address private _owner;\r\n    address private _tokenContractAddress;\r\n    address private _nftContractAddress;\r\n\r\n    // Minimal period before you can claim $BBONES, in blocks\r\n    uint minStakingPeriod = 930;\r\n\r\n    // Freeze after which you can claim and unstake, in blocks\r\n    uint freezePeriod = 20000;\r\n\r\n    /* Data storage:\r\n        Collections:\r\n        1 - Street\r\n        2 - Bohemian\r\n        3 - Boho\r\n        4 - Business\r\n        5 - Business Smokers\r\n        6 - Capsule\r\n    */\r\n\r\n    // tokenId -> collectionId\r\n    mapping(uint => uint) public tokensData;\r\n\r\n    // collectionId -> minStakingPeriod earn rate\r\n    mapping(uint => uint) public earnRates;\r\n\r\n    // collectionId -> upgradeability cost in $BBONES to the next one\r\n    mapping(uint => uint) public upgradeabilityCost;\r\n\r\n    // collectionId -> swapping cost in $BBONES, for interchange your NFT inside the same collection\r\n    mapping(uint => uint) public swappingCost;\r\n\r\n    // list of claimableBalance\r\n    mapping(address => uint) public claimableBalance;\r\n\r\n    struct Staker {\r\n        // list of staked tokenIds\r\n        uint[] stakedTokens;\r\n\r\n        // tokenId -> blockNumber\r\n        mapping(uint => uint) tokenStakeBlock;\r\n    }\r\n\r\n    mapping(address => Staker) private stakeHolders;\r\n\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n\r\n        earnRates[1] = 1;\r\n        earnRates[2] = 2;\r\n        earnRates[3] = 8;\r\n        earnRates[4] = 24;\r\n        earnRates[5] = 36;\r\n        earnRates[6] = 0;\r\n\r\n        upgradeabilityCost[1] = 100;\r\n        upgradeabilityCost[2] = 400;\r\n        upgradeabilityCost[3] = 2400;\r\n        upgradeabilityCost[4] = 4800;\r\n\r\n        swappingCost[1] = 50;\r\n        swappingCost[2] = 200;\r\n        swappingCost[3] = 1200;\r\n        swappingCost[4] = 2400;\r\n        swappingCost[5] = 3200;\r\n    }\r\n\r\n\r\n    /*\r\n    Modifiers\r\n    */\r\n    modifier onlyOwner {\r\n        require(msg.sender == _owner || msg.sender == address(this), \"You're not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier staked(uint tokenId)  {\r\n        require(stakeHolders[msg.sender].tokenStakeBlock[tokenId] != 0, \"You have not staked this token\");\r\n        _;\r\n    }\r\n\r\n    modifier notStaked(uint tokenId) {\r\n        require(stakeHolders[msg.sender].tokenStakeBlock[tokenId] == 0, \"You have already staked this token\");\r\n        _;\r\n    }\r\n\r\n    modifier freezePeriodPassed(uint tokenId) {\r\n        uint blockNum = stakeHolders[msg.sender].tokenStakeBlock[tokenId];\r\n        require(blockNum + freezePeriod <= block.number, \"This token is freezed, try again later\");\r\n        _;\r\n    }\r\n\r\n    modifier ownerOfToken(uint tokenId) {\r\n        require(msg.sender == NFTContract(_nftContractAddress).ownerOf(tokenId) || stakeHolders[msg.sender].tokenStakeBlock[tokenId] > 0, \"You are not owner of this token\");\r\n        _;\r\n    }\r\n    /*\r\n    End of modifiers\r\n    */\r\n\r\n\r\n    /*\r\n    Storage-related functions\r\n    */\r\n    // Set/reset collection's earn rate\r\n    function adminSetCollectionEarnRate(uint collectionId, uint _earnRate) external onlyOwner {\r\n        earnRates[collectionId] = _earnRate;\r\n        emit _adminSetCollectionEarnRate(collectionId, _earnRate);\r\n    }\r\n\r\n    // Set/reset collection's swap rate\r\n    function adminSetCollectionSwapCost(uint collectionId, uint _swapCost) external onlyOwner {\r\n        swappingCost[collectionId] = _swapCost;\r\n        emit _adminSetCollectionSwapCost(collectionId, _swapCost);\r\n    }\r\n\r\n    // Set/reset token's earn rate\r\n    function adminSetTokensCollections(uint[] memory _tokenIds, uint _collectionId) external onlyOwner {\r\n        for (uint i=0; i < _tokenIds.length; i++) {\r\n            tokensData[_tokenIds[i]] = _collectionId;\r\n        }\r\n        emit _adminSetTokensCollections(_tokenIds, _collectionId);\r\n    }\r\n\r\n    // Set claimableBalance to wallets\r\n    function adminSetClaimableBalance(address[] memory _address, uint amount) external onlyOwner {\r\n        for (uint i=0; i < _address.length; i++) {\r\n            claimableBalance[_address[i]] = amount;\r\n        }\r\n        emit _adminSetClaimableBalance(_address, amount);\r\n    }\r\n\r\n    // Add claimableBalance to wallets\r\n    function adminAddBonus(address[] memory _address, uint amount) public onlyOwner {\r\n        for (uint i=0; i < _address.length; i++) {\r\n            claimableBalance[_address[i]] += amount;\r\n        }\r\n        emit _adminAddBonus(_address, amount);\r\n    }\r\n\r\n    // Set collectionId for tokenId\r\n    function userSetTokenCollection(uint _tokenId, uint _collectionId) internal {\r\n        tokensData[_tokenId] = _collectionId;\r\n        emit _userSetTokenCollection(_tokenId, _collectionId);\r\n    }\r\n\r\n    // Set new minStakingPeriod\r\n    function setMinStakingPeriod(uint period) public onlyOwner {\r\n        minStakingPeriod = period;\r\n        emit _adminSetMinStakingPerion(period);\r\n    }\r\n\r\n    // Set new freezePeriod\r\n    function setFreezePeriod(uint period) public onlyOwner {\r\n        freezePeriod = period;\r\n        emit _adminSetFreezePeriod(period);\r\n    }\r\n    /*\r\n    End of storage-related functions\r\n    */\r\n\r\n\r\n    /*\r\n    Setters\r\n    */\r\n    function setTokenContract(address _address) public onlyOwner {\r\n        _tokenContractAddress = _address;\r\n        emit _setTokenContract(_address);\r\n    }\r\n\r\n    function setNFTContract(address _address) public onlyOwner {\r\n        _nftContractAddress = _address;\r\n        emit _setNFTContract(_address);\r\n    }\r\n    /*\r\n    End of setters\r\n    */\r\n\r\n\r\n    /*\r\n    Getters\r\n    */\r\n\r\n    // In how many blocks token can be unstaked\r\n    function getBlocksTillUnfreeze(uint tokenId, address _address) public view returns(uint) {\r\n        uint blocksPassed = block.number - stakeHolders[_address].tokenStakeBlock[tokenId];\r\n        if (blocksPassed >= freezePeriod) {\r\n            return 0;\r\n        }\r\n        return freezePeriod - blocksPassed;\r\n    }\r\n\r\n    function getTokenEarnRate(uint _tokenId) public view returns(uint tokenEarnRate) {\r\n        return earnRates[tokensData[_tokenId]];\r\n    }\r\n\r\n    // Get token's unrealized pnl\r\n    function getTokenUPNL(uint tokenId, address _address) public view returns(uint) {\r\n\r\n        if (stakeHolders[_address].tokenStakeBlock[tokenId] == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint tokenBlockDiff = block.number - stakeHolders[_address].tokenStakeBlock[tokenId];\r\n\r\n        //Token will not be in freeze period\r\n        if (tokenBlockDiff <= freezePeriod) {\r\n            return 0;\r\n        }\r\n\r\n        // Token has to be staked minimum number of blocks\r\n        if (tokenBlockDiff >= minStakingPeriod) {\r\n            uint quotient;\r\n            uint remainder;\r\n\r\n            // if enough blocks have passed to get at least 1 payout => proceed\r\n            (quotient, remainder) = superDivision(tokenBlockDiff, minStakingPeriod);\r\n            if (quotient > 0) {\r\n                uint blockRate = getTokenEarnRate(tokenId);\r\n                uint tokenEarnings = blockRate * quotient;\r\n                return tokenEarnings;\r\n\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    // Returns total unrealized pnl\r\n    function getTotalUPNL(address _address) public view returns(uint) {\r\n        uint totalUPNL = 0;\r\n\r\n        uint tokensCount = stakeHolders[_address].stakedTokens.length;\r\n        for (uint i = 0; i < tokensCount; i++) {\r\n            totalUPNL += getTokenUPNL(stakeHolders[_address].stakedTokens[i], _address);\r\n        }\r\n        return totalUPNL;\r\n    }\r\n\r\n    /*\r\n    End of getters\r\n    */\r\n\r\n\r\n    /*\r\n    Staking functions\r\n    */\r\n    function stake(uint tokenId, uint tokenCollection) public nonReentrant notStaked(tokenId) ownerOfToken(tokenId) {\r\n        // Setting token's collection if it wasn't set\r\n        if (tokensData[tokenId] == 0) {\r\n            userSetTokenCollection(tokenId, tokenCollection);\r\n        }\r\n\r\n        // Checking bulldog's collection to see whether it's upgradeable\r\n        require(tokensData[tokenId] >= 1 && tokensData[tokenId] < 6, \"You cannot stake this bulldog\");\r\n\r\n        // Making approved transfer from the main NFT contract\r\n        NFTContract(_nftContractAddress).transferFrom(msg.sender, address(this), tokenId);\r\n\r\n        // Writing changes to DB\r\n        stakeHolders[msg.sender].tokenStakeBlock[tokenId] = block.number + 1;\r\n        stakeHolders[msg.sender].stakedTokens.push(tokenId);\r\n\r\n        emit Staked(tokenId);\r\n    }\r\n\r\n    function unstake(uint256 tokenId) public nonReentrant ownerOfToken(tokenId) staked(tokenId) freezePeriodPassed(tokenId) {\r\n        // Adding unclaimed $BBONES to claimableBalance\r\n        claimableBalance[msg.sender] += getTokenUPNL(tokenId, msg.sender);\r\n\r\n        stakeHolders[msg.sender].tokenStakeBlock[tokenId] = 0;\r\n\r\n        uint tokensCount = stakeHolders[msg.sender].stakedTokens.length;\r\n\r\n        uint[] memory newStakedTokens = new uint[](tokensCount - 1);\r\n\r\n        uint j = 0;\r\n        for (uint i = 0; i < tokensCount; i++) {\r\n            if (stakeHolders[msg.sender].stakedTokens[i] != tokenId) {\r\n                newStakedTokens[j] = stakeHolders[msg.sender].stakedTokens[i];\r\n                j += 1;\r\n            }\r\n        }\r\n        stakeHolders[msg.sender].stakedTokens = newStakedTokens;\r\n\r\n        // Making approved transfer NFT back to its owner\r\n        NFTContract(_nftContractAddress).transferFrom(address(this), msg.sender, tokenId);\r\n\r\n        emit Unstaked(tokenId);\r\n\r\n    }\r\n\r\n    // divides two numbers and returns quotient & remainder\r\n    function superDivision(uint numerator, uint denominator) internal pure returns(uint quotient, uint remainder) {\r\n        quotient  = numerator / denominator;\r\n        remainder = numerator - denominator * quotient;\r\n    }\r\n\r\n    // Call to get you staking reward\r\n    function claimBBones(address _address) public nonReentrant {\r\n\r\n        uint amountToPay = 0;\r\n        uint tokensCount = stakeHolders[_address].stakedTokens.length;\r\n\r\n        for (uint i = 0; i < tokensCount; i++) {\r\n            uint tokenId = stakeHolders[_address].stakedTokens[i];\r\n            uint tokenBlockDiff = block.number - stakeHolders[_address].tokenStakeBlock[tokenId];\r\n\r\n            // Token has to be staked minimum number of blocks\r\n            if (tokenBlockDiff >= minStakingPeriod && stakeHolders[_address].tokenStakeBlock[tokenId] + freezePeriod <= block.number) {\r\n                uint quotient;\r\n                uint remainder;\r\n\r\n                // if enough blocks have passed to get at least 1 payout => proceed\r\n                (quotient, remainder) = superDivision(tokenBlockDiff, minStakingPeriod);\r\n                if (quotient > 0) {\r\n                    uint blockRate = getTokenEarnRate(tokenId);\r\n                    uint tokenEarnings = blockRate * quotient;\r\n                    amountToPay += tokenEarnings;\r\n\r\n                    stakeHolders[_address].tokenStakeBlock[tokenId] = block.number - remainder + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Claiming claimableBalance if any\r\n        if (claimableBalance[_address] > 0) {\r\n            amountToPay += claimableBalance[_address];\r\n            claimableBalance[_address] = 0;\r\n        }\r\n\r\n        TokenContract(_tokenContractAddress).transferFrom(_tokenContractAddress, _address, amountToPay);\r\n        emit BBonesClaimed(_address, amountToPay);\r\n    }\r\n\r\n    // Get user's list of staked tokens\r\n    function stakedTokensOf(address _address) public view returns (uint[] memory) {\r\n        return stakeHolders[_address].stakedTokens;\r\n    }\r\n    /*\r\n        End of staking\r\n    */\r\n\r\n\r\n    /*\r\n        Upgrading\r\n    */\r\n    function upgradeBulldog(uint tokenId, uint collectionId, uint upgradeType) public nonReentrant ownerOfToken(tokenId) {\r\n        /*\r\n            Upgrade types:\r\n                1 - to the next collection\r\n                2 - swap inside the same collection\r\n        */\r\n\r\n        // Setting token's collection if it wasn't set\r\n        if (tokensData[tokenId] == 0) {\r\n            tokensData[tokenId] = collectionId;\r\n        }\r\n\r\n        // Checking bulldog's collection to see whether it's upgradeable\r\n        require(tokensData[tokenId] >= 1 && tokensData[tokenId] < 5, \"Your bulldog cannot be upgraded further\");\r\n\r\n        // User has emough $BBONES to pay for the upgrade\r\n        require(TokenContract(_tokenContractAddress).balanceOf(msg.sender) >= upgradeabilityCost[tokensData[tokenId]], \"You don't have enough $BBONES\");\r\n\r\n        // Upgrading\r\n        if (upgradeType == 1) {\r\n\r\n            // If token is staked: save his UPNL and reset\r\n            if (stakeHolders[msg.sender].tokenStakeBlock[tokenId] > 0) {\r\n                // Adding unclaimed $BBONES to claimableBalanceses\r\n                claimableBalance[msg.sender] += getTokenUPNL(tokenId, msg.sender);\r\n\r\n                stakeHolders[msg.sender].tokenStakeBlock[tokenId] = block.number + 1;\r\n            }\r\n            TokenContract(_tokenContractAddress).burnFrom(msg.sender, upgradeabilityCost[tokensData[tokenId]]);\r\n            tokensData[tokenId] += 1;\r\n            emit bulldogUpgraded(tokenId);\r\n        }\r\n\r\n        // Swapping\r\n        if (upgradeType == 2) {\r\n            TokenContract(_tokenContractAddress).burnFrom(msg.sender, upgradeabilityCost[tokensData[tokenId]]);\r\n            emit bulldogSwapped(tokenId);\r\n        }\r\n    }\r\n    /*\r\n        End of upgrading\r\n    */\r\n}\r\n\r\n\r\n//\r\n// Developed by https://1block.one\r\n//","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BBonesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_adminAddBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_adminSetClaimableBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_earnRate\",\"type\":\"uint256\"}],\"name\":\"_adminSetCollectionEarnRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_swapRate\",\"type\":\"uint256\"}],\"name\":\"_adminSetCollectionSwapCost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"_adminSetFreezePeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"_adminSetMinStakingPerion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"_adminSetTokensCollections\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_setNFTContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_setTokenContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"_userSetTokenCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"bulldogSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"bulldogUpgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminAddBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminSetClaimableBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earnRate\",\"type\":\"uint256\"}],\"name\":\"adminSetCollectionEarnRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapCost\",\"type\":\"uint256\"}],\"name\":\"adminSetCollectionSwapCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"adminSetTokensCollections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"claimBBones\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBlocksTillUnfreeze\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenEarnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenEarnRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTokenUPNL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTotalUPNL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setFreezePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setMinStakingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenCollection\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"stakedTokensOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swappingCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgradeType\",\"type\":\"uint256\"}],\"name\":\"upgradeBulldog\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"upgradeabilityCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BulldogsStaking","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://39937f7a53bd94dff6277298b9564796df812cfabd135ba472da9b69437d49f2"}]}