{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StakingNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract StakingNFT is ReentrancyGuard, ERC1155Holder {\\n    using SafeMath for uint256;\\n\\n    uint128 constant private BASE_MULTIPLIER = uint128(1 * 10 ** 18);\\n\\n    // the address of the erc1155 token required for the pools for this Staking\\n    address public immutable erc1155TokenAddress;\\n\\n    // timestamp for the epoch 1\\n    // everything before that is considered epoch 0 which won't have a reward but allows for the initial stake\\n    uint256 public immutable epoch1Start;\\n\\n    // duration of each epoch\\n    uint256 public immutable epochDuration;\\n\\n    // holds the current balance of the user for each token for a specific NFT ID\\n    mapping(address => mapping(address => mapping(uint256 => uint256))) private balances;\\n\\n    // holds the current balance of the user for each erc1155TokenId - user => tokenId => balance\\n    mapping(address => mapping(uint256 => uint256)) private erc1155Balance;\\n\\n    // holds the total poolTokenBalance for erc1155TokenId poolToken => tokenId => balance\\n    mapping(address => mapping(uint256 => uint256)) private poolTokenBalance;\\n\\n    struct Pool {\\n        uint256 size;\\n        bool set;\\n    }\\n\\n    // for each token and erc1155TokenId, we store the total pool size\\n    // poolSize[tokenAddress][erc1155TokenId][epoch]\\n    mapping(address => mapping(uint256 => mapping(uint256 => Pool))) private poolSize;\\n\\n    // balanceCheckpoints[user][token][erc1155TokenId][]\\n    mapping(address => mapping(address => mapping(uint256 => Checkpoint[]))) private balanceCheckpoints;\\n\\n    mapping(address => uint128) private lastWithdrawEpochId;\\n\\n    // a checkpoint of the valid balance of a user for an epoch\\n    struct Checkpoint {\\n        uint128 epochId;\\n        uint128 multiplier;\\n        uint256 startBalance;\\n        uint256 newDeposits;\\n    }\\n\\n    event Deposit(address indexed user, address indexed tokenAddress, uint256 indexed erc1155TokenId, uint256 amount);\\n    event Withdraw(address indexed user, address indexed tokenAddress, uint256 indexed erc1155TokenId, uint256 amount);\\n    event ManualEpochInit(address indexed caller, uint128 indexed epochId, address[] tokens, uint256[] erc1155TokenIds);\\n    event EmergencyWithdraw(address indexed user, address indexed tokenAddress, uint256 indexed erc1155TokenId, uint256 amount);\\n\\n    constructor (address _erc1155Token, uint256 _epoch1Start, uint256 _epochDuration) public {\\n        erc1155TokenAddress = _erc1155Token;\\n        epoch1Start = _epoch1Start;\\n        epochDuration = _epochDuration;\\n    }\\n\\n    /*\\n     * Stores `amount` of `tokenAddress` tokens for the `user` into the vault\\n     */\\n    function deposit(address tokenAddress, uint256 erc1155TokenId, uint256 amount) public nonReentrant {\\n        require(amount > 0, \\\"Staking: Amount must be > 0\\\");\\n\\n        if (erc1155Balance[msg.sender][erc1155TokenId] == 0) {\\n            // Stake the erc1155 NFT, users can deposit only 1 of the NFT\\n            erc1155Balance[msg.sender][erc1155TokenId] = 1;\\n            IERC1155(erc1155TokenAddress).safeTransferFrom(msg.sender, address(this), erc1155TokenId, 1, new bytes(0));\\n        }\\n\\n        balances[msg.sender][tokenAddress][erc1155TokenId] = balances[msg.sender][tokenAddress][erc1155TokenId].add(amount);\\n        poolTokenBalance[tokenAddress][erc1155TokenId] = poolTokenBalance[tokenAddress][erc1155TokenId].add(amount);\\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\\n\\n        // epoch logic\\n        uint128 currentEpoch = getCurrentEpoch();\\n        uint128 currentMultiplier = currentEpochMultiplier();\\n\\n        if (!epochIsInitialized(tokenAddress, erc1155TokenId, currentEpoch)) {\\n            address[] memory tokens = new address[](1);\\n            tokens[0] = tokenAddress;\\n            uint256[] memory erc1155TokenIds = new uint256[](1);\\n            erc1155TokenIds[0] = erc1155TokenId;\\n\\n            manualEpochInit(tokens, erc1155TokenIds, currentEpoch);\\n        }\\n\\n        // update the next epoch pool size\\n        Pool storage pNextEpoch = poolSize[tokenAddress][erc1155TokenId][currentEpoch + 1];\\n        pNextEpoch.size = poolTokenBalance[tokenAddress][erc1155TokenId];\\n        pNextEpoch.set = true;\\n\\n        Checkpoint[] storage checkpoints = balanceCheckpoints[msg.sender][tokenAddress][erc1155TokenId];\\n\\n        uint256 balanceBefore = getEpochUserBalance(msg.sender, tokenAddress, erc1155TokenId, currentEpoch);\\n\\n        // if there's no checkpoint yet, it means the user didn't have any activity\\n        // we want to store checkpoints both for the current epoch and next epoch because\\n        // if a user does a withdraw, the current epoch can also be modified and\\n        // we don't want to insert another checkpoint in the middle of the array as that could be expensive\\n        if (checkpoints.length == 0) {\\n            checkpoints.push(Checkpoint(currentEpoch, currentMultiplier, 0, amount));\\n\\n            // next epoch => multiplier is 1, epoch deposits is 0\\n            checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, amount, 0));\\n        } else {\\n            uint256 last = checkpoints.length - 1;\\n\\n            // the last action happened in an older epoch (e.g. a deposit in epoch 3, current epoch is >=5)\\n            if (checkpoints[last].epochId < currentEpoch) {\\n                uint128 multiplier = computeNewMultiplier(\\n                    getCheckpointBalance(checkpoints[last]),\\n                    BASE_MULTIPLIER,\\n                    amount,\\n                        currentMultiplier\\n                );\\n                checkpoints.push(Checkpoint(currentEpoch, multiplier, getCheckpointBalance(checkpoints[last]), amount));\\n                checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, balances[msg.sender][tokenAddress][erc1155TokenId], 0));\\n            }\\n            // the last action happened in the previous epoch\\n            else if (checkpoints[last].epochId == currentEpoch) {\\n                checkpoints[last].multiplier = computeNewMultiplier(\\n                    getCheckpointBalance(checkpoints[last]),\\n                    checkpoints[last].multiplier,\\n                    amount,\\n                    currentMultiplier\\n                );\\n                checkpoints[last].newDeposits = checkpoints[last].newDeposits.add(amount);\\n\\n                checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, balances[msg.sender][tokenAddress][erc1155TokenId], 0));\\n            }\\n            // the last action happened in the current epoch\\n            else {\\n                if (last >= 1 && checkpoints[last - 1].epochId == currentEpoch) {\\n                    checkpoints[last - 1].multiplier = computeNewMultiplier(\\n                        getCheckpointBalance(checkpoints[last - 1]),\\n                        checkpoints[last - 1].multiplier,\\n                        amount,\\n                        currentMultiplier\\n                    );\\n                    checkpoints[last - 1].newDeposits = checkpoints[last - 1].newDeposits.add(amount);\\n                }\\n\\n                checkpoints[last].startBalance = balances[msg.sender][tokenAddress][erc1155TokenId];\\n            }\\n        }\\n\\n        uint256 balanceAfter = getEpochUserBalance(msg.sender, tokenAddress, erc1155TokenId, currentEpoch);\\n\\n        poolSize[tokenAddress][erc1155TokenId][currentEpoch].size = poolSize[tokenAddress][erc1155TokenId][currentEpoch].size.add(balanceAfter.sub(balanceBefore));\\n\\n        emit Deposit(msg.sender, tokenAddress, erc1155TokenId, amount);\\n    }\\n\\n    /*\\n     * Removes the deposit of the user and sends the amount of `tokenAddress` back to the `user`\\n     */\\n    function withdraw(address tokenAddress, uint256 erc1155TokenId, uint256 amount) public nonReentrant {\\n        require(balances[msg.sender][tokenAddress][erc1155TokenId] >= amount, \\\"Staking: balance too small\\\");\\n\\n        balances[msg.sender][tokenAddress][erc1155TokenId] = balances[msg.sender][tokenAddress][erc1155TokenId].sub(amount);\\n        poolTokenBalance[tokenAddress][erc1155TokenId] = poolTokenBalance[tokenAddress][erc1155TokenId].sub(amount);\\n\\n        IERC20 token = IERC20(tokenAddress);\\n        token.transfer(msg.sender, amount);\\n\\n        // withdraw the staked NFT if all funds are withdrawn\\n        if (erc1155Balance[msg.sender][erc1155TokenId] > 0 && balances[msg.sender][tokenAddress][erc1155TokenId] == 0) {\\n            erc1155Balance[msg.sender][erc1155TokenId] = 0;\\n            IERC1155(erc1155TokenAddress).safeTransferFrom(address(this), msg.sender, erc1155TokenId, 1, new bytes(0));\\n        }\\n\\n        // epoch logic\\n        uint128 currentEpoch = getCurrentEpoch();\\n\\n        lastWithdrawEpochId[tokenAddress] = currentEpoch;\\n\\n        if (!epochIsInitialized(tokenAddress, erc1155TokenId, currentEpoch)) {\\n            address[] memory tokens = new address[](1);\\n            tokens[0] = tokenAddress;\\n            uint256[] memory erc1155TokenIds = new uint256[](1);\\n            erc1155TokenIds[0] = erc1155TokenId;\\n            manualEpochInit(tokens, erc1155TokenIds, currentEpoch);\\n        }\\n\\n        // update the pool size of the next epoch to its current balance\\n        Pool storage pNextEpoch = poolSize[tokenAddress][erc1155TokenId][currentEpoch + 1];\\n        pNextEpoch.size = poolTokenBalance[tokenAddress][erc1155TokenId];\\n        pNextEpoch.set = true;\\n\\n        Checkpoint[] storage checkpoints = balanceCheckpoints[msg.sender][tokenAddress][erc1155TokenId];\\n        uint256 last = checkpoints.length - 1;\\n\\n        // note: it's impossible to have a withdraw and no checkpoints because the balance would be 0 and revert\\n\\n        // there was a deposit in an older epoch (more than 1 behind [eg: previous 0, now 5]) but no other action since then\\n        if (checkpoints[last].epochId < currentEpoch) {\\n            checkpoints.push(Checkpoint(currentEpoch, BASE_MULTIPLIER, balances[msg.sender][tokenAddress][erc1155TokenId], 0));\\n\\n            poolSize[tokenAddress][erc1155TokenId][currentEpoch].size = poolSize[tokenAddress][erc1155TokenId][currentEpoch].size.sub(amount);\\n        }\\n        // there was a deposit in the `epochId - 1` epoch => we have a checkpoint for the current epoch\\n        else if (checkpoints[last].epochId == currentEpoch) {\\n            checkpoints[last].startBalance = balances[msg.sender][tokenAddress][erc1155TokenId];\\n            checkpoints[last].newDeposits = 0;\\n            checkpoints[last].multiplier = BASE_MULTIPLIER;\\n\\n            poolSize[tokenAddress][erc1155TokenId][currentEpoch].size = poolSize[tokenAddress][erc1155TokenId][currentEpoch].size.sub(amount);\\n        }\\n        // there was a deposit in the current epoch\\n        else {\\n            Checkpoint storage currentEpochCheckpoint = checkpoints[last - 1];\\n\\n            uint256 balanceBefore = getCheckpointEffectiveBalance(currentEpochCheckpoint);\\n\\n            // in case of withdraw, we have 2 branches:\\n            // 1. the user withdraws less than he added in the current epoch\\n            // 2. the user withdraws more than he added in the current epoch (including 0)\\n            if (amount < currentEpochCheckpoint.newDeposits) {\\n                uint128 avgDepositMultiplier = uint128(\\n                    balanceBefore.sub(currentEpochCheckpoint.startBalance).mul(BASE_MULTIPLIER).div(currentEpochCheckpoint.newDeposits)\\n                );\\n\\n                currentEpochCheckpoint.newDeposits = currentEpochCheckpoint.newDeposits.sub(amount);\\n\\n                currentEpochCheckpoint.multiplier = computeNewMultiplier(\\n                    currentEpochCheckpoint.startBalance,\\n                    BASE_MULTIPLIER,\\n                    currentEpochCheckpoint.newDeposits,\\n                    avgDepositMultiplier\\n                );\\n            } else {\\n                currentEpochCheckpoint.startBalance = currentEpochCheckpoint.startBalance.sub(\\n                    amount.sub(currentEpochCheckpoint.newDeposits)\\n                );\\n                currentEpochCheckpoint.newDeposits = 0;\\n                currentEpochCheckpoint.multiplier = BASE_MULTIPLIER;\\n            }\\n\\n            uint256 balanceAfter = getCheckpointEffectiveBalance(currentEpochCheckpoint);\\n\\n            poolSize[tokenAddress][erc1155TokenId][currentEpoch].size = poolSize[tokenAddress][erc1155TokenId][currentEpoch].size.sub(balanceBefore.sub(balanceAfter));\\n\\n            checkpoints[last].startBalance = balances[msg.sender][tokenAddress][erc1155TokenId];\\n        }\\n\\n        emit Withdraw(msg.sender, tokenAddress, erc1155TokenId, amount);\\n    }\\n\\n    /*\\n     * manualEpochInit can be used by anyone to initialize an epoch based on the previous one\\n     * This is only applicable if there was no action (deposit/withdraw) in the current epoch.\\n     * Any deposit and withdraw will automatically initialize the current and next epoch.\\n     */\\n    function manualEpochInit(address[] memory tokens, uint256[] memory erc1155TokenIds, uint128 epochId) public {\\n        require(epochId <= getCurrentEpoch(), \\\"can't init a future epoch\\\");\\n        require(tokens.length == erc1155TokenIds.length, \\\"tokens and tokenIds arrays should be the same length\\\");\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            Pool storage p = poolSize[tokens[i]][erc1155TokenIds[i]][epochId];\\n\\n            if (epochId == 0) {\\n                p.size = uint256(0);\\n                p.set = true;\\n            } else {\\n                require(!epochIsInitialized(tokens[i], erc1155TokenIds[i], epochId), \\\"Staking: epoch already initialized\\\");\\n                require(epochIsInitialized(tokens[i], erc1155TokenIds[i], epochId - 1), \\\"Staking: previous epoch not initialized\\\");\\n\\n                p.size = poolSize[tokens[i]][erc1155TokenIds[i]][epochId - 1].size;\\n                p.set = true;\\n            }\\n        }\\n\\n        emit ManualEpochInit(msg.sender, epochId, tokens, erc1155TokenIds);\\n    }\\n\\n    function emergencyWithdraw(address tokenAddress, uint256 erc1155TokenId) public {\\n        require((getCurrentEpoch() - lastWithdrawEpochId[tokenAddress]) >= 10, \\\"At least 10 epochs must pass without success\\\");\\n\\n        uint256 totalUserBalance = balances[msg.sender][tokenAddress][erc1155TokenId];\\n        require(totalUserBalance > 0, \\\"Amount must be > 0\\\");\\n\\n        uint256 totalUserERC1155Balance = erc1155Balance[msg.sender][erc1155TokenId];\\n        require(totalUserERC1155Balance > 0, \\\"ERC1155Balance must be > 0\\\");\\n\\n        balances[msg.sender][tokenAddress][erc1155TokenId] = 0;\\n        erc1155Balance[msg.sender][erc1155TokenId] = 0;\\n        poolTokenBalance[tokenAddress][erc1155TokenId] = poolTokenBalance[tokenAddress][erc1155TokenId].sub(totalUserBalance);\\n\\n        IERC20 token = IERC20(tokenAddress);\\n        token.transfer(msg.sender, totalUserBalance);\\n        IERC1155(erc1155TokenAddress).safeTransferFrom(address(this), msg.sender, erc1155TokenId, 1, new bytes(0));\\n\\n        emit EmergencyWithdraw(msg.sender, tokenAddress, erc1155TokenId, totalUserBalance);\\n    }\\n\\n    /*\\n     * Returns the valid balance of a user that was taken into consideration in the total pool size for the epoch\\n     * A deposit will only change the next epoch balance.\\n     * A withdraw will decrease the current epoch (and subsequent) balance.\\n     */\\n    function getEpochUserBalance(address user, address token, uint256 erc1155TokenId, uint128 epochId) public view returns (uint256) {\\n        Checkpoint[] storage checkpoints = balanceCheckpoints[user][token][erc1155TokenId];\\n\\n        // if there are no checkpoints, it means the user never deposited any tokens, so the balance is 0\\n        if (checkpoints.length == 0 || epochId < checkpoints[0].epochId) {\\n            return 0;\\n        }\\n\\n        uint min = 0;\\n        uint max = checkpoints.length - 1;\\n\\n        // shortcut for blocks newer than the latest checkpoint == current balance\\n        if (epochId >= checkpoints[max].epochId) {\\n            return getCheckpointEffectiveBalance(checkpoints[max]);\\n        }\\n\\n        // binary search of the value in the array\\n        while (max > min) {\\n            uint mid = (max + min + 1) / 2;\\n            if (checkpoints[mid].epochId <= epochId) {\\n                min = mid;\\n            } else {\\n                max = mid - 1;\\n            }\\n        }\\n\\n        return getCheckpointEffectiveBalance(checkpoints[min]);\\n    }\\n\\n    /*\\n     * Returns the amount of `token` that the `user` has currently staked\\n     */\\n    function erc1155BalanceOf(address user, uint256 erc1155TokenId) public view returns (uint256) {\\n        return erc1155Balance[user][erc1155TokenId];\\n    }\\n\\n    /*\\n     * Returns the amount of `token` that the `user` has currently staked\\n     */\\n    function balanceOf(address user, address token, uint256 erc1155TokenId) public view returns (uint256) {\\n        return balances[user][token][erc1155TokenId];\\n    }\\n\\n    /*\\n     * Returns the id of the current epoch derived from block.timestamp\\n     */\\n    function getCurrentEpoch() public view returns (uint128) {\\n        if (block.timestamp < epoch1Start) {\\n            return 0;\\n        }\\n\\n        return uint128((block.timestamp - epoch1Start) / epochDuration + 1);\\n    }\\n\\n    /*\\n     * Returns the total amount of `tokenAddress` that was locked from beginning to end of epoch identified by `epochId`\\n     */\\n    function getEpochPoolSize(address tokenAddress, uint256 erc1155TokenId, uint128 epochId) public view returns (uint256) {\\n        // Premises:\\n        // 1. it's impossible to have gaps of uninitialized epochs\\n        // - any deposit or withdraw initialize the current epoch which requires the previous one to be initialized\\n        if (epochIsInitialized(tokenAddress, erc1155TokenId, epochId)) {\\n            return poolSize[tokenAddress][erc1155TokenId][epochId].size;\\n        }\\n\\n        // epochId not initialized and epoch 0 not initialized => there was never any action on this pool\\n        if (!epochIsInitialized(tokenAddress, erc1155TokenId, 0)) {\\n            return 0;\\n        }\\n\\n        // epoch 0 is initialized => there was an action at some point but none that initialized the epochId\\n        // which means the current pool size is equal to the current balance of token held by the staking contract for this erc1155TokenId\\n        return poolTokenBalance[tokenAddress][erc1155TokenId];\\n    }\\n\\n    /*\\n     * Returns the percentage of time left in the current epoch\\n     */\\n    function currentEpochMultiplier() public view returns (uint128) {\\n        uint128 currentEpoch = getCurrentEpoch();\\n        uint256 currentEpochEnd = epoch1Start + currentEpoch * epochDuration;\\n        uint256 timeLeft = currentEpochEnd - block.timestamp;\\n        uint128 multiplier = uint128(timeLeft * BASE_MULTIPLIER / epochDuration);\\n\\n        return multiplier;\\n    }\\n\\n    function computeNewMultiplier(uint256 prevBalance, uint128 prevMultiplier, uint256 amount, uint128 currentMultiplier) public pure returns (uint128) {\\n        uint256 prevAmount = prevBalance.mul(prevMultiplier).div(BASE_MULTIPLIER);\\n        uint256 addAmount = amount.mul(currentMultiplier).div(BASE_MULTIPLIER);\\n        uint128 newMultiplier = uint128(prevAmount.add(addAmount).mul(BASE_MULTIPLIER).div(prevBalance.add(amount)));\\n\\n        return newMultiplier;\\n    }\\n\\n    /*\\n     * Checks if an epoch is initialized, meaning we have a pool size set for it\\n     */\\n    function epochIsInitialized(address token, uint256 erc1155TokenId, uint128 epochId) public view returns (bool) {\\n        return poolSize[token][erc1155TokenId][epochId].set;\\n    }\\n\\n    function getCheckpointBalance(Checkpoint memory c) internal pure returns (uint256) {\\n        return c.startBalance.add(c.newDeposits);\\n    }\\n\\n    function getCheckpointEffectiveBalance(Checkpoint memory c) internal pure returns (uint256) {\\n        return getCheckpointBalance(c).mul(c.multiplier).div(BASE_MULTIPLIER);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    constructor() internal {\\n        _registerInterface(\\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\\n            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc1155Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epoch1Start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"erc1155TokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"erc1155TokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"erc1155TokenIds\",\"type\":\"uint256[]\"}],\"name\":\"ManualEpochInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"erc1155TokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc1155TokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prevBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"prevMultiplier\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"currentMultiplier\",\"type\":\"uint128\"}],\"name\":\"computeNewMultiplier\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochMultiplier\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc1155TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc1155TokenId\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch1Start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc1155TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"epochIsInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc1155TokenId\",\"type\":\"uint256\"}],\"name\":\"erc1155BalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc1155TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc1155TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"getEpochPoolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc1155TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"getEpochUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc1155TokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"manualEpochInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc1155TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingNFT","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000598b1007a5a9b83dc50e06c668a4eae0986cb6ab0000000000000000000000000000000000000000000000000000000061a418000000000000000000000000000000000000000000000000000000000000093a80","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}