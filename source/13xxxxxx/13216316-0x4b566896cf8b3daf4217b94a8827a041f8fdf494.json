{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-08-16\r\n*/\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/ASSXPresale.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ncontract ASSXPresale {\r\n    using SafeMath for uint256;\r\n\r\n    address payable public devAddress;\r\n    address public poolOwner;\r\n    address payable public feeAddress;\r\n    uint256 public withdrawFee;\r\n\r\n    ERC20 public token; // token that will be sold\r\n    address public unsoldTokensDumpAddress; // address where unsold tokens will be transferred to\r\n\r\n    mapping(address => uint256) public investments; // total wei invested per address\r\n    mapping(address => bool) public whitelistedAddresses; // addresses eligible in presale\r\n    mapping(address => uint256) public claimed; // if claimed=1, first period is claimed, claimed=2, second period is claimed, claimed=0, nothing claimed.\r\n\r\n    uint256 public totalInvestorsCount; // total investors count\r\n    uint256 public totalCollectedWei; // total wei collected\r\n    uint256 public totalTokens; // total tokens to be sold\r\n    uint256 public tokensLeft; // available tokens to be sold\r\n    uint256 public tokenPriceInWei; // token presale wei price per 1 token\r\n    uint256 public hardCapInWei; // maximum wei amount that can be invested in presale\r\n    uint256 public softCapInWei; // minimum wei amount to invest in presale, if not met, invested wei will be returned\r\n    uint256 public maxInvestInWei; // maximum wei amount that can be invested per wallet address\r\n    uint256 public minInvestInWei; // minimum wei amount that can be invested per wallet address\r\n    uint256 public openTime; // time when presale starts, investing is allowed\r\n    uint256 public closeTime; // time when presale closes, investing is not allowed\r\n    uint256 public claimTime; // time when token available for claim, investors can claim their tokens afterwards\r\n\r\n    uint256 public claimCycle = 90 days;\r\n    uint256 public constant claimPeriod = 2;\r\n\r\n    bool public presaleCancelled = false; // if true, investing will not be allowed, investors can withdraw, presale creator can withdraw their tokens\r\n    bool public refundAllowed = false; // if true, investor can get refund his investment.\r\n    bool public claimAllowed = false; // if true, investory can claim tokens.\r\n    bool public whitelistEnabled = true; // if false, skip check whitelistedAddresses\r\n\r\n    bool public isAudited = false; // if true, it's passed, false, it's not failed.\r\n    bytes32 public saleTitle;\r\n    bytes32 public linkTelegram;\r\n    bytes32 public linkTwitter;\r\n    bytes32 public linkGithub;\r\n    bytes32 public linkWebsite;\r\n    bytes32 public linkLogo;\r\n\r\n    mapping(address => bool) public auditorWhitelistedAddresses; // addresses eligible to perform audit\r\n    struct AuditorInfo {\r\n        bytes32 auditor; // auditor name\r\n        bool isVerified; // if true -> passed, false -> failed\r\n        bool isWarning; // if true -> warning, false -> no warning\r\n        string verifiedHash; // stores content of audit summary (actual text)\r\n        string warningHash; // stores content of warnings\r\n    }\r\n\r\n    AuditorInfo public auditInformation;\r\n\r\n    constructor(address _devAddress) public {\r\n        require(_devAddress != address(0));\r\n\r\n        devAddress = payable(_devAddress);\r\n    }\r\n\r\n    modifier onlyDev() {\r\n        require(devAddress == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPoolOwner() {\r\n        require(poolOwner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier whitelistedAddressOnly() {\r\n        require(\r\n            !whitelistEnabled || whitelistedAddresses[msg.sender],\r\n            \"Address not whitelisted\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier presaleIsNotCancelled() {\r\n        require(!presaleCancelled, \"Cancelled\");\r\n        _;\r\n    }\r\n\r\n    modifier investorOnly() {\r\n        require(investments[msg.sender] > 0, \"Not an investor\");\r\n        _;\r\n    }\r\n\r\n    modifier isValidClaimPeriod() {\r\n        uint256 currentPeriod = getCurrentPeriod();\r\n\r\n        require(currentPeriod > 0, \"Listing not started\");\r\n\r\n        require(\r\n            claimed[msg.sender] < currentPeriod,\r\n            \"Already claimed or refunded\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyRefundAllowed() {\r\n        require(refundAllowed, \"Refund is disallowed\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyClaimAllowed() {\r\n        require(claimAllowed, \"Claim is disallowed\");\r\n        _;\r\n    }\r\n\r\n    modifier whitelistedAuditorOnly() {\r\n        require(\r\n            auditorWhitelistedAddresses[msg.sender],\r\n            \"Auditor Address not whitelisted\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setAddressInfo(\r\n        address _tokenAddress,\r\n        address _unsoldTokensDumpAddress\r\n    ) external onlyDev {\r\n        require(_tokenAddress != address(0));\r\n        require(_unsoldTokensDumpAddress != address(0));\r\n\r\n        token = ERC20(_tokenAddress);\r\n        unsoldTokensDumpAddress = _unsoldTokensDumpAddress;\r\n    }\r\n\r\n    function setGeneralInfo(\r\n        uint256 _totalTokens,\r\n        uint256 _tokenPriceInWei,\r\n        uint256 _hardCapInWei,\r\n        uint256 _softCapInWei,\r\n        uint256 _maxInvestInWei,\r\n        uint256 _minInvestInWei,\r\n        uint256 _openTime,\r\n        uint256 _closeTime\r\n    ) external onlyDev {\r\n        require(_totalTokens > 0);\r\n        require(_tokenPriceInWei > 0);\r\n        require(_openTime > 0);\r\n        require(_closeTime > 0);\r\n        require(_hardCapInWei > 0);\r\n\r\n        // Hard cap > (token amount * token price)\r\n        require(_hardCapInWei <= _totalTokens.mul(_tokenPriceInWei));\r\n        // Soft cap > to hard cap\r\n        require(_softCapInWei <= _hardCapInWei);\r\n        //  Min. wei investment > max. wei investment\r\n        require(_minInvestInWei <= _maxInvestInWei);\r\n        // Open time >= close time\r\n        require(_openTime < _closeTime);\r\n\r\n        totalTokens = _totalTokens;\r\n        tokensLeft = _totalTokens;\r\n        tokenPriceInWei = _tokenPriceInWei;\r\n        hardCapInWei = _hardCapInWei;\r\n        softCapInWei = _softCapInWei;\r\n        maxInvestInWei = _maxInvestInWei;\r\n        minInvestInWei = _minInvestInWei;\r\n        openTime = _openTime;\r\n        closeTime = _closeTime;\r\n    }\r\n\r\n    function setStringInfo(\r\n        bytes32 _saleTitle,\r\n        bytes32 _linkTelegram,\r\n        bytes32 _linkGithub,\r\n        bytes32 _linkTwitter,\r\n        bytes32 _linkWebsite,\r\n        bytes32 _linkLogo\r\n    ) external onlyDev {\r\n        saleTitle = _saleTitle;\r\n        linkTelegram = _linkTelegram;\r\n        linkGithub = _linkGithub;\r\n        linkTwitter = _linkTwitter;\r\n        linkWebsite = _linkWebsite;\r\n        linkLogo = _linkLogo;\r\n    }\r\n\r\n    function setAuditorInfo(\r\n        bytes32 _auditor,\r\n        bool _isVerified,\r\n        bool _isWarning,\r\n        string calldata _verifiedHash,\r\n        string calldata _warningHash\r\n    ) external whitelistedAuditorOnly {\r\n        auditInformation.auditor = _auditor;\r\n        auditInformation.isVerified = _isVerified;\r\n        auditInformation.isWarning = _isWarning;\r\n        auditInformation.verifiedHash = _verifiedHash;\r\n        auditInformation.warningHash = _warningHash;\r\n    }\r\n\r\n    function addWhitelistedAddresses(address[] calldata _whitelistedAddresses)\r\n        external\r\n        onlyDev\r\n    {\r\n        for (uint256 i = 0; i < _whitelistedAddresses.length; i++) {\r\n            whitelistedAddresses[_whitelistedAddresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function addAuditorWhitelistedAddresses(\r\n        address[] calldata _whitelistedAddresses\r\n    ) external onlyDev {\r\n        for (uint256 i = 0; i < _whitelistedAddresses.length; i++) {\r\n            auditorWhitelistedAddresses[_whitelistedAddresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function setRefundAllowed(bool _refundAllowed)\r\n        external\r\n        onlyDev\r\n    {\r\n        refundAllowed = _refundAllowed;\r\n    }\r\n\r\n    function allowClaim(uint256 _claimTime) external onlyDev {\r\n        require(_claimTime > 0);\r\n        require(closeTime > 0);\r\n        require(_claimTime >= closeTime);\r\n\r\n        claimAllowed = true;\r\n        claimTime = _claimTime;\r\n    }\r\n\r\n    function setClaimCycle(uint256 _claimCycle)\r\n        external\r\n        onlyDev\r\n    {\r\n        claimCycle = _claimCycle;\r\n    }\r\n\r\n    function getTokenAmount(uint256 _weiAmount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _weiAmount.mul(1e18).div(tokenPriceInWei);\r\n    }\r\n\r\n    function invest()\r\n        public\r\n        payable\r\n        whitelistedAddressOnly\r\n        presaleIsNotCancelled\r\n    {\r\n        require(block.timestamp >= openTime, \"Not yet opened\");\r\n        require(block.timestamp < closeTime, \"Closed\");\r\n        require(totalCollectedWei < hardCapInWei, \"Hard cap reached\");\r\n        require(tokensLeft > 0);\r\n        require(msg.value <= tokensLeft.mul(tokenPriceInWei));\r\n        uint256 totalInvestmentInWei = investments[msg.sender].add(msg.value);\r\n        require(\r\n            totalInvestmentInWei >= minInvestInWei ||\r\n                totalCollectedWei >= hardCapInWei.sub(1 ether),\r\n            \"Min investment not reached\"\r\n        );\r\n        require(\r\n            maxInvestInWei == 0 || totalInvestmentInWei <= maxInvestInWei,\r\n            \"Max investment reached\"\r\n        );\r\n\r\n        if (investments[msg.sender] == 0) {\r\n            totalInvestorsCount = totalInvestorsCount.add(1);\r\n        }\r\n\r\n        totalCollectedWei = totalCollectedWei.add(msg.value);\r\n        investments[msg.sender] = totalInvestmentInWei;\r\n        tokensLeft = tokensLeft.sub(getTokenAmount(msg.value));\r\n    }\r\n\r\n    receive() external payable {\r\n        invest();\r\n    }\r\n\r\n    function transferUnsoldTokens()\r\n        external\r\n        onlyDev\r\n        presaleIsNotCancelled\r\n    {\r\n        uint256 unsoldTokensAmount =\r\n            token.balanceOf(address(this)).sub(\r\n                getTokenAmount(totalCollectedWei)\r\n            );\r\n        if (unsoldTokensAmount > 0) {\r\n            token.transfer(unsoldTokensDumpAddress, unsoldTokensAmount);\r\n        }\r\n    }\r\n\r\n    function claimTokens()\r\n        external\r\n        whitelistedAddressOnly\r\n        presaleIsNotCancelled\r\n        investorOnly\r\n        isValidClaimPeriod\r\n        onlyClaimAllowed\r\n    {\r\n        claimed[msg.sender] = claimed[msg.sender].add(1); // make sure this goes first before transfer to prevent reentrancy\r\n        if (claimed[msg.sender] == claimPeriod) {\r\n            token.transfer(\r\n                msg.sender,\r\n                getTokenAmount(investments[msg.sender].sub(investments[msg.sender].div(claimPeriod).mul(claimPeriod.sub(1))))\r\n            );\r\n        } else {\r\n            token.transfer(\r\n                msg.sender,\r\n                getTokenAmount(investments[msg.sender].div(claimPeriod))\r\n            );\r\n        }\r\n    }\r\n\r\n    function getRefund()\r\n        external\r\n        whitelistedAddressOnly\r\n        investorOnly\r\n        onlyRefundAllowed\r\n    {\r\n        if (!presaleCancelled) {\r\n            require(block.timestamp >= openTime, \"Not yet opened\");\r\n            require(block.timestamp >= closeTime, \"Not yet closed\");\r\n            require(softCapInWei > 0, \"No soft cap\");\r\n            require(totalCollectedWei < softCapInWei, \"Soft cap reached\");\r\n            require(claimed[msg.sender] == 0, \"Already claimed\");\r\n        }\r\n\r\n        claimed[msg.sender] = claimPeriod; // make sure this goes first before transfer to prevent reentrancy\r\n        uint256 investment = investments[msg.sender];\r\n        uint256 presaleBalance = address(this).balance;\r\n        require(presaleBalance > 0);\r\n\r\n        if (investment > presaleBalance) {\r\n            investment = presaleBalance;\r\n        }\r\n\r\n        if (investment > 0) {\r\n            msg.sender.transfer(investment);\r\n        }\r\n    }\r\n\r\n    function cancelAndTransferTokensToDev() external onlyDev {\r\n        if (devAddress != msg.sender) {\r\n            revert();\r\n        }\r\n\r\n        require(!presaleCancelled);\r\n        presaleCancelled = true;\r\n\r\n        uint256 balance = token.balanceOf(address(this));\r\n        if (balance > 0) {\r\n            token.transfer(devAddress, balance);\r\n        }\r\n    }\r\n\r\n    // ex: 3.5% ~ 3500\r\n    function setWithdrawFee(uint256 _withdrawFee) external onlyDev {\r\n        require(_withdrawFee >= 0 && _withdrawFee <= 100000, \"Fee value is out of range from 0 to 100000\");\r\n        withdrawFee = _withdrawFee;\r\n    }\r\n\r\n    function setPoolOwner(address _poolOwner) external onlyDev {\r\n        poolOwner = _poolOwner;\r\n    }\r\n\r\n    function setFeeAddress(address _feeAddress) external onlyDev {\r\n        feeAddress = payable(_feeAddress);\r\n    }\r\n\r\n    function setDevAddress(address _devAddress) external onlyDev {\r\n        devAddress = payable(_devAddress);\r\n    }\r\n\r\n    function setWhitelistEnabled(bool _whitelistEnabled) external onlyDev {\r\n        whitelistEnabled = _whitelistEnabled;\r\n    }\r\n\r\n    function collectFundsRaised() external onlyPoolOwner {\r\n        require(!presaleCancelled);\r\n\r\n        if (address(this).balance > 0) {\r\n            uint256 balance = address(this).balance;\r\n            if (withdrawFee == 0) {\r\n                devAddress.transfer(balance);\r\n            } else {\r\n                uint256 fee = balance.mul(withdrawFee).div(100000);\r\n                devAddress.transfer(balance.sub(fee));\r\n                feeAddress.transfer(fee);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getCurrentPeriod() public view returns (uint256) {\r\n        uint256 currentPeriod = 0;\r\n\r\n        for (uint256 i = 0; i < claimPeriod; i++) {\r\n            if (now >= claimTime + (claimCycle * i) && now < claimTime + (claimCycle * (i + 1))) {\r\n                currentPeriod = i + 1;\r\n                break;\r\n            }\r\n        }\r\n        if (now >= claimTime + (claimCycle * claimPeriod)) {\r\n            currentPeriod = claimPeriod;\r\n        }\r\n        return currentPeriod;\r\n    }\r\n\r\n    function tokenDecimals() public view returns (uint8) {\r\n        return token.decimals();\r\n    }\r\n\r\n    function tokenSymbol() public view returns (string memory) {\r\n        return token.symbol();\r\n    }\r\n\r\n    function tokenBalanceOf(address account) public view returns (uint256) {\r\n        return token.balanceOf(account);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelistedAddresses\",\"type\":\"address[]\"}],\"name\":\"addAuditorWhitelistedAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelistedAddresses\",\"type\":\"address[]\"}],\"name\":\"addWhitelistedAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTime\",\"type\":\"uint256\"}],\"name\":\"allowClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auditInformation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"auditor\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isWarning\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"verifiedHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"warningHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"auditorWhitelistedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelAndTransferTokensToDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFundsRaised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCapInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAudited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkGithub\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkLogo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkTelegram\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkTwitter\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkWebsite\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInvestInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minInvestInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleTitle\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_unsoldTokensDumpAddress\",\"type\":\"address\"}],\"name\":\"setAddressInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auditor\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isVerified\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isWarning\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_verifiedHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_warningHash\",\"type\":\"string\"}],\"name\":\"setAuditorInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimCycle\",\"type\":\"uint256\"}],\"name\":\"setClaimCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPriceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardCapInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_softCapInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxInvestInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minInvestInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_closeTime\",\"type\":\"uint256\"}],\"name\":\"setGeneralInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolOwner\",\"type\":\"address\"}],\"name\":\"setPoolOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_refundAllowed\",\"type\":\"bool\"}],\"name\":\"setRefundAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_saleTitle\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_linkTelegram\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_linkGithub\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_linkTwitter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_linkWebsite\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_linkLogo\",\"type\":\"bytes32\"}],\"name\":\"setStringInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_whitelistEnabled\",\"type\":\"bool\"}],\"name\":\"setWhitelistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softCapInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollectedWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferUnsoldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsoldTokensDumpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ASSXPresale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001723ad8207049ee668111d36d22235ef273529d0","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c7ca93960e70329b584bdb34fd0cfa1eca83ec961d211026983246c4798227af"}]}