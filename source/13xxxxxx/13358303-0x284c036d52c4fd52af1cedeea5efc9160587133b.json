{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n\\n  /**\\n   * @notice checks if the contract requires work to be done.\\n   * @param checkData data passed to the contract when checking for upkeep.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with,\\n   * if upkeep is needed.\\n   */\\n  function checkUpkeep(\\n    bytes calldata checkData\\n  )\\n    external\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory performData\\n    );\\n\\n  /**\\n   * @notice Performs work on the contract. Executed by the keepers, via the registry.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation.\\n   */\\n  function performUpkeep(\\n    bytes calldata performData\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/Rebaser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\nimport \\\"./interfaces/IRebaser.sol\\\";\\r\\n\\r\\ncontract Rebaser is IRebaser, Ownable, KeeperCompatibleInterface {\\r\\n    IVolatilityToken public volatilityToken;\\r\\n    IUniswapV2Pair[] public pairs;\\r\\n\\r\\n    uint256 public lastUpkeepTime;\\r\\n    uint32 public upkeepInterval = 1 days;\\r\\n    uint32 public upkeepTimeWindow = 15 minutes;\\r\\n\\r\\n    bool public enableWhitelist = true;\\r\\n    mapping (address => bool) public rebasers; // whitelist\\r\\n\\r\\n    constructor(IVolatilityToken _volatilityToken, IUniswapV2Pair[] memory _uniswapPairs) {\\r\\n        volatilityToken = _volatilityToken;\\r\\n        pairs = _uniswapPairs;\\r\\n        lastUpkeepTime = (block.timestamp / 1 days) * 1 days; // 12 AM at the day of deployment\\r\\n    }\\r\\n\\r\\n    function rebase() public override {\\r\\n        require(!enableWhitelist || rebasers[msg.sender], \\\"Whitelisted addresses only\\\");\\r\\n        require(address(volatilityToken) != address(0), \\\"Set volatility token\\\");\\r\\n        require(block.timestamp % 1 days <= upkeepTimeWindow, \\\"Bad time window\\\");\\r\\n        volatilityToken.rebaseCVI();\\r\\n        for (uint16 i = 0; i < pairs.length; i++) {\\r\\n            if (address(pairs[i]) != address(0)) {\\r\\n                pairs[i].sync();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setVolatilityToken(IVolatilityToken _volatilityToken) external override onlyOwner {\\r\\n        volatilityToken = _volatilityToken;\\r\\n    }\\r\\n\\r\\n    function setUniswapPairs(IUniswapV2Pair[] calldata _uniswapPairs) external override onlyOwner {\\r\\n        pairs = _uniswapPairs;\\r\\n    }\\r\\n\\r\\n    function setUpkeepInterval(uint32 _upkeepInterval) external override onlyOwner {\\r\\n        upkeepInterval = _upkeepInterval;\\r\\n    }\\r\\n\\r\\n    function setUpkeepTimeWindow(uint32 _upkeepTimeWindow) external override onlyOwner {\\r\\n        upkeepTimeWindow = _upkeepTimeWindow;\\r\\n    }\\r\\n\\r\\n    function setEnableWhitelist(bool _enableWhitelist) external override onlyOwner {\\r\\n        enableWhitelist = _enableWhitelist;\\r\\n    }\\r\\n\\r\\n    function setRebaserAddress(address user, bool isAllowed) external override onlyOwner {\\r\\n        rebasers[user] = isAllowed;\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes calldata /* checkData */\\r\\n    ) external view override returns (bool upkeepNeeded, bytes memory performData) {\\r\\n        upkeepNeeded = isUpkeepNeeded();\\r\\n        return (upkeepNeeded, performData);\\r\\n    }\\r\\n\\r\\n    function performUpkeep(\\r\\n        bytes calldata /* performData */\\r\\n    ) external override {\\r\\n        require(!enableWhitelist || rebasers[msg.sender], \\\"Whitelisted addresses only\\\");\\r\\n        require(isUpkeepNeeded(), \\\"Bad time window\\\");\\r\\n        lastUpkeepTime = (block.timestamp / 1 days) * 1 days;\\r\\n        rebase();\\r\\n    }\\r\\n\\r\\n    function isUpkeepNeeded() private view returns (bool) {\\r\\n        return block.timestamp - lastUpkeepTime >= upkeepInterval && block.timestamp % 1 days <= upkeepTimeWindow;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/external/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/ICVIOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8;\\r\\n\\r\\ninterface ICVIOracle {\\r\\n    function getCVIRoundData(uint80 roundId) external view returns (uint16 cviValue, uint256 cviTimestamp);\\r\\n    function getCVILatestRoundData() external view returns (uint16 cviValue, uint80 cviRoundId, uint256 cviTimestamp);\\r\\n\\r\\n    function setDeviationCheck(bool newDeviationCheck) external;\\r\\n    function setMaxDeviation(uint16 newMaxDeviation) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IFeesCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport \\\"./ICVIOracle.sol\\\";\\r\\n\\r\\ninterface IFeesCalculator {\\r\\n\\r\\n    struct CVIValue {\\r\\n        uint256 period;\\r\\n        uint16 cviValue;\\r\\n    }\\r\\n\\r\\n    struct SnapshotUpdate {\\r\\n        uint256 latestSnapshot;\\r\\n        uint256 singleUnitFundingFee;\\r\\n        uint256 totalTime;\\r\\n        uint256 totalRounds;\\r\\n        uint256 cviValueTimestamp;\\r\\n        uint80 newLatestRoundId;\\r\\n        uint16 cviValue;\\r\\n        bool updatedSnapshot;\\r\\n        bool updatedLatestRoundId;\\r\\n        bool updatedLatestTimestamp;\\r\\n        bool updatedTurbulenceData;\\r\\n    }\\r\\n\\r\\n    function updateTurbulenceIndicatorPercent(uint256 totalTime, uint256 newRounds, uint16 lastCVIValue, uint16 currCVIValue) external returns (uint16 _updateTurbulenceIndicatorPercent);\\r\\n\\r\\n    function setOracle(ICVIOracle cviOracle) external;\\r\\n\\r\\n    function setTurbulenceUpdator(address newUpdator) external;\\r\\n\\r\\n    function setDepositFee(uint16 newDepositFeePercentage) external;\\r\\n    function setWithdrawFee(uint16 newWithdrawFeePercentage) external;\\r\\n    function setOpenPositionFee(uint16 newOpenPositionFeePercentage) external;\\r\\n    function setOpenPositionLPFee(uint16 newOpenPositionLPFeePercent) external;\\r\\n    function setClosePositionFee(uint16 newClosePositionFeePercentage) external;\\r\\n    function setClosePositionMaxFee(uint16 newClosePositionMaxFeePercentage) external;\\r\\n    function setClosePositionFeeDecay(uint256 newClosePositionFeeDecayPeriod) external;\\r\\n    \\r\\n    function setOracleHeartbeatPeriod(uint256 newOracleHeartbeatPeriod) external;\\r\\n    function setBuyingPremiumFeeMax(uint16 newBuyingPremiumFeeMaxPercentage) external;\\r\\n    function setBuyingPremiumThreshold(uint16 newBuyingPremiumThreshold) external;\\r\\n    function setCollateralToBuyingPremiumMapping(uint16[] calldata newCollateralToBuyingPremiumMapping) external;\\r\\n    function setFundingFeeConstantRate(uint16 newfundingFeeConstantRate) external;\\r\\n    function setTurbulenceStep(uint16 newTurbulenceStepPercentage) external;\\r\\n    function setMaxTurbulenceFeePercentToTrim(uint16 newMaxTurbulenceFeePercentToTrim) external;\\r\\n    function setTurbulenceDeviationThresholdPercent(uint16 newTurbulenceDeviationThresholdPercent) external;\\r\\n    function setTurbulenceDeviationPercent(uint16 newTurbulenceDeviationPercentage) external;\\r\\n\\r\\n    function calculateTurbulenceIndicatorPercent(uint256 totalHeartbeats, uint256 newRounds, uint16 _lastCVIValue, uint16 _currCVIValue) external view returns (uint16);\\r\\n\\r\\n    function calculateBuyingPremiumFee(uint168 tokenAmount, uint8 leverage, uint256 collateralRatio, uint256 lastCollateralRatio) external view returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage);\\r\\n    function calculateBuyingPremiumFeeWithTurbulence(uint168 tokenAmount, uint8 leverage, uint256 collateralRatio, uint256 lastCollateralRatio, uint16 _turbulenceIndicatorPercent) external view returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage);\\r\\n    \\r\\n    function calculateSingleUnitFundingFee(CVIValue[] memory cviValues) external view returns (uint256 fundingFee);\\r\\n    function updateSnapshots(uint256 latestTimestamp, uint256 blockTimestampSnapshot, uint256 latestTimestampSnapshot, uint80 latestOracleRoundId) external view returns (SnapshotUpdate memory snapshotUpdate);\\r\\n\\r\\n    function calculateClosePositionFeePercent(uint256 creationTimestamp, bool isNoLockPositionAddress) external view returns (uint16);\\r\\n    function calculateWithdrawFeePercent(uint256 lastDepositTimestamp) external view returns (uint16);\\r\\n\\r\\n    function depositFeePercent() external view returns (uint16);\\r\\n    function withdrawFeePercent() external view returns (uint16);\\r\\n    function openPositionFeePercent() external view returns (uint16);\\r\\n    function closePositionFeePercent() external view returns (uint16);\\r\\n    function openPositionLPFeePercent() external view returns (uint16);\\r\\n    function buyingPremiumFeeMaxPercent() external view returns (uint16);\\r\\n\\r\\n    function openPositionFees() external view returns (uint16 openPositionFeePercentResult, uint16 buyingPremiumFeeMaxPercentResult);\\r\\n\\r\\n    function turbulenceIndicatorPercent() external view returns (uint16);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IFeesCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IFeesCollector {\\r\\n    function sendProfit(uint256 amount, IERC20 token) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/ILiquidation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8;\\r\\n\\r\\ninterface ILiquidation {\\t\\r\\n\\tfunction setMinLiquidationThresholdPercents(uint16[8] calldata newMinThresholdPercents) external;\\r\\n\\tfunction setMinLiquidationRewardPercent(uint16 newMinRewardPercent) external;\\r\\n\\tfunction setMaxLiquidationRewardPercents(uint16[8] calldata newMaxRewardPercents) external;\\r\\n\\tfunction isLiquidationCandidate(uint256 positionBalance, bool isPositive, uint168 positionUnitsAmount, uint16 openCVIValue, uint8 leverage) external view returns (bool);\\r\\n\\tfunction getLiquidationReward(uint256 positionBalance, bool isPositive, uint168 positionUnitsAmount, uint16 openCVIValue, uint8 leverage) external view returns (uint256 finderFeeAmount);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPlatform.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport \\\"./ICVIOracle.sol\\\";\\r\\nimport \\\"./IFeesCalculator.sol\\\";\\r\\nimport \\\"./IRewardsCollector.sol\\\";\\r\\nimport \\\"./IFeesCollector.sol\\\";\\r\\nimport \\\"./ILiquidation.sol\\\";\\r\\n\\r\\ninterface IPlatform {\\r\\n\\r\\n    struct Position {\\r\\n        uint168 positionUnitsAmount;\\r\\n        uint8 leverage;\\r\\n        uint16 openCVIValue;\\r\\n        uint32 creationTimestamp;\\r\\n        uint32 originalCreationTimestamp;\\r\\n    }\\r\\n\\r\\n    event Deposit(address indexed account, uint256 tokenAmount, uint256 lpTokensAmount, uint256 feeAmount);\\r\\n    event Withdraw(address indexed account, uint256 tokenAmount, uint256 lpTokensAmount, uint256 feeAmount);\\r\\n    event OpenPosition(address indexed account, uint256 tokenAmount, uint8 leverage, uint256 feeAmount, uint256 positionUnitsAmount, uint256 cviValue);\\r\\n    event ClosePosition(address indexed account, uint256 tokenAmount, uint256 feeAmount, uint256 positionUnitsAmount, uint8 leverage, uint256 cviValue);\\r\\n    event LiquidatePosition(address indexed positionAddress, uint256 currentPositionBalance, bool isBalancePositive, uint256 positionUnitsAmount);\\r\\n\\r\\n    function deposit(uint256 tokenAmount, uint256 minLPTokenAmount) external returns (uint256 lpTokenAmount);\\r\\n    function withdraw(uint256 tokenAmount, uint256 maxLPTokenBurnAmount) external returns (uint256 burntAmount, uint256 withdrawnAmount);\\r\\n    function withdrawLPTokens(uint256 lpTokenAmount) external returns (uint256 burntAmount, uint256 withdrawnAmount);\\r\\n\\r\\n    function increaseSharedPool(uint256 tokenAmount) external;\\r\\n\\r\\n    function openPositionWithoutPremiumFee(uint168 tokenAmount, uint16 maxCVI, uint8 leverage) external returns (uint168 positionUnitsAmount, uint168 positionedTokenAmount);\\r\\n    function openPosition(uint168 tokenAmount, uint16 maxCVI, uint16 maxBuyingPremiumFeePercentage, uint8 leverage) external returns (uint168 positionUnitsAmount, uint168 positionedTokenAmount);\\r\\n    function closePosition(uint168 positionUnitsAmount, uint16 minCVI) external returns (uint256 tokenAmount);\\r\\n\\r\\n    function liquidatePositions(address[] calldata positionOwners) external returns (uint256 finderFeeAmount);\\r\\n    function getLiquidableAddresses(address[] calldata positionOwners) external view returns (address[] memory);\\r\\n\\r\\n    function setAddressSpecificParameters(address holderAddress, bool shouldLockPosition, bool noPremiumFeeAllowed, bool increaseSharedPoolAllowed) external;\\r\\n\\r\\n    function setRevertLockedTransfers(bool revertLockedTransfers) external;\\r\\n\\r\\n    function setSubContracts(IFeesCollector newCollector, ICVIOracle newOracle, IRewardsCollector newRewards, ILiquidation newLiquidation, address _newStakingContractAddress) external;\\r\\n    function setFeesCalculator(IFeesCalculator newCalculator) external;\\r\\n\\r\\n    function setLatestOracleRoundId(uint80 newOracleRoundId) external;\\r\\n    function setMaxTimeAllowedAfterLatestRound(uint32 newMaxTimeAllowedAfterLatestRound) external;\\r\\n\\r\\n    function setLockupPeriods(uint256 newLPLockupPeriod, uint256 newBuyersLockupPeriod) external;\\r\\n\\r\\n    function setEmergencyParameters(bool newEmergencyWithdrawAllowed, bool newCanPurgeSnapshots) external;\\r\\n\\r\\n    function setMaxAllowedLeverage(uint8 newMaxAllowedLeverage) external;\\r\\n\\r\\n    function calculatePositionBalance(address positionAddress) external view returns (uint256 currentPositionBalance, bool isPositive, uint168 positionUnitsAmount, uint8 leverage, uint256 fundingFees, uint256 marginDebt);\\r\\n    function calculatePositionPendingFees(address positionAddress, uint168 positionUnitsAmount) external view returns (uint256 pendingFees);\\r\\n\\r\\n    function totalBalance() external view returns (uint256 balance);\\r\\n    function totalBalanceWithAddendum() external view returns (uint256 balance);\\r\\n\\r\\n    function calculateLatestTurbulenceIndicatorPercent() external view returns (uint16);\\r\\n\\r\\n    function positions(address positionAddress) external view returns (uint168 positionUnitsAmount, uint8 leverage, uint16 openCVIValue, uint32 creationTimestamp, uint32 originalCreationTimestamp);\\r\\n    function buyersLockupPeriod() external view returns (uint256);\\r\\n    function maxCVIValue() external view returns (uint16);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IRebaser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport \\\"../external/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./IVolatilityToken.sol\\\";\\r\\n\\r\\ninterface IRebaser {\\r\\n    function rebase() external;\\r\\n    function setVolatilityToken(IVolatilityToken volatilityToken) external;\\r\\n    function setUniswapPairs(IUniswapV2Pair[] calldata uniswapPairs) external;\\r\\n    function setRebaserAddress(address user, bool isAllowed) external;\\r\\n    function setUpkeepInterval(uint32 _upkeepInterval) external;\\r\\n    function setUpkeepTimeWindow(uint32 _upkeepTimeWindow) external;\\r\\n    function setEnableWhitelist(bool _enableWhitelist) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IRequestFeesCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport \\\"./IVolatilityToken.sol\\\";\\r\\n\\r\\ninterface IRequestFeesCalculator {\\r\\n    function calculateTimePenaltyFee(IVolatilityToken.Request calldata request) external view returns (uint16 feePercentage);\\r\\n    function calculateTimeDelayFee(uint256 timeDelay) external view returns (uint16 feePercentage);\\r\\n    function calculateFindersFee(uint256 tokensLeftAmount) external view returns (uint256 findersFeeAmount);\\r\\n\\r\\n    function isLiquidable(IVolatilityToken.Request calldata request) external view returns (bool liquidable);\\r\\n\\r\\n    function setTimeWindow(uint32 minTimeWindow, uint32 maxTimeWindow) external;\\r\\n    function setTimeDelayFeesParameters(uint16 minTimeDelayFeePercent, uint16 maxTimeDelayFeePercent) external;\\r\\n    function setMinWaitTime(uint32 minWaitTime) external;\\r\\n    function setTimePenaltyFeeParameters(uint16 beforeTargetTimeMaxPenaltyFeePercent, uint32 afterTargetMidTime, uint16 afterTargetMidTimePenaltyFeePercent, uint32 afterTargetMaxTime, uint16 afterTargetMaxTimePenaltyFeePercent) external;\\r\\n    function setFindersFee(uint16 findersFeePercent) external;\\r\\n\\r\\n    function getMaxFees() external view returns (uint16 maxFeesPercent);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IRewardsCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8;\\r\\n\\r\\ninterface IRewardsCollector {\\r\\n\\tfunction reward(address account, uint256 positionUnits, uint8 leverage) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IVolatilityToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport \\\"./IPlatform.sol\\\";\\r\\nimport \\\"./IRequestFeesCalculator.sol\\\";\\r\\nimport \\\"./ICVIOracle.sol\\\";\\r\\n\\r\\ninterface IVolatilityToken {\\r\\n\\r\\n\\tstruct Request {\\r\\n\\t\\tuint8 requestType; // 1 => mint, 2 => burn, 3 => collateralized mint\\r\\n\\t\\tuint168 tokenAmount;\\r\\n        uint16 timeDelayRequestFeesPercent;\\r\\n\\t\\tuint16 maxRequestFeesPercent;\\r\\n        address owner;\\r\\n        uint32 requestTimestamp;\\r\\n        uint32 targetTimestamp;\\r\\n    }\\r\\n\\r\\n    event SubmitRequest(uint256 requestId, uint8 requestType, address indexed account, uint256 tokenAmount, uint256 submitFeesAmount, uint32 targetTimestamp);\\r\\n    event FulfillRequest(uint256 requestId, address indexed account, uint256 fulfillFeesAmount);\\r\\n    event LiquidateRequest(uint256 requestId, uint8 requestType, address indexed account, address indexed liquidator, uint256 findersFeeAmount);\\r\\n    event Mint(address indexed account, uint256 tokenAmount, uint256 mintedTokens);\\r\\n    event CollateralizedMint(address indexed account, uint256 tokenAmount, uint256 mintedTokens, uint256 mintedShortTokens);\\r\\n    event Burn(address indexed account, uint256 tokenAmount, uint256 burnedTokens);\\r\\n\\r\\n    function rebaseCVI() external;\\r\\n\\r\\n    function submitMintRequest(uint168 tokenAmount, uint32 timeDelay) external returns (uint256 requestId);\\r\\n    function submitBurnRequest(uint168 tokenAmount, uint32 timeDelay) external returns (uint256 requestId);\\r\\n\\r\\n    function fulfillMintRequest(uint256 requestId, uint16 maxBuyingPremiumFeePercentage) external returns (uint256 tokensMinted);\\r\\n    function fulfillBurnRequest(uint256 requestId) external returns (uint256 tokensBurned);\\r\\n    function fulfillCollateralizedMintRequest(uint256 requestId) external returns (uint256 tokensMinted, uint256 shortTokensMinted);\\r\\n\\r\\n    function liquidateRequest(uint256 requestId) external returns (uint256 findersFeeAmount);\\r\\n\\r\\n    function setPlatform(IPlatform newPlatform) external;\\r\\n    function setFeesCalculator(IFeesCalculator newFeesCalculator) external;\\r\\n    function setFeesCollector(IFeesCollector newCollector) external;\\r\\n    function setRequestFeesCalculator(IRequestFeesCalculator newRequestFeesCalculator) external;\\r\\n    function setCVIOracle(ICVIOracle newCVIOracle) external;\\r\\n    function setMinDeviation(uint16 newMinDeviationPercentage) external;\\r\\n    function setRebaseLag(uint8 newRebaseLag) external;\\r\\n    function setVerifyTotalRequestsAmount(bool verifyTotalRequestsAmount) external;\\r\\n    function setMaxTotalRequestsAmount(uint256 maxTotalRequestsAmount) external;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IVolatilityToken\",\"name\":\"_volatilityToken\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Pair[]\",\"name\":\"_uniswapPairs\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpkeepTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rebasers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableWhitelist\",\"type\":\"bool\"}],\"name\":\"setEnableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"setRebaserAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair[]\",\"name\":\"_uniswapPairs\",\"type\":\"address[]\"}],\"name\":\"setUniswapPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_upkeepInterval\",\"type\":\"uint32\"}],\"name\":\"setUpkeepInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_upkeepTimeWindow\",\"type\":\"uint32\"}],\"name\":\"setUpkeepTimeWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVolatilityToken\",\"name\":\"_volatilityToken\",\"type\":\"address\"}],\"name\":\"setVolatilityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upkeepInterval\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upkeepTimeWindow\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volatilityToken\",\"outputs\":[{\"internalType\":\"contract IVolatilityToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Rebaser","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"00000000000000000000000036bab6b3b722f90475b8e681b4b0a4dc68ee539900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000197e99bd87f98dfde461afe3f706de36c9635a5d","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}