{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n   ____            __   __        __   _\r\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\r\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\r\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\r\n     /___/\r\n\r\n* Synthetix: Wrapper.sol\r\n*\r\n* Latest source (may be newer): https://github.com/Synthetixio/synthetix/blob/master/contracts/Wrapper.sol\r\n* Docs: https://docs.synthetix.io/contracts/Wrapper\r\n*\r\n* Contract Dependencies: \r\n*\t- IAddressResolver\r\n*\t- IWrapper\r\n*\t- MixinResolver\r\n*\t- MixinSystemSettings\r\n*\t- Owned\r\n*\t- Pausable\r\n* Libraries: \r\n*\t- SafeDecimalMath\r\n*\t- SafeMath\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2021 Synthetix\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/owned\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    constructor(address _owner) public {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    function _onlyOwner() private view {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\r\ninterface IAddressResolver {\r\n    function getAddress(bytes32 name) external view returns (address);\r\n\r\n    function getSynth(bytes32 key) external view returns (address);\r\n\r\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/ierc20\r\ninterface IERC20 {\r\n    // ERC20 Optional Views\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    // Views\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    // Mutative functions\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/iwrapper\r\ninterface IWrapper {\r\n    function mint(uint amount) external;\r\n\r\n    function burn(uint amount) external;\r\n\r\n    function capacity() external view returns (uint);\r\n\r\n    function totalIssuedSynths() external view returns (uint);\r\n\r\n    function calculateMintFee(uint amount) external view returns (uint, bool);\r\n\r\n    function calculateBurnFee(uint amount) external view returns (uint, bool);\r\n\r\n    function maxTokenAmount() external view returns (uint256);\r\n\r\n    function mintFeeRate() external view returns (int256);\r\n\r\n    function burnFeeRate() external view returns (int256);\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/isynth\r\ninterface ISynth {\r\n    // Views\r\n    function currencyKey() external view returns (bytes32);\r\n\r\n    function transferableSynths(address account) external view returns (uint);\r\n\r\n    // Mutative functions\r\n    function transferAndSettle(address to, uint value) external returns (bool);\r\n\r\n    function transferFromAndSettle(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    // Restricted: used internally to Synthetix\r\n    function burn(address account, uint amount) external;\r\n\r\n    function issue(address account, uint amount) external;\r\n}\r\n\r\n\r\n// Inheritance\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/pausable\r\ncontract Pausable is Owned {\r\n    uint public lastPauseTime;\r\n    bool public paused;\r\n\r\n    constructor() internal {\r\n        // This contract is abstract, and thus cannot be instantiated directly\r\n        require(owner != address(0), \"Owner must be set\");\r\n        // Paused will be false, and lastPauseTime will be 0 upon initialisation\r\n    }\r\n\r\n    /**\r\n     * @notice Change the paused state of the contract\r\n     * @dev Only the contract owner may call this.\r\n     */\r\n    function setPaused(bool _paused) external onlyOwner {\r\n        // Ensure we're actually changing the state before we do anything\r\n        if (_paused == paused) {\r\n            return;\r\n        }\r\n\r\n        // Set our paused state.\r\n        paused = _paused;\r\n\r\n        // If applicable, set the last pause time.\r\n        if (paused) {\r\n            lastPauseTime = now;\r\n        }\r\n\r\n        // Let everyone know that our pause state has changed.\r\n        emit PauseChanged(paused);\r\n    }\r\n\r\n    event PauseChanged(bool isPaused);\r\n\r\n    modifier notPaused {\r\n        require(!paused, \"This action cannot be performed while the contract is paused\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/iexchangerates\r\ninterface IExchangeRates {\r\n    // Structs\r\n    struct RateAndUpdatedTime {\r\n        uint216 rate;\r\n        uint40 time;\r\n    }\r\n\r\n    // Views\r\n    function aggregators(bytes32 currencyKey) external view returns (address);\r\n\r\n    function aggregatorWarningFlags() external view returns (address);\r\n\r\n    function anyRateIsInvalid(bytes32[] calldata currencyKeys) external view returns (bool);\r\n\r\n    function currentRoundForRate(bytes32 currencyKey) external view returns (uint);\r\n\r\n    function currenciesUsingAggregator(address aggregator) external view returns (bytes32[] memory);\r\n\r\n    function effectiveValue(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    ) external view returns (uint value);\r\n\r\n    function effectiveValueAndRates(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint value,\r\n            uint sourceRate,\r\n            uint destinationRate\r\n        );\r\n\r\n    function effectiveAtomicValueAndRates(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint value,\r\n            uint systemValue,\r\n            uint systemSourceRate,\r\n            uint systemDestinationRate\r\n        );\r\n\r\n    function effectiveValueAtRound(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        uint roundIdForSrc,\r\n        uint roundIdForDest\r\n    ) external view returns (uint value);\r\n\r\n    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint);\r\n\r\n    function getLastRoundIdBeforeElapsedSecs(\r\n        bytes32 currencyKey,\r\n        uint startingRoundId,\r\n        uint startingTimestamp,\r\n        uint timediff\r\n    ) external view returns (uint);\r\n\r\n    function lastRateUpdateTimes(bytes32 currencyKey) external view returns (uint256);\r\n\r\n    function oracle() external view returns (address);\r\n\r\n    function rateAndTimestampAtRound(bytes32 currencyKey, uint roundId) external view returns (uint rate, uint time);\r\n\r\n    function rateAndUpdatedTime(bytes32 currencyKey) external view returns (uint rate, uint time);\r\n\r\n    function rateAndInvalid(bytes32 currencyKey) external view returns (uint rate, bool isInvalid);\r\n\r\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\r\n\r\n    function rateIsFlagged(bytes32 currencyKey) external view returns (bool);\r\n\r\n    function rateIsInvalid(bytes32 currencyKey) external view returns (bool);\r\n\r\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\r\n\r\n    function rateStalePeriod() external view returns (uint);\r\n\r\n    function ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32 currencyKey, uint numRounds)\r\n        external\r\n        view\r\n        returns (uint[] memory rates, uint[] memory times);\r\n\r\n    function ratesAndInvalidForCurrencies(bytes32[] calldata currencyKeys)\r\n        external\r\n        view\r\n        returns (uint[] memory rates, bool anyRateInvalid);\r\n\r\n    function ratesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory);\r\n\r\n    function synthTooVolatileForAtomicExchange(bytes32 currencyKey) external view returns (bool);\r\n}\r\n\r\n\r\ninterface IDebtCache {\r\n    // Views\r\n\r\n    function cachedDebt() external view returns (uint);\r\n\r\n    function cachedSynthDebt(bytes32 currencyKey) external view returns (uint);\r\n\r\n    function cacheTimestamp() external view returns (uint);\r\n\r\n    function cacheInvalid() external view returns (bool);\r\n\r\n    function cacheStale() external view returns (bool);\r\n\r\n    function currentSynthDebts(bytes32[] calldata currencyKeys)\r\n        external\r\n        view\r\n        returns (\r\n            uint[] memory debtValues,\r\n            uint excludedDebt,\r\n            bool anyRateIsInvalid\r\n        );\r\n\r\n    function cachedSynthDebts(bytes32[] calldata currencyKeys) external view returns (uint[] memory debtValues);\r\n\r\n    function totalNonSnxBackedDebt() external view returns (uint excludedDebt, bool isInvalid);\r\n\r\n    function currentDebt() external view returns (uint debt, bool anyRateIsInvalid);\r\n\r\n    function cacheInfo()\r\n        external\r\n        view\r\n        returns (\r\n            uint debt,\r\n            uint timestamp,\r\n            bool isInvalid,\r\n            bool isStale\r\n        );\r\n\r\n    // Mutative functions\r\n\r\n    function updateCachedSynthDebts(bytes32[] calldata currencyKeys) external;\r\n\r\n    function updateCachedSynthDebtWithRate(bytes32 currencyKey, uint currencyRate) external;\r\n\r\n    function updateCachedSynthDebtsWithRates(bytes32[] calldata currencyKeys, uint[] calldata currencyRates) external;\r\n\r\n    function updateDebtCacheValidity(bool currentlyInvalid) external;\r\n\r\n    function purgeCachedSynthDebt(bytes32 currencyKey) external;\r\n\r\n    function takeDebtSnapshot() external;\r\n\r\n    function recordExcludedDebtChange(bytes32 currencyKey, int256 delta) external;\r\n\r\n    function updateCachedsUSDDebt(int amount) external;\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/isystemstatus\r\ninterface ISystemStatus {\r\n    struct Status {\r\n        bool canSuspend;\r\n        bool canResume;\r\n    }\r\n\r\n    struct Suspension {\r\n        bool suspended;\r\n        // reason is an integer code,\r\n        // 0 => no reason, 1 => upgrading, 2+ => defined by system usage\r\n        uint248 reason;\r\n    }\r\n\r\n    // Views\r\n    function accessControl(bytes32 section, address account) external view returns (bool canSuspend, bool canResume);\r\n\r\n    function requireSystemActive() external view;\r\n\r\n    function requireIssuanceActive() external view;\r\n\r\n    function requireExchangeActive() external view;\r\n\r\n    function requireExchangeBetweenSynthsAllowed(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) external view;\r\n\r\n    function requireSynthActive(bytes32 currencyKey) external view;\r\n\r\n    function requireSynthsActive(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) external view;\r\n\r\n    function systemSuspension() external view returns (bool suspended, uint248 reason);\r\n\r\n    function issuanceSuspension() external view returns (bool suspended, uint248 reason);\r\n\r\n    function exchangeSuspension() external view returns (bool suspended, uint248 reason);\r\n\r\n    function synthExchangeSuspension(bytes32 currencyKey) external view returns (bool suspended, uint248 reason);\r\n\r\n    function synthSuspension(bytes32 currencyKey) external view returns (bool suspended, uint248 reason);\r\n\r\n    function getSynthExchangeSuspensions(bytes32[] calldata synths)\r\n        external\r\n        view\r\n        returns (bool[] memory exchangeSuspensions, uint256[] memory reasons);\r\n\r\n    function getSynthSuspensions(bytes32[] calldata synths)\r\n        external\r\n        view\r\n        returns (bool[] memory suspensions, uint256[] memory reasons);\r\n\r\n    // Restricted functions\r\n    function suspendSynth(bytes32 currencyKey, uint256 reason) external;\r\n\r\n    function updateAccessControl(\r\n        bytes32 section,\r\n        address account,\r\n        bool canSuspend,\r\n        bool canResume\r\n    ) external;\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/iwrapperfactory\r\ninterface IWrapperFactory {\r\n    function isWrapper(address possibleWrapper) external view returns (bool);\r\n\r\n    function createWrapper(\r\n        IERC20 token,\r\n        bytes32 currencyKey,\r\n        bytes32 synthContractName\r\n    ) external returns (address);\r\n\r\n    function distributeFees() external;\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/iissuer\r\ninterface IIssuer {\r\n    // Views\r\n    function anySynthOrSNXRateIsInvalid() external view returns (bool anyRateInvalid);\r\n\r\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\r\n\r\n    function availableSynthCount() external view returns (uint);\r\n\r\n    function availableSynths(uint index) external view returns (ISynth);\r\n\r\n    function canBurnSynths(address account) external view returns (bool);\r\n\r\n    function collateral(address account) external view returns (uint);\r\n\r\n    function collateralisationRatio(address issuer) external view returns (uint);\r\n\r\n    function collateralisationRatioAndAnyRatesInvalid(address _issuer)\r\n        external\r\n        view\r\n        returns (uint cratio, bool anyRateIsInvalid);\r\n\r\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint debtBalance);\r\n\r\n    function issuanceRatio() external view returns (uint);\r\n\r\n    function lastIssueEvent(address account) external view returns (uint);\r\n\r\n    function maxIssuableSynths(address issuer) external view returns (uint maxIssuable);\r\n\r\n    function minimumStakeTime() external view returns (uint);\r\n\r\n    function remainingIssuableSynths(address issuer)\r\n        external\r\n        view\r\n        returns (\r\n            uint maxIssuable,\r\n            uint alreadyIssued,\r\n            uint totalSystemDebt\r\n        );\r\n\r\n    function synths(bytes32 currencyKey) external view returns (ISynth);\r\n\r\n    function getSynths(bytes32[] calldata currencyKeys) external view returns (ISynth[] memory);\r\n\r\n    function synthsByAddress(address synthAddress) external view returns (bytes32);\r\n\r\n    function totalIssuedSynths(bytes32 currencyKey, bool excludeOtherCollateral) external view returns (uint);\r\n\r\n    function transferableSynthetixAndAnyRateIsInvalid(address account, uint balance)\r\n        external\r\n        view\r\n        returns (uint transferable, bool anyRateIsInvalid);\r\n\r\n    // Restricted: used internally to Synthetix\r\n    function issueSynths(address from, uint amount) external;\r\n\r\n    function issueSynthsOnBehalf(\r\n        address issueFor,\r\n        address from,\r\n        uint amount\r\n    ) external;\r\n\r\n    function issueMaxSynths(address from) external;\r\n\r\n    function issueMaxSynthsOnBehalf(address issueFor, address from) external;\r\n\r\n    function burnSynths(address from, uint amount) external;\r\n\r\n    function burnSynthsOnBehalf(\r\n        address burnForAddress,\r\n        address from,\r\n        uint amount\r\n    ) external;\r\n\r\n    function burnSynthsToTarget(address from) external;\r\n\r\n    function burnSynthsToTargetOnBehalf(address burnForAddress, address from) external;\r\n\r\n    function burnForRedemption(\r\n        address deprecatedSynthProxy,\r\n        address account,\r\n        uint balance\r\n    ) external;\r\n\r\n    function liquidateDelinquentAccount(\r\n        address account,\r\n        uint susdAmount,\r\n        address liquidator\r\n    ) external returns (uint totalRedeemed, uint amountToLiquidate);\r\n}\r\n\r\n\r\n// Inheritance\r\n\r\n\r\n// Internal references\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/addressresolver\r\ncontract AddressResolver is Owned, IAddressResolver {\r\n    mapping(bytes32 => address) public repository;\r\n\r\n    constructor(address _owner) public Owned(_owner) {}\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function importAddresses(bytes32[] calldata names, address[] calldata destinations) external onlyOwner {\r\n        require(names.length == destinations.length, \"Input lengths must match\");\r\n\r\n        for (uint i = 0; i < names.length; i++) {\r\n            bytes32 name = names[i];\r\n            address destination = destinations[i];\r\n            repository[name] = destination;\r\n            emit AddressImported(name, destination);\r\n        }\r\n    }\r\n\r\n    /* ========= PUBLIC FUNCTIONS ========== */\r\n\r\n    function rebuildCaches(MixinResolver[] calldata destinations) external {\r\n        for (uint i = 0; i < destinations.length; i++) {\r\n            destinations[i].rebuildCache();\r\n        }\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function areAddressesImported(bytes32[] calldata names, address[] calldata destinations) external view returns (bool) {\r\n        for (uint i = 0; i < names.length; i++) {\r\n            if (repository[names[i]] != destinations[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getAddress(bytes32 name) external view returns (address) {\r\n        return repository[name];\r\n    }\r\n\r\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address) {\r\n        address _foundAddress = repository[name];\r\n        require(_foundAddress != address(0), reason);\r\n        return _foundAddress;\r\n    }\r\n\r\n    function getSynth(bytes32 key) external view returns (address) {\r\n        IIssuer issuer = IIssuer(repository[\"Issuer\"]);\r\n        require(address(issuer) != address(0), \"Cannot find Issuer address\");\r\n        return address(issuer.synths(key));\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event AddressImported(bytes32 name, address destination);\r\n}\r\n\r\n\r\n// Internal references\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/mixinresolver\r\ncontract MixinResolver {\r\n    AddressResolver public resolver;\r\n\r\n    mapping(bytes32 => address) private addressCache;\r\n\r\n    constructor(address _resolver) internal {\r\n        resolver = AddressResolver(_resolver);\r\n    }\r\n\r\n    /* ========== INTERNAL FUNCTIONS ========== */\r\n\r\n    function combineArrays(bytes32[] memory first, bytes32[] memory second)\r\n        internal\r\n        pure\r\n        returns (bytes32[] memory combination)\r\n    {\r\n        combination = new bytes32[](first.length + second.length);\r\n\r\n        for (uint i = 0; i < first.length; i++) {\r\n            combination[i] = first[i];\r\n        }\r\n\r\n        for (uint j = 0; j < second.length; j++) {\r\n            combination[first.length + j] = second[j];\r\n        }\r\n    }\r\n\r\n    /* ========== PUBLIC FUNCTIONS ========== */\r\n\r\n    // Note: this function is public not external in order for it to be overridden and invoked via super in subclasses\r\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {}\r\n\r\n    function rebuildCache() public {\r\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\r\n        // The resolver must call this function whenver it updates its state\r\n        for (uint i = 0; i < requiredAddresses.length; i++) {\r\n            bytes32 name = requiredAddresses[i];\r\n            // Note: can only be invoked once the resolver has all the targets needed added\r\n            address destination =\r\n                resolver.requireAndGetAddress(name, string(abi.encodePacked(\"Resolver missing target: \", name)));\r\n            addressCache[name] = destination;\r\n            emit CacheUpdated(name, destination);\r\n        }\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function isResolverCached() external view returns (bool) {\r\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\r\n        for (uint i = 0; i < requiredAddresses.length; i++) {\r\n            bytes32 name = requiredAddresses[i];\r\n            // false if our cache is invalid or if the resolver doesn't have the required address\r\n            if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /* ========== INTERNAL FUNCTIONS ========== */\r\n\r\n    function requireAndGetAddress(bytes32 name) internal view returns (address) {\r\n        address _foundAddress = addressCache[name];\r\n        require(_foundAddress != address(0), string(abi.encodePacked(\"Missing address: \", name)));\r\n        return _foundAddress;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event CacheUpdated(bytes32 name, address destination);\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/iflexiblestorage\r\ninterface IFlexibleStorage {\r\n    // Views\r\n    function getUIntValue(bytes32 contractName, bytes32 record) external view returns (uint);\r\n\r\n    function getUIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (uint[] memory);\r\n\r\n    function getIntValue(bytes32 contractName, bytes32 record) external view returns (int);\r\n\r\n    function getIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (int[] memory);\r\n\r\n    function getAddressValue(bytes32 contractName, bytes32 record) external view returns (address);\r\n\r\n    function getAddressValues(bytes32 contractName, bytes32[] calldata records) external view returns (address[] memory);\r\n\r\n    function getBoolValue(bytes32 contractName, bytes32 record) external view returns (bool);\r\n\r\n    function getBoolValues(bytes32 contractName, bytes32[] calldata records) external view returns (bool[] memory);\r\n\r\n    function getBytes32Value(bytes32 contractName, bytes32 record) external view returns (bytes32);\r\n\r\n    function getBytes32Values(bytes32 contractName, bytes32[] calldata records) external view returns (bytes32[] memory);\r\n\r\n    // Mutative functions\r\n    function deleteUIntValue(bytes32 contractName, bytes32 record) external;\r\n\r\n    function deleteIntValue(bytes32 contractName, bytes32 record) external;\r\n\r\n    function deleteAddressValue(bytes32 contractName, bytes32 record) external;\r\n\r\n    function deleteBoolValue(bytes32 contractName, bytes32 record) external;\r\n\r\n    function deleteBytes32Value(bytes32 contractName, bytes32 record) external;\r\n\r\n    function setUIntValue(\r\n        bytes32 contractName,\r\n        bytes32 record,\r\n        uint value\r\n    ) external;\r\n\r\n    function setUIntValues(\r\n        bytes32 contractName,\r\n        bytes32[] calldata records,\r\n        uint[] calldata values\r\n    ) external;\r\n\r\n    function setIntValue(\r\n        bytes32 contractName,\r\n        bytes32 record,\r\n        int value\r\n    ) external;\r\n\r\n    function setIntValues(\r\n        bytes32 contractName,\r\n        bytes32[] calldata records,\r\n        int[] calldata values\r\n    ) external;\r\n\r\n    function setAddressValue(\r\n        bytes32 contractName,\r\n        bytes32 record,\r\n        address value\r\n    ) external;\r\n\r\n    function setAddressValues(\r\n        bytes32 contractName,\r\n        bytes32[] calldata records,\r\n        address[] calldata values\r\n    ) external;\r\n\r\n    function setBoolValue(\r\n        bytes32 contractName,\r\n        bytes32 record,\r\n        bool value\r\n    ) external;\r\n\r\n    function setBoolValues(\r\n        bytes32 contractName,\r\n        bytes32[] calldata records,\r\n        bool[] calldata values\r\n    ) external;\r\n\r\n    function setBytes32Value(\r\n        bytes32 contractName,\r\n        bytes32 record,\r\n        bytes32 value\r\n    ) external;\r\n\r\n    function setBytes32Values(\r\n        bytes32 contractName,\r\n        bytes32[] calldata records,\r\n        bytes32[] calldata values\r\n    ) external;\r\n}\r\n\r\n\r\n// Internal references\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/mixinsystemsettings\r\ncontract MixinSystemSettings is MixinResolver {\r\n    bytes32 internal constant SETTING_CONTRACT_NAME = \"SystemSettings\";\r\n\r\n    bytes32 internal constant SETTING_WAITING_PERIOD_SECS = \"waitingPeriodSecs\";\r\n    bytes32 internal constant SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR = \"priceDeviationThresholdFactor\";\r\n    bytes32 internal constant SETTING_ISSUANCE_RATIO = \"issuanceRatio\";\r\n    bytes32 internal constant SETTING_FEE_PERIOD_DURATION = \"feePeriodDuration\";\r\n    bytes32 internal constant SETTING_TARGET_THRESHOLD = \"targetThreshold\";\r\n    bytes32 internal constant SETTING_LIQUIDATION_DELAY = \"liquidationDelay\";\r\n    bytes32 internal constant SETTING_LIQUIDATION_RATIO = \"liquidationRatio\";\r\n    bytes32 internal constant SETTING_LIQUIDATION_PENALTY = \"liquidationPenalty\";\r\n    bytes32 internal constant SETTING_RATE_STALE_PERIOD = \"rateStalePeriod\";\r\n    bytes32 internal constant SETTING_EXCHANGE_FEE_RATE = \"exchangeFeeRate\";\r\n    bytes32 internal constant SETTING_MINIMUM_STAKE_TIME = \"minimumStakeTime\";\r\n    bytes32 internal constant SETTING_AGGREGATOR_WARNING_FLAGS = \"aggregatorWarningFlags\";\r\n    bytes32 internal constant SETTING_TRADING_REWARDS_ENABLED = \"tradingRewardsEnabled\";\r\n    bytes32 internal constant SETTING_DEBT_SNAPSHOT_STALE_TIME = \"debtSnapshotStaleTime\";\r\n    bytes32 internal constant SETTING_CROSS_DOMAIN_DEPOSIT_GAS_LIMIT = \"crossDomainDepositGasLimit\";\r\n    bytes32 internal constant SETTING_CROSS_DOMAIN_ESCROW_GAS_LIMIT = \"crossDomainEscrowGasLimit\";\r\n    bytes32 internal constant SETTING_CROSS_DOMAIN_REWARD_GAS_LIMIT = \"crossDomainRewardGasLimit\";\r\n    bytes32 internal constant SETTING_CROSS_DOMAIN_WITHDRAWAL_GAS_LIMIT = \"crossDomainWithdrawalGasLimit\";\r\n    bytes32 internal constant SETTING_CROSS_DOMAIN_RELAY_GAS_LIMIT = \"crossDomainRelayGasLimit\";\r\n    bytes32 internal constant SETTING_ETHER_WRAPPER_MAX_ETH = \"etherWrapperMaxETH\";\r\n    bytes32 internal constant SETTING_ETHER_WRAPPER_MINT_FEE_RATE = \"etherWrapperMintFeeRate\";\r\n    bytes32 internal constant SETTING_ETHER_WRAPPER_BURN_FEE_RATE = \"etherWrapperBurnFeeRate\";\r\n    bytes32 internal constant SETTING_WRAPPER_MAX_TOKEN_AMOUNT = \"wrapperMaxTokens\";\r\n    bytes32 internal constant SETTING_WRAPPER_MINT_FEE_RATE = \"wrapperMintFeeRate\";\r\n    bytes32 internal constant SETTING_WRAPPER_BURN_FEE_RATE = \"wrapperBurnFeeRate\";\r\n    bytes32 internal constant SETTING_MIN_CRATIO = \"minCratio\";\r\n    bytes32 internal constant SETTING_NEW_COLLATERAL_MANAGER = \"newCollateralManager\";\r\n    bytes32 internal constant SETTING_INTERACTION_DELAY = \"interactionDelay\";\r\n    bytes32 internal constant SETTING_COLLAPSE_FEE_RATE = \"collapseFeeRate\";\r\n    bytes32 internal constant SETTING_ATOMIC_MAX_VOLUME_PER_BLOCK = \"atomicMaxVolumePerBlock\";\r\n    bytes32 internal constant SETTING_ATOMIC_TWAP_WINDOW = \"atomicTwapWindow\";\r\n    bytes32 internal constant SETTING_ATOMIC_EQUIVALENT_FOR_DEX_PRICING = \"atomicEquivalentForDexPricing\";\r\n    bytes32 internal constant SETTING_ATOMIC_EXCHANGE_FEE_RATE = \"atomicExchangeFeeRate\";\r\n    bytes32 internal constant SETTING_ATOMIC_PRICE_BUFFER = \"atomicPriceBuffer\";\r\n    bytes32 internal constant SETTING_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW = \"atomicVolConsiderationWindow\";\r\n    bytes32 internal constant SETTING_ATOMIC_VOLATILITY_UPDATE_THRESHOLD = \"atomicVolUpdateThreshold\";\r\n\r\n    bytes32 internal constant CONTRACT_FLEXIBLESTORAGE = \"FlexibleStorage\";\r\n\r\n    enum CrossDomainMessageGasLimits {Deposit, Escrow, Reward, Withdrawal, Relay}\r\n\r\n    constructor(address _resolver) internal MixinResolver(_resolver) {}\r\n\r\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {\r\n        addresses = new bytes32[](1);\r\n        addresses[0] = CONTRACT_FLEXIBLESTORAGE;\r\n    }\r\n\r\n    function flexibleStorage() internal view returns (IFlexibleStorage) {\r\n        return IFlexibleStorage(requireAndGetAddress(CONTRACT_FLEXIBLESTORAGE));\r\n    }\r\n\r\n    function _getGasLimitSetting(CrossDomainMessageGasLimits gasLimitType) internal pure returns (bytes32) {\r\n        if (gasLimitType == CrossDomainMessageGasLimits.Deposit) {\r\n            return SETTING_CROSS_DOMAIN_DEPOSIT_GAS_LIMIT;\r\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Escrow) {\r\n            return SETTING_CROSS_DOMAIN_ESCROW_GAS_LIMIT;\r\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Reward) {\r\n            return SETTING_CROSS_DOMAIN_REWARD_GAS_LIMIT;\r\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Withdrawal) {\r\n            return SETTING_CROSS_DOMAIN_WITHDRAWAL_GAS_LIMIT;\r\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Relay) {\r\n            return SETTING_CROSS_DOMAIN_RELAY_GAS_LIMIT;\r\n        } else {\r\n            revert(\"Unknown gas limit type\");\r\n        }\r\n    }\r\n\r\n    function getCrossDomainMessageGasLimit(CrossDomainMessageGasLimits gasLimitType) internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, _getGasLimitSetting(gasLimitType));\r\n    }\r\n\r\n    function getTradingRewardsEnabled() internal view returns (bool) {\r\n        return flexibleStorage().getBoolValue(SETTING_CONTRACT_NAME, SETTING_TRADING_REWARDS_ENABLED);\r\n    }\r\n\r\n    function getWaitingPeriodSecs() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_WAITING_PERIOD_SECS);\r\n    }\r\n\r\n    function getPriceDeviationThresholdFactor() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR);\r\n    }\r\n\r\n    function getIssuanceRatio() internal view returns (uint) {\r\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ISSUANCE_RATIO);\r\n    }\r\n\r\n    function getFeePeriodDuration() internal view returns (uint) {\r\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_FEE_PERIOD_DURATION);\r\n    }\r\n\r\n    function getTargetThreshold() internal view returns (uint) {\r\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_TARGET_THRESHOLD);\r\n    }\r\n\r\n    function getLiquidationDelay() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_DELAY);\r\n    }\r\n\r\n    function getLiquidationRatio() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_RATIO);\r\n    }\r\n\r\n    function getLiquidationPenalty() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_PENALTY);\r\n    }\r\n\r\n    function getRateStalePeriod() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_RATE_STALE_PERIOD);\r\n    }\r\n\r\n    function getExchangeFeeRate(bytes32 currencyKey) internal view returns (uint) {\r\n        return\r\n            flexibleStorage().getUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_EXCHANGE_FEE_RATE, currencyKey))\r\n            );\r\n    }\r\n\r\n    function getMinimumStakeTime() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_MINIMUM_STAKE_TIME);\r\n    }\r\n\r\n    function getAggregatorWarningFlags() internal view returns (address) {\r\n        return flexibleStorage().getAddressValue(SETTING_CONTRACT_NAME, SETTING_AGGREGATOR_WARNING_FLAGS);\r\n    }\r\n\r\n    function getDebtSnapshotStaleTime() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_DEBT_SNAPSHOT_STALE_TIME);\r\n    }\r\n\r\n    function getEtherWrapperMaxETH() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_MAX_ETH);\r\n    }\r\n\r\n    function getEtherWrapperMintFeeRate() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_MINT_FEE_RATE);\r\n    }\r\n\r\n    function getEtherWrapperBurnFeeRate() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_BURN_FEE_RATE);\r\n    }\r\n\r\n    function getWrapperMaxTokenAmount(address wrapper) internal view returns (uint) {\r\n        return\r\n            flexibleStorage().getUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_WRAPPER_MAX_TOKEN_AMOUNT, wrapper))\r\n            );\r\n    }\r\n\r\n    function getWrapperMintFeeRate(address wrapper) internal view returns (int) {\r\n        return\r\n            flexibleStorage().getIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_WRAPPER_MINT_FEE_RATE, wrapper))\r\n            );\r\n    }\r\n\r\n    function getWrapperBurnFeeRate(address wrapper) internal view returns (int) {\r\n        return\r\n            flexibleStorage().getIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_WRAPPER_BURN_FEE_RATE, wrapper))\r\n            );\r\n    }\r\n\r\n    function getMinCratio(address collateral) internal view returns (uint) {\r\n        return\r\n            flexibleStorage().getUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_MIN_CRATIO, collateral))\r\n            );\r\n    }\r\n\r\n    function getNewCollateralManager(address collateral) internal view returns (address) {\r\n        return\r\n            flexibleStorage().getAddressValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_NEW_COLLATERAL_MANAGER, collateral))\r\n            );\r\n    }\r\n\r\n    function getInteractionDelay(address collateral) internal view returns (uint) {\r\n        return\r\n            flexibleStorage().getUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_INTERACTION_DELAY, collateral))\r\n            );\r\n    }\r\n\r\n    function getCollapseFeeRate(address collateral) internal view returns (uint) {\r\n        return\r\n            flexibleStorage().getUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_COLLAPSE_FEE_RATE, collateral))\r\n            );\r\n    }\r\n\r\n    function getAtomicMaxVolumePerBlock() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ATOMIC_MAX_VOLUME_PER_BLOCK);\r\n    }\r\n\r\n    function getAtomicTwapWindow() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ATOMIC_TWAP_WINDOW);\r\n    }\r\n\r\n    function getAtomicEquivalentForDexPricing(bytes32 currencyKey) internal view returns (address) {\r\n        return\r\n            flexibleStorage().getAddressValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_ATOMIC_EQUIVALENT_FOR_DEX_PRICING, currencyKey))\r\n            );\r\n    }\r\n\r\n    function getAtomicExchangeFeeRate(bytes32 currencyKey) internal view returns (uint) {\r\n        return\r\n            flexibleStorage().getUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_ATOMIC_EXCHANGE_FEE_RATE, currencyKey))\r\n            );\r\n    }\r\n\r\n    function getAtomicPriceBuffer(bytes32 currencyKey) internal view returns (uint) {\r\n        return\r\n            flexibleStorage().getUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_ATOMIC_PRICE_BUFFER, currencyKey))\r\n            );\r\n    }\r\n\r\n    function getAtomicVolatilityConsiderationWindow(bytes32 currencyKey) internal view returns (uint) {\r\n        return\r\n            flexibleStorage().getUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW, currencyKey))\r\n            );\r\n    }\r\n\r\n    function getAtomicVolatilityUpdateThreshold(bytes32 currencyKey) internal view returns (uint) {\r\n        return\r\n            flexibleStorage().getUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_ATOMIC_VOLATILITY_UPDATE_THRESHOLD, currencyKey))\r\n            );\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Libraries\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\r\nlibrary SafeDecimalMath {\r\n    using SafeMath for uint;\r\n\r\n    /* Number of decimal places in the representations. */\r\n    uint8 public constant decimals = 18;\r\n    uint8 public constant highPrecisionDecimals = 27;\r\n\r\n    /* The number representing 1.0. */\r\n    uint public constant UNIT = 10**uint(decimals);\r\n\r\n    /* The number representing 1.0 for higher fidelity numbers. */\r\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\r\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\r\n\r\n    /**\r\n     * @return Provides an interface to UNIT.\r\n     */\r\n    function unit() external pure returns (uint) {\r\n        return UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return Provides an interface to PRECISE_UNIT.\r\n     */\r\n    function preciseUnit() external pure returns (uint) {\r\n        return PRECISE_UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\r\n     * decimals.\r\n     *\r\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\r\n     * so that product must be less than 2**256. As this is an integer division,\r\n     * the internal division always rounds down. This helps save on gas. Rounding\r\n     * is more expensive on gas.\r\n     */\r\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\r\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\r\n        return x.mul(y) / UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of the specified precision unit.\r\n     *\r\n     * @dev The operands should be in the form of a the specified unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function _multiplyDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\r\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of a precise unit.\r\n     *\r\n     * @dev The operands should be in the precise unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of a standard unit.\r\n     *\r\n     * @dev The operands should be in the standard unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is a high\r\n     * precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the standard precision unit\r\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\r\n     * this is an integer division, the result is always rounded down.\r\n     * This helps save on gas. Rounding is more expensive on gas.\r\n     */\r\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\r\n        /* Reintroduce the UNIT factor that will be divided out by y. */\r\n        return x.mul(UNIT).div(y);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * decimal in the precision unit specified in the parameter.\r\n     *\r\n     * @dev y is divided after the product of x and the specified precision unit\r\n     * is evaluated, so the product of x and the specified precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function _divideDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\r\n\r\n        if (resultTimesTen % 10 >= 5) {\r\n            resultTimesTen += 10;\r\n        }\r\n\r\n        return resultTimesTen / 10;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * standard precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the standard precision unit\r\n     * is evaluated, so the product of x and the standard precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * high precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the high precision unit\r\n     * is evaluated, so the product of x and the high precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    /**\r\n     * @dev Convert a standard decimal representation to a high precision one.\r\n     */\r\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\r\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\r\n    }\r\n\r\n    /**\r\n     * @dev Convert a high precision decimal to a standard decimal representation.\r\n     */\r\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\r\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n\r\n    // Computes `a - b`, setting the value to 0 if b > a.\r\n    function floorsub(uint a, uint b) internal pure returns (uint) {\r\n        return b >= a ? 0 : a - b;\r\n    }\r\n\r\n    /* ---------- Utilities ---------- */\r\n    /*\r\n     * Absolute value of the input, returned as a signed number.\r\n     */\r\n    function signedAbs(int x) internal pure returns (int) {\r\n        return x < 0 ? -x : x;\r\n    }\r\n\r\n    /*\r\n     * Absolute value of the input, returned as an unsigned number.\r\n     */\r\n    function abs(int x) internal pure returns (uint) {\r\n        return uint(signedAbs(x));\r\n    }\r\n}\r\n\r\n\r\n// Inheritance\r\n\r\n\r\n// Internal references\r\n\r\n\r\n// Libraries\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/wrapper\r\ncontract Wrapper is Owned, Pausable, MixinResolver, MixinSystemSettings, IWrapper {\r\n    using SafeMath for uint;\r\n    using SafeDecimalMath for uint;\r\n\r\n    /* ========== ENCODED NAMES ========== */\r\n\r\n    bytes32 internal constant sUSD = \"sUSD\";\r\n\r\n    /* ========== ADDRESS RESOLVER CONFIGURATION ========== */\r\n    bytes32 private constant CONTRACT_SYNTH_SUSD = \"SynthsUSD\";\r\n    bytes32 private constant CONTRACT_EXRATES = \"ExchangeRates\";\r\n    bytes32 private constant CONTRACT_DEBTCACHE = \"DebtCache\";\r\n    bytes32 private constant CONTRACT_SYSTEMSTATUS = \"SystemStatus\";\r\n    bytes32 private constant CONTRACT_WRAPPERFACTORY = \"WrapperFactory\";\r\n\r\n    // ========== STATE VARIABLES ==========\r\n\r\n    // NOTE: these values should ideally be `immutable` instead of public\r\n    IERC20 public token;\r\n    bytes32 public currencyKey;\r\n    bytes32 public synthContractName;\r\n\r\n    uint public targetSynthIssued;\r\n\r\n    constructor(\r\n        address _owner,\r\n        address _resolver,\r\n        IERC20 _token,\r\n        bytes32 _currencyKey,\r\n        bytes32 _synthContractName\r\n    ) public Owned(_owner) MixinSystemSettings(_resolver) {\r\n        token = _token;\r\n        currencyKey = _currencyKey;\r\n        synthContractName = _synthContractName;\r\n        targetSynthIssued = 0;\r\n        token.approve(address(this), uint256(-1));\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {\r\n        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();\r\n        bytes32[] memory newAddresses = new bytes32[](6);\r\n        newAddresses[0] = CONTRACT_SYNTH_SUSD;\r\n        newAddresses[1] = synthContractName;\r\n        newAddresses[2] = CONTRACT_EXRATES;\r\n        newAddresses[3] = CONTRACT_DEBTCACHE;\r\n        newAddresses[4] = CONTRACT_SYSTEMSTATUS;\r\n        newAddresses[5] = CONTRACT_WRAPPERFACTORY;\r\n        addresses = combineArrays(existingAddresses, newAddresses);\r\n        return addresses;\r\n    }\r\n\r\n    /* ========== INTERNAL VIEWS ========== */\r\n    function synthsUSD() internal view returns (ISynth) {\r\n        return ISynth(requireAndGetAddress(CONTRACT_SYNTH_SUSD));\r\n    }\r\n\r\n    function synth() internal view returns (ISynth) {\r\n        return ISynth(requireAndGetAddress(synthContractName));\r\n    }\r\n\r\n    function exchangeRates() internal view returns (IExchangeRates) {\r\n        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));\r\n    }\r\n\r\n    function debtCache() internal view returns (IDebtCache) {\r\n        return IDebtCache(requireAndGetAddress(CONTRACT_DEBTCACHE));\r\n    }\r\n\r\n    function systemStatus() internal view returns (ISystemStatus) {\r\n        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));\r\n    }\r\n\r\n    function wrapperFactory() internal view returns (IWrapperFactory) {\r\n        return IWrapperFactory(requireAndGetAddress(CONTRACT_WRAPPERFACTORY));\r\n    }\r\n\r\n    /* ========== PUBLIC FUNCTIONS ========== */\r\n\r\n    // ========== VIEWS ==========\r\n\r\n    function capacity() public view returns (uint _capacity) {\r\n        // capacity = max(maxETH - balance, 0)\r\n        uint balance = getReserves();\r\n        uint maxToken = maxTokenAmount();\r\n        if (balance >= maxToken) {\r\n            return 0;\r\n        }\r\n        return maxToken.sub(balance);\r\n    }\r\n\r\n    function totalIssuedSynths() public view returns (uint) {\r\n        // synths issued by this contract is always exactly equal to the balance of reserves\r\n        return exchangeRates().effectiveValue(currencyKey, targetSynthIssued, sUSD);\r\n    }\r\n\r\n    function getReserves() public view returns (uint) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function calculateMintFee(uint amount) public view returns (uint, bool) {\r\n        int r = mintFeeRate();\r\n\r\n        if (r < 0) {\r\n            return (amount.multiplyDecimalRound(uint(-r)), true);\r\n        } else {\r\n            return (amount.multiplyDecimalRound(uint(r)), false);\r\n        }\r\n    }\r\n\r\n    function calculateBurnFee(uint amount) public view returns (uint, bool) {\r\n        int r = burnFeeRate();\r\n\r\n        if (r < 0) {\r\n            return (amount.multiplyDecimalRound(uint(-r)), true);\r\n        } else {\r\n            return (amount.multiplyDecimalRound(uint(r)), false);\r\n        }\r\n    }\r\n\r\n    function maxTokenAmount() public view returns (uint256) {\r\n        return getWrapperMaxTokenAmount(address(this));\r\n    }\r\n\r\n    function mintFeeRate() public view returns (int256) {\r\n        return getWrapperMintFeeRate(address(this));\r\n    }\r\n\r\n    function burnFeeRate() public view returns (int256) {\r\n        return getWrapperBurnFeeRate(address(this));\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    // Transfers `amountIn` token to mint `amountIn - fees` of currencyKey.\r\n    // `amountIn` is inclusive of fees, calculable via `calculateMintFee`.\r\n    function mint(uint amountIn) external notPaused issuanceActive {\r\n        require(amountIn <= token.allowance(msg.sender, address(this)), \"Allowance not high enough\");\r\n        require(amountIn <= token.balanceOf(msg.sender), \"Balance is too low\");\r\n        require(!exchangeRates().rateIsInvalid(currencyKey), \"Currency rate is invalid\");\r\n\r\n        uint currentCapacity = capacity();\r\n        require(currentCapacity > 0, \"Contract has no spare capacity to mint\");\r\n\r\n        uint actualAmountIn = currentCapacity < amountIn ? currentCapacity : amountIn;\r\n\r\n        (uint feeAmountTarget, bool negative) = calculateMintFee(actualAmountIn);\r\n        uint mintAmount = negative ? actualAmountIn.add(feeAmountTarget) : actualAmountIn.sub(feeAmountTarget);\r\n\r\n        // Transfer token from user.\r\n        bool success = _safeTransferFrom(address(token), msg.sender, address(this), actualAmountIn);\r\n        require(success, \"Transfer did not succeed\");\r\n\r\n        // Mint tokens to user\r\n        _mint(mintAmount);\r\n\r\n        emit Minted(msg.sender, mintAmount, negative ? 0 : feeAmountTarget, actualAmountIn);\r\n    }\r\n\r\n    // Burns `amountIn` synth for `amountIn - fees` amount of token.\r\n    // `amountIn` is inclusive of fees, calculable via `calculateBurnFee`.\r\n    function burn(uint amountIn) external notPaused issuanceActive {\r\n        require(amountIn <= IERC20(address(synth())).balanceOf(msg.sender), \"Balance is too low\");\r\n        require(!exchangeRates().rateIsInvalid(currencyKey), \"Currency rate is invalid\");\r\n        require(totalIssuedSynths() > 0, \"Contract cannot burn for token, token balance is zero\");\r\n\r\n        (uint burnFee, bool negative) = calculateBurnFee(targetSynthIssued);\r\n\r\n        uint burnAmount;\r\n        uint amountOut;\r\n        if (negative) {\r\n            burnAmount = targetSynthIssued < amountIn ? targetSynthIssued.sub(burnFee) : amountIn;\r\n\r\n            amountOut = burnAmount.multiplyDecimal(\r\n                // -1e18 <= burnFeeRate <= 1e18 so this operation is safe\r\n                uint(int(SafeDecimalMath.unit()) - burnFeeRate())\r\n            );\r\n        } else {\r\n            burnAmount = targetSynthIssued.add(burnFee) < amountIn ? targetSynthIssued.add(burnFee) : amountIn;\r\n            amountOut = burnAmount.divideDecimal(\r\n                // -1e18 <= burnFeeRate <= 1e18 so this operation is safe\r\n                uint(int(SafeDecimalMath.unit()) + burnFeeRate())\r\n            );\r\n        }\r\n\r\n        uint feeAmountTarget = negative ? 0 : burnAmount.sub(amountOut);\r\n\r\n        // Transfer token to user.\r\n        bool success = _safeTransferFrom(address(token), address(this), msg.sender, amountOut);\r\n        require(success, \"Transfer did not succeed\");\r\n\r\n        // Burn\r\n        _burn(burnAmount);\r\n\r\n        emit Burned(msg.sender, amountOut, feeAmountTarget, burnAmount);\r\n    }\r\n\r\n    // ========== RESTRICTED ==========\r\n\r\n    /**\r\n     * @notice Fallback function\r\n     */\r\n    function() external payable {\r\n        revert(\"Fallback disabled, use mint()\");\r\n    }\r\n\r\n    /* ========== INTERNAL FUNCTIONS ========== */\r\n\r\n    function _mint(uint amount) internal {\r\n        uint reserves = getReserves();\r\n\r\n        uint excessAmount = reserves > targetSynthIssued.add(amount) ? reserves.sub(targetSynthIssued.add(amount)) : 0;\r\n        uint excessAmountUsd = exchangeRates().effectiveValue(currencyKey, excessAmount, sUSD);\r\n\r\n        // Mint `amount` to user.\r\n        synth().issue(msg.sender, amount);\r\n\r\n        // Escrow fee.\r\n        if (excessAmountUsd > 0) {\r\n            synthsUSD().issue(address(wrapperFactory()), excessAmountUsd);\r\n        }\r\n\r\n        // in the case of a negative fee extra synths will be issued, billed to the snx stakers\r\n        _setTargetSynthIssued(reserves);\r\n    }\r\n\r\n    function _burn(uint amount) internal {\r\n        uint reserves = getReserves();\r\n\r\n        // this is logically equivalent to getReserves() - (targetSynthIssued - amount), without going negative\r\n        uint excessAmount = reserves.add(amount) > targetSynthIssued ? reserves.add(amount).sub(targetSynthIssued) : 0;\r\n\r\n        uint excessAmountUsd = exchangeRates().effectiveValue(currencyKey, excessAmount, sUSD);\r\n\r\n        // Burn `amount` of currencyKey from user.\r\n        synth().burn(msg.sender, amount);\r\n\r\n        // We use burn/issue instead of burning the principal and transferring the fee.\r\n        // This saves an approval and is cheaper.\r\n        // Escrow fee.\r\n        if (excessAmountUsd > 0) {\r\n            synthsUSD().issue(address(wrapperFactory()), excessAmountUsd);\r\n        }\r\n\r\n        // in the case of a negative fee fewer synths will be burned, billed to the snx stakers\r\n        _setTargetSynthIssued(reserves);\r\n    }\r\n\r\n    function _setTargetSynthIssued(uint _targetSynthIssued) internal {\r\n        debtCache().recordExcludedDebtChange(currencyKey, int256(_targetSynthIssued) - int256(targetSynthIssued));\r\n\r\n        targetSynthIssued = _targetSynthIssued;\r\n    }\r\n\r\n    function _safeTransferFrom(\r\n        address _tokenAddress,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal returns (bool success) {\r\n        // note: both of these could be replaced with manual mstore's to reduce cost if desired\r\n        bytes memory msgData = abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", _from, _to, _value);\r\n        uint msgSize = msgData.length;\r\n\r\n        assembly {\r\n            // pre-set scratch space to all bits set\r\n            mstore(0x00, 0xff)\r\n\r\n            // note: this requires tangerine whistle compatible EVM\r\n            if iszero(call(gas(), _tokenAddress, 0, add(msgData, 0x20), msgSize, 0x00, 0x20)) {\r\n                revert(0, 0)\r\n            }\r\n\r\n            switch mload(0x00)\r\n                case 0xff {\r\n                    // token is not fully ERC20 compatible, didn't return anything, assume it was successful\r\n                    success := 1\r\n                }\r\n                case 0x01 {\r\n                    success := 1\r\n                }\r\n                case 0x00 {\r\n                    success := 0\r\n                }\r\n                default {\r\n                    // unexpected value, what could this be?\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n    }\r\n\r\n    modifier issuanceActive {\r\n        systemStatus().requireIssuanceActive();\r\n        _;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n    event Minted(address indexed account, uint principal, uint fee, uint amountIn);\r\n    event Burned(address indexed account, uint principal, uint fee, uint amountIn);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_currencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_synthContractName\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnFeeRate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_capacity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currencyKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPauseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintFeeRate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebuildCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolverAddressesRequired\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"addresses\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"synthContractName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetSynthIssued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalIssuedSynths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Wrapper","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000eb3107117fead7de89cd14d463d340a2e69177690000000000000000000000004e3b31eb0e5cb73641ee1e65e7dcefe520ba3ef20000000000000000000000005f98805a4e8be255a32880fdec7f6728c6568ba0735553440000000000000000000000000000000000000000000000000000000053796e7468735553440000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"SafeDecimalMath:84d626b2bb4d0f064067e4bf80fce7055d8f3e7b","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://496add764240d63694dfa04cb49e385cb2e7c5fa91abdde855ecf8af2aa2e268"}]}