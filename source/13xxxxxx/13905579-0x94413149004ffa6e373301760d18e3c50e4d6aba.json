{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract MineSeedVesting {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public token;\r\n\r\n    uint256 public startDate = 1646092801; // 2022-03-01 00:00:01\r\n\r\n    uint256 public endDate =   1669852801; // 2022-12-01 00:00:01\r\n    \r\n    uint256 public unlockAmountTotal;\r\n    \r\n    uint256 public tokenDecimals;\r\n    \r\n    uint256 public maxUnlockTimes;\r\n\r\n    address msgSender;\r\n    \r\n    mapping(address => UserVestingInfo) public UserVesting;\r\n\r\n    struct UserVestingInfo {\r\n        uint256 totalAmount;\r\n        uint256 firstAmount;\r\n        uint256 unlockAmount;\r\n        uint256 secondUnlock;\r\n        uint256 lastUnlockTime;\r\n    }\r\n\r\n    event FirstBySenderEvent(address indexed sender, uint256 amount);\r\n\r\n    event UnlockBySenderEvent(address indexed sender, uint256 amount);\r\n\r\n    constructor(address _token) public {\r\n        msgSender = msg.sender;\r\n        token = IERC20(_token);\r\n        tokenDecimals = token.decimals();\r\n        maxUnlockTimes = endDate.sub(startDate);\r\n        //add user vesting\r\n        addUserVestingInfo(0x0051437667689B36f9cFec31E4F007f1497c0F98, 10_000_000);\r\n        addUserVestingInfo(0x01b0743d28db13a5F6019B482070b5e22C44F25D, 791_667);\r\n        addUserVestingInfo(0x05404219D412C7B5A986Be58BC3a4ee3cE56d6ca, 1_375_000);\r\n        addUserVestingInfo(0x0BaBd8774f4FB8904184b0965204e5A9Db43aCfe, 2_000_000);\r\n        addUserVestingInfo(0x16E110beD33c0445BE68B957cbbef5cd7e1BBD4f, 1_583_333);\r\n        addUserVestingInfo(0x1a62BF05796d0Ae7ee0600a2F33Cd2d2d2F826D1, 2_216_667);\r\n        addUserVestingInfo(0x21d426655A41c0874048DD0a3E29B1cFF5Ec5FB6, 791_667);\r\n        addUserVestingInfo(0x33684C973d118028Bf971A17434A862F3A3E5eb6, 633_333);\r\n        addUserVestingInfo(0x3904eFc39b16e9CE6483E8bEAC623fca370286D1, 5_000_000);\r\n        addUserVestingInfo(0x4d883824258f7253101f266a23207DCb2Dd45768, 1_583_333);\r\n        addUserVestingInfo(0x51bb5e198C1899516a101E15088626811bd04108, 1_900_000);\r\n        addUserVestingInfo(0x52611C224e44867Ca611cFA0D05535d7ba07dC55, 1_666_667);\r\n        addUserVestingInfo(0x52c23f3F1b0c44C5285540f183C129c6eF169e63, 791_667);\r\n        addUserVestingInfo(0x5526AE8332fC020A827eE7798584A9E05765a6aa, 1_583_333);\r\n        addUserVestingInfo(0x58a252cc4073daCC7eaE81e7Ea193FAA13099849, 15_604_167);\r\n        addUserVestingInfo(0x60bae59D2b56069F7Ad2A6B8CbdB08c1c67951F7, 3_166_667);\r\n        addUserVestingInfo(0x6e4116462a0abE7A5e75dD66e44A1cBB6b2006F1, 791_667);\r\n        addUserVestingInfo(0x71d1f0a05F82c0EBd02b8704E3d2337b517a6B3A, 6_166_666);\r\n        addUserVestingInfo(0x7d614762E9E8a716f6889C4158f3392986BbbcA3, 791_667);\r\n        addUserVestingInfo(0x8663381606Edfc0F2d5136f7e763b91A6d76ed22, 791_667);\r\n        addUserVestingInfo(0x91406B5d57893E307f042D71C91e223a7058Eb72, 791_667);\r\n        addUserVestingInfo(0x9d6edF1e6B74b16B9E049d970E9489eDEFFB654B, 791_667);\r\n        addUserVestingInfo(0x9E6d8980BC9fc98c5d2db48c46237d12d9873ab0, 3_166_667);\r\n        addUserVestingInfo(0xaa3238003BD3D90Ba5C4A3d1A53553F44219F2B0, 3_166_667);\r\n        addUserVestingInfo(0xb5018Bc174321fFE9e0A38d262e9A448FBD21cdb, 2_375_000);\r\n        addUserVestingInfo(0xB8D61dc88c4cb9e4590992a2e3a70bd75a187989, 6_833_333);\r\n        addUserVestingInfo(0xBA2F8710a3FeecCf53f50b22bA0e5b5D230Eb343, 6_333_333);\r\n        addUserVestingInfo(0xBC89f9389aD2207E08E2Dfe2cE1a0238a6cDfAcd, 19_991_666);\r\n        addUserVestingInfo(0xC59c15C93f9aA3c381c76c7Af84fa09E615e765B, 50_000);\r\n        addUserVestingInfo(0xD2Ef10da66727627C68bEd148e881C923C1baA77, 666_666);\r\n        addUserVestingInfo(0xDE5E5AdBA79dB5f84579743e7a26728FA8f4E8d8, 4_166_666);\r\n        addUserVestingInfo(0xf7B496c0178b1Ee935ea3307188B5b1FbB0cDa59, 1_187_500);\r\n        addUserVestingInfo(0xa5013Bce0182E74FfEf440B3B5dd7173ddCb52cE, 500_000);\r\n    }\r\n\r\n    function addUserVestingInfo(address _address, uint256 _totalAmount) public {\r\n        require(msgSender == msg.sender, \"You do not have permission to operate\");\r\n        require(_address != address(0), \"The lock address cannot be a black hole address\");\r\n        UserVestingInfo storage _userVestingInfo = UserVesting[_address];\r\n        require(_totalAmount > 0, \"Lock up amount cannot be 0\");\r\n        require(_userVestingInfo.totalAmount == 0, \"Lock has been added\");\r\n        _userVestingInfo.totalAmount = _totalAmount.mul(10 ** tokenDecimals);\r\n        _userVestingInfo.firstAmount = _userVestingInfo.totalAmount.mul(10).div(100); //10%\r\n        _userVestingInfo.secondUnlock = _userVestingInfo.totalAmount.sub(_userVestingInfo.firstAmount).div(maxUnlockTimes);\r\n        unlockAmountTotal = unlockAmountTotal.add(_userVestingInfo.totalAmount);\r\n    }\r\n\r\n    function blockTimestamp() public virtual view returns(uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getUnlockTimes() public virtual view returns(uint256) {\r\n        if(blockTimestamp() > startDate) {\r\n            return blockTimestamp().sub(startDate);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function unlockFirstBySender() public {\r\n        UserVestingInfo storage _userVestingInfo = UserVesting[msg.sender];\r\n        require(_userVestingInfo.totalAmount > 0, \"The user has no lock record\");\r\n        require(_userVestingInfo.firstAmount > 0, \"The user has unlocked the first token\");\r\n        require(_userVestingInfo.totalAmount > _userVestingInfo.unlockAmount, \"The user has unlocked the first token\");\r\n        require(blockTimestamp() > startDate, \"It's not time to lock and unlock\");\r\n        _safeTransfer(msg.sender, _userVestingInfo.firstAmount);\r\n        _userVestingInfo.unlockAmount = _userVestingInfo.unlockAmount.add(_userVestingInfo.firstAmount);\r\n\r\n        emit FirstBySenderEvent(msg.sender, _userVestingInfo.firstAmount);\r\n        _userVestingInfo.firstAmount = 0;\r\n    }\r\n\r\n    function unlockBySender() public {\r\n        UserVestingInfo storage _userVestingInfo = UserVesting[msg.sender];\r\n        require(_userVestingInfo.totalAmount > 0, \"The user has no lock record\");\r\n        uint256 unlockAmount = 0;\r\n        if(blockTimestamp() > endDate) {\r\n            require(_userVestingInfo.totalAmount > _userVestingInfo.unlockAmount, \"The user has no unlocked quota\");\r\n            unlockAmount = _userVestingInfo.totalAmount.sub(_userVestingInfo.unlockAmount);\r\n        } else {\r\n            uint256 unlockTimes = getUnlockTimes();\r\n            require(unlockTimes > _userVestingInfo.lastUnlockTime, \"The user has no lock record\");\r\n            unlockAmount = unlockTimes.sub(_userVestingInfo.lastUnlockTime).mul(_userVestingInfo.secondUnlock);\r\n            _userVestingInfo.lastUnlockTime = unlockTimes;\r\n        }\r\n        _safeTransfer(msg.sender, unlockAmount);\r\n        _userVestingInfo.unlockAmount = _userVestingInfo.unlockAmount.add(unlockAmount);\r\n\r\n        emit UnlockBySenderEvent(msg.sender, unlockAmount);\r\n    }\r\n\r\n    function _safeTransfer(address _unlockAddress, uint256 _unlockToken) private {\r\n        require(balanceOf() >= _unlockToken, \"Insufficient available balance for transfer\");\r\n        token.transfer(_unlockAddress, _unlockToken);\r\n    }\r\n\r\n    function balanceOf() public view returns(uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfBySender() public view returns(uint256) {\r\n        return token.balanceOf(msg.sender);\r\n    }\r\n\r\n    function balanceOfByAddress(address _address) public view returns(uint256) {\r\n        return token.balanceOf(_address);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FirstBySenderEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockBySenderEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondUnlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"addUserVestingInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOfByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfBySender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUnlockTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockAmountTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockBySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockFirstBySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MineSeedVesting","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000829c97092c0cc92efe7397dd3ddb831cc5835bae","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3eda50daf9082e54208c57b23d0871703aa76e0f9efe1f8c3151deaf6a48d7e9"}]}