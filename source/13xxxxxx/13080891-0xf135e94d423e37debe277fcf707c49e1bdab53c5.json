{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SwitchPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport './interfaces/IRewardToken.sol';\\nimport './libraries/SafeMath.sol';\\nimport './modules/Configable.sol';\\nimport \\\"./modules/ReentrancyGuard.sol\\\";\\nimport './modules/Pausable.sol';\\nimport './modules/Initializable.sol';\\n\\n\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\ncontract SwitchPool is Pausable, Configable, ReentrancyGuard, Initializable {\\n    using SafeMath for uint;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint amount;         // How many tokens the user has provided.\\n        uint rewardDebt;     // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of RewardTokens\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accRewardPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws tokens to a pool. Here's what happens:\\n        //   1. The pool's `accRewardPerShare` (and `lastBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        address depositToken;           // Address of LP token contract.\\n        uint allocPoint;       // How many allocation points assigned to this pool. RewardTokens to distribute per block.\\n        uint lastBlock;  // Last block number that RewardTokens distribution occurs.\\n        uint accRewardPerShare;   // Accumulated RewardTokens per share, times 1e18. See below.\\n        uint depositTokenSupply;\\n        uint16 depositFeeBP;      // Deposit fee in basis points\\n        uint16 tokenType;\\n        bool paused;\\n    }\\n\\n    uint public constant version = 1;\\n\\n    // The reward TOKEN!\\n    address public rewardToken;\\n    \\n    // Dev address.\\n    address public team;\\n    // reward tokens created per block.\\n    uint public mintPerBlock;\\n    // Bonus muliplier for early rewardToken makers.\\n    uint public constant BONUS_MULTIPLIER = 1;\\n    // Deposit Fee address\\n    address public feeAddress;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes tokens.\\n    mapping(uint => mapping(address => UserInfo)) public userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint public totalAllocPoint;\\n    // The block number when reward token mining starts.\\n    uint public startBlock;\\n\\n    event Deposit(address indexed user, address indexed to, uint indexed pid, uint amount, uint fee);\\n    event Withdraw(address indexed user, address indexed to, uint indexed pid, uint amount);\\n    event EmergencyWithdraw(address indexed user, address indexed to, uint indexed pid, uint amount);\\n    event SetFeeAddress(address indexed user, address indexed newAddress);\\n    event SetDevAddress(address indexed user, address indexed newAddress);\\n    event UpdateEmissionRate(address indexed user, uint mintPerBlock);\\n\\n    function initialize(\\n        address _rewardToken,\\n        address _team,\\n        address _feeAddress,\\n        uint _mintPerBlock,\\n        uint _startBlock\\n    ) external initializer {\\n        owner = msg.sender;\\n        rewardToken = _rewardToken;\\n        team = _team;\\n        feeAddress = _feeAddress;\\n        mintPerBlock = _mintPerBlock;\\n        startBlock = _startBlock;\\n    }\\n\\n    function poolLength() external view returns (uint) {\\n        return poolInfo.length;\\n    }\\n\\n    mapping(address => bool) public poolExistence;\\n    \\n    modifier nonDuplicated(address _depositToken) {\\n        require(poolExistence[_depositToken] == false, \\\"nonDuplicated: duplicated\\\");\\n        _;\\n    }\\n\\n    modifier validatePoolByPid(uint _pid) {\\n        require (_pid < poolInfo.length , \\\"Pool does not exist\\\");\\n        _;\\n    }\\n\\n    function pause() public onlyManager whenNotPaused {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyManager whenPaused {\\n        _unpause();\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    function add(bool _withUpdate, uint _allocPoint, address _depositToken, uint16 _depositFeeBP, uint16 _tokenType) public onlyDev nonDuplicated(_depositToken) {\\n        require(_depositFeeBP <= 10000, \\\"add: invalid deposit fee basis points\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        uint lastBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolExistence[_depositToken] = true;\\n        poolInfo.push(PoolInfo({\\n            depositToken : _depositToken,\\n            allocPoint : _allocPoint,\\n            lastBlock : lastBlock,\\n            accRewardPerShare : 0,\\n            depositTokenSupply: 0,\\n            depositFeeBP : _depositFeeBP,\\n            tokenType: _tokenType,\\n            paused: false\\n        }));\\n    }\\n\\n    function batchAdd(bool _withUpdate, uint[] memory _allocPoints, address[] memory _depositTokens, uint16[] memory _depositFeeBPs, uint16[] memory _tokenTypes) external onlyDev {\\n        require(_allocPoints.length == _depositTokens.length && _depositTokens.length == _depositFeeBPs.length, 'invalid params');\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        for(uint i; i<_allocPoints.length; i++) {\\n            add(false, _allocPoints[i], _depositTokens[i], _depositFeeBPs[i], _tokenTypes[i]);\\n        }\\n    }\\n\\n    function set(bool _withUpdate, uint _pid, uint _allocPoint, uint16 _depositFeeBP, uint16 _tokenType, bool _paused) external validatePoolByPid(_pid) onlyManager {\\n        require(_depositFeeBP <= 10000, \\\"depositFeeBP should be <=10000!\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\n        poolInfo[_pid].tokenType = _tokenType;\\n        poolInfo[_pid].paused = _paused;  \\n    }\\n\\n    function batchSetAllocPoint(uint[] memory _pids, uint[] memory _allocPoints) external onlyManager {\\n        require(_pids.length == _allocPoints.length, 'invalid params');\\n        massUpdatePools();\\n        for (uint i; i<_pids.length; i++) {\\n            totalAllocPoint = totalAllocPoint.sub(poolInfo[_pids[i]].allocPoint).add(_allocPoints[i]);\\n            poolInfo[_pids[i]].allocPoint = _allocPoints[i];\\n        }\\n    }\\n\\n    function batchSetDepositFeeBP(uint[] memory _pids, uint16[] memory _depositFeeBPs) external onlyManager {\\n        require(_pids.length == _depositFeeBPs.length, 'invalid params');\\n        for (uint i; i<_pids.length; i++) {\\n            require(_depositFeeBPs[i] <= 10000, 'depositFeeBP should be <=10000!');\\n            poolInfo[_pids[i]].depositFeeBP = _depositFeeBPs[i];\\n        }\\n    }\\n\\n    function batchSetPaused(uint[] memory _pids, bool[] memory _pauseds) external onlyManager {\\n        require(_pids.length == _pauseds.length, 'invalid params');\\n        for (uint i; i<_pids.length; i++) {\\n            poolInfo[_pids[i]].paused = _pauseds[i];\\n        }\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint _from, uint _to) public view returns (uint) {\\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\\n    }\\n\\n    function getToBlock() public view returns (uint) {\\n        return block.number;\\n    }\\n\\n    function pendingRewardInfo(uint _pid) public view validatePoolByPid(_pid) returns (uint, uint) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (rewardToken != address(0) && getToBlock() > pool.lastBlock && totalAllocPoint > 0) {\\n            uint multiplier = getMultiplier(pool.lastBlock, getToBlock());\\n            uint reward = multiplier.mul(mintPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            return (reward, block.number);\\n        }\\n        return (0, block.number);\\n    }\\n\\n    // View function to see pending RewardTokens on frontend.\\n    function pendingReward(uint _pid, address _user) external view validatePoolByPid(_pid) returns (uint) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo memory user = userInfo[_pid][_user];\\n        uint accRewardPerShare = pool.accRewardPerShare;\\n        if (block.number > pool.lastBlock && pool.depositTokenSupply != 0) {\\n            uint multiplier = getMultiplier(pool.lastBlock, block.number);\\n            uint reward = multiplier.mul(mintPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            accRewardPerShare = accRewardPerShare.add(reward.mul(1e18).div(pool.depositTokenSupply));\\n        }\\n        return user.amount.mul(accRewardPerShare).div(1e18).sub(user.rewardDebt);\\n    }\\n    \\n    function _mintRewardToken(uint _pid) internal view returns (uint, uint) {\\n        if(rewardToken == address(0)) {\\n            return (0, block.number);\\n        }\\n        (uint reward,) = pendingRewardInfo(_pid);\\n        return (reward, block.number);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint length = poolInfo.length;\\n        for (uint pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint toBlock = getToBlock();\\n        if (toBlock <= pool.lastBlock) {\\n            return;\\n        }\\n        if (pool.depositTokenSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastBlock = toBlock;\\n            return;\\n        }\\n        \\n        (uint reward,) = _mintRewardToken(_pid);\\n        pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(1e18).div(pool.depositTokenSupply));\\n\\n        pool.lastBlock = toBlock;\\n    }\\n\\n    // Deposit tokens to SwitchFarm for reward allocation.\\n    function deposit(uint _pid, uint _amount, address _to) external validatePoolByPid(_pid) whenNotPaused nonReentrant returns(uint, uint) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(pool.paused == false, \\\"pool is paused\\\");\\n        UserInfo storage user = userInfo[_pid][_to];\\n        updatePool(_pid);\\n        uint depositFee;\\n\\n        if (_amount > 0) {\\n            IERC20(pool.depositToken).transferFrom(address(msg.sender), address(this), _amount);\\n            \\n            if (pool.depositFeeBP > 0) {\\n                depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\n                safeTransfer(pool.depositToken, feeAddress, depositFee);\\n                _amount = _amount.sub(depositFee);\\n                user.amount = user.amount.add(_amount);\\n            } else {\\n                user.amount = user.amount.add(_amount);\\n            }\\n        }\\n        pool.depositTokenSupply  = pool.depositTokenSupply.add(_amount);\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e18);\\n        emit Deposit(msg.sender, _to, _pid, _amount, depositFee);\\n        return (_amount, depositFee);\\n    }\\n\\n    // Withdraw tokens from SwitchFarm.\\n    function withdraw(uint _pid, uint _amount, address _to) external validatePoolByPid(_pid) whenNotPaused nonReentrant returns(uint) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(pool.paused == false, \\\"pool is paused\\\");\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n        _harvestRewardToken(_pid, _to);\\n       \\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.depositTokenSupply = pool.depositTokenSupply.sub(_amount);\\n            safeTransfer(pool.depositToken, _to, _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e18);\\n        emit Withdraw(msg.sender, _to, _pid, _amount);\\n        return _amount;\\n    }\\n\\n    function _harvestRewardToken(uint _pid, address _to) internal returns(uint amount) {\\n        if(rewardToken == address(0)) {\\n            return 0;\\n        }\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        amount = user.amount.mul(pool.accRewardPerShare).div(1e18).sub(user.rewardDebt);\\n        uint take = IRewardToken(rewardToken).take();\\n        if(amount > take) {\\n            amount = take;\\n        }\\n        IRewardToken(rewardToken).mint(_to, amount);\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e18);\\n        return amount;\\n    }\\n\\n    function harvest(uint _pid, address _to) external validatePoolByPid(_pid) whenNotPaused nonReentrant  returns (uint reward) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        require(pool.paused == false, \\\"pool is paused\\\");\\n        updatePool(_pid);\\n        reward = _harvestRewardToken(_pid, _to);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint _pid, address _to) external validatePoolByPid(_pid) nonReentrant returns(uint) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint amount = user.amount;\\n        require(amount > 0, 'no balance');\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        pool.depositTokenSupply = pool.depositTokenSupply.sub(amount);\\n        safeTransfer(pool.depositToken, _to, amount);\\n        emit EmergencyWithdraw(msg.sender, _to, _pid, amount);\\n        return amount;\\n    }\\n\\n    // Safe Token transfer function, just in case if rounding error causes pool to not have enough tokens.\\n    function safeTokenTransfer(address _token, address _to, uint _amount) internal returns(uint) {\\n        uint tokenBal = IERC20(_token).balanceOf(address(this));\\n        if(_amount >0) {\\n            if(tokenBal == 0) {\\n                return 0;\\n            }\\n            if (_amount > tokenBal) {\\n                _amount = tokenBal;\\n            }\\n            safeTransfer(_token, _to, _amount);\\n        }\\n        return _amount;\\n    }\\n\\n    function safeTransfer(address _token, address _to, uint _amount) internal returns(uint) {\\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(0xa9059cbb, _to, _amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'safeTransfer: TRANSFER_FAILED');\\n        return _amount;\\n    }\\n\\n    function setTeamAddress(address _team) external onlyDev {\\n        require(_team != address(0), 'zero address');\\n        team = _team;\\n        emit SetDevAddress(msg.sender, _team);\\n    }\\n\\n    function setFeeAddress(address _feeAddress) external onlyDev {\\n        feeAddress = _feeAddress;\\n        emit SetFeeAddress(msg.sender, _feeAddress);\\n    }\\n\\n    //reward has to add hidden dummy pools inorder to alter the emission, here we make it simple and transparent to all.\\n    function updateEmissionRate(uint _mintPerBlock) external onlyDev {\\n        massUpdatePools();\\n        mintPerBlock = _mintPerBlock;\\n        emit UpdateEmissionRate(msg.sender, _mintPerBlock);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\ninterface IRewardToken {\\n    function balanceOf(address owner) external view returns (uint);\\n    function take() external view returns (uint);\\n    function funds(address user) external view returns (uint);\\n    function mint(address to, uint value) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"contracts/modules/Configable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6;\\n\\ninterface IConfig {\\n    function dev() external view returns (address);\\n    function admin() external view returns (address);\\n}\\n\\ncontract Configable {\\n    address public config;\\n    address public owner;\\n\\n    event ConfigChanged(address indexed _user, address indexed _old, address indexed _new);\\n    event OwnerChanged(address indexed _user, address indexed _old, address indexed _new);\\n \\n    function setupConfig(address _config) external onlyOwner {\\n        emit ConfigChanged(msg.sender, config, _config);\\n        config = _config;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, 'OWNER FORBIDDEN');\\n        _;\\n    }\\n\\n    function admin() public view returns(address) {\\n        if(config != address(0)) {\\n            return IConfig(config).admin();\\n        }\\n        return owner;\\n    }\\n\\n    function dev() public view returns(address) {\\n        if(config != address(0)) {\\n            return IConfig(config).dev();\\n        }\\n        return owner;\\n    }\\n\\n    function changeOwner(address _user) external onlyOwner {\\n        require(owner != _user, 'Owner: NO CHANGE');\\n        emit OwnerChanged(msg.sender, owner, _user);\\n        owner = _user;\\n    }\\n    \\n    modifier onlyDev() {\\n        require(msg.sender == dev() || msg.sender == owner, 'dev FORBIDDEN');\\n        _;\\n    }\\n    \\n    modifier onlyAdmin() {\\n        require(msg.sender == admin(), 'admin FORBIDDEN');\\n        _;\\n    }\\n  \\n    modifier onlyManager() {\\n        require(msg.sender == dev() || msg.sender == admin() || msg.sender == owner, 'manager FORBIDDEN');\\n        _;\\n    }\\n}\"\r\n    },\r\n    \"contracts/modules/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 0;\\n    uint256 private constant _ENTERED = 1;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/modules/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused();\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused();\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/modules/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetDevAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetFeeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintPerBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_tokenType\",\"type\":\"uint16\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocPoints\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_depositTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_depositFeeBPs\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_tokenTypes\",\"type\":\"uint16[]\"}],\"name\":\"batchAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocPoints\",\"type\":\"uint256[]\"}],\"name\":\"batchSetAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_depositFeeBPs\",\"type\":\"uint16[]\"}],\"name\":\"batchSetDepositFeeBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_pauseds\",\"type\":\"bool[]\"}],\"name\":\"batchSetPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_team\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"pendingRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tokenType\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_tokenType\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_team\",\"type\":\"address\"}],\"name\":\"setTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"setupConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SwitchPool","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}