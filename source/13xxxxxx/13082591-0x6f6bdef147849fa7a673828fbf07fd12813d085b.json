{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IBridgeValidators.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IBridgeValidators {\r\n    function isValidator(address _validator) external view returns (bool);\r\n    function requiredSignatures() external view returns (uint256);\r\n    function owner() external view returns (address);\r\n}\r\n\r\n// File: contracts/libraries/Message.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\nlibrary Message {\r\n    function addressArrayContains(address[] array, address value) internal pure returns (bool) {\r\n        for (uint256 i = 0; i < array.length; i++) {\r\n            if (array[i] == value) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    // layout of message :: bytes:\r\n    // offset  0: 32 bytes :: uint256 - message length\r\n    // offset 32: 20 bytes :: address - recipient address\r\n    // offset 52: 32 bytes :: uint256 - value\r\n    // offset 84: 32 bytes :: bytes32 - transaction hash\r\n    // offset 104: 20 bytes :: address - contract address to prevent double spending\r\n\r\n    // mload always reads 32 bytes.\r\n    // so we can and have to start reading recipient at offset 20 instead of 32.\r\n    // if we were to read at 32 the address would contain part of value and be corrupted.\r\n    // when reading from offset 20 mload will read 12 bytes (most of them zeros) followed\r\n    // by the 20 recipient address bytes and correctly convert it into an address.\r\n    // this saves some storage/gas over the alternative solution\r\n    // which is padding address to 32 bytes and reading recipient at offset 32.\r\n    // for more details see discussion in:\r\n    // https://github.com/paritytech/parity-bridge/issues/61\r\n    function parseMessage(bytes message)\r\n        internal\r\n        pure\r\n        returns (address recipient, uint256 amount, bytes32 txHash, address contractAddress)\r\n    {\r\n        require(isMessageValid(message));\r\n        assembly {\r\n            recipient := mload(add(message, 20))\r\n            amount := mload(add(message, 52))\r\n            txHash := mload(add(message, 84))\r\n            contractAddress := mload(add(message, 104))\r\n        }\r\n    }\r\n\r\n    function isMessageValid(bytes _msg) internal pure returns (bool) {\r\n        return _msg.length == requiredMessageLength();\r\n    }\r\n\r\n    function requiredMessageLength() internal pure returns (uint256) {\r\n        return 104;\r\n    }\r\n\r\n    function recoverAddressFromSignedMessage(bytes signature, bytes message, bool isAMBMessage)\r\n        internal\r\n        pure\r\n        returns (address)\r\n    {\r\n        require(signature.length == 65);\r\n        bytes32 r;\r\n        bytes32 s;\r\n        bytes1 v;\r\n\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := mload(add(signature, 0x60))\r\n        }\r\n        require(uint8(v) == 27 || uint8(v) == 28);\r\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0);\r\n\r\n        return ecrecover(hashMessage(message, isAMBMessage), uint8(v), r, s);\r\n    }\r\n\r\n    function hashMessage(bytes message, bool isAMBMessage) internal pure returns (bytes32) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n\";\r\n        if (isAMBMessage) {\r\n            return keccak256(abi.encodePacked(prefix, uintToString(message.length), message));\r\n        } else {\r\n            string memory msgLength = \"104\";\r\n            return keccak256(abi.encodePacked(prefix, msgLength, message));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Validates provided signatures, only first requiredSignatures() number\r\n    * of signatures are going to be validated, these signatures should be from different validators.\r\n    * @param _message bytes message used to generate signatures\r\n    * @param _signatures bytes blob with signatures to be validated.\r\n    * First byte X is a number of signatures in a blob,\r\n    * next X bytes are v components of signatures,\r\n    * next 32 * X bytes are r components of signatures,\r\n    * next 32 * X bytes are s components of signatures.\r\n    * @param _validatorContract contract, which conforms to the IBridgeValidators interface,\r\n    * where info about current validators and required signatures is stored.\r\n    * @param isAMBMessage true if _message is an AMB message with arbitrary length.\r\n    */\r\n    function hasEnoughValidSignatures(\r\n        bytes _message,\r\n        bytes _signatures,\r\n        IBridgeValidators _validatorContract,\r\n        bool isAMBMessage\r\n    ) internal view {\r\n        require(isAMBMessage || isMessageValid(_message));\r\n        uint256 requiredSignatures = _validatorContract.requiredSignatures();\r\n        uint256 amount;\r\n        assembly {\r\n            amount := and(mload(add(_signatures, 1)), 0xff)\r\n        }\r\n        require(amount >= requiredSignatures);\r\n        bytes32 hash = hashMessage(_message, isAMBMessage);\r\n        address[] memory encounteredAddresses = new address[](requiredSignatures);\r\n\r\n        for (uint256 i = 0; i < requiredSignatures; i++) {\r\n            uint8 v;\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint256 posr = 33 + amount + 32 * i;\r\n            uint256 poss = posr + 32 * amount;\r\n            assembly {\r\n                v := mload(add(_signatures, add(2, i)))\r\n                r := mload(add(_signatures, posr))\r\n                s := mload(add(_signatures, poss))\r\n            }\r\n\r\n            address recoveredAddress = ecrecover(hash, v, r, s);\r\n            require(_validatorContract.isValidator(recoveredAddress));\r\n            require(!addressArrayContains(encounteredAddresses, recoveredAddress));\r\n            encounteredAddresses[i] = recoveredAddress;\r\n        }\r\n    }\r\n\r\n    function uintToString(uint256 i) internal pure returns (string) {\r\n        if (i == 0) return \"0\";\r\n        uint256 j = i;\r\n        uint256 length;\r\n        while (j != 0) {\r\n            length++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(length);\r\n        uint256 k = length - 1;\r\n        while (i != 0) {\r\n            bstr[k--] = bytes1(48 + (i % 10));\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeability/EternalStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n    mapping(bytes32 => uint256) internal uintStorage;\r\n    mapping(bytes32 => string) internal stringStorage;\r\n    mapping(bytes32 => address) internal addressStorage;\r\n    mapping(bytes32 => bytes) internal bytesStorage;\r\n    mapping(bytes32 => bool) internal boolStorage;\r\n    mapping(bytes32 => int256) internal intStorage;\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/ValidatorStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract ValidatorStorage {\r\n    bytes32 internal constant VALIDATOR_CONTRACT = 0x5a74bb7e202fb8e4bf311841c7d64ec19df195fee77d7e7ae749b27921b6ddfe; // keccak256(abi.encodePacked(\"validatorContract\"))\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Validatable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\ncontract Validatable is EternalStorage, ValidatorStorage {\r\n    function validatorContract() public view returns (IBridgeValidators) {\r\n        return IBridgeValidators(addressStorage[VALIDATOR_CONTRACT]);\r\n    }\r\n\r\n    modifier onlyValidator() {\r\n        require(validatorContract().isValidator(msg.sender));\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    function requiredSignatures() public view returns (uint256) {\r\n        return validatorContract().requiredSignatures();\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/interfaces/IUpgradeabilityOwnerStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IUpgradeabilityOwnerStorage {\r\n    function upgradeabilityOwner() external view returns (address);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Upgradeable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract Upgradeable {\r\n    // Avoid using onlyUpgradeabilityOwner name to prevent issues with implementation from proxy contract\r\n    modifier onlyIfUpgradeabilityOwner() {\r\n        require(msg.sender == IUpgradeabilityOwnerStorage(this).upgradeabilityOwner());\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Initializable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract Initializable is EternalStorage {\r\n    bytes32 internal constant INITIALIZED = 0x0a6f646cd611241d8073675e00d1a1ff700fbf1b53fcf473de56d1e6e4b714ba; // keccak256(abi.encodePacked(\"isInitialized\"))\r\n\r\n    function setInitialize() internal {\r\n        boolStorage[INITIALIZED] = true;\r\n    }\r\n\r\n    function isInitialized() public view returns (bool) {\r\n        return boolStorage[INITIALIZED];\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/InitializableBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract InitializableBridge is Initializable {\r\n    bytes32 internal constant DEPLOYED_AT_BLOCK = 0xb120ceec05576ad0c710bc6e85f1768535e27554458f05dcbb5c65b8c7a749b0; // keccak256(abi.encodePacked(\"deployedAtBlock\"))\r\n\r\n    function deployedAtBlock() external view returns (uint256) {\r\n        return uintStorage[DEPLOYED_AT_BLOCK];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Ownable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev This contract has an owner address providing basic authorization control\r\n */\r\ncontract Ownable is EternalStorage {\r\n    bytes4 internal constant UPGRADEABILITY_OWNER = 0x6fde8202; // upgradeabilityOwner()\r\n\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param previousOwner representing the address of the previous owner\r\n    * @param newOwner representing the address of the new owner\r\n    */\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner());\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than contract itself or owner.\r\n    */\r\n    modifier onlyRelevantSender() {\r\n        // proxy owner if used through proxy, address(0) otherwise\r\n        require(\r\n            !address(this).call(abi.encodeWithSelector(UPGRADEABILITY_OWNER)) || // covers usage without calling through storage proxy\r\n                msg.sender == IUpgradeabilityOwnerStorage(this).upgradeabilityOwner() || // covers usage through regular proxy calls\r\n                msg.sender == address(this) // covers calls through upgradeAndCall proxy method\r\n        );\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    bytes32 internal constant OWNER = 0x02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0; // keccak256(abi.encodePacked(\"owner\"))\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function owner() public view returns (address) {\r\n        return addressStorage[OWNER];\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner the address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a new owner address\r\n    */\r\n    function _setOwner(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner(), newOwner);\r\n        addressStorage[OWNER] = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Sacrifice.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract Sacrifice {\r\n    constructor(address _recipient) public payable {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/Address.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title Address\r\n * @dev Helper methods for Address type.\r\n */\r\nlibrary Address {\r\n    /**\r\n    * @dev Try to send native tokens to the address. If it fails, it will force the transfer by creating a selfdestruct contract\r\n    * @param _receiver address that will receive the native tokens\r\n    * @param _value the amount of native tokens to send\r\n    */\r\n    function safeSendValue(address _receiver, uint256 _value) internal {\r\n        if (!_receiver.send(_value)) {\r\n            (new Sacrifice).value(_value)(_receiver);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/ERC677.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract ERC677 is ERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\r\n\r\n    function transferAndCall(address, uint256, bytes) external returns (bool);\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool);\r\n}\r\n\r\ncontract LegacyERC20 {\r\n    function transfer(address _spender, uint256 _value) public; // returns (bool);\r\n    function transferFrom(address _owner, address _spender, uint256 _value) public; // returns (bool);\r\n}\r\n\r\n// File: contracts/libraries/SafeERC20.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Helper methods for safe token transfers.\r\n * Functions perform additional checks to be sure that token transfer really happened.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev Same as ERC20.transfer(address,uint256) but with extra consistency checks.\r\n    * @param _token address of the token contract\r\n    * @param _to address of the receiver\r\n    * @param _value amount of tokens to send\r\n    */\r\n    function safeTransfer(address _token, address _to, uint256 _value) internal {\r\n        LegacyERC20(_token).transfer(_to, _value);\r\n        assembly {\r\n            if returndatasize {\r\n                returndatacopy(0, 0, 32)\r\n                if iszero(mload(0)) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Same as ERC20.transferFrom(address,address,uint256) but with extra consistency checks.\r\n    * @param _token address of the token contract\r\n    * @param _from address of the sender\r\n    * @param _value amount of tokens to send\r\n    */\r\n    function safeTransferFrom(address _token, address _from, uint256 _value) internal {\r\n        LegacyERC20(_token).transferFrom(_from, address(this), _value);\r\n        assembly {\r\n            if returndatasize {\r\n                returndatacopy(0, 0, 32)\r\n                if iszero(mload(0)) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Claimable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Implementation of the claiming utils that can be useful for withdrawing accidentally sent tokens that are not used in bridge operations.\r\n */\r\ncontract Claimable {\r\n    using SafeERC20 for address;\r\n\r\n    /**\r\n     * Throws if a given address is equal to address(0)\r\n     */\r\n    modifier validAddress(address _to) {\r\n        require(_to != address(0));\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws the erc20 tokens or native coins from this contract.\r\n     * Caller should additionally check that the claimed token is not a part of bridge operations (i.e. that token != erc20token()).\r\n     * @param _token address of the claimed token or address(0) for native coins.\r\n     * @param _to address of the tokens/coins receiver.\r\n     */\r\n    function claimValues(address _token, address _to) internal validAddress(_to) {\r\n        if (_token == address(0)) {\r\n            claimNativeCoins(_to);\r\n        } else {\r\n            claimErc20Tokens(_token, _to);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for withdrawing all native coins from the contract.\r\n     * @param _to address of the coins receiver.\r\n     */\r\n    function claimNativeCoins(address _to) internal {\r\n        uint256 value = address(this).balance;\r\n        Address.safeSendValue(_to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for withdrawing all tokens of ssome particular ERC20 contract from this contract.\r\n     * @param _token address of the claimed ERC20 token.\r\n     * @param _to address of the tokens receiver.\r\n     */\r\n    function claimErc20Tokens(address _token, address _to) internal {\r\n        ERC20Basic token = ERC20Basic(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        _token.safeTransfer(_to, balance);\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/VersionableBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract VersionableBridge {\r\n    function getBridgeInterfacesVersion() external pure returns (uint64 major, uint64 minor, uint64 patch) {\r\n        return (5, 2, 0);\r\n    }\r\n\r\n    /* solcov ignore next */\r\n    function getBridgeMode() external pure returns (bytes4);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/DecimalShiftBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\ncontract DecimalShiftBridge is EternalStorage {\r\n    using SafeMath for uint256;\r\n\r\n    bytes32 internal constant DECIMAL_SHIFT = 0x1e8ecaafaddea96ed9ac6d2642dcdfe1bebe58a930b1085842d8fc122b371ee5; // keccak256(abi.encodePacked(\"decimalShift\"))\r\n\r\n    /**\r\n    * @dev Internal function for setting the decimal shift for bridge operations.\r\n    * Decimal shift can be positive, negative, or equal to zero.\r\n    * It has the following meaning: N tokens in the foreign chain are equivalent to N * pow(10, shift) tokens on the home side.\r\n    * @param _shift new value of decimal shift.\r\n    */\r\n    function _setDecimalShift(int256 _shift) internal {\r\n        // since 1 wei * 10**77 > 2**255, it does not make any sense to use higher values\r\n        require(_shift > -77 && _shift < 77);\r\n        uintStorage[DECIMAL_SHIFT] = uint256(_shift);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the value of foreign-to-home decimal shift.\r\n    * @return decimal shift.\r\n    */\r\n    function decimalShift() public view returns (int256) {\r\n        return int256(uintStorage[DECIMAL_SHIFT]);\r\n    }\r\n\r\n    /**\r\n    * @dev Converts the amount of home tokens into the equivalent amount of foreign tokens.\r\n    * @param _value amount of home tokens.\r\n    * @return equivalent amount of foreign tokens.\r\n    */\r\n    function _unshiftValue(uint256 _value) internal view returns (uint256) {\r\n        return _shiftUint(_value, -decimalShift());\r\n    }\r\n\r\n    /**\r\n    * @dev Converts the amount of foreign tokens into the equivalent amount of home tokens.\r\n    * @param _value amount of foreign tokens.\r\n    * @return equivalent amount of home tokens.\r\n    */\r\n    function _shiftValue(uint256 _value) internal view returns (uint256) {\r\n        return _shiftUint(_value, decimalShift());\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates _value * pow(10, _shift).\r\n    * @param _value amount of tokens.\r\n    * @param _shift decimal shift to apply.\r\n    * @return shifted value.\r\n    */\r\n    function _shiftUint(uint256 _value, int256 _shift) private pure returns (uint256) {\r\n        if (_shift == 0) {\r\n            return _value;\r\n        }\r\n        if (_shift > 0) {\r\n            return _value.mul(10**uint256(_shift));\r\n        }\r\n        return _value.div(10**uint256(-_shift));\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BasicBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BasicBridge is\r\n    InitializableBridge,\r\n    Validatable,\r\n    Ownable,\r\n    Upgradeable,\r\n    Claimable,\r\n    VersionableBridge,\r\n    DecimalShiftBridge\r\n{\r\n    event GasPriceChanged(uint256 gasPrice);\r\n    event RequiredBlockConfirmationChanged(uint256 requiredBlockConfirmations);\r\n\r\n    bytes32 internal constant GAS_PRICE = 0x55b3774520b5993024893d303890baa4e84b1244a43c60034d1ced2d3cf2b04b; // keccak256(abi.encodePacked(\"gasPrice\"))\r\n    bytes32 internal constant REQUIRED_BLOCK_CONFIRMATIONS = 0x916daedf6915000ff68ced2f0b6773fe6f2582237f92c3c95bb4d79407230071; // keccak256(abi.encodePacked(\"requiredBlockConfirmations\"))\r\n\r\n    /**\r\n    * @dev Public setter for fallback gas price value. Only bridge owner can call this method.\r\n    * @param _gasPrice new value for the gas price.\r\n    */\r\n    function setGasPrice(uint256 _gasPrice) external onlyOwner {\r\n        _setGasPrice(_gasPrice);\r\n    }\r\n\r\n    function gasPrice() external view returns (uint256) {\r\n        return uintStorage[GAS_PRICE];\r\n    }\r\n\r\n    function setRequiredBlockConfirmations(uint256 _blockConfirmations) external onlyOwner {\r\n        _setRequiredBlockConfirmations(_blockConfirmations);\r\n    }\r\n\r\n    function _setRequiredBlockConfirmations(uint256 _blockConfirmations) internal {\r\n        require(_blockConfirmations > 0);\r\n        uintStorage[REQUIRED_BLOCK_CONFIRMATIONS] = _blockConfirmations;\r\n        emit RequiredBlockConfirmationChanged(_blockConfirmations);\r\n    }\r\n\r\n    function requiredBlockConfirmations() external view returns (uint256) {\r\n        return uintStorage[REQUIRED_BLOCK_CONFIRMATIONS];\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function for updating fallback gas price value.\r\n    * @param _gasPrice new value for the gas price, zero gas price is allowed.\r\n    */\r\n    function _setGasPrice(uint256 _gasPrice) internal {\r\n        uintStorage[GAS_PRICE] = _gasPrice;\r\n        emit GasPriceChanged(_gasPrice);\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BasicTokenBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\ncontract BasicTokenBridge is EternalStorage, Ownable, DecimalShiftBridge {\r\n    using SafeMath for uint256;\r\n\r\n    event DailyLimitChanged(uint256 newLimit);\r\n    event ExecutionDailyLimitChanged(uint256 newLimit);\r\n\r\n    bytes32 internal constant MIN_PER_TX = 0xbbb088c505d18e049d114c7c91f11724e69c55ad6c5397e2b929e68b41fa05d1; // keccak256(abi.encodePacked(\"minPerTx\"))\r\n    bytes32 internal constant MAX_PER_TX = 0x0f8803acad17c63ee38bf2de71e1888bc7a079a6f73658e274b08018bea4e29c; // keccak256(abi.encodePacked(\"maxPerTx\"))\r\n    bytes32 internal constant DAILY_LIMIT = 0x4a6a899679f26b73530d8cf1001e83b6f7702e04b6fdb98f3c62dc7e47e041a5; // keccak256(abi.encodePacked(\"dailyLimit\"))\r\n    bytes32 internal constant EXECUTION_MAX_PER_TX = 0xc0ed44c192c86d1cc1ba51340b032c2766b4a2b0041031de13c46dd7104888d5; // keccak256(abi.encodePacked(\"executionMaxPerTx\"))\r\n    bytes32 internal constant EXECUTION_DAILY_LIMIT = 0x21dbcab260e413c20dc13c28b7db95e2b423d1135f42bb8b7d5214a92270d237; // keccak256(abi.encodePacked(\"executionDailyLimit\"))\r\n\r\n    function totalSpentPerDay(uint256 _day) public view returns (uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"totalSpentPerDay\", _day))];\r\n    }\r\n\r\n    function totalExecutedPerDay(uint256 _day) public view returns (uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"totalExecutedPerDay\", _day))];\r\n    }\r\n\r\n    function dailyLimit() public view returns (uint256) {\r\n        return uintStorage[DAILY_LIMIT];\r\n    }\r\n\r\n    function executionDailyLimit() public view returns (uint256) {\r\n        return uintStorage[EXECUTION_DAILY_LIMIT];\r\n    }\r\n\r\n    function maxPerTx() public view returns (uint256) {\r\n        return uintStorage[MAX_PER_TX];\r\n    }\r\n\r\n    function executionMaxPerTx() public view returns (uint256) {\r\n        return uintStorage[EXECUTION_MAX_PER_TX];\r\n    }\r\n\r\n    function minPerTx() public view returns (uint256) {\r\n        return uintStorage[MIN_PER_TX];\r\n    }\r\n\r\n    function withinLimit(uint256 _amount) public view returns (bool) {\r\n        uint256 nextLimit = totalSpentPerDay(getCurrentDay()).add(_amount);\r\n        return dailyLimit() >= nextLimit && _amount <= maxPerTx() && _amount >= minPerTx();\r\n    }\r\n\r\n    function withinExecutionLimit(uint256 _amount) public view returns (bool) {\r\n        uint256 nextLimit = totalExecutedPerDay(getCurrentDay()).add(_amount);\r\n        return executionDailyLimit() >= nextLimit && _amount <= executionMaxPerTx();\r\n    }\r\n\r\n    function getCurrentDay() public view returns (uint256) {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        return now / 1 days;\r\n    }\r\n\r\n    function addTotalSpentPerDay(uint256 _day, uint256 _value) internal {\r\n        uintStorage[keccak256(abi.encodePacked(\"totalSpentPerDay\", _day))] = totalSpentPerDay(_day).add(_value);\r\n    }\r\n\r\n    function addTotalExecutedPerDay(uint256 _day, uint256 _value) internal {\r\n        uintStorage[keccak256(abi.encodePacked(\"totalExecutedPerDay\", _day))] = totalExecutedPerDay(_day).add(_value);\r\n    }\r\n\r\n    function setDailyLimit(uint256 _dailyLimit) external onlyOwner {\r\n        require(_dailyLimit > maxPerTx() || _dailyLimit == 0);\r\n        uintStorage[DAILY_LIMIT] = _dailyLimit;\r\n        emit DailyLimitChanged(_dailyLimit);\r\n    }\r\n\r\n    function setExecutionDailyLimit(uint256 _dailyLimit) external onlyOwner {\r\n        require(_dailyLimit > executionMaxPerTx() || _dailyLimit == 0);\r\n        uintStorage[EXECUTION_DAILY_LIMIT] = _dailyLimit;\r\n        emit ExecutionDailyLimitChanged(_dailyLimit);\r\n    }\r\n\r\n    function setExecutionMaxPerTx(uint256 _maxPerTx) external onlyOwner {\r\n        require(_maxPerTx < executionDailyLimit());\r\n        uintStorage[EXECUTION_MAX_PER_TX] = _maxPerTx;\r\n    }\r\n\r\n    function setMaxPerTx(uint256 _maxPerTx) external onlyOwner {\r\n        require(_maxPerTx == 0 || (_maxPerTx > minPerTx() && _maxPerTx < dailyLimit()));\r\n        uintStorage[MAX_PER_TX] = _maxPerTx;\r\n    }\r\n\r\n    function setMinPerTx(uint256 _minPerTx) external onlyOwner {\r\n        require(_minPerTx > 0 && _minPerTx < dailyLimit() && _minPerTx < maxPerTx());\r\n        uintStorage[MIN_PER_TX] = _minPerTx;\r\n    }\r\n\r\n    /**\r\n    * @dev Retrieves maximum available bridge amount per one transaction taking into account maxPerTx() and dailyLimit() parameters.\r\n    * @return minimum of maxPerTx parameter and remaining daily quota.\r\n    */\r\n    function maxAvailablePerTx() public view returns (uint256) {\r\n        uint256 _maxPerTx = maxPerTx();\r\n        uint256 _dailyLimit = dailyLimit();\r\n        uint256 _spent = totalSpentPerDay(getCurrentDay());\r\n        uint256 _remainingOutOfDaily = _dailyLimit > _spent ? _dailyLimit - _spent : 0;\r\n        return _maxPerTx < _remainingOutOfDaily ? _maxPerTx : _remainingOutOfDaily;\r\n    }\r\n\r\n    function _setLimits(uint256[3] _limits) internal {\r\n        require(\r\n            _limits[2] > 0 && // minPerTx > 0\r\n                _limits[1] > _limits[2] && // maxPerTx > minPerTx\r\n                _limits[0] > _limits[1] // dailyLimit > maxPerTx\r\n        );\r\n\r\n        uintStorage[DAILY_LIMIT] = _limits[0];\r\n        uintStorage[MAX_PER_TX] = _limits[1];\r\n        uintStorage[MIN_PER_TX] = _limits[2];\r\n\r\n        emit DailyLimitChanged(_limits[0]);\r\n    }\r\n\r\n    function _setExecutionLimits(uint256[2] _limits) internal {\r\n        require(_limits[1] < _limits[0]); // foreignMaxPerTx < foreignDailyLimit\r\n\r\n        uintStorage[EXECUTION_DAILY_LIMIT] = _limits[0];\r\n        uintStorage[EXECUTION_MAX_PER_TX] = _limits[1];\r\n\r\n        emit ExecutionDailyLimitChanged(_limits[0]);\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BasicHomeBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title BasicHomeBridge\r\n * @dev This contract implements common functionality for all vanilla bridge modes on the Home side.\r\n */\r\ncontract BasicHomeBridge is EternalStorage, Validatable, BasicBridge, BasicTokenBridge {\r\n    using SafeMath for uint256;\r\n\r\n    event UserRequestForSignature(address recipient, uint256 value);\r\n    event AffirmationCompleted(address recipient, uint256 value, bytes32 transactionHash);\r\n    event SignedForUserRequest(address indexed signer, bytes32 messageHash);\r\n    event SignedForAffirmation(address indexed signer, bytes32 transactionHash);\r\n    event CollectedSignatures(\r\n        address authorityResponsibleForRelay,\r\n        bytes32 messageHash,\r\n        uint256 NumberOfCollectedSignatures\r\n    );\r\n\r\n    /**\r\n     * @dev Executes a message affirmation for some Foreign side event.\r\n     * Can be called only by a current bridge validator.\r\n     * @param recipient tokens/coins of receiver address, where the assets should be unlocked/minted.\r\n     * @param value amount of assets to unlock/mint.\r\n     * @param transactionHash reference event transaction hash on the Foreign side of the bridge.\r\n     */\r\n    function executeAffirmation(address recipient, uint256 value, bytes32 transactionHash) external onlyValidator {\r\n        bytes32 hashMsg = keccak256(abi.encodePacked(recipient, value, transactionHash));\r\n        if (withinExecutionLimit(value)) {\r\n            bytes32 hashSender = keccak256(abi.encodePacked(msg.sender, hashMsg));\r\n            // Duplicated affirmations\r\n            require(!affirmationsSigned(hashSender));\r\n            setAffirmationsSigned(hashSender, true);\r\n\r\n            uint256 signed = numAffirmationsSigned(hashMsg);\r\n            require(!isAlreadyProcessed(signed));\r\n            // the check above assumes that the case when the value could be overflew will not happen in the addition operation below\r\n            signed = signed + 1;\r\n\r\n            setNumAffirmationsSigned(hashMsg, signed);\r\n\r\n            emit SignedForAffirmation(msg.sender, transactionHash);\r\n\r\n            if (signed >= requiredSignatures()) {\r\n                // If the bridge contract does not own enough tokens to transfer\r\n                // it will couse funds lock on the home side of the bridge\r\n                setNumAffirmationsSigned(hashMsg, markAsProcessed(signed));\r\n                if (value > 0) {\r\n                    require(onExecuteAffirmation(recipient, value, transactionHash, hashMsg));\r\n                }\r\n                emit AffirmationCompleted(recipient, value, transactionHash);\r\n            }\r\n        } else {\r\n            onFailedAffirmation(recipient, value, transactionHash, hashMsg);\r\n        }\r\n    }\r\n\r\n    function submitSignature(bytes signature, bytes message) external onlyValidator {\r\n        // ensure that `signature` is really `message` signed by `msg.sender`\r\n        require(Message.isMessageValid(message));\r\n        //require(msg.sender == Message.recoverAddressFromSignedMessage(signature, message, false));\r\n        bytes32 hashMsg = keccak256(abi.encodePacked(message));\r\n        bytes32 hashSender = keccak256(abi.encodePacked(msg.sender, hashMsg));\r\n\r\n        uint256 signed = numMessagesSigned(hashMsg);\r\n        require(!isAlreadyProcessed(signed));\r\n        // the check above assumes that the case when the value could be overflew will not happen in the addition operation below\r\n        signed = signed + 1;\r\n        if (signed > 1) {\r\n            // Duplicated signatures\r\n            require(!messagesSigned(hashSender));\r\n        } else {\r\n            setMessages(hashMsg, message);\r\n        }\r\n        setMessagesSigned(hashSender, true);\r\n\r\n        bytes32 signIdx = keccak256(abi.encodePacked(hashMsg, (signed - 1)));\r\n        setSignatures(signIdx, signature);\r\n\r\n        setNumMessagesSigned(hashMsg, signed);\r\n\r\n        emit SignedForUserRequest(msg.sender, hashMsg);\r\n\r\n        uint256 reqSigs = requiredSignatures();\r\n        if (signed >= reqSigs) {\r\n            setNumMessagesSigned(hashMsg, markAsProcessed(signed));\r\n            emit CollectedSignatures(msg.sender, hashMsg, reqSigs);\r\n\r\n            onSignaturesCollected(message);\r\n        }\r\n    }\r\n\r\n    function setMessagesSigned(bytes32 _hash, bool _status) internal {\r\n        boolStorage[keccak256(abi.encodePacked(\"messagesSigned\", _hash))] = _status;\r\n    }\r\n\r\n    /* solcov ignore next */\r\n    function onExecuteAffirmation(address, uint256, bytes32, bytes32) internal returns (bool);\r\n\r\n    /* solcov ignore next */\r\n    function onFailedAffirmation(address, uint256, bytes32, bytes32) internal;\r\n\r\n    /* solcov ignore next */\r\n    function onSignaturesCollected(bytes) internal;\r\n\r\n    function numAffirmationsSigned(bytes32 _withdrawal) public view returns (uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"numAffirmationsSigned\", _withdrawal))];\r\n    }\r\n\r\n    function setAffirmationsSigned(bytes32 _withdrawal, bool _status) internal {\r\n        boolStorage[keccak256(abi.encodePacked(\"affirmationsSigned\", _withdrawal))] = _status;\r\n    }\r\n\r\n    function setNumAffirmationsSigned(bytes32 _withdrawal, uint256 _number) internal {\r\n        uintStorage[keccak256(abi.encodePacked(\"numAffirmationsSigned\", _withdrawal))] = _number;\r\n    }\r\n\r\n    function affirmationsSigned(bytes32 _withdrawal) public view returns (bool) {\r\n        return boolStorage[keccak256(abi.encodePacked(\"affirmationsSigned\", _withdrawal))];\r\n    }\r\n\r\n    function signature(bytes32 _hash, uint256 _index) external view returns (bytes) {\r\n        bytes32 signIdx = keccak256(abi.encodePacked(_hash, _index));\r\n        return bytesStorage[keccak256(abi.encodePacked(\"signatures\", signIdx))];\r\n    }\r\n\r\n    function messagesSigned(bytes32 _message) public view returns (bool) {\r\n        return boolStorage[keccak256(abi.encodePacked(\"messagesSigned\", _message))];\r\n    }\r\n\r\n    function setSignatures(bytes32 _hash, bytes _signature) internal {\r\n        bytesStorage[keccak256(abi.encodePacked(\"signatures\", _hash))] = _signature;\r\n    }\r\n\r\n    function setMessages(bytes32 _hash, bytes _message) internal {\r\n        bytesStorage[keccak256(abi.encodePacked(\"messages\", _hash))] = _message;\r\n    }\r\n\r\n    function message(bytes32 _hash) external view returns (bytes) {\r\n        return bytesStorage[keccak256(abi.encodePacked(\"messages\", _hash))];\r\n    }\r\n\r\n    function setNumMessagesSigned(bytes32 _message, uint256 _number) internal {\r\n        uintStorage[keccak256(abi.encodePacked(\"numMessagesSigned\", _message))] = _number;\r\n    }\r\n\r\n    function markAsProcessed(uint256 _v) internal pure returns (uint256) {\r\n        return _v | (2**255);\r\n    }\r\n\r\n    function isAlreadyProcessed(uint256 _number) public pure returns (bool) {\r\n        return _number & (2**255) == 2**255;\r\n    }\r\n\r\n    function numMessagesSigned(bytes32 _message) public view returns (uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"numMessagesSigned\", _message))];\r\n    }\r\n\r\n    function requiredMessageLength() public pure returns (uint256) {\r\n        return Message.requiredMessageLength();\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/FeeTypes.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract FeeTypes {\r\n    bytes32 internal constant HOME_FEE = 0x89d93e5e92f7e37e490c25f0e50f7f4aad7cc94b308a566553280967be38bcf1; // keccak256(abi.encodePacked(\"home-fee\"))\r\n    bytes32 internal constant FOREIGN_FEE = 0xdeb7f3adca07d6d1f708c1774389db532a2b2f18fd05a62b957e4089f4696ed5; // keccak256(abi.encodePacked(\"foreign-fee\"))\r\n\r\n    /**\r\n    * @dev Throws if given fee type is unknown.\r\n    */\r\n    modifier validFeeType(bytes32 _feeType) {\r\n        require(_feeType == HOME_FEE || _feeType == FOREIGN_FEE);\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/RewardableBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title RewardableBridge\r\n * @dev Common functionality for fee management logic delegation to the separate fee management contract.\r\n */\r\ncontract RewardableBridge is Ownable, FeeTypes {\r\n    event FeeDistributedFromAffirmation(uint256 feeAmount, bytes32 indexed transactionHash);\r\n    event FeeDistributedFromSignatures(uint256 feeAmount, bytes32 indexed transactionHash);\r\n\r\n    bytes32 internal constant FEE_MANAGER_CONTRACT = 0x779a349c5bee7817f04c960f525ee3e2f2516078c38c68a3149787976ee837e5; // keccak256(abi.encodePacked(\"feeManagerContract\"))\r\n    bytes4 internal constant GET_HOME_FEE = 0x94da17cd; // getHomeFee()\r\n    bytes4 internal constant GET_FOREIGN_FEE = 0xffd66196; // getForeignFee()\r\n    bytes4 internal constant GET_FEE_MANAGER_MODE = 0xf2ba9561; // getFeeManagerMode()\r\n    bytes4 internal constant SET_HOME_FEE = 0x34a9e148; // setHomeFee(uint256)\r\n    bytes4 internal constant SET_FOREIGN_FEE = 0x286c4066; // setForeignFee(uint256)\r\n    bytes4 internal constant CALCULATE_FEE = 0x9862f26f; // calculateFee(uint256,bool,bytes32)\r\n    bytes4 internal constant DISTRIBUTE_FEE_FROM_SIGNATURES = 0x59d78464; // distributeFeeFromSignatures(uint256)\r\n    bytes4 internal constant DISTRIBUTE_FEE_FROM_AFFIRMATION = 0x054d46ec; // distributeFeeFromAffirmation(uint256)\r\n\r\n    /**\r\n     * @dev Internal function for reading the fee value from the fee manager.\r\n     * @param _feeType type of the fee, should be either HOME_FEE of FOREIGN_FEE.\r\n     * @return retrieved fee percentage.\r\n     */\r\n    function _getFee(bytes32 _feeType) internal view validFeeType(_feeType) returns (uint256 fee) {\r\n        address feeManager = feeManagerContract();\r\n        bytes4 method = _feeType == HOME_FEE ? GET_HOME_FEE : GET_FOREIGN_FEE;\r\n        bytes memory callData = abi.encodeWithSelector(method);\r\n\r\n        assembly {\r\n            let result := callcode(gas, feeManager, 0x0, add(callData, 0x20), mload(callData), 0, 32)\r\n\r\n            if and(eq(returndatasize, 32), result) {\r\n                fee := mload(0)\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the mode of the used fee manager.\r\n     * @return manager mode identifier, or zero bytes otherwise.\r\n     */\r\n    function getFeeManagerMode() external view returns (bytes4 mode) {\r\n        bytes memory callData = abi.encodeWithSelector(GET_FEE_MANAGER_MODE);\r\n        address feeManager = feeManagerContract();\r\n        assembly {\r\n            let result := callcode(gas, feeManager, 0x0, add(callData, 0x20), mload(callData), 0, 4)\r\n\r\n            if and(eq(returndatasize, 32), result) {\r\n                mode := mload(0)\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the address of the fee manager contract used.\r\n     * @return address of the fee manager contract.\r\n     */\r\n    function feeManagerContract() public view returns (address) {\r\n        return addressStorage[FEE_MANAGER_CONTRACT];\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the address of the used fee manager contract.\r\n     * Only contract owner can call this method.\r\n     * If during this operation, home fee is changed, it is highly recommended to stop the bridge operations first.\r\n     * Otherwise, pending signature requests can become a reason for imbalance between two bridge sides.\r\n     * @param _feeManager address of the new fee manager contract, or zero address to disable fee collection.\r\n     */\r\n    function setFeeManagerContract(address _feeManager) external onlyOwner {\r\n        require(_feeManager == address(0) || AddressUtils.isContract(_feeManager));\r\n        addressStorage[FEE_MANAGER_CONTRACT] = _feeManager;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for setting the fee value by using the fee manager.\r\n     * @param _feeManager address of the fee manager contract.\r\n     * @param _fee new value for fee percentage amount.\r\n     * @param _feeType type of the fee, should be either HOME_FEE of FOREIGN_FEE.\r\n     */\r\n    function _setFee(address _feeManager, uint256 _fee, bytes32 _feeType) internal validFeeType(_feeType) {\r\n        bytes4 method = _feeType == HOME_FEE ? SET_HOME_FEE : SET_FOREIGN_FEE;\r\n        require(_feeManager.delegatecall(abi.encodeWithSelector(method, _fee)));\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the exact fee amount by using the fee manager.\r\n     * @param _value transferred value for which fee should be calculated.\r\n     * @param _recover true, if the fee was already subtracted from the given _value and needs to be restored.\r\n     * @param _impl address of the fee manager contract.\r\n     * @param _feeType type of the fee, should be either HOME_FEE of FOREIGN_FEE.\r\n     * @return calculated fee amount.\r\n     */\r\n    function calculateFee(uint256 _value, bool _recover, address _impl, bytes32 _feeType)\r\n        internal\r\n        view\r\n        returns (uint256 fee)\r\n    {\r\n        bytes memory callData = abi.encodeWithSelector(CALCULATE_FEE, _value, _recover, _feeType);\r\n        assembly {\r\n            let result := callcode(gas, _impl, 0x0, add(callData, 0x20), mload(callData), 0, 32)\r\n\r\n            switch and(eq(returndatasize, 32), result)\r\n                case 1 {\r\n                    fee := mload(0)\r\n                }\r\n                default {\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for distributing the fee for collecting sufficient amount of signatures.\r\n     * @param _fee amount of fee to distribute.\r\n     * @param _feeManager address of the fee manager contract.\r\n     * @param _txHash reference transaction hash where the original bridge request happened.\r\n     */\r\n    function distributeFeeFromSignatures(uint256 _fee, address _feeManager, bytes32 _txHash) internal {\r\n        if (_fee > 0) {\r\n            require(_feeManager.delegatecall(abi.encodeWithSelector(DISTRIBUTE_FEE_FROM_SIGNATURES, _fee)));\r\n            emit FeeDistributedFromSignatures(_fee, _txHash);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for distributing the fee for collecting sufficient amount of affirmations.\r\n     * @param _fee amount of fee to distribute.\r\n     * @param _feeManager address of the fee manager contract.\r\n     * @param _txHash reference transaction hash where the original bridge request happened.\r\n     */\r\n    function distributeFeeFromAffirmation(uint256 _fee, address _feeManager, bytes32 _txHash) internal {\r\n        if (_fee > 0) {\r\n            require(_feeManager.delegatecall(abi.encodeWithSelector(DISTRIBUTE_FEE_FROM_AFFIRMATION, _fee)));\r\n            emit FeeDistributedFromAffirmation(_fee, _txHash);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/native_to_erc20/RewardableHomeBridgeNativeToErc.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract RewardableHomeBridgeNativeToErc is RewardableBridge {\r\n    /**\r\n     * @dev Updates the fee percentage for home->foreign bridge operations.\r\n     * Only owner is allowed to call this method.\r\n     * If during this operation, home fee is changed, it is highly recommended to stop the bridge operations first.\r\n     * Otherwise, pending signature requests can become a reason for imbalance between two bridge sides.\r\n     * @param _fee new value for fee percentage.\r\n     */\r\n    function setHomeFee(uint256 _fee) external onlyOwner {\r\n        _setFee(feeManagerContract(), _fee, HOME_FEE);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the fee percentage for foreign->home bridge operations.\r\n     * Only owner is allowed to call this method.\r\n     * @param _fee new value for fee percentage.\r\n     */\r\n    function setForeignFee(uint256 _fee) external onlyOwner {\r\n        _setFee(feeManagerContract(), _fee, FOREIGN_FEE);\r\n    }\r\n\r\n    function getForeignFee() public view returns (uint256) {\r\n        return _getFee(FOREIGN_FEE);\r\n    }\r\n\r\n    function getHomeFee() public view returns (uint256) {\r\n        return _getFee(HOME_FEE);\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/native_to_erc20/HomeBridgeNativeToErc.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title HomeBridgeNativeToErc\r\n * @dev This contract Home side logic for the native-to-erc vanilla bridge mode.\r\n * It is designed to be used as an implementation contract of EternalStorageProxy contract.\r\n */\r\ncontract HomeBridgeNativeToErc is EternalStorage, BasicHomeBridge, RewardableHomeBridgeNativeToErc {\r\n    function() public payable {\r\n        require(msg.data.length == 0);\r\n        nativeTransfer(msg.sender);\r\n    }\r\n\r\n    function nativeTransfer(address _receiver) internal {\r\n        require(msg.value > 0);\r\n        require(withinLimit(msg.value));\r\n        addTotalSpentPerDay(getCurrentDay(), msg.value);\r\n        uint256 valueToTransfer = msg.value;\r\n        address feeManager = feeManagerContract();\r\n        if (feeManager != address(0)) {\r\n            uint256 fee = calculateFee(valueToTransfer, false, feeManager, HOME_FEE);\r\n            valueToTransfer = valueToTransfer.sub(fee);\r\n        }\r\n        emit UserRequestForSignature(_receiver, valueToTransfer);\r\n    }\r\n\r\n    function relayTokens(address _receiver) external payable {\r\n        nativeTransfer(_receiver);\r\n    }\r\n\r\n    function initialize(\r\n        address _validatorContract,\r\n        uint256[3] _dailyLimitMaxPerTxMinPerTxArray, // [ 0 = _dailyLimit, 1 = _maxPerTx, 2 = _minPerTx ]\r\n        uint256 _homeGasPrice,\r\n        uint256 _requiredBlockConfirmations,\r\n        uint256[2] _foreignDailyLimitForeignMaxPerTxArray, // [ 0 = _foreignDailyLimit, 1 = _foreignMaxPerTx ]\r\n        address _owner,\r\n        int256 _decimalShift\r\n    ) external onlyRelevantSender returns (bool) {\r\n        _initialize(\r\n            _validatorContract,\r\n            _dailyLimitMaxPerTxMinPerTxArray,\r\n            _homeGasPrice,\r\n            _requiredBlockConfirmations,\r\n            _foreignDailyLimitForeignMaxPerTxArray,\r\n            _owner,\r\n            _decimalShift\r\n        );\r\n        setInitialize();\r\n        return isInitialized();\r\n    }\r\n\r\n    function rewardableInitialize(\r\n        address _validatorContract,\r\n        uint256[3] _dailyLimitMaxPerTxMinPerTxArray, // [ 0 = _dailyLimit, 1 = _maxPerTx, 2 = _minPerTx ]\r\n        uint256 _homeGasPrice,\r\n        uint256 _requiredBlockConfirmations,\r\n        uint256[2] _foreignDailyLimitForeignMaxPerTxArray, // [ 0 = _foreignDailyLimit, 1 = _foreignMaxPerTx ]\r\n        address _owner,\r\n        address _feeManager,\r\n        uint256[2] _homeFeeForeignFeeArray, // [ 0 = _homeFee, 1 = _foreignFee ]\r\n        int256 _decimalShift\r\n    ) external onlyRelevantSender returns (bool) {\r\n        _initialize(\r\n            _validatorContract,\r\n            _dailyLimitMaxPerTxMinPerTxArray,\r\n            _homeGasPrice,\r\n            _requiredBlockConfirmations,\r\n            _foreignDailyLimitForeignMaxPerTxArray,\r\n            _owner,\r\n            _decimalShift\r\n        );\r\n        require(AddressUtils.isContract(_feeManager));\r\n        addressStorage[FEE_MANAGER_CONTRACT] = _feeManager;\r\n        _setFee(_feeManager, _homeFeeForeignFeeArray[0], HOME_FEE);\r\n        _setFee(_feeManager, _homeFeeForeignFeeArray[1], FOREIGN_FEE);\r\n        setInitialize();\r\n        return isInitialized();\r\n    }\r\n\r\n    function getBridgeMode() external pure returns (bytes4 _data) {\r\n        return 0x92a8d7fe; // bytes4(keccak256(abi.encodePacked(\"native-to-erc-core\")))\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to transfer any locked token on this contract that is not part of the bridge operations.\r\n    * Native tokens are not allowed to be claimed.\r\n    * @param _token address of the token.\r\n    * @param _to address that will receive the locked tokens on this contract.\r\n    */\r\n    function claimTokens(address _token, address _to) external onlyIfUpgradeabilityOwner {\r\n        // Since bridged coins are locked at this contract, it is not allowed to claim them with the use of claimTokens function\r\n        require(_token != address(0));\r\n        claimValues(_token, _to);\r\n    }\r\n\r\n    function _initialize(\r\n        address _validatorContract,\r\n        uint256[3] _dailyLimitMaxPerTxMinPerTxArray, // [ 0 = _dailyLimit, 1 = _maxPerTx, 2 = _minPerTx ]\r\n        uint256 _homeGasPrice,\r\n        uint256 _requiredBlockConfirmations,\r\n        uint256[2] _foreignDailyLimitForeignMaxPerTxArray, // [ 0 = _foreignDailyLimit, 1 = _foreignMaxPerTx ]\r\n        address _owner,\r\n        int256 _decimalShift\r\n    ) internal {\r\n        require(!isInitialized());\r\n        require(AddressUtils.isContract(_validatorContract));\r\n\r\n        addressStorage[VALIDATOR_CONTRACT] = _validatorContract;\r\n        uintStorage[DEPLOYED_AT_BLOCK] = block.number;\r\n        _setLimits(_dailyLimitMaxPerTxMinPerTxArray);\r\n        _setGasPrice(_homeGasPrice);\r\n        _setRequiredBlockConfirmations(_requiredBlockConfirmations);\r\n        _setExecutionLimits(_foreignDailyLimitForeignMaxPerTxArray);\r\n        _setDecimalShift(_decimalShift);\r\n        _setOwner(_owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to be called when enough signatures are collected.\r\n     * Distributed the fee for collecting signatures.\r\n     * @param _message encoded message signed by the validators.\r\n     */\r\n    function onSignaturesCollected(bytes _message) internal {\r\n        address feeManager = feeManagerContract();\r\n        if (feeManager != address(0)) {\r\n            (, uint256 amount, bytes32 txHash, ) = Message.parseMessage(_message);\r\n            uint256 fee = calculateFee(amount, true, feeManager, HOME_FEE);\r\n            distributeFeeFromSignatures(fee, feeManager, txHash);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal callback to be called on successfull message execution.\r\n     * Should be called only after enough affirmations from the validators are already collected.\r\n     * @param _recipient address of the receiver where the new coins should be unlocked.\r\n     * @param _value amount of coins to unlock.\r\n     * @param _txHash reference transaction hash on the Foreign side of the bridge which cause this operation.\r\n     * @param _hashMsg unique identifier of the particular bridge operation.\r\n     * Not used in this bridge mode, but required for interface unification with other bridge modes.\r\n     * @return true, if execution completed successfully.\r\n     */\r\n    function onExecuteAffirmation(address _recipient, uint256 _value, bytes32 _txHash, bytes32 _hashMsg)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        addTotalExecutedPerDay(getCurrentDay(), _value);\r\n        uint256 valueToTransfer = _shiftValue(_value);\r\n\r\n        address feeManager = feeManagerContract();\r\n        if (feeManager != address(0)) {\r\n            uint256 fee = calculateFee(valueToTransfer, false, feeManager, FOREIGN_FEE);\r\n            distributeFeeFromAffirmation(fee, feeManager, _txHash);\r\n            valueToTransfer = valueToTransfer.sub(fee);\r\n        }\r\n\r\n        Address.safeSendValue(_recipient, valueToTransfer);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal callback to be called on failed message execution due to the out-of-limits error.\r\n     * This function saves the bridge operation information for further processing.\r\n     * @param _recipient address of the receiver where the new coins should be unlocked.\r\n     * @param _value amount of coins to unlock.\r\n     * @param _txHash reference transaction hash on the Foreign side of the bridge which cause this operation.\r\n     * @param _hashMsg unique identifier of the particular bridge operation.\r\n     */\r\n    function onFailedAffirmation(address _recipient, uint256 _value, bytes32 _txHash, bytes32 _hashMsg) internal {\r\n        // solhint-disable-previous-line no-unused-vars\r\n        revert();\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function for updating fallback gas price value.\r\n    * @param _gasPrice new value for the gas price, zero gas price is not allowed.\r\n    */\r\n    function _setGasPrice(uint256 _gasPrice) internal {\r\n        require(_gasPrice > 0);\r\n        super._setGasPrice(_gasPrice);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_message\",\"type\":\"bytes32\"}],\"name\":\"numMessagesSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"signature\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_validatorContract\",\"type\":\"address\"},{\"name\":\"_dailyLimitMaxPerTxMinPerTxArray\",\"type\":\"uint256[3]\"},{\"name\":\"_homeGasPrice\",\"type\":\"uint256\"},{\"name\":\"_requiredBlockConfirmations\",\"type\":\"uint256\"},{\"name\":\"_foreignDailyLimitForeignMaxPerTxArray\",\"type\":\"uint256[2]\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_feeManager\",\"type\":\"address\"},{\"name\":\"_homeFeeForeignFeeArray\",\"type\":\"uint256[2]\"},{\"name\":\"_decimalShift\",\"type\":\"int256\"}],\"name\":\"rewardableInitialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setForeignFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"totalSpentPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_validatorContract\",\"type\":\"address\"},{\"name\":\"_dailyLimitMaxPerTxMinPerTxArray\",\"type\":\"uint256[3]\"},{\"name\":\"_homeGasPrice\",\"type\":\"uint256\"},{\"name\":\"_requiredBlockConfirmations\",\"type\":\"uint256\"},{\"name\":\"_foreignDailyLimitForeignMaxPerTxArray\",\"type\":\"uint256[2]\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_decimalShift\",\"type\":\"int256\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setHomeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dailyLimit\",\"type\":\"uint256\"}],\"name\":\"setExecutionDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredBlockConfirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredMessageLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeMode\",\"outputs\":[{\"name\":\"_data\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"executionDailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"message\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"totalExecutedPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"relayTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeManager\",\"type\":\"address\"}],\"name\":\"setFeeManagerContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"signature\",\"type\":\"bytes\"},{\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"submitSignature\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_withdrawal\",\"type\":\"bytes32\"}],\"name\":\"numAffirmationsSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_withdrawal\",\"type\":\"bytes32\"}],\"name\":\"affirmationsSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withinExecutionLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"executionMaxPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredSignatures\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_message\",\"type\":\"bytes32\"}],\"name\":\"messagesSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHomeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAvailablePerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validatorContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"executeAffirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployedAtBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeInterfacesVersion\",\"outputs\":[{\"name\":\"major\",\"type\":\"uint64\"},{\"name\":\"minor\",\"type\":\"uint64\"},{\"name\":\"patch\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPerTx\",\"type\":\"uint256\"}],\"name\":\"setMinPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockConfirmations\",\"type\":\"uint256\"}],\"name\":\"setRequiredBlockConfirmations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dailyLimit\",\"type\":\"uint256\"}],\"name\":\"setDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPerTx\",\"type\":\"uint256\"}],\"name\":\"setMaxPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalShift\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeManagerContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withinLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPerTx\",\"type\":\"uint256\"}],\"name\":\"setExecutionMaxPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFeeManagerMode\",\"outputs\":[{\"name\":\"mode\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"isAlreadyProcessed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getForeignFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"FeeDistributedFromAffirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"FeeDistributedFromSignatures\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UserRequestForSignature\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"AffirmationCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"SignedForUserRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"SignedForAffirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"authorityResponsibleForRelay\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"NumberOfCollectedSignatures\",\"type\":\"uint256\"}],\"name\":\"CollectedSignatures\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"DailyLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"ExecutionDailyLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"GasPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requiredBlockConfirmations\",\"type\":\"uint256\"}],\"name\":\"RequiredBlockConfirmationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HomeBridgeNativeToErc","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://37174af5e0f2ecae454f6966d9efcf31df193c4b4d638f9221415c32cd009f2d"}]}