{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n\r\ncontract RewardPoolDelegationStorage {\r\n    // The FILST token address\r\n    address public filstAddress;\r\n\r\n    // The eFIL token address\r\n    address public efilAddress;\r\n\r\n    /**\r\n    * @notice Administrator for this contract\r\n    */\r\n    address public admin;\r\n\r\n    /**\r\n    * @notice Pending administrator for this contract\r\n    */\r\n    address public pendingAdmin;\r\n\r\n    /**\r\n    * @notice Active implementation\r\n    */\r\n    address public implementation;\r\n\r\n    /**\r\n    * @notice Pending implementation\r\n    */\r\n    address public pendingImplementation;\r\n}\r\n\r\ninterface IRewardCalculator {\r\n    function calculate(uint filstAmount, uint fromBlockNumber) external view returns (uint);\r\n}\r\n\r\ninterface IRewardStrategy {\r\n    // returns allocated result\r\n    function allocate(address staking, uint rewardAmount) external view returns (uint stakingPart, address[] memory others, uint[] memory othersParts);\r\n}\r\n\r\ninterface IFilstManagement {\r\n    function getTotalMintedAmount() external view returns (uint);\r\n    function getMintedAmount(string calldata miner) external view returns (uint);\r\n}\r\n\r\ncontract RewardPoolStorage is RewardPoolDelegationStorage {\r\n    // The IFilstManagement\r\n    IFilstManagement public management;\r\n\r\n    // The IRewardStrategy\r\n    IRewardStrategy public strategy;\r\n\r\n    // The IRewardCalculator contract\r\n    IRewardCalculator public calculator;\r\n\r\n    // The address of FILST Staking contract\r\n    address public staking;\r\n\r\n    // The last accrued block number\r\n    uint public accrualBlockNumber;\r\n\r\n    // The accrued reward for each participant\r\n    mapping(address => uint) public accruedRewards;\r\n\r\n    struct Debt {\r\n        // accrued index of debts \r\n        uint accruedIndex;\r\n\r\n        // accrued debts\r\n        uint accruedAmount;\r\n\r\n        // The last time the miner repay debts\r\n        uint lastRepaymentBlock;\r\n    }\r\n\r\n    // The last accrued index of debts\r\n    uint public debtAccruedIndex;\r\n\r\n    // The accrued debts for each miner\r\n    // minerId -> Debt\r\n    mapping(string => Debt) public minerDebts;\r\n}\r\n\r\ncontract RewardPoolDelegator is RewardPoolDelegationStorage {\r\n    /**\r\n      * @notice Emitted when pendingImplementation is changed\r\n      */\r\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\r\n\r\n    /**\r\n      * @notice Emitted when pendingImplementation is accepted, which means implementation is updated\r\n      */\r\n    event NewImplementation(address oldImplementation, address newImplementation);\r\n\r\n    /**\r\n      * @notice Emitted when pendingAdmin is changed\r\n      */\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n    /**\r\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\r\n      */\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n\r\n    constructor(address filstAddress_, address efilAddress_) public {\r\n        filstAddress = filstAddress_;\r\n        efilAddress = efilAddress_;\r\n\r\n        // Set admin to caller\r\n        admin = msg.sender;\r\n    }\r\n\r\n    /*** Admin Functions ***/\r\n    function _setPendingImplementation(address newPendingImplementation) external {\r\n        require(msg.sender == admin, \"admin check\");\r\n\r\n        address oldPendingImplementation = pendingImplementation;\r\n        pendingImplementation = newPendingImplementation;\r\n\r\n        emit NewPendingImplementation(oldPendingImplementation, pendingImplementation);\r\n    }\r\n\r\n    /**\r\n    * @notice Accepts new implementation. msg.sender must be pendingImplementation\r\n    * @dev Admin function for new implementation to accept it's role as implementation\r\n    */\r\n    function _acceptImplementation() external {\r\n        // Check caller is pendingImplementation and pendingImplementation ≠ address(0)\r\n        require(msg.sender == pendingImplementation && pendingImplementation != address(0), \"pendingImplementation check\");\r\n\r\n        // Save current values for inclusion in log\r\n        address oldImplementation = implementation;\r\n        address oldPendingImplementation = pendingImplementation;\r\n\r\n        implementation = pendingImplementation;\r\n        pendingImplementation = address(0);\r\n\r\n        emit NewImplementation(oldImplementation, implementation);\r\n        emit NewPendingImplementation(oldPendingImplementation, pendingImplementation);\r\n    }\r\n\r\n    /**\r\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @param newPendingAdmin New pending admin.\r\n      */\r\n    function _setPendingAdmin(address newPendingAdmin) external {\r\n        require(msg.sender == admin, \"admin check\");\r\n\r\n        // Save current value, if any, for inclusion in log\r\n        address oldPendingAdmin = pendingAdmin;\r\n        // Store pendingAdmin with value newPendingAdmin\r\n        pendingAdmin = newPendingAdmin;\r\n\r\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\r\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n    }\r\n\r\n    /**\r\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\r\n      * @dev Admin function for pending admin to accept role and update admin\r\n      */\r\n    function _acceptAdmin() external {\r\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\r\n        require(msg.sender == pendingAdmin && pendingAdmin != address(0), \"pendingAdmin check\");\r\n\r\n        // Save current values for inclusion in log\r\n        address oldAdmin = admin;\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store admin with value pendingAdmin\r\n        admin = pendingAdmin;\r\n        // Clear the pending value\r\n        pendingAdmin = address(0);\r\n\r\n        emit NewAdmin(oldAdmin, admin);\r\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Delegates execution to an implementation contract.\r\n     * It returns to the external caller whatever the implementation returns\r\n     * or forwards reverts.\r\n     */\r\n    function () payable external {\r\n        // delegate all other functions to current implementation\r\n        (bool success, ) = implementation.delegatecall(msg.data);\r\n\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n              let free_mem_ptr := mload(0x40)\r\n              returndatacopy(free_mem_ptr, 0, returndatasize)\r\n\r\n              switch success\r\n              case 0 { revert(free_mem_ptr, returndatasize) }\r\n              default { return(free_mem_ptr, returndatasize) }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"filstAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"efilAddress_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingImplementation\",\"type\":\"address\"}],\"name\":\"NewPendingImplementation\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingImplementation\",\"type\":\"address\"}],\"name\":\"_setPendingImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"efilAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"filstAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RewardPoolDelegator","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007346ad4c8cd1886ff6d16072bcea5dfc0bc24ca200000000000000000000000022b475f3e93390b7e523873ad7073337f4e56c2c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e9a938b7e97114cbeadd44a0ddc75cb89932fabaecd3c3b4c2c111ec0918c598"}]}