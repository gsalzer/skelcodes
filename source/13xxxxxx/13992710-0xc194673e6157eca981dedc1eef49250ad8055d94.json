{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of src/AaveDirectJob.sol\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity =0.8.9 >=0.8.0;\r\n\r\n////// src/interfaces/IJob.sol\r\n// Copyright (C) 2021 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity >=0.8.0; */\r\n\r\n/// @title Maker Keeper Network Job\r\n/// @notice A job represents an independant unit of work that can be done by a keeper\r\ninterface IJob {\r\n\r\n    /// @notice Executes this unit of work\r\n    /// @dev Should revert iff workable() returns canWork of false\r\n    /// @param network The name of the external keeper network\r\n    /// @param args Custom arguments supplied to the job, should be copied from workable response\r\n    function work(bytes32 network, bytes calldata args) external;\r\n\r\n    /// @notice Ask this job if it has a unit of work available\r\n    /// @dev This should never revert, only return false if nothing is available\r\n    /// @dev This should normally be a view, but sometimes that's not possible\r\n    /// @param network The name of the external keeper network\r\n    /// @return canWork Returns true if a unit of work is available\r\n    /// @return args The custom arguments to be provided to work() or an error string if canWork is false\r\n    function workable(bytes32 network) external returns (bool canWork, bytes memory args);\r\n\r\n}\r\n\r\n////// src/AaveDirectJob.sol\r\n// Copyright (C) 2021 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity 0.8.9; */\r\n\r\n/* import {IJob} from \"./interfaces/IJob.sol\"; */\r\n\r\ninterface SequencerLike_1 {\r\n    function isMaster(bytes32 network) external view returns (bool);\r\n}\r\n\r\ninterface VatLike_1 {\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n}\r\n\r\ninterface DirectLike {\r\n    function vat() external view returns (address);\r\n    function pool() external view returns (address);\r\n    function dai() external view returns (address);\r\n    function adai() external view returns (address);\r\n    function stableDebt() external view returns (address);\r\n    function variableDebt() external view returns (address);\r\n    function bar() external view returns (uint256);\r\n    function ilk() external view returns (bytes32);\r\n    function exec() external;\r\n}\r\n\r\ninterface LendingPoolLike_1 {\r\n    function getReserveData(address asset) external view returns (\r\n        uint256,    // Configuration\r\n        uint128,    // the liquidity index. Expressed in ray\r\n        uint128,    // variable borrow index. Expressed in ray\r\n        uint128,    // the current supply rate. Expressed in ray\r\n        uint128,    // the current variable borrow rate. Expressed in ray\r\n        uint128,    // the current stable borrow rate. Expressed in ray\r\n        uint40,\r\n        address,    // address of the adai interest bearing token\r\n        address,    // address of the stable debt token\r\n        address,    // address of the variable debt token\r\n        address,    // address of the interest rate strategy\r\n        uint8\r\n    );\r\n}\r\n\r\n/// @title Trigger Aave D3M updates based on threshold\r\ncontract AaveDirectJob is IJob {\r\n\r\n    uint256 constant internal RAY = 10 ** 27;\r\n    \r\n    SequencerLike_1 public immutable sequencer;\r\n    DirectLike public immutable direct;\r\n    VatLike_1 public immutable vat;\r\n    address public immutable dai;\r\n    bytes32 public immutable ilk;\r\n    LendingPoolLike_1 public immutable pool;\r\n    uint256 public immutable threshold;         // Threshold deviation to kick off exec [RAY units]\r\n\r\n    // --- Errors ---\r\n    error NotMaster(bytes32 network);\r\n    error OutsideThreshold();\r\n\r\n    constructor(address _sequencer, address _direct, uint256 _threshold) {\r\n        sequencer = SequencerLike_1(_sequencer);\r\n        direct = DirectLike(_direct);\r\n        vat = VatLike_1(direct.vat());\r\n        dai = direct.dai();\r\n        ilk = direct.ilk();\r\n        pool = LendingPoolLike_1(direct.pool());\r\n        threshold = _threshold;\r\n    }\r\n\r\n    function isOutsideThreshold() internal view returns (bool) {\r\n        // IMPORTANT: this function assumes Vat rate of this ilk will always be == 1 * RAY (no fees).\r\n        // That's why this module converts normalized debt (art) to Vat DAI generated with a simple RAY multiplication or division\r\n        // This module will have an unintended behaviour if rate is changed to some other value.\r\n\r\n        (, uint256 daiDebt) = vat.urns(ilk, address(direct));\r\n        uint256 _bar = direct.bar();\r\n        if (_bar == 0) {\r\n            return daiDebt > 1;     // Always attempt to close out if we have debt remaining\r\n        }\r\n\r\n        (,,,, uint256 currVarBorrow,,,,,,,) = pool.getReserveData(dai);\r\n\r\n        uint256 deviation = currVarBorrow * RAY / _bar;\r\n        if (deviation < RAY) {\r\n            // Unwind case\r\n            return daiDebt > 1 && (RAY - deviation) > threshold;\r\n        } else if (deviation > RAY) {\r\n            // Wind case\r\n            (,,, uint256 line,) = vat.ilks(ilk);\r\n            return (daiDebt + 1)*RAY < line && (deviation - RAY) > threshold;\r\n        } else {\r\n            // No change\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function work(bytes32 network, bytes calldata) external override {\r\n        if (!sequencer.isMaster(network)) revert NotMaster(network);\r\n        if (!isOutsideThreshold()) revert OutsideThreshold();\r\n\r\n        direct.exec();\r\n    }\r\n\r\n    function workable(bytes32 network) external view override returns (bool, bytes memory) {\r\n        if (!sequencer.isMaster(network)) return (false, bytes(\"Network is not master\"));\r\n        if (!isOutsideThreshold()) return (false, bytes(\"Interest rate is in acceptable range\"));\r\n\r\n        return (true, \"\");\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_direct\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"network\",\"type\":\"bytes32\"}],\"name\":\"NotMaster\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutsideThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"direct\",\"outputs\":[{\"internalType\":\"contract DirectLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ilk\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract LendingPoolLike_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencer\",\"outputs\":[{\"internalType\":\"contract SequencerLike_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatLike_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"network\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"work\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"network\",\"type\":\"bytes32\"}],\"name\":\"workable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AaveDirectJob","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009566eb72e47e3e20643c0b1dfbee04da5c7e4732000000000000000000000000a13c0c8eb109f5a13c6c90fc26afb23beb3fb04a0000000000000000000000000000000000000000000422ca8b0a00a425000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ddddb315c3029685484aef1c648e8e41780469f4b7f394ace077501a64d82434"}]}