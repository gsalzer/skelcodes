{"status":"1","message":"OK","result":[{"SourceCode":"// File contracts/interfaces/IERC20.sol\r\n\r\n// SPDX-License-Identifier: AGPL-3.0\r\npragma solidity >=0.7.5;\r\n\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libraries/SafeERC20.sol\r\n\r\npragma solidity >=0.7.5;\r\n\r\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\r\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\r\n/// Taken from Solmate\r\nlibrary SafeERC20 {\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\r\n        );\r\n\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FROM_FAILED\");\r\n    }\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\r\n        );\r\n\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FAILED\");\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\r\n        );\r\n\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"APPROVE_FAILED\");\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 amount) internal {\r\n        (bool success, ) = to.call{value: amount}(new bytes(0));\r\n\r\n        require(success, \"ETH_TRANSFER_FAILED\");\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ITreasury.sol\r\n\r\npragma solidity >=0.7.5;\r\n\r\ninterface ITreasury {\r\n    function deposit(\r\n        uint256 _amount,\r\n        address _token,\r\n        uint256 _profit\r\n    ) external returns (uint256);\r\n\r\n    function withdraw(uint256 _amount, address _token) external;\r\n\r\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\r\n\r\n    function mint(address _recipient, uint256 _amount) external;\r\n\r\n    function manage(address _token, uint256 _amount) external;\r\n\r\n    function incurDebt(uint256 amount_, address token_) external;\r\n\r\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\r\n\r\n    function excessReserves() external view returns (uint256);\r\n\r\n    function baseSupply() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IOlympusAuthority.sol\r\n\r\npragma solidity >=0.7.5;\r\n\r\ninterface IOlympusAuthority {\r\n    /* ========== EVENTS ========== */\r\n\r\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n\r\n    event GovernorPulled(address indexed from, address indexed to);\r\n    event GuardianPulled(address indexed from, address indexed to);\r\n    event PolicyPulled(address indexed from, address indexed to);\r\n    event VaultPulled(address indexed from, address indexed to);\r\n\r\n    /* ========== VIEW ========== */\r\n\r\n    function governor() external view returns (address);\r\n\r\n    function guardian() external view returns (address);\r\n\r\n    function policy() external view returns (address);\r\n\r\n    function vault() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/types/OlympusAccessControlled.sol\r\n\r\npragma solidity >=0.7.5;\r\n\r\nabstract contract OlympusAccessControlled {\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event AuthorityUpdated(IOlympusAuthority indexed authority);\r\n\r\n    string UNAUTHORIZED = \"UNAUTHORIZED\"; // save gas\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    IOlympusAuthority public authority;\r\n\r\n\r\n    /* ========== Constructor ========== */\r\n\r\n    constructor(IOlympusAuthority _authority) {\r\n        authority = _authority;\r\n        emit AuthorityUpdated(_authority);\r\n    }\r\n    \r\n\r\n    /* ========== MODIFIERS ========== */\r\n    \r\n    modifier onlyGovernor() {\r\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyGuardian() {\r\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyPolicy() {\r\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n\r\n    modifier onlyVault() {\r\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n    \r\n    /* ========== GOV ONLY ========== */\r\n    \r\n    function setAuthority(IOlympusAuthority _newAuthority) external onlyGovernor {\r\n        authority = _newAuthority;\r\n        emit AuthorityUpdated(_newAuthority);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/allocators/MetaGovernanceAllocator.sol\r\n\r\npragma solidity ^0.8.10;\r\n\r\n\r\ninterface IStaking {\r\n    function stake( uint _amount, address _recipient ) external returns ( bool );\r\n    function unstake( uint _amount, bool _trigger ) external;\r\n    function claim ( address _recipient ) external;\r\n}\r\n\r\n/// @title   Meta Governance Allocator\r\n/// @author  Olympus\r\n/// @notice  Manages BTRFLY or LOBI from treasury to stake back to treasury\r\ncontract MetaGovernanceAllocator is OlympusAccessControlled {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Olympus Treasury\r\n    ITreasury internal treasury = ITreasury(0x9A315BdF513367C0377FB36545857d12e85813Ef);\r\n    /// @notice BTRFLY token address\r\n    address internal immutable BTRFLY = 0xC0d4Ceb216B3BA9C3701B291766fDCbA977ceC3A;\r\n    /// @notice Staked BTRFLY token address\r\n    address internal immutable xBTRFLY = 0xCC94Faf235cC5D3Bf4bEd3a30db5984306c86aBC;\r\n    /// @notice Redacted staking contract\r\n    address internal immutable redactedStaking = 0xBdE4Dfb0dbb0Dd8833eFb6C5BD0Ce048C852C487;\r\n    /// @notice LOBI token address\r\n    address internal immutable LOBI = 0xDEc41Db0c33F3F6f3cb615449C311ba22D418A8d;\r\n    /// @notice Staked LOBI token address\r\n    address internal immutable sLOBI = 0x8Ab17e2cd4F894F8641A31f99F673a5762F53c8e;\r\n    /// @notice LOBI Staking contract\r\n    address internal immutable lobiStaking = 0x3818eff63418e0a0BA3980ABA5fF388b029b6d90;\r\n\r\n    /// CONSTRUCTOR ///\r\n\r\n    ///  @param _authority  Address of the Olympus Authority contract\r\n    constructor(IOlympusAuthority _authority) OlympusAccessControlled(_authority) {}\r\n\r\n    /// POLICY FUNCTIONS ///\r\n\r\n    /// @notice  If vault has been updated through authority contract update treasury address\r\n    function updateTreasury() external onlyGuardian {\r\n        require(authority.vault() != address(0), \"Zero address: Vault\");\r\n        require(address(authority.vault()) != address(treasury), \"No change\");\r\n        treasury = ITreasury(authority.vault());\r\n    }\r\n\r\n    /// @notice           Stakes either BTRFLY or LOBI from treasury\r\n    /// @param _redacted  Bool if staking to redacted or lobi\r\n    /// @param _amount    Amount of token that will be withdrawn from treasury and staked\r\n    function stake(bool _redacted, uint _amount) external onlyGuardian {\r\n        (address staking, address token,) = _redactedOrLobi(_redacted);\r\n\r\n        // retrieve amount of token from treasury\r\n        treasury.manage(token, _amount); \r\n\r\n        // approve token to be spent by staking\r\n        IERC20(token).approve(staking, _amount);\r\n\r\n        // stake token to treasury\r\n        IStaking(staking).stake(_amount, address(treasury));\r\n\r\n        // claim stake for treasury\r\n        IStaking(staking).claim(address(treasury));\r\n    }\r\n\r\n    /// @notice           Unstakes either BTRFLY or LOBI from treasury\r\n    /// @param _redacted  Bool if unstakiung to redacted or lobi\r\n    /// @param _amount    Amount of token that will be withdrawn from treasury and unstaked\r\n    function unstake(bool _redacted, uint _amount) external onlyGuardian {\r\n        (address staking, address token, address stakedToken) = _redactedOrLobi(_redacted);\r\n        \r\n        // retrieve amount of staked token from treasury\r\n        treasury.manage(stakedToken, _amount); \r\n\r\n        // approve staked token to be spent by staking contract\r\n        IERC20(stakedToken).approve(staking, _amount);\r\n\r\n        // unstake token\r\n        IStaking(staking).unstake(_amount, false);\r\n\r\n        // send token back to treasury\r\n        IERC20(token).safeTransfer(address(treasury), _amount);\r\n    }\r\n\r\n\r\n    /// INTERNAL VIEW FUNCTIONS ///\r\n\r\n    /// @notice              Returns addresses depending on wanting to interact with redacted or lobi\r\n    /// @param _redacted     Bool if address for redacted or lobi\r\n    /// @return staking      Address of staking contract\r\n    /// @return token        Address of native token\r\n    /// @return stakedToken  Address of staked token\r\n    function _redactedOrLobi(bool _redacted) internal view returns (address staking, address token, address stakedToken) {\r\n        if(_redacted) {\r\n            staking = redactedStaking;\r\n            token = BTRFLY;\r\n            stakedToken = xBTRFLY;\r\n        } else {\r\n            staking = lobiStaking;\r\n            token = LOBI;\r\n            stakedToken = sLOBI;\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOlympusAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_redacted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_redacted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MetaGovernanceAllocator","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001c21f8ea7e39e2ba00bc12d2968d63f4acb38b7a","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1d2edc1cb67b59c2e574932203b6dd2e96f5af8b3838f7f9369ea04086c9b7a8"}]}