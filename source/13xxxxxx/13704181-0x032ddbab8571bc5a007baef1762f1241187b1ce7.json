{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Swapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.7;\\n\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Provenance.sol\\\";\\n\\ninterface IBaseToken {\\n    function burn(uint256 tokenId) external;\\n    function ownerOf(uint256 tokenId) external returns (address);\\n    function mint(address to) external;\\n}\\n\\ncontract Swapper is Ownable, Provenance {\\n\\n    address public tokenToBurn;\\n    address public tokenToMint;\\n    uint256 public batchSize;\\n    uint256 public keyDeadline;\\n\\n    /* ------------------------------- Constructor ------------------------------ */\\n\\n    constructor(\\n        address _tokenToBurn,\\n        address _tokenToMint,\\n        uint256 _batchSize,\\n        uint256 _keyDeadline,\\n        bytes32 _provenanceHash\\n    ) {\\n        require(_tokenToBurn != address(0), \\\"Swapper: tokenToBurn cannot be zer0 address\\\");\\n        require(_tokenToMint != address(0), \\\"Swapper: tokenToMint cannot be zer0 address\\\");\\n        require(_keyDeadline > block.timestamp, \\\"Swapper: keyDeadline must be later than now\\\");\\n        require(_batchSize != 0, \\\"Swapper: batchSize cannot be 0\\\");\\n\\n        tokenToBurn = _tokenToBurn;\\n        tokenToMint = _tokenToMint;\\n        batchSize = _batchSize;\\n        keyDeadline = _keyDeadline;\\n\\n        _setProvenance(_provenanceHash);\\n\\n    }\\n\\n\\n    /* ------------------------------ Owner Methods ----------------------------- */\\n\\n    function withdraw() public onlyOwner {\\n        uint balance = address(this).balance;\\n        payable(msg.sender).transfer(balance);\\n    }\\n\\n    function sweep(address token, address to, uint256 amount)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {    \\n        return IERC20(token).transfer(to, amount);\\n    }\\n\\n\\n    /* ----------------------------- Public Methods ----------------------------- */\\n\\n    function swap(uint256 tokenId)\\n        public\\n    {\\n        require(IBaseToken(tokenToBurn).ownerOf(tokenId) == msg.sender, \\\"Swapper: only current owner may swap\\\");\\n        require(keyDeadline >= block.timestamp, \\\"Swapper: redemption deadline passed\\\");\\n        \\n        IBaseToken(tokenToBurn).burn(tokenId);\\n        IBaseToken(tokenToMint).mint(msg.sender);\\n\\n        // First swap sets offset.\\n        _setStartingBlock(1, 1);\\n\\n    }\\n\\n    function finalizeReveal() public {\\n        require(batchSize != 0, \\\"Swapper: set batch size first\\\");\\n        _finalizeStartingIndex(batchSize);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/Provenance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.7;\\n\\n\\ncontract Provenance {\\n\\n    // Provenance hash for metadata.\\n    bytes32 public provenance;\\n    uint256 public startingIndex;\\n    uint256 public startingIndexBlock;\\n    uint256 public revealTimestamp;\\n\\n\\n    /* ------------------------------ Internal Methods ----------------------------- */\\n\\n    function _setProvenance(bytes32 provenanceHash) internal {\\n        provenance = provenanceHash;\\n    }\\n\\n    function _setRevealTime(uint256 timestamp) internal {\\n        revealTimestamp = timestamp;\\n    }\\n\\n    function _finalizeStartingIndex(uint256 maxSupply) internal {\\n        require(startingIndex == 0, \\\"Starting index is already set\\\");\\n        require(startingIndexBlock != 0, \\\"Starting index block must be set\\\");\\n        \\n        startingIndex = (uint(blockhash(startingIndexBlock)) % maxSupply) + 1;\\n        // Just a sanity case in the worst case if this function is called late (EVM only stores last 256 block hashes)\\n        if (block.number - startingIndexBlock > 255) {\\n            startingIndex = (uint(blockhash(block.number-1)) % maxSupply) + 1;\\n        }\\n        // Prevent default sequence\\n        if (startingIndex == 1) {\\n            startingIndex = startingIndex + 1;\\n        }\\n    }\\n\\n    function _setStartingBlock(uint256 currentCount, uint256 maxSupply) internal {\\n        /**\\n         * Source of randomness. Theoretical miner withhold manipulation possible but should be sufficient in a pragmatic sense\\n         */\\n        if (startingIndexBlock == 0 && (currentCount == maxSupply || block.timestamp >= revealTimestamp)) {\\n            startingIndexBlock = block.number;\\n        }\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenToBurn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenToMint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_batchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_keyDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_provenanceHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"batchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provenance\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingIndexBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenToBurn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenToMint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Swapper","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e4fd38670733f927018ea4bda88459bdef0a40cb00000000000000000000000043af1c4498ba39fa805a288c6236fc5174a9cb9200000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000061b492c0b7f92df481fa55d15786864ac86f7aa5e7b234b697b214743fa041274eb6b3f4","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}