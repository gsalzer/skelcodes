{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/farm/facets/ClaimFacet.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../AppStorage.sol\\\";\\nimport \\\"../../libraries/LibCheck.sol\\\";\\nimport \\\"../../libraries/LibInternal.sol\\\";\\nimport \\\"../../libraries/LibMarket.sol\\\";\\nimport \\\"../../libraries/LibClaim.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Claim handles claiming Bean and LP withdrawals, harvesting plots and claiming Ether.\\n**/\\ncontract ClaimFacet {\\n\\n    event BeanClaim(address indexed account, uint32[] withdrawals, uint256 beans);\\n    event LPClaim(address indexed account, uint32[] withdrawals, uint256 lp);\\n    event EtherClaim(address indexed account, uint256 ethereum);\\n    event Harvest(address indexed account, uint256[] plots, uint256 beans);\\n    event BeanAllocation(address indexed account, uint256 beans);\\n\\n    using SafeMath for uint256;\\n\\n    AppStorage internal s;\\n\\n    function claim(LibClaim.Claim calldata c) public payable returns (uint256 beansClaimed) {\\n        beansClaimed = LibClaim.claim(c);\\n\\n        LibCheck.balanceCheck();\\n    }\\n\\n    function claimAndUnwrapBeans(LibClaim.Claim calldata c, uint256 amount) public payable returns (uint256 beansClaimed) {\\n        beansClaimed = LibClaim.claim(c);\\n        beansClaimed = beansClaimed.add(unwrapBeans(amount));\\n\\n        LibCheck.balanceCheck();\\n    }\\n\\n    function claimBeans(uint32[] calldata withdrawals) public {\\n        uint256 beansClaimed = LibClaim.claimBeans(withdrawals);\\n        IBean(s.c.bean).transfer(msg.sender, beansClaimed);\\n        LibCheck.beanBalanceCheck();\\n    }\\n\\n    function claimLP(uint32[] calldata withdrawals) public {\\n        LibClaim.claimLP(withdrawals);\\n        LibCheck.lpBalanceCheck();\\n    }\\n\\n    function removeAndClaimLP(\\n        uint32[] calldata withdrawals,\\n        uint256 minBeanAmount,\\n        uint256 minEthAmount\\n    )\\n        public\\n    {\\n        LibClaim.removeAndClaimLP(withdrawals, minBeanAmount, minEthAmount);\\n        LibCheck.balanceCheck();\\n    }\\n\\n    function harvest(uint256[] calldata plots) public {\\n        uint256 beansHarvested = LibClaim.harvest(plots);\\n        IBean(s.c.bean).transfer(msg.sender, beansHarvested);\\n        LibCheck.beanBalanceCheck();\\n    }\\n\\n    function claimEth() public {\\n        LibClaim.claimEth();\\n    }\\n\\n    function unwrapBeans(uint amount) public returns (uint256 beansToWallet) {\\n        if (amount == 0) return beansToWallet;\\n        uint256 wBeans = s.a[msg.sender].wrappedBeans;\\n\\n        if (amount > wBeans) {\\n            IBean(s.c.bean).transfer(msg.sender, wBeans);\\n            beansToWallet = s.a[msg.sender].wrappedBeans;\\n            s.a[msg.sender].wrappedBeans = 0;\\n        } else {\\n            IBean(s.c.bean).transfer(msg.sender, amount);\\n            s.a[msg.sender].wrappedBeans = wBeans.sub(amount);\\n            beansToWallet = amount;\\n        }\\n    }\\n\\n    function wrapBeans(uint amount) public {\\n        IBean(s.c.bean).transferFrom(msg.sender, address(this), amount);\\n        s.a[msg.sender].wrappedBeans = s.a[msg.sender].wrappedBeans.add(amount);\\n\\n    }\\n\\n    function wrappedBeans(address user) public view returns (uint256) {\\n        return s.a[user].wrappedBeans;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/farm/AppStorage.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title App Storage defines the state object for Beanstalk.\\n**/\\ncontract Account {\\n\\n    struct Field {\\n        mapping(uint256 => uint256) plots;\\n        mapping(address => uint256) podAllowances;\\n    }\\n\\n    struct AssetSilo {\\n        mapping(uint32 => uint256) withdrawals;\\n        mapping(uint32 => uint256) deposits;\\n        mapping(uint32 => uint256) depositSeeds;\\n    }\\n\\n    struct Silo {\\n        uint256 stalk;\\n        uint256 seeds;\\n    }\\n\\n    struct SeasonOfPlenty {\\n        uint256 base;\\n        uint256 roots;\\n        uint256 basePerRoot;\\n    }\\n\\n    struct State {\\n        Field field;\\n        AssetSilo bean;\\n        AssetSilo lp;\\n        Silo s;\\n        uint32 votedUntil;\\n        uint32 lastUpdate;\\n        uint32 lastSop;\\n        uint32 lastRain;\\n        uint32 lastSIs;\\n        uint32 proposedUntil;\\n        SeasonOfPlenty sop;\\n        uint256 roots;\\n        uint256 wrappedBeans;\\n    }\\n}\\n\\ncontract Storage {\\n    struct Contracts {\\n        address bean;\\n        address pair;\\n        address pegPair;\\n        address weth;\\n    }\\n\\n    // Field\\n\\n    struct Field {\\n        uint256 soil;\\n        uint256 pods;\\n        uint256 harvested;\\n        uint256 harvestable;\\n    }\\n\\n    // Governance\\n\\n    struct Bip {\\n        address proposer;\\n        uint32 start;\\n        uint32 period;\\n        bool executed;\\n        int pauseOrUnpause;\\n        uint128 timestamp;\\n        uint256 roots;\\n        uint256 endTotalRoots;\\n    }\\n\\n    struct DiamondCut {\\n        IDiamondCut.FacetCut[] diamondCut;\\n        address initAddress;\\n        bytes initData;\\n    }\\n\\n    struct Governance {\\n        uint32[] activeBips;\\n        uint32 bipIndex;\\n        mapping(uint32 => DiamondCut) diamondCuts;\\n        mapping(uint32 => mapping(address => bool)) voted;\\n        mapping(uint32 => Bip) bips;\\n    }\\n\\n    // Silo\\n\\n    struct AssetSilo {\\n        uint256 deposited;\\n        uint256 withdrawn;\\n    }\\n\\n    struct IncreaseSilo {\\n        uint256 beans;\\n        uint256 stalk;\\n    }\\n\\n    struct V1IncreaseSilo {\\n        uint256 beans;\\n        uint256 stalk;\\n        uint256 roots;\\n    }\\n\\n    struct SeasonOfPlenty {\\n        uint256 weth;\\n        uint256 base;\\n        uint32 last;\\n    }\\n\\n    struct Silo {\\n        uint256 stalk;\\n        uint256 seeds;\\n        uint256 roots;\\n    }\\n\\n    // Season\\n\\n    struct Oracle {\\n        bool initialized;\\n        uint256 cumulative;\\n        uint256 pegCumulative;\\n        uint32 timestamp;\\n        uint32 pegTimestamp;\\n    }\\n\\n    struct Rain {\\n        uint32 start;\\n        bool raining;\\n        uint256 pods;\\n        uint256 roots;\\n    }\\n\\n    struct Season {\\n        uint32 current;\\n        uint32 sis;\\n        uint8 withdrawSeasons;\\n        uint256 start;\\n        uint256 period;\\n        uint256 timestamp;\\n    }\\n\\n    struct Weather {\\n        uint256 startSoil;\\n        uint256 lastDSoil;\\n        uint96 lastSoilPercent;\\n        uint32 lastSowTime;\\n        uint32 nextSowTime;\\n        uint32 yield;\\n        bool didSowBelowMin;\\n        bool didSowFaster;\\n    }\\n\\n    struct Fundraiser {\\n        address payee;\\n        address token;\\n        uint256 total;\\n        uint256 remaining;\\n    }\\n}\\n\\nstruct AppStorage {\\n    uint8 index;\\n    int8[32] cases;\\n    bool paused;\\n    uint128 pausedAt;\\n    Storage.Season season;\\n    Storage.Contracts c;\\n    Storage.Field f;\\n    Storage.Governance g;\\n    Storage.Oracle o;\\n    Storage.Rain r;\\n    Storage.Silo s;\\n    uint256 depreciated1;\\n    Storage.Weather w;\\n    Storage.AssetSilo bean;\\n    Storage.AssetSilo lp;\\n    Storage.IncreaseSilo si;\\n    Storage.SeasonOfPlenty sop;\\n    Storage.V1IncreaseSilo v1SI;\\n    uint256 unclaimedRoots;\\n    uint256 v2SIBeans;\\n    mapping (uint32 => uint256) sops;\\n    mapping (address => Account.State) a;\\n    uint32 bip0Start;\\n    uint32 hotFix3Start;\\n    mapping (uint32 => Storage.Fundraiser) fundraisers;\\n    uint32 fundraiserIndex;\\n    mapping (address => bool) isBudget;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibCheck.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./LibAppStorage.sol\\\";\\nimport \\\"../interfaces/IBean.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Check Library verifies Beanstalk's balances are correct.\\n**/\\nlibrary LibCheck {\\n\\n    using SafeMath for uint256;\\n\\n    function beanBalanceCheck() internal view {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(\\n            IBean(s.c.bean).balanceOf(address(this)) >=\\n                s.f.harvestable.sub(s.f.harvested).add(s.bean.deposited).add(s.bean.withdrawn),\\n            \\\"Check: Bean balance fail.\\\"\\n        );\\n    }\\n\\n    function lpBalanceCheck() internal view {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(\\n            IUniswapV2Pair(s.c.pair).balanceOf(address(this)) >= s.lp.deposited.add(s.lp.withdrawn),\\n            \\\"Check: LP balance fail.\\\"\\n        );\\n    }\\n\\n    function balanceCheck() internal view {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(\\n            IBean(s.c.bean).balanceOf(address(this)) >=\\n                s.f.harvestable.sub(s.f.harvested).add(s.bean.deposited).add(s.bean.withdrawn),\\n            \\\"Check: Bean balance fail.\\\"\\n        );\\n        require(\\n            IUniswapV2Pair(s.c.pair).balanceOf(address(this)) >= s.lp.deposited.add(s.lp.withdrawn),\\n            \\\"Check: LP balance fail.\\\"\\n        );\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibInternal.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Publius\\n * @title Internal Library handles gas efficient function calls between facets.\\n**/\\nlibrary LibInternal {\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        address[] facetAddresses;\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    struct Claim {\\n        uint32[] beanWithdrawals;\\n        uint32[] lpWithdrawals;\\n        uint256[] plots;\\n        bool claimEth;\\n        bool convertLP;\\n        uint256 minBeanAmount;\\n        uint256 minEthAmount;\\n    }\\n\\n    function updateSilo(address account) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        bytes4 functionSelector = bytes4(keccak256(\\\"updateSilo(address)\\\"));\\n        address facet = ds.selectorToFacetAndPosition[functionSelector].facetAddress;\\n        bytes memory myFunctionCall = abi.encodeWithSelector(functionSelector, account);\\n        (bool success,) = address(facet).delegatecall(myFunctionCall);\\n        require(success, \\\"Silo: updateSilo failed.\\\");\\n    }\\n\\n    function updateBip(uint32 bip) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        bytes4 functionSelector = bytes4(keccak256(\\\"updateBip(uint32)\\\"));\\n        address facet = ds.selectorToFacetAndPosition[functionSelector].facetAddress;\\n        bytes memory myFunctionCall = abi.encodeWithSelector(functionSelector, bip);\\n        (bool success,) = address(facet).delegatecall(myFunctionCall);\\n        require(success, \\\"Silo: updateBip failed.\\\");\\n    }\\n\\n    function stalkFor(uint32 bip) internal returns (uint256 stalk) {\\n        DiamondStorage storage ds = diamondStorage();\\n        bytes4 functionSelector = bytes4(keccak256(\\\"stalkFor(uint32)\\\"));\\n        address facet = ds.selectorToFacetAndPosition[functionSelector].facetAddress;\\n        bytes memory myFunctionCall = abi.encodeWithSelector(functionSelector, bip);\\n        (bool success, bytes memory data) = address(facet).delegatecall(myFunctionCall);\\n        require(success, \\\"Governance: stalkFor failed.\\\");\\n        assembly { stalk := mload(add(data, add(0x20, 0))) }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibMarket.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../interfaces/IBean.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"./LibAppStorage.sol\\\";\\nimport \\\"./LibClaim.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Market Library handles swapping, addinga and removing LP on Uniswap for Beanstalk.\\n**/\\nlibrary LibMarket {\\n\\n    event BeanAllocation(address indexed account, uint256 beans);\\n\\n    struct DiamondStorage {\\n        address bean;\\n        address weth;\\n        address router;\\n    }\\n\\n    struct AddLiquidity {\\n        uint256 beanAmount;\\n        uint256 minBeanAmount;\\n        uint256 minEthAmount;\\n    }\\n\\n    using SafeMath for uint256;\\n\\n    bytes32 private constant MARKET_STORAGE_POSITION = keccak256(\\\"diamond.standard.market.storage\\\");\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = MARKET_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function initMarket(address bean, address weth, address router) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        ds.bean = bean;\\n        ds.weth = weth;\\n        ds.router = router;\\n    }\\n\\n    /**\\n     * Swap\\n    **/\\n\\n    function buy(uint256 buyBeanAmount) internal returns (uint256 amount) {\\n        (uint256 ethAmount, uint256 beanAmount) = _buy(buyBeanAmount, msg.value, msg.sender);\\n        (bool success,) = msg.sender.call{ value: msg.value.sub(ethAmount) }(\\\"\\\");\\n        require(success, \\\"Market: Refund failed.\\\");\\n        return beanAmount;\\n    }\\n\\n    function buyAndDeposit(uint256 buyBeanAmount) internal returns (uint256 amount) {\\n        (uint256 ethAmount, uint256 beanAmount) = _buy(buyBeanAmount, msg.value, address(this));\\n        (bool success,) = msg.sender.call{ value: msg.value.sub(ethAmount) }(\\\"\\\");\\n        require(success, \\\"Market: Refund failed.\\\");\\n        return beanAmount;\\n    }\\n\\n    function sellToWETH(uint256 sellBeanAmount, uint256 minBuyEthAmount)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        (,uint256 outAmount) = _sell(sellBeanAmount, minBuyEthAmount, address(this));\\n        return outAmount;\\n    }\\n\\n    /**\\n     *  Liquidity\\n    **/\\n\\n    function addLiquidity(AddLiquidity calldata al) internal returns (uint256, uint256) {\\n        (uint256 beansDeposited, uint256 ethDeposited, uint256 liquidity) = _addLiquidity(\\n            msg.value,\\n            al.beanAmount,\\n            al.minEthAmount,\\n            al.minBeanAmount\\n        );\\n        (bool success,) = msg.sender.call{ value: msg.value.sub(ethDeposited) }(\\\"\\\");\\n        require(success, \\\"Market: Refund failed.\\\");\\n        return (beansDeposited, liquidity);\\n    }\\n\\n    function removeLiquidity(uint256 liqudity, uint256 minBeanAmount,uint256 minEthAmount)\\n        internal\\n        returns (uint256 beanAmount, uint256 ethAmount)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        return IUniswapV2Router02(ds.router).removeLiquidityETH(\\n            ds.bean,\\n            liqudity,\\n            minBeanAmount,\\n            minEthAmount,\\n            msg.sender,\\n            block.timestamp.add(1)\\n        );\\n    }\\n\\n    function removeLiquidityWithBeanAllocation(uint256 liqudity, uint256 minBeanAmount,uint256 minEthAmount)\\n        internal\\n        returns (uint256 beanAmount, uint256 ethAmount)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        (beanAmount, ethAmount) = IUniswapV2Router02(ds.router).removeLiquidity(\\n            ds.bean,\\n            ds.weth,\\n            liqudity,\\n            minBeanAmount,\\n            minEthAmount,\\n            address(this),\\n            block.timestamp.add(1)\\n        );\\n        IWETH(ds.weth).withdraw(ethAmount);\\n        (bool success, ) = msg.sender.call{value: ethAmount}(\\\"\\\");\\n        require(success, \\\"WETH: ETH transfer failed\\\");\\n    }\\n\\n    function addAndDepositLiquidity(AddLiquidity calldata al) internal returns (uint256) {\\n        DiamondStorage storage ds = diamondStorage();\\n        allocatedBeans(al.beanAmount);\\n        (uint256 beans, uint256 liquidity) = addLiquidity(al);\\n        if (al.beanAmount > beans) IBean(ds.bean).transfer(msg.sender, al.beanAmount.sub(beans));\\n        return liquidity;\\n    }\\n\\n    function swapAndAddLiquidity(\\n        uint256 buyBeanAmount,\\n        uint256 buyEthAmount,\\n        LibMarket.AddLiquidity calldata al\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 boughtLP;\\n        if (buyBeanAmount > 0)\\n            boughtLP = LibMarket.buyBeansAndAddLiquidity(buyBeanAmount, al);\\n        else if (buyEthAmount > 0)\\n            boughtLP = LibMarket.buyEthAndAddLiquidity(buyEthAmount, al);\\n        else\\n            boughtLP = LibMarket.addAndDepositLiquidity(al);\\n        return boughtLP;\\n    }\\n\\n\\n    // al.buyBeanAmount is the amount of beans the user wants to add to LP\\n    // buyBeanAmount is the amount of beans the person bought to contribute to LP. Note that\\n    // buyBean amount will AT BEST be equal to al.buyBeanAmount because of slippage.\\n    // Otherwise, it will almost always be less than al.buyBean amount\\n    function buyBeansAndAddLiquidity(uint256 buyBeanAmount, AddLiquidity calldata al)\\n        internal\\n        returns (uint256)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        IWETH(ds.weth).deposit{value: msg.value}();\\n        address[] memory path = new address[](2);\\n        path[0] = ds.weth;\\n        path[1] = ds.bean;\\n        uint256[] memory amounts = IUniswapV2Router02(ds.router).getAmountsIn(buyBeanAmount, path);\\n        (uint256 ethSold, uint256 beans) = _buyWithWETH(buyBeanAmount, amounts[0], address(this));\\n        // If beans bought does not cover the amount of money to move to LP\\n\\tif (al.beanAmount > buyBeanAmount) {\\n            allocatedBeans(al.beanAmount.sub(buyBeanAmount));\\n            beans = beans.add(al.beanAmount.sub(buyBeanAmount));\\n        }\\n        uint256 liquidity; uint256 ethAdded;\\n        (beans, ethAdded, liquidity) = _addLiquidityWETH(\\n            msg.value.sub(ethSold),\\n            beans,\\n            al.minEthAmount,\\n            al.minBeanAmount\\n        );\\n        if (al.beanAmount > beans) IBean(ds.bean).transfer(msg.sender, al.beanAmount.sub(beans));\\n        if (msg.value > ethAdded.add(ethSold)) {\\n            uint256 returnETH = msg.value.sub(ethAdded).sub(ethSold);\\n            IWETH(ds.weth).withdraw(returnETH);\\n            (bool success,) = msg.sender.call{ value: returnETH }(\\\"\\\");\\n            require(success, \\\"Market: Refund failed.\\\");\\n        }\\n        return liquidity;\\n    }\\n\\n    // This function is called when user sends more value of BEAN than ETH to LP.\\n    // Value of BEAN is converted to equivalent value of ETH.\\n    function buyEthAndAddLiquidity(uint256 buyWethAmount, AddLiquidity calldata al)\\n        internal\\n        returns (uint256)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 sellBeans = _amountIn(buyWethAmount);\\n        allocatedBeans(al.beanAmount.add(sellBeans));\\n        (uint256 beansSold, uint256 wethBought) = _sell(sellBeans, buyWethAmount, address(this));\\n        if (msg.value > 0) IWETH(ds.weth).deposit{value: msg.value}();\\n        (uint256 beans, uint256 ethAdded, uint256 liquidity) = _addLiquidityWETH(\\n            msg.value.add(wethBought),\\n            al.beanAmount,\\n            al.minEthAmount,\\n            al.minBeanAmount\\n        );\\n\\n        if (al.beanAmount.add(sellBeans) > beans.add(beansSold)) {\\n        uint256 toTransfer = al.beanAmount.add(sellBeans).sub(beans.add(beansSold));\\n\\tIBean(ds.bean).transfer(\\n                msg.sender,\\n                toTransfer\\n            );\\n\\t}\\n\\n        if (ethAdded < wethBought.add(msg.value)) {\\n            uint256 eth = wethBought.add(msg.value).sub(ethAdded);\\n            IWETH(ds.weth).withdraw(eth);\\n            (bool success, ) = msg.sender.call{value: eth}(\\\"\\\");\\n            require(success, \\\"Market: Ether transfer failed.\\\");\\n        }\\n        return liquidity;\\n    }\\n\\n    /**\\n     *  Shed\\n    **/\\n\\n    function _sell(uint256 sellBeanAmount, uint256 minBuyEthAmount, address to)\\n        internal\\n        returns (uint256 inAmount, uint256 outAmount)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        address[] memory path = new address[](2);\\n        path[0] = ds.bean;\\n        path[1] = ds.weth;\\n        uint[] memory amounts = IUniswapV2Router02(ds.router).swapExactTokensForTokens(\\n            sellBeanAmount,\\n            minBuyEthAmount,\\n            path,\\n            to,\\n            block.timestamp.add(1)\\n        );\\n        return (amounts[0], amounts[1]);\\n    }\\n\\n    function _buy(uint256 beanAmount, uint256 ethAmount, address to)\\n        private\\n        returns (uint256 inAmount, uint256 outAmount)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        address[] memory path = new address[](2);\\n        path[0] = ds.weth;\\n        path[1] = ds.bean;\\n\\n        uint[] memory amounts = IUniswapV2Router02(ds.router).swapExactETHForTokens{value: ethAmount}(\\n            beanAmount,\\n            path,\\n            to,\\n            block.timestamp.add(1)\\n        );\\n        return (amounts[0], amounts[1]);\\n    }\\n\\n    function _buyWithWETH(uint256 beanAmount, uint256 ethAmount, address to)\\n        internal\\n        returns (uint256 inAmount, uint256 outAmount)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        address[] memory path = new address[](2);\\n        path[0] = ds.weth;\\n        path[1] = ds.bean;\\n\\n        uint[] memory amounts = IUniswapV2Router02(ds.router).swapExactTokensForTokens(\\n            ethAmount,\\n            beanAmount,\\n            path,\\n            to,\\n            block.timestamp.add(1)\\n        );\\n        return (amounts[0], amounts[1]);\\n    }\\n\\n    function _addLiquidity(uint256 ethAmount, uint256 beanAmount, uint256 minEthAmount, uint256 minBeanAmount)\\n        private\\n        returns (uint256, uint256, uint256)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        return IUniswapV2Router02(ds.router).addLiquidityETH{value: ethAmount}(\\n            ds.bean,\\n            beanAmount,\\n            minBeanAmount,\\n            minEthAmount,\\n            address(this),\\n            block.timestamp.add(1));\\n    }\\n\\n    function _addLiquidityWETH(uint256 wethAmount, uint256 beanAmount, uint256 minWethAmount, uint256 minBeanAmount)\\n        internal\\n        returns (uint256, uint256, uint256)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        return IUniswapV2Router02(ds.router).addLiquidity(\\n            ds.bean,\\n            ds.weth,\\n            beanAmount,\\n            wethAmount,\\n            minBeanAmount,\\n            minWethAmount,\\n            address(this),\\n            block.timestamp.add(1));\\n    }\\n\\n    function _amountIn(uint256 buyWethAmount) internal view returns (uint256) {\\n        DiamondStorage storage ds = diamondStorage();\\n        address[] memory path = new address[](2);\\n        path[0] = ds.bean;\\n        path[1] = ds.weth;\\n        uint256[] memory amounts = IUniswapV2Router02(ds.router).getAmountsIn(buyWethAmount, path);\\n        return amounts[0];\\n    }\\n\\n    function allocatedBeans(uint256 transferBeans) internal {\\n\\t    AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        uint wrappedBeans = s.a[msg.sender].wrappedBeans;\\n        uint remainingBeans = transferBeans;\\n        if (wrappedBeans > 0) {\\n            if (remainingBeans > wrappedBeans) {\\n                remainingBeans = transferBeans.sub(wrappedBeans);\\n                s.a[msg.sender].wrappedBeans = 0;\\n            } else {\\n                remainingBeans = 0;\\n                s.a[msg.sender].wrappedBeans = wrappedBeans.sub(transferBeans);\\n            }\\n            emit BeanAllocation(msg.sender, transferBeans.sub(remainingBeans));\\n        }\\n        if (remainingBeans > 0) IBean(s.c.bean).transferFrom(msg.sender, address(this), remainingBeans);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibClaim.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./LibCheck.sol\\\";\\nimport \\\"./LibInternal.sol\\\";\\nimport \\\"./LibMarket.sol\\\";\\nimport \\\"./LibAppStorage.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Claim Library handles claiming Bean and LP withdrawals, harvesting plots and claiming Ether.\\n**/\\nlibrary LibClaim {\\n\\n    using SafeMath for uint256;\\n    using SafeMath for uint32;\\n\\n    event BeanClaim(address indexed account, uint32[] withdrawals, uint256 beans);\\n    event LPClaim(address indexed account, uint32[] withdrawals, uint256 lp);\\n    event EtherClaim(address indexed account, uint256 ethereum);\\n    event Harvest(address indexed account, uint256[] plots, uint256 beans);\\n\\n    struct Claim {\\n        uint32[] beanWithdrawals;\\n        uint32[] lpWithdrawals;\\n        uint256[] plots;\\n        bool claimEth;\\n        bool convertLP;\\n        uint256 minBeanAmount;\\n        uint256 minEthAmount;\\n\\t    bool toWallet;\\n    }\\n\\n    function claim(Claim calldata c)\\n        public\\n        returns (uint256 beansClaimed)\\n    {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        if (c.beanWithdrawals.length > 0) beansClaimed = beansClaimed.add(claimBeans(c.beanWithdrawals));\\n        if (c.plots.length > 0) beansClaimed = beansClaimed.add(harvest(c.plots));\\n        if (c.lpWithdrawals.length > 0) {\\n            if (c.convertLP) {\\n                if (!c.toWallet) beansClaimed = beansClaimed.add(removeClaimLPAndWrapBeans(c.lpWithdrawals, c.minBeanAmount, c.minEthAmount));\\n                else removeAndClaimLP(c.lpWithdrawals, c.minBeanAmount, c.minEthAmount);\\n            }\\n            else claimLP(c.lpWithdrawals);\\n        }\\n        if (c.claimEth) claimEth();\\n        \\n        if (beansClaimed > 0) {\\n            if (c.toWallet) IBean(s.c.bean).transfer(msg.sender, beansClaimed);\\n            else s.a[msg.sender].wrappedBeans = s.a[msg.sender].wrappedBeans.add(beansClaimed);\\n        }\\n    }\\n    \\n    // Claim Beans\\n\\n    function claimBeans(uint32[] calldata withdrawals) public returns (uint256 beansClaimed) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        for (uint256 i = 0; i < withdrawals.length; i++) {\\n            require(withdrawals[i] <= s.season.current, \\\"Claim: Withdrawal not recievable.\\\");\\n            beansClaimed = beansClaimed.add(claimBeanWithdrawal(msg.sender, withdrawals[i]));\\n        }\\n        emit BeanClaim(msg.sender, withdrawals, beansClaimed);\\n    }\\n\\n    function claimBeanWithdrawal(address account, uint32 _s) private returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256 amount = s.a[account].bean.withdrawals[_s];\\n        require(amount > 0, \\\"Claim: Bean withdrawal is empty.\\\");\\n        delete s.a[account].bean.withdrawals[_s];\\n        s.bean.withdrawn = s.bean.withdrawn.sub(amount);\\n        return amount;\\n    }\\n\\n    // Claim LP\\n\\n    function claimLP(uint32[] calldata withdrawals) public {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256 lpClaimed = _claimLP(withdrawals);\\n        IUniswapV2Pair(s.c.pair).transfer(msg.sender, lpClaimed);\\n    }\\n\\n    function removeAndClaimLP(\\n        uint32[] calldata withdrawals,\\n        uint256 minBeanAmount,\\n        uint256 minEthAmount\\n    )\\n        public\\n        returns (uint256 beans)\\n    {\\n        uint256 lpClaimd = _claimLP(withdrawals);\\n        (beans,) = LibMarket.removeLiquidity(lpClaimd, minBeanAmount, minEthAmount);\\n    }\\n\\n    function removeClaimLPAndWrapBeans(\\n        uint32[] calldata withdrawals,\\n        uint256 minBeanAmount,\\n        uint256 minEthAmount\\n    )\\n        private\\n        returns (uint256 beans)\\n    {\\n        uint256 lpClaimd = _claimLP(withdrawals);\\n        (beans,) = LibMarket.removeLiquidityWithBeanAllocation(lpClaimd, minBeanAmount, minEthAmount);\\n    }\\n\\n    function _claimLP(uint32[] calldata withdrawals) private returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256 lpClaimd = 0;\\n        for(uint256 i = 0; i < withdrawals.length; i++) {\\n            require(withdrawals[i] <= s.season.current, \\\"Claim: Withdrawal not recievable.\\\");\\n            lpClaimd = lpClaimd.add(claimLPWithdrawal(msg.sender, withdrawals[i]));\\n        }\\n        emit LPClaim(msg.sender, withdrawals, lpClaimd);\\n        return lpClaimd;\\n    }\\n\\n    function claimLPWithdrawal(address account, uint32 _s) private returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256 amount = s.a[account].lp.withdrawals[_s];\\n        require(amount > 0, \\\"Claim: LP withdrawal is empty.\\\");\\n        delete s.a[account].lp.withdrawals[_s];\\n        s.lp.withdrawn = s.lp.withdrawn.sub(amount);\\n        return amount;\\n    }\\n\\n    // Season of Plenty\\n\\n    function claimEth() public {\\n        LibInternal.updateSilo(msg.sender);\\n        uint256 eth = claimPlenty(msg.sender);\\n        emit EtherClaim(msg.sender, eth);\\n    }\\n\\n    function claimPlenty(address account) private returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        if (s.sop.base == 0) return 0;\\n        uint256 eth = s.a[account].sop.base.mul(s.sop.weth).div(s.sop.base);\\n        s.sop.weth = s.sop.weth.sub(eth);\\n        s.sop.base = s.sop.base.sub(s.a[account].sop.base);\\n        s.a[account].sop.base = 0;\\n        IWETH(s.c.weth).withdraw(eth);\\n        (bool success, ) = account.call{value: eth}(\\\"\\\");\\n        require(success, \\\"WETH: ETH transfer failed\\\");\\n        return eth;\\n    }\\n\\n    // Harvest\\n\\n    function harvest(uint256[] calldata plots) public returns (uint256 beansHarvested) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        for (uint256 i = 0; i < plots.length; i++) {\\n            require(plots[i] < s.f.harvestable, \\\"Claim: Plot not harvestable.\\\");\\n            require(s.a[msg.sender].field.plots[plots[i]] > 0, \\\"Claim: Plot not harvestable.\\\");\\n            uint256 harvested = harvestPlot(msg.sender, plots[i]);\\n            beansHarvested = beansHarvested.add(harvested);\\n        }\\n        require(s.f.harvestable.sub(s.f.harvested) >= beansHarvested, \\\"Claim: Not enough Harvestable.\\\");\\n        s.f.harvested = s.f.harvested.add(beansHarvested);\\n        emit Harvest(msg.sender, plots, beansHarvested);\\n    }\\n\\n    function harvestPlot(address account, uint256 plotId) private returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256 pods = s.a[account].field.plots[plotId];\\n        require(pods > 0, \\\"Claim: Plot is empty.\\\");\\n        uint256 harvestablePods = s.f.harvestable.sub(plotId);\\n        delete s.a[account].field.plots[plotId];\\n        if (harvestablePods >= pods) return pods;\\n        s.a[account].field.plots[plotId.add(harvestablePods)] = pods.sub(harvestablePods);\\n        return harvestablePods;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibAppStorage.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../farm/AppStorage.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title App Storage Library allows libaries to access Beanstalk's state.\\n**/\\nlibrary LibAppStorage {\\n\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBean.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Bean Interface\\n**/\\nabstract contract IBean is IERC20 {\\n\\n    function burn(uint256 amount) public virtual;\\n    function burnFrom(address account, uint256 amount) public virtual;\\n    function mint(address account, uint256 amount) public virtual returns (bool);\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title WETH Interface\\n**/\\ninterface IWETH is IERC20 {\\n\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libraries/LibClaim.sol\": {\r\n        \"LibClaim\": \"0x805b73caad1d9e7ae629d7c5af84dda19afe74f1\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beans\",\"type\":\"uint256\"}],\"name\":\"BeanAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"withdrawals\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beans\",\"type\":\"uint256\"}],\"name\":\"BeanClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereum\",\"type\":\"uint256\"}],\"name\":\"EtherClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"plots\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beans\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"withdrawals\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"}],\"name\":\"LPClaim\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"beanWithdrawals\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"lpWithdrawals\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"plots\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"claimEth\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"convertLP\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minBeanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"toWallet\",\"type\":\"bool\"}],\"internalType\":\"struct LibClaim.Claim\",\"name\":\"c\",\"type\":\"tuple\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beansClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"beanWithdrawals\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"lpWithdrawals\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"plots\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"claimEth\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"convertLP\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minBeanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"toWallet\",\"type\":\"bool\"}],\"internalType\":\"struct LibClaim.Claim\",\"name\":\"c\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimAndUnwrapBeans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beansClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"withdrawals\",\"type\":\"uint32[]\"}],\"name\":\"claimBeans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"withdrawals\",\"type\":\"uint32[]\"}],\"name\":\"claimLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"plots\",\"type\":\"uint256[]\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"withdrawals\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"minBeanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthAmount\",\"type\":\"uint256\"}],\"name\":\"removeAndClaimLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unwrapBeans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beansToWallet\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wrapBeans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"wrappedBeans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ClaimFacet","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}