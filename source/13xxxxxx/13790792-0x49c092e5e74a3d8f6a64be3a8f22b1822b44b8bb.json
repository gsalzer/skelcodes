{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/launchpad.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(\\n                oldAllowance >= value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n}\\n\\ninterface IUniswapV2Factory {\\n    function getPair(address token0, address token1)\\n        external\\n        view\\n        returns (address pair);\\n}\\n\\ninterface IMasterChef {\\n    function userInfo(uint256 poolId, address user)\\n        external\\n        view\\n        returns (uint256 amount, uint256 rewardDept);\\n}\\n\\ninterface IAutoVault {\\n    function userInfo(address user)\\n        external\\n        view\\n        returns (\\n            uint256 shares,\\n            uint256 lastDepositTime,\\n            uint256 balanceAtLastAction,\\n            uint256 lastActionTime\\n        );\\n}\\n\\ninterface IWETH {\\n    function balanceOf(address _user) external view returns (uint256 balance);\\n\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\\ncontract Presale is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    mapping(uint256 => uint256) public minContributeRate;\\n    mapping(uint256 => uint256) public maxContributeRate;\\n    mapping(uint256 => address) presaleTokens;\\n    mapping(uint256 => uint256) public startTime;\\n    mapping(uint256 => uint256) public tier1Time;\\n    mapping(uint256 => uint256) public tier2Time;\\n    mapping(uint256 => uint256) public endTime;\\n    mapping(uint256 => uint256) public liquidityLockTime;\\n    mapping(address => bool) public routers;\\n    mapping(uint256 => address) public routerId;\\n    mapping(uint256 => uint256) defaultRouterRate;\\n    mapping(uint256 => uint256) routerRate;\\n    mapping(uint256 => uint256) public tier1Rate;\\n    mapping(uint256 => uint256) public tier2Rate;\\n    mapping(uint256 => uint256) public liquidityRate;\\n    mapping(uint256 => uint256) public publicRate;\\n    mapping(uint256 => uint256) public softCap;\\n    mapping(uint256 => uint256) public hardCap;\\n    mapping(uint256 => bool) public isGold;\\n    mapping(uint256 => mapping(address => uint256)) userContribution;\\n    mapping(uint256 => mapping(address => bool)) public whitelist1;\\n    mapping(uint256 => mapping(address => bool)) public whitelist2;\\n    mapping(address => bool) public basewhitelist;\\n    mapping(uint256 => bool) public iswhitelist;\\n    mapping(uint256 => bool) public iswhitelist1;\\n    mapping(uint256 => bool) public iswhitelist2;\\n    mapping(uint256 => mapping(address => uint256)) public userContributionBNB;\\n    mapping(uint256 => uint256) public totalContributionBNB;\\n    mapping(uint256 => uint256) public totalContributionToken;\\n    mapping(uint256 => mapping(address => uint256))\\n        public userContributionToken;\\n    mapping(uint256 => bool) public withdrawFlag;\\n    mapping(uint256 => bool) public presaleStatus;\\n    mapping(uint256 => address) presaleOwner;\\n    mapping(uint256 => mapping(address => uint256)) liquidityAmount;\\n    mapping(uint256 => bool) public isDeposited;\\n    mapping(uint256 => mapping(address => bool)) public isClaimed;\\n    mapping(address => uint256[]) outsideContribution;\\n    mapping(uint256 => mapping(address => bool)) balanceContribute;\\n    uint256 public outsideContributionBalance;\\n    address payable public feeWallet;\\n    address payable public raiseFeeWallet;\\n    address public defaultRouter;\\n    uint256 public currentFee;\\n    uint256 public performanceFee = 175; //1.75% of token sold and BNB raised\\n    uint256 public whitelistFee;\\n    uint256 public currentPresaleId;\\n    uint256 public outsideContributionCount = 5;\\n    uint256 public contributionPeriod = 60 * 60 * 24 * 30; // 1 month\\n    uint256 public maxPresaleLength = 60 * 60 * 24 * 3; // 3 days\\n    uint256 public minLiquidityLock = 60 * 60 * 24 * 180; // 6 months\\n    address public masterChef;\\n    address public autoVault;\\n    IERC20 sphynxToken;\\n\\n    // events\\n    event SaleCreated(\\n        uint256 saleId,\\n        uint256 startTime,\\n        uint256 endTime,\\n        address token\\n    );\\n\\n    constructor(uint256 _fee, address _sphynx) {\\n        currentFee = _fee;\\n        feeWallet = payable(msg.sender);\\n        raiseFeeWallet = payable(msg.sender);\\n        sphynxToken = IERC20(_sphynx);\\n    }\\n\\n    function updateSphynx(address _sphynx) external onlyOwner {\\n        sphynxToken = IERC20(_sphynx);\\n    }\\n\\n    function updateFeeWallet(address _feewallet) external onlyOwner {\\n        feeWallet = payable(_feewallet);\\n    }\\n\\n    function updateRaiseFeeWallet(address _raiseFeeWallet) external onlyOwner {\\n        raiseFeeWallet = payable(_raiseFeeWallet);\\n    }\\n\\n    function setStaticFee(uint256 _fee) external onlyOwner {\\n        currentFee = _fee;\\n    }\\n\\n    function updatePerformanceFee(uint256 _performanceFee) external onlyOwner {\\n        performanceFee = _performanceFee;\\n    }\\n\\n    function updatewhitelistFee(uint256 _whitelistFee) external onlyOwner {\\n        whitelistFee = _whitelistFee;\\n    }\\n\\n    function updateBasewhitelist(address[] memory _whitelists, bool _value)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < _whitelists.length; i++) {\\n            address _whitelist = _whitelists[i];\\n            basewhitelist[_whitelist] = _value;\\n        }\\n    }\\n\\n    function updateMaxPresaleLength(uint256 _value) external onlyOwner {\\n        maxPresaleLength = _value;\\n    }\\n\\n    function updateMinLiquidityLock(uint256 _value) external onlyOwner {\\n        minLiquidityLock = _value;\\n    }\\n\\n    function updateMasterChef(address _masterChef) external onlyOwner {\\n        masterChef = _masterChef;\\n    }\\n\\n    function updateAutoVault(address _autoVault) external onlyOwner {\\n        autoVault = _autoVault;\\n    }\\n\\n    function updateOutsideContributionCount(uint256 _count) external onlyOwner {\\n        outsideContributionCount = _count;\\n    }\\n\\n    function updateContributionPeriod(uint256 _period) external onlyOwner {\\n        contributionPeriod = _period;\\n    }\\n\\n    function enablewhitelist(uint256 _saleId, bool value) external payable {\\n        require(presaleOwner[_saleId] == msg.sender, \\\"not-presale-owner\\\");\\n        require(msg.value >= whitelistFee || value == false, \\\"fee-not-enough\\\");\\n        iswhitelist[_saleId] = value;\\n    }\\n\\n    function updatewhitelist(\\n        uint256 _saleId,\\n        address[] memory _whitelists,\\n        uint256 _class\\n    ) external {\\n        require(presaleOwner[_saleId] == msg.sender, \\\"not-presale-owner\\\");\\n        require(iswhitelist[_saleId], \\\"whitelist-not-enabled\\\");\\n        if (_class == 1) {\\n            iswhitelist1[_saleId] = true;\\n            for (uint256 i = 0; i < _whitelists.length; i++) {\\n                address _whitelist = _whitelists[i];\\n                whitelist1[_saleId][_whitelist] = true;\\n            }\\n        } else if (_class == 2) {\\n            iswhitelist2[_saleId] = true;\\n            for (uint256 i = 0; i < _whitelists.length; i++) {\\n                address _whitelist = _whitelists[i];\\n                whitelist2[_saleId][_whitelist] = true;\\n            }\\n        } else {\\n            for (uint256 i = 0; i < _whitelists.length; i++) {\\n                address _whitelist = _whitelists[i];\\n                whitelist1[_saleId][_whitelist] = false;\\n                whitelist2[_saleId][_whitelist] = false;\\n            }\\n        }\\n    }\\n\\n    function setOutsideContributionBalance(uint256 _balance)\\n        external\\n        onlyOwner\\n    {\\n        outsideContributionBalance = _balance;\\n    }\\n\\n    struct PresaleInfo {\\n        uint256 saleId;\\n        address token;\\n        uint256 minContributeRate;\\n        uint256 maxContributeRate;\\n        uint256 startTime;\\n        uint256 tier1Time;\\n        uint256 tier2Time;\\n        uint256 endTime;\\n        uint256 liquidityLockTime;\\n        address routerId;\\n        uint256 tier1Rate;\\n        uint256 tier2Rate;\\n        uint256 publicRate;\\n        uint256 liquidityRate;\\n        uint256 softCap;\\n        uint256 hardCap;\\n        uint256 defaultRouterRate;\\n        uint256 routerRate;\\n        bool isGold;\\n    }\\n\\n    function createPresale(PresaleInfo calldata pInfo)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        require(pInfo.saleId == currentPresaleId, \\\"presale-already-exist\\\");\\n        require(routers[pInfo.routerId], \\\"not-router-address\\\");\\n        require(msg.value >= currentFee, \\\"not-enough-fee\\\");\\n        require(\\n            pInfo.startTime <= pInfo.tier1Time &&\\n                pInfo.tier1Time <= pInfo.tier2Time &&\\n                pInfo.tier2Time <= pInfo.endTime,\\n            \\\"time-incorrect\\\"\\n        );\\n        require(\\n            pInfo.endTime.sub(pInfo.startTime) <= maxPresaleLength,\\n            \\\"presale-length-reach-limit\\\"\\n        );\\n        require(\\n            pInfo.liquidityLockTime.sub(pInfo.endTime) >= minLiquidityLock,\\n            \\\"liquidity-lock-time-limit\\\"\\n        );\\n        require(pInfo.tier1Rate >= pInfo.tier2Rate, \\\"tier1-rate\\\");\\n        require(pInfo.tier2Rate >= pInfo.publicRate, \\\"tier2-rate\\\");\\n        presaleTokens[currentPresaleId] = pInfo.token;\\n        minContributeRate[currentPresaleId] = pInfo.minContributeRate;\\n        maxContributeRate[currentPresaleId] = pInfo.maxContributeRate;\\n        startTime[currentPresaleId] = pInfo.startTime;\\n        tier1Time[currentPresaleId] = pInfo.tier1Time;\\n        tier2Time[currentPresaleId] = pInfo.tier2Time;\\n        endTime[currentPresaleId] = pInfo.endTime;\\n        liquidityLockTime[currentPresaleId] = pInfo.liquidityLockTime;\\n        routerId[currentPresaleId] = pInfo.routerId;\\n        tier1Rate[currentPresaleId] = pInfo.tier1Rate;\\n        tier2Rate[currentPresaleId] = pInfo.tier2Rate;\\n        publicRate[currentPresaleId] = pInfo.publicRate;\\n        liquidityRate[currentPresaleId] = pInfo.liquidityRate;\\n        softCap[currentPresaleId] = pInfo.softCap;\\n        hardCap[currentPresaleId] = pInfo.hardCap;\\n        presaleOwner[currentPresaleId] = msg.sender;\\n        defaultRouterRate[currentPresaleId] = pInfo.defaultRouterRate;\\n        routerRate[currentPresaleId] = pInfo.routerRate;\\n        isGold[currentPresaleId] = pInfo.isGold;\\n        emit SaleCreated(\\n            currentPresaleId,\\n            pInfo.startTime,\\n            pInfo.endTime,\\n            pInfo.token\\n        );\\n        currentPresaleId = currentPresaleId.add(1);\\n        feeWallet.transfer(currentFee);\\n    }\\n\\n    function getDepositAmount(uint256 _saleId)\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n        uint256 _hardCap = hardCap[_saleId];\\n        uint256 _tier1Rate = tier1Rate[_saleId];\\n        uint256 _routerRate = routerRate[_saleId];\\n        uint256 _defaultRouterRate = defaultRouterRate[_saleId];\\n        uint256 _liquidityRate = liquidityRate[_saleId];\\n        amount = _hardCap.mul(_tier1Rate);\\n        uint256 _routerAmount = _hardCap\\n            .mul(_routerRate.add(_defaultRouterRate))\\n            .mul(_liquidityRate)\\n            .div(100);\\n        amount = amount.add(_routerAmount);\\n        amount = amount.mul(10000 + performanceFee).div(10000).div(10**18);\\n    }\\n\\n    function tier1Sale(uint256 _saleId) internal {\\n        require(\\n            whitelist1[_saleId][msg.sender] == true ||\\n                (outsideContributionBalance != 0 &&\\n                    sphynxToken.balanceOf(msg.sender).add(getStakedAmount()) >=\\n                    outsideContributionBalance &&\\n                    balanceContribute[_saleId][msg.sender] == false &&\\n                    isGold[_saleId]),\\n            \\\"permission-denied\\\"\\n        );\\n        if (!whitelist1[_saleId][msg.sender]) {\\n            balanceContribute[_saleId][msg.sender] = true;\\n        }\\n        uint256 rate = tier1Rate[_saleId];\\n        userContributionToken[_saleId][msg.sender] += rate.mul(msg.value).div(\\n            10**18\\n        );\\n        totalContributionToken[_saleId] += rate.mul(msg.value).div(10**18);\\n    }\\n\\n    function tier2Sale(uint256 _saleId) internal {\\n        bool _balanceContributionAvailable = sphynxToken\\n            .balanceOf(msg.sender)\\n            .add(getStakedAmount()) >=\\n            outsideContributionBalance &&\\n            !balanceContribute[_saleId][msg.sender] &&\\n            isGold[_saleId] &&\\n            outsideContributionBalance != 0;\\n        bool _outsideContributionAvailable = basewhitelist[msg.sender] &&\\n            (outsideContribution[msg.sender].length <=\\n                outsideContributionCount ||\\n                block.timestamp.sub(\\n                    outsideContribution[msg.sender][\\n                        outsideContribution[msg.sender].length -\\n                            outsideContributionCount\\n                    ]\\n                ) >=\\n                contributionPeriod);\\n        require(\\n            whitelist2[_saleId][msg.sender] == true ||\\n                _balanceContributionAvailable ||\\n                _outsideContributionAvailable,\\n            \\\"permission-denied\\\"\\n        );\\n        if (!whitelist2[_saleId][msg.sender]) {\\n            if (_balanceContributionAvailable) {\\n                balanceContribute[_saleId][msg.sender] = true;\\n            } else {\\n                outsideContribution[msg.sender].push(block.timestamp);\\n            }\\n        }\\n        uint256 rate = tier2Rate[_saleId];\\n        userContributionToken[_saleId][msg.sender] += rate.mul(msg.value).div(\\n            10**18\\n        );\\n        totalContributionToken[_saleId] += rate.mul(msg.value).div(10**18);\\n    }\\n\\n    function publicSale(uint256 _saleId) internal {\\n        uint256 rate = publicRate[_saleId];\\n        userContributionToken[_saleId][msg.sender] += rate.mul(msg.value).div(\\n            10**18\\n        );\\n        totalContributionToken[_saleId] += rate.mul(msg.value).div(10**18);\\n    }\\n\\n    function getStakedAmount() internal view returns (uint256 amount) {\\n        if (masterChef != address(0)) {\\n            (amount, ) = IMasterChef(masterChef).userInfo(0, msg.sender);\\n        }\\n        if (autoVault != address(0)) {\\n            (uint256 _vaultAmount, , , ) = IAutoVault(autoVault).userInfo(\\n                msg.sender\\n            );\\n            amount = amount.add(_vaultAmount);\\n        }\\n    }\\n\\n    function contribute(uint256 _saleId) external payable nonReentrant {\\n        require(presaleTokens[_saleId] != address(0), \\\"presale-not-exist\\\");\\n        require(isDeposited[_saleId], \\\"token-not-deposited-yet\\\");\\n        require(\\n            block.timestamp >= startTime[_saleId] &&\\n                block.timestamp <= endTime[_saleId],\\n            \\\"presale-not-active\\\"\\n        );\\n        userContributionBNB[_saleId][msg.sender] += msg.value;\\n        totalContributionBNB[_saleId] += msg.value;\\n        require(\\n            userContributionBNB[_saleId][msg.sender] <=\\n                maxContributeRate[_saleId],\\n            \\\"over-max-contrubution-amount\\\"\\n        );\\n        require(\\n            userContributionBNB[_saleId][msg.sender] >=\\n                minContributeRate[_saleId],\\n            \\\"less-than-min-contrubution-amount\\\"\\n        );\\n        require(\\n            totalContributionBNB[_saleId] <= hardCap[_saleId],\\n            \\\"over-hardcap-amount\\\"\\n        );\\n        if (iswhitelist[_saleId]) {\\n            if (block.timestamp < tier1Time[_saleId]) {\\n                tier1Sale(_saleId);\\n            } else if (\\n                tier1Time[_saleId] <= block.timestamp &&\\n                block.timestamp <= tier2Time[_saleId]\\n            ) {\\n                tier2Sale(_saleId);\\n            } else {\\n                publicSale(_saleId);\\n            }\\n        } else {\\n            publicSale(_saleId);\\n        }\\n    }\\n\\n    function claimToken(uint256 _saleId) external payable nonReentrant {\\n        require(\\n            presaleStatus[_saleId] ||\\n                ((endTime[_saleId] < block.timestamp) &&\\n                    (totalContributionBNB[_saleId] < softCap[_saleId])),\\n            \\\"presale-not-end\\\"\\n        );\\n        require(\\n            userContributionBNB[_saleId][msg.sender] > 0,\\n            \\\"did-not-contribute-this-presale\\\"\\n        );\\n        require(!isClaimed[_saleId][msg.sender], \\\"already-claimed\\\");\\n        address _token = presaleTokens[_saleId];\\n        bool isSuccess = totalContributionBNB[_saleId] > softCap[_saleId];\\n        IERC20 token = IERC20(_token);\\n        if (isSuccess) {\\n            token.safeTransfer(\\n                msg.sender,\\n                userContributionToken[_saleId][msg.sender]\\n            );\\n        } else {\\n            address payable msgSender = payable(msg.sender);\\n            msgSender.transfer(userContributionBNB[_saleId][msg.sender]);\\n        }\\n        isClaimed[_saleId][msg.sender] = true;\\n    }\\n\\n    function depositToken(uint256 _saleId) external {\\n        require(presaleOwner[_saleId] == msg.sender, \\\"not-presale-owner\\\");\\n        address _token = presaleTokens[_saleId];\\n        IERC20 token = IERC20(_token);\\n        uint256 requiredAmount = getDepositAmount(_saleId);\\n        uint256 originBalance = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), requiredAmount);\\n        uint256 balance = token.balanceOf(address(this));\\n        require(\\n            balance.sub(originBalance) == requiredAmount,\\n            \\\"amount-not-equal\\\"\\n        );\\n        isDeposited[_saleId] = true;\\n    }\\n\\n    function _liquidityAdd(\\n        IERC20 token,\\n        address routerAddr,\\n        bool isDefault,\\n        uint256 routerBNB,\\n        uint256 defaultRouterBNB,\\n        uint256 _saleId\\n    ) internal {\\n        uint256 routerTokenAmount = liquidityRate[_saleId].mul(routerBNB).div(\\n            10**18\\n        );\\n        uint256 defaultRouterTokenAmount = liquidityRate[_saleId]\\n            .mul(defaultRouterBNB)\\n            .div(10**18);\\n        if (routerBNB != 0) {\\n            token.approve(routerAddr, routerTokenAmount);\\n            IUniswapV2Router01 router = IUniswapV2Router01(routerAddr);\\n            uint256 deadline = block.timestamp.add(20 * 60);\\n            IWETH(router.WETH()).deposit{value: routerBNB}();\\n            IWETH(router.WETH()).approve(routerAddr, routerBNB);\\n            (, , uint256 liquidity) = router.addLiquidity(\\n                router.WETH(),\\n                address(token),\\n                routerBNB,\\n                routerTokenAmount,\\n                0,\\n                0,\\n                address(this),\\n                deadline\\n            );\\n            liquidityAmount[_saleId][routerAddr] = liquidity;\\n        }\\n        if (!isDefault && defaultRouterBNB != 0) {\\n            token.approve(defaultRouter, defaultRouterTokenAmount);\\n            IUniswapV2Router01 router1 = IUniswapV2Router01(defaultRouter);\\n            uint256 deadline = block.timestamp.add(20 * 60);\\n            IWETH(router1.WETH()).deposit{value: defaultRouterBNB}();\\n            IWETH(router1.WETH()).approve(defaultRouter, defaultRouterBNB);\\n            (, , uint256 liquidity) = router1.addLiquidity(\\n                router1.WETH(),\\n                address(token),\\n                defaultRouterBNB,\\n                defaultRouterTokenAmount,\\n                0,\\n                0,\\n                address(this),\\n                deadline\\n            );\\n            liquidityAmount[_saleId][defaultRouter] = liquidity;\\n        }\\n        uint256 tokenAmount = getDepositAmount(_saleId)\\n            .mul(10000 - performanceFee)\\n            .div(10000)\\n            .sub(routerTokenAmount)\\n            .sub(defaultRouterTokenAmount)\\n            .sub(totalContributionToken[_saleId]);\\n        token.safeTransfer(msg.sender, tokenAmount);\\n    }\\n\\n    function addLiquidity(uint256 realAmount, uint256 _saleId) internal {\\n        address _token = presaleTokens[_saleId];\\n        address routerAddr = routerId[_saleId];\\n        bool isDefaultRouter = defaultRouter == address(0) ||\\n            defaultRouter == routerAddr;\\n        uint256 realRate = routerRate[_saleId];\\n        uint256 routerBNB = realAmount.mul(realRate).div(100);\\n        uint256 defaultRouterBNB = realAmount\\n            .mul(defaultRouterRate[_saleId])\\n            .div(100);\\n        uint256 remainAmount = realAmount.sub(routerBNB).sub(defaultRouterBNB);\\n        _liquidityAdd(\\n            IERC20(_token),\\n            routerAddr,\\n            isDefaultRouter,\\n            routerBNB,\\n            defaultRouterBNB,\\n            _saleId\\n        );\\n        address payable msgSender = payable(msg.sender);\\n        msgSender.transfer(remainAmount);\\n    }\\n\\n    function withdrawLiquidity(uint256 _saleId) external nonReentrant {\\n        require(presaleOwner[_saleId] == msg.sender, \\\"not-presale-owner\\\");\\n        require(\\n            block.timestamp > liquidityLockTime[_saleId],\\n            \\\"liquidity-locked\\\"\\n        );\\n        require(!withdrawFlag[_saleId], \\\"already-withdraw\\\");\\n        address routerAddr = routerId[_saleId];\\n        address _token = presaleTokens[_saleId];\\n        IUniswapV2Router01 router = IUniswapV2Router01(routerAddr);\\n        address wrappedToken = router.WETH();\\n        IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\\n        IERC20 pair = IERC20(factory.getPair(_token, wrappedToken));\\n        pair.safeTransfer(msg.sender, liquidityAmount[_saleId][routerAddr]);\\n        if (\\n            liquidityAmount[_saleId][defaultRouter] != 0 &&\\n            routerAddr != defaultRouter\\n        ) {\\n            IUniswapV2Router01 router1 = IUniswapV2Router01(defaultRouter);\\n            IUniswapV2Factory factory1 = IUniswapV2Factory(router1.factory());\\n            IERC20 pair1 = IERC20(factory1.getPair(_token, wrappedToken));\\n            pair1.safeTransfer(\\n                msg.sender,\\n                liquidityAmount[_saleId][defaultRouter]\\n            );\\n        }\\n        withdrawFlag[_saleId] = true;\\n    }\\n\\n    function emergencyWithdraw(uint256 _saleId) external payable nonReentrant {\\n        require(!presaleStatus[_saleId], \\\"presale-already-end\\\");\\n        address payable msgSender = payable(msg.sender);\\n        uint256 _bnbAmount = userContributionBNB[_saleId][msg.sender];\\n        uint256 _tokenAmount = userContributionToken[_saleId][msg.sender];\\n        msgSender.transfer(_bnbAmount);\\n        userContributionBNB[_saleId][msg.sender] = 0;\\n        userContributionToken[_saleId][msg.sender] = 0;\\n        totalContributionBNB[_saleId] = totalContributionBNB[_saleId].sub(\\n            _bnbAmount\\n        );\\n        totalContributionToken[_saleId] = totalContributionToken[_saleId].sub(\\n            _tokenAmount\\n        );\\n    }\\n\\n    function finalize(uint256 _saleId) external nonReentrant {\\n        require(presaleOwner[_saleId] == msg.sender, \\\"not-presale-owner\\\");\\n        require(\\n            endTime[_saleId] <= block.timestamp ||\\n                (hardCap[_saleId].sub(minContributeRate[_saleId]) <=\\n                    totalContributionBNB[_saleId]),\\n            \\\"presale-active\\\"\\n        );\\n        require(!presaleStatus[_saleId], \\\"already-finilize\\\");\\n        presaleStatus[_saleId] = true;\\n        bool isSuccess = totalContributionBNB[_saleId] > softCap[_saleId];\\n        if (isSuccess) {\\n            uint256 fee = totalContributionBNB[_saleId].mul(performanceFee).div(\\n                10000\\n            );\\n            raiseFeeWallet.transfer(fee);\\n            uint256 realAmount = totalContributionBNB[_saleId].sub(fee);\\n            address _token = presaleTokens[_saleId];\\n            IERC20 token = IERC20(_token);\\n            uint256 tokenFee = totalContributionToken[_saleId]\\n                .mul(performanceFee)\\n                .div(10000);\\n            uint256 originalBalance = token.balanceOf(raiseFeeWallet);\\n            token.safeTransfer(raiseFeeWallet, tokenFee);\\n            uint256 currentBalance = token.balanceOf(raiseFeeWallet);\\n            require(\\n                originalBalance + tokenFee == currentBalance,\\n                \\\"should-exclude-fee\\\"\\n            );\\n            addLiquidity(realAmount, _saleId);\\n        } else {\\n            uint256 tokenAmount = getDepositAmount(_saleId);\\n            address _token = presaleTokens[_saleId];\\n            IERC20 token = IERC20(_token);\\n            token.safeTransfer(msg.sender, tokenAmount);\\n        }\\n    }\\n\\n    function addRouter(address _newRouter) external onlyOwner {\\n        routers[_newRouter] = true;\\n    }\\n\\n    function setDefaultRouter(address _defaultRouter) external onlyOwner {\\n        defaultRouter = _defaultRouter;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sphynx\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SaleCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRouter\",\"type\":\"address\"}],\"name\":\"addRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"basewhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contributionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minContributeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxContributeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier1Time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2Time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityLockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"routerId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tier1Rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2Rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultRouterRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"routerRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isGold\",\"type\":\"bool\"}],\"internalType\":\"struct Presale.PresaleInfo\",\"name\":\"pInfo\",\"type\":\"tuple\"}],\"name\":\"createPresale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPresaleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"enablewhitelist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isDeposited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isGold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"iswhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"iswhitelist1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"iswhitelist2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxContributeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPresaleLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minContributeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLiquidityLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outsideContributionBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outsideContributionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presaleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publicRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raiseFeeWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routerId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultRouter\",\"type\":\"address\"}],\"name\":\"setDefaultRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"setOutsideContributionBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setStaticFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"softCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tier1Rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tier1Time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tier2Rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tier2Time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalContributionBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalContributionToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoVault\",\"type\":\"address\"}],\"name\":\"updateAutoVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelists\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"updateBasewhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"updateContributionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feewallet\",\"type\":\"address\"}],\"name\":\"updateFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterChef\",\"type\":\"address\"}],\"name\":\"updateMasterChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateMaxPresaleLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateMinLiquidityLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"updateOutsideContributionCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"updatePerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_raiseFeeWallet\",\"type\":\"address\"}],\"name\":\"updateRaiseFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sphynx\",\"type\":\"address\"}],\"name\":\"updateSphynx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_whitelists\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_class\",\"type\":\"uint256\"}],\"name\":\"updatewhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_whitelistFee\",\"type\":\"uint256\"}],\"name\":\"updatewhitelistFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userContributionBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userContributionToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"withdrawLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Presale","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000d38ec16caf3464ca04929e847e4550dcff25b27a","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}