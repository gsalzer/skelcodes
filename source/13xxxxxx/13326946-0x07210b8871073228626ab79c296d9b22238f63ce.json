{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\nabstract contract OracleRelayerLike {\r\n    function redemptionPrice() virtual public returns (uint256);\r\n}\r\n\r\ncontract RedemptionPriceSnap {\r\n    // --- Auth ---\r\n    mapping (address => uint256) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"RedemptionPriceSnap/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Variables ---\r\n    // Latest recorded redemption price\r\n    uint256           public snappedRedemptionPrice;\r\n\r\n    OracleRelayerLike public oracleRelayer;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(bytes32 parameter, address data);\r\n    event FailUpdateSnappedPrice(bytes revertReason);\r\n\r\n    constructor(\r\n      address oracleRelayer_\r\n    ) public {\r\n        require(oracleRelayer_ != address(0), \"RedemptionPriceSnap/null-oracle-relayer\");\r\n\r\n        authorizedAccounts[msg.sender] = 1;\r\n\r\n        oracleRelayer = OracleRelayerLike(oracleRelayer_);\r\n        oracleRelayer.redemptionPrice();\r\n\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n\r\n    // --- Math ---\r\n    uint256 public TEN_THOUSAND = 10000 * 10 ** 27;\r\n    function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"RedemptionPriceSnap/sub-uint-uint-underflow\");\r\n    }\r\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"RedemptionPriceSnap/multiply-uint-uint-overflow\");\r\n    }\r\n    function delta(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = (x >= y) ? subtract(x, y) : subtract(y, x);\r\n    }\r\n\r\n    // --- Administration ---\r\n    /**\r\n     * @notice Modify general address params\r\n     * @param parameter The name of the contract address being modified\r\n     * @param data New address for the contract\r\n     */\r\n    function modifyParameters(bytes32 parameter, address data) external isAuthorized {\r\n        require(data != address(0), \"RedemptionPriceSnap/null-address\");\r\n\r\n        if (parameter == \"oracleRelayer\") {\r\n          oracleRelayer = OracleRelayerLike(data);\r\n          require(oracleRelayer.redemptionPrice() > 0, \"RedemptionPriceSnap/null-redemption-price\");\r\n        }\r\n        else revert(\"RedemptionPriceSnap/modify-unrecognized-param\");\r\n\r\n        emit ModifyParameters(parameter, data);\r\n    }\r\n\r\n    // --- Core Logic ---\r\n    /**\r\n    * @notice Update and read the latest redemption price\r\n    **/\r\n    function updateSnappedPrice() public {\r\n        try oracleRelayer.redemptionPrice() returns (uint256 price) {\r\n          if (price == 0) return;\r\n          snappedRedemptionPrice = price;\r\n        } catch(bytes memory revertReason) {\r\n          emit FailUpdateSnappedPrice(revertReason);\r\n        }\r\n    }\r\n    /**\r\n    * @notice Read the latest redemption price and return it\r\n    **/\r\n    function updateAndGetSnappedPrice() external returns (uint256) {\r\n        updateSnappedPrice();\r\n        return snappedRedemptionPrice;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleRelayer_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"}],\"name\":\"FailUpdateSnappedPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TEN_THOUSAND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRelayer\",\"outputs\":[{\"internalType\":\"contract OracleRelayerLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snappedRedemptionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAndGetSnappedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSnappedPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RedemptionPriceSnap","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004ed9c0dca0479bc64d8f4eb3007126d5791f7851","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8e5f1bf02dfc8420ddddae9b0884564d032b423cc3816f7aae9f6c67b9a20cef"}]}