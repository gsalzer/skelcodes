{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n\n\n// Part: IFund\n\ninterface IFund {\n    function underlying() external view returns (address);\n\n    function fundManager() external view returns (address);\n\n    function relayer() external view returns (address);\n\n    function deposit(uint256 amountWei) external;\n\n    function depositFor(uint256 amountWei, address holder) external;\n\n    function withdraw(uint256 numberOfShares) external;\n\n    function getPricePerShare() external view returns (uint256);\n\n    function totalValueLocked() external view returns (uint256);\n\n    function underlyingBalanceWithInvestmentForHolder(address holder)\n        external\n        view\n        returns (uint256);\n}\n\n// Part: IGovernable\n\ninterface IGovernable {\n    function governance() external view returns (address);\n}\n\n// Part: IStrategy\n\ninterface IStrategy {\n    function name() external pure returns (string memory);\n\n    function version() external pure returns (string memory);\n\n    function underlying() external view returns (address);\n\n    function fund() external view returns (address);\n\n    function creator() external view returns (address);\n\n    function withdrawAllToFund() external;\n\n    function withdrawToFund(uint256 amount) external;\n\n    function investedUnderlyingBalance() external view returns (uint256);\n\n    function doHardWork() external;\n}\n\n// Part: IStrategyUnderOptimizer\n\ninterface IStrategyUnderOptimizer {\n    function aprAfterDeposit(uint256 depositAmount)\n        external\n        view\n        returns (uint256);\n\n    function apr() external view returns (uint256);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/Address\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/IERC20\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/SafeMath\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/SafeERC20\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: OptimizerStrategyBase.sol\n\n/**\n * This strategy takes an asset, and invests into the best strategy\n */\n/**\n * @title This is an optimizer strategy that rotates capital to various strategies.\n * @author Mesh Finance\n * @notice This strategy takes an asset, and invests into the strategy with highest APR\n */\ncontract OptimizerStrategyBase is IStrategy {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    event StrategyAddedOptimizer(address indexed strategy);\n    event StrategyRemovedOptimizer(address indexed strategy);\n    event ActiveStrategyChangedOptimizer(address indexed strategy);\n\n    address internal constant ZERO_ADDRESS = address(0);\n\n    string public constant override name = \"OptimizerStrategyBase\";\n    string public constant override version = \"V1\";\n\n    address public immutable override underlying;\n    address public immutable override fund;\n    address public immutable deployer;\n\n    // these tokens cannot be claimed by the governance\n    mapping(address => bool) public canNotSweep;\n\n    address[] public strategies;\n\n    address public activeStrategy;\n\n    bool public investActivated;\n\n    constructor(address _fund) public {\n        require(_fund != address(0), \"Fund cannot be empty\");\n        fund = _fund;\n        address _underlying = IFund(_fund).underlying();\n        underlying = _underlying;\n        deployer = msg.sender;\n\n        // restricted tokens, can not be swept\n        canNotSweep[_underlying] = true;\n\n        investActivated = true;\n    }\n\n    function _governance() internal view returns (address) {\n        return IGovernable(fund).governance();\n    }\n\n    function governance() external view returns (address) {\n        return _governance();\n    }\n\n    function _fundManager() internal view returns (address) {\n        return IFund(fund).fundManager();\n    }\n\n    function fundManager() external view returns (address) {\n        return _fundManager();\n    }\n\n    function _relayer() internal view returns (address) {\n        return IFund(fund).relayer();\n    }\n\n    function relayer() external view returns (address) {\n        return _relayer();\n    }\n\n    function creator() external view override returns (address) {\n        if (activeStrategy != ZERO_ADDRESS) {\n            return IStrategy(activeStrategy).creator();\n        }\n        return deployer;\n    }\n\n    modifier onlyFund() {\n        require(msg.sender == fund, \"The sender has to be the fund\");\n        _;\n    }\n\n    modifier onlyFundManager() {\n        require(\n            msg.sender == _fundManager(),\n            \"The sender has to be the fund manager\"\n        );\n        _;\n    }\n\n    modifier onlyFundOrGovernance() {\n        require(\n            msg.sender == fund || msg.sender == _governance(),\n            \"The sender has to be the governance or fund\"\n        );\n        _;\n    }\n\n    modifier onlyFundManagerOrGovernance() {\n        require(\n            msg.sender == _fundManager() || msg.sender == _governance(),\n            \"The sender has to be the governance or fund manager\"\n        );\n        _;\n    }\n\n    modifier onlyFundManagerOrRelayer() {\n        require(\n            msg.sender == _fundManager() || msg.sender == _relayer(),\n            \"The sender has to be the relayer or fund manager\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Allows Governance/Fund Manager to stop/start investing from this strategy to active strategies\n     * @dev Used for emergencies\n     * @param _investActivated Set investment to True/False\n     */\n    function setInvestActivated(bool _investActivated)\n        external\n        onlyFundManagerOrGovernance\n    {\n        investActivated = _investActivated;\n    }\n\n    /**\n     * @notice Withdraws an underlying asset from the strategy to the fund in the specified amount.\n     * It tries to withdraw from this optimizer contract if this has enough balance.\n     * Otherwise, we withdraw from the active strategy.\n     * @param underlyingAmount Underlying amount to withdraw to fund\n     */\n    function withdrawToFund(uint256 underlyingAmount)\n        external\n        override\n        onlyFund\n    {\n        uint256 underlyingBalanceBefore =\n            IERC20(underlying).balanceOf(address(this));\n\n        if (underlyingBalanceBefore >= underlyingAmount) {\n            IERC20(underlying).safeTransfer(fund, underlyingAmount);\n            return;\n        }\n\n        if (activeStrategy != ZERO_ADDRESS) {\n            IStrategy(activeStrategy).withdrawToFund(\n                underlyingAmount.sub(underlyingBalanceBefore)\n            );\n        }\n\n        // we can transfer the asset to the fund\n        uint256 underlyingBalance = IERC20(underlying).balanceOf(address(this));\n        if (underlyingBalance > 0) {\n            if (underlyingAmount < underlyingBalance) {\n                IERC20(underlying).safeTransfer(fund, underlyingAmount);\n                _investAllUnderlying();\n            } else {\n                IERC20(underlying).safeTransfer(fund, underlyingBalance);\n            }\n        }\n    }\n\n    /**\n     * @notice Withdraws all assets from the active strategy and transfers all underlying to fund.\n     */\n    function withdrawAllToFund() external override onlyFund {\n        if (activeStrategy != ZERO_ADDRESS) {\n            IStrategy(activeStrategy).withdrawAllToFund();\n        }\n        uint256 underlyingBalance = IERC20(underlying).balanceOf(address(this));\n        if (underlyingBalance > 0) {\n            IERC20(underlying).safeTransfer(fund, underlyingBalance);\n        }\n    }\n\n    /**\n     * @notice This selects new active strategy based on APR\n     * @dev If active strategy is changed, funds are withdrawn from current active strategy\n     */\n    function _selectActiveStrategy() internal {\n        if (strategies.length > 0) {\n            uint256 highestApr = 0;\n            address highestAprStrategy;\n\n            uint256 underlyingBalance =\n                IERC20(underlying).balanceOf(address(this));\n\n            for (uint256 i = 0; i < strategies.length; i++) {\n                uint256 apr;\n                apr = IStrategyUnderOptimizer(strategies[i]).aprAfterDeposit(\n                    underlyingBalance\n                );\n                if (apr > highestApr) {\n                    highestApr = apr;\n                    highestAprStrategy = strategies[i];\n                }\n            }\n\n            if (highestAprStrategy != activeStrategy) {\n                if (activeStrategy != ZERO_ADDRESS) {\n                    IStrategy(activeStrategy).withdrawAllToFund();\n                }\n                activeStrategy = highestAprStrategy;\n                emit ActiveStrategyChangedOptimizer(activeStrategy);\n            }\n        } else {\n            if (activeStrategy != ZERO_ADDRESS) {\n                activeStrategy = ZERO_ADDRESS;\n                emit ActiveStrategyChangedOptimizer(activeStrategy);\n            }\n        }\n    }\n\n    /**\n     * @notice Invests all underlying assets into active strategy\n     */\n    function _investAllUnderlying() internal {\n        if (!investActivated) {\n            return;\n        }\n\n        uint256 underlyingBalance = IERC20(underlying).balanceOf(address(this));\n\n        if (activeStrategy != ZERO_ADDRESS) {\n            if (underlyingBalance > 0) {\n                // deposits the entire balance to active strategy\n                IERC20(underlying).safeTransfer(\n                    activeStrategy,\n                    underlyingBalance\n                );\n            }\n            IStrategy(activeStrategy).doHardWork();\n        }\n    }\n\n    /**\n     * @notice This selects new active strategy based on APR and invests all the underlying there.\n     * @dev If active strategy is changed, funds are first withdrawn from current active strategy\n     */\n    function doHardWork() external override onlyFund {\n        _selectActiveStrategy();\n        _investAllUnderlying();\n    }\n\n    /**\n     * @notice Adds a new strategy to select active strategy from.\n     * @param newStrategy Strategy to add\n     */\n    function addStrategy(address newStrategy) external onlyFundManager {\n        require(newStrategy != ZERO_ADDRESS, \"newStrategy cannot be empty\");\n        // The strategies added in optimizer treat optimizer as fund.\n        require(\n            IStrategy(newStrategy).fund() == address(this),\n            \"The strategy does not belong to this optimizer\"\n        );\n        for (uint256 i = 0; i < strategies.length; i++) {\n            require(\n                newStrategy != strategies[i],\n                \"The strategy is already added in this optimizer\"\n            );\n        }\n\n        strategies.push(newStrategy);\n\n        emit StrategyAddedOptimizer(newStrategy);\n    }\n\n    /**\n     * @notice Removes the strategy from the optimizer.\n     * If it is an active strategy, funds are withdrawn from it, and reinvested in the newly selected active strategy.\n     * @param strategy Strategy to remove\n     */\n    function removeStrategy(address strategy)\n        external\n        onlyFundManagerOrGovernance\n    {\n        require(strategy != ZERO_ADDRESS, \"strategy cannot be empty\");\n\n        for (uint256 i = 0; i < strategies.length; i++) {\n            if (strategy == strategies[i]) {\n                IStrategy(strategy).withdrawAllToFund();\n                if (i != strategies.length - 1) {\n                    strategies[i] = strategies[strategies.length - 1];\n                }\n                strategies.pop();\n                if (strategy == activeStrategy) {\n                    activeStrategy = ZERO_ADDRESS;\n                    _selectActiveStrategy();\n                }\n                _investAllUnderlying();\n                emit StrategyRemovedOptimizer(strategy);\n                return;\n            }\n        }\n\n        require(false, \"This strategy is not part of this optimizer\");\n    }\n\n    //we could make this more gas efficient but it is only used by a view function\n    struct Strategy {\n        string name;\n        address strategy;\n        uint256 investedUnderlyingBalance;\n        uint256 apr;\n    }\n\n    /**\n     * @notice Returns the details of all the strategies in the optimiser\n     * @return Array of Strategy struct\n     */\n    function getStrategies() public view returns (Strategy[] memory) {\n        Strategy[] memory _strategies = new Strategy[](strategies.length);\n        for (uint256 i = 0; i < strategies.length; i++) {\n            Strategy memory s;\n            s.name = IStrategy(strategies[i]).name();\n            s.strategy = strategies[i];\n            s.investedUnderlyingBalance = IStrategy(strategies[i])\n                .investedUnderlyingBalance();\n            s.apr = IStrategyUnderOptimizer(strategies[i]).apr();\n            _strategies[i] = s;\n        }\n\n        return _strategies;\n    }\n\n    /**\n     * @notice No tokens apart from underlying asset should ever be stored on this contract.\n     * Any tokens that are sent here by mistake are recoverable by owner.\n     * @dev Not applicable for ETH, different function needs to be written\n     * @param  _token  Token address that needs to be recovered\n     * @param  _sweepTo  Address to which tokens are sent\n     */\n    function sweep(address _token, address _sweepTo) external {\n        require(_governance() == msg.sender, \"Not governance\");\n        require(!canNotSweep[_token], \"Token is restricted\");\n        require(_sweepTo != address(0), \"Can not sweep to zero address\");\n        IERC20(_token).safeTransfer(\n            _sweepTo,\n            IERC20(_token).balanceOf(address(this))\n        );\n    }\n\n    /**\n     * @notice Returns the underlying invested balance. This is the underlying amount based on active strategy,\n     * plus the current balance of the underlying asset.\n     * @return Total balance invested in the strategy\n     */\n    function investedUnderlyingBalance()\n        external\n        view\n        override\n        returns (uint256)\n    {\n        uint256 underlyingBalanceinActiveStrategy;\n\n        if (activeStrategy != ZERO_ADDRESS) {\n            underlyingBalanceinActiveStrategy = IStrategy(activeStrategy)\n                .investedUnderlyingBalance();\n        }\n\n        return\n            underlyingBalanceinActiveStrategy.add(\n                IERC20(underlying).balanceOf(address(this))\n            );\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fund\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"ActiveStrategyChangedOptimizer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyAddedOptimizer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemovedOptimizer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canNotSweep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategies\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"investedUnderlyingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"internalType\":\"struct OptimizerStrategyBase.Strategy[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investedUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_investActivated\",\"type\":\"bool\"}],\"name\":\"setInvestActivated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sweepTo\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllToFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawToFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OptimizerStrategyBase","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007c8ce628fa5602e0808137a1276aa09516bcc784","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}