{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BridgeReserve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"./interfaces/IArtBridge.sol\\\";\\nimport \\\"./BridgeContext.sol\\\";\\n\\n///\\n///\\n/// ██████╗ ██████╗ ██╗██████╗  ██████╗ ███████╗\\n/// ██╔══██╗██╔══██╗██║██╔══██╗██╔════╝ ██╔════╝\\n/// ██████╔╝██████╔╝██║██║  ██║██║  ███╗█████╗\\n/// ██╔══██╗██╔══██╗██║██║  ██║██║   ██║██╔══╝\\n/// ██████╔╝██║  ██║██║██████╔╝╚██████╔╝███████╗\\n/// ╚═════╝ ╚═╝  ╚═╝╚═╝╚═════╝  ╚═════╝ ╚══════╝\\n///\\n/// ██████╗ ███████╗███████╗███████╗██████╗ ██╗   ██╗███████╗\\n/// ██╔══██╗██╔════╝██╔════╝██╔════╝██╔══██╗██║   ██║██╔════╝\\n/// ██████╔╝█████╗  ███████╗█████╗  ██████╔╝██║   ██║█████╗\\n/// ██╔══██╗██╔══╝  ╚════██║██╔══╝  ██╔══██╗╚██╗ ██╔╝██╔══╝\\n/// ██║  ██║███████╗███████║███████╗██║  ██║ ╚████╔╝ ███████╗\\n/// ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝╚═╝  ╚═╝  ╚═══╝  ╚══════╝\\n///\\n///\\n/// @title Mint reservation and parameter controller\\n/// @author artbridge.eth\\n/// @notice BridgeReserve controls all non financial aspects of a project\\ncontract BridgeReserve is BridgeContext {\\n  IArtBridge public immutable bridge;\\n\\n  mapping(uint256 => BridgeBeams.ReserveParameters) public projectToParameters;\\n  mapping(uint256 => mapping(address => bool)) public projectToMinters;\\n  mapping(uint256 => mapping(address => uint256))\\n    public projectToUserReservations;\\n  mapping(uint256 => uint256) public projectToReservations;\\n\\n  /// @notice allows operations only on projects before mint starts\\n  /// @param _id target bridge project id\\n  modifier onlyReservable(uint256 _id) {\\n    BridgeBeams.ProjectState memory state = bridge.projectState(_id);\\n    require(state.initialized, \\\"!initialized\\\");\\n    require(!state.released, \\\"released\\\");\\n    _;\\n  }\\n\\n  constructor(address _bridge) {\\n    bridge = IArtBridge(_bridge);\\n  }\\n\\n  /// @dev proof is supplied by art bridge api\\n  /// @dev reserve may be over subscribed, allotted on a first come basis\\n  /// @param _reserved total number of user allocated tokens\\n  /// @param _id target bridge project id\\n  /// @param _amount number of reserved tokens to mint\\n  /// @param _proof reservation merkle proof\\n  function reserve(\\n    uint256 _id,\\n    uint256 _amount,\\n    uint256 _reserved,\\n    bytes32[] calldata _proof\\n  ) external payable onlyReservable(_id) {\\n    require(\\n      _amount * bridge.projectToTokenPrice(_id) == msg.value,\\n      \\\"invalid payment amount\\\"\\n    );\\n    require(\\n      _amount <= _reserved - projectToUserReservations[_id][msg.sender],\\n      \\\"invalid reserve amount\\\"\\n    );\\n    BridgeBeams.ReserveParameters memory params = projectToParameters[_id];\\n    require(params.reserveRoot != \\\"\\\", \\\"!reserveRoot\\\");\\n    require(\\n      _amount <= params.reservedMints - projectToReservations[_id],\\n      \\\"invalid reserve amount\\\"\\n    );\\n    bytes32 node = keccak256(abi.encodePacked(_id, msg.sender, _reserved));\\n    require(\\n      MerkleProof.verify(_proof, params.reserveRoot, node),\\n      \\\"invalid proof\\\"\\n    );\\n    bridge.reserve(_id, _amount, msg.sender);\\n    projectToUserReservations[_id][msg.sender] += _amount;\\n    projectToReservations[_id] += _amount;\\n  }\\n\\n  /// @dev _reserveRoot is required for reserve but is not required to be set initially\\n  /// @notice set project reserve and mint parameters\\n  /// @param _id target bridge project id\\n  /// @param _maxMintPerInvocation maximum allowed number of mints per transaction\\n  /// @param _reservedMints maximum allowed number of reservice invocations\\n  function setParameters(\\n    uint256 _id,\\n    uint256 _maxMintPerInvocation,\\n    uint256 _reservedMints,\\n    bytes32 _reserveRoot\\n  ) external onlyReservable(_id) onlyOwner {\\n    require(_id < bridge.nextProjectId(), \\\"invalid _id\\\");\\n    (, , , , , , uint256 maxSupply, ) = bridge.projects(_id);\\n    require(_reservedMints <= maxSupply, \\\"invalid reserve amount\\\");\\n    require(_maxMintPerInvocation > 0, \\\"require positive mint\\\");\\n    require(_maxMintPerInvocation <= maxSupply, \\\"invalid mint max\\\");\\n    BridgeBeams.ReserveParameters memory params = BridgeBeams\\n      .ReserveParameters({\\n        maxMintPerInvocation: _maxMintPerInvocation,\\n        reservedMints: _reservedMints,\\n        reserveRoot: _reserveRoot\\n      });\\n    projectToParameters[_id] = params;\\n  }\\n\\n  /// @dev projects may support multiple minters\\n  /// @notice adds a minter as available to mint a given project\\n  /// @param _id target bridge project id\\n  /// @param _minter minter address\\n  function addMinter(uint256 _id, address _minter) external onlyOwner {\\n    projectToMinters[_id][_minter] = true;\\n  }\\n\\n  /// @notice removes a minter as available to mint a given project\\n  /// @param _id target bridge project id\\n  /// @param _minter minter address\\n  function removeMinter(uint256 _id, address _minter) external onlyOwner {\\n    projectToMinters[_id][_minter] = false;\\n  }\\n\\n  /// @notice updates the project maxMintPerInvocation\\n  /// @param _id target bridge project id\\n  /// @param _maxMintPerInvocation maximum number of mints per transaction\\n  function setmaxMintPerInvocation(uint256 _id, uint256 _maxMintPerInvocation)\\n    external\\n    onlyReservable(_id)\\n    onlyOwner\\n  {\\n    (, , , , , , uint256 maxSupply, ) = bridge.projects(_id);\\n    require(_maxMintPerInvocation <= maxSupply, \\\"invalid mint max\\\");\\n    require(_maxMintPerInvocation > 0, \\\"require positive mint\\\");\\n    projectToParameters[_id].maxMintPerInvocation = _maxMintPerInvocation;\\n  }\\n\\n  /// @notice updates the project reservedMints\\n  /// @param _id target bridge project id\\n  /// @param _reservedMints maximum number of reserved mints per project\\n  function setReservedMints(uint256 _id, uint256 _reservedMints)\\n    external\\n    onlyReservable(_id)\\n    onlyOwner\\n  {\\n    (, , , , , , uint256 maxSupply, ) = bridge.projects(_id);\\n    require(_reservedMints <= maxSupply, \\\"invalid reserve amount\\\");\\n    projectToParameters[_id].reservedMints = _reservedMints;\\n  }\\n\\n  /// @dev utility function to set or update reserve tree root\\n  /// @notice updates the project reserveRoot\\n  /// @param _id target bridge project id\\n  /// @param _reserveRoot project reservation merkle tree root\\n  function setReserveRoot(uint256 _id, bytes32 _reserveRoot)\\n    external\\n    onlyReservable(_id)\\n    onlyOwner\\n  {\\n    projectToParameters[_id].reserveRoot = _reserveRoot;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IArtBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport {BridgeBeams} from \\\"../libraries/BridgeBeams.sol\\\";\\n\\ninterface IArtBridge {\\n  function mint(\\n    uint256 _id,\\n    uint256 _amount,\\n    address _to\\n  ) external;\\n\\n  function reserve(\\n    uint256 _id,\\n    uint256 _amount,\\n    address _to\\n  ) external;\\n\\n  function nextProjectId() external view returns (uint256);\\n\\n  function projects(uint256 _id)\\n    external\\n    view\\n    returns (\\n      uint256 id,\\n      string memory name,\\n      string memory artist,\\n      string memory description,\\n      string memory website,\\n      uint256 supply,\\n      uint256 maxSupply,\\n      uint256 startBlock\\n    );\\n\\n  function minters(address _minter) external view returns (bool);\\n\\n  function projectToTokenPrice(uint256 _id) external view returns (uint256);\\n\\n  function projectState(uint256 _id)\\n    external\\n    view\\n    returns (BridgeBeams.ProjectState memory);\\n}\\n\"\r\n    },\r\n    \"contracts/BridgeContext.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport {BridgeBeams} from \\\"./libraries/BridgeBeams.sol\\\";\\nimport \\\"./Extractable.sol\\\";\\n\\ncontract BridgeContext is Extractable {\\n  using BridgeBeams for BridgeBeams.Project;\\n  using BridgeBeams for BridgeBeams.ProjectState;\\n  using BridgeBeams for BridgeBeams.ReserveParameters;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/BridgeBeams.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/// BridgeBeams.sol\\n/// @title BEAMS token helper functions\\n/// @author artbridge.eth\\n/// @dev Library assists requirement checks across contracts\\nlibrary BridgeBeams {\\n  struct Project {\\n    uint256 id;\\n    string name;\\n    string artist;\\n    string description;\\n    string website;\\n    uint256 supply;\\n    uint256 maxSupply;\\n    uint256 startBlock;\\n  }\\n\\n  struct ProjectState {\\n    bool initialized;\\n    bool mintable;\\n    bool released;\\n    uint256 remaining;\\n  }\\n\\n  struct ReserveParameters {\\n    uint256 maxMintPerInvocation;\\n    uint256 reservedMints;\\n    bytes32 reserveRoot;\\n  }\\n\\n  /// @param _project Target project struct\\n  /// @return Project state struct derived from given input\\n  function projectState(Project memory _project)\\n    external\\n    view\\n    returns (BridgeBeams.ProjectState memory)\\n  {\\n    return\\n      ProjectState({\\n        initialized: isInitialized(_project),\\n        mintable: isMintable(_project),\\n        released: isReleased(_project),\\n        remaining: _project.maxSupply - _project.supply\\n      });\\n  }\\n\\n  /// @param _project Target project struct\\n  /// @return True if project has required initial parameters, false if not\\n  function isInitialized(Project memory _project) internal pure returns (bool) {\\n    if (\\n      bytes(_project.artist).length == 0 ||\\n      bytes(_project.description).length == 0\\n    ) {\\n      return false;\\n    }\\n    return true;\\n  }\\n\\n  /// @param _project Target project struct\\n  /// @return True if project is past mint start block, false if not\\n  function isReleased(Project memory _project) internal view returns (bool) {\\n    return _project.startBlock > 0 && _project.startBlock <= block.number;\\n  }\\n\\n  /// @param _project Target project struct\\n  /// @return True if project is available for public mint, false if not\\n  function isMintable(Project memory _project) internal view returns (bool) {\\n    if (!isInitialized(_project)) {\\n      return false;\\n    }\\n    return isReleased(_project) && _project.supply < _project.maxSupply;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Extractable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Extractable is Ownable {\\n  function withdraw() external payable onlyOwner {\\n    require(payable(owner()).send(address(this).balance), \\\"!transfer\\\");\\n  }\\n\\n  function extract(address _token) external onlyOwner {\\n    IERC20 token = IERC20(_token);\\n    token.transfer(owner(), token.balanceOf(address(this)));\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contract IArtBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"extract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"projectToMinters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectToParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxMintPerInvocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservedMints\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"reserveRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectToReservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"projectToUserReservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserved\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"reserve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMintPerInvocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservedMints\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_reserveRoot\",\"type\":\"bytes32\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_reserveRoot\",\"type\":\"bytes32\"}],\"name\":\"setReserveRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservedMints\",\"type\":\"uint256\"}],\"name\":\"setReservedMints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMintPerInvocation\",\"type\":\"uint256\"}],\"name\":\"setmaxMintPerInvocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"BridgeReserve","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008103024d81d5fe06b7dd9c0c5564bdeddd7ca5ab","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}