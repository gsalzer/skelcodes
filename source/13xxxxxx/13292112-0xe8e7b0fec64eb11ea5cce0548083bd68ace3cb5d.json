{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/MetadataUtils.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\nfunction toString(uint256 value) pure returns (string memory) {\r\n    // Inspired by OraclizeAPI's implementation - MIT license\r\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n    if (value == 0) {\r\n        return \"0\";\r\n    }\r\n    uint256 temp = value;\r\n    uint256 digits;\r\n    while (temp != 0) {\r\n        digits++;\r\n        temp /= 10;\r\n    }\r\n    bytes memory buffer = new bytes(digits);\r\n    while (value != 0) {\r\n        digits -= 1;\r\n        buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n        value /= 10;\r\n    }\r\n    return string(buffer);\r\n}\r\n\r\n/// [MIT License]\r\n/// @title Base64\r\n/// @notice Provides a function for encoding some bytes in base64\r\n/// @author Brecht Devos <brecht@loopring.org>\r\nlibrary Base64 {\r\n    bytes internal constant TABLE =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    /// @notice Encodes some bytes to the base64 representation\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        uint256 len = data.length;\r\n        if (len == 0) return \"\";\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((len + 2) / 3);\r\n\r\n        // Add some extra buffer at the end\r\n        bytes memory result = new bytes(encodedLen + 32);\r\n\r\n        bytes memory table = TABLE;\r\n\r\n        assembly {\r\n            let tablePtr := add(table, 1)\r\n            let resultPtr := add(result, 32)\r\n\r\n            for {\r\n                let i := 0\r\n            } lt(i, len) {\r\n\r\n            } {\r\n                i := add(i, 3)\r\n                let input := and(mload(add(data, i)), 0xffffff)\r\n\r\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\r\n                out := shl(8, out)\r\n                out := add(\r\n                    out,\r\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\r\n                )\r\n                out := shl(8, out)\r\n                out := add(\r\n                    out,\r\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\r\n                )\r\n                out := shl(8, out)\r\n                out := add(\r\n                    out,\r\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\r\n                )\r\n                out := shl(224, out)\r\n\r\n                mstore(resultPtr, out)\r\n\r\n                resultPtr := add(resultPtr, 4)\r\n            }\r\n\r\n            switch mod(len, 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n\r\n            mstore(result, encodedLen)\r\n        }\r\n\r\n        return string(result);\r\n    }\r\n}\r\n// File: contracts/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n// File: contracts/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n// File: contracts/IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: contracts/IERC1155.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: contracts/IERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n// File: contracts/IERC721Enumerable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n// File: contracts/ERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: contracts/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n// File: contracts/IERC1155MetadataURI.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n// File: contracts/IERC1155Receiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: contracts/ERC1155.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n    using Address for address;\r\n\r\n    // Mapping from token ID to account balances\r\n    mapping(uint256 => mapping(address => uint256)) internal _balances;\r\n\r\n    // Mapping from account to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor(string memory uri_) {\r\n        _setURI(uri_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n    function uri(uint256) public view virtual override returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: transfer caller is not owner nor approved\"\r\n        );\r\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n        _balances[id][to] += amount;\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n            _balances[id][to] += amount;\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n     * interpreted by clients as\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(account != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        _balances[id][account] += amount;\r\n        emit TransferSingle(operator, address(0), account, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][to] += amounts[i];\r\n        }\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens of token type `id` from `account`\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens of token type `id`.\r\n     */\r\n    function _burn(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(account != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\r\n\r\n        uint256 accountBalance = _balances[id][account];\r\n        require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[id][account] = accountBalance - amount;\r\n        }\r\n\r\n        emit TransferSingle(operator, account, address(0), id, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     */\r\n    function _burnBatch(\r\n        address account,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts\r\n    ) internal virtual {\r\n        require(account != address(0), \"ERC1155: burn from the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 accountBalance = _balances[id][account];\r\n            require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n            unchecked {\r\n                _balances[id][account] = accountBalance - amount;\r\n            }\r\n        }\r\n\r\n        emit TransferBatch(operator, account, address(0), ids, amounts);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `id` and `amount` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\r\n                bytes4 response\r\n            ) {\r\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n}\r\n// File: contracts/Skills.sol\r\n//SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.7;\r\n\r\ncontract Skills is ERC1155, ReentrancyGuard, Ownable {\r\n    // first 4 are Epic, second 4 are Rare, remaining are Common\r\n\tstring[] private meleeAttacks = [\r\n\t\t\"Mortal Wound\", // 0\r\n\t\t\"Heart Thrust\", // 1\r\n\t\t\"Berserker\", // 2\r\n\t\t\"Killing Spree\", // 3\r\n\t\t\"Rage of the Ape\", // 4\r\n\t\t\"Spinal Slice\", // 5\r\n\t\t\"Death Blow\", // 6\r\n\t\t\"Ocular Slash \", // 7\r\n\t\t\"Grasp of the Kraken\", // 8\r\n\t\t\"Heroic Strike\", // 9\r\n\t\t\"Sweep\", // 10\r\n\t\t\"Backstab\", // 11\r\n\t\t\"Silent Strike\", // 12\r\n\t\t\"Skull Bash\", // 13\r\n\t\t\"Garrote\", // 14\r\n\t\t\"Mutilating Blow\", // 15\r\n\t\t\"Tiger Maul\", // 16\r\n\t\t\"Rune Strike\", // 17\r\n\t\t\"Cleave\", // 18\r\n\t\t\"Dragon Tail Swipe\", // 19\r\n\t\t\"Punch in the Mouth\" // 20\r\n\t];\r\n\r\n\tstring[] private rangeAttacks = [\r\n\t\t\"Multishot\", // 0\r\n\t\t\"Kill Shot\", // 1\r\n\t\t\"Shot Through The Heart\", // 2\r\n\t\t\"Hit and Run\", // 3\r\n\t\t\"Blot Out the Sun\", // 4\r\n\t\t\"Barrage of Bullets\", // 5\r\n\t\t\"Ancestral Arrow\", // 6\r\n\t\t\"Arrow of Armageddon\", // 7\r\n\t\t\"Double Strafe\", // 8\r\n\t\t\"Poison Arrow\", // 9\r\n\t\t\"Tranquilizing Dart\", // 10\r\n\t\t\"Frost Shot\", // 11\r\n\t\t\"Burning Arrow\", // 12\r\n\t\t\"Blinding Bolt\", // 13\r\n\t\t\"Degenerate Dart\", // 14\r\n\t\t\"Shaft of Glory\" // 15\r\n\t];\r\n\r\n    string[] private elementalSpells = [\r\n        \"Meteor\", // 0\r\n        \"Earthquake\", // 1\r\n        \"Ball Lightning\", // 2\r\n        \"Blizzard\", // 3\r\n        \"Cataclysm\", // 4\r\n        \"Maelstrom Bolt\", // 5\r\n        \"Black Dragon Breath\", // 6\r\n        \"Comet Strike\", // 7\r\n        \"Fireball\", // 8\r\n        \"Firewall\", // 9\r\n        \"Firestorm\", // 10\r\n        \"Dragon Breath\", // 11\r\n        \"Ice Spear\", // 12\r\n        \"Frost Touch\", // 13\r\n        \"Frozen Heart\", // 14\r\n        \"Frost Cone\", // 15\r\n        \"Electric Personality\", // 16\r\n        \"Lightning Strike\", // 17\r\n        \"Chain Lightning\", // 18\r\n        \"Electric Boogaloo\", // 19\r\n        \"Landslide\", // 20\r\n        \"Sinking Sand\", // 21\r\n        \"Earth Spike\", // 22\r\n        \"Drowning Deluge\" // 23\r\n    ];\r\n\r\n\tstring[] private spiritualSpells = [\r\n\t\t\"Searing Sun\", // 0\r\n\t\t\"Divine Indignation\", // 1\r\n\t\t\"Death and Decay\", // 2\r\n\t\t\"Hurricane of the Mother\", // 3\r\n\t\t\"Divine Retribution\", // 4\r\n\t\t\"Demonic Despair\", // 5\r\n\t\t\"Praise The Sun\", // 6\r\n\t\t\"Pandemonium\", // 7\r\n\t\t\"Light of the Moon\", // 8\r\n\t\t\"Spear of Brilliance\", // 9\r\n\t\t\"Raise Dead\", // 10\r\n\t\t\"Seraph Smite\", // 11\r\n\t\t\"Soul Arrow\", // 12\r\n\t\t\"Arrow of Evil\", // 13\r\n\t\t\"Bolt of Rage\", // 14\r\n\t\t\"Wroth of the Mother\", // 15\r\n\t\t\"Devilish Deed\", // 16\r\n\t\t\"Demon Soul\" // 17\r\n\t];\r\n\r\n\tstring[] private curses = [\r\n\t\t\"Doom\", // 0\r\n\t\t\"Regress to the Mean\", // 1\r\n\t\t\"Curse of the Winner\", // 2\r\n\t\t\"Not Gonna Make It\", // 3\r\n\t\t\"Plague of Frogs\", // 4\r\n\t\t\"Curse of the Ape\", // 5\r\n\t\t\"Bad Morning\", // 6\r\n\t\t\"Demise of the Degenerate\", // 7\r\n\t\t\"Touch of Sorrow\", // 8\r\n\t\t\"Curse of Down Bad\", // 9\r\n\t\t\"Kiss of Death\", // 10\r\n\t\t\"Blight of the Moon\", // 11\r\n\t\t\"Morbid Sun\", // 12\r\n\t\t\"Torment of Titans\", // 13\r\n\t\t\"Agonizing Gaze\", // 14\r\n\t\t\"Change of Heart\", // 15\r\n\t\t\"Curse of Anger\" // 16\r\n\t];\r\n\r\n    string[] private heals = [\r\n        \"Divine Touch\", // 0\r\n        \"Soul Glow\", // 1\r\n        \"Time Heals All Wounds\", // 2\r\n        \"Innervate\", // 3\r\n        \"Infectious Heal\", // 4\r\n        \"Raise the Dead\", // 5\r\n        \"Healed and Shield\", // 6\r\n        \"You're Gonna Make It\", // 7\r\n        \"Healing Touch\", // 8\r\n        \"Restoring Wind\", // 9\r\n        \"Healing Current\", // 10\r\n        \"Wellspring\", // 11\r\n        \"Reviving Touch\", // 12\r\n        \"Rejuvenating Surge\" // 13\r\n    ];\r\n      \r\n\tstring[] private buffs = [\r\n\t\t\"We're All Gonna Make It\", // 0\r\n\t\t\"Vigor of the Twins\", // 1\r\n\t\t\"Fury of the Ape\", // 2\r\n\t\t\"Invigorating Touch\", // 3\r\n\t\t\"Frozen Touch\", // 4\r\n\t\t\"Blessing of Good Morning\", // 5\r\n\t\t\"Ancient Vitriol\", // 6\r\n\t\t\"Luck and Leverage\", // 7\r\n\t\t\"Dragonskin\", // 8\r\n\t\t\"Sight of Enlightenment\", // 9\r\n\t\t\"Wind In Your Back\", // 10\r\n\t\t\"Fury of Giants\", // 11\r\n\t\t\"Song of Power\", // 12\r\n\t\t\"Cleverness of the Fox\", // 13\r\n\t\t\"Strength of Vengeance\", // 14\r\n\t\t\"Wind Walker\", // 15\r\n\t\t\"Scent of Blood\", // 16\r\n\t\t\"Thick Skin\", // 17\r\n\t\t\"Hymn of Protection\", // 18\r\n\t\t\"Blessing of Light\", // 19\r\n\t\t\"Iron Flesh\" // 20\r\n\t];\r\n\r\n\tstring[] private defensiveSkills = [\r\n\t\t\"Haste of the Fox\", // 0\r\n\t\t\"Blessing of Protection\", // 1\r\n\t\t\"Vanish\", // 2\r\n\t\t\"Sacrifice of the Martyr\", // 3\r\n\t\t\"Evasive Maneuver\", // 4\r\n\t\t\"Perfect Roll\", // 5\r\n\t\t\"Taunt 'Em All\", // 6\r\n\t\t\"Determination of a Degenerate\", // 7\r\n\t\t\"Dodge\", // 8\r\n\t\t\"Protect\", // 9\r\n\t\t\"Taunt\", // 10\r\n\t\t\"Feign Death\", // 11\r\n\t\t\"Counter\", // 12\r\n\t\t\"Shield Block\" // 13\r\n\t];\r\n\r\n\tstring[] private namePrefixes = [\r\n\t\t\"\", // 0\r\n\t\t\"Dom\", // 1\r\n\t\t\"Hoffman\", // 2\r\n\t\t\"Nish\", // 3\r\n\t\t\"Nuge\", // 4\r\n\t\t\"Orgeos\", // 5\r\n\t\t\"Looter\", // 6\r\n\t\t\"Italik\", // 7\r\n\t\t\"Reppap\", // 8\r\n\t\t\"Oni\", // 9\r\n\t\t\"Zurhahs\", // 10\r\n\t\t\"Ackson\", // 11\r\n\t\t\"gm enjoyer\", // 12\r\n\t\t\"Chad\", // 13\r\n\t\t\"Adventurer\"  // 14\r\n\t];\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    IERC721Enumerable constant lootContract = IERC721Enumerable(0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7);\r\n\r\n    mapping(uint256 => uint256) _genSkillCooldown;\r\n\r\n\tuint256 constant skillIdOffset = 57896044618658097711785492504343953926634992332820282019728792003956564819968; // offset skill ids to halfway into the token id range\r\n\tuint16 constant setCap = 16000;\r\n\r\n\tuint256 lastMintedSetId = 8223;\r\n\r\n    // Minting functions\r\n    function _claimSet(uint256 setId) private {\r\n\t\tuint256[] memory tokenIds = _getSetSkillIds(setId);\r\n\r\n\t\tuint256[] memory amounts = new uint256[](9);\r\n\t\tamounts[0] = uint256(1);\r\n\t\tamounts[1] = uint256(1);\r\n\t\tamounts[2] = uint256(1);\r\n\t\tamounts[3] = uint256(1);\r\n\t\tamounts[4] = uint256(1);\r\n\t\tamounts[5] = uint256(1);\r\n\t\tamounts[6] = uint256(1);\r\n\t\tamounts[7] = uint256(1);\r\n\t\tamounts[8] = uint256(1);\r\n\t\t\r\n\t\t_mintBatch(_msgSender(), tokenIds, amounts, \"\");\r\n        _owners[setId] = _msgSender();\r\n    }\r\n\r\n\tfunction claimAvailableSet() public {\r\n\t\trequire(lastMintedSetId <= setCap, \"All available sets have been claimed\");\r\n\r\n\t\t_claimSet(lastMintedSetId);\r\n\t\tlastMintedSetId++;\r\n\t}\r\n\r\n    function claimWithLoot(uint256 tokenId) public {\r\n\t\trequire(lootContract.ownerOf(tokenId) == _msgSender(), \"you do not own the lootbag for this set of skill\");\r\n\t\trequire(!_exists(tokenId), \"Set has already been claimed\");\r\n\t\t_claimSet(tokenId);\r\n    }\r\n\r\n\tfunction claimAllWithLoot() public {\r\n        uint256 tokenBalanceOwner = lootContract.balanceOf(_msgSender());\r\n\r\n        require(tokenBalanceOwner > 0, \"You do not own any Loot bags\");\r\n\r\n        for (uint256 i = 0; i < tokenBalanceOwner; i++) {\r\n            uint256 lootId = lootContract.tokenOfOwnerByIndex(_msgSender(), i);\r\n            if(!_exists(lootId)) {\r\n                _claimSet(lootId);\r\n            }\r\n        }\r\n    }\r\n\r\n    function ownerClaimSet(uint256 setId) public onlyOwner {\r\n        require( setId > 8000 && setId < 8223, \"Not a reserved Set ID\");\r\n\t\trequire(!_exists(setId), \"You already own this set\");\r\n        _claimSet(setId);\r\n    }\r\n\r\n\tfunction skillUp(uint256 skillId) public {\r\n        require(skillId < skillIdOffset, \"Please use the Skill ID, not the token ID\");\r\n\t\tskillId += skillIdOffset;\r\n\t\t_burn(_msgSender(), skillId, 2);\r\n\t\tuint256 skillId1Up = skillId + 2175; // total skills * total name prefixes\r\n\t\t_mint(_msgSender(), skillId1Up, 1, \"\");\r\n\t}\r\n\r\n\tfunction skillDown(uint256 skillId) public {\r\n        require(skillId < skillIdOffset, \"Please use the Skill ID, not the token ID\");\r\n\t\tskillId += skillIdOffset;\r\n\t\t_burn(_msgSender(), skillId, 1);\r\n\t\tuint256 skillId1Down = skillId - 2175;\r\n\t\t_mint(_msgSender(), skillId1Down, 2, \"\");\r\n\t}\r\n\r\n    function skillUpMulti(uint256 skillId, uint256 steps) public {\r\n        require(skillId < skillIdOffset, \"Please use the Skill ID, not the token ID\");\r\n        require(steps > 0, \"Invalid amount of steps\");\r\n\r\n\t\tskillId += skillIdOffset;\r\n\r\n\t\t_burn(_msgSender(), skillId, 1 << steps);\r\n\t\tuint256 skillId1Up = skillId + (2175 * steps) ; // total skills * total name prefixes\r\n\t\t_mint(_msgSender(), skillId1Up, 1, \"\");\r\n\t}\r\n\r\n    function skillDownMulti(uint256 skillId, uint256 steps) public {\r\n        require(skillId < skillIdOffset, \"Please use the Skill ID, not the token ID\");\r\n        require(steps > 0, \"Invalid amount of steps\");\r\n\r\n\t\tskillId += skillIdOffset;\r\n\r\n\t\t_burn(_msgSender(), skillId, 1);\r\n\t\tuint256 skillId1Up = skillId - (2175 * steps) ; // total skills * total name prefixes\r\n\t\t_mint(_msgSender(), skillId1Up, 1 << steps, \"\");\r\n    }\r\n\r\n\tfunction generateSkill(uint256 setId) public {\r\n        require(_balances[setId][_msgSender()] > 0, \"You do not own this set\");\r\n        uint256 lastBlock = _genSkillCooldown[setId];\r\n\r\n        require(lastBlock == 0 || block.number >= lastBlock, \"This set has generated a skill too recently\");\r\n        \r\n        uint256 rand = uint256(keccak256(abi.encodePacked(setId, block.number ^ block.basefee ^ tx.gasprice )));\r\n        uint8 categoryIndex = uint8(rand % 8);\r\n        uint8 categoryLength;\r\n\r\n        if(categoryIndex == 0) categoryLength = 21;\r\n        else if(categoryIndex == 1) categoryLength = 16;\r\n        else if(categoryIndex == 2) categoryLength = 24;\r\n        else if(categoryIndex == 3) categoryLength = 18;\r\n        else if(categoryIndex == 4) categoryLength = 17;\r\n        else if(categoryIndex == 5) categoryLength = 14;\r\n        else if(categoryIndex == 6) categoryLength = 21;\r\n        else categoryLength = 14;\r\n        \r\n\t\tuint256 skillId = _getSkillId(rand, categoryIndex, categoryLength) + skillIdOffset;\r\n\r\n        _mint(_msgSender(), skillId, 1, \"\");\r\n\r\n        if( ownsWholeSet(setId) ) _genSkillCooldown[setId] = block.number + 50000;\r\n        else _genSkillCooldown[setId] = block.number + 250000;\r\n    }\r\n\r\n    function _exists(uint256 setId) internal view returns (bool) {\r\n        return _owners[setId] != address(0);\r\n    }\r\n\r\n    function ownsWholeSet(uint256 setId) public view returns( bool ){\r\n        uint256[] memory tokenIds = _getSetSkillIds(setId);\r\n        for( uint256 i = 0; i < 9; i++)\r\n        {\r\n            if( _balances[tokenIds[i]][_msgSender()] == 0 ) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Transfer functions\r\n\tfunction transferSkill(address from, address to, uint256 skillId, uint256 amount, bytes memory data) public {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n        require(skillId < skillIdOffset, \"Please use the Skill ID, not the token ID\");\r\n\t\t_safeTransferFrom(from, to, skillId + skillIdOffset, amount, data);\r\n\t}\r\n\r\n\tfunction batchTransferSkills(address from, address to, uint256[] memory skillIds, uint256[] memory amounts, bytes memory data) public {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n\t\tfor( uint256 i = 0; i < 145; i++)\r\n\t\t{\r\n            require(skillIds[i] < skillIdOffset, \"Please use the Skill ID, not the token ID\");\r\n\t\t\tskillIds[i] += skillIdOffset;\r\n\t\t}\r\n\t\t_safeBatchTransferFrom(from, to, skillIds, amounts, data);\r\n\t}\r\n\r\n\tfunction transferSet(address from, address to, uint256 setId, bytes memory data) public {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n\t\tuint256[] memory tokenIds = _getSetSkillIds(setId);\r\n\r\n\t\tuint256[] memory amounts = new uint256[](9);\r\n\t\tamounts[0] = uint256(1);\r\n\t\tamounts[1] = uint256(1);\r\n\t\tamounts[2] = uint256(1);\r\n\t\tamounts[3] = uint256(1);\r\n\t\tamounts[4] = uint256(1);\r\n\t\tamounts[5] = uint256(1);\r\n\t\tamounts[6] = uint256(1);\r\n\t\tamounts[7] = uint256(1);\r\n\t\tamounts[8] = uint256(1);\r\n\t\t\r\n\t\t_safeBatchTransferFrom(from, to, tokenIds, amounts, data);\r\n\t}\r\n\r\n    // Override 1155 transfer functions to handle Set/Skill ID offset\r\n    function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) public override {\r\n        if( id >= skillIdOffset ) \r\n        {\r\n            require(\r\n                from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n                \"ERC1155: caller is not owner nor approved\"\r\n            );\r\n            _safeTransferFrom(from, to, id, amount, data);\r\n        }\r\n        else\r\n        {\r\n            transferSet(from, to, id, data);\r\n        }\r\n    }\r\n\r\n    function safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: transfer caller is not owner nor approved\"\r\n        );\r\n        bool setFound = false;\r\n        bool skillFound = false;\r\n        for( uint256 i = 0; i < ids.length; i++ )\r\n        {\r\n            if( ids[i] >= skillIdOffset ) \r\n            {\r\n                skillFound = true;\r\n            }\r\n            else\r\n            {\r\n                require(amounts[i] == 1, \"You cannot transfer more than 1 set as there is only 1 of each\");\r\n                setFound = true;\r\n            }\r\n        }\r\n\r\n        require( !(setFound && skillFound), \"Please attempt to only transfer Set IDs or Skill IDs in one batch\" );\r\n        \r\n        if( skillFound )\r\n        {\r\n            _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n        }\r\n        else\r\n        {\r\n            for( uint256 i = 0; i < ids.length; i++ )\r\n            {\r\n                transferSet(from, to, ids[i], data);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Skill data\r\n\tfunction getSkillString(uint256 skillId) public view returns (string memory)\r\n\t{\r\n\t\tstring memory output;\r\n\t\tuint256 skillIndex = skillId / 145;\r\n\t\tuint256 skillBaseId = skillId % 145;\r\n\t\t\r\n\t\tif( skillBaseId < 21 )\r\n\t\t{\r\n\t\t\toutput = meleeAttacks[skillBaseId];\r\n\t\t}\r\n\t\telse if( skillBaseId < 37 )\r\n\t\t{\r\n\t\t\toutput = rangeAttacks[skillBaseId - 21];\r\n\t\t}\r\n\t\telse if( skillBaseId < 61 )\r\n\t\t{\r\n\t\t\toutput = elementalSpells[skillBaseId - 37];\r\n\t\t}\r\n\t\telse if( skillBaseId < 79 )\r\n\t\t{\r\n\t\t\toutput = spiritualSpells[skillBaseId - 61];\r\n\t\t}\r\n\t\telse if( skillBaseId < 96 )\r\n\t\t{\r\n\t\t\toutput = curses[skillBaseId - 79];\r\n\t\t}\r\n\t\telse if( skillBaseId < 110 )\r\n\t\t{\r\n\t\t\toutput = heals[skillBaseId - 96];\r\n\t\t}\r\n\t\telse if( skillBaseId < 131 )\r\n\t\t{\r\n\t\t\toutput = buffs[skillBaseId - 110];\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\toutput = defensiveSkills[skillBaseId - 131];\r\n\t\t}\r\n\r\n\t\tuint256 skillNamePrefix = skillIndex % 15; // namePrefixes.length\r\n\r\n\t\tif( skillNamePrefix > 0 )\r\n\t\t{\r\n\t\t\toutput = string(abi.encodePacked(namePrefixes[skillNamePrefix], \"'s \", output));\r\n\t\t}\r\n\r\n\t\tuint256 skillLevel = skillIndex / 15; // namePrefixes.length\r\n\t\tif( skillLevel > 0 )\r\n\t\t{\r\n\t\t\toutput = string(abi.encodePacked(output, \" +\", toString(skillLevel)));\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\t}\r\n\r\n\tfunction _getSkillId(uint256 setId, uint8 categoryIndex, uint8 categoryLength) internal view returns (uint256 skillId) {\r\n        uint256 rand = uint256(keccak256(abi.encodePacked(setId, categoryIndex)));\r\n        uint256 rarity = rand % 1000;\r\n        if (rarity < 4)\r\n        {\r\n            skillId = rand % categoryLength % 4;\r\n        }\r\n        else if (rarity < 40)\r\n        {\r\n            skillId = rand % categoryLength % 4 + 4;\r\n        }\r\n        else\r\n        {\r\n            skillId = rand % (categoryLength - 8) + 8;\r\n        }\r\n\r\n\t\tskillId += categoryIndex;\r\n        \r\n\t\tuint256 nameRand = uint256(keccak256(abi.encodePacked(rand))) % 1000;\r\n\t\tif (nameRand < 40)\r\n\t\t{\r\n\t\t\tskillId = (nameRand % 15) * 145 + skillId;\r\n\t\t}\r\n        return skillId;\r\n    }\r\n    \r\n\tfunction _getSetSkillIds(uint256 setId) internal view returns (uint256[] memory) {\r\n\t\tuint256[] memory tokenIds = new uint256[](9);\r\n\r\n\t\ttokenIds[0] = _getSkillId(setId, 0, 21) + skillIdOffset; // meleeAttacks\r\n\t\ttokenIds[1] = _getSkillId(setId, 21, 16) + skillIdOffset; // rangeAttacks\r\n\t\ttokenIds[2] = _getSkillId(setId, 37, 24) + skillIdOffset; // elementalSpells\r\n\t\ttokenIds[3] = _getSkillId(setId, 61, 18) + skillIdOffset; // spiritualSpells\r\n\t\ttokenIds[4] = _getSkillId(setId, 79, 17) + skillIdOffset; // curses\r\n\t\ttokenIds[5] = _getSkillId(setId, 96, 14) + skillIdOffset; // heals\r\n\t\ttokenIds[6] = _getSkillId(setId, 110, 21) + skillIdOffset; // buffs\r\n\t\ttokenIds[7] = _getSkillId(setId, 131, 14) + skillIdOffset; // defensiveSkills\r\n\r\n\t\ttokenIds[8] = setId;\r\n\r\n\t\treturn tokenIds;\r\n\t}\r\n\r\n    // get functions\r\n    function getGenSkillCooldown(uint256 setId) public view returns (uint256) {\r\n\t\trequire( setId < skillIdOffset, \"Not a valid Set ID\");\r\n        return _genSkillCooldown[setId];\r\n    }\r\n\r\n    function balanceOfSkill(address account, uint256 skillId) public view returns (uint256) {\r\n        require( skillId < skillIdOffset, \"Please use the Skill ID, not the token ID\");\r\n        return _balances[skillId + skillIdOffset][account];\r\n    }\r\n\r\n\tfunction getMeleeAttack(uint256 setId) public view returns (string memory) {\r\n\t\trequire( setId < skillIdOffset, \"Not a valid Set ID\");\r\n\t\treturn getSkillString(_getSkillId(setId, 0, 21));\r\n\t}\r\n\t\r\n\tfunction getRangeAttack(uint256 setId) public view returns (string memory) {\r\n\t\trequire( setId < skillIdOffset, \"Not a valid Set ID\");\r\n\t\treturn getSkillString(_getSkillId(setId, 21, 16));\r\n\t}\r\n\t\r\n\tfunction getElementalSpell(uint256 setId) public view returns (string memory) {\r\n\t\trequire( setId < skillIdOffset, \"Not a valid Set ID\");\r\n\t\treturn getSkillString(_getSkillId(setId, 37, 24));\r\n\t}\r\n\t\r\n\tfunction getSpiritualSpell(uint256 setId) public view returns (string memory) {\r\n\t\trequire( setId < skillIdOffset, \"Not a valid Set ID\");\r\n\t\treturn getSkillString(_getSkillId(setId, 61, 18));\r\n\t}\r\n\r\n\tfunction getCurse(uint256 setId) public view returns (string memory) {\r\n\t\trequire( setId < skillIdOffset, \"Not a valid Set ID\");\r\n\t\treturn getSkillString(_getSkillId(setId, 79, 17));\r\n\t}\r\n\t\r\n    function getHeal(uint256 setId) public view returns (string memory) {\r\n\t\trequire( setId < skillIdOffset, \"Not a valid Set ID\");\r\n        return getSkillString(_getSkillId(setId, 96, 14));\r\n    }\r\n      \r\n\tfunction getBuff(uint256 setId) public view returns (string memory) {\r\n\t\trequire( setId < skillIdOffset, \"Not a valid Set ID\");\r\n\t\treturn getSkillString(_getSkillId(setId, 110, 21));\r\n\t}\r\n\t\r\n\tfunction getDefensiveSkill(uint256 setId) public view returns (string memory) {\r\n\t\trequire( setId < skillIdOffset, \"Not a valid Set ID\");\r\n\t\treturn getSkillString(_getSkillId(setId, 131, 14));\r\n\t}\r\n    \r\n    function uri(uint256 tokenId) override public view returns (string memory) {\r\n\t\tif( tokenId > skillIdOffset )\r\n\t\t{\r\n\t\t\tstring[3] memory parts;\r\n        \tparts[0] = '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 350 350\"><style>.base { fill: white; font-family: serif; font-size: 14px; }</style><rect width=\"100%\" height=\"100%\" fill=\"black\" /><text x=\"10\" y=\"20\" class=\"base\">';\r\n        \tparts[1] = getSkillString(tokenId - skillIdOffset);\r\n\t\t\tparts[2] = '</text></svg>';\r\n\r\n\t\t\tstring memory output = string(abi.encodePacked(parts[0], parts[1], parts[2]));\r\n\t\t\t\r\n\t\t\tstring memory json = Base64.encode(bytes(string(abi.encodePacked('{\"name\": \"Skill #', toString(tokenId - skillIdOffset), '\", \"description\": \"Skills are randomized adventurer abilities generated and stored on chain.\", \"image\": \"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\"}'))));\r\n\t\t\toutput = string(abi.encodePacked('data:application/json;base64,', json));\r\n\r\n\t\t\treturn output;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tstring[17] memory parts;\r\n\t\t\tparts[0] = '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 350 350\"><style>.base { fill: white; font-family: serif; font-size: 14px; }</style><rect width=\"100%\" height=\"100%\" fill=\"black\" /><text x=\"10\" y=\"20\" class=\"base\">';\r\n\r\n\t\t\tparts[1] = getMeleeAttack(tokenId);\r\n\r\n\t\t\tparts[2] = '</text><text x=\"10\" y=\"40\" class=\"base\">';\r\n\r\n\t\t\tparts[3] = getRangeAttack(tokenId);\r\n\r\n\t\t\tparts[4] = '</text><text x=\"10\" y=\"60\" class=\"base\">';\r\n\r\n\t\t\tparts[5] = getElementalSpell(tokenId);\r\n\r\n\t\t\tparts[6] = '</text><text x=\"10\" y=\"80\" class=\"base\">';\r\n\r\n\t\t\tparts[7] = getSpiritualSpell(tokenId);\r\n\r\n\t\t\tparts[8] = '</text><text x=\"10\" y=\"100\" class=\"base\">';\r\n\r\n\t\t\tparts[9] = getCurse(tokenId);\r\n\r\n\t\t\tparts[10] = '</text><text x=\"10\" y=\"120\" class=\"base\">';\r\n\r\n\t\t\tparts[11] = getHeal(tokenId);\r\n\r\n\t\t\tparts[12] = '</text><text x=\"10\" y=\"140\" class=\"base\">';\r\n\r\n\t\t\tparts[13] = getBuff(tokenId);\r\n\r\n\t\t\tparts[14] = '</text><text x=\"10\" y=\"160\" class=\"base\">';\r\n\r\n\t\t\tparts[15] = getDefensiveSkill(tokenId);\r\n\r\n\t\t\tparts[16] = '</text></svg>';\r\n\r\n\t\t\tstring memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]));\r\n\t\t\toutput = string(abi.encodePacked(output, parts[9], parts[10], parts[11], parts[12], parts[13], parts[14], parts[15], parts[16]));\r\n\t\t\t\r\n\t\t\tstring memory json = Base64.encode(bytes(string(abi.encodePacked('{\"name\": \"Set #', toString(tokenId), '\", \"description\": \"Skills are randomized adventurer abilities generated and stored on chain.\", \"image\": \"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\"}'))));\r\n\t\t\toutput = string(abi.encodePacked('data:application/json;base64,', json));\r\n\r\n\t\t\treturn output;\r\n\t\t}\r\n    }\r\n\r\n    constructor() ERC1155(\"Skills\") Ownable() {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"skillId\",\"type\":\"uint256\"}],\"name\":\"balanceOfSkill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"skillIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferSkills\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllWithLoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAvailableSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimWithLoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"generateSkill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"getBuff\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"getCurse\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"getDefensiveSkill\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"getElementalSpell\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"getGenSkillCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"getHeal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"getMeleeAttack\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"getRangeAttack\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"skillId\",\"type\":\"uint256\"}],\"name\":\"getSkillString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"getSpiritualSpell\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"ownerClaimSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"ownsWholeSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"skillId\",\"type\":\"uint256\"}],\"name\":\"skillDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"skillId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"steps\",\"type\":\"uint256\"}],\"name\":\"skillDownMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"skillId\",\"type\":\"uint256\"}],\"name\":\"skillUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"skillId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"steps\",\"type\":\"uint256\"}],\"name\":\"skillUpMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"skillId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferSkill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Skills","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f558ef904a297907c01590d5af2b3b9c2e94972166bb470d56db1eea4b9dd5e3"}]}