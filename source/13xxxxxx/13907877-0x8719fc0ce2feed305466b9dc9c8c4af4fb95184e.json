{"status":"1","message":"OK","result":[{"SourceCode":"// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/ITetraguard.sol\r\n\r\n// contracts/ITetraguard.sol\r\n\r\npragma solidity 0.8.11;\r\n\r\n\r\ninterface ITetraguard is IERC20 {\r\n    function upgradeToken(uint256 amount, address tokenHolder) external returns (uint256);\r\n}\r\n// File: contracts/IQuadron.sol\r\n\r\n// contracts/IQuadron.sol\r\n\r\npragma solidity 0.8.11;\r\n\r\n\r\ninterface IQuadron is IERC20 {\r\n    function buy(uint256 minTokensRequested) external payable;\r\n    function sell(uint256 amount) external;\r\n    function quoteAvgPriceForTokens(uint256 amount) external view returns (uint256);\r\n    function updatePhase() external;\r\n    function getPhase() external returns (uint8);\r\n    function mintBonus() external;\r\n    function addApprovedToken(address newToken) external;\r\n}\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/Tetraguard.sol\r\n\r\n// contracts/Tetraguard.sol\r\n\r\npragma solidity 0.8.11;\r\n\r\n\r\n\r\n\r\n\r\n/** @title Tetraguard Contract. */\r\ncontract Tetraguard is ITetraguard, ERC20 {\r\n\r\n    // Declare uniswap V2 router.  External but trusted contract maintained by Uniswap.org\r\n    IUniswapV2Router02 private uniswapRouter;\r\n\r\n    // Declare Quadron Token interface\r\n    IQuadron private qToken;\r\n\r\n    // -- Declare addresses for uniswap router, uniswap pairs, and reserve contract --\r\n    address private UNISWAP_ROUTER_ADDRESS; // 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address private PAXG; // 0x45804880De22913dAFE09f4980848ECE6EcbAf78;\r\n    address private WBTC; // 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\r\n    address private RESERVE;\r\n    address private UPGRADE_TOKEN;\r\n\r\n    // -- Ratios of coins --\r\n    uint32 private constant R_WBTC = 1;\r\n    uint32 private constant R_ETH = 13;\r\n    uint32 private constant R_PAXG = 26;\r\n    uint32 private constant R_RESERVE = 23632;\r\n\r\n    // -- Constants--\r\n    // supply of quadrons at the end of phase 1\r\n    uint256 internal constant PHASE_1_END_SUPPLY = 65e6 * 1e18; \r\n    // supply of quadrons at the end of phase 1\r\n    uint256 internal constant PHASE_2_END_SUPPLY = 68333333333333333333333333;\r\n    // maximum buy order size (ether)\r\n    uint256 internal constant MAX_BUY_ORDER = 2000 ether;\r\n    // maximum sell order size (Tetraguard)\r\n    uint256 internal constant MAX_SELL_ORDER = 400e3 * 1e18;    \r\n\r\n    // -- Track remaining bonus tokens, used in the event of rounding errors --\r\n    uint256 private remAlphaBonus = 7.5e6 * 1e18;\r\n    uint256 private remBetaBonus = 4.5e6 * 1e18;\r\n    uint256 private remGammaBonus = 3e6 * 1e18;\r\n    uint256 private remAlphaRTokens = 6666666666666666666666667;\r\n    uint256 private remBetaRTokens = 6666666666666666666666667;\r\n    uint256 private remGammaRTokens = 6666666666666666666666666;\r\n        \r\n    // -- Declare state variables --\r\n    address private owner;  // Contract owner\r\n\r\n    /** @dev Tetraguard Token Constructor\r\n     *  @param _quadron Address of Quadron\r\n     *  @param _paxg Address of PAXG\r\n     *  @param _wbtc Address of WBTC\r\n     *  @param _uniswapRouter Address of Uniswap V2 Router     \r\n     */\r\n    constructor(address _quadron, address _paxg, address _wbtc, address _uniswapRouter) \r\n        ERC20(\"Tetraguard\", \"TETRA\") {\r\n        \r\n        // Instantiate uniswap router\r\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\r\n\r\n        // Instantiate quadron\r\n        qToken = IQuadron(_quadron);\r\n\r\n        // Assign contract owner\r\n        owner = address(msg.sender);\r\n\r\n        UNISWAP_ROUTER_ADDRESS = _uniswapRouter;\r\n        PAXG = _paxg;\r\n        WBTC = _wbtc;\r\n        RESERVE = _quadron;\r\n        UPGRADE_TOKEN = msg.sender; // Initially, set the upgrade token address to the owner\r\n    }\r\n\r\n    /** @dev Exchanges sent Ether for Tetraguard tokens, which represents a basket of tokens\r\n     * @param deadline Deadline after which the transaction will revert if not processed\r\n     * @param priceWBTC Max price (in wei) for one unit of wbtc\r\n     * @param pricePAXG Max price (in wei) for one unit of paxg\r\n     */\r\n    function buy(uint256 deadline, uint256 priceWBTC, uint256 pricePAXG) external payable {\r\n        require(deadline >= block.timestamp, \"Deadline expired\");\r\n        require(msg.value <= MAX_BUY_ORDER, \"Buy exceeded the maximum purchase amount\");\r\n        \r\n        uint256 PriceOfBase;\r\n        uint256 PriceOfBaseWBTC;\r\n        uint256 PriceOfBasePAXG;\r\n        uint256 PriceOfBaseEth;\r\n        uint256 PriceOfReserve;\r\n        uint256 prevRTokenTotalSupply = qToken.totalSupply();\r\n        uint256 balance = address(this).balance;\r\n\r\n        // This is the lowest price (in WEI) of one unit of Tetraguard (1e-4 Tetraguard)\r\n        (PriceOfBase, PriceOfBaseWBTC, PriceOfBasePAXG, PriceOfBaseEth, PriceOfReserve) = getPriceOfBase();\r\n        \r\n        // Now calculate how many units of Tetraguard we can purchase\r\n        require(baseTokensToMint(PriceOfBase) >= 1, \"Not enough Ether to purchase .0001 Tetraguard\");\r\n       \r\n        require(1e4 * PriceOfBaseWBTC / R_WBTC <= priceWBTC, \"Maximum wbtc price exceeded.\");\r\n        require(1e4 * PriceOfBasePAXG / R_PAXG <= pricePAXG, \"Maximum paxg price exceeded.\");\r\n\r\n        // Transfer 1% of the Base Price to quadron\r\n        payable(RESERVE).transfer(PriceOfBase * baseTokensToMint(PriceOfBase) * 1 / 100);\r\n\r\n        // 101/100 send 1% more in case of underflow\r\n        qToken.buy{value: baseTokensToMint(PriceOfBase) * PriceOfReserve * 101 / 100}(reserveTokensToMint(baseTokensToMint(PriceOfBase)));\r\n\r\n        // Purchase WBTC\r\n        //   1e4 accounts for 8 decimal places of WBTC, and that minimum purchase by this contract is 1e-4\r\n        uniswapRouter.swapETHForExactTokens{ \r\n            value: (baseTokensToMint(PriceOfBase) * PriceOfBaseWBTC * 101 / 100) \r\n            }(baseTokensToMint(PriceOfBase) * R_WBTC * 1e4, getPathForETHtoToken(WBTC), address(this), deadline);\r\n\r\n        // Purchase PAXG\r\n        //   (10000 / 9998) to account for the PAXG 0.02% fee\r\n        uniswapRouter.swapETHForExactTokens{ \r\n            value: (baseTokensToMint(PriceOfBase) * PriceOfBasePAXG * 101 / 100) \r\n            }(baseTokensToMint(PriceOfBase) * R_PAXG * 1e14 * 10000 / 9998, getPathForETHtoToken(PAXG), address(this), deadline);\r\n\r\n        balance = msg.value - (balance - address(this).balance);  // amount of eth left in this transaction\r\n\r\n        // Early Buyer Bonus\r\n        if(prevRTokenTotalSupply <= PHASE_1_END_SUPPLY) {\r\n            bool success = qToken.transfer(msg.sender, calcBonusTokens(reserveTokensToMint(baseTokensToMint(PriceOfBase))));\r\n            require(success, \"Early buyer bonus transfer failed.\");\r\n        }\r\n        \r\n        // Mint the Tetraguard Token (basket of coins)\r\n        _mint(msg.sender, baseTokensToMint(PriceOfBase) * 1e14);\r\n\r\n        // Refund any leftover ETH that the contract has to the user, minus amount kept for basket.  \r\n        //   This takes care of the ether portion of the basket, as well\r\n        (bool successRefund,) = msg.sender.call{ value: (balance - amountEthInCoin(baseTokensToMint(PriceOfBase), PriceOfBaseEth)) }(\"\");\r\n        require(successRefund, \"Refund failed\");        \r\n    }\r\n\r\n    /** @dev Exchanges your Tetraguard Tokens for Ether, by unwrapping the basket \r\n     * of tokens and selling at market price\r\n     * @param amount Amount of Tetraguard Token to exchange for Ether\r\n     * @param deadline Deadline after which the transaction will revert if not processed\r\n     * @param priceWBTC Min price (in wei) for one unit of wbtc\r\n     * @param pricePAXG Min price (in wei) for one unit of paxg     \r\n     */\r\n    function sell(uint256 amount, uint256 deadline, uint256 priceWBTC, uint256 pricePAXG) external payable {\r\n        require(balanceOf(msg.sender) >= amount, \"Insufficient Tetraguard to sell\");\r\n        require(deadline >= block.timestamp, \"Deadline expired\");\r\n        require(amount <= MAX_SELL_ORDER, \"Sell exceeded maximum sale amount\");\r\n\r\n        bool success;\r\n\r\n        uint256 amountBaseToken = (amount / 1e14) * 1e14;  // Get floor.  Mimimum amount of Tetraguard Tokens to transact is .0001\r\n        require(amountBaseToken >= 1e14, \"The minimum sale amount is .0001 token\");\r\n\r\n        uint256 MinProceedsWBTC;\r\n        uint256 MinProceedsPAXG;\r\n        \r\n        (MinProceedsWBTC, MinProceedsPAXG) = estimateProceeds(amountBaseToken);\r\n\r\n        require(1e18 * MinProceedsWBTC / (amountBaseToken * R_WBTC) >= priceWBTC, \"Minimum wbtc price not met.\");\r\n        require(1e18 * MinProceedsPAXG / (amountBaseToken * R_PAXG) >= pricePAXG, \"Minimum paxg price not met.\");\r\n\r\n        uint256 coinValueStart = address(this).balance;\r\n\r\n        // Swap PAXG and WBTC back to ETH\r\n        require(IERC20(WBTC).approve(address(UNISWAP_ROUTER_ADDRESS), \r\n            amountBaseToken * R_WBTC / 1e10), 'Approve failed');\r\n        uniswapRouter.swapExactTokensForETH(amountBaseToken * R_WBTC / 1e10, MinProceedsWBTC, getPathFoqTokentoETH(WBTC), address(this), deadline);  // 1e10 accounts for 8 decimal places of WBTC, and that minimum purchase by this contract is 1e-4\r\n        \r\n        require(IERC20(PAXG).approve(address(UNISWAP_ROUTER_ADDRESS), amountBaseToken * R_PAXG), 'Approve failed');\r\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(amountBaseToken * R_PAXG, MinProceedsPAXG, getPathFoqTokentoETH(PAXG), address(this), deadline);\r\n\r\n        // If in Phase 3, sell Quadrons\r\n        if(qToken.getPhase() == 3) {\r\n            qToken.sell(amountBaseToken * R_RESERVE);\r\n        } else {\r\n            // return Quadrons tokens to seller's wallet\r\n            success = qToken.transfer(msg.sender, amountBaseToken * R_RESERVE);\r\n            require(success, \"Early buyer bonus transfer failed.\");\r\n        }\r\n\r\n        uint coinValueEnd = address(this).balance;\r\n        uint proceedsFromSwap = coinValueEnd - coinValueStart + (amountBaseToken * R_ETH);\r\n\r\n        // Transfer 1% transaction fee\r\n        payable(RESERVE).transfer(proceedsFromSwap * 1 / 100); // transfer 1% fee to the Quadron\r\n\r\n        _burn(msg.sender, amountBaseToken);\r\n\r\n        // Transfer sale of Tetraguard Tokens\r\n        (success,) = msg.sender.call{ value: (proceedsFromSwap * 99 / 100)}(\"\");\r\n        require(success, \"Payment failed\");\r\n    }\r\n\r\n    /** @dev reserveTokensToMint calculates the number of Quadrons to mint\r\n     *  @param tetraguardTokensToMint is the amount of base tokens\r\n     */\r\n    function reserveTokensToMint(uint256 tetraguardTokensToMint) internal pure returns (uint256) {\r\n        return tetraguardTokensToMint * R_RESERVE * 1e14;\r\n    }\r\n\r\n    /** @dev baseTokensToMint calculates the number of quadrons to mint\r\n     *  @param priceOfBase is the price of the base token in the basket\r\n     */\r\n    function baseTokensToMint(uint256 priceOfBase) internal view returns (uint256) {\r\n        require(priceOfBase > 0, \"The price of base token must be greater than zero\");\r\n        return msg.value / (101 * priceOfBase / 100);  // 1.01 represents the 1% Tetraguard fee\r\n    }    \r\n\r\n    /** @dev getPriceOfBase calculates the price (in wei) of the smallest tradable unit of Tetraguard.  The smallest\r\n     *  tradable unit is .0001 Token (1e14).\r\n     */\r\n    function getPriceOfBase() internal view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        // We need to find the average cost of each token, assuming we would trade the entire msg.value.\r\n        // This is done to ensure there is sufficient liquidity for the swap.\r\n       \r\n        // Assumes 0.0001 token will cost at least 0.0001 Eth (1e14 wei)\r\n        require(msg.value >= 1e14, \"Insufficient ether sent to purchase 0.0001 token\");\r\n        \r\n        // Get the amount of tokens received in exchange for msg.value\r\n        uint256 PAXGtoETH = uniswapRouter.getAmountsOut(msg.value, getPathForETHtoToken(PAXG))[1];\r\n        uint256 WBTCtoETH = uniswapRouter.getAmountsOut(msg.value, getPathForETHtoToken(WBTC))[1];\r\n\r\n        uint256 PriceOfBasePAXG;\r\n        uint256 PriceOfBaseWBTC;\r\n        uint256 PriceOfBaseEth = 1e14; // base price of Eth\r\n\r\n        //*** Handle 3 scenarios in the event of future price changes:\r\n        // 1) getAmountsOut < msg.value\r\n        //    This happens when price of the token is less than 1 Eth.\r\n        // 2) getAmountsOut returns 0\r\n        //    This happens when price of token is much greater than msg.value\r\n        // 3) getAmountsOut returns 1\r\n        //    This happens when the price of the token is very similar to msg.value\r\n\r\n        // Process PAXG\r\n        // Calculate the average price (wei) for 0.0001 tokens\r\n        require(PAXGtoETH > 0, \"The price of PAXG is too high for this amount of Eth.\");\r\n        PriceOfBasePAXG = 1e14 * msg.value / PAXGtoETH;\r\n        require(PriceOfBasePAXG > 0, \"The price of PAXG has dropped too low to trade.\");\r\n        \r\n        // Process WBTC\r\n        // Calculate the average price (wei) for 0.0001 tokens\r\n        require(WBTCtoETH > 0, \"The price of WBTC is too high for this amount of Eth.\");\r\n        PriceOfBaseWBTC = 1e4 * msg.value / WBTCtoETH; // 1e4 is required to scale WBTC, since it uses a fewer decimals than Eth.\r\n        require(PriceOfBaseWBTC > 0, \"The price of WBTC has dropped to low to trade.\");\r\n        \r\n        // Process Quadron\r\n        uint256 PriceOfReserveEth = qToken.quoteAvgPriceForTokens(msg.value);\r\n\r\n        // Apply ratios of coins\r\n        PriceOfBasePAXG = R_PAXG * PriceOfBasePAXG * 10000 / 9998; // (10000 / 9998) to account for the PAXG 0.02% fee;\r\n        PriceOfBaseEth = R_ETH * PriceOfBaseEth;\r\n        PriceOfBaseWBTC = R_WBTC * PriceOfBaseWBTC;\r\n        PriceOfReserveEth = R_RESERVE * PriceOfReserveEth / 1e4; // Scale to 0.0001 quadrons\r\n\r\n        // This is the lowest price (in WEI) of one unit of Tetraguard\r\n        return (PriceOfBaseWBTC + PriceOfBasePAXG + PriceOfBaseEth + PriceOfReserveEth, PriceOfBaseWBTC, PriceOfBasePAXG, PriceOfBaseEth, PriceOfReserveEth);\r\n    }\r\n\r\n    /** @dev estimateProceeds calculates the price (in wei) of the sale proceeds\r\n     *  @param amount Amount of Tetraguard Token to exchange for Ether\r\n     */\r\n    function estimateProceeds(uint256 amount) internal view returns (uint256, uint256) {\r\n        // Get the amount of eth received\r\n        uint256 PAXGtoETH = uniswapRouter.getAmountsOut(amount * R_PAXG, getPathFoqTokentoETH(PAXG))[1];\r\n        uint256 WBTCtoETH = uniswapRouter.getAmountsOut(amount * R_WBTC / 1e10, getPathFoqTokentoETH(WBTC))[1];\r\n\r\n        uint256 PriceOfBasePAXG;\r\n        uint256 PriceOfBaseWBTC;\r\n\r\n        // (10000 / 9998) to account for the PAXG 0.02% fee\r\n        PriceOfBasePAXG = PAXGtoETH * 9998 / 10000;\r\n        PriceOfBaseWBTC = WBTCtoETH;\r\n\r\n        // This is the lowest price (in WEI) for the amount of Tetraguard\r\n        return (PriceOfBaseWBTC, PriceOfBasePAXG);\r\n    }\r\n\r\n    function getPathForETHtoToken(address tokenAddress) private view returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapRouter.WETH();\r\n        path[1] = tokenAddress;\r\n        \r\n        return path;\r\n    }\r\n    \r\n    function getPathFoqTokentoETH(address tokenAddress) private view returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenAddress;\r\n        path[1] = uniswapRouter.WETH();        \r\n        \r\n        return path;\r\n    }\r\n\r\n    /** @dev amountEthInCoin multiplies the tokens to mint by the base price of Eth\r\n     *  @param tokensToMint number of Tetraguard tokens to mint\r\n     *  @param priceOfBaseEth the price of eth\r\n     *  @return tokensToMint * priceOfBaseEth\r\n     */\r\n    function amountEthInCoin(uint tokensToMint, uint priceOfBaseEth) private pure returns (uint) {\r\n        // Calculate the amount of Ether in the coin\r\n        return tokensToMint * priceOfBaseEth;\r\n    }\r\n\r\n    /** @dev calcBonusTokens calculates the number of bonus tokens to send the buyer\r\n     *  @param qTokensToMint amount of new quadrons that are minted during the\r\n     *  purchase of Tetraguard.\r\n     *  @return total bonus tokens to transfer to the early buyer\r\n     */    \r\n    function calcBonusTokens(uint256 qTokensToMint) private returns (uint256) {\r\n        uint256 alpha = 0;  // Amount of bonus tokens for phase alpha\r\n        uint256 beta = 0;  // Amount of bonus tokens for phase beta\r\n        uint256 gamma = 0;  // Amount of bonus tokens for phase gamma\r\n        uint256 remainder = qTokensToMint;\r\n\r\n        // Rounding errors create scenarios where some bonus quadrons\r\n        // can get lost.  Iterate through each phase and zero out\r\n        // remaining bonus tokens due to underflow.\r\n\r\n        if(remainder > 0 && remAlphaRTokens > 0) {\r\n            if(remainder > remAlphaRTokens) {\r\n                remainder = remainder - remAlphaRTokens;\r\n                remAlphaRTokens = 0;\r\n                alpha = remAlphaBonus;\r\n                remAlphaBonus = 0;\r\n            } else {\r\n                remAlphaRTokens = remAlphaRTokens - remainder;\r\n                alpha = remainder * 1125 / 1000;\r\n                remainder = 0;\r\n                \r\n                if(alpha > remAlphaBonus) {\r\n                    alpha = remAlphaBonus;\r\n                    remAlphaBonus = 0;\r\n                    remAlphaRTokens = 0;\r\n                } else {\r\n                    remAlphaBonus = remAlphaBonus - alpha;\r\n                }\r\n            }\r\n        }\r\n        \r\n        if(remainder > 0 && remBetaRTokens > 0) {\r\n            if(remainder > remBetaRTokens) {\r\n                remainder = remainder - remBetaRTokens;\r\n                remBetaRTokens = 0;\r\n                beta = remBetaBonus;\r\n                remBetaBonus = 0;\r\n            } else {\r\n                remBetaRTokens = remBetaRTokens - remainder;\r\n                beta = remainder * 675 / 1000;\r\n                remainder = 0;\r\n                \r\n                if(beta > remBetaBonus) {\r\n                    beta = remBetaBonus;\r\n                    remBetaBonus = 0;\r\n                    remBetaRTokens = 0;\r\n                } else {\r\n                    remBetaBonus = remBetaBonus - beta;\r\n                }\r\n            }            \r\n        }\r\n        \r\n        if(remainder > 0 && remGammaRTokens > 0) {\r\n            if(remainder > remGammaRTokens) {\r\n                remGammaRTokens = 0;\r\n                gamma = remGammaBonus;\r\n                remGammaBonus = 0;\r\n            } else {\r\n                remGammaRTokens = remGammaRTokens - remainder;\r\n                gamma = remainder * 45 / 100;\r\n                \r\n                if(gamma > remGammaBonus) {\r\n                    gamma = remGammaBonus;\r\n                    remGammaBonus = 0;\r\n                    remGammaRTokens = 0;\r\n                } else {\r\n                    remGammaBonus = remGammaBonus - gamma;\r\n                }\r\n            }\r\n        }\r\n     \r\n        return alpha + beta + gamma;\r\n    }\r\n\r\n    /** @dev Mints bonus Quadrons\r\n      */  \r\n    function mintBonusTokens() external isOwner {\r\n        qToken.mintBonus();\r\n    }\r\n\r\n    /** @dev Sets the address of the upgrade token\r\n     *  @param tokenAddress Address of the new token\r\n     */\r\n    function setUpgradeToken(address tokenAddress) external isOwner {\r\n        UPGRADE_TOKEN = tokenAddress;\r\n        qToken.addApprovedToken(tokenAddress);\r\n    }\r\n\r\n    /** @dev Exchanges Tetraguard tokens for the upgraded token.  This is an opt-in process.\r\n     *  @param amount Amount of Tetraguard tokens to upgrade\r\n     *  @return Unwrapped ether (wei)\r\n     */\r\n    function upgradeToken(uint256 amount, address tokenHolder) external override returns (uint256) {\r\n        require(UPGRADE_TOKEN != address(0));\r\n        require(msg.sender == UPGRADE_TOKEN, \"Not authorized to upgrade\");\r\n        require(balanceOf(tokenHolder) >= amount, \"Insufficient Tetraguard to upgrade\");\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        _burn(tokenHolder, amount); // burn the old token\r\n\r\n        // Transfer PAXG, WBTC, Quadron\r\n        require(IERC20(WBTC).transfer(address(msg.sender), amount * R_WBTC / 1e10), \"WBTC transfer failed\");\r\n        require(IERC20(PAXG).transfer(msg.sender, amount * R_PAXG), \"WBTC transfer failed\");\r\n        require(qToken.transfer(msg.sender, amount * R_RESERVE), \"Quadron transfer failed\");\r\n\r\n        // Transfer Ether\r\n        (bool success,) = msg.sender.call{ value: (amount * R_ETH)}(\"\");\r\n        require(success, \"Transfer Tetraguard ether failed.\");\r\n\r\n        return (amount * R_ETH);\r\n    }\r\n  \r\n    receive() external payable {\r\n    }\r\n    \r\n    fallback() external payable {\r\n    }\r\n    \r\n    // @dev Modifier to allow a function callable only by the owner.\r\n    modifier isOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_quadron\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paxg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wbtc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceWBTC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePAXG\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintBonusTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceWBTC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePAXG\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setUpgradeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"upgradeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Tetraguard","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000014b3fe5772e973b7cd410d0c1549a18414f5f6db00000000000000000000000045804880de22913dafe09f4980848ece6ecbaf780000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e206663df6650d039975bf6c985ce2aa7194cfb5151886f20b97b04a75cfd38a"}]}