{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"details\": {\r\n        \"constantOptimizer\": true,\r\n        \"cse\": true,\r\n        \"deduplicate\": true,\r\n        \"jumpdestRemover\": true,\r\n        \"orderLiterals\": true,\r\n        \"peephole\": true,\r\n        \"yul\": false\r\n      },\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/persistent/dispatcher/IDispatcher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IDispatcher Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IDispatcher {\\n    function cancelMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function claimOwnership() external;\\n\\n    function deployVaultProxy(\\n        address _vaultLib,\\n        address _owner,\\n        address _vaultAccessor,\\n        string calldata _fundName\\n    ) external returns (address vaultProxy_);\\n\\n    function executeMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function getCurrentFundDeployer() external view returns (address currentFundDeployer_);\\n\\n    function getFundDeployerForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (address fundDeployer_);\\n\\n    function getMigrationRequestDetailsForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (\\n            address nextFundDeployer_,\\n            address nextVaultAccessor_,\\n            address nextVaultLib_,\\n            uint256 executableTimestamp_\\n        );\\n\\n    function getMigrationTimelock() external view returns (uint256 migrationTimelock_);\\n\\n    function getNominatedOwner() external view returns (address nominatedOwner_);\\n\\n    function getOwner() external view returns (address owner_);\\n\\n    function getSharesTokenSymbol() external view returns (string memory sharesTokenSymbol_);\\n\\n    function getTimelockRemainingForMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (uint256 secondsRemaining_);\\n\\n    function hasExecutableMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasExecutableRequest_);\\n\\n    function hasMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasMigrationRequest_);\\n\\n    function removeNominatedOwner() external;\\n\\n    function setCurrentFundDeployer(address _nextFundDeployer) external;\\n\\n    function setMigrationTimelock(uint256 _nextTimelock) external;\\n\\n    function setNominatedOwner(address _nextNominatedOwner) external;\\n\\n    function setSharesTokenSymbol(string calldata _nextSymbol) external;\\n\\n    function signalMigration(\\n        address _vaultProxy,\\n        address _nextVaultAccessor,\\n        address _nextVaultLib,\\n        bool _bypassFailure\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/off-chain/fund-value-calculator/FundValueCalculatorRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../dispatcher/IDispatcher.sol\\\";\\nimport \\\"./IFundValueCalculator.sol\\\";\\n\\n/// @title FundValueCalculatorRouter Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A peripheral contract for routing value calculation requests\\n/// to the correct FundValueCalculator instance for a particular release\\n/// @dev These values should generally only be consumed from off-chain,\\n/// unless you understand how each release interprets each calculation\\ncontract FundValueCalculatorRouter {\\n    event FundValueCalculatorUpdated(address indexed fundDeployer, address fundValueCalculator);\\n\\n    address private immutable DISPATCHER;\\n\\n    mapping(address => address) private fundDeployerToFundValueCalculator;\\n\\n    constructor(\\n        address _dispatcher,\\n        address[] memory _fundDeployers,\\n        address[] memory _fundValueCalculators\\n    ) public {\\n        DISPATCHER = _dispatcher;\\n\\n        __setFundValueCalculators(_fundDeployers, _fundValueCalculators);\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Calculates the GAV for a given fund\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return denominationAsset_ The denomination asset of the fund\\n    /// @return gav_ The GAV quoted in the denomination asset\\n    function calcGav(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 gav_)\\n    {\\n        return getFundValueCalculatorForVault(_vaultProxy).calcGav(_vaultProxy);\\n    }\\n\\n    /// @notice Calculates the GAV for a given fund, quoted in a given asset\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _quoteAsset The quote asset\\n    /// @return gav_ The GAV quoted in _quoteAsset\\n    function calcGavInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 gav_)\\n    {\\n        return\\n            getFundValueCalculatorForVault(_vaultProxy).calcGavInAsset(_vaultProxy, _quoteAsset);\\n    }\\n\\n    /// @notice Calculates the gross value of one shares unit (10 ** 18) for a given fund\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return denominationAsset_ The denomination asset of the fund\\n    /// @return grossShareValue_ The gross share value quoted in the denomination asset\\n    function calcGrossShareValue(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 grossShareValue_)\\n    {\\n        return getFundValueCalculatorForVault(_vaultProxy).calcGrossShareValue(_vaultProxy);\\n    }\\n\\n    /// @notice Calculates the gross value of one shares unit (10 ** 18) for a given fund, quoted in a given asset\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _quoteAsset The quote asset\\n    /// @return grossShareValue_ The gross share value quoted in _quoteAsset\\n    function calcGrossShareValueInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 grossShareValue_)\\n    {\\n        return\\n            getFundValueCalculatorForVault(_vaultProxy).calcGrossShareValueInAsset(\\n                _vaultProxy,\\n                _quoteAsset\\n            );\\n    }\\n\\n    /// @notice Calculates the NAV for a given fund\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return denominationAsset_ The denomination asset of the fund\\n    /// @return nav_ The NAV quoted in the denomination asset\\n    function calcNav(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 nav_)\\n    {\\n        return getFundValueCalculatorForVault(_vaultProxy).calcNav(_vaultProxy);\\n    }\\n\\n    /// @notice Calculates the NAV for a given fund, quoted in a given asset\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _quoteAsset The quote asset\\n    /// @return nav_ The NAV quoted in _quoteAsset\\n    function calcNavInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 nav_)\\n    {\\n        return\\n            getFundValueCalculatorForVault(_vaultProxy).calcNavInAsset(_vaultProxy, _quoteAsset);\\n    }\\n\\n    /// @notice Calculates the net value of one shares unit (10 ** 18) for a given fund\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return denominationAsset_ The denomination asset of the fund\\n    /// @return netShareValue_ The net share value quoted in the denomination asset\\n    function calcNetShareValue(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 netShareValue_)\\n    {\\n        return getFundValueCalculatorForVault(_vaultProxy).calcNetShareValue(_vaultProxy);\\n    }\\n\\n    /// @notice Calculates the net value of one shares unit (10 ** 18) for a given fund, quoted in a given asset\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _quoteAsset The quote asset\\n    /// @return netShareValue_ The net share value quoted in _quoteAsset\\n    function calcNetShareValueInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 netShareValue_)\\n    {\\n        return\\n            getFundValueCalculatorForVault(_vaultProxy).calcNetShareValueInAsset(\\n                _vaultProxy,\\n                _quoteAsset\\n            );\\n    }\\n\\n    /// @notice Calculates the net value of all shares held by a specified account\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _sharesHolder The account holding shares\\n    /// @return denominationAsset_ The denomination asset of the fund\\n    /// @return netValue_ The net value of all shares held by _sharesHolder\\n    function calcNetValueForSharesHolder(address _vaultProxy, address _sharesHolder)\\n        external\\n        returns (address denominationAsset_, uint256 netValue_)\\n    {\\n        return\\n            getFundValueCalculatorForVault(_vaultProxy).calcNetValueForSharesHolder(\\n                _vaultProxy,\\n                _sharesHolder\\n            );\\n    }\\n\\n    /// @notice Calculates the net value of all shares held by a specified account, quoted in a given asset\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _sharesHolder The account holding shares\\n    /// @param _quoteAsset The quote asset\\n    /// @return netValue_ The net value of all shares held by _sharesHolder quoted in _quoteAsset\\n    function calcNetValueForSharesHolderInAsset(\\n        address _vaultProxy,\\n        address _sharesHolder,\\n        address _quoteAsset\\n    ) external returns (uint256 netValue_) {\\n        return\\n            getFundValueCalculatorForVault(_vaultProxy).calcNetValueForSharesHolderInAsset(\\n                _vaultProxy,\\n                _sharesHolder,\\n                _quoteAsset\\n            );\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /// @notice Gets the FundValueCalculator instance to use for a given fund\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @return fundValueCalculatorContract_ The FundValueCalculator instance\\n    function getFundValueCalculatorForVault(address _vaultProxy)\\n        public\\n        view\\n        returns (IFundValueCalculator fundValueCalculatorContract_)\\n    {\\n        address fundDeployer = IDispatcher(DISPATCHER).getFundDeployerForVaultProxy(_vaultProxy);\\n        require(fundDeployer != address(0), \\\"getFundValueCalculatorForVault: Invalid _vaultProxy\\\");\\n\\n        address fundValueCalculator = getFundValueCalculatorForFundDeployer(fundDeployer);\\n        require(\\n            fundValueCalculator != address(0),\\n            \\\"getFundValueCalculatorForVault: No FundValueCalculator set\\\"\\n        );\\n\\n        return IFundValueCalculator(fundValueCalculator);\\n    }\\n\\n    ////////////////////////////\\n    // FUND VALUE CALCULATORS //\\n    ////////////////////////////\\n\\n    /// @notice Sets FundValueCalculator instances for a list of FundDeployer instances\\n    /// @param _fundDeployers The FundDeployer instances\\n    /// @param _fundValueCalculators The FundValueCalculator instances corresponding\\n    /// to each instance in _fundDeployers\\n    function setFundValueCalculators(\\n        address[] memory _fundDeployers,\\n        address[] memory _fundValueCalculators\\n    ) external {\\n        require(\\n            msg.sender == IDispatcher(getDispatcher()).getOwner(),\\n            \\\"Only the Dispatcher owner can call this function\\\"\\n        );\\n\\n        __setFundValueCalculators(_fundDeployers, _fundValueCalculators);\\n    }\\n\\n    /// @dev Helper to set FundValueCalculator addresses respectively for given FundDeployers\\n    function __setFundValueCalculators(\\n        address[] memory _fundDeployers,\\n        address[] memory _fundValueCalculators\\n    ) private {\\n        require(\\n            _fundDeployers.length == _fundValueCalculators.length,\\n            \\\"__setFundValueCalculators: Unequal array lengths\\\"\\n        );\\n\\n        for (uint256 i; i < _fundDeployers.length; i++) {\\n            fundDeployerToFundValueCalculator[_fundDeployers[i]] = _fundValueCalculators[i];\\n\\n            emit FundValueCalculatorUpdated(_fundDeployers[i], _fundValueCalculators[i]);\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `DISPATCHER` variable\\n    /// @return dispatcher_ The `DISPATCHER` variable value\\n    function getDispatcher() public view returns (address dispatcher_) {\\n        return DISPATCHER;\\n    }\\n\\n    /// @notice Gets the FundValueCalculator address for a given FundDeployer\\n    /// @param _fundDeployer The FundDeployer for which to get the FundValueCalculator address\\n    /// @return fundValueCalculator_ The FundValueCalculator address\\n    function getFundValueCalculatorForFundDeployer(address _fundDeployer)\\n        public\\n        view\\n        returns (address fundValueCalculator_)\\n    {\\n        return fundDeployerToFundValueCalculator[_fundDeployer];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/off-chain/fund-value-calculator/IFundValueCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFundValueCalculator interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IFundValueCalculator {\\n    function calcGav(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 gav_);\\n\\n    function calcGavInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 gav_);\\n\\n    function calcGrossShareValue(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 grossShareValue_);\\n\\n    function calcGrossShareValueInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 grossShareValue_);\\n\\n    function calcNav(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 nav_);\\n\\n    function calcNavInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 nav_);\\n\\n    function calcNetShareValue(address _vaultProxy)\\n        external\\n        returns (address denominationAsset_, uint256 netShareValue_);\\n\\n    function calcNetShareValueInAsset(address _vaultProxy, address _quoteAsset)\\n        external\\n        returns (uint256 netShareValue_);\\n\\n    function calcNetValueForSharesHolder(address _vaultProxy, address _sharesHolder)\\n        external\\n        returns (address denominationAsset_, uint256 netValue_);\\n\\n    function calcNetValueForSharesHolderInAsset(\\n        address _vaultProxy,\\n        address _sharesHolder,\\n        address _quoteAsset\\n    ) external returns (uint256 netValue_);\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dispatcher\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_fundDeployers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_fundValueCalculators\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundDeployer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundValueCalculator\",\"type\":\"address\"}],\"name\":\"FundValueCalculatorUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"}],\"name\":\"calcGav\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"denominationAsset_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gav_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quoteAsset\",\"type\":\"address\"}],\"name\":\"calcGavInAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gav_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"}],\"name\":\"calcGrossShareValue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"denominationAsset_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"grossShareValue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quoteAsset\",\"type\":\"address\"}],\"name\":\"calcGrossShareValueInAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"grossShareValue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"}],\"name\":\"calcNav\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"denominationAsset_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nav_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quoteAsset\",\"type\":\"address\"}],\"name\":\"calcNavInAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nav_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"}],\"name\":\"calcNetShareValue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"denominationAsset_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"netShareValue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quoteAsset\",\"type\":\"address\"}],\"name\":\"calcNetShareValueInAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"netShareValue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sharesHolder\",\"type\":\"address\"}],\"name\":\"calcNetValueForSharesHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"denominationAsset_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"netValue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sharesHolder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quoteAsset\",\"type\":\"address\"}],\"name\":\"calcNetValueForSharesHolderInAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"netValue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dispatcher_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundDeployer\",\"type\":\"address\"}],\"name\":\"getFundValueCalculatorForFundDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundValueCalculator_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"}],\"name\":\"getFundValueCalculatorForVault\",\"outputs\":[{\"internalType\":\"contract IFundValueCalculator\",\"name\":\"fundValueCalculatorContract_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fundDeployers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_fundValueCalculators\",\"type\":\"address[]\"}],\"name\":\"setFundValueCalculators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FundValueCalculatorRouter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c3dc853dd716bd5754f421ef94fdcbac3902ab32000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000020000000000000000000000009134c9975244b46692ad9a7da36dba8734ec6da30000000000000000000000007e6d3b1161df9c9c7527f68d651b297d2fdb820b0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c60642c271cd1102e922027af81e4ed4736d48c700000000000000000000000021560c8c72bebe1a240d442813f2c35b05cac5ec","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}