{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/governance/MAIDPAWAH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.5;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\nimport \\\"../interfaces/ICloneNurses.sol\\\";\\r\\n\\r\\ninterface INurseRaid {\\r\\n    function powerOfMaids(IERC721Enumerable maids, uint256 id) external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract MAIDPAWAH is Ownable {\\r\\n    INurseRaid public constant raid = INurseRaid(0x629d37B273c05597C8bEfB7B48525803B202D9Ea);\\r\\n\\r\\n    IERC20 public constant omu = IERC20(0xD428F1050AdC29976d4339b1ec602832034dF701);\\r\\n    ICloneNurses public constant cloneNurses = ICloneNurses(0x5eE657F5426484A777a1fC7Abd436DfDB13b1cc3);\\r\\n    IERC721Enumerable public constant maids = IERC721Enumerable(0x42ED30f2c459601A4f74Ff831B76Be64195D3dE4);\\r\\n    IERC721Enumerable public constant sushiGirls = IERC721Enumerable(0xEB3b418e4A4430392Cd57b1356c5B1d2205A56d9);\\r\\n    IERC721Enumerable public constant lingerieGirls = IERC721Enumerable(0x579a60Fbc649d3398F13E0385dBE79b3Ffad757c);\\r\\n\\r\\n    IERC721Enumerable[] public housekeepers;\\r\\n\\r\\n    uint256 public maidLikeWeight;\\r\\n    uint256 public nurseWeight;\\r\\n    uint256 public omuWeight;\\r\\n\\r\\n    event AddHousekeepers(uint256 indexed id, IERC721Enumerable indexed newHousekeeper);\\r\\n    event SetHousekeepers(uint256 indexed id, IERC721Enumerable indexed newHousekeeper);\\r\\n    event SetWeight(uint256 maidLikeWeight, uint256 nurseWeight, uint256 omuWeight);\\r\\n\\r\\n    constructor(\\r\\n        uint256 _maidLikeWeight,\\r\\n        uint256 _nurseWeight,\\r\\n        uint256 _omuWeight\\r\\n    ) {\\r\\n        maidLikeWeight = _maidLikeWeight;\\r\\n        nurseWeight = _nurseWeight;\\r\\n        omuWeight = _omuWeight;\\r\\n        emit SetWeight(_maidLikeWeight, _nurseWeight, _omuWeight);\\r\\n    }\\r\\n\\r\\n    function addHousekeeper(IERC721Enumerable newHousekeeper) external onlyOwner {\\r\\n        uint256 id = housekeepers.length;\\r\\n        housekeepers.push(newHousekeeper);\\r\\n        emit AddHousekeepers(id, newHousekeeper);\\r\\n    }\\r\\n\\r\\n    function setHousekeeper(uint256 id, IERC721Enumerable newHousekeeper) external onlyOwner {\\r\\n        housekeepers[id] = newHousekeeper;\\r\\n        emit SetHousekeepers(id, newHousekeeper);\\r\\n    }\\r\\n\\r\\n    function setWeight(\\r\\n        uint256 _maidLikeWeight,\\r\\n        uint256 _nurseWeight,\\r\\n        uint256 _omuWeight\\r\\n    ) external onlyOwner {\\r\\n        maidLikeWeight = _maidLikeWeight;\\r\\n        nurseWeight = _nurseWeight;\\r\\n        omuWeight = _omuWeight;\\r\\n        emit SetWeight(_maidLikeWeight, _nurseWeight, _omuWeight);\\r\\n    }\\r\\n\\r\\n    function powerOfMaidLike(address account) internal view returns (uint256 totalPower) {\\r\\n        uint256 sGirlsBalance = sushiGirls.balanceOf(account);\\r\\n        if (sGirlsBalance > 0) {\\r\\n            for (uint256 i = 0; i < sGirlsBalance; i++) {\\r\\n                totalPower += raid.powerOfMaids(sushiGirls, sushiGirls.tokenOfOwnerByIndex(account, i));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 lGirlsBalance = lingerieGirls.balanceOf(account);\\r\\n        if (lGirlsBalance > 0) {\\r\\n            for (uint256 i = 0; i < lGirlsBalance; i++) {\\r\\n                totalPower += raid.powerOfMaids(lingerieGirls, lingerieGirls.tokenOfOwnerByIndex(account, i));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 maidsBalance = maids.balanceOf(account);\\r\\n        if (maidsBalance > 0) {\\r\\n            for (uint256 i = 0; i < maidsBalance; i++) {\\r\\n                totalPower += raid.powerOfMaids(maids, maids.tokenOfOwnerByIndex(account, i));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 keepers = housekeepers.length;\\r\\n        if (keepers > 0) {\\r\\n            for (uint256 i = 0; i < keepers; i++) {\\r\\n                if (address(housekeepers[i]) != address(0)) {\\r\\n                    uint256 keepersBalance = housekeepers[i].balanceOf(account);\\r\\n                    if (keepersBalance > 0) {\\r\\n                        for (uint256 j = 0; j < keepersBalance; j++) {\\r\\n                            totalPower += raid.powerOfMaids(\\r\\n                                housekeepers[i],\\r\\n                                housekeepers[i].tokenOfOwnerByIndex(account, j)\\r\\n                            );\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function powerOfNurses(address account) internal view returns (uint256 totalPower) {\\r\\n        uint256 nursesBalance = cloneNurses.balanceOf(account);\\r\\n        if (nursesBalance > 0) {\\r\\n            for (uint256 i = 0; i < nursesBalance; i++) {\\r\\n                uint256 id = cloneNurses.tokenOfOwnerByIndex(account, i);\\r\\n                (uint256 _type, , ) = cloneNurses.nurses(id);\\r\\n                (, , uint256 power, ) = cloneNurses.nurseTypes(_type);\\r\\n\\r\\n                totalPower += (power + (cloneNurses.supportedPower(id) / 1e18));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function powerOfOMU(address account) internal view returns (uint256 omuPower) {\\r\\n        omuPower = omu.balanceOf(account) / 1e18;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256 balance) {\\r\\n        balance += powerOfMaidLike(account) * maidLikeWeight;\\r\\n        balance += powerOfNurses(account) * nurseWeight;\\r\\n        balance += powerOfOMU(account) * omuWeight;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ICloneNurses.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"./ICloneNurseEnumerable.sol\\\";\\r\\nimport \\\"./ISupportable.sol\\\";\\r\\nimport \\\"./INursePart.sol\\\";\\r\\nimport \\\"./IMaidCoin.sol\\\";\\r\\nimport \\\"./ITheMaster.sol\\\";\\r\\n\\r\\ninterface ICloneNurses is IERC721, IERC721Metadata, ICloneNurseEnumerable, ISupportable {\\r\\n    event Claim(uint256 indexed id, address indexed claimer, uint256 reward);\\r\\n    event ElongateLifetime(uint256 indexed id, uint256 rechargedLifetime, uint256 lastEndBlock, uint256 newEndBlock);\\r\\n\\r\\n    function nursePart() external view returns (INursePart);\\r\\n\\r\\n    function maidCoin() external view returns (IMaidCoin);\\r\\n\\r\\n    function theMaster() external view returns (ITheMaster);\\r\\n\\r\\n    function nurseTypes(uint256 typeId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 partCount,\\r\\n            uint256 destroyReturn,\\r\\n            uint256 power,\\r\\n            uint256 lifetime\\r\\n        );\\r\\n\\r\\n    function nurseTypeCount() external view returns (uint256);\\r\\n\\r\\n    function nurses(uint256 id)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 nurseType,\\r\\n            uint256 endBlock,\\r\\n            uint256 lastClaimedBlock\\r\\n        );\\r\\n\\r\\n    function assemble(uint256 nurseType, uint256 parts) external;\\r\\n\\r\\n    function assembleWithPermit(\\r\\n        uint256 nurseType,\\r\\n        uint256 parts,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function elongateLifetime(uint256[] calldata ids, uint256[] calldata parts) external;\\r\\n\\r\\n    function destroy(uint256[] calldata ids, uint256[] calldata toIds) external;\\r\\n\\r\\n    function claim(uint256[] calldata ids) external;\\r\\n\\r\\n    function pendingReward(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function findSupportingTo(address supporter) external view returns (address, uint256);\\r\\n\\r\\n    function exists(uint256 id) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITheMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./IMaidCoin.sol\\\";\\r\\nimport \\\"./IRewardCalculator.sol\\\";\\r\\nimport \\\"./ISupportable.sol\\\";\\r\\nimport \\\"./IMasterChefModule.sol\\\";\\r\\n\\r\\ninterface ITheMaster is IMasterChefModule {\\r\\n    event ChangeRewardCalculator(address addr);\\r\\n\\r\\n    event Add(\\r\\n        uint256 indexed pid,\\r\\n        address addr,\\r\\n        bool indexed delegate,\\r\\n        bool indexed mintable,\\r\\n        address supportable,\\r\\n        uint8 supportingRatio,\\r\\n        uint256 allocPoint\\r\\n    );\\r\\n\\r\\n    event Set(uint256 indexed pid, uint256 allocPoint);\\r\\n    event Deposit(uint256 indexed userId, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(uint256 indexed userId, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    event Support(address indexed supporter, uint256 indexed pid, uint256 amount);\\r\\n    event Desupport(address indexed supporter, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyDesupport(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    event SetIsSupporterPool(uint256 indexed pid, bool indexed status);\\r\\n\\r\\n    function initialRewardPerBlock() external view returns (uint256);\\r\\n\\r\\n    function decreasingInterval() external view returns (uint256);\\r\\n\\r\\n    function startBlock() external view returns (uint256);\\r\\n\\r\\n    function maidCoin() external view returns (IMaidCoin);\\r\\n\\r\\n    function rewardCalculator() external view returns (IRewardCalculator);\\r\\n\\r\\n    function poolInfo(uint256 pid)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address addr,\\r\\n            bool delegate,\\r\\n            ISupportable supportable,\\r\\n            uint8 supportingRatio,\\r\\n            uint256 allocPoint,\\r\\n            uint256 lastRewardBlock,\\r\\n            uint256 accRewardPerShare,\\r\\n            uint256 supply\\r\\n        );\\r\\n\\r\\n    function poolCount() external view returns (uint256);\\r\\n\\r\\n    function userInfo(uint256 pid, uint256 user) external view returns (uint256 amount, uint256 rewardDebt);\\r\\n\\r\\n    function mintableByAddr(address addr) external view returns (bool);\\r\\n\\r\\n    function totalAllocPoint() external view returns (uint256);\\r\\n\\r\\n    function pendingReward(uint256 pid, uint256 userId) external view returns (uint256);\\r\\n\\r\\n    function rewardPerBlock() external view returns (uint256);\\r\\n\\r\\n    function changeRewardCalculator(address addr) external;\\r\\n\\r\\n    function add(\\r\\n        address addr,\\r\\n        bool delegate,\\r\\n        bool mintable,\\r\\n        address supportable,\\r\\n        uint8 supportingRatio,\\r\\n        uint256 allocPoint\\r\\n    ) external;\\r\\n\\r\\n    function set(uint256[] calldata pid, uint256[] calldata allocPoint) external;\\r\\n\\r\\n    function deposit(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 userId\\r\\n    ) external;\\r\\n\\r\\n    function depositWithPermit(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 userId,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function depositWithPermitMax(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 userId,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function withdraw(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 userId\\r\\n    ) external;\\r\\n\\r\\n    function emergencyWithdraw(uint256 pid) external;\\r\\n\\r\\n    function support(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 supportTo\\r\\n    ) external;\\r\\n\\r\\n    function supportWithPermit(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 supportTo,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function supportWithPermitMax(\\r\\n        uint256 pid,\\r\\n        uint256 amount,\\r\\n        uint256 supportTo,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function desupport(uint256 pid, uint256 amount) external;\\r\\n\\r\\n    function emergencyDesupport(uint256 pid) external;\\r\\n\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function claimSushiReward(uint256 id) external;\\r\\n\\r\\n    function pendingSushiReward(uint256 id) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IMaidCoin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IMaidCoin {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function INITIAL_SUPPLY() external pure returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/INursePart.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\n\\r\\ninterface INursePart is IERC1155 {\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function mint(\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function burn(uint256 id, uint256 amount) external;\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ISupportable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ISupportable {\\r\\n    event SupportTo(address indexed supporter, uint256 indexed to);\\r\\n    event ChangeSupportingRoute(uint256 indexed from, uint256 indexed to);\\r\\n    event ChangeSupportedPower(uint256 indexed id, int256 power);\\r\\n    event TransferSupportingRewards(address indexed supporter, uint256 indexed id, uint256 amounts);\\r\\n\\r\\n    function supportingRoute(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function supportingTo(address supporter) external view returns (uint256);\\r\\n\\r\\n    function supportedPower(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function totalRewardsFromSupporters(uint256 id) external view returns (uint256);\\r\\n\\r\\n    function setSupportingTo(\\r\\n        address supporter,\\r\\n        uint256 to,\\r\\n        uint256 amounts\\r\\n    ) external;\\r\\n\\r\\n    function checkSupportingRoute(address supporter) external returns (address, uint256);\\r\\n\\r\\n    function changeSupportedPower(address supporter, int256 power) external;\\r\\n\\r\\n    function shareRewards(\\r\\n        uint256 pending,\\r\\n        address supporter,\\r\\n        uint8 supportingRatio\\r\\n    ) external returns (address nurseOwner, uint256 amountToNurseOwner);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ICloneNurseEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface ICloneNurseEnumerable is IERC721 {\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens stored by the contract.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\r\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMasterChefModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./IMasterChef.sol\\\";\\r\\nimport \\\"../uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\r\\n\\r\\ninterface IMasterChefModule {\\r\\n    function lpToken() external view returns (IUniswapV2Pair);\\r\\n\\r\\n    function sushi() external view returns (IERC20);\\r\\n\\r\\n    function sushiMasterChef() external view returns (IMasterChef);\\r\\n\\r\\n    function masterChefPid() external view returns (uint256);\\r\\n\\r\\n    function sushiLastRewardBlock() external view returns (uint256);\\r\\n\\r\\n    function accSushiPerShare() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IRewardCalculator {\\r\\n    function rewardPerBlock() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IMasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IMasterChef {\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        IERC20 lpToken; // Address of LP token contract.\\r\\n        uint256 allocPoint; // How many allocation points assigned to this pool. SUSHI to distribute per block.\\r\\n        uint256 lastRewardBlock; // Last block number that SUSHI distribution occurs.\\r\\n        uint256 accSushiPerShare; // Accumulated SUSHI per share, times 1e12. See below.\\r\\n    }\\r\\n\\r\\n    function poolInfo(uint256 pid) external view returns (IMasterChef.PoolInfo memory);\\r\\n\\r\\n    function userInfo(uint256 pid, address user) external view returns (IMasterChef.UserInfo memory);\\r\\n\\r\\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256);\\r\\n\\r\\n    function deposit(uint256 _pid, uint256 _amount) external;\\r\\n\\r\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maidLikeWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nurseWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_omuWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC721Enumerable\",\"name\":\"newHousekeeper\",\"type\":\"address\"}],\"name\":\"AddHousekeepers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC721Enumerable\",\"name\":\"newHousekeeper\",\"type\":\"address\"}],\"name\":\"SetHousekeepers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maidLikeWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nurseWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"omuWeight\",\"type\":\"uint256\"}],\"name\":\"SetWeight\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"newHousekeeper\",\"type\":\"address\"}],\"name\":\"addHousekeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cloneNurses\",\"outputs\":[{\"internalType\":\"contract ICloneNurses\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"housekeepers\",\"outputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lingerieGirls\",\"outputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maidLikeWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maids\",\"outputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nurseWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"omu\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"omuWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raid\",\"outputs\":[{\"internalType\":\"contract INurseRaid\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"newHousekeeper\",\"type\":\"address\"}],\"name\":\"setHousekeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maidLikeWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nurseWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_omuWeight\",\"type\":\"uint256\"}],\"name\":\"setWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiGirls\",\"outputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MAIDPAWAH","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000294000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000e7","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}