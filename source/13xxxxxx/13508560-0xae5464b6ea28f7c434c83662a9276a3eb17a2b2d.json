{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/lib/erc20-proxy/MirrorERC20ProxyStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport {IMirrorERC20ProxyStorageEvents, IMirrorERC20ProxyStorage} from \\\"./interface/IMirrorERC20ProxyStorage.sol\\\";\\nimport {IERC20Events} from \\\"../../external/interface/IERC20.sol\\\";\\n\\n/**\\n * @title MirrorERC20ProxyStorage\\n * @author MirrorXYZ\\n */\\ncontract MirrorERC20ProxyStorage is\\n    IMirrorERC20ProxyStorage,\\n    IMirrorERC20ProxyStorageEvents,\\n    IERC20Events\\n{\\n    // ============ Constants ============\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    // ============ Structs ============\\n\\n    struct TokenMetadata {\\n        string name;\\n        string symbol;\\n        uint8 decimals;\\n    }\\n\\n    // ============ Mutable Storage ============\\n\\n    /// @notice Proxies to operator\\n    mapping(address => address) public proxyOperator;\\n    /// @notice proxy address to token metadata.\\n    mapping(address => TokenMetadata) _tokenMetadata;\\n    mapping(address => uint256) private _totalSupply;\\n    // Permitting\\n    mapping(address => bytes32) private domainSeparators;\\n    mapping(address => mapping(address => uint256)) private _nonces;\\n    mapping(address => mapping(address => uint256)) private _balances;\\n    mapping(address => mapping(address => mapping(address => uint256)))\\n        private _allowance;\\n\\n    // ============ Events ============\\n\\n    event OperatorChanged(\\n        address indexed proxy,\\n        address oldOperator,\\n        address newOperator\\n    );\\n\\n    // ============ Modifiers ============\\n\\n    modifier onlyOperator(address proxy, address account) {\\n        require(proxyOperator[proxy] == account, \\\"only operator can call\\\");\\n        _;\\n    }\\n\\n    function operator() external view override returns (address) {\\n        return proxyOperator[msg.sender];\\n    }\\n\\n    function setOperator(address sender, address newOperator)\\n        public\\n        override\\n        onlyOperator(msg.sender, sender)\\n    {\\n        address proxy = msg.sender;\\n\\n        emit OperatorChanged(proxy, proxyOperator[proxy], newOperator);\\n        proxyOperator[proxy] = newOperator;\\n    }\\n\\n    /// @notice Register new proxy and initialize metadata\\n    function initialize(\\n        address operator_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 totalSupply_,\\n        uint8 decimals_\\n    ) external override returns (address) {\\n        address proxyAddress = msg.sender;\\n\\n        require(\\n            proxyOperator[proxyAddress] == address(0),\\n            \\\"proxy already registered\\\"\\n        );\\n\\n        proxyOperator[proxyAddress] = operator_;\\n        _tokenMetadata[proxyAddress] = TokenMetadata({\\n            name: name_,\\n            symbol: symbol_,\\n            decimals: decimals_\\n        });\\n\\n        _mint(proxyAddress, operator_, totalSupply_);\\n\\n        domainSeparators[proxyAddress] = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name_)),\\n                keccak256(bytes(\\\"1\\\")),\\n                block.chainid,\\n                proxyAddress\\n            )\\n        );\\n\\n        emit NewProxy(proxyAddress, operator_);\\n\\n        return proxyAddress;\\n    }\\n\\n    // ============ ERC-20 Methods ============\\n\\n    function name() external view override returns (string memory) {\\n        address proxy = msg.sender;\\n\\n        require(proxyOperator[proxy] != address(0), \\\"unregistered proxy\\\");\\n\\n        return _tokenMetadata[proxy].name;\\n    }\\n\\n    function symbol() external view override returns (string memory) {\\n        address proxy = msg.sender;\\n\\n        require(proxyOperator[proxy] != address(0), \\\"unregistered proxy\\\");\\n\\n        return _tokenMetadata[proxy].symbol;\\n    }\\n\\n    function decimals() external view override returns (uint8) {\\n        address proxy = msg.sender;\\n\\n        require(proxyOperator[proxy] != address(0), \\\"unregistered proxy\\\");\\n\\n        return _tokenMetadata[proxy].decimals;\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        address proxy = msg.sender;\\n\\n        require(proxyOperator[proxy] != address(0), \\\"unregistered proxy\\\");\\n\\n        return _totalSupply[proxy];\\n    }\\n\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return _balances[msg.sender][owner];\\n    }\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowance[msg.sender][owner][spender];\\n    }\\n\\n    function approve(\\n        address sender,\\n        address spender,\\n        uint256 value\\n    ) external override returns (bool) {\\n        address proxy = msg.sender;\\n\\n        _approve(proxy, sender, spender, value);\\n\\n        return true;\\n    }\\n\\n    function transfer(\\n        address sender,\\n        address to,\\n        uint256 value\\n    ) external override returns (bool) {\\n        _transfer(msg.sender, sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external override returns (bool) {\\n        address proxy = msg.sender;\\n\\n        // Decrement allowance, unless it's the maximum.\\n        if (_allowance[proxy][from][to] != type(uint256).max) {\\n            _allowance[proxy][from][to] -= value;\\n        }\\n\\n        _transfer(proxy, from, to, value);\\n\\n        return true;\\n    }\\n\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return domainSeparators[msg.sender];\\n    }\\n\\n    function nonces(address owner) external view override returns (uint256) {\\n        return _nonces[msg.sender][owner];\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(deadline >= block.timestamp, \\\"ERC20: EXPIRED\\\");\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparators[msg.sender],\\n                keccak256(\\n                    abi.encode(\\n                        PERMIT_TYPEHASH,\\n                        owner,\\n                        spender,\\n                        value,\\n                        _nonces[msg.sender][owner]++,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"ERC20: INVALID_SIGNATURE\\\"\\n        );\\n\\n        _approve(msg.sender, owner, spender, value);\\n    }\\n\\n    // ============ Minting ============\\n\\n    function mint(\\n        address sender,\\n        address to,\\n        uint256 amount\\n    ) external override onlyOperator(msg.sender, sender) {\\n        _mint(msg.sender, to, amount);\\n    }\\n\\n    // ============ Internal Methods ============\\n\\n    function _transfer(\\n        address proxy,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[proxy][from] -= amount;\\n        _balances[proxy][to] += amount;\\n    }\\n\\n    function _mint(\\n        address proxy,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        require(to != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _balances[proxy][to] += amount;\\n        _totalSupply[proxy] += amount;\\n    }\\n\\n    function _approve(\\n        address proxy,\\n        address sender,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        _allowance[proxy][sender][spender] = value;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/erc20-proxy/interface/IMirrorERC20ProxyStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\ninterface IMirrorERC20ProxyStorageEvents {\\n    /// @notice Emitted when a new proxy is initialized\\n    event NewProxy(address indexed proxy, address indexed operator);\\n}\\n\\ninterface IMirrorERC20ProxyStorage {\\n    function operator() external view returns (address);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Register new proxy and initialize metadata\\n    function initialize(\\n        address operator_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 totalSupply_,\\n        uint8 decimals_\\n    ) external returns (address);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(\\n        address sender,\\n        address spender,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function transfer(\\n        address sender,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function mint(\\n        address sender,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function setOperator(address sender, address newOperator) external;\\n}\\n\"\r\n    },\r\n    \"contracts/external/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\ninterface IERC20 {\\n    /// @notice EIP-20 token name for this token\\n    function name() external returns (string calldata);\\n\\n    /// @notice EIP-20 token symbol for this token\\n    function symbol() external returns (string calldata);\\n\\n    /// @notice EIP-20 token decimals for this token\\n    function decimals() external returns (uint8);\\n\\n    /// @notice EIP-20 total number of tokens in circulation\\n    function totalSupply() external returns (uint256);\\n\\n    /// @notice EIP-20 official record of token balances for each account\\n    function balanceOf(address account) external returns (uint256);\\n\\n    /// @notice EIP-20 allowance amounts on behalf of others\\n    function allowance(address owner, address spender)\\n        external\\n        returns (uint256);\\n\\n    /// @notice EIP-20 approves _spender_ to transfer up to _value_ multiple times\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /// @notice EIP-20 transfer _value_ to _to_ from _msg.sender_\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /// @notice EIP-20 transfer _value_ to _to_ from _from_\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\\ninterface IERC20Events {\\n    /// @notice EIP-20 Mint event\\n    event Mint(address indexed to, uint256 amount);\\n\\n    /// @notice EIP-20 approval event\\n    event Approval(\\n        address indexed from,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"NewProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxyOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MirrorERC20ProxyStorage","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}