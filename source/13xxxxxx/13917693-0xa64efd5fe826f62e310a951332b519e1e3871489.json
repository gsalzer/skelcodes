{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.5.17;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract BetaCarbon is ERC20Detailed {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    bool public paused = false;\r\n    \r\n    // ASSET PROTECTION DATA\r\n    address public assetProtectionRole;\r\n    mapping(address => bool) internal frozen;\r\n\r\n    // SUPPLY CONTROL DATA\r\n    address public supplyController;\r\n\r\n    // OWNER DATA\r\n    address public owner;\r\n    address public proposedOwner;\r\n    bool public initialized = false;\r\n\r\n    /**\r\n     * @dev Constructor that gives msg.sender all of existing tokens.\r\n     */\r\n    constructor () public ERC20Detailed(\"BetaCarbon\", \"BCAU\", 18) {\r\n       \r\n        initialize();\r\n         _mint(0);\r\n        pause();\r\n    }\r\n     function initialize() public {\r\n        require(!initialized, \"already initialized\");\r\n        owner = msg.sender;\r\n        proposedOwner = address(0);\r\n        assetProtectionRole = address(0);\r\n        supplyController = msg.sender;\r\n        initialized = true;\r\n    }  \r\n\r\n    // OWNABLE EVENTS\r\n    event OwnershipTransferProposed(\r\n        address indexed currentOwner,\r\n        address indexed proposedOwner\r\n    );\r\n    event OwnershipTransferDisregarded(address indexed oldProposedOwner);\r\n    event OwnershipTransferred(\r\n        address indexed oldOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    // PAUSABLE EVENTS\r\n    event Pause();\r\n    event Unpause();\r\n\r\n// ASSET PROTECTION EVENTS\r\n    event AddressFrozen(address indexed addr);\r\n    event AddressUnfrozen(address indexed addr);\r\n    event FrozenAddressWiped(address indexed addr);\r\n    event AssetProtectionRoleSet(\r\n        address indexed oldAssetProtectionRole,\r\n        address indexed newAssetProtectionRole\r\n    );\r\n\r\n// SUPPLY CONTROL EVENTS\r\n    event SupplyIncreased(address indexed to, uint256 value);\r\n    event SupplyDecreased(address indexed from, uint256 value);\r\n    event SupplyControllerSet(\r\n        address indexed oldSupplyController,\r\n        address indexed newSupplyController\r\n    );\r\n    \r\n    /**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param me The address to query the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address me) public view returns (uint256) {\r\n        return _balances[me];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param me address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address me, address spender) public view returns (uint256) {\r\n        return _allowed[me][spender];\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"whenNotPaused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n         require(to != address(0), \"cannot transfer to address zero\");\r\n        require(!frozen[to] && !frozen[msg.sender], \"address frozen\");\r\n        require(value <= _balances[msg.sender], \"insufficient funds\");\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n   \r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n         require(to != address(0), \"cannot transfer to address zero\");\r\n        require(\r\n            !frozen[to] && !frozen[from] && !frozen[msg.sender],\r\n            \"address frozen\"\r\n        );\r\n        require(value <= _balances[from], \"insufficient funds\");\r\n        require(value <= _allowed[from][msg.sender], \"insufficient allowance\");\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        //_approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0), \"cannot transfer to address zero\");\r\n\r\n        require(value <= _balances[from], \"insufficient funds\");\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n  \r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param me The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address me, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(me != address(0));\r\n\r\n        _allowed[me][spender] = value;\r\n        emit Approval(me, spender, value);\r\n    }\r\n\r\n   \r\n\r\n    modifier onlySupplyController() {\r\n        require(msg.sender == supplyController, \"onlySupplyController\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param value The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(uint256 value) public onlySupplyController returns (bool) {\r\n        _mint(value);\r\n        return true;\r\n    }\r\n    \r\n      /**\r\n     * @dev Function to burn tokens\r\n\r\n     * @param value The amount that will be burnt.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function burn(uint256 value) public onlySupplyController returns (bool) {\r\n        _burn(value);\r\n        return true;\r\n    }\r\n\r\n     /**\r\n     * @dev Increases the total supply by minting the specified number of tokens to the supply controller account.\r\n     * @param _value The number of tokens to add.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    \r\n    function _mint(uint256 _value)\r\n        internal\r\n        onlySupplyController\r\n        returns (bool success)\r\n    {\r\n        _totalSupply = _totalSupply.add(_value);\r\n        _balances[supplyController] = _balances[supplyController].add(_value);\r\n        emit SupplyIncreased(supplyController, _value);\r\n        emit Transfer(address(0), supplyController, _value);\r\n        return true;\r\n    }\r\n\r\n     /**\r\n     * @dev Decrease the total supply by burning the specified number of tokens to the supply controller account.\r\n     * @param _value The number of tokens to burn.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n\r\n     function _burn(uint256 _value)\r\n        internal\r\n        onlySupplyController\r\n        returns (bool success)\r\n    {\r\n        require(_value <= _balances[supplyController], \"not enough supply\");\r\n        //_value = _value* 10**18;\r\n        _balances[supplyController] = _balances[supplyController].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        emit SupplyDecreased(supplyController, _value);\r\n        emit Transfer(supplyController, address(0), _value);\r\n        return true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        _;\r\n    }\r\n     function pause() public onlyOwner {\r\n        require(!paused, \"already paused\");\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n     function unpause() public onlyOwner {\r\n        require(paused, \"already unpaused\");\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to begin transferring control of the contract to a proposedOwner\r\n     * @param _proposedOwner The address to transfer ownership to.\r\n    */\r\n\r\n    function proposeOwner(address _proposedOwner) public onlyOwner {\r\n        require(\r\n            _proposedOwner != address(0),\r\n            \"cannot transfer ownership to address zero\"\r\n        );\r\n        require(msg.sender != _proposedOwner, \"caller already is owner\");\r\n        proposedOwner = _proposedOwner;\r\n        emit OwnershipTransferProposed(owner, proposedOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner or proposed owner to cancel transferring control of the contract to a proposedOwner\r\n       commented out since this is not used\r\n    */\r\n\r\n    function disregardProposeOwner() public {\r\n        require(\r\n            msg.sender == proposedOwner || msg.sender == owner,\r\n            \"only proposedOwner or owner\"\r\n        );\r\n        require(\r\n            proposedOwner != address(0),\r\n            \"can only disregard a proposed owner that was previously set\"\r\n        );\r\n        address _oldProposedOwner = proposedOwner;\r\n        proposedOwner = address(0);\r\n        emit OwnershipTransferDisregarded(_oldProposedOwner);\r\n    }\r\n \r\n    /**\r\n     * @dev Allows the proposed owner to complete transferring control of the contract to the proposedOwner.\r\n    */\r\n\r\n    function claimOwnership() public {\r\n        require(msg.sender == proposedOwner, \"onlyProposedOwner\");\r\n        address _oldOwner = owner;\r\n        owner = proposedOwner;\r\n        proposedOwner = address(0);\r\n        emit OwnershipTransferred(_oldOwner, owner);\r\n    }  \r\n\r\n      // ASSET PROTECTION FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Sets a new asset protection role address.\r\n     * @param _newAssetProtectionRole The new address allowed to freeze/unfreeze addresses and seize their tokens.\r\n     */\r\n\r\n    function setAssetProtectionRole(address _newAssetProtectionRole) public {\r\n        require(\r\n            msg.sender == assetProtectionRole || msg.sender == owner,\r\n            \"only assetProtectionRole or Owner\"\r\n        );\r\n        emit AssetProtectionRoleSet(\r\n            assetProtectionRole,\r\n            _newAssetProtectionRole\r\n        );\r\n        assetProtectionRole = _newAssetProtectionRole;\r\n    }\r\n\r\n    modifier onlyAssetProtectionRole() {\r\n        require(msg.sender == assetProtectionRole, \"onlyAssetProtectionRole\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Freezes an address balance from being transferred.\r\n     * @param _addr The new address to freeze.\r\n     */\r\n\r\n    function freeze(address _addr) public onlyAssetProtectionRole {\r\n        require(!frozen[_addr], \"address already frozen\");\r\n        frozen[_addr] = true;\r\n        emit AddressFrozen(_addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Unfreezes an address balance allowing transfer.\r\n     * @param _addr The new address to unfreeze.\r\n    */\r\n\r\n    function unfreeze(address _addr) public onlyAssetProtectionRole {\r\n        require(frozen[_addr], \"address already unfrozen\");\r\n        frozen[_addr] = false;\r\n        emit AddressUnfrozen(_addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Wipes the balance of a frozen address, burning the tokens\r\n     * and setting the approval to zero.\r\n     * @param _addr The new frozen address to wipe.\r\n    */\r\n\r\n    function wipeFrozenAddress(address _addr) public onlyAssetProtectionRole {\r\n        require(frozen[_addr], \"address is not frozen\");\r\n        uint256 _balance = _balances[_addr];\r\n        _balances[_addr] = 0;\r\n        _totalSupply = _totalSupply.sub(_balance);\r\n        emit FrozenAddressWiped(_addr);\r\n        emit SupplyDecreased(_addr, _balance);\r\n        emit Transfer(_addr, address(0), _balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets whether the address is currently frozen.\r\n     * @param _addr The address to check if frozen.\r\n     * @return A bool representing whether the given address is frozen.\r\n     */\r\n    function isFrozen(address _addr) public view returns (bool) {\r\n        return frozen[_addr];\r\n    }\r\n    // SUPPLY CONTROL FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Sets a new supply controller address.\r\n     * @param _newSupplyController The address allowed to burn/mint tokens to control supply.\r\n     */\r\n\r\n    function setSupplyController(address _newSupplyController) public {\r\n        require(\r\n            msg.sender == supplyController || msg.sender == owner,\r\n            \"only SupplyController or Owner\"\r\n        );\r\n        require(\r\n            _newSupplyController != address(0),\r\n            \"cannot set supply controller to address zero\"\r\n        );\r\n        emit SupplyControllerSet(supplyController, _newSupplyController);\r\n        supplyController = _newSupplyController;\r\n    }  \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAssetProtectionRole\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAssetProtectionRole\",\"type\":\"address\"}],\"name\":\"AssetProtectionRoleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"FrozenAddressWiped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferDisregarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSupplyController\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSupplyController\",\"type\":\"address\"}],\"name\":\"SupplyControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SupplyDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SupplyIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"me\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetProtectionRole\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"me\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disregardProposeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"proposeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAssetProtectionRole\",\"type\":\"address\"}],\"name\":\"setAssetProtectionRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSupplyController\",\"type\":\"address\"}],\"name\":\"setSupplyController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"wipeFrozenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BetaCarbon","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://79933612b5ce225902199efccbc967f73a74c271133a2e89a125dcb54800b4e1"}]}