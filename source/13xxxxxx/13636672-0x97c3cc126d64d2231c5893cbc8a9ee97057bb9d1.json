{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CozyInvestYearnUSDN.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./interfaces/ICozyInvest.sol\\\";\\nimport \\\"./lib/CozyInvestHelpers.sol\\\";\\n\\ninterface ICrvDepositZap {\\n  function token() external view returns (address);\\n\\n  function add_liquidity(uint256[4] calldata amounts, uint256 minMintAmount) external payable returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    uint256 amount,\\n    int128 index,\\n    uint256 minAmount\\n  ) external returns (uint256);\\n}\\n\\ninterface IYVault is IERC20 {\\n  function deposit() external returns (uint256); // providing no inputs to `deposit` deposits max amount for msg.sender\\n\\n  function withdraw(uint256 maxShares) external returns (uint256); // defaults to msg.sender as recipient and 0.01 BPS maxLoss\\n}\\n\\n/**\\n * @notice On-chain scripts for borrowing from Cozy and using the borrowed funds to supply to Curve, and\\n * depositing those Curve receipt tokens into the Yearn USDN vault\\n * @dev This contract is intended to be used by delegatecalling to it from a DSProxy\\n */\\ncontract CozyInvestYearnUSDN is CozyInvestHelpers, ICozyInvest3, ICozyDivest3 {\\n  // --- Cozy markets ---\\n  /// @notice Cozy protection market to borrow from: Cozy-USDC-3-Yearn V2 Curve USDN Trigger\\n  ICozyToken public constant protectionMarket = ICozyToken(0x11581582Aa816c8293e67c726AF49Fc2C8b98C6e);\\n\\n  /// @notice Cozy money market with USDC underlying\\n  ICozyToken public constant moneyMarket = ICozyToken(0xdBDF2fC3Af896e18f2A9DC58883d12484202b57E);\\n\\n  /// @notice USDC\\n  IERC20 public immutable underlying;\\n\\n  // --- Curve parameters ---\\n  /// @notice Curve Deposit Zap helper contract\\n  ICrvDepositZap public constant depositZap = ICrvDepositZap(0x094d12e5b541784701FD8d65F11fc0598FBC6332);\\n\\n  /// @notice Curve USDN receipt token\\n  IERC20 public immutable curveToken;\\n\\n  // @dev Index to use in arrays when specifying USDC for the Curve deposit zap\\n  int128 internal constant usdcIndex = 2;\\n\\n  // --- Yearn Parameters ---\\n  /// @notice Yearn USDN vault\\n  IYVault public constant yearn = IYVault(0x3B96d491f067912D18563d56858Ba7d6EC67a6fa);\\n\\n  constructor() {\\n    underlying = IERC20(moneyMarket.underlying());\\n    curveToken = IERC20(depositZap.token());\\n  }\\n\\n  /**\\n   * @notice Protected invest method for borrowing from given cozy market, using those funds to add\\n   * liquidity to the Curve pool, and depositing that receipt token into the Yearn vault\\n   * @param _market Address of the market to borrow from\\n   * @param _borrowAmount Amount to borrow and deposit into Curve\\n   * @param _curveMinAmountOut The minAmountOut we expect to receive when adding liquidity to Curve\\n   */\\n  function invest(\\n    address _market,\\n    uint256 _borrowAmount,\\n    uint256 _curveMinAmountOut\\n  ) external {\\n    require((_market == address(moneyMarket) || _market == address(protectionMarket)), \\\"Invalid borrow market\\\");\\n\\n    // Borrow USDC from Cozy\\n    require(ICozyToken(_market).borrow(_borrowAmount) == 0, \\\"Borrow failed\\\");\\n\\n    // Add liquidity to Curve, which returns a receipt token\\n    TransferHelper.safeApprove(address(underlying), address(depositZap), type(uint256).max);\\n    depositZap.add_liquidity([0, 0, _borrowAmount, 0], _curveMinAmountOut);\\n\\n    // Deposit the Curve USDN receipt tokens into the Yearn vault\\n    if (curveToken.allowance(address(this), address(yearn)) == 0) {\\n      // We need this allowance check first because the curve token requires that there is\\n      // zero allowance when calling `approve`\\n      TransferHelper.safeApprove(address(curveToken), address(yearn), type(uint256).max);\\n    }\\n    yearn.deposit();\\n  }\\n\\n  /**\\n   * @notice Protected divest method for exiting a position entered using this contract's `invest` method\\n   * @param _market Address of the market to repay\\n   * @param _recipient Address where any leftover tokens should be transferred\\n   * @param _yearnRedeemAmount Amount of Yearn receipt tokens to redeem\\n   * @param _curveMinAmountOut The minAmountOut we expect to receive when removing liquidity from Curve\\n   * @param _excessTokens Quantity to transfer from the caller into this address to ensure\\n   * the borrow can be repaid in full. Only required if you want to repay the full borrow amount and the\\n   * amount obtained from withdrawing from the invest opportunity will not cover the full debt. A value of zero\\n   * will not attempt to transfer tokens from the caller, and the transfer will not be attempted if it's not required\\n   */\\n  function divest(\\n    address _market,\\n    address _recipient,\\n    uint256 _yearnRedeemAmount,\\n    uint256 _curveMinAmountOut,\\n    uint256 _excessTokens\\n  ) external {\\n    require((_market == address(moneyMarket) || _market == address(protectionMarket)), \\\"Invalid borrow market\\\");\\n\\n    // Redeem Yearn receipt tokens for Curve USDN receipt tokens\\n    uint256 _quantityRedeemed = yearn.withdraw(_yearnRedeemAmount);\\n\\n    // Approve Curve's depositZap to spend our yearn tokens. We skip the allowance check and just always approve,\\n    // because it's a negligible impact in gas cost relative to transaction cost, but makes contract deploy cheaper\\n    // Deposit the Curve USDN receipt tokens into the Yearn vault\\n    if (curveToken.allowance(address(this), address(depositZap)) == 0) {\\n      // We need this allowance check first because the curve token requires that there is\\n      // zero allowance when calling `approve`\\n      TransferHelper.safeApprove(address(curveToken), address(depositZap), type(uint256).max);\\n    }\\n\\n    // Redeem from Curve\\n    depositZap.remove_liquidity_one_coin(_quantityRedeemed, usdcIndex, _curveMinAmountOut);\\n\\n    // Pay back as much of the borrow as possible, excess is refunded to `recipient`\\n    executeMaxRepay(_market, address(underlying), _excessTokens);\\n\\n    // Transfer any remaining tokens to the user after paying back borrow\\n    TransferHelper.safeTransfer(address(underlying), _recipient, underlying.balanceOf(address(this)));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICozyInvest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n/**\\n * @notice Interfaces for developing on-chain scripts for borrowing from the Cozy markets then supplying to\\n * investment opportunities in a single transaction\\n * @dev Contract developed from this interface are intended to be used by delegatecalling to it from a DSProxy\\n * @dev For interactions with the Cozy Protocol, ensure the return value is zero and revert otherwise. See\\n * the Cozy Protocol documentation on error codes for more info\\n */\\ninterface ICozyInvest1 {\\n  function invest(\\n    address _ethMarket,\\n    uint256 _borrowAmount,\\n    uint256 _minAmountOut\\n  ) external payable;\\n}\\n\\ninterface ICozyInvest2 {\\n  function invest(address _market, uint256 _borrowAmount) external;\\n}\\n\\ninterface ICozyInvest3 {\\n  // NOTE: Same signature as ICozyInvest1, but without the payable modifier\\n  function invest(\\n    address _ethMarket,\\n    uint256 _borrowAmount,\\n    uint256 _minAmountOut\\n  ) external;\\n}\\n\\ninterface ICozyInvest4 {\\n  function invest(\\n    address _market,\\n    uint256 _borrowAmount,\\n    uint256 _minToMint,\\n    uint256 _deadline\\n  ) external;\\n}\\n\\ninterface ICozyDivest1 {\\n  function divest(\\n    address _marketAddress,\\n    address _recipient,\\n    uint256 _redeemAmount,\\n    uint256 _curveMinAmountOut\\n  ) external payable;\\n}\\n\\ninterface ICozyDivest2 {\\n  // NOTE: Same signature as above (except for the payable part), but with different meanings of each input\\n  function divest(\\n    address _marketAddress,\\n    address _recipient,\\n    uint256 _withdrawAmount,\\n    uint256 _excessTokens\\n  ) external;\\n}\\n\\ninterface ICozyDivest3 {\\n  function divest(\\n    address _market,\\n    address _recipient,\\n    uint256 _yearnRedeemAmount,\\n    uint256 _curveMinAmountOut,\\n    uint256 _excessTokens\\n  ) external;\\n}\\n\\ninterface ICozyDivest4 {\\n  function divest(\\n    address _marketAddress,\\n    address _recipient,\\n    uint256 _withdrawAmount,\\n    uint256 _minWithdrawAmount,\\n    uint256 _deadline\\n  ) external payable;\\n}\\n\\ninterface ICozyReward {\\n  function claimRewards(address _recipient) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/CozyInvestHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/ICozy.sol\\\";\\nimport \\\"./TransferHelper.sol\\\";\\n\\nabstract contract CozyInvestHelpers {\\n\\n  /**\\n   * @notice Repays as much token debt as possible\\n   * @param _market Market to repay\\n   * @param _underlying That market's underlying token (can be obtained by a call, but passing it in saves gas)\\n   * @param _excessTokens Quantity to transfer from the caller into this address to ensure\\n   * the borrow can be repaid in full. Only required if you want to repay the full borrow amount and the\\n   * amount obtained from withdrawing from the invest opportunity will not cover the full debt. A value of zero\\n   * will not attempt to transfer tokens from the caller, and the transfer will not be attempted if it's not required\\n   */\\n  function executeMaxRepay(\\n    address _market,\\n    address _underlying,\\n    uint256 _excessTokens\\n  ) internal {\\n    // Pay back as much of the borrow as possible, excess is refunded to `recipient`\\n    uint256 _borrowBalance = ICozyToken(_market).borrowBalanceCurrent(address(this));\\n    uint256 _initialBalance = IERC20(_underlying).balanceOf(address(this));\\n    if (_initialBalance < _borrowBalance && _excessTokens > 0) {\\n      TransferHelper.safeTransferFrom(_underlying, msg.sender, address(this), _excessTokens);\\n    }\\n    uint256 _balance = _initialBalance + _excessTokens; // this contract's current balance\\n    uint256 _repayAmount = _balance >= _borrowBalance ? type(uint256).max : _balance;\\n\\n    TransferHelper.safeApprove(_underlying, address(_market), _repayAmount);\\n    require(ICozyToken(_market).repayBorrow(_repayAmount) == 0, \\\"Repay failed\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICozy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interfaces for Cozy contracts\\n */\\n\\ninterface ICozyShared {\\n  function underlying() external view returns (address);\\n\\n  function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n  function borrowBalanceCurrent(address account) external returns (uint256);\\n}\\n\\ninterface ICozyToken is ICozyShared {\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\\n}\\n\\ninterface ICozyEther is ICozyShared {\\n  function repayBorrowBehalf(address borrower) external payable;\\n}\\n\\ninterface IMaximillion {\\n  function repayBehalfExplicit(address borrower, ICozyEther market) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Based on https://github.com/Uniswap/v3-periphery/blob/80f26c86c57b8a5e4b913f42844d4c8bd274d058/contracts/libraries/TransferHelper.sol\\n */\\nlibrary TransferHelper {\\n  /**\\n   * @notice Transfers tokens from the targeted address to the given destination\\n   * @notice Errors with 'STF' if transfer fails\\n   * @param token The contract address of the token to be transferred\\n   * @param from The originating address from which the tokens will be transferred\\n   * @param to The destination address of the transfer\\n   * @param value The amount to be transferred\\n   */\\n  function safeTransferFrom(\\n      address token,\\n      address from,\\n      address to,\\n      uint256 value\\n  ) internal {\\n      (bool success, bytes memory data) =\\n          token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n      require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"Transfer from failed\\\");\\n  }\\n\\n  /**\\n   * @notice Transfers tokens from msg.sender to a recipient\\n   * @dev Errors with ST if transfer fails\\n   * @param token The contract address of the token which will be transferred\\n   * @param to The recipient of the transfer\\n   * @param value The value of the transfer\\n   */\\n  function safeTransfer(\\n      address token,\\n      address to,\\n      uint256 value\\n  ) internal {\\n      (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n      require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"Transfer failed\\\");\\n  }\\n\\n  /**\\n   * @notice Approves the stipulated contract to spend the given allowance in the given token\\n   * @dev Errors with 'SA' if transfer fails\\n   * @param token The contract address of the token to be approved\\n   * @param to The target of the approval\\n   * @param value The amount of the given token the target will be allowed to spend\\n   */\\n  function safeApprove(\\n      address token,\\n      address to,\\n      uint256 value\\n  ) internal {\\n      (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n      require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"Approve failed\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"curveToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositZap\",\"outputs\":[{\"internalType\":\"contract ICrvDepositZap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_yearnRedeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_curveMinAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_excessTokens\",\"type\":\"uint256\"}],\"name\":\"divest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_curveMinAmountOut\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moneyMarket\",\"outputs\":[{\"internalType\":\"contract ICozyToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionMarket\",\"outputs\":[{\"internalType\":\"contract ICozyToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearn\",\"outputs\":[{\"internalType\":\"contract IYVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CozyInvestYearnUSDN","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}