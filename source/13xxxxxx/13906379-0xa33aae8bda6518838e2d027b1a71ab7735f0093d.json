{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n// Sources flattened with hardhat v2.8.0 https://hardhat.org\r\n\r\n// File contracts/openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Mimon/IMimon.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IMimon {\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n\tfunction mint(address to) external;\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n\tfunction tokenByIndex(uint256 index) external view returns (uint256);\r\n\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) external;\r\n\r\n\tfunction approve(address to, uint256 tokenId) external;\r\n\r\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n\tfunction setApprovalForAll(address operator, bool _approved) external;\r\n\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n\tfunction massTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256[] memory _myTokensId\r\n\t) external;\r\n}\r\n\r\n\r\n// File contracts/Mimon-Sale/MimonSale.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\n\r\n\r\ncontract MimonSale is Context {\r\n\tusing SafeMath for uint256;\r\n\r\n\tIMimon public MimonContract;\r\n\tuint256 public constant PRESALE_PRICE = 40000000000000000; // 0.04 Eth\r\n\tuint256 public publicSalePrice;\r\n\tuint256 public constant MAX_PRESALE_SUPPLY = 2000;\r\n\tuint256 public constant MAX_TOKEN_SUPPLY = 10000;\r\n\tuint256 public constant MAX_PRESALE_AMOUNT = 3;\r\n\tuint256 public constant MAX_PUBLICSALE_AMOUNT = 15;\r\n\tbool public isPreSale = false;\r\n\tbool public isPublicSale = false;\r\n\taddress public C1;\r\n\taddress public C2;\r\n\taddress public devAddress;\r\n\r\n\tmapping(address => bool) public whitelist;\r\n\tmapping(address => uint256) public preSaleCount;\r\n\r\n\tmodifier preSaleRole(uint256 numberOfTokens) {\r\n\t\trequire(isPreSale, \"The sale has not started.\");\r\n\t\trequire(MimonContract.totalSupply() < MAX_PRESALE_SUPPLY, \"Pre-sale has already ended.\");\r\n\t\trequire(MimonContract.totalSupply().add(numberOfTokens) <= MAX_PRESALE_SUPPLY, \"Pre-sale would exceed max supply of Mimon\");\r\n\t\trequire(numberOfTokens <= MAX_PRESALE_AMOUNT, \"Can only mint 3 Mimon at a time\");\r\n\t\trequire(preSaleCount[_msgSender()] < MAX_PRESALE_AMOUNT, \"Pre-sale max mint amount is 3\");\r\n\t\trequire(preSaleCount[_msgSender()].add(numberOfTokens) <= MAX_PRESALE_AMOUNT, \"Pre-sale max mint amount is 3\");\r\n\t\trequire(PRESALE_PRICE.mul(numberOfTokens) <= msg.value, \"Eth value sent is not correct\");\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier publicSaleRole(uint256 numberOfTokens) {\r\n\t\trequire(isPublicSale, \"The sale has not started.\");\r\n\t\trequire(MimonContract.totalSupply() < MAX_TOKEN_SUPPLY, \"Sale has already ended.\");\r\n\t\trequire(MimonContract.totalSupply().add(numberOfTokens) <= MAX_TOKEN_SUPPLY, \"Purchase would exceed max supply of Mimon\");\r\n\t\trequire(numberOfTokens <= MAX_PUBLICSALE_AMOUNT, \"Can only mint 15 Mimon at a time\");\r\n\t\trequire(publicSalePrice.mul(numberOfTokens) <= msg.value, \"Eth value sent is not correct\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/*\r\n    C1: Team, C2: Dev\r\n  */\r\n\tmodifier onlyCreator() {\r\n\t\trequire(C1 == _msgSender() || C2 == _msgSender() || devAddress == _msgSender(), \"onlyCreator: caller is not the creator\");\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyC1() {\r\n\t\trequire(C1 == _msgSender(), \"only C1: caller is not the C1\");\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyC2() {\r\n\t\trequire(C2 == _msgSender(), \"only C2: caller is not the C2\");\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyDev() {\r\n\t\trequire(devAddress == _msgSender(), \"only dev: caller is not the dev\");\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\taddress _mimonCA,\r\n\t\taddress _C1,\r\n\t\taddress _C2,\r\n\t\taddress _dev\r\n\t) {\r\n\t\tMimonContract = IMimon(_mimonCA);\r\n\t\tC1 = _C1;\r\n\t\tC2 = _C2;\r\n\t\tdevAddress = _dev;\r\n\t\tsetPublicSalePrice(60000000000000000); // 0.06 Eth\r\n\t}\r\n\r\n\tfunction preSale(uint256 numberOfTokens) public payable preSaleRole(numberOfTokens) {\r\n\t\tfor (uint256 i = 0; i < numberOfTokens; i++) {\r\n\t\t\tif (MimonContract.totalSupply() < MAX_PRESALE_SUPPLY) {\r\n\t\t\t\tMimonContract.mint(_msgSender());\r\n\t\t\t}\r\n\t\t}\r\n\t\tpreSaleCount[_msgSender()] = preSaleCount[_msgSender()].add(numberOfTokens);\r\n\t}\r\n\r\n\tfunction publicSale(uint256 numberOfTokens) public payable publicSaleRole(numberOfTokens) {\r\n\t\tfor (uint256 i = 0; i < numberOfTokens; i++) {\r\n\t\t\tif (MimonContract.totalSupply() < MAX_TOKEN_SUPPLY) {\r\n\t\t\t\tMimonContract.mint(_msgSender());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction preMint(uint256 numberOfTokens, address receiver) public onlyCreator {\r\n\t\tfor (uint256 i = 0; i < numberOfTokens; i++) {\r\n\t\t\tif (MimonContract.totalSupply() < MAX_TOKEN_SUPPLY) {\r\n\t\t\t\tMimonContract.mint(receiver);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction withdraw() public payable onlyCreator {\r\n\t\tuint256 contractBalance = address(this).balance;\r\n\t\tuint256 percentage = contractBalance.div(100);\r\n\r\n\t\trequire(payable(C1).send(percentage.mul(90)));\r\n\t\trequire(payable(C2).send(percentage.mul(10)));\r\n\t}\r\n\r\n\tfunction setC1(address changeAddress) public onlyC1 {\r\n\t\tC1 = changeAddress;\r\n\t}\r\n\r\n\tfunction setC2(address changeAddress) public onlyC2 {\r\n\t\tC2 = changeAddress;\r\n\t}\r\n\r\n\tfunction setDev(address changeAddress) public onlyDev {\r\n\t\tdevAddress = changeAddress;\r\n\t}\r\n\r\n\tfunction setPreSale() public onlyCreator {\r\n\t\tisPreSale = !isPreSale;\r\n\t}\r\n\r\n\tfunction setPublicSale() public onlyCreator {\r\n\t\tif (isPreSale == true) {\r\n\t\t\tsetPreSale();\r\n\t\t}\r\n\t\tisPublicSale = !isPublicSale;\r\n\t}\r\n\r\n\tfunction setPublicSalePrice(uint256 price) public onlyCreator {\r\n\t\tpublicSalePrice = price;\r\n\t}\r\n\r\n\tfunction addToWhitelist(address _beneficiary) external onlyCreator {\r\n\t\twhitelist[_beneficiary] = true;\r\n\t}\r\n\r\n\tfunction addManyToWhitelist(address[] memory _beneficiaries) external onlyCreator {\r\n\t\tfor (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n\t\t\twhitelist[_beneficiaries[i]] = true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction removeFromWhitelist(address _beneficiary) external onlyCreator {\r\n\t\twhitelist[_beneficiary] = false;\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mimonCA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_C1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_C2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"C1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"C2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PRESALE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PRESALE_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PUBLICSALE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKEN_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MimonContract\",\"outputs\":[{\"internalType\":\"contract IMimon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"addManyToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPreSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"preMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"preSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"preSaleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"publicSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"changeAddress\",\"type\":\"address\"}],\"name\":\"setC1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"changeAddress\",\"type\":\"address\"}],\"name\":\"setC2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"changeAddress\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPreSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPublicSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"MimonSale","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007fb4a2249fd66510c1d77b99454cd6b968daf5f7000000000000000000000000b2fcbae828cd3016a15e979ad63d8fccf5b68935000000000000000000000000e405a75be9b3d416463e4de02d2d08cfd35a8adf000000000000000000000000cea1d08a2497abf300ea3f0ef3f954993b4e5ab7","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cc1ee1d5a2bccfffc1193975ac14a83669b14238c9d7b13c1500f27c401d452e"}]}