{"status":"1","message":"OK","result":[{"SourceCode":"/*\n    ___            _       ___  _                          \n    | .\\ ___  _ _ <_> ___ | __><_>._ _  ___ ._ _  ___  ___ \n    |  _// ._>| '_>| ||___|| _> | || ' |<_> || ' |/ | '/ ._>\n    |_|  \\___.|_|  |_|     |_|  |_||_|_|<___||_|_|\\_|_.\\___.\n    \n* PeriFinance: CollateralManager.sol\n*\n* Latest source (may be newer): https://github.com/perifinance/peri-finance/blob/master/contracts/CollateralManager.sol\n* Docs: Will be added in the future. \n* https://docs.peri.finance/contracts/source/contracts/CollateralManager\n*\n* Contract Dependencies: \n*\t- IAddressResolver\n*\t- ICollateralManager\n*\t- MixinResolver\n*\t- Owned\n*\t- Pausable\n*\t- State\n* Libraries: \n*\t- AddressSetLib\n*\t- Bytes32SetLib\n*\t- SafeDecimalMath\n*\t- SafeMath\n*\n* MIT License\n* ===========\n*\n* Copyright (c) 2021 PeriFinance\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n\n\n\npragma solidity 0.5.16;\n\n// https://docs.peri.finance/contracts/source/contracts/owned\ncontract Owned {\n    address public owner;\n    address public nominatedOwner;\n\n    constructor(address _owner) public {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    function acceptOwnership() external {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    modifier onlyOwner {\n        _onlyOwner();\n        _;\n    }\n\n    function _onlyOwner() private view {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}\n\n\n// Inheritance\n\n\n// https://docs.peri.finance/contracts/source/contracts/pausable\ncontract Pausable is Owned {\n    uint public lastPauseTime;\n    bool public paused;\n\n    constructor() internal {\n        // This contract is abstract, and thus cannot be instantiated directly\n        require(owner != address(0), \"Owner must be set\");\n        // Paused will be false, and lastPauseTime will be 0 upon initialisation\n    }\n\n    /**\n     * @notice Change the paused state of the contract\n     * @dev Only the contract owner may call this.\n     */\n    function setPaused(bool _paused) external onlyOwner {\n        // Ensure we're actually changing the state before we do anything\n        if (_paused == paused) {\n            return;\n        }\n\n        // Set our paused state.\n        paused = _paused;\n\n        // If applicable, set the last pause time.\n        if (paused) {\n            lastPauseTime = now;\n        }\n\n        // Let everyone know that our pause state has changed.\n        emit PauseChanged(paused);\n    }\n\n    event PauseChanged(bool isPaused);\n\n    modifier notPaused {\n        require(!paused, \"This action cannot be performed while the contract is paused\");\n        _;\n    }\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/iaddressresolver\ninterface IAddressResolver {\n    function getAddress(bytes32 name) external view returns (address);\n\n    function getPynth(bytes32 key) external view returns (address);\n\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/ipynth\ninterface IPynth {\n    // Views\n    function currencyKey() external view returns (bytes32);\n\n    function transferablePynths(address account) external view returns (uint);\n\n    // Mutative functions\n    function transferAndSettle(address to, uint value) external returns (bool);\n\n    function transferFromAndSettle(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool);\n\n    // Restricted: used internally to PeriFinance\n    function burn(address account, uint amount) external;\n\n    function issue(address account, uint amount) external;\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/iissuer\ninterface IIssuer {\n    // Views\n    function anyPynthOrPERIRateIsInvalid() external view returns (bool anyRateInvalid);\n\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\n\n    function availablePynthCount() external view returns (uint);\n\n    function availablePynths(uint index) external view returns (IPynth);\n\n    function canBurnPynths(address account) external view returns (bool);\n\n    function collateral(address account) external view returns (uint);\n\n    function collateralisationRatio(address issuer) external view returns (uint);\n\n    function collateralisationRatioAndAnyRatesInvalid(address _issuer)\n        external\n        view\n        returns (uint cratio, bool anyRateIsInvalid);\n\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint debtBalance);\n\n    function issuanceRatio() external view returns (uint);\n\n    function externalTokenLimit() external view returns (uint);\n\n    function lastIssueEvent(address account) external view returns (uint);\n\n    function maxIssuablePynths(address issuer) external view returns (uint maxIssuable);\n\n    function externalTokenQuota(\n        address _account,\n        uint _addtionalpUSD,\n        uint _addtionalExToken,\n        bool _isIssue\n    ) external view returns (uint);\n\n    function maxExternalTokenStakeAmount(address _account, bytes32 _currencyKey)\n        external\n        view\n        returns (uint issueAmountToQuota, uint stakeAmountToQuota);\n\n    function minimumStakeTime() external view returns (uint);\n\n    function remainingIssuablePynths(address issuer)\n        external\n        view\n        returns (\n            uint maxIssuable,\n            uint alreadyIssued,\n            uint totalSystemDebt\n        );\n\n    function pynths(bytes32 currencyKey) external view returns (IPynth);\n\n    function getPynths(bytes32[] calldata currencyKeys) external view returns (IPynth[] memory);\n\n    function pynthsByAddress(address pynthAddress) external view returns (bytes32);\n\n    function totalIssuedPynths(bytes32 currencyKey, bool excludeEtherCollateral) external view returns (uint);\n\n    function transferablePeriFinanceAndAnyRateIsInvalid(address account, uint balance)\n        external\n        view\n        returns (uint transferable, bool anyRateIsInvalid);\n\n    // Restricted: used internally to PeriFinance\n    function issuePynths(\n        address _issuer,\n        bytes32 _currencyKey,\n        uint _issueAmount\n    ) external;\n\n    function issueMaxPynths(address _issuer) external;\n\n    function issuePynthsToMaxQuota(address _issuer, bytes32 _currencyKey) external;\n\n    function burnPynths(\n        address _from,\n        bytes32 _currencyKey,\n        uint _burnAmount\n    ) external;\n\n    function fitToClaimable(address _from) external;\n\n    function exit(address _from) external;\n\n    function liquidateDelinquentAccount(\n        address account,\n        uint pusdAmount,\n        address liquidator\n    ) external returns (uint totalRedeemed, uint amountToLiquidate);\n}\n\n\n// Inheritance\n\n\n// Internal references\n\n\n// https://docs.peri.finance/contracts/source/contracts/addressresolver\ncontract AddressResolver is Owned, IAddressResolver {\n    mapping(bytes32 => address) public repository;\n\n    constructor(address _owner) public Owned(_owner) {}\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function importAddresses(bytes32[] calldata names, address[] calldata destinations) external onlyOwner {\n        require(names.length == destinations.length, \"Input lengths must match\");\n\n        for (uint i = 0; i < names.length; i++) {\n            bytes32 name = names[i];\n            address destination = destinations[i];\n            repository[name] = destination;\n            emit AddressImported(name, destination);\n        }\n    }\n\n    /* ========= PUBLIC FUNCTIONS ========== */\n\n    function rebuildCaches(MixinResolver[] calldata destinations) external {\n        for (uint i = 0; i < destinations.length; i++) {\n            destinations[i].rebuildCache();\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    function areAddressesImported(bytes32[] calldata names, address[] calldata destinations) external view returns (bool) {\n        for (uint i = 0; i < names.length; i++) {\n            if (repository[names[i]] != destinations[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function getAddress(bytes32 name) external view returns (address) {\n        return repository[name];\n    }\n\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address) {\n        address _foundAddress = repository[name];\n        require(_foundAddress != address(0), reason);\n        return _foundAddress;\n    }\n\n    function getPynth(bytes32 key) external view returns (address) {\n        IIssuer issuer = IIssuer(repository[\"Issuer\"]);\n        require(address(issuer) != address(0), \"Cannot find Issuer address\");\n        return address(issuer.pynths(key));\n    }\n\n    /* ========== EVENTS ========== */\n\n    event AddressImported(bytes32 name, address destination);\n}\n\n\n// solhint-disable payable-fallback\n\n// https://docs.peri.finance/contracts/source/contracts/readproxy\ncontract ReadProxy is Owned {\n    address public target;\n\n    constructor(address _owner) public Owned(_owner) {}\n\n    function setTarget(address _target) external onlyOwner {\n        target = _target;\n        emit TargetUpdated(target);\n    }\n\n    function() external {\n        // The basics of a proxy read call\n        // Note that msg.sender in the underlying will always be the address of this contract.\n        assembly {\n            calldatacopy(0, 0, calldatasize)\n\n            // Use of staticcall - this will revert if the underlying function mutates state\n            let result := staticcall(gas, sload(target_slot), 0, calldatasize, 0, 0)\n            returndatacopy(0, 0, returndatasize)\n\n            if iszero(result) {\n                revert(0, returndatasize)\n            }\n            return(0, returndatasize)\n        }\n    }\n\n    event TargetUpdated(address newTarget);\n}\n\n\n// Inheritance\n\n\n// Internal references\n\n\n// https://docs.peri.finance/contracts/source/contracts/mixinresolver\ncontract MixinResolver {\n    AddressResolver public resolver;\n\n    mapping(bytes32 => address) private addressCache;\n\n    constructor(address _resolver) internal {\n        resolver = AddressResolver(_resolver);\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function combineArrays(bytes32[] memory first, bytes32[] memory second)\n        internal\n        pure\n        returns (bytes32[] memory combination)\n    {\n        combination = new bytes32[](first.length + second.length);\n\n        for (uint i = 0; i < first.length; i++) {\n            combination[i] = first[i];\n        }\n\n        for (uint j = 0; j < second.length; j++) {\n            combination[first.length + j] = second[j];\n        }\n    }\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n    // Note: this function is public not external in order for it to be overridden and invoked via super in subclasses\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {}\n\n    function rebuildCache() public {\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\n        // The resolver must call this function whenver it updates its state\n        for (uint i = 0; i < requiredAddresses.length; i++) {\n            bytes32 name = requiredAddresses[i];\n            // Note: can only be invoked once the resolver has all the targets needed added\n            address destination =\n                resolver.requireAndGetAddress(name, string(abi.encodePacked(\"Resolver missing target: \", name)));\n            addressCache[name] = destination;\n            emit CacheUpdated(name, destination);\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    function isResolverCached() external view returns (bool) {\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\n        for (uint i = 0; i < requiredAddresses.length; i++) {\n            bytes32 name = requiredAddresses[i];\n            // false if our cache is invalid or if the resolver doesn't have the required address\n            if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function requireAndGetAddress(bytes32 name) internal view returns (address) {\n        address _foundAddress = addressCache[name];\n        require(_foundAddress != address(0), string(abi.encodePacked(\"Missing address: \", name)));\n        return _foundAddress;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event CacheUpdated(bytes32 name, address destination);\n}\n\n\ninterface ICollateralManager {\n    // Manager information\n    function hasCollateral(address collateral) external view returns (bool);\n\n    function isPynthManaged(bytes32 currencyKey) external view returns (bool);\n\n    // State information\n    function long(bytes32 pynth) external view returns (uint amount);\n\n    function short(bytes32 pynth) external view returns (uint amount);\n\n    function totalLong() external view returns (uint pusdValue, bool anyRateIsInvalid);\n\n    function totalShort() external view returns (uint pusdValue, bool anyRateIsInvalid);\n\n    function getBorrowRate() external view returns (uint borrowRate, bool anyRateIsInvalid);\n\n    function getShortRate(bytes32 pynth) external view returns (uint shortRate, bool rateIsInvalid);\n\n    function getRatesAndTime(uint index)\n        external\n        view\n        returns (\n            uint entryRate,\n            uint lastRate,\n            uint lastUpdated,\n            uint newIndex\n        );\n\n    function getShortRatesAndTime(bytes32 currency, uint index)\n        external\n        view\n        returns (\n            uint entryRate,\n            uint lastRate,\n            uint lastUpdated,\n            uint newIndex\n        );\n\n    function exceedsDebtLimit(uint amount, bytes32 currency) external view returns (bool canIssue, bool anyRateIsInvalid);\n\n    function arePynthsAndCurrenciesSet(bytes32[] calldata requiredPynthNamesInResolver, bytes32[] calldata pynthKeys)\n        external\n        view\n        returns (bool);\n\n    function areShortablePynthsSet(bytes32[] calldata requiredPynthNamesInResolver, bytes32[] calldata pynthKeys)\n        external\n        view\n        returns (bool);\n\n    // Loans\n    function getNewLoanId() external returns (uint id);\n\n    // Manager mutative\n    function addCollaterals(address[] calldata collaterals) external;\n\n    function removeCollaterals(address[] calldata collaterals) external;\n\n    function addPynths(bytes32[] calldata pynthNamesInResolver, bytes32[] calldata pynthKeys) external;\n\n    function removePynths(bytes32[] calldata pynths, bytes32[] calldata pynthKeys) external;\n\n    function addShortablePynths(bytes32[2][] calldata requiredPynthAndInverseNamesInResolver, bytes32[] calldata pynthKeys)\n        external;\n\n    function removeShortablePynths(bytes32[] calldata pynths) external;\n\n    // State mutative\n    function updateBorrowRates(uint rate) external;\n\n    function updateShortRates(bytes32 currency, uint rate) external;\n\n    function incrementLongs(bytes32 pynth, uint amount) external;\n\n    function decrementLongs(bytes32 pynth, uint amount) external;\n\n    function incrementShorts(bytes32 pynth, uint amount) external;\n\n    function decrementShorts(bytes32 pynth, uint amount) external;\n}\n\n\n// https://docs.peri.finance/contracts/source/libraries/addresssetlib/\nlibrary AddressSetLib {\n    struct AddressSet {\n        address[] elements;\n        mapping(address => uint) indices;\n    }\n\n    function contains(AddressSet storage set, address candidate) internal view returns (bool) {\n        if (set.elements.length == 0) {\n            return false;\n        }\n        uint index = set.indices[candidate];\n        return index != 0 || set.elements[0] == candidate;\n    }\n\n    function getPage(\n        AddressSet storage set,\n        uint index,\n        uint pageSize\n    ) internal view returns (address[] memory) {\n        // NOTE: This implementation should be converted to slice operators if the compiler is updated to v0.6.0+\n        uint endIndex = index + pageSize; // The check below that endIndex <= index handles overflow.\n\n        // If the page extends past the end of the list, truncate it.\n        if (endIndex > set.elements.length) {\n            endIndex = set.elements.length;\n        }\n        if (endIndex <= index) {\n            return new address[](0);\n        }\n\n        uint n = endIndex - index; // We already checked for negative overflow.\n        address[] memory page = new address[](n);\n        for (uint i; i < n; i++) {\n            page[i] = set.elements[i + index];\n        }\n        return page;\n    }\n\n    function add(AddressSet storage set, address element) internal {\n        // Adding to a set is an idempotent operation.\n        if (!contains(set, element)) {\n            set.indices[element] = set.elements.length;\n            set.elements.push(element);\n        }\n    }\n\n    function remove(AddressSet storage set, address element) internal {\n        require(contains(set, element), \"Element not in set.\");\n        // Replace the removed element with the last element of the list.\n        uint index = set.indices[element];\n        uint lastIndex = set.elements.length - 1; // We required that element is in the list, so it is not empty.\n        if (index != lastIndex) {\n            // No need to shift the last element if it is the one we want to delete.\n            address shiftedElement = set.elements[lastIndex];\n            set.elements[index] = shiftedElement;\n            set.indices[shiftedElement] = index;\n        }\n        set.elements.pop();\n        delete set.indices[element];\n    }\n}\n\n\n// https://docs.peri.finance/contracts/source/libraries/bytes32setlib/\nlibrary Bytes32SetLib {\n    struct Bytes32Set {\n        bytes32[] elements;\n        mapping(bytes32 => uint) indices;\n    }\n\n    function contains(Bytes32Set storage set, bytes32 candidate) internal view returns (bool) {\n        if (set.elements.length == 0) {\n            return false;\n        }\n        uint index = set.indices[candidate];\n        return index != 0 || set.elements[0] == candidate;\n    }\n\n    function getPage(\n        Bytes32Set storage set,\n        uint index,\n        uint pageSize\n    ) internal view returns (bytes32[] memory) {\n        // NOTE: This implementation should be converted to slice operators if the compiler is updated to v0.6.0+\n        uint endIndex = index + pageSize; // The check below that endIndex <= index handles overflow.\n\n        // If the page extends past the end of the list, truncate it.\n        if (endIndex > set.elements.length) {\n            endIndex = set.elements.length;\n        }\n        if (endIndex <= index) {\n            return new bytes32[](0);\n        }\n\n        uint n = endIndex - index; // We already checked for negative overflow.\n        bytes32[] memory page = new bytes32[](n);\n        for (uint i; i < n; i++) {\n            page[i] = set.elements[i + index];\n        }\n        return page;\n    }\n\n    function add(Bytes32Set storage set, bytes32 element) internal {\n        // Adding to a set is an idempotent operation.\n        if (!contains(set, element)) {\n            set.indices[element] = set.elements.length;\n            set.elements.push(element);\n        }\n    }\n\n    function remove(Bytes32Set storage set, bytes32 element) internal {\n        require(contains(set, element), \"Element not in set.\");\n        // Replace the removed element with the last element of the list.\n        uint index = set.indices[element];\n        uint lastIndex = set.elements.length - 1; // We required that element is in the list, so it is not empty.\n        if (index != lastIndex) {\n            // No need to shift the last element if it is the one we want to delete.\n            bytes32 shiftedElement = set.elements[lastIndex];\n            set.elements[index] = shiftedElement;\n            set.indices[shiftedElement] = index;\n        }\n        set.elements.pop();\n        delete set.indices[element];\n    }\n}\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n\n// Libraries\n\n\n// https://docs.peri.finance/contracts/source/libraries/safedecimalmath\nlibrary SafeDecimalMath {\n    using SafeMath for uint;\n\n    /* Number of decimal places in the representations. */\n    uint8 public constant decimals = 18;\n    uint8 public constant highPrecisionDecimals = 27;\n\n    /* The number representing 1.0. */\n    uint public constant UNIT = 10**uint(decimals);\n\n    /* The number representing 1.0 for higher fidelity numbers. */\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\n\n    /**\n     * @return Provides an interface to UNIT.\n     */\n    function unit() external pure returns (uint) {\n        return UNIT;\n    }\n\n    /**\n     * @return Provides an interface to PRECISE_UNIT.\n     */\n    function preciseUnit() external pure returns (uint) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n     * decimals.\n     *\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\n     * so that product must be less than 2**256. As this is an integer division,\n     * the internal division always rounds down. This helps save on gas. Rounding\n     * is more expensive on gas.\n     */\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return x.mul(y) / UNIT;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of the specified precision unit.\n     *\n     * @dev The operands should be in the form of a the specified unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function _multiplyDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a precise unit.\n     *\n     * @dev The operands should be in the precise unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a standard unit.\n     *\n     * @dev The operands should be in the standard unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is a high\n     * precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n     * this is an integer division, the result is always rounded down.\n     * This helps save on gas. Rounding is more expensive on gas.\n     */\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return x.mul(UNIT).div(y);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * decimal in the precision unit specified in the parameter.\n     *\n     * @dev y is divided after the product of x and the specified precision unit\n     * is evaluated, so the product of x and the specified precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function _divideDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\n\n        if (resultTimesTen % 10 >= 5) {\n            resultTimesTen += 10;\n        }\n\n        return resultTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * standard precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and the standard precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * high precision decimal.\n     *\n     * @dev y is divided after the product of x and the high precision unit\n     * is evaluated, so the product of x and the high precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Convert a standard decimal representation to a high precision one.\n     */\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n    }\n\n    /**\n     * @dev Convert a high precision decimal to a standard decimal representation.\n     */\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    /**\n     * @dev Round down the value with given number\n     */\n    function roundDownDecimal(uint x, uint d) internal pure returns (uint) {\n        return x.div(10**d).mul(10**d);\n    }\n\n    /**\n     * @dev Round up the value with given number\n     */\n    function roundUpDecimal(uint x, uint d) internal pure returns (uint) {\n        uint _decimal = 10**d;\n\n        if (x % _decimal > 0) {\n            x = x.add(10**d);\n        }\n\n        return x.div(_decimal).mul(_decimal);\n    }\n}\n\n\n// Inheritance\n\n\n// https://docs.peri.finance/contracts/source/contracts/state\ncontract State is Owned {\n    // the address of the contract that can modify variables\n    // this can only be changed by the owner of this contract\n    address public associatedContract;\n\n    constructor(address _associatedContract) internal {\n        // This contract is abstract, and thus cannot be instantiated directly\n        require(owner != address(0), \"Owner must be set\");\n\n        associatedContract = _associatedContract;\n        emit AssociatedContractUpdated(_associatedContract);\n    }\n\n    /* ========== SETTERS ========== */\n\n    // Change the associated contract to a new address\n    function setAssociatedContract(address _associatedContract) external onlyOwner {\n        associatedContract = _associatedContract;\n        emit AssociatedContractUpdated(_associatedContract);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyAssociatedContract {\n        require(msg.sender == associatedContract, \"Only the associated contract can perform this action\");\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event AssociatedContractUpdated(address associatedContract);\n}\n\n\npragma experimental ABIEncoderV2;\n\n// Inheritance\n\n\n// Libraries\n\n\ncontract CollateralManagerState is Owned, State {\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    struct Balance {\n        uint long;\n        uint short;\n    }\n\n    uint public totalLoans;\n\n    uint[] public borrowRates;\n    uint public borrowRatesLastUpdated;\n\n    mapping(bytes32 => uint[]) public shortRates;\n    mapping(bytes32 => uint) public shortRatesLastUpdated;\n\n    // The total amount of long and short for a pynth,\n    mapping(bytes32 => Balance) public totalIssuedPynths;\n\n    constructor(address _owner, address _associatedContract) public Owned(_owner) State(_associatedContract) {\n        borrowRates.push(0);\n        borrowRatesLastUpdated = block.timestamp;\n    }\n\n    function incrementTotalLoans() external onlyAssociatedContract returns (uint) {\n        totalLoans = totalLoans.add(1);\n        return totalLoans;\n    }\n\n    function long(bytes32 pynth) external view onlyAssociatedContract returns (uint) {\n        return totalIssuedPynths[pynth].long;\n    }\n\n    function short(bytes32 pynth) external view onlyAssociatedContract returns (uint) {\n        return totalIssuedPynths[pynth].short;\n    }\n\n    function incrementLongs(bytes32 pynth, uint256 amount) external onlyAssociatedContract {\n        totalIssuedPynths[pynth].long = totalIssuedPynths[pynth].long.add(amount);\n    }\n\n    function decrementLongs(bytes32 pynth, uint256 amount) external onlyAssociatedContract {\n        totalIssuedPynths[pynth].long = totalIssuedPynths[pynth].long.sub(amount);\n    }\n\n    function incrementShorts(bytes32 pynth, uint256 amount) external onlyAssociatedContract {\n        totalIssuedPynths[pynth].short = totalIssuedPynths[pynth].short.add(amount);\n    }\n\n    function decrementShorts(bytes32 pynth, uint256 amount) external onlyAssociatedContract {\n        totalIssuedPynths[pynth].short = totalIssuedPynths[pynth].short.sub(amount);\n    }\n\n    // Borrow rates, one array here for all currencies.\n\n    function getRateAt(uint index) public view returns (uint) {\n        return borrowRates[index];\n    }\n\n    function getRatesLength() public view returns (uint) {\n        return borrowRates.length;\n    }\n\n    function updateBorrowRates(uint rate) external onlyAssociatedContract {\n        borrowRates.push(rate);\n        borrowRatesLastUpdated = block.timestamp;\n    }\n\n    function ratesLastUpdated() public view returns (uint) {\n        return borrowRatesLastUpdated;\n    }\n\n    function getRatesAndTime(uint index)\n        external\n        view\n        returns (\n            uint entryRate,\n            uint lastRate,\n            uint lastUpdated,\n            uint newIndex\n        )\n    {\n        newIndex = getRatesLength();\n        entryRate = getRateAt(index);\n        lastRate = getRateAt(newIndex - 1);\n        lastUpdated = ratesLastUpdated();\n    }\n\n    // Short rates, one array per currency.\n\n    function addShortCurrency(bytes32 currency) external onlyAssociatedContract {\n        if (shortRates[currency].length > 0) {} else {\n            shortRates[currency].push(0);\n            shortRatesLastUpdated[currency] = block.timestamp;\n        }\n    }\n\n    function removeShortCurrency(bytes32 currency) external onlyAssociatedContract {\n        delete shortRates[currency];\n    }\n\n    function getShortRateAt(bytes32 currency, uint index) internal view returns (uint) {\n        return shortRates[currency][index];\n    }\n\n    function getShortRatesLength(bytes32 currency) public view returns (uint) {\n        return shortRates[currency].length;\n    }\n\n    function updateShortRates(bytes32 currency, uint rate) external onlyAssociatedContract {\n        shortRates[currency].push(rate);\n        shortRatesLastUpdated[currency] = block.timestamp;\n    }\n\n    function shortRateLastUpdated(bytes32 currency) internal view returns (uint) {\n        return shortRatesLastUpdated[currency];\n    }\n\n    function getShortRatesAndTime(bytes32 currency, uint index)\n        external\n        view\n        returns (\n            uint entryRate,\n            uint lastRate,\n            uint lastUpdated,\n            uint newIndex\n        )\n    {\n        newIndex = getShortRatesLength(currency);\n        entryRate = getShortRateAt(currency, index);\n        lastRate = getShortRateAt(currency, newIndex - 1);\n        lastUpdated = shortRateLastUpdated(currency);\n    }\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/iexchangerates\ninterface IExchangeRates {\n    // Structs\n    struct RateAndUpdatedTime {\n        uint216 rate;\n        uint40 time;\n    }\n\n    struct InversePricing {\n        uint entryPoint;\n        uint upperLimit;\n        uint lowerLimit;\n        bool frozenAtUpperLimit;\n        bool frozenAtLowerLimit;\n    }\n\n    // Views\n    function aggregators(bytes32 currencyKey) external view returns (address);\n\n    function aggregatorWarningFlags() external view returns (address);\n\n    function anyRateIsInvalid(bytes32[] calldata currencyKeys) external view returns (bool);\n\n    function canFreezeRate(bytes32 currencyKey) external view returns (bool);\n\n    function currentRoundForRate(bytes32 currencyKey) external view returns (uint);\n\n    function currenciesUsingAggregator(address aggregator) external view returns (bytes32[] memory);\n\n    function effectiveValue(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external view returns (uint value);\n\n    function effectiveValueAndRates(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    )\n        external\n        view\n        returns (\n            uint value,\n            uint sourceRate,\n            uint destinationRate\n        );\n\n    function effectiveValueAtRound(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        uint roundIdForSrc,\n        uint roundIdForDest\n    ) external view returns (uint value);\n\n    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint);\n\n    function getLastRoundIdBeforeElapsedSecs(\n        bytes32 currencyKey,\n        uint startingRoundId,\n        uint startingTimestamp,\n        uint timediff\n    ) external view returns (uint);\n\n    function inversePricing(bytes32 currencyKey)\n        external\n        view\n        returns (\n            uint entryPoint,\n            uint upperLimit,\n            uint lowerLimit,\n            bool frozenAtUpperLimit,\n            bool frozenAtLowerLimit\n        );\n\n    function lastRateUpdateTimes(bytes32 currencyKey) external view returns (uint256);\n\n    function oracle() external view returns (address);\n\n    function rateAndTimestampAtRound(bytes32 currencyKey, uint roundId) external view returns (uint rate, uint time);\n\n    function rateAndUpdatedTime(bytes32 currencyKey) external view returns (uint rate, uint time);\n\n    function rateAndInvalid(bytes32 currencyKey) external view returns (uint rate, bool isInvalid);\n\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\n\n    function rateIsFlagged(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsFrozen(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsInvalid(bytes32 currencyKey) external view returns (bool);\n\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\n\n    function rateStalePeriod() external view returns (uint);\n\n    function ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32 currencyKey, uint numRounds)\n        external\n        view\n        returns (uint[] memory rates, uint[] memory times);\n\n    function ratesAndInvalidForCurrencies(bytes32[] calldata currencyKeys)\n        external\n        view\n        returns (uint[] memory rates, bool anyRateInvalid);\n\n    function ratesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory);\n\n    // Mutative functions\n    function freezeRate(bytes32 currencyKey) external;\n}\n\n\n// https://docs.peri.finance/contracts/source/interfaces/ierc20\ninterface IERC20 {\n    // ERC20 Optional Views\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    // Views\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address owner) external view returns (uint);\n\n    function allowance(address owner, address spender) external view returns (uint);\n\n    // Mutative functions\n    function transfer(address to, uint value) external returns (bool);\n\n    function approve(address spender, uint value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool);\n\n    // Events\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\n// Inheritance\n\n\n// Libraries\n\n\n// Internal references\n\n\ncontract CollateralManager is ICollateralManager, Owned, Pausable, MixinResolver {\n    /* ========== LIBRARIES ========== */\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n    using AddressSetLib for AddressSetLib.AddressSet;\n    using Bytes32SetLib for Bytes32SetLib.Bytes32Set;\n\n    /* ========== CONSTANTS ========== */\n\n    bytes32 private constant pUSD = \"pUSD\";\n\n    uint private constant SECONDS_IN_A_YEAR = 31556926 * 1e18;\n\n    // Flexible storage names\n    bytes32 public constant CONTRACT_NAME = \"CollateralManager\";\n    bytes32 internal constant COLLATERAL_PYNTHS = \"collateralPynth\";\n\n    /* ========== STATE VARIABLES ========== */\n\n    // Stores debt balances and borrow rates.\n    CollateralManagerState public state;\n\n    // The set of all collateral contracts.\n    AddressSetLib.AddressSet internal _collaterals;\n\n    // The set of all pynths issuable by the various collateral contracts\n    Bytes32SetLib.Bytes32Set internal _pynths;\n\n    // Map from currency key to pynth contract name.\n    mapping(bytes32 => bytes32) public pynthsByKey;\n\n    // The set of all pynths that are shortable.\n    Bytes32SetLib.Bytes32Set internal _shortablePynths;\n\n    mapping(bytes32 => bytes32) public pynthToInversePynth;\n\n    // The factor that will scale the utilisation ratio.\n    uint public utilisationMultiplier = 1e18;\n\n    // The maximum amount of debt in pUSD that can be issued by non peri collateral.\n    uint public maxDebt;\n\n    // The base interest rate applied to all borrows.\n    uint public baseBorrowRate;\n\n    // The base interest rate applied to all shorts.\n    uint public baseShortRate;\n\n    /* ---------- Address Resolver Configuration ---------- */\n\n    bytes32 private constant CONTRACT_ISSUER = \"Issuer\";\n    bytes32 private constant CONTRACT_EXRATES = \"ExchangeRates\";\n\n    bytes32[24] private addressesToCache = [CONTRACT_ISSUER, CONTRACT_EXRATES];\n\n    /* ========== CONSTRUCTOR ========== */\n    constructor(\n        CollateralManagerState _state,\n        address _owner,\n        address _resolver,\n        uint _maxDebt,\n        uint _baseBorrowRate,\n        uint _baseShortRate\n    ) public Owned(_owner) Pausable() MixinResolver(_resolver) {\n        owner = msg.sender;\n        state = _state;\n\n        setMaxDebt(_maxDebt);\n        setBaseBorrowRate(_baseBorrowRate);\n        setBaseShortRate(_baseShortRate);\n\n        owner = _owner;\n    }\n\n    /* ========== VIEWS ========== */\n\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {\n        bytes32[] memory staticAddresses = new bytes32[](2);\n        staticAddresses[0] = CONTRACT_ISSUER;\n        staticAddresses[1] = CONTRACT_EXRATES;\n\n        // we want to cache the name of the pynth and the name of its corresponding iPynth\n        bytes32[] memory shortAddresses;\n        uint length = _shortablePynths.elements.length;\n\n        if (length > 0) {\n            shortAddresses = new bytes32[](length * 2);\n\n            for (uint i = 0; i < length; i++) {\n                shortAddresses[i] = _shortablePynths.elements[i];\n                shortAddresses[i + length] = pynthToInversePynth[_shortablePynths.elements[i]];\n            }\n        }\n\n        bytes32[] memory pynthAddresses = combineArrays(shortAddresses, _pynths.elements);\n\n        if (pynthAddresses.length > 0) {\n            addresses = combineArrays(pynthAddresses, staticAddresses);\n        } else {\n            addresses = staticAddresses;\n        }\n    }\n\n    // helper function to check whether pynth \"by key\" is a collateral issued by multi-collateral\n    function isPynthManaged(bytes32 currencyKey) external view returns (bool) {\n        return pynthsByKey[currencyKey] != bytes32(0);\n    }\n\n    /* ---------- Related Contracts ---------- */\n\n    function _issuer() internal view returns (IIssuer) {\n        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));\n    }\n\n    function _exchangeRates() internal view returns (IExchangeRates) {\n        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));\n    }\n\n    function _pynth(bytes32 pynthName) internal view returns (IPynth) {\n        return IPynth(requireAndGetAddress(pynthName));\n    }\n\n    /* ---------- Manager Information ---------- */\n\n    function hasCollateral(address collateral) public view returns (bool) {\n        return _collaterals.contains(collateral);\n    }\n\n    function hasAllCollaterals(address[] memory collaterals) public view returns (bool) {\n        for (uint i = 0; i < collaterals.length; i++) {\n            if (!hasCollateral(collaterals[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /* ---------- State Information ---------- */\n\n    function long(bytes32 pynth) external view returns (uint amount) {\n        return state.long(pynth);\n    }\n\n    function short(bytes32 pynth) external view returns (uint amount) {\n        return state.short(pynth);\n    }\n\n    function totalLong() public view returns (uint pusdValue, bool anyRateIsInvalid) {\n        bytes32[] memory pynths = _pynths.elements;\n\n        if (pynths.length > 0) {\n            for (uint i = 0; i < pynths.length; i++) {\n                bytes32 pynth = _pynth(pynths[i]).currencyKey();\n                if (pynth == pUSD) {\n                    pusdValue = pusdValue.add(state.long(pynth));\n                } else {\n                    (uint rate, bool invalid) = _exchangeRates().rateAndInvalid(pynth);\n                    uint amount = state.long(pynth).multiplyDecimal(rate);\n                    pusdValue = pusdValue.add(amount);\n                    if (invalid) {\n                        anyRateIsInvalid = true;\n                    }\n                }\n            }\n        }\n    }\n\n    function totalShort() public view returns (uint pusdValue, bool anyRateIsInvalid) {\n        bytes32[] memory pynths = _shortablePynths.elements;\n\n        if (pynths.length > 0) {\n            for (uint i = 0; i < pynths.length; i++) {\n                bytes32 pynth = _pynth(pynths[i]).currencyKey();\n                (uint rate, bool invalid) = _exchangeRates().rateAndInvalid(pynth);\n                uint amount = state.short(pynth).multiplyDecimal(rate);\n                pusdValue = pusdValue.add(amount);\n                if (invalid) {\n                    anyRateIsInvalid = true;\n                }\n            }\n        }\n    }\n\n    function getBorrowRate() external view returns (uint borrowRate, bool anyRateIsInvalid) {\n        // get the peri backed debt.\n        uint periDebt = _issuer().totalIssuedPynths(pUSD, true);\n\n        // now get the non peri backed debt.\n        (uint nonPeriDebt, bool ratesInvalid) = totalLong();\n\n        // the total.\n        uint totalDebt = periDebt.add(nonPeriDebt);\n\n        // now work out the utilisation ratio, and divide through to get a per second value.\n        uint utilisation = nonPeriDebt.divideDecimal(totalDebt).divideDecimal(SECONDS_IN_A_YEAR);\n\n        // scale it by the utilisation multiplier.\n        uint scaledUtilisation = utilisation.multiplyDecimal(utilisationMultiplier);\n\n        // finally, add the base borrow rate.\n        borrowRate = scaledUtilisation.add(baseBorrowRate);\n\n        anyRateIsInvalid = ratesInvalid;\n    }\n\n    function getShortRate(bytes32 pynth) external view returns (uint shortRate, bool rateIsInvalid) {\n        bytes32 pynthKey = _pynth(pynth).currencyKey();\n\n        rateIsInvalid = _exchangeRates().rateIsInvalid(pynthKey);\n\n        // get the spot supply of the pynth, its iPynth\n        uint longSupply = IERC20(address(_pynth(pynth))).totalSupply();\n        uint inverseSupply = IERC20(address(_pynth(pynthToInversePynth[pynth]))).totalSupply();\n        // add the iPynth to supply properly reflect the market skew.\n        uint shortSupply = state.short(pynthKey).add(inverseSupply);\n\n        // in this case, the market is skewed long so its free to short.\n        if (longSupply > shortSupply) {\n            return (0, rateIsInvalid);\n        }\n\n        // otherwise workout the skew towards the short side.\n        uint skew = shortSupply.sub(longSupply);\n\n        // divide through by the size of the market\n        uint proportionalSkew = skew.divideDecimal(longSupply.add(shortSupply)).divideDecimal(SECONDS_IN_A_YEAR);\n\n        // finally, add the base short rate.\n        shortRate = proportionalSkew.add(baseShortRate);\n    }\n\n    function getRatesAndTime(uint index)\n        external\n        view\n        returns (\n            uint entryRate,\n            uint lastRate,\n            uint lastUpdated,\n            uint newIndex\n        )\n    {\n        (entryRate, lastRate, lastUpdated, newIndex) = state.getRatesAndTime(index);\n    }\n\n    function getShortRatesAndTime(bytes32 currency, uint index)\n        external\n        view\n        returns (\n            uint entryRate,\n            uint lastRate,\n            uint lastUpdated,\n            uint newIndex\n        )\n    {\n        (entryRate, lastRate, lastUpdated, newIndex) = state.getShortRatesAndTime(currency, index);\n    }\n\n    function exceedsDebtLimit(uint amount, bytes32 currency) external view returns (bool canIssue, bool anyRateIsInvalid) {\n        uint usdAmount = _exchangeRates().effectiveValue(currency, amount, pUSD);\n\n        (uint longValue, bool longInvalid) = totalLong();\n        (uint shortValue, bool shortInvalid) = totalShort();\n\n        anyRateIsInvalid = longInvalid || shortInvalid;\n\n        return (longValue.add(shortValue).add(usdAmount) <= maxDebt, anyRateIsInvalid);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /* ---------- SETTERS ---------- */\n\n    function setUtilisationMultiplier(uint _utilisationMultiplier) public onlyOwner {\n        require(_utilisationMultiplier > 0, \"Must be greater than 0\");\n        utilisationMultiplier = _utilisationMultiplier;\n    }\n\n    function setMaxDebt(uint _maxDebt) public onlyOwner {\n        require(_maxDebt > 0, \"Must be greater than 0\");\n        maxDebt = _maxDebt;\n        emit MaxDebtUpdated(maxDebt);\n    }\n\n    function setBaseBorrowRate(uint _baseBorrowRate) public onlyOwner {\n        baseBorrowRate = _baseBorrowRate;\n        emit BaseBorrowRateUpdated(baseBorrowRate);\n    }\n\n    function setBaseShortRate(uint _baseShortRate) public onlyOwner {\n        baseShortRate = _baseShortRate;\n        emit BaseShortRateUpdated(baseShortRate);\n    }\n\n    /* ---------- LOANS ---------- */\n\n    function getNewLoanId() external onlyCollateral returns (uint id) {\n        id = state.incrementTotalLoans();\n    }\n\n    /* ---------- MANAGER ---------- */\n\n    function addCollaterals(address[] calldata collaterals) external onlyOwner {\n        for (uint i = 0; i < collaterals.length; i++) {\n            if (!_collaterals.contains(collaterals[i])) {\n                _collaterals.add(collaterals[i]);\n                emit CollateralAdded(collaterals[i]);\n            }\n        }\n    }\n\n    function removeCollaterals(address[] calldata collaterals) external onlyOwner {\n        for (uint i = 0; i < collaterals.length; i++) {\n            if (_collaterals.contains(collaterals[i])) {\n                _collaterals.remove(collaterals[i]);\n                emit CollateralRemoved(collaterals[i]);\n            }\n        }\n    }\n\n    function addPynths(bytes32[] calldata pynthNamesInResolver, bytes32[] calldata pynthKeys) external onlyOwner {\n        for (uint i = 0; i < pynthNamesInResolver.length; i++) {\n            if (!_pynths.contains(pynthNamesInResolver[i])) {\n                bytes32 pynthName = pynthNamesInResolver[i];\n                _pynths.add(pynthName);\n                pynthsByKey[pynthKeys[i]] = pynthName;\n                emit PynthAdded(pynthName);\n            }\n        }\n    }\n\n    function arePynthsAndCurrenciesSet(bytes32[] calldata requiredPynthNamesInResolver, bytes32[] calldata pynthKeys)\n        external\n        view\n        returns (bool)\n    {\n        if (_pynths.elements.length != requiredPynthNamesInResolver.length) {\n            return false;\n        }\n\n        for (uint i = 0; i < requiredPynthNamesInResolver.length; i++) {\n            if (!_pynths.contains(requiredPynthNamesInResolver[i])) {\n                return false;\n            }\n            if (pynthsByKey[pynthKeys[i]] != requiredPynthNamesInResolver[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function removePynths(bytes32[] calldata pynths, bytes32[] calldata pynthKeys) external onlyOwner {\n        for (uint i = 0; i < pynths.length; i++) {\n            if (_pynths.contains(pynths[i])) {\n                // Remove it from the the address set lib.\n                _pynths.remove(pynths[i]);\n                delete pynthsByKey[pynthKeys[i]];\n\n                emit PynthRemoved(pynths[i]);\n            }\n        }\n    }\n\n    // When we add a shortable pynth, we need to know the iPynth as well\n    // This is so we can get the proper skew for the short rate.\n    function addShortablePynths(bytes32[2][] calldata requiredPynthAndInverseNamesInResolver, bytes32[] calldata pynthKeys)\n        external\n        onlyOwner\n    {\n        require(requiredPynthAndInverseNamesInResolver.length == pynthKeys.length, \"Input array length mismatch\");\n\n        for (uint i = 0; i < requiredPynthAndInverseNamesInResolver.length; i++) {\n            // setting these explicitly for clarity\n            // Each entry in the array is [Pynth, iPynth]\n            bytes32 pynth = requiredPynthAndInverseNamesInResolver[i][0];\n            bytes32 iPynth = requiredPynthAndInverseNamesInResolver[i][1];\n\n            if (!_shortablePynths.contains(pynth)) {\n                // Add it to the address set lib.\n                _shortablePynths.add(pynth);\n\n                // store the mapping to the iPynth so we can get its total supply for the borrow rate.\n                pynthToInversePynth[pynth] = iPynth;\n\n                emit ShortablePynthAdded(pynth);\n\n                // now the associated pynth key to the CollateralManagerState\n                state.addShortCurrency(pynthKeys[i]);\n            }\n        }\n\n        rebuildCache();\n    }\n\n    function areShortablePynthsSet(bytes32[] calldata requiredPynthNamesInResolver, bytes32[] calldata pynthKeys)\n        external\n        view\n        returns (bool)\n    {\n        require(requiredPynthNamesInResolver.length == pynthKeys.length, \"Input array length mismatch\");\n\n        if (_shortablePynths.elements.length != requiredPynthNamesInResolver.length) {\n            return false;\n        }\n\n        // first check contract state\n        for (uint i = 0; i < requiredPynthNamesInResolver.length; i++) {\n            bytes32 pynthName = requiredPynthNamesInResolver[i];\n            if (!_shortablePynths.contains(pynthName) || pynthToInversePynth[pynthName] == bytes32(0)) {\n                return false;\n            }\n        }\n\n        // now check everything added to external state contract\n        for (uint i = 0; i < pynthKeys.length; i++) {\n            if (state.getShortRatesLength(pynthKeys[i]) == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function removeShortablePynths(bytes32[] calldata pynths) external onlyOwner {\n        for (uint i = 0; i < pynths.length; i++) {\n            if (_shortablePynths.contains(pynths[i])) {\n                // Remove it from the the address set lib.\n                _shortablePynths.remove(pynths[i]);\n\n                bytes32 pynthKey = _pynth(pynths[i]).currencyKey();\n\n                state.removeShortCurrency(pynthKey);\n\n                // remove the inverse mapping.\n                delete pynthToInversePynth[pynths[i]];\n\n                emit ShortablePynthRemoved(pynths[i]);\n            }\n        }\n    }\n\n    /* ---------- STATE MUTATIONS ---------- */\n\n    function updateBorrowRates(uint rate) external onlyCollateral {\n        state.updateBorrowRates(rate);\n    }\n\n    function updateShortRates(bytes32 currency, uint rate) external onlyCollateral {\n        state.updateShortRates(currency, rate);\n    }\n\n    function incrementLongs(bytes32 pynth, uint amount) external onlyCollateral {\n        state.incrementLongs(pynth, amount);\n    }\n\n    function decrementLongs(bytes32 pynth, uint amount) external onlyCollateral {\n        state.decrementLongs(pynth, amount);\n    }\n\n    function incrementShorts(bytes32 pynth, uint amount) external onlyCollateral {\n        state.incrementShorts(pynth, amount);\n    }\n\n    function decrementShorts(bytes32 pynth, uint amount) external onlyCollateral {\n        state.decrementShorts(pynth, amount);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyCollateral {\n        bool isMultiCollateral = hasCollateral(msg.sender);\n\n        require(isMultiCollateral, \"Only collateral contracts\");\n        _;\n    }\n\n    // ========== EVENTS ==========\n    event MaxDebtUpdated(uint maxDebt);\n    event LiquidationPenaltyUpdated(uint liquidationPenalty);\n    event BaseBorrowRateUpdated(uint baseBorrowRate);\n    event BaseShortRateUpdated(uint baseShortRate);\n\n    event CollateralAdded(address collateral);\n    event CollateralRemoved(address collateral);\n\n    event PynthAdded(bytes32 pynth);\n    event PynthRemoved(bytes32 pynth);\n\n    event ShortablePynthAdded(bytes32 pynth);\n    event ShortablePynthRemoved(bytes32 pynth);\n}\n\n    ","ABI":"[{\"inputs\":[{\"internalType\":\"contract CollateralManagerState\",\"name\":\"_state\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseShortRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseBorrowRate\",\"type\":\"uint256\"}],\"name\":\"BaseBorrowRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseShortRate\",\"type\":\"uint256\"}],\"name\":\"BaseShortRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"CollateralRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationPenalty\",\"type\":\"uint256\"}],\"name\":\"LiquidationPenaltyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"}],\"name\":\"MaxDebtUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"pynth\",\"type\":\"bytes32\"}],\"name\":\"PynthAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"pynth\",\"type\":\"bytes32\"}],\"name\":\"PynthRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"pynth\",\"type\":\"bytes32\"}],\"name\":\"ShortablePynthAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"pynth\",\"type\":\"bytes32\"}],\"name\":\"ShortablePynthRemoved\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collaterals\",\"type\":\"address[]\"}],\"name\":\"addCollaterals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"pynthNamesInResolver\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"pynthKeys\",\"type\":\"bytes32[]\"}],\"name\":\"addPynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[2][]\",\"name\":\"requiredPynthAndInverseNamesInResolver\",\"type\":\"bytes32[2][]\"},{\"internalType\":\"bytes32[]\",\"name\":\"pynthKeys\",\"type\":\"bytes32[]\"}],\"name\":\"addShortablePynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"requiredPynthNamesInResolver\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"pynthKeys\",\"type\":\"bytes32[]\"}],\"name\":\"arePynthsAndCurrenciesSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"requiredPynthNamesInResolver\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"pynthKeys\",\"type\":\"bytes32[]\"}],\"name\":\"areShortablePynthsSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseShortRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pynth\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decrementLongs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pynth\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decrementShorts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"name\":\"exceedsDebtLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canIssue\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"anyRateIsInvalid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"anyRateIsInvalid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getNewLoanId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRatesAndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entryRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pynth\",\"type\":\"bytes32\"}],\"name\":\"getShortRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shortRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rateIsInvalid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getShortRatesAndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entryRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collaterals\",\"type\":\"address[]\"}],\"name\":\"hasAllCollaterals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"hasCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pynth\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"incrementLongs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pynth\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"incrementShorts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"isPynthManaged\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPauseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pynth\",\"type\":\"bytes32\"}],\"name\":\"long\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pynthToInversePynth\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pynthsByKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebuildCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collaterals\",\"type\":\"address[]\"}],\"name\":\"removeCollaterals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"pynths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"pynthKeys\",\"type\":\"bytes32[]\"}],\"name\":\"removePynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"pynths\",\"type\":\"bytes32[]\"}],\"name\":\"removeShortablePynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolverAddressesRequired\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"addresses\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseBorrowRate\",\"type\":\"uint256\"}],\"name\":\"setBaseBorrowRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseShortRate\",\"type\":\"uint256\"}],\"name\":\"setBaseShortRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDebt\",\"type\":\"uint256\"}],\"name\":\"setMaxDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_utilisationMultiplier\",\"type\":\"uint256\"}],\"name\":\"setUtilisationMultiplier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pynth\",\"type\":\"bytes32\"}],\"name\":\"short\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"contract CollateralManagerState\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pusdValue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"anyRateIsInvalid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalShort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pusdValue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"anyRateIsInvalid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"updateBorrowRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"updateShortRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"utilisationMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CollateralManager","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000373f5612ccc70b06e87117fddac61dc74da7a956000000000000000000000000918153d6e806df9d4d33664d1cc580416171f7200000000000000000000000007015cd1e78ba1428d103b0c2513077b2826b64fc000000000000000000000000000000000000000000295be96e64066972000000000000000000000000000000000000000000000000000000000000000971a92f000000000000000000000000000000000000000000000000000000000971a92f","EVMVersion":"Default","Library":"SafeDecimalMath:6e0bff12512a94f3b1ecebe08203fe7f8f8fae64","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}