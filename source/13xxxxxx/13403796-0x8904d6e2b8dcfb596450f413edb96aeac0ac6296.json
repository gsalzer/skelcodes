{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/deploy/RootChainlink.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\nimport \\\"./BaseUpgradeabililtyProxy.sol\\\";\\n\\ncontract RootChainlink is BaseUpgradeabililtyProxy {\\n  address private _admin;\\n\\n  constructor (address admin) {\\n    _setAdmin(admin);\\n  }\\n\\n  function implement(address implementation) external onlyAdmin {\\n    upgradeTo(implementation);\\n  }\\n\\n  function setAdmin(address admin) external onlyAdmin {\\n    _setAdmin(admin);\\n  }\\n\\n  function _setAdmin(address admin) internal {\\n    _admin = admin;\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(\\n      msg.sender == _admin,\\n      \\\"RootChainlink: Not admin\\\"\\n    );\\n\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/deploy/BaseUpgradeabililtyProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\nimport {UpgradesAddress} from \\\"./Address.sol\\\";\\n\\ncontract BaseUpgradeabililtyProxy {\\n  // solhint-disable-next-line no-empty-blocks\\n  function initialize() public virtual {}\\n\\n  bytes32 private constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  event Upgraded(address indexed implementation);\\n  event ValueReceived(address user, uint amount);\\n\\n  function implementation() public view returns (address impl) {\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      impl := sload(slot)\\n    }\\n  }\\n\\n  function upgradeTo(address newImplementation) internal {\\n    setImplementation(newImplementation);\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory reason) = newImplementation.delegatecall(abi.encodeWithSignature(\\\"initialize()\\\"));\\n    require(success, string(reason));\\n\\n    emit Upgraded(newImplementation);\\n  }\\n\\n  function setImplementation(address newImplementation) internal {\\n    require(UpgradesAddress.isContract(newImplementation),\\n      \\\"Cannot set a proxy implementation to a non-contract address\\\");\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      sstore(slot, newImplementation)\\n    }\\n  }\\n\\n  receive() external payable {\\n    emit ValueReceived(msg.sender, msg.value);\\n  }\\n\\n  // solhint-disable-next-line no-complex-fallback\\n  fallback () external payable {\\n    address _impl = implementation();\\n    require(_impl != address(0), \\\"implementation not set\\\");\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      calldatacopy(0, 0, calldatasize())\\n\\n      let result := delegatecall(gas(), _impl, 0, calldatasize(), 0, 0)\\n\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n      case 0 { revert(0, returndatasize()) }\\n      default { return(0, returndatasize()) }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/deploy/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\nlibrary UpgradesAddress {\\n  function isContract(address account) internal view returns (bool) {\\n    uint256 size;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly { size := extcodesize(account) }\\n    return size > 0;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ValueReceived\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"implement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"RootChainlink","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"000000000000000000000000be5c4169e394dc196de61614ced79632174d9937","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}