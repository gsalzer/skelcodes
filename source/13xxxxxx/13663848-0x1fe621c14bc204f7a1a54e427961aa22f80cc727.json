{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BoostedEthBridgeSwapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\nimport \\\"./ZkSyncBridgeSwapper.sol\\\";\\nimport \\\"./interfaces/ILido.sol\\\";\\nimport \\\"./interfaces/ICurvePool.sol\\\";\\nimport \\\"./interfaces/IYearnVault.sol\\\";\\n\\n/**\\n* @notice Exchanges Eth for the \\\"Yearn vault Curve pool staked Eth\\\" token.\\n* Indexes:\\n* 0: Eth\\n* 1: yvCrvStEth\\n*/\\ncontract BoostedEthBridgeSwapper is ZkSyncBridgeSwapper {\\n\\n    address public immutable stEth;\\n    address public immutable crvStEth;\\n    address public immutable yvCrvStEth;\\n\\n    ICurvePool public immutable stEthPool;\\n    address public immutable lidoReferral;\\n\\n    constructor(\\n        address _zkSync,\\n        address _l2Account,\\n        address _yvCrvStEth,\\n        address _stEthPool,\\n        address _lidoReferral\\n    )\\n        ZkSyncBridgeSwapper(_zkSync, _l2Account)\\n    {\\n        require(_yvCrvStEth != address(0), \\\"null _yvCrvStEth\\\");\\n        yvCrvStEth = _yvCrvStEth;\\n        address _crvStEth = IYearnVault(_yvCrvStEth).token();\\n        require(_crvStEth != address(0), \\\"null crvStEth\\\");\\n\\n        require(_stEthPool != address(0), \\\"null _stEthPool\\\");\\n\\n        require(_crvStEth == ICurvePool(_stEthPool).lp_token(), \\\"crvStEth mismatch\\\");\\n        crvStEth = _crvStEth;\\n        stEth = ICurvePool(_stEthPool).coins(1);\\n        stEthPool = ICurvePool(_stEthPool);\\n        lidoReferral = _lidoReferral;\\n    }\\n\\n    function exchange(uint256 _indexIn, uint256 _indexOut, uint256 _amountIn) external override returns (uint256 amountOut) {\\n        require(_indexIn + _indexOut == 1, \\\"invalid indexes\\\");\\n\\n        if (_indexIn == 0) {\\n            transferFromZkSync(ETH_TOKEN);\\n            amountOut = swapEthForYvCrv(_amountIn);\\n            transferToZkSync(yvCrvStEth, amountOut);\\n            emit Swapped(ETH_TOKEN, _amountIn, yvCrvStEth, amountOut);\\n        } else {\\n            transferFromZkSync(yvCrvStEth);\\n            amountOut = swapYvCrvForEth(_amountIn);\\n            transferToZkSync(ETH_TOKEN, amountOut);\\n            emit Swapped(yvCrvStEth, _amountIn, ETH_TOKEN, amountOut);\\n        }\\n    }\\n\\n    function swapEthForYvCrv(uint256 _amountIn) internal returns (uint256) {\\n        // ETH -> crvStETH\\n        uint256 minLpAmount = getMinAmountOut((1 ether * _amountIn) / stEthPool.get_virtual_price());\\n        uint256 crvStEthAmount = stEthPool.add_liquidity{value: _amountIn}([_amountIn, 0], minLpAmount);\\n\\n        // crvStETH -> yvCrvStETH\\n        IERC20(crvStEth).approve(yvCrvStEth, crvStEthAmount);\\n        return IYearnVault(yvCrvStEth).deposit(crvStEthAmount);\\n    }\\n\\n    function swapYvCrvForEth(uint256 _amountIn) internal returns (uint256) {\\n        // yvCrvStETH -> crvStETH\\n        uint256 crvStEthAmount = IYearnVault(yvCrvStEth).withdraw(_amountIn);\\n\\n        // crvStETH -> ETH\\n        uint256 minAmountOut = getMinAmountOut((crvStEthAmount * stEthPool.get_virtual_price()) / 1 ether);\\n        return stEthPool.remove_liquidity_one_coin(crvStEthAmount, 0, minAmountOut);\\n    }\\n\\n    function ethPerYvCrvStEth() public view returns (uint256) {\\n        return IYearnVault(yvCrvStEth).pricePerShare() * stEthPool.get_virtual_price() / 1 ether;\\n    }\\n\\n    function yvCrvStEthPerEth() public view returns (uint256) {\\n        return (1 ether ** 2) / ethPerYvCrvStEth();\\n    }\\n\\n    function tokens(uint256 _index) external view returns (address) {\\n        if (_index == 0) {\\n            return ETH_TOKEN;\\n        } else if (_index == 1) {\\n            return yvCrvStEth;\\n        }\\n        revert(\\\"invalid _index\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ZkSyncBridgeSwapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\nimport \\\"./interfaces/IZkSync.sol\\\";\\nimport \\\"./interfaces/IBridgeSwapper.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract ZkSyncBridgeSwapper is IBridgeSwapper {\\n\\n    // The owner of the contract\\n    address public owner;\\n    // The max slippage accepted for swapping. Defaults to 1% with 6 decimals.\\n    uint256 public slippagePercent = 1e6;\\n\\n    // The ZkSync bridge contract\\n    address public immutable zkSync;\\n    // The L2 market maker account\\n    address public immutable l2Account;\\n\\n    address constant internal ETH_TOKEN = address(0);\\n\\n    event OwnerChanged(address _owner, address _newOwner);\\n    event SlippageChanged(uint256 _slippagePercent);\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"unauthorised\\\");\\n        _;\\n    }\\n\\n    constructor(address _zkSync, address _l2Account) {\\n        zkSync = _zkSync;\\n        l2Account = _l2Account;\\n        owner = msg.sender;\\n    }\\n\\n    function changeOwner(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"invalid input\\\");\\n        owner = _newOwner;\\n        emit OwnerChanged(owner, _newOwner);\\n    }\\n\\n    function changeSlippage(uint256 _slippagePercent) external onlyOwner {\\n        require(_slippagePercent != slippagePercent && _slippagePercent <= 100e6, \\\"invalid slippage\\\");\\n        slippagePercent = _slippagePercent;\\n        emit SlippageChanged(slippagePercent);\\n    }\\n\\n    /**\\n    * @dev Check if there is a pending balance to withdraw in zkSync and withdraw it if applicable.\\n    * @param _token The token to withdraw.\\n    */\\n    function transferFromZkSync(address _token) internal {\\n        uint128 pendingBalance = IZkSync(zkSync).getPendingBalance(address(this), _token);\\n        if (pendingBalance > 0) {\\n            IZkSync(zkSync).withdrawPendingBalance(payable(address(this)), _token, pendingBalance);\\n        }\\n    }\\n\\n    /**\\n    * @dev Deposit the ETH or ERC20 token to zkSync.\\n    * @param _outputToken The token that was given.\\n    * @param _amountOut The amount of given token.\\n    */\\n    function transferToZkSync(address _outputToken, uint256 _amountOut) internal {\\n        if (_outputToken == ETH_TOKEN) {\\n            // deposit Eth to L2 bridge\\n            IZkSync(zkSync).depositETH{value: _amountOut}(l2Account);\\n        } else {\\n            // approve the zkSync bridge to take the output token\\n            IERC20(_outputToken).approve(zkSync, _amountOut);\\n            // deposit the output token to the L2 bridge\\n            IZkSync(zkSync).depositERC20(IERC20(_outputToken), toUint104(_amountOut), l2Account);\\n        }\\n    }\\n\\n    /**\\n    * @dev Safety method to recover ETH or ERC20 tokens that are sent to the contract by error.\\n    * @param _token The token to recover.\\n    */\\n    function recoverToken(address _recipient, address _token) external onlyOwner returns (uint256 balance) {\\n        bool success;\\n        if (_token == ETH_TOKEN) {\\n            balance = address(this).balance;\\n            (success, ) = _recipient.call{value: balance}(\\\"\\\");\\n        } else {\\n            balance = IERC20(_token).balanceOf(address(this));\\n            success = IERC20(_token).transfer(_recipient, balance);\\n        }\\n        require(success, \\\"failed to recover\\\");\\n    }\\n\\n    /**\\n     * @dev fallback method to make sure we can receive ETH\\n     */\\n    receive() external payable {\\n        \\n    }\\n\\n    /**\\n     * @dev Returns the minimum accepted out amount.\\n     */\\n    function getMinAmountOut(uint256 _amountIn) internal view returns (uint256) {\\n        return _amountIn * (100e6 - slippagePercent) / 100e6;\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILido.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\ninterface ILido {\\n    function submit(address _referral) external payable returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICurvePool.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\ninterface ICurvePool {\\n    function coins(uint256 _i) external view returns (address);\\n    function lp_token() external view returns (address);\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function exchange(int128 _i, int128 _j, uint256 _dx, uint256 _minDy) external returns (uint256);\\n    function add_liquidity(uint256[2] calldata _amounts, uint256 _minMintAmount) external payable returns (uint256);\\n    function remove_liquidity_one_coin(uint256 _amount, int128 _i, uint256 _minAmount) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IYearnVault.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\ninterface IYearnVault {\\n    function token() external view returns (address);\\n    function pricePerShare() external view returns (uint256);\\n\\n    function deposit(uint256 _amount) external returns (uint256);\\n    function withdraw(uint256 _maxShares) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IZkSync.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IZkSync {\\n    function getPendingBalance(address _address, address _token) external view returns (uint128);\\n    function withdrawPendingBalance(address payable _owner, address _token, uint128 _amount) external;\\n    function depositETH(address _zkSyncAddress) external payable;\\n    function depositERC20(IERC20 _token, uint104 _amount, address _zkSyncAddress) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBridgeSwapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\ninterface IBridgeSwapper {\\n    event Swapped(address _inputToken, uint256 _amountIn, address _outputToken, uint256 _amountOut);\\n\\n    /**\\n    * @notice Perform an exchange between two tokens\\n    * @dev Index values can usually be found via the constructor arguments (if not hardcoded)\\n    * @param _indexIn Index value for the token to send\\n    * @param _indexOut Index valie of the token to receive\\n    * @param _amountIn Amount of `_indexIn` being exchanged\\n    * @return Actual amount of `_indexOut` received\\n    */\\n    function exchange(uint256 _indexIn, uint256 _indexOut, uint256 _amountIn) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zkSync\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yvCrvStEth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stEthPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lidoReferral\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_slippagePercent\",\"type\":\"uint256\"}],\"name\":\"SlippageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippagePercent\",\"type\":\"uint256\"}],\"name\":\"changeSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvStEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPerYvCrvStEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lidoReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippagePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stEthPool\",\"outputs\":[{\"internalType\":\"contract ICurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yvCrvStEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yvCrvStEthPerEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkSync\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BoostedEthBridgeSwapper","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000abea9132b05a70803a4e85094fd0e1800777fbef000000000000000000000000f92f4d924faf02d94f37bb886966fd2460f924fd000000000000000000000000dcd90c7f6324cfa40d7169ef80b12031770b4325000000000000000000000000dc24316b9ae028f1497c275eb9192a3ea0f67022000000000000000000000000ef8e1b4b676a5285db79d55d3288bc5fe65c71cc","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}