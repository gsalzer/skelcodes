{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n \r\n  ____  _       _ _     _           \r\n |  _ \\(_) __ _(_) |__ | | ___  ___ \r\n | | | | |/ _` | | '_ \\| |/ _ \\/ __|\r\n | |_| | | (_| | | |_) | |  __/\\__ \\\r\n |____/|_|\\__, |_|_.__/|_|\\___||___/\r\n          |___/                     \r\n\r\n * Digibles DAO contract:\r\n * 1. Collects funds & allocates shares\r\n * 2. Keeps track of contributions with shares\r\n * 3. Allow the transfer of shares\r\n * 4. Allow proposals to be created, and voted on\r\n * 5. Allows executution of successful proposals\r\n * 6. Allows for dispersement of staked shares and funds\r\n */\r\n\r\ncontract DAO {\r\n\r\n  struct Proposal {\r\n    uint id;\r\n    string name;\r\n    string details;\r\n    uint amount;\r\n    address payable recipient;\r\n    uint votes;\r\n    uint votesFor;\r\n    uint votesAgainst;\r\n    uint end;\r\n    bool executed;\r\n    bool active;\r\n  }\r\n\r\n  mapping(address => bool) public investors;\r\n  mapping(address => uint) public shares;\r\n  mapping(address => mapping(uint => bool)) public votes;\r\n  mapping(uint => Proposal) public proposals;\r\n  uint public totalShares;\r\n  uint public availableFunds;\r\n  uint public contributionEnd;\r\n  uint public nextProposalId;\r\n  uint public voteTime;\r\n  uint public quorum;\r\n  address public admin;\r\n  IERC20 public stakingToken;\r\n    \r\n  constructor(IERC20 _stakingToken) {\r\n    // defaults\r\n    admin = msg.sender;\r\n    contributionEnd = block.timestamp + 86400;\r\n    voteTime = 86400;\r\n    quorum = 1;\r\n    stakingToken = IERC20(_stakingToken);\r\n  }\r\n\r\n  function setup(\r\n    uint _contributionTime, \r\n    uint _voteTime,\r\n    uint _quorum,\r\n    IERC20 _stakingToken) external onlyAdmin() {\r\n    require(_quorum > 0 && _quorum < 100, 'quorum must be between 0 and 100');\r\n    contributionEnd = block.timestamp + _contributionTime;\r\n    voteTime = _voteTime;\r\n    quorum = _quorum;\r\n    stakingToken = IERC20(_stakingToken);\r\n  }\r\n\r\n  function contribute() payable external {\r\n    require(block.timestamp < contributionEnd, 'cannot contribute after contributionEnd');\r\n    investors[msg.sender] = true;\r\n    shares[msg.sender] += msg.value;\r\n    totalShares += msg.value;\r\n    availableFunds += msg.value;\r\n  }\r\n\r\n  function redeemShare(uint amount) external {\r\n    require(shares[msg.sender] >= amount, 'not enough shares');\r\n    require(availableFunds >= amount, 'not enough available funds');\r\n    shares[msg.sender] -= amount;\r\n    availableFunds -= amount;\r\n    payable(msg.sender).transfer(amount);\r\n  }\r\n    \r\n  function transferShare(uint amount, address to) external {\r\n    require(shares[msg.sender] >= amount, 'not enough shares');\r\n    shares[msg.sender] -= amount;\r\n    shares[to] += amount;\r\n    investors[to] = true;\r\n  }\r\n\r\n  function createProposal(\r\n    string memory name,\r\n    string memory details,\r\n    uint amount,\r\n    address payable recipient) \r\n    public \r\n    onlyInvestors() {\r\n    require(availableFunds >= amount, 'amount too big');\r\n    proposals[nextProposalId] = Proposal(\r\n      nextProposalId,\r\n      name,\r\n      details,\r\n      amount,\r\n      recipient,\r\n      0,\r\n      0,\r\n      0,\r\n      block.timestamp + voteTime,\r\n      false,\r\n      true\r\n    );\r\n    availableFunds -= amount;\r\n    nextProposalId++;\r\n  }\r\n\r\n  function vote(uint proposalId, uint state) external onlyInvestors() {\r\n    Proposal storage proposal = proposals[proposalId];\r\n    require(votes[msg.sender][proposalId] == false, 'investor can only vote once for a proposal');\r\n    require(block.timestamp < proposal.end, 'can only vote prior to proposal end date');\r\n    votes[msg.sender][proposalId] = true;\r\n    if (state == 0) {\r\n        proposal.votesAgainst += shares[msg.sender];\r\n    } else if (state == 1) {\r\n        proposal.votesFor += shares[msg.sender];\r\n    }\r\n    proposal.votes += shares[msg.sender];\r\n    uint256 s = shares[msg.sender];\r\n    shares[msg.sender] -= s;\r\n  }\r\n\r\n  function executeProposal(uint proposalId) external onlyAdmin() {\r\n    Proposal storage proposal = proposals[proposalId];\r\n    require(block.timestamp >= proposal.end, 'cannot execute proposal before end date');\r\n    require(proposal.executed == false, 'cannot execute proposal already executed');\r\n    require((proposal.votes / totalShares) * 100 >= quorum, 'cannot execute proposal with votes # below quorum');\r\n    _transferEther(proposal.amount, proposal.recipient);\r\n  }\r\n\r\n  function setState(uint proposalId, bool state) external onlyAdmin() {\r\n    Proposal storage proposal = proposals[proposalId];\r\n    proposal.active = state;\r\n  }\r\n  \r\n  function withdrawEther(uint amount, address payable to) external onlyAdmin() {\r\n    _transferEther(amount, to);\r\n  }\r\n\r\n  function _transferEther(uint amount, address payable to) internal {\r\n    require(amount <= availableFunds, 'not enough availableFunds');\r\n    availableFunds -= amount;\r\n    to.transfer(amount);\r\n  }\r\n\r\n  function disperseEther(address[] memory recipients, uint256[] memory values) external payable {\r\n    for (uint256 i = 0; i < recipients.length; i++)\r\n        payable(recipients[i]).transfer(values[i]);\r\n    uint256 balance = payable(address(this)).balance;\r\n    if (balance > 0)\r\n        payable(msg.sender).transfer(balance);\r\n  }\r\n\r\n  function disperseToken(IERC20 token, address[] memory recipients, uint256[] memory values) external {\r\n    uint256 total = 0;\r\n    for (uint256 i = 0; i < recipients.length; i++)\r\n        total += values[i];\r\n    require(token.transferFrom(msg.sender, address(this), total));\r\n    for (uint256 i = 0; i < recipients.length; i++)\r\n        require(token.transfer(recipients[i], values[i]));\r\n  }\r\n\r\n  function disperseStakedToken(address[] memory recipients, uint256[] memory values) external onlyAdmin() {\r\n    for (uint256 i = 0; i < recipients.length; i++)\r\n        require(stakingToken.transferFrom(msg.sender, recipients[i], values[i]));\r\n  }\r\n\r\n  receive() external payable {\r\n    availableFunds += msg.value;\r\n  }\r\n\r\n  modifier onlyInvestors() {\r\n    require(investors[msg.sender] == true, 'only investors');\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmin() {\r\n    require(msg.sender == admin, 'only admin');\r\n    _;\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contributionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"disperseEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"disperseStakedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"disperseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contributionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DAO","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008d150a6ce9cdcf146b2d79b71841688760fb7b74","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5636a2f63ac6ee42430f91b2362fa9098f43e026e9875108688ff8ea9ff4b6d1"}]}