{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/IdleTokenGovernance.sol\": {\r\n      \"content\": \"/**\\n * @title: Idle Token Governance main contract\\n * @summary: ERC20 that holds pooled user funds together\\n *           Each token rapresent a share of the underlying pools\\n *           and with each token user have the right to redeem a portion of these pools\\n * @author: Idle Labs Inc., idle.finance\\n */\\npragma solidity 0.5.16;\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/lifecycle/Pausable.sol\\\";\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"./interfaces/iERC20Fulcrum.sol\\\";\\nimport \\\"./interfaces/ILendingProtocol.sol\\\";\\nimport \\\"./interfaces/IGovToken.sol\\\";\\nimport \\\"./interfaces/IIdleTokenV3_1.sol\\\";\\nimport \\\"./interfaces/IERC3156FlashBorrower.sol\\\";\\nimport \\\"./interfaces/IAaveIncentivesController.sol\\\";\\n\\nimport \\\"./interfaces/Comptroller.sol\\\";\\nimport \\\"./interfaces/CERC20.sol\\\";\\nimport \\\"./interfaces/AToken.sol\\\";\\nimport \\\"./interfaces/IdleController.sol\\\";\\nimport \\\"./interfaces/IIdleTokenHelper.sol\\\";\\n\\nimport \\\"./GST2ConsumerV2.sol\\\";\\n\\ncontract IdleTokenGovernance is Initializable, ERC20, ERC20Detailed, ReentrancyGuard, Ownable, Pausable, IIdleTokenV3_1, GST2ConsumerV2 {\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  uint256 private constant ONE_18 = 10**18;\\n  // State variables\\n  // eg. DAI address\\n  address public token;\\n  // eg. iDAI address\\n  address private iToken;\\n  // eg. cDAI address\\n  address private cToken;\\n  // Idle rebalancer current implementation address\\n  address public rebalancer;\\n  // Address collecting underlying fees\\n  address public feeAddress;\\n  // Last iToken price, used to pause contract in case of a black swan event\\n  uint256 public lastITokenPrice;\\n  // eg. 18 for DAI\\n  uint256 private tokenDecimals;\\n  // Max unlent assets percentage for gas friendly swaps\\n  uint256 public maxUnlentPerc; // 100000 == 100% -> 1000 == 1%\\n  // Current fee on interest gained\\n  uint256 public fee;\\n  // eg. [cTokenAddress, iTokenAddress, ...]\\n  address[] public allAvailableTokens;\\n  // eg. [COMPAddress, CRVAddress, ...]\\n  address[] public govTokens;\\n  // last fully applied allocations (ie when all liquidity has been correctly placed)\\n  // eg. [5000, 0, 5000, 0] for 50% in compound, 0% fulcrum, 50% aave, 0 dydx. same order of allAvailableTokens\\n  uint256[] public lastAllocations;\\n  // Map that saves avg idleToken price paid for each user, used to calculate earnings\\n  mapping(address => uint256) public userAvgPrices;\\n  // eg. cTokenAddress => IdleCompoundAddress\\n  mapping(address => address) public protocolWrappers;\\n  // array with last balance recorded for each gov tokens\\n  mapping (address => uint256) public govTokensLastBalances;\\n  // govToken -> user_address -> user_index eg. usersGovTokensIndexes[govTokens[0]][msg.sender] = 1111123;\\n  mapping (address => mapping (address => uint256)) public usersGovTokensIndexes;\\n  // global indices for each gov tokens used as a reference to calculate a fair share for each user\\n  mapping (address => uint256) public govTokensIndexes;\\n  // Map that saves amount with no fee for each user\\n  mapping(address => uint256) private userNoFeeQty;\\n  // variable used for avoid the call of mint and redeem in the same tx\\n  bytes32 private _minterBlock;\\n\\n  // Events\\n  event Rebalance(address _rebalancer, uint256 _amount);\\n  event Referral(uint256 _amount, address _ref);\\n\\n  // ########## IdleToken V4_1 updates\\n  // Idle governance token\\n  address public constant IDLE = address(0x875773784Af8135eA0ef43b5a374AaD105c5D39e);\\n  // Compound governance token\\n  address public constant COMP = address(0xc00e94Cb662C3520282E6f5717214004A7f26888);\\n  uint256 private constant FULL_ALLOC = 100000;\\n\\n  // Idle distribution controller\\n  address public constant idleController = address(0x275DA8e61ea8E02d51EDd8d0DC5c0E62b4CDB0BE);\\n  // oracle used for calculating the avgAPR with gov tokens\\n  address public oracle;\\n  // eg cDAI -> COMP\\n  mapping(address => address) private protocolTokenToGov;\\n  // Whether openRebalance is enabled or not\\n  bool public isRiskAdjusted;\\n  // last allocations submitted by rebalancer\\n  uint256[] private lastRebalancerAllocations;\\n\\n  // ########## IdleToken V5 updates\\n  // Fee for flash loan\\n  uint256 public flashLoanFee;\\n  // IdleToken helper address\\n  address public tokenHelper;\\n\\n  /**\\n  * @dev Emitted on flashLoan()\\n  * @param target The address of the flash loan receiver contract\\n  * @param initiator The address initiating the flash loan\\n  * @param amount The amount flash borrowed\\n  * @param premium The flash loan fee\\n  **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    uint256 amount,\\n    uint256 premium\\n  );\\n\\n  // Addresses for stkAAVE distribution from Aave\\n  address public constant stkAAVE = address(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\\n  address private aToken;\\n  // ########## End IdleToken V5 updates\\n\\n  // ERROR MESSAGES:\\n  // 0 = is 0\\n  // 1 = already initialized\\n  // 2 = length is different\\n  // 3 = Not greater then\\n  // 4 = lt\\n  // 5 = too high\\n  // 6 = not authorized\\n  // 7 = not equal\\n  // 8 = error on flash loan execution\\n  // 9 = Reentrancy\\n\\n  // onlyOwner\\n  /**\\n   * It allows owner to modify allAvailableTokens array in case of emergency\\n   * ie if a bug on a interest bearing token is discovered and reset protocolWrappers\\n   * associated with those tokens.\\n   *\\n   * @param protocolTokens : array of protocolTokens addresses (eg [cDAI, iDAI, ...])\\n   * @param wrappers : array of wrapper addresses (eg [IdleCompound, IdleFulcrum, ...])\\n   * @param _newGovTokens : array of governance token addresses\\n   * @param _newGovTokensEqualLen : array of governance token addresses for each\\n   *  protocolToken (addr0 should be used for protocols with no govToken)\\n   */\\n  function setAllAvailableTokensAndWrappers(\\n    address[] calldata protocolTokens,\\n    address[] calldata wrappers,\\n    address[] calldata _newGovTokens,\\n    address[] calldata _newGovTokensEqualLen\\n  ) external onlyOwner {\\n    require(protocolTokens.length == wrappers.length, \\\"2\\\");\\n    require(_newGovTokensEqualLen.length >= protocolTokens.length, '3');\\n\\n    govTokens = _newGovTokens;\\n\\n    address newGov;\\n    address protToken;\\n    for (uint256 i = 0; i < protocolTokens.length; i++) {\\n      protToken = protocolTokens[i];\\n      require(protToken != address(0) && wrappers[i] != address(0), \\\"0\\\");\\n      protocolWrappers[protToken] = wrappers[i];\\n\\n      // set protocol token to gov token mapping\\n      newGov = _newGovTokensEqualLen[i];\\n      if (newGov != IDLE) {\\n        protocolTokenToGov[protToken] = newGov;\\n      }\\n    }\\n\\n    allAvailableTokens = protocolTokens;\\n  }\\n\\n  /**\\n   * It allows owner to set the cToken address\\n   *\\n   * @param _cToken : new cToken address\\n   */\\n  function setCToken(address _cToken)\\n    external onlyOwner {\\n      require((cToken = _cToken) != address(0), \\\"0\\\");\\n  }\\n\\n  /**\\n   * It allows owner to set the aToken address\\n   *\\n   * @param _aToken : new aToken address\\n   */\\n  function setAToken(address _aToken)\\n    external onlyOwner {\\n      require((aToken = _aToken) != address(0), \\\"0\\\");\\n  }\\n\\n  /**\\n   * It allows owner to set the tokenHelper address\\n   *\\n   * @param _tokenHelper : new tokenHelper address\\n   */\\n  function setTokenHelper(address _tokenHelper)\\n    external onlyOwner {\\n      require((tokenHelper = _tokenHelper) != address(0), \\\"0\\\");\\n  }\\n\\n  /**\\n   * It allows owner to set the IdleRebalancerV3_1 address\\n   *\\n   * @param _rebalancer : new IdleRebalancerV3_1 address\\n   */\\n  function setRebalancer(address _rebalancer)\\n    external onlyOwner {\\n      require((rebalancer = _rebalancer) != address(0), \\\"0\\\");\\n  }\\n\\n  /**\\n   * It allows owner to set the fee (1000 == 10% of gained interest)\\n   *\\n   * @param _fee : fee amount where 100000 is 100%, max settable is 10%\\n   */\\n  function setFee(uint256 _fee)\\n    external onlyOwner {\\n      // 100000 == 100% -> 10000 == 10%\\n      require((fee = _fee) <= FULL_ALLOC / 10, \\\"5\\\");\\n  }\\n\\n  /**\\n   * It allows owner to set the fee address\\n   *\\n   * @param _feeAddress : fee address\\n   */\\n  function setFeeAddress(address _feeAddress)\\n    external onlyOwner {\\n      require((feeAddress = _feeAddress) != address(0), \\\"0\\\");\\n  }\\n\\n  /**\\n   * It allows owner to set the oracle address for getting avgAPR\\n   *\\n   * @param _oracle : new oracle address\\n   */\\n  function setOracleAddress(address _oracle)\\n    external onlyOwner {\\n      require((oracle = _oracle) != address(0), \\\"0\\\");\\n  }\\n\\n  /**\\n   * It allows owner to set the max unlent asset percentage (1000 == 1% of unlent asset max)\\n   *\\n   * @param _perc : max unlent perc where 100000 is 100%\\n   */\\n  function setMaxUnlentPerc(uint256 _perc)\\n    external onlyOwner {\\n      require((maxUnlentPerc = _perc) <= 100000, \\\"5\\\");\\n  }\\n\\n  /**\\n   * Used by Rebalancer to set the new allocations\\n   *\\n   * @param _allocations : array with allocations in percentages (100% => 100000)\\n   */\\n  function setAllocations(uint256[] calldata _allocations) external {\\n    require(msg.sender == rebalancer || msg.sender == owner(), \\\"6\\\");\\n    _setAllocations(_allocations);\\n  }\\n\\n  /**\\n   * Used by Rebalancer or in openRebalance to set the new allocations\\n   *\\n   * @param _allocations : array with allocations in percentages (100% => 100000)\\n   */\\n  function _setAllocations(uint256[] memory _allocations) internal {\\n    require(_allocations.length == allAvailableTokens.length, \\\"2\\\");\\n    uint256 total;\\n    for (uint256 i = 0; i < _allocations.length; i++) {\\n      total = total.add(_allocations[i]);\\n    }\\n    lastRebalancerAllocations = _allocations;\\n    require(total == FULL_ALLOC, \\\"7\\\");\\n  }\\n\\n  // view\\n  /**\\n   * Get latest allocations submitted by rebalancer\\n   *\\n   * @return : array of allocations ordered as allAvailableTokens\\n   */\\n  function getAllocations() external view returns (uint256[] memory) {\\n    return lastRebalancerAllocations;\\n  }\\n\\n  /**\\n  * Get currently used gov tokens\\n  *\\n  * @return : array of govTokens supported\\n  */\\n  function getGovTokens() external view returns (address[] memory) {\\n    return govTokens;\\n  }\\n\\n  /**\\n  * Get currently used protocol tokens (cDAI, aDAI, ...)\\n  *\\n  * @return : array of protocol tokens supported\\n  */\\n  function getAllAvailableTokens() external view returns (address[] memory) {\\n    return allAvailableTokens;\\n  }\\n\\n  /**\\n  * Get gov token associated to a protocol token eg protocolTokenToGov[cDAI] = COMP\\n  *\\n  * @return : address of the gov token\\n  */\\n  function getProtocolTokenToGov(address _protocolToken) external view returns (address) {\\n    return protocolTokenToGov[_protocolToken];\\n  }\\n\\n  /**\\n   * IdleToken price for a user considering fees, in underlying\\n   * this is useful when you need to redeem exactly X underlying\\n   *\\n   * @return : price in underlying token counting fees for a specific user\\n   */\\n  function tokenPriceWithFee(address user)\\n    external view\\n    returns (uint256 priceWFee) {\\n      uint256 userAvgPrice = userAvgPrices[user];\\n      priceWFee = _tokenPrice();\\n      if (userAvgPrice != 0 && priceWFee > userAvgPrice) {\\n        priceWFee = priceWFee.mul(FULL_ALLOC).sub(fee.mul(priceWFee.sub(userAvgPrice))).div(FULL_ALLOC);\\n      }\\n  }\\n\\n  /**\\n   * IdleToken price calculation, in underlying\\n   *\\n   * @return : price in underlying token\\n   */\\n  function tokenPrice()\\n    external view\\n    returns (uint256) {\\n    return _tokenPrice();\\n  }\\n\\n  /**\\n   * Get APR of every ILendingProtocol\\n   *\\n   * @return addresses: array of token addresses\\n   * @return aprs: array of aprs (ordered in respect to the `addresses` array)\\n   */\\n  function getAPRs()\\n    external view\\n    returns (address[] memory, uint256[] memory) {\\n    return IIdleTokenHelper(tokenHelper).getAPRs(address(this));\\n  }\\n\\n  /**\\n   * Get current avg APR of this IdleToken\\n   *\\n   * @return avgApr: current weighted avg apr\\n   */\\n  function getAvgAPR()\\n    external view\\n    returns (uint256) {\\n    return IIdleTokenHelper(tokenHelper).getAPR(address(this), cToken, aToken);\\n  }\\n\\n  /**\\n   * ERC20 modified transferFrom that also update the avgPrice paid for the recipient and\\n   * updates user gov idx\\n   *\\n   * @param sender : sender account\\n   * @param recipient : recipient account\\n   * @param amount : value to transfer\\n   * @return : flag whether transfer was successful or not\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n    _updateUserGovIdxTransfer(sender, recipient, amount);\\n    _transfer(sender, recipient, amount);\\n    _approve(sender, msg.sender, allowance(sender, msg.sender).sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n    _updateUserFeeInfo(recipient, amount, userAvgPrices[sender]);\\n    return true;\\n  }\\n\\n  /**\\n   * ERC20 modified transfer that also update the avgPrice paid for the recipient and\\n   * updates user gov idx\\n   *\\n   * @param recipient : recipient account\\n   * @param amount : value to transfer\\n   * @return : flag whether transfer was successful or not\\n   */\\n  function transfer(address recipient, uint256 amount) public returns (bool) {\\n    _updateUserGovIdxTransfer(msg.sender, recipient, amount);\\n    _transfer(msg.sender, recipient, amount);\\n    _updateUserFeeInfo(recipient, amount, userAvgPrices[msg.sender]);\\n    return true;\\n  }\\n\\n  /**\\n   * Helper method for transfer and transferFrom, updates recipient gov indexes\\n   *\\n   * @param _from : sender account\\n   * @param _to : recipient account\\n   * @param amount : value to transfer\\n   */\\n  function _updateUserGovIdxTransfer(address _from, address _to, uint256 amount) internal {\\n    address govToken;\\n    uint256 govTokenIdx;\\n    uint256 sharePerTokenFrom;\\n    uint256 shareTo;\\n    uint256 balanceTo = balanceOf(_to);\\n    for (uint256 i = 0; i < govTokens.length; i++) {\\n      govToken = govTokens[i];\\n      if (balanceTo == 0) {\\n        usersGovTokensIndexes[govToken][_to] = usersGovTokensIndexes[govToken][_from];\\n      } else {\\n        govTokenIdx = govTokensIndexes[govToken];\\n        // calc 1 idleToken value in gov shares for user `_from`\\n        sharePerTokenFrom = govTokenIdx.sub(usersGovTokensIndexes[govToken][_from]);\\n        // calc current gov shares (before transfer) for user `_to`\\n        shareTo = balanceTo.mul(govTokenIdx.sub(usersGovTokensIndexes[govToken][_to])).div(ONE_18);\\n        // user `_to` should have -> shareTo + (sharePerTokenFrom * amount / 1e18) = (balanceTo + amount) * (govTokenIdx - userIdx) / 1e18\\n        // so userIdx = govTokenIdx - ((shareTo * 1e18 + (sharePerTokenFrom * amount)) / (balanceTo + amount))\\n        usersGovTokensIndexes[govToken][_to] = govTokenIdx.sub(\\n          shareTo.mul(ONE_18).add(sharePerTokenFrom.mul(amount)).div(\\n            balanceTo.add(amount)\\n          )\\n        );\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Get how many gov tokens a user is entitled to (this may not include eventual undistributed tokens)\\n   *\\n   * @param _usr : user address\\n   * @return : array of amounts for each gov token\\n   */\\n  function getGovTokensAmounts(address _usr) external view returns (uint256[] memory _amounts) {\\n    address govToken;\\n    uint256 usrBal = balanceOf(_usr);\\n    _amounts = new uint256[](govTokens.length);\\n    for (uint256 i = 0; i < _amounts.length; i++) {\\n      govToken = govTokens[i];\\n      _amounts[i] = usrBal.mul(govTokensIndexes[govToken].sub(usersGovTokensIndexes[govToken][_usr])).div(ONE_18);\\n    }\\n  }\\n\\n  // external\\n  /**\\n   * Used to mint IdleTokens, given an underlying amount (eg. DAI).\\n   * This method triggers a rebalance of the pools if _skipRebalance is set to false\\n   * NOTE: User should 'approve' _amount of tokens before calling mintIdleToken\\n   * NOTE 2: this method can be paused\\n   *\\n   * @param _amount : amount of underlying token to be lended\\n   * @param : not used anymore\\n   * @param _referral : referral address\\n   * @return mintedTokens : amount of IdleTokens minted\\n   */\\n  function mintIdleToken(uint256 _amount, bool, address _referral)\\n    external nonReentrant whenNotPaused\\n    returns (uint256 mintedTokens) {\\n    _minterBlock = keccak256(abi.encodePacked(tx.origin, block.number));\\n    _redeemGovTokens(msg.sender);\\n    // Get current IdleToken price\\n    uint256 idlePrice = _tokenPrice();\\n    // transfer tokens to this contract\\n    IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    mintedTokens = _amount.mul(ONE_18).div(idlePrice);\\n    _mint(msg.sender, mintedTokens);\\n\\n    // Update avg price and user idx for each gov tokens\\n    _updateUserInfo(msg.sender, mintedTokens);\\n    _updateUserFeeInfo(msg.sender, mintedTokens, idlePrice);\\n\\n    if (_referral != address(0)) {\\n      emit Referral(_amount, _referral);\\n    }\\n  }\\n\\n  /**\\n   * Helper method for mintIdleToken, updates minter gov indexes and avg price\\n   *\\n   * @param _to : minter account\\n   * @param _mintedTokens : number of newly minted tokens\\n   */\\n  function _updateUserInfo(address _to, uint256 _mintedTokens) internal {\\n    address govToken;\\n    uint256 usrBal = balanceOf(_to);\\n    uint256 _usrIdx;\\n\\n    for (uint256 i = 0; i < govTokens.length; i++) {\\n      govToken = govTokens[i];\\n      _usrIdx = usersGovTokensIndexes[govToken][_to];\\n\\n      // calculate user idx\\n      usersGovTokensIndexes[govToken][_to] = _usrIdx.add(\\n        _mintedTokens.mul(govTokensIndexes[govToken].sub(_usrIdx)).div(usrBal)\\n      );\\n    }\\n  }\\n\\n  /**\\n   * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\\n   *\\n   * @param _amount : amount of IdleTokens to be burned\\n   * @return redeemedTokens : amount of underlying tokens redeemed\\n   */\\n  function redeemIdleToken(uint256 _amount)\\n    external\\n    returns (uint256) {\\n      return _redeemIdleToken(_amount, new bool[](govTokens.length));\\n  }\\n\\n  /**\\n   * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\\n   * WARNING: if elements in the `_skipGovTokenRedeem` are set to `true` then the rewards will be GIFTED to the pool\\n   *\\n   * @param _amount : amount of IdleTokens to be burned\\n   * @param _skipGovTokenRedeem : array of flags whether to redeem or not specific gov tokens\\n   * @return redeemedTokens : amount of underlying tokens redeemed\\n   */\\n  function redeemIdleTokenSkipGov(uint256 _amount, bool[] calldata _skipGovTokenRedeem)\\n    external\\n    returns (uint256) {\\n      return _redeemIdleToken(_amount, _skipGovTokenRedeem);\\n  }\\n\\n  /**\\n   * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\\n   *\\n   * @param _amount : amount of IdleTokens to be burned\\n   * @param _skipGovTokenRedeem : array of flag for redeeming or not gov tokens. Funds will be gifted to the pool\\n   * @return redeemedTokens : amount of underlying tokens redeemed\\n   */\\n  function _redeemIdleToken(uint256 _amount, bool[] memory _skipGovTokenRedeem)\\n    internal nonReentrant\\n    returns (uint256 redeemedTokens) {\\n      _checkMintRedeemSameTx();\\n      _redeemGovTokensInternal(msg.sender, _skipGovTokenRedeem);\\n\\n      if (_amount != 0) {\\n        uint256 price = _tokenPrice();\\n        uint256 valueToRedeem = _amount.mul(price).div(ONE_18);\\n        uint256 balanceUnderlying = _contractBalanceOf(token);\\n\\n        if (valueToRedeem > balanceUnderlying) {\\n          redeemedTokens = _redeemHelper(_amount, balanceUnderlying);\\n        } else {\\n          redeemedTokens = valueToRedeem;\\n        }\\n        // get eventual performance fee\\n        redeemedTokens = _getFee(_amount, redeemedTokens, price);\\n        // burn idleTokens\\n        _burn(msg.sender, _amount);\\n        // send underlying minus fee to msg.sender\\n        _transferTokens(token, msg.sender, redeemedTokens);\\n      }\\n  }\\n\\n  function _redeemHelper(uint256 _amount, uint256 _balanceUnderlying) private returns (uint256 redeemedTokens) {\\n    address currToken;\\n    uint256 idleSupply = totalSupply();\\n    address[] memory _allAvailableTokens = allAvailableTokens;\\n\\n    for (uint256 i = 0; i < _allAvailableTokens.length; i++) {\\n      currToken = _allAvailableTokens[i];\\n      redeemedTokens = redeemedTokens.add(\\n        _redeemProtocolTokens(\\n          currToken,\\n          // _amount * protocolPoolBalance / idleSupply\\n          _amount.mul(_contractBalanceOf(currToken)).div(idleSupply) // amount to redeem\\n        )\\n      );\\n    }\\n    // and get a portion of the eventual unlent balance\\n    redeemedTokens = redeemedTokens.add(_amount.mul(_balanceUnderlying).div(idleSupply));\\n  }\\n\\n  /**\\n   * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\\n   * and send interest-bearing tokens (eg. cDAI/iDAI) directly to the user.\\n   * Underlying (eg. DAI) is not redeemed here.\\n   *\\n   * @param _amount : amount of IdleTokens to be burned\\n   */\\n  function redeemInterestBearingTokens(uint256 _amount)\\n    external nonReentrant whenPaused {\\n      _checkMintRedeemSameTx();\\n\\n      _redeemGovTokens(msg.sender);\\n\\n      for (uint256 i = 0; i < allAvailableTokens.length; i++) {\\n        _transferTokens(allAvailableTokens[i], msg.sender, _amount.mul(_contractBalanceOf(allAvailableTokens[i])).div(totalSupply()));\\n      }\\n      // Get a portion of the eventual unlent balance\\n      _transferTokens(token, msg.sender, _amount.mul(_contractBalanceOf(token)).div(totalSupply()));\\n      _burn(msg.sender, _amount);\\n  }\\n\\n  /**\\n   * Dynamic allocate all the pool across different lending protocols if needed,\\n   * rebalance without params\\n   *\\n   * NOTE: this method can be paused\\n   *\\n   * @return : whether has rebalanced or not\\n   */\\n  function rebalance() external returns (bool) {\\n    return _rebalance();\\n  }\\n\\n  /**\\n   * @dev The fee to be charged for a given loan.\\n   * @param _token The loan currency.\\n   * @param _amount The amount of tokens lent.\\n   * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n   */\\n  function flashFee(address _token, uint256 _amount) public view returns (uint256) {\\n    require(_token == token, '7');\\n    return _amount.mul(flashLoanFee).div(FULL_ALLOC);\\n  }\\n\\n  /**\\n   * @dev The amount of currency available to be lent.\\n   * @param _token The loan currency.\\n   * @return The amount of `token` that can be borrowed.\\n   */\\n  function maxFlashLoan(address _token) external view returns (uint256) {\\n    if (_token == token) {\\n      return _tokenPrice().mul(totalSupply()).div(ONE_18);\\n    }\\n  }\\n\\n  /**\\n   * Allow any users to borrow funds inside a tx if they return the same amount + `flashLoanFee`\\n   *\\n   * @param _receiver : flash loan receiver, should have the IERC3156FlashBorrower interface\\n   * @param _token : used to check that the requested token is the correct one\\n   * @param _amount : amount of `token` to borrow\\n   * @param _params : params that should be passed to the _receiverAddress in the `executeOperation` call\\n   */\\n  function flashLoan(\\n    IERC3156FlashBorrower _receiver,\\n    address _token,\\n    uint256 _amount,\\n    bytes calldata _params\\n  ) external whenNotPaused nonReentrant returns (bool) {}\\n\\n  // internal\\n  /**\\n   * Get current idleToken price based on net asset value and totalSupply\\n   *\\n   * @return price: value of 1 idleToken in underlying\\n   */\\n  function _tokenPrice() internal view returns (uint256 price) {\\n    uint256 totSupply = totalSupply();\\n    if (totSupply == 0) {\\n      return 10**(tokenDecimals);\\n    }\\n\\n    address currToken;\\n    uint256 totNav = _contractBalanceOf(token).mul(ONE_18); // eventual underlying unlent balance\\n    address[] memory _allAvailableTokens = allAvailableTokens;\\n    for (uint256 i = 0; i < _allAvailableTokens.length; i++) {\\n      currToken = _allAvailableTokens[i];\\n      totNav = totNav.add(\\n        // NAV = price * poolSupply\\n        _getPriceInToken(protocolWrappers[currToken]).mul(\\n          _contractBalanceOf(currToken)\\n        )\\n      );\\n    }\\n\\n    price = totNav.div(totSupply); // idleToken price in token wei\\n  }\\n\\n  /**\\n   * Dynamic allocate all the pool across different lending protocols if needed\\n   *\\n   * NOTE: this method can be paused\\n   *\\n   * @return : whether has rebalanced or not\\n   */\\n  function _rebalance()\\n    internal whenNotPaused\\n    returns (bool) {\\n      // check if we need to rebalance by looking at the last allocations submitted by rebalancer\\n      uint256[] memory rebalancerLastAllocations = lastRebalancerAllocations;\\n      uint256[] memory _lastAllocations = lastAllocations;\\n      uint256 lastLen = _lastAllocations.length;\\n      bool areAllocationsEqual = rebalancerLastAllocations.length == lastLen;\\n      if (areAllocationsEqual) {\\n        for (uint256 i = 0; i < lastLen || !areAllocationsEqual; i++) {\\n          if (_lastAllocations[i] != rebalancerLastAllocations[i]) {\\n            areAllocationsEqual = false;\\n            break;\\n          }\\n        }\\n      }\\n\\n      uint256 balance = _contractBalanceOf(token);\\n\\n      if (areAllocationsEqual && balance == 0) {\\n        return false;\\n      }\\n\\n      uint256 maxUnlentBalance = _getCurrentPoolValue().mul(maxUnlentPerc).div(FULL_ALLOC);\\n\\n      if (areAllocationsEqual) {\\n        if (balance > maxUnlentBalance) {\\n          // mint the difference\\n          _mintWithAmounts(rebalancerLastAllocations, balance.sub(maxUnlentBalance));\\n        }\\n        return false;\\n      }\\n\\n      // Instead of redeeming everything during rebalance we redeem and mint only what needs\\n      // to be reallocated\\n\\n      // get current allocations in underlying (it does not count unlent underlying)\\n      (uint256[] memory amounts, uint256 totalInUnderlying) = _getCurrentAllocations();\\n      // calculate the total amount in underlying that needs to be reallocated\\n      totalInUnderlying = totalInUnderlying.add(balance);\\n\\n      (uint256[] memory toMintAllocations, uint256 totalToMint, bool lowLiquidity) = _redeemAllNeeded(\\n        amounts,\\n        // calculate new allocations given the total (not counting unlent balance)\\n        _amountsFromAllocations(rebalancerLastAllocations, totalInUnderlying.sub(maxUnlentBalance))\\n      );\\n      // if some protocol has liquidity that we should redeem, we do not update\\n      // lastAllocations to force another rebalance next time\\n      if (!lowLiquidity) {\\n        // Update lastAllocations with rebalancerLastAllocations\\n        delete lastAllocations;\\n        lastAllocations = rebalancerLastAllocations;\\n      }\\n\\n      uint256 totalRedeemd = _contractBalanceOf(token);\\n\\n      if (totalRedeemd <= maxUnlentBalance || totalToMint == 0) {\\n        return false;\\n      }\\n\\n      // Do not mint directly using toMintAllocations check with totalRedeemd\\n      uint256[] memory tempAllocations = new uint256[](toMintAllocations.length);\\n      for (uint256 i = 0; i < toMintAllocations.length; i++) {\\n        // Calc what would have been the correct allocations percentage if all was available\\n        tempAllocations[i] = toMintAllocations[i].mul(FULL_ALLOC).div(totalToMint);\\n      }\\n\\n      // partial amounts\\n      _mintWithAmounts(tempAllocations, totalRedeemd.sub(maxUnlentBalance));\\n\\n      emit Rebalance(msg.sender, totalInUnderlying);\\n\\n      return true; // hasRebalanced\\n  }\\n\\n  /**\\n   * Redeem unclaimed governance tokens and update governance global index and user index if needed\\n   * if called during redeem it will send all gov tokens accrued by a user to the user\\n   *\\n   * @param _to : user address\\n   */\\n  function _redeemGovTokens(address _to) internal {\\n    _redeemGovTokensInternal(_to, new bool[](govTokens.length));\\n  }\\n\\n  /**\\n   * Redeem unclaimed governance tokens and update governance global index and user index if needed\\n   * if called during redeem it will send all gov tokens accrued by a user to the user\\n   *\\n   * @param _to : user address\\n   * @param _skipGovTokenRedeem : array of flag for redeeming or not gov tokens\\n   */\\n  function _redeemGovTokensInternal(address _to, bool[] memory _skipGovTokenRedeem) internal {\\n    address[] memory _govTokens = govTokens;\\n    if (_govTokens.length == 0) {\\n      return;\\n    }\\n    uint256 supply = totalSupply();\\n    uint256 usrBal = balanceOf(_to);\\n    address govToken;\\n\\n    if (supply > 0) {\\n      for (uint256 i = 0; i < _govTokens.length; i++) {\\n        govToken = _govTokens[i];\\n\\n        _redeemGovTokensFromProtocol(govToken);\\n\\n        // get current gov token balance\\n        uint256 govBal = _contractBalanceOf(govToken);\\n        if (govBal > 0) {\\n          // update global index with ratio of govTokens per idleToken\\n          govTokensIndexes[govToken] = govTokensIndexes[govToken].add(\\n            // check how much gov tokens for each idleToken we gained since last update\\n            govBal.sub(govTokensLastBalances[govToken]).mul(ONE_18).div(supply)\\n          );\\n          // update global var with current govToken balance\\n          govTokensLastBalances[govToken] = govBal;\\n        }\\n\\n        if (usrBal > 0) {\\n          uint256 usrIndex = usersGovTokensIndexes[govToken][_to];\\n          // check if user has accrued something\\n          uint256 delta = govTokensIndexes[govToken].sub(usrIndex);\\n          if (delta != 0) {\\n            uint256 share = usrBal.mul(delta).div(ONE_18);\\n            uint256 bal = _contractBalanceOf(govToken);\\n            // To avoid rounding issue\\n            if (share > bal) {\\n              share = bal;\\n            }\\n            if (_skipGovTokenRedeem[i]) { // -> gift govTokens[i] accrued to the pool\\n              // update global index with ratio of govTokens per idleToken\\n              govTokensIndexes[govToken] = govTokensIndexes[govToken].add(\\n                // check how much gov tokens for each idleToken we gained since last update\\n                share.mul(ONE_18).div(supply.sub(usrBal))\\n              );\\n            } else {\\n              uint256 feeDue;\\n              // no fee for IDLE governance token\\n              if (feeAddress != address(0) && fee > 0 && govToken != IDLE) {\\n                feeDue = share.mul(fee).div(FULL_ALLOC);\\n                // Transfer gov token fee to feeAddress\\n                _transferTokens(govToken, feeAddress, feeDue);\\n              }\\n              // Transfer gov token to user\\n              _transferTokens(govToken, _to, share.sub(feeDue));\\n              // Update last balance\\n              govTokensLastBalances[govToken] = _contractBalanceOf(govToken);\\n            }\\n          }\\n        }\\n        // save current index for this gov token\\n        usersGovTokensIndexes[govToken][_to] = govTokensIndexes[govToken];\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Redeem a specific gov token\\n   *\\n   * @param _govToken : address of the gov token to redeem\\n   */\\n  function _redeemGovTokensFromProtocol(address _govToken) internal {\\n    // In case new Gov tokens will be supported this should be updated\\n    if (_govToken == COMP || _govToken == IDLE || _govToken == stkAAVE) {\\n      address[] memory holders = new address[](1);\\n      holders[0] = address(this);\\n\\n      if (_govToken == IDLE) {\\n        // For IDLE, the distribution is done only to IdleTokens, so `holders` and\\n        // `tokens` parameters are the same and equal to address(this)\\n        IdleController(idleController).claimIdle(holders, holders);\\n        return;\\n      }\\n\\n      address[] memory tokens = new address[](1);\\n      if (_govToken == stkAAVE && aToken != address(0)) {\\n        tokens[0] = aToken;\\n        IAaveIncentivesController _ctrl = IAaveIncentivesController(AToken(tokens[0]).getIncentivesController());\\n        _ctrl.claimRewards(tokens, _ctrl.getUserUnclaimedRewards(address(this)), address(this));\\n        return;\\n      }\\n      if (cToken != address(0)) {\\n        tokens[0] = cToken;\\n        Comptroller(CERC20(tokens[0]).comptroller()).claimComp(holders, tokens, false, true);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Update receiver userAvgPrice paid for each idle token,\\n   * receiver will pay fees accrued\\n   *\\n   * @param usr : user that should have balance update\\n   * @param qty : new amount deposited / transferred, in idleToken\\n   * @param price : sender userAvgPrice\\n   */\\n  function _updateUserFeeInfo(address usr, uint256 qty, uint256 price) private {\\n    uint256 usrBal = balanceOf(usr);\\n    // ((avgPrice * oldBalance) + (senderAvgPrice * newQty)) / totBalance\\n    userAvgPrices[usr] = userAvgPrices[usr].mul(usrBal.sub(qty)).add(price.mul(qty)).div(usrBal);\\n  }\\n\\n  /**\\n   * Calculate fee in underlyings and send them to feeAddress\\n   *\\n   * @param amount : in idleTokens\\n   * @param redeemed : in underlying\\n   * @param currPrice : current idleToken price\\n   * @return : net value in underlying\\n   */\\n  function _getFee(uint256 amount, uint256 redeemed, uint256 currPrice) internal returns (uint256) {\\n    uint256 avgPrice = userAvgPrices[msg.sender];\\n    if (currPrice < avgPrice) {\\n      return redeemed;\\n    }\\n    // 10**23 -> ONE_18 * FULL_ALLOC\\n    uint256 feeDue = amount.mul(currPrice.sub(avgPrice)).mul(fee).div(10**23);\\n    _transferTokens(token, feeAddress, feeDue);\\n    return redeemed.sub(feeDue);\\n  }\\n\\n  /**\\n   * Mint specific amounts of protocols tokens\\n   *\\n   * @param allocations : array of amounts to be minted\\n   * @param total : total amount\\n   * @return : net value in underlying\\n   */\\n  function _mintWithAmounts(uint256[] memory allocations, uint256 total) internal {\\n    // mint for each protocol and update currentTokensUsed\\n    uint256[] memory protocolAmounts = _amountsFromAllocations(allocations, total);\\n\\n    uint256 currAmount;\\n    address protWrapper;\\n    address[] memory _tokens = allAvailableTokens;\\n    for (uint256 i = 0; i < protocolAmounts.length; i++) {\\n      currAmount = protocolAmounts[i];\\n      if (currAmount != 0) {\\n        protWrapper = protocolWrappers[_tokens[i]];\\n        // Transfer _amount underlying token (eg. DAI) to protWrapper\\n        _transferTokens(token, protWrapper, currAmount);\\n        ILendingProtocol(protWrapper).mint();\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate amounts from percentage allocations (100000 => 100%)\\n   *\\n   * @param allocations : array of protocol allocations in percentage\\n   * @param total : total amount\\n   * @return : array with amounts\\n   */\\n  function _amountsFromAllocations(uint256[] memory allocations, uint256 total)\\n    internal pure returns (uint256[] memory newAmounts) {\\n    newAmounts = new uint256[](allocations.length);\\n    uint256 currBalance;\\n    uint256 allocatedBalance;\\n\\n    for (uint256 i = 0; i < allocations.length; i++) {\\n      if (i == allocations.length - 1) {\\n        newAmounts[i] = total.sub(allocatedBalance);\\n      } else {\\n        currBalance = total.mul(allocations[i]).div(FULL_ALLOC);\\n        allocatedBalance = allocatedBalance.add(currBalance);\\n        newAmounts[i] = currBalance;\\n      }\\n    }\\n    return newAmounts;\\n  }\\n\\n  /**\\n   * Redeem all underlying needed from each protocol\\n   *\\n   * @param amounts : array with current allocations in underlying\\n   * @param newAmounts : array with new allocations in underlying\\n   * @return toMintAllocations : array with amounts to be minted\\n   * @return totalToMint : total amount that needs to be minted\\n   */\\n  function _redeemAllNeeded(\\n    uint256[] memory amounts,\\n    uint256[] memory newAmounts\\n    ) internal returns (\\n      uint256[] memory toMintAllocations,\\n      uint256 totalToMint,\\n      bool lowLiquidity\\n    ) {\\n    toMintAllocations = new uint256[](amounts.length);\\n    ILendingProtocol protocol;\\n    uint256 currAmount;\\n    uint256 newAmount;\\n    address currToken;\\n    address[] memory _tokens = allAvailableTokens;\\n    // check the difference between amounts and newAmounts\\n    for (uint256 i = 0; i < amounts.length; i++) {\\n      currToken = _tokens[i];\\n      newAmount = newAmounts[i];\\n      currAmount = amounts[i];\\n      protocol = ILendingProtocol(protocolWrappers[currToken]);\\n      if (currAmount > newAmount) {\\n        uint256 toRedeem = currAmount.sub(newAmount);\\n        uint256 availableLiquidity = protocol.availableLiquidity();\\n        if (availableLiquidity < toRedeem) {\\n          lowLiquidity = true;\\n          // remove 1% to be sure it's really available (eg for compound-like protocols)\\n          toRedeem = availableLiquidity.mul(FULL_ALLOC-1000).div(FULL_ALLOC);\\n        }\\n        // redeem the difference\\n        _redeemProtocolTokens(\\n          currToken,\\n          // convert amount from underlying to protocol token\\n          toRedeem.mul(ONE_18).div(protocol.getPriceInToken())\\n        );\\n        // tokens are now in this contract\\n      } else {\\n        toMintAllocations[i] = newAmount.sub(currAmount);\\n        totalToMint = totalToMint.add(toMintAllocations[i]);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Get the contract balance of every protocol currently used\\n   *\\n   * @return amounts : array with all amounts for each protocol in order,\\n   *                   eg [amountCompoundInUnderlying, amountFulcrumInUnderlying]\\n   * @return total : total AUM in underlying\\n   */\\n  function _getCurrentAllocations() internal view\\n    returns (uint256[] memory amounts, uint256 total) {\\n      // Get balance of every protocol implemented\\n      address currentToken;\\n      address[] memory _tokens = allAvailableTokens;\\n      uint256 tokensLen = _tokens.length;\\n      amounts = new uint256[](tokensLen);\\n      for (uint256 i = 0; i < tokensLen; i++) {\\n        currentToken = _tokens[i];\\n        amounts[i] = _getPriceInToken(protocolWrappers[currentToken]).mul(\\n          _contractBalanceOf(currentToken)\\n        ).div(ONE_18);\\n        total = total.add(amounts[i]);\\n      }\\n  }\\n\\n  /**\\n   * Get the current pool value in underlying\\n   *\\n   * @return total : total AUM in underlying\\n   */\\n  function _getCurrentPoolValue() internal view\\n    returns (uint256 total) {\\n      // Get balance of every protocol implemented\\n      address currentToken;\\n      address[] memory _tokens = allAvailableTokens;\\n      for (uint256 i = 0; i < _tokens.length; i++) {\\n        currentToken = _tokens[i];\\n        total = total.add(_getPriceInToken(protocolWrappers[currentToken]).mul(\\n          _contractBalanceOf(currentToken)\\n        ).div(ONE_18));\\n      }\\n\\n      // add unlent balance\\n      total = total.add(_contractBalanceOf(token));\\n  }\\n\\n  /**\\n   * Get contract balance of _token\\n   *\\n   * @param _token : address of the token to read balance\\n   * @return total : balance of _token in this contract\\n   */\\n  function _contractBalanceOf(address _token) private view returns (uint256) {\\n    // Original implementation:\\n    //\\n    // return IERC20(_token).balanceOf(address(this));\\n\\n    // Optimized implementation inspired by uniswap https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/UniswapV3Pool.sol#L144\\n    //\\n    // 0x70a08231 -> selector for 'function balanceOf(address) returns (uint256)'\\n    (bool success, bytes memory data) =\\n        _token.staticcall(abi.encodeWithSelector(0x70a08231, address(this)));\\n    require(success);\\n    return abi.decode(data, (uint256));\\n  }\\n\\n\\n  /**\\n   * Get price of 1 protocol token in underlyings\\n   *\\n   * @param _token : address of the protocol token\\n   * @return price : price of protocol token\\n   */\\n  function _getPriceInToken(address _token) private view returns (uint256) {\\n    return ILendingProtocol(_token).getPriceInToken();\\n  }\\n\\n  /**\\n   * Check that no mint has been made in the same block from the same EOA\\n   */\\n  function _checkMintRedeemSameTx() private view {\\n    require(keccak256(abi.encodePacked(tx.origin, block.number)) != _minterBlock, \\\"9\\\");\\n  }\\n\\n  // ILendingProtocols calls\\n  /**\\n   * Redeem underlying tokens through protocol wrapper\\n   *\\n   * @param _amount : amount of `_token` to redeem\\n   * @param _token : protocol token address\\n   * @return tokens : new tokens minted\\n   */\\n  function _redeemProtocolTokens(address _token, uint256 _amount)\\n    internal\\n    returns (uint256 tokens) {\\n      if (_amount != 0) {\\n        // Transfer _amount of _protocolToken (eg. cDAI) to _wrapperAddr\\n        address _wrapperAddr = protocolWrappers[_token];\\n        _transferTokens(_token, _wrapperAddr, _amount);\\n        tokens = ILendingProtocol(_wrapperAddr).redeem(address(this));\\n      }\\n  }\\n\\n  function _transferTokens(address _token, address _to, uint256 _amount) internal {\\n    IERC20(_token).safeTransfer(_to, _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/iERC20Fulcrum.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface iERC20Fulcrum {\\n  function mint(\\n    address receiver,\\n    uint256 depositAmount)\\n    external\\n    returns (uint256 mintAmount);\\n\\n  function burn(\\n    address receiver,\\n    uint256 burnAmount)\\n    external\\n    returns (uint256 loanAmountPaid);\\n\\n  function tokenPrice()\\n    external\\n    view\\n    returns (uint256 price);\\n\\n  function supplyInterestRate()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function rateMultiplier()\\n    external\\n    view\\n    returns (uint256);\\n  function baseRate()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function borrowInterestRate()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function avgBorrowInterestRate()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function protocolInterestRate()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function spreadMultiplier()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function totalAssetBorrow()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function totalAssetSupply()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function nextSupplyInterestRate(uint256)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function nextBorrowInterestRate(uint256)\\n    external\\n    view\\n    returns (uint256);\\n  function nextLoanInterestRate(uint256)\\n    external\\n    view\\n    returns (uint256);\\n  function totalSupplyInterestRate(uint256)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function claimLoanToken()\\n    external\\n    returns (uint256 claimedAmount);\\n\\n  function dsr()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function chaiPrice()\\n    external\\n    view\\n    returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IdleController.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IdleController {\\n  function idleSpeeds(address _idleToken) external view returns (uint256);\\n  function claimIdle(address[] calldata holders, address[] calldata idleTokens) external;\\n  function getAllMarkets() external view returns (address[] memory);\\n  function _addIdleMarkets(address[] calldata) external;\\n  function _supportMarkets(address[] calldata) external;\\n  function _setPriceOracle(address) external;\\n  function admin() external view returns(address);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/ILendingProtocol.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface ILendingProtocol {\\n  function mint() external returns (uint256);\\n  function redeem(address account) external returns (uint256);\\n  function nextSupplyRate(uint256 amount) external view returns (uint256);\\n  function getAPR() external view returns (uint256);\\n  function getPriceInToken() external view returns (uint256);\\n  function token() external view returns (address);\\n  function underlying() external view returns (address);\\n  function availableLiquidity() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IIdleTokenV3_1.sol\": {\r\n      \"content\": \"/**\\n * @title: Idle Token interface\\n * @author: Idle Labs Inc., idle.finance\\n */\\npragma solidity 0.5.16;\\n\\ninterface IIdleTokenV3_1 {\\n  // view\\n  /**\\n   * IdleToken price calculation, in underlying\\n   *\\n   * @return : price in underlying token\\n   */\\n  function tokenPrice() external view returns (uint256 price);\\n\\n  /**\\n   * @return : underlying token address\\n   */\\n  function token() external view returns (address);\\n  /**\\n   * Get APR of every ILendingProtocol\\n   *\\n   * @return addresses: array of token addresses\\n   * @return aprs: array of aprs (ordered in respect to the `addresses` array)\\n   */\\n  function getAPRs() external view returns (address[] memory addresses, uint256[] memory aprs);\\n\\n  // external\\n  // We should save the amount one has deposited to calc interests\\n\\n  /**\\n   * Used to mint IdleTokens, given an underlying amount (eg. DAI).\\n   * This method triggers a rebalance of the pools if needed\\n   * NOTE: User should 'approve' _amount of tokens before calling mintIdleToken\\n   * NOTE 2: this method can be paused\\n   *\\n   * @param _amount : amount of underlying token to be lended\\n   * @param _skipRebalance : flag for skipping rebalance for lower gas price\\n   * @param _referral : referral address\\n   * @return mintedTokens : amount of IdleTokens minted\\n   */\\n  function mintIdleToken(uint256 _amount, bool _skipRebalance, address _referral) external returns (uint256 mintedTokens);\\n\\n  /**\\n   * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\\n   * This method triggers a rebalance of the pools if needed\\n   * NOTE: If the contract is paused or iToken price has decreased one can still redeem but no rebalance happens.\\n   * NOTE 2: If iToken price has decresed one should not redeem (but can do it) otherwise he would capitalize the loss.\\n   *         Ideally one should wait until the black swan event is terminated\\n   *\\n   * @param _amount : amount of IdleTokens to be burned\\n   * @return redeemedTokens : amount of underlying tokens redeemed\\n   */\\n  function redeemIdleToken(uint256 _amount) external returns (uint256 redeemedTokens);\\n  /**\\n   * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\\n   * and send interest-bearing tokens (eg. cDAI/iDAI) directly to the user.\\n   * Underlying (eg. DAI) is not redeemed here.\\n   *\\n   * @param _amount : amount of IdleTokens to be burned\\n   */\\n  function redeemInterestBearingTokens(uint256 _amount) external;\\n\\n  /**\\n   * @return : whether has rebalanced or not\\n   */\\n  function rebalance() external returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IIdleTokenHelper.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IIdleTokenHelper {\\n  function setIdleTokens(address[] calldata _newIdleTokens) external;\\n  function getAPR(address _idleToken, address _cToken, address _aToken) external view returns (uint256 avgApr);\\n  function getCurrentAllocations(address _idleToken) external view returns (uint256[] memory amounts, uint256 total);\\n  function getAPRs(address _idleToken) external view returns (address[] memory addresses, uint256[] memory aprs);\\n  function sellGovTokens(address _idleToken, uint256[] calldata _minTokenOut) external;\\n  function emergencyWithdrawToken(address _token, address _to) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IGovToken.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IGovToken {\\n  function redeemGovTokens() external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IERC3156FlashBorrower.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IERC3156FlashBorrower {\\n  /**\\n   * @dev Receive a flash loan.\\n   * @param initiator The initiator of the loan.\\n   * @param token The loan currency.\\n   * @param amount The amount of tokens lent.\\n   * @param fee The additional amount of tokens to repay.\\n   * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n   * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n   */\\n  function onFlashLoan(\\n    address initiator,\\n    address token,\\n    uint256 amount,\\n    uint256 fee,\\n    bytes calldata data\\n  ) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IAaveIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.5.16;\\ninterface IAaveIncentivesController {\\n  /**\\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n  function getAssetData(address asset) external view returns (uint256, uint256, uint256);\\n  function getRewardsBalance(address[] calldata assets, address user) external view returns(uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/GasToken.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface GasToken {\\n  function freeUpTo(uint256 value) external returns (uint256 freed);\\n  function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\\n  function balanceOf(address from) external returns (uint256 balance);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/Comptroller.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface Comptroller {\\n  function claimComp(address) external;\\n  function compSpeeds(address _cToken) external view returns (uint256);\\n  function compSupplySpeeds(address _cToken) external view returns (uint256);\\n  function claimComp(address[] calldata holders, address[] calldata cTokens, bool borrowers, bool suppliers) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/CERC20.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface CERC20 {\\n  function mint(uint256 mintAmount) external returns (uint256);\\n  function comptroller() external view returns (address);\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n  function exchangeRateStored() external view returns (uint256);\\n  function supplyRatePerBlock() external view returns (uint256);\\n\\n  function borrowRatePerBlock() external view returns (uint256);\\n  function totalReserves() external view returns (uint256);\\n  function getCash() external view returns (uint256);\\n  function totalBorrows() external view returns (uint256);\\n  function reserveFactorMantissa() external view returns (uint256);\\n  function interestRateModel() external view returns (address);\\n\\n  function underlying() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/AToken.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface AToken {\\n  function getIncentivesController() external view returns (address);\\n  function redeem(uint256 amount) external;\\n  function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\\n  function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/GST2ConsumerV2.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./interfaces/GasToken.sol\\\";\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\ncontract GST2ConsumerV2 is Initializable {\\n  GasToken public gst2;\\n\\n  // Kept for reference\\n  //\\n  // function initialize() initializer public {\\n  //   gst2 = GasToken(0x0000000000b3F879cb30FE243b4Dfee438691c04);\\n  // }\\n  //\\n  // modifier gasDiscountFrom(address from) {\\n  //   uint256 initialGasLeft = gasleft();\\n  //   _;\\n  //   _makeGasDiscount(initialGasLeft - gasleft(), from);\\n  // }\\n  //\\n  // function _makeGasDiscount(uint256 gasSpent, address from) internal {\\n  //   // For more info https://gastoken.io/\\n  //   // 14154 -> FREE_BASE -> base cost of freeing\\n  //   // 41130 -> 2 * REIMBURSE - FREE_TOKEN -> 2 * 24000 - 6870\\n  //   uint256 tokens = (gasSpent + 14154) / 41130;\\n  //   uint256 safeNumTokens;\\n  //   uint256 gas = gasleft();\\n  //\\n  //   // For more info https://github.com/projectchicago/gastoken/blob/master/contract/gst2_free_example.sol\\n  //   if (gas >= 27710) {\\n  //     safeNumTokens = (gas - 27710) / 7020;\\n  //   }\\n  //\\n  //   if (tokens > safeNumTokens) {\\n  //     tokens = safeNumTokens;\\n  //   }\\n  //\\n  //   if (tokens > 0) {\\n  //     gst2.freeFromUpTo(from, tokens);\\n  //   }\\n  // }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/upgrades/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n */\\ncontract ReentrancyGuard is Initializable {\\n    // counter to allow mutex lock with only one SSTORE operation\\n    uint256 private _guardCounter;\\n\\n    function initialize() public initializer {\\n        // The counter starts at one to prevent changing it from zero to a non-zero\\n        // value, which is a more expensive operation.\\n        _guardCounter = 1;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _guardCounter += 1;\\n        uint256 localCounter = _guardCounter;\\n        _;\\n        require(localCounter == _guardCounter, \\\"ReentrancyGuard: reentrant call\\\");\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is Initializable, IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Initializable, Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Initializable, Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initialize(address sender) public initializer {\\n        _owner = sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * > Note: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/lifecycle/Pausable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../access/roles/PauserRole.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Initializable, Context, PauserRole {\\n    /**\\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\\n     * to the deployer.\\n     */\\n    function initialize(address sender) public initializer {\\n        PauserRole.initialize(sender);\\n\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to pause, triggers stopped state.\\n     */\\n    function pause() public onlyPauser whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to unpause, returns to normal state.\\n     */\\n    function unpause() public onlyPauser whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/roles/PauserRole.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"../Roles.sol\\\";\\n\\ncontract PauserRole is Initializable, Context {\\n    using Roles for Roles.Role;\\n\\n    event PauserAdded(address indexed account);\\n    event PauserRemoved(address indexed account);\\n\\n    Roles.Role private _pausers;\\n\\n    function initialize(address sender) public initializer {\\n        if (!isPauser(sender)) {\\n            _addPauser(sender);\\n        }\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(_msgSender()), \\\"PauserRole: caller does not have the Pauser role\\\");\\n        _;\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return _pausers.has(account);\\n    }\\n\\n    function addPauser(address account) public onlyPauser {\\n        _addPauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(_msgSender());\\n    }\\n\\n    function _addPauser(address account) internal {\\n        _pausers.add(account);\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) internal {\\n        _pausers.remove(account);\\n        emit PauserRemoved(account);\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 5000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rebalancer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IDLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allAvailableTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrower\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"flashLoanFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAPRs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAvailableTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllocations\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvgAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGovTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usr\",\"type\":\"address\"}],\"name\":\"getGovTokensAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolToken\",\"type\":\"address\"}],\"name\":\"getProtocolTokenToGov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"govTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"govTokensIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"govTokensLastBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gst2\",\"outputs\":[{\"internalType\":\"contract GasToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"idleController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRiskAdjusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastITokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxUnlentPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"mintIdleToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintedTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocolWrappers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebalancer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemIdleToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"_skipGovTokenRedeem\",\"type\":\"bool[]\"}],\"name\":\"redeemIdleTokenSkipGov\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemInterestBearingTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aToken\",\"type\":\"address\"}],\"name\":\"setAToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"protocolTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"wrappers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_newGovTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_newGovTokensEqualLen\",\"type\":\"address[]\"}],\"name\":\"setAllAvailableTokensAndWrappers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allocations\",\"type\":\"uint256[]\"}],\"name\":\"setAllocations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"}],\"name\":\"setCToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_perc\",\"type\":\"uint256\"}],\"name\":\"setMaxUnlentPerc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rebalancer\",\"type\":\"address\"}],\"name\":\"setRebalancer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenHelper\",\"type\":\"address\"}],\"name\":\"setTokenHelper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stkAAVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"tokenPriceWithFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceWFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAvgPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersGovTokensIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"IdleTokenGovernance","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"5000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}