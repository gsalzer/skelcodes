{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LPFarm.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// import \\\"./LPToken.sol\\\";\\n\\ncontract LPFarm is Ownable {\\n\\n    // base APR\\n    uint256 public BASE_APR;\\n    uint256 public MULTIPLIER;\\n    uint256 public FEE = 3;\\n    uint256 private FEE_BALANCE = 0;\\n    address private FEE_TO;\\n    address private FEE_TO_SETTER;\\n    uint256 private ONE_YEAR = 31536000;\\n    uint256 private ONE_ETH = 1000000000000000000;\\n    // user's staking balance\\n    mapping(address => uint256) public stakingBalance;\\n    // staking start timestamp\\n    mapping(address => uint256) public startTime;\\n    // user's yield to claim\\n    mapping(address => uint256) public yieldBalance;\\n    // user's index\\n    mapping(address => uint256) public trenchIndex;\\n    // Trenches\\n    uint256[2][] public trenches;\\n    // Staking and rewards token interface\\n    IERC20 public lpToken;\\n    IERC20 public formToken;\\n\\n    // contract's events\\n    event Stake(address indexed from, uint256 amount);\\n    event Unstake(address indexed from, uint256 amount);\\n    event YieldWithdraw(address indexed to, uint256 amount);\\n    event FeeWithdraw(address indexed to, uint256 amount);\\n\\n    constructor(\\n        IERC20 _formToken,\\n        IERC20 _lpToken,\\n        uint256 initialAPR,\\n        uint256 initialMultiplier,\\n        address _feeToSetter\\n        ) {\\n        formToken = _formToken;\\n        lpToken = _lpToken;\\n        BASE_APR = initialAPR;\\n        MULTIPLIER = initialMultiplier;\\n        FEE_TO_SETTER = _feeToSetter;\\n        FEE_TO = _feeToSetter;\\n        trenches.push([block.timestamp, BASE_APR*MULTIPLIER]);\\n    }\\n\\n    /// APR and multiplier calculations\\n    function getAPRValue() external view returns(uint256) {\\n        return BASE_APR*MULTIPLIER;\\n    }\\n    function setMultiplier(uint256 newMultiplier) onlyOwner external {\\n        MULTIPLIER = newMultiplier;\\n        trenches.push([block.timestamp, BASE_APR*MULTIPLIER]);\\n    }\\n    function setFee(uint256 newFee) onlyOwner external {\\n        FEE = newFee;\\n    }\\n    function sendFeeTo(address feeTo) external {\\n        require(msg.sender == FEE_TO_SETTER, 'FORBIDDEN');\\n        FEE_TO = feeTo;\\n    }\\n    function setFeeToSetter(address newSetter) external {\\n        require(msg.sender == FEE_TO_SETTER, 'FORBIDDEN');\\n        FEE_TO_SETTER = newSetter;\\n    }\\n    function getFee() external view returns(uint256) {\\n        return FEE_BALANCE;\\n    }\\n\\n    /// Yield calculations\\n    function _calculateYield(address user) private view returns(uint256) {\\n        // end means now\\n        uint256 end = block.timestamp;\\n        uint256 totalYield;\\n        // loop through trenches\\n        for(uint256 i = trenchIndex[user]; i < trenches.length; i++){\\n            // how long the user was staking during the trench\\n            uint256 stakingTimeWithinTier;\\n            // if comparing to the last trench then\\n            // check how long user was staking during that trench\\n            if (i + 1 == trenches.length) {\\n                if (startTime[user] > trenches[i][0]) {\\n                    stakingTimeWithinTier = end - startTime[user];\\n                } else {\\n                    stakingTimeWithinTier = end - trenches[i][0];\\n                    // if no at all, then work is done\\n                    if (stakingTimeWithinTier < 0) {\\n                        continue;\\n                    }\\n                }\\n            } else {\\n                // check if user was staking during that trench\\n                // if no skip to another trench\\n                if (startTime[user] >= trenches[i + 1][0]) {\\n                    continue;\\n                } else {\\n                    // check if user was staking during the entire trench or partially\\n                    uint256 stakingTimeRelative = trenches[i + 1][0] - startTime[user];\\n                    uint256 tierTime = trenches[i + 1][0] - trenches[i][0];\\n                    // that means entire timespan (even more)\\n                    if (stakingTimeRelative >= tierTime) {\\n                        stakingTimeWithinTier = tierTime;\\n                    } else {\\n                        // that means partially\\n                        stakingTimeWithinTier = stakingTimeRelative;\\n                    }\\n                }\\n            }\\n            // calculate yield earned during the trench\\n            uint256 yieldEarnedWithinTier = (((trenches[i][1] * ONE_ETH) / ONE_YEAR) * stakingTimeWithinTier) / 100;\\n            uint256 netYield = stakingBalance[user] * yieldEarnedWithinTier;\\n            uint256 netYieldFormatted = netYield / ONE_ETH;\\n            // add to total yield (from all trenches eventually)\\n            totalYield += netYieldFormatted;\\n        }\\n        return totalYield;\\n    }\\n\\n    function getUsersYieldAmount(address user) public view returns(uint256) {\\n        require(\\n            stakingBalance[user] > 0,\\n            \\\"You do not stake any tokens\\\");\\n        uint256 yieldEarned = _calculateYield(user);\\n        uint256 yieldUpToDate = yieldBalance[msg.sender];\\n        uint256 yieldTotal = yieldEarned + yieldUpToDate;\\n        return yieldTotal;\\n    }\\n\\n    /// Core functions\\n    function stake(uint256 amount) external {\\n        // amount to stake and user's balance can not be 0\\n        require(\\n            amount > 0 &&\\n            lpToken.balanceOf(msg.sender) >= amount, \\n            \\\"You cannot stake zero tokens\\\");\\n        \\n        // if user is already staking, calculate up-to-date yield\\n        if(stakingBalance[msg.sender] > 0){\\n            uint256 yieldEarned = getUsersYieldAmount(msg.sender);\\n            yieldBalance[msg.sender] = yieldEarned;\\n        }\\n\\n        lpToken.transferFrom(msg.sender, address(this), amount); // add LP tokens to the staking pool\\n        stakingBalance[msg.sender] += amount;\\n        startTime[msg.sender] = block.timestamp; // upserting the staking schedule whether user is already staking or not\\n        trenchIndex[msg.sender] = trenches.length - 1;\\n        emit Stake(msg.sender, amount);\\n    }\\n\\n    function unstake(uint256 amount) external {\\n        require(\\n            stakingBalance[msg.sender] >= amount, \\n            \\\"Nothing to unstake\\\"\\n        );\\n\\n        uint256 lpFeeValue = amount * FEE / 1000;\\n        uint256 lpTransferValue = amount - lpFeeValue;\\n        uint256 formTransferValue = getUsersYieldAmount(msg.sender);\\n\\n        lpToken.transfer(msg.sender, lpTransferValue); // transfer LP tokens\\n        formToken.transfer(msg.sender, formTransferValue); // transfer FORM tokens\\n        yieldBalance[msg.sender] = 0;\\n        FEE_BALANCE += lpFeeValue;\\n        startTime[msg.sender] = block.timestamp;\\n        stakingBalance[msg.sender] -= amount;\\n        trenchIndex[msg.sender] = trenches.length - 1;\\n\\n        emit Unstake(msg.sender, amount);\\n    }\\n    \\n    function withdrawYield() external {\\n        uint256 yieldEarned = getUsersYieldAmount(msg.sender);\\n        require(yieldEarned > 0, \\\"Nothing to withdraw\\\");\\n\\n        uint256 transferValue = yieldEarned;\\n\\n        formToken.transfer(msg.sender, transferValue);\\n\\n        startTime[msg.sender] = block.timestamp;\\n        yieldBalance[msg.sender] = 0;\\n        trenchIndex[msg.sender] = trenches.length - 1;\\n\\n        emit YieldWithdraw(msg.sender, transferValue);\\n    }\\n\\n    function withdrawFee() external {\\n        require(FEE_BALANCE > 0, \\\"Nothing to withdraw\\\");\\n        require(msg.sender == FEE_TO, 'FORBIDDEN');\\n        uint256 transferValue = FEE_BALANCE;\\n        lpToken.transfer(msg.sender, transferValue);\\n        FEE_BALANCE = 0;\\n        emit FeeWithdraw(msg.sender, transferValue);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_formToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"YieldWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_APR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPRValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUsersYieldAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"}],\"name\":\"sendFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMultiplier\",\"type\":\"uint256\"}],\"name\":\"setMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trenchIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trenches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yieldBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LPFarm","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000021381e026ad6d8266244f2a583b35f9e4413fa2a00000000000000000000000045c2e76c6ebc437cfbb007321885fe0661f948cc0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000098a8f350853a1451d7e961480c1fbfdac39f8efc","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}