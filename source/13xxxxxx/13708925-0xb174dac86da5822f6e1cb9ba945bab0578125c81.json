{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.3.0\r\n\"\"\"\r\n@title 2Crypto Swap Burner\r\n@notice Performs a swap using a 2 asset Crypto pool, with slippage protection via price oracle\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\ninterface CryptoPool:\r\n    def exchange(i: uint256, j: uint256, dx: uint256, min_dy: uint256): payable\r\n    def price_oracle() -> uint256: view\r\n\r\ninterface CryptoPoolETH:\r\n    def exchange(i: uint256, j: uint256, dx: uint256, min_dy: uint256, use_eth: bool): payable\r\n\r\ninterface PoolProxy:\r\n    def burners(_coin: address) -> address: view\r\n\r\n\r\nstruct SwapData:\r\n    pool: address\r\n    coin: address\r\n    receiver: address\r\n    i: uint256\r\n\r\n\r\nETH_ADDRESS: constant(address) = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n\r\nis_approved: HashMap[address, HashMap[address, bool]]\r\nswap_data: public(HashMap[address, SwapData])\r\npool_proxy: public(address)\r\nrecovery: public(address)\r\nis_killed: public(bool)\r\n\r\nowner: public(address)\r\nemergency_owner: public(address)\r\nfuture_owner: public(address)\r\nfuture_emergency_owner: public(address)\r\n\r\n\r\n@external\r\ndef __init__(_pool_proxy: address, _recovery: address, _owner: address, _emergency_owner: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @dev Unlike other burners, this contract may transfer tokens to\r\n         multiple addresses after the swap. Receiver addresses are\r\n         set by calling `set_swap_data` instead of setting it\r\n         within the constructor.\r\n    @param _recovery Address that tokens are transferred to during an\r\n                     emergency token recovery.\r\n    @param _owner Owner address. Can kill the contract, recover tokens\r\n                  and modify the recovery address.\r\n    @param _emergency_owner Emergency owner address. Can kill the contract\r\n                            and recover tokens.\r\n    \"\"\"\r\n    self.pool_proxy = _pool_proxy\r\n    self.recovery = _recovery\r\n    self.owner = _owner\r\n    self.emergency_owner = _emergency_owner\r\n\r\n\r\n@payable\r\n@external\r\ndef __default__():\r\n    # required to receive ether during intermediate swaps\r\n    pass\r\n\r\n\r\n@internal\r\ndef _transfer_from(_coin: address, _from: address) -> (uint256, uint256):\r\n    if _coin == ETH_ADDRESS:\r\n        return self.balance, self.balance\r\n\r\n    # transfer coins from caller\r\n    amount: uint256 = ERC20(_coin).balanceOf(_from)\r\n    if amount != 0:\r\n        response: Bytes[32] = raw_call(\r\n            _coin,\r\n            _abi_encode(\r\n                self.pool_proxy,\r\n                self,\r\n                amount,\r\n                method_id=method_id(\"transferFrom(address,address,uint256)\")\r\n            ),\r\n            max_outsize=32,\r\n        )\r\n        if len(response) != 0:\r\n            assert convert(response, bool)\r\n\r\n    # get actual balance in case of transfer fee or pre-existing balance\r\n    return ERC20(_coin).balanceOf(self), 0\r\n\r\n\r\n@internal\r\ndef _burn(_coin: address, _amount: uint256, _eth_amount: uint256):\r\n    initial_balance: uint256 = 0\r\n    min_dy: uint256 = 0\r\n    i: uint256 = 0\r\n    j: uint256 = 0\r\n\r\n    swap_data: SwapData = self.swap_data[_coin]\r\n    if swap_data.coin == ETH_ADDRESS:\r\n        initial_balance = self.balance\r\n    else:\r\n        initial_balance = ERC20(swap_data.coin).balanceOf(self)\r\n\r\n    oracle_price: uint256 = CryptoPool(swap_data.pool).price_oracle()\r\n    if swap_data.i == 1:\r\n        i = 1\r\n        min_dy = oracle_price * _amount / 10**18 * 98 / 100\r\n    else:\r\n        j = 1\r\n        min_dy = _amount * 10**18 / oracle_price * 98 / 100\r\n\r\n    if _coin == ETH_ADDRESS or swap_data.coin == ETH_ADDRESS:\r\n        CryptoPoolETH(swap_data.pool).exchange(i, j, _amount, 0, True, value=_eth_amount)\r\n    else:\r\n        CryptoPool(swap_data.pool).exchange(i, j, _amount, 0)\r\n\r\n    if swap_data.coin == ETH_ADDRESS:\r\n        assert self.balance - initial_balance >= min_dy, \"Slippage\"\r\n        if swap_data.receiver != ZERO_ADDRESS:\r\n            raw_call(swap_data.receiver, b\"\", value=self.balance)\r\n    else:\r\n        assert ERC20(swap_data.coin).balanceOf(self) - initial_balance >= min_dy, \"Slippage\"\r\n        if swap_data.receiver != ZERO_ADDRESS:\r\n            amount: uint256 = ERC20(swap_data.coin).balanceOf(self)\r\n            response: Bytes[32] = raw_call(\r\n                swap_data.coin,\r\n                _abi_encode(swap_data.receiver, amount, method_id=method_id(\"transfer(address,uint256)\")),\r\n                max_outsize=32,\r\n            )\r\n            if len(response) != 0:\r\n                assert convert(response, bool)\r\n\r\n\r\n@payable\r\n@external\r\ndef burn(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice Convert `_coin` by removing liquidity and transfer to another burner\r\n    @param _coin Address of the coin being converted\r\n    @return bool success\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    amount: uint256 = 0\r\n    eth_amount: uint256 = 0\r\n\r\n    amount, eth_amount = self._transfer_from(_coin, self.pool_proxy)\r\n\r\n    if amount != 0:\r\n        self._burn(_coin, amount, eth_amount)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef burn_amount(_coin: address, _amount_to_burn: uint256):\r\n    \"\"\"\r\n    @notice Burn a specific quantity of `_coin`\r\n    @dev Useful when the total amount to burn is so large that it fails from slippage\r\n    @param _coin Address of the coin being converted\r\n    @param _amount_to_burn Amount of the coin to burn\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    amount: uint256 = 0\r\n    eth_amount: uint256 = 0\r\n\r\n    pool_proxy: address = self.pool_proxy\r\n    assert PoolProxy(pool_proxy).burners(_coin) == self\r\n\r\n    amount, eth_amount = self._transfer_from(_coin, pool_proxy)\r\n    assert amount >= _amount_to_burn, \"Insufficient balance\"\r\n\r\n    self._burn(_coin, _amount_to_burn, eth_amount)\r\n\r\n\r\n@external\r\ndef set_swap_data(\r\n    _from: address,\r\n    _to: address,\r\n    _pool: address,\r\n    _receiver: address,\r\n    i: uint256,\r\n) -> bool:\r\n    \"\"\"\r\n    @notice Set conversion and transfer data for `_from`\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n\r\n    self.swap_data[_from] = SwapData({\r\n        pool: _pool,\r\n        coin: _to,\r\n        receiver: _receiver,\r\n        i: i\r\n    })\r\n\r\n    if _from != ETH_ADDRESS:\r\n        response: Bytes[32] = raw_call(\r\n            _from,\r\n            _abi_encode(_pool, MAX_UINT256, method_id=method_id(\"approve(address,uint256)\")),\r\n            max_outsize=32,\r\n        )\r\n        if len(response) != 0:\r\n            assert convert(response, bool)\r\n\r\n    return True\r\n\r\n\r\n\r\n@external\r\ndef recover_balance(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice Recover ERC20 tokens from this contract\r\n    @dev Tokens are sent to the recovery address\r\n    @param _coin Token address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n\r\n    amount: uint256 = ERC20(_coin).balanceOf(self)\r\n    response: Bytes[32] = raw_call(\r\n        _coin,\r\n        _abi_encode(self.recovery, amount, method_id=method_id(\"transfer(address,uint256)\")),\r\n        max_outsize=32,\r\n    )\r\n    if len(response) != 0:\r\n        assert convert(response, bool)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_recovery(_recovery: address) -> bool:\r\n    \"\"\"\r\n    @notice Set the token recovery address\r\n    @param _recovery Token recovery address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.recovery = _recovery\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_killed(_is_killed: bool) -> bool:\r\n    \"\"\"\r\n    @notice Set killed status for this contract\r\n    @dev When killed, the `burn` function cannot be called\r\n    @param _is_killed Killed status\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n    self.is_killed = _is_killed\r\n\r\n    return True\r\n\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.future_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_owner  # dev: only owner\r\n    self.owner = msg.sender\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef commit_transfer_emergency_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.emergency_owner  # dev: only owner\r\n    self.future_emergency_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_emergency_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_emergency_owner  # dev: only owner\r\n    self.emergency_owner = msg.sender\r\n\r\n    return True","ABI":"[{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_pool_proxy\",\"type\":\"address\"},{\"name\":\"_recovery\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_emergency_owner\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"burn\",\"inputs\":[{\"name\":\"_coin\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":112531},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"burn_amount\",\"inputs\":[{\"name\":\"_coin\",\"type\":\"address\"},{\"name\":\"_amount_to_burn\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":115128},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_swap_data\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_pool\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"i\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":153520},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"recover_balance\",\"inputs\":[{\"name\":\"_coin\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":17324},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_recovery\",\"inputs\":[{\"name\":\"_recovery\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":37995},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_killed\",\"inputs\":[{\"name\":\"_is_killed\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":40573},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_transfer_ownership\",\"inputs\":[{\"name\":\"_future_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":38055},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_transfer_ownership\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":37924},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_transfer_emergency_ownership\",\"inputs\":[{\"name\":\"_future_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":38115},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_transfer_emergency_ownership\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":37984},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"swap_data\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"pool\",\"type\":\"address\"},{\"name\":\"coin\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"i\",\"type\":\"uint256\"}]}],\"gas\":9587},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pool_proxy\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2946},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"recovery\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2976},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"is_killed\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":3006},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3036},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"emergency_owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3066},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3096},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_emergency_owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3126}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.3.0","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000ecb456ea5365865ebab8a2661b0c503410e9b347000000000000000000000000ecb456ea5365865ebab8a2661b0c503410e9b3470000000000000000000000007eeac6cddbd1d0b8af061742d41877d7f707289a000000000000000000000000467947ee34af926cf1dcac093870f613c96b1e0c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}