{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at polygonscan.com on 2021-11-30\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n// MPC management means multi-party validation.\r\n// MPC signing likes Multi-Signature is more secure than use private key directly.\r\ncontract MPCManageable {\r\n    address public mpc;\r\n    address public pendingMPC;\r\n\r\n    uint256 public constant delay = 2*24*3600;\r\n    uint256 public delayMPC;\r\n\r\n    modifier onlyMPC() {\r\n        require(msg.sender == mpc, \"MPC: only mpc\");\r\n        _;\r\n    }\r\n\r\n    event LogChangeMPC(\r\n        address indexed oldMPC,\r\n        address indexed newMPC,\r\n        uint256 indexed effectiveTime);\r\n\r\n    event LogApplyMPC(\r\n        address indexed oldMPC,\r\n        address indexed newMPC,\r\n        uint256 indexed applyTime);\r\n\r\n    constructor(address _mpc) {\r\n        require(_mpc != address(0), \"MPC: mpc is the zero address\");\r\n        mpc = _mpc;\r\n        emit LogChangeMPC(address(0), mpc, block.timestamp);\r\n    }\r\n\r\n    function changeMPC(address _mpc) external onlyMPC {\r\n        require(_mpc != address(0), \"MPC: mpc is the zero address\");\r\n        pendingMPC = _mpc;\r\n        delayMPC = block.timestamp + delay;\r\n        emit LogChangeMPC(mpc, pendingMPC, delayMPC);\r\n    }\r\n\r\n    function applyMPC() external {\r\n        require(msg.sender == pendingMPC, \"MPC: only pendingMPC\");\r\n        require(block.timestamp >= delayMPC, \"MPC: time before delayMPC\");\r\n        emit LogApplyMPC(mpc, pendingMPC, block.timestamp);\r\n        mpc = pendingMPC;\r\n        pendingMPC = address(0);\r\n        delayMPC = 0;\r\n    }\r\n}\r\n\r\n// support limit operations to whitelist\r\ncontract Whitelistable is MPCManageable {\r\n    bool public whitelistEnabled;\r\n    mapping(address => bool) public isInWhitelist;\r\n\r\n    event LogSetWhitelist(address indexed to, bool indexed flag);\r\n\r\n    modifier onlyWhitelist(address[] memory to) {\r\n        if (whitelistEnabled) {\r\n            for (uint256 i = 0; i < to.length; i++) {\r\n                require(isInWhitelist[to[i]], \"AnyCall: to address is not in whitelist\");\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(address _mpc) MPCManageable(_mpc) {\r\n        whitelistEnabled = true;\r\n    }\r\n\r\n    function enableWhitelist() external onlyMPC {\r\n        whitelistEnabled = true;\r\n    }\r\n\r\n    function disableWhitelist() external onlyMPC {\r\n        whitelistEnabled = false;\r\n    }\r\n\r\n    function whitelist(address to, bool flag) external onlyMPC {\r\n        isInWhitelist[to] = flag;\r\n        emit LogSetWhitelist(to, flag);\r\n    }\r\n}\r\n\r\ncontract AnyCallProxy is Whitelistable {\r\n    uint256 public immutable cID;\r\n\r\n    event LogAnyCall(address indexed from, address[] to, bytes[] data,\r\n                     address[] callbacks, uint256[] nonces, uint256 fromChainID, uint256 toChainID);\r\n    event LogAnyExec(address indexed from, address[] to, bytes[] data, bool[] success, bytes[] result,\r\n                     address[] callbacks, uint256[] nonces, uint256 fromChainID, uint256 toChainID);\r\n\r\n    constructor(address _mpc) Whitelistable(_mpc) {\r\n        uint256 id;\r\n        assembly {id := chainid()}\r\n        cID = id;\r\n    }\r\n\r\n    /**\r\n        @notice Trigger a cross-chain contract interaction\r\n        @param to - list of addresses to call\r\n        @param data - list of data payloads to send / call\r\n        @param callbacks - the callbacks on the fromChainID to call\r\n        `callback(address to, bytes data, uint256 nonces, uint256 fromChainID, bool success, bytes result)`\r\n        @param nonces - the nonces (ordering) to include for the resulting callback\r\n        @param toChainID - the recipient chain that will receive the events\r\n    */\r\n    function anyCall(\r\n        address[] memory to,\r\n        bytes[] memory data,\r\n        address[] memory callbacks,\r\n        uint256[] memory nonces,\r\n        uint256 toChainID\r\n    ) external onlyWhitelist(to) {\r\n        emit LogAnyCall(msg.sender, to, data, callbacks, nonces, cID, toChainID);\r\n    }\r\n\r\n    function anyCall(\r\n        address from,\r\n        address[] memory to,\r\n        bytes[] memory data,\r\n        address[] memory callbacks,\r\n        uint256[] memory nonces,\r\n        uint256 fromChainID\r\n    ) external onlyMPC {\r\n        uint256 length = to.length;\r\n        bool[] memory success = new bool[](length);\r\n        bytes[] memory results = new bytes[](length);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            address _to = to[i];\r\n            if (!whitelistEnabled || isInWhitelist[_to]) {\r\n                (success[i], results[i]) = _to.call{value:0}(data[i]);\r\n            } else {\r\n                (success[i], results[i]) = (false, \"forbid calling\");\r\n            }\r\n        }\r\n        emit LogAnyExec(from, to, data, success, results, callbacks, nonces, fromChainID, cID);\r\n    }\r\n\r\n    function encode(\r\n        string memory signature,\r\n        bytes memory data\r\n    ) external pure returns (bytes memory) {\r\n        return abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\r\n    }\r\n\r\n    function encodePermit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v, bytes32 r, bytes32 s\r\n    ) external pure returns (bytes memory) {\r\n        return abi.encodeWithSignature(\r\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\",\r\n            owner, spender, value, deadline, v, r, s);\r\n    }\r\n\r\n    function encodeTransferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external pure returns (bytes memory) {\r\n        return abi.encodeWithSignature(\r\n            \"transferFrom(address,address,uint256)\",\r\n            sender, recipient, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mpc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"callbacks\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"LogAnyCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"success\",\"type\":\"bool[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"result\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"callbacks\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"LogAnyExec\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMPC\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMPC\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"applyTime\",\"type\":\"uint256\"}],\"name\":\"LogApplyMPC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMPC\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMPC\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"effectiveTime\",\"type\":\"uint256\"}],\"name\":\"LogChangeMPC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"LogSetWhitelist\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"callbacks\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"}],\"name\":\"anyCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"callbacks\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"anyCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyMPC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mpc\",\"type\":\"address\"}],\"name\":\"changeMPC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayMPC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"encode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"encodePermit\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"encodeTransferFrom\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mpc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMPC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AnyCallProxy","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007ff2c8fd909a0f0eab4611343a2197083c524734","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c7c16cc5bd5bf5a67e5da8ade477d508360a3f81c626fc24a391a537597d7e6d"}]}