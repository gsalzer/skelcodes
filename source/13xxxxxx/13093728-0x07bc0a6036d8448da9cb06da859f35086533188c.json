{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/stake/StakeTONUpgrade2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/IStakeTON.sol\\\";\\nimport {IIStake1Vault} from \\\"../interfaces/IIStake1Vault.sol\\\";\\nimport {IIERC20} from \\\"../interfaces/IIERC20.sol\\\";\\nimport {IWTON} from \\\"../interfaces/IWTON.sol\\\";\\n\\nimport \\\"../libraries/LibTokenStake1.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../connection/TokamakStakeUpgrade2.sol\\\";\\n\\n// import {\\n//     ERC165Checker\\n// } from \\\"@openzeppelin/contracts/introspection/ERC165Checker.sol\\\";\\n// import {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n/// @title Stake Contract\\n/// @notice It can be staked in Tokamak. Can be swapped using Uniswap.\\n/// Stake contracts can interact with the vault to claim tos tokens\\ncontract StakeTONUpgrade2 is TokamakStakeUpgrade2, IStakeTON {\\n    using SafeMath for uint256;\\n\\n    /// @dev event on staking\\n    /// @param to the sender\\n    /// @param amount the amount of staking\\n    event Staked(address indexed to, uint256 amount);\\n\\n    /// @dev event on claim\\n    /// @param to the sender\\n    /// @param amount the amount of claim\\n    /// @param claimBlock the block of claim\\n    event Claimed(address indexed to, uint256 amount, uint256 claimBlock);\\n\\n    /// @dev event on withdrawal\\n    /// @param to the sender\\n    /// @param tonAmount the amount of TON withdrawal\\n    /// @param tosAmount the amount of TOS withdrawal\\n    event Withdrawal(address indexed to, uint256 tonAmount, uint256 tosAmount);\\n\\n    /// @dev constructor of StakeTON\\n    constructor() {}\\n\\n    /// @dev This contract cannot stake Ether.\\n    receive() external payable {\\n        revert(\\\"cannot stake Ether\\\");\\n    }\\n\\n    /// @dev withdraw\\n    function withdraw() external override {\\n        require(endBlock > 0 && endBlock < block.number, \\\"StakeTON: not end\\\");\\n        (\\n            address ton,\\n            address wton,\\n            address depositManager,\\n            address seigManager,\\n\\n        ) = ITokamakRegistry2(stakeRegistry).getTokamak();\\n        require(\\n            ton != address(0) &&\\n                wton != address(0) &&\\n                depositManager != address(0) &&\\n                seigManager != address(0),\\n            \\\"StakeTON: ITokamakRegistry zero\\\"\\n        );\\n        if (tokamakLayer2 != address(0)) {\\n            require(\\n                IISeigManager(seigManager).stakeOf(\\n                    tokamakLayer2,\\n                    address(this)\\n                ) ==\\n                    0 &&\\n                    IIIDepositManager(depositManager).pendingUnstaked(\\n                        tokamakLayer2,\\n                        address(this)\\n                    ) ==\\n                    0,\\n                \\\"StakeTON: remain amount in tokamak\\\"\\n            );\\n        }\\n        LibTokenStake1.StakedAmount storage staked = userStaked[msg.sender];\\n        require(!staked.released, \\\"StakeTON: Already withdraw\\\");\\n\\n        if (!withdrawFlag) {\\n            withdrawFlag = true;\\n            if (paytoken == ton) {\\n                swappedAmountTOS = IIERC20(token).balanceOf(address(this));\\n                finalBalanceWTON = IIERC20(wton).balanceOf(address(this));\\n                finalBalanceTON = IIERC20(ton).balanceOf(address(this));\\n                require(\\n                    finalBalanceWTON.div(10**9).add(finalBalanceTON) >=\\n                        totalStakedAmount,\\n                    \\\"StakeTON: finalBalance is lack\\\"\\n                );\\n            }\\n        }\\n\\n        uint256 amount = staked.amount;\\n        require(amount > 0, \\\"StakeTON: Amount wrong\\\");\\n        staked.releasedBlock = block.number;\\n        staked.released = true;\\n\\n        if (paytoken == ton) {\\n            uint256 tonAmount = 0;\\n            uint256 wtonAmount = 0;\\n            uint256 tosAmount = 0;\\n            if (finalBalanceTON > 0)\\n                tonAmount = finalBalanceTON.mul(amount).div(totalStakedAmount);\\n            if (finalBalanceWTON > 0)\\n                wtonAmount = finalBalanceWTON.mul(amount).div(\\n                    totalStakedAmount\\n                );\\n            if (swappedAmountTOS > 0)\\n                tosAmount = swappedAmountTOS.mul(amount).div(totalStakedAmount);\\n\\n            staked.releasedTOSAmount = tosAmount;\\n            if (wtonAmount > 0)\\n                staked.releasedAmount = wtonAmount.div(10**9).add(tonAmount);\\n            else staked.releasedAmount = tonAmount;\\n\\n            tonWithdraw(ton, wton, tonAmount, wtonAmount, tosAmount);\\n        } else if (paytoken == address(0)) {\\n            require(staked.releasedAmount <= amount, \\\"StakeTON: Amount wrong\\\");\\n            staked.releasedAmount = amount;\\n            address payable self = address(uint160(address(this)));\\n            require(self.balance >= amount, \\\"StakeTON: insuffient ETH\\\");\\n            (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n            require(success, \\\"StakeTON: withdraw failed.\\\");\\n        } else {\\n            require(staked.releasedAmount <= amount, \\\"StakeTON: Amount wrong\\\");\\n            staked.releasedAmount = amount;\\n            require(\\n                IIERC20(paytoken).transfer(msg.sender, amount),\\n                \\\"StakeTON: transfer fail\\\"\\n            );\\n        }\\n\\n        emit Withdrawal(\\n            msg.sender,\\n            staked.releasedAmount,\\n            staked.releasedTOSAmount\\n        );\\n    }\\n\\n    /// @dev withdraw TON\\n    /// @param ton  TON address\\n    /// @param wton  WTON address\\n    /// @param tonAmount  the amount of TON to be withdrawn to msg.sender\\n    /// @param wtonAmount  the amount of WTON to be withdrawn to msg.sender\\n    /// @param tosAmount  the amount of TOS to be withdrawn to msg.sender\\n    function tonWithdraw(\\n        address ton,\\n        address wton,\\n        uint256 tonAmount,\\n        uint256 wtonAmount,\\n        uint256 tosAmount\\n    ) internal {\\n        if (tonAmount > 0) {\\n            require(\\n                IIERC20(ton).balanceOf(address(this)) >= tonAmount,\\n                \\\"StakeTON: ton balance is lack\\\"\\n            );\\n\\n            require(\\n                IIERC20(ton).transfer(msg.sender, tonAmount),\\n                \\\"StakeTON: transfer ton fail\\\"\\n            );\\n        }\\n        if (wtonAmount > 0) {\\n            require(\\n                IIERC20(wton).balanceOf(address(this)) >= wtonAmount,\\n                \\\"StakeTON: wton balance is lack\\\"\\n            );\\n            require(\\n                IWTON(wton).swapToTONAndTransfer(msg.sender, wtonAmount),\\n                \\\"StakeTON: transfer wton fail\\\"\\n            );\\n        }\\n        if (tosAmount > 0) {\\n            require(\\n                IIERC20(token).balanceOf(address(this)) >= tosAmount,\\n                \\\"StakeTON: tos balance is lack\\\"\\n            );\\n            require(\\n                IIERC20(token).transfer(msg.sender, tosAmount),\\n                \\\"StakeTON: transfer tos fail\\\"\\n            );\\n        }\\n    }\\n\\n    /// @dev Claim for reward\\n    function claim() external override lock {\\n        require(IIStake1Vault(vault).saleClosed(), \\\"StakeTON: not closed\\\");\\n        uint256 rewardClaim = 0;\\n\\n        LibTokenStake1.StakedAmount storage staked = userStaked[msg.sender];\\n        require(\\n            staked.amount > 0 && staked.claimedBlock < endBlock,\\n            \\\"StakeTON: claimed\\\"\\n        );\\n\\n        rewardClaim = canRewardAmount(msg.sender, block.number);\\n\\n        require(rewardClaim > 0, \\\"StakeTON: reward is zero\\\");\\n\\n        uint256 rewardTotal =\\n            IIStake1Vault(vault).totalRewardAmount(address(this));\\n        require(\\n            rewardClaimedTotal.add(rewardClaim) <= rewardTotal,\\n            \\\"StakeTON: total reward exceeds\\\"\\n        );\\n\\n        staked.claimedBlock = block.number;\\n        staked.claimedAmount = staked.claimedAmount.add(rewardClaim);\\n        rewardClaimedTotal = rewardClaimedTotal.add(rewardClaim);\\n\\n        require(\\n            IIStake1Vault(vault).claim(msg.sender, rewardClaim),\\n            \\\"StakeTON: fail claim from vault\\\"\\n        );\\n\\n        emit Claimed(msg.sender, rewardClaim, block.number);\\n    }\\n\\n    /// @dev Returns the amount that can be rewarded\\n    /// @param account  the account that claimed reward\\n    /// @param specificBlock the block that claimed reward\\n    /// @return reward the reward amount that can be taken\\n    function canRewardAmount(address account, uint256 specificBlock)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 reward = 0;\\n        if (specificBlock > endBlock) specificBlock = endBlock;\\n\\n        if (\\n            specificBlock < startBlock ||\\n            userStaked[account].amount == 0 ||\\n            userStaked[account].claimedBlock > endBlock ||\\n            userStaked[account].claimedBlock > specificBlock\\n        ) {\\n            reward = 0;\\n        } else {\\n            uint256 startR = startBlock;\\n            uint256 endR = endBlock;\\n            if (startR < userStaked[account].claimedBlock)\\n                startR = userStaked[account].claimedBlock;\\n            if (specificBlock < endR) endR = specificBlock;\\n\\n            uint256[] memory orderedEndBlocks =\\n                IIStake1Vault(vault).orderedEndBlocksAll();\\n\\n            if (orderedEndBlocks.length > 0) {\\n                uint256 _end = 0;\\n                uint256 _start = startR;\\n                uint256 _total = 0;\\n                uint256 blockTotalReward = 0;\\n                blockTotalReward = IIStake1Vault(vault).blockTotalReward();\\n\\n                address user = account;\\n                uint256 amount = userStaked[user].amount;\\n\\n                for (uint256 i = 0; i < orderedEndBlocks.length; i++) {\\n                    _end = orderedEndBlocks[i];\\n                    _total = IIStake1Vault(vault).stakeEndBlockTotal(_end);\\n\\n                    if (_start > _end) {} else if (endR <= _end) {\\n                        if (_total > 0) {\\n                            uint256 _period1 = endR.sub(startR);\\n                            reward = reward.add(\\n                                blockTotalReward.mul(_period1).mul(amount).div(\\n                                    _total\\n                                )\\n                            );\\n                        }\\n                        break;\\n                    } else {\\n                        if (_total > 0) {\\n                            uint256 _period2 = _end.sub(startR);\\n                            reward = reward.add(\\n                                blockTotalReward.mul(_period2).mul(amount).div(\\n                                    _total\\n                                )\\n                            );\\n                        }\\n                        startR = _end;\\n                    }\\n                }\\n            }\\n        }\\n        return reward;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakeTON.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/LibTokenStake1.sol\\\";\\n\\ninterface IStakeTON {\\n    /// @dev Stake amount\\n    /// @param amount  the amount of staked\\n    //function stake(uint256 amount) external payable;\\n\\n    /// @dev Claim for reward\\n    function claim() external;\\n\\n    /// @dev withdraw\\n    function withdraw() external;\\n\\n    /// @dev Returns the amount that can be rewarded\\n    /// @param account  the account that claimed reward\\n    /// @param specificBlock the block that claimed reward\\n    /// @return reward the reward amount that can be taken\\n    function canRewardAmount(address account, uint256 specificBlock)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIStake1Vault.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\ninterface IIStake1Vault {\\n    function closeSale() external;\\n\\n    function totalRewardAmount(address _account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function claim(address _to, uint256 _amount) external returns (bool);\\n\\n    function orderedEndBlocksAll() external view returns (uint256[] memory);\\n\\n    function blockTotalReward() external view returns (uint256);\\n\\n    function stakeEndBlockTotal(uint256 endblock)\\n        external\\n        view\\n        returns (uint256 totalStakedAmount);\\n\\n    function saleClosed() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\ninterface IIERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWTON.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IWTON {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function onApprove(\\n        address owner,\\n        address spender,\\n        uint256 tonAmount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function swapToTON(uint256 wtonAmount) external returns (bool);\\n\\n    function swapFromTON(uint256 tonAmount) external returns (bool);\\n\\n    function swapToTONAndTransfer(address to, uint256 wtonAmount)\\n        external\\n        returns (bool);\\n\\n    function swapFromTONAndTransfer(address to, uint256 tonAmount)\\n        external\\n        returns (bool);\\n\\n    function renounceTonMinter() external;\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibTokenStake1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\nlibrary LibTokenStake1 {\\n    enum DefiStatus {\\n        NONE,\\n        APPROVE,\\n        DEPOSITED,\\n        REQUESTWITHDRAW,\\n        REQUESTWITHDRAWALL,\\n        WITHDRAW,\\n        END\\n    }\\n    struct DefiInfo {\\n        string name;\\n        address router;\\n        address ext1;\\n        address ext2;\\n        uint256 fee;\\n        address routerV2;\\n    }\\n    struct StakeInfo {\\n        string name;\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        uint256 balance;\\n        uint256 totalRewardAmount;\\n        uint256 claimRewardAmount;\\n    }\\n\\n    struct StakedAmount {\\n        uint256 amount;\\n        uint256 claimedBlock;\\n        uint256 claimedAmount;\\n        uint256 releasedBlock;\\n        uint256 releasedAmount;\\n        uint256 releasedTOSAmount;\\n        bool released;\\n    }\\n\\n    struct StakedAmountForSTOS {\\n        uint256 amount;\\n        uint256 startBlock;\\n        uint256 periodBlock;\\n        uint256 rewardPerBlock;\\n        uint256 claimedBlock;\\n        uint256 claimedAmount;\\n        uint256 releasedBlock;\\n        uint256 releasedAmount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/connection/TokamakStakeUpgrade2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/ITokamakStaker.sol\\\";\\nimport {ITON} from \\\"../interfaces/ITON.sol\\\";\\nimport {IIStake1Vault} from \\\"../interfaces/IIStake1Vault.sol\\\";\\nimport {IIIDepositManager} from \\\"../interfaces/IIIDepositManager.sol\\\";\\nimport {IISeigManager} from \\\"../interfaces/IISeigManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../common/AccessibleCommon.sol\\\";\\n\\nimport \\\"../stake/StakeTONStorage.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\n\\ninterface IERC20BASE2 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\\ninterface IIWTON2 {\\n    function swapToTON(uint256 wtonAmount) external returns (bool);\\n}\\n\\ninterface ITokamakRegistry2 {\\n    function getTokamak()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address\\n        );\\n\\n    function getUniswap()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            uint256,\\n            address\\n        );\\n}\\n\\n/// @title The connector that integrates tokamak\\ncontract TokamakStakeUpgrade2 is\\n    StakeTONStorage,\\n    AccessibleCommon,\\n    ITokamakStaker\\n{\\n    using SafeMath for uint256;\\n\\n    modifier nonZero(address _addr) {\\n        require(_addr != address(0), \\\"TokamakStaker: zero address\\\");\\n        _;\\n    }\\n\\n    modifier sameTokamakLayer(address _addr) {\\n        require(tokamakLayer2 == _addr, \\\"TokamakStaker:different layer\\\");\\n        _;\\n    }\\n\\n    modifier lock() {\\n        require(_lock == 0, \\\"TokamakStaker:LOCKED\\\");\\n        _lock = 1;\\n        _;\\n        _lock = 0;\\n    }\\n\\n    modifier onlyClosed() {\\n        require(IIStake1Vault(vault).saleClosed(), \\\"TokamakStaker: not closed\\\");\\n        _;\\n    }\\n\\n    /// @dev event on set the registry address\\n    /// @param registry the registry address\\n    event SetRegistry(address registry);\\n\\n    /// @dev event on set the tokamak Layer2 address\\n    /// @param layer2 the tokamak Layer2 address\\n    event SetTokamakLayer2(address layer2);\\n\\n    /// @dev event on staking the staked TON in layer2 in tokamak\\n    /// @param layer2 the layer2 address in tokamak\\n    /// @param amount the amount that stake to layer2\\n    event TokamakStaked(address layer2, uint256 amount);\\n\\n    /// @dev event on request unstaking the wtonAmount in layer2 in tokamak\\n    /// @param layer2 the layer2 address in tokamak\\n    /// @param amount the amount requested to unstaking\\n    event TokamakRequestedUnStaking(address layer2, uint256 amount);\\n\\n    /// @dev event on process unstaking in layer2 in tokamak\\n    /// @param layer2 the layer2 address in tokamak\\n    /// @param rn the number of requested unstaking\\n    /// @param receiveTON if is true ,TON , else is WTON\\n    event TokamakProcessedUnStaking(\\n        address layer2,\\n        uint256 rn,\\n        bool receiveTON\\n    );\\n\\n    /// @dev event on request unstaking the amount of all in layer2 in tokamak\\n    /// @param layer2 the layer2 address in tokamak\\n    event TokamakRequestedUnStakingAll(address layer2);\\n\\n    /// @dev exchange WTON to TOS using uniswap v3\\n    /// @param caller the sender\\n    /// @param amountIn the input amount\\n    /// @return amountOut the amount of exchanged out token\\n\\n    event ExchangedWTONtoTOS(\\n        address caller,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /// @dev set registry address\\n    /// @param _registry new registry address\\n    function setRegistry(address _registry)\\n        external\\n        onlyOwner\\n        nonZero(_registry)\\n    {\\n        stakeRegistry = _registry;\\n\\n        emit SetRegistry(stakeRegistry);\\n    }\\n\\n    /// @dev set the tokamak Layer2 address\\n    /// @param _layer2 new the tokamak Layer2 address\\n    function setTokamakLayer2(address _layer2) external override onlyOwner {\\n        require(\\n            _layer2 != address(0) && tokamakLayer2 != _layer2,\\n            \\\"TokamakStaker:tokamakLayer2 zero \\\"\\n        );\\n        tokamakLayer2 = _layer2;\\n\\n        emit SetTokamakLayer2(_layer2);\\n    }\\n\\n    /// @dev get the addresses that used in uniswap interfaces\\n    /// @return uniswapRouter the address of uniswapRouter\\n    /// @return npm the address of positionManagerAddress\\n    /// @return ext the address of ext\\n    /// @return fee the amount of fee\\n    function getUniswapInfo()\\n        external\\n        view\\n        override\\n        returns (\\n            address uniswapRouter,\\n            address npm,\\n            address ext,\\n            uint256 fee,\\n            address uniswapRouterV2\\n        )\\n    {\\n        return ITokamakRegistry2(stakeRegistry).getUniswap();\\n    }\\n\\n    /// @dev Change the TON holded in contract have to WTON, or change WTON to TON.\\n    /// @param amount the amount to be changed\\n    /// @param toWTON if it's true, TON->WTON , else WTON->TON\\n    function swapTONtoWTON(uint256 amount, bool toWTON) external override lock {\\n        checkTokamak();\\n\\n        if (toWTON) {\\n            require(\\n                swapProxy != address(0),\\n                \\\"TokamakStaker: swapProxy is zero\\\"\\n            );\\n            require(\\n                IERC20BASE2(ton).balanceOf(address(this)) >= amount,\\n                \\\"TokamakStaker: swapTONtoWTON ton balance is insufficient\\\"\\n            );\\n            bytes memory data = abi.encode(swapProxy, swapProxy);\\n            require(\\n                ITON(ton).approveAndCall(wton, amount, data),\\n                \\\"TokamakStaker:swapTONtoWTON approveAndCall fail\\\"\\n            );\\n        } else {\\n            require(\\n                IERC20BASE2(wton).balanceOf(address(this)) >= amount,\\n                \\\"TokamakStaker: swapTONtoWTON wton balance is insufficient\\\"\\n            );\\n            require(\\n                IIWTON2(wton).swapToTON(amount),\\n                \\\"TokamakStaker:swapToTON fail\\\"\\n            );\\n        }\\n    }\\n\\n    /// @dev If the tokamak addresses is not set, set the addresses.\\n    function checkTokamak() public {\\n        if (ton == address(0)) {\\n            (\\n                address _ton,\\n                address _wton,\\n                address _depositManager,\\n                address _seigManager,\\n                address _swapProxy\\n            ) = ITokamakRegistry2(stakeRegistry).getTokamak();\\n\\n            ton = _ton;\\n            wton = _wton;\\n            depositManager = _depositManager;\\n            seigManager = _seigManager;\\n            swapProxy = _swapProxy;\\n        }\\n        require(\\n            ton != address(0) &&\\n                wton != address(0) &&\\n                seigManager != address(0) &&\\n                depositManager != address(0) &&\\n                swapProxy != address(0),\\n            \\\"TokamakStaker:tokamak zero\\\"\\n        );\\n    }\\n\\n    /// @dev  staking the staked TON in layer2 in tokamak\\n    /// @param _layer2 the layer2 address in tokamak\\n    /// @param stakeAmount the amount that stake to layer2\\n    function tokamakStaking(address _layer2, uint256 stakeAmount)\\n        external\\n        override\\n        lock\\n        nonZero(stakeRegistry)\\n        nonZero(_layer2)\\n        onlyClosed\\n    {\\n        require(block.number <= endBlock, \\\"TokamakStaker:period end\\\");\\n        require(stakeAmount > 0, \\\"TokamakStaker:stakeAmount is zero\\\");\\n\\n        defiStatus = uint256(LibTokenStake1.DefiStatus.DEPOSITED);\\n\\n        checkTokamak();\\n\\n        uint256 globalWithdrawalDelay =\\n            IIIDepositManager(depositManager).globalWithdrawalDelay();\\n        require(\\n            block.number < endBlock.sub(globalWithdrawalDelay),\\n            \\\"TokamakStaker:period(withdrawalDelay) end\\\"\\n        );\\n\\n        if (tokamakLayer2 == address(0)) tokamakLayer2 = _layer2;\\n        else {\\n            if (\\n                IISeigManager(seigManager).stakeOf(\\n                    tokamakLayer2,\\n                    address(this)\\n                ) >\\n                0 ||\\n                IIIDepositManager(depositManager).pendingUnstaked(\\n                    tokamakLayer2,\\n                    address(this)\\n                ) >\\n                0\\n            ) {\\n                require(\\n                    tokamakLayer2 == _layer2,\\n                    \\\"TokamakStaker:different layer\\\"\\n                );\\n            } else {\\n                if (tokamakLayer2 != _layer2) tokamakLayer2 = _layer2;\\n            }\\n        }\\n\\n        require(\\n            IERC20BASE2(ton).balanceOf(address(this)) >= stakeAmount,\\n            \\\"TokamakStaker: ton balance is insufficient\\\"\\n        );\\n        toTokamak = toTokamak.add(stakeAmount);\\n        bytes memory data = abi.encode(depositManager, _layer2);\\n        require(\\n            ITON(ton).approveAndCall(wton, stakeAmount, data),\\n            \\\"TokamakStaker:approveAndCall fail\\\"\\n        );\\n\\n        emit TokamakStaked(_layer2, stakeAmount);\\n    }\\n\\n    function version() external pure returns (string memory) {\\n        return \\\"phase1.upgrade.v2\\\";\\n    }\\n\\n    /// @dev  request unstaking the amount excluding principal   in layer2 in tokamak\\n    /// @param _layer2 the layer2 address in tokamak\\n    /// @param wtonAmount Exists for existing interfaces. not used.\\n    function tokamakRequestUnStaking(address _layer2, uint256 wtonAmount)\\n        external\\n        override\\n        lock\\n        nonZero(stakeRegistry)\\n        nonZero(_layer2)\\n        onlyClosed\\n        sameTokamakLayer(_layer2)\\n    {\\n        defiStatus = uint256(LibTokenStake1.DefiStatus.REQUESTWITHDRAW);\\n        requestNum = requestNum.add(1);\\n        checkTokamak();\\n\\n        uint256 stakeOf =\\n            IISeigManager(seigManager).stakeOf(_layer2, address(this));\\n        require(stakeOf > 0, \\\"TokamakStaker: stakeOf is zero\\\");\\n\\n        uint256 principalAmount = totalStakedAmount.mul(10**9);\\n\\n        uint256 availableAmount = 0;\\n        if (principalAmount > 0 && principalAmount < stakeOf.sub(100)) {\\n            availableAmount = stakeOf.sub(principalAmount).sub(100);\\n        }\\n\\n        require(\\n            availableAmount > 0,\\n            \\\"TokamakStaker: no withdraw-able amount not yet\\\"\\n        );\\n\\n        IIIDepositManager(depositManager).requestWithdrawal(\\n            _layer2,\\n            availableAmount\\n        );\\n\\n        emit TokamakRequestedUnStaking(_layer2, availableAmount);\\n    }\\n\\n    /// @dev  Check whether unstaking is possible in layer2\\n    /// @param _layer2 the layer2 address in tokamak\\n    /// @return canUnStakingAmount available unStaking amount\\n    function canTokamakRequestUnStaking(address _layer2)\\n        external\\n        view\\n        returns (uint256 canUnStakingAmount)\\n    {\\n        canUnStakingAmount = 0;\\n        if (\\n            tokamakLayer2 != address(0) &&\\n            tokamakLayer2 == _layer2 &&\\n            seigManager != address(0)\\n        ) {\\n            uint256 stakeOf =\\n                IISeigManager(seigManager).stakeOf(_layer2, address(this));\\n            if (\\n                stakeOf > 0 &&\\n                totalStakedAmount > 0 &&\\n                totalStakedAmount.mul(10**9) < stakeOf\\n            ) {\\n                canUnStakingAmount = stakeOf.sub(totalStakedAmount.mul(10**9));\\n            }\\n        }\\n    }\\n\\n    /// @dev  request unstaking the amount of all in layer2 in tokamak\\n    /// @param _layer2 the layer2 address in tokamak\\n    function tokamakRequestUnStakingAll(address _layer2)\\n        external\\n        override\\n        lock\\n        nonZero(stakeRegistry)\\n        nonZero(_layer2)\\n        onlyClosed\\n        sameTokamakLayer(_layer2)\\n    {\\n        defiStatus = uint256(LibTokenStake1.DefiStatus.REQUESTWITHDRAW);\\n        requestNum = requestNum.add(1);\\n        checkTokamak();\\n\\n        uint256 globalWithdrawalDelay =\\n            IIIDepositManager(depositManager).globalWithdrawalDelay();\\n\\n        uint256 stakeOf =\\n            IISeigManager(seigManager).stakeOf(_layer2, address(this));\\n        require(stakeOf > 0, \\\"TokamakStaker: stakeOf is zero\\\");\\n\\n        uint256 interval = globalWithdrawalDelay / 14;\\n\\n        require(\\n            block.number > endBlock.sub(globalWithdrawalDelay).sub(interval),\\n            \\\"TokamakStaker:The executable block has not passed\\\"\\n        );\\n\\n        IIIDepositManager(depositManager).requestWithdrawalAll(_layer2);\\n\\n        emit TokamakRequestedUnStakingAll(_layer2);\\n    }\\n\\n    /// @dev  Check whether unstakingAll is possible in layer2\\n    /// @param _layer2 the layer2 address in tokamak\\n    /// @return can whether can tokamakRequestUnStakingAll\\n    function canTokamakRequestUnStakingAll(address _layer2)\\n        external\\n        view\\n        returns (bool can)\\n    {\\n        can = false;\\n        if (\\n            tokamakLayer2 != address(0) &&\\n            tokamakLayer2 == _layer2 &&\\n            depositManager != address(0) &&\\n            seigManager != address(0)\\n        ) {\\n            uint256 globalWithdrawalDelay =\\n                IIIDepositManager(depositManager).globalWithdrawalDelay();\\n            uint256 interval = globalWithdrawalDelay / 14;\\n            uint256 stakeOf =\\n                IISeigManager(seigManager).stakeOf(_layer2, address(this));\\n            if (\\n                stakeOf > 0 &&\\n                block.number > endBlock.sub(globalWithdrawalDelay).sub(interval)\\n            ) can = true;\\n        }\\n    }\\n\\n    /// @dev  Check whether unstakingAll is possible in layer2\\n    /// @param _layer2 the layer2 address in tokamak\\n    /// @return _block  the block to can tokamakRequestUnStakingAll\\n    function canTokamakRequestUnStakingAllBlock(address _layer2)\\n        external\\n        view\\n        returns (uint256 _block)\\n    {\\n        if (\\n            tokamakLayer2 != address(0) &&\\n            tokamakLayer2 == _layer2 &&\\n            depositManager != address(0)\\n        ) {\\n            uint256 globalWithdrawalDelay =\\n                IIIDepositManager(depositManager).globalWithdrawalDelay();\\n            uint256 interval = globalWithdrawalDelay / 14;\\n\\n            if (endBlock > globalWithdrawalDelay.add(interval))\\n                _block = endBlock.sub(globalWithdrawalDelay).sub(interval);\\n        }\\n    }\\n\\n    /// @dev process unstaking in layer2 in tokamak\\n    /// @param _layer2 the layer2 address in tokamak\\n    function tokamakProcessUnStaking(address _layer2)\\n        external\\n        override\\n        lock\\n        nonZero(stakeRegistry)\\n        onlyClosed\\n        sameTokamakLayer(_layer2)\\n    {\\n        defiStatus = uint256(LibTokenStake1.DefiStatus.WITHDRAW);\\n\\n        checkTokamak();\\n\\n        uint256 num = 0;\\n        uint256 pamount = 0;\\n        (num, pamount) = canTokamakProcessUnStakingCount(_layer2);\\n\\n        require(num > 0 && pamount > 0, \\\"TokamakStaker: no able request\\\");\\n        fromTokamak = fromTokamak.add(pamount);\\n        if (requestNum >= num) requestNum = requestNum.sub(num);\\n\\n        // receiveTON = false . to WTON\\n        IIIDepositManager(depositManager).processRequests(_layer2, num, true);\\n\\n        emit TokamakProcessedUnStaking(_layer2, num, true);\\n    }\\n\\n    /// @dev TokamakProcessUnStaking Number and amount of withdrawals possible\\n    /// @param _layer2 the layer2 address in tokamak\\n    function canTokamakProcessUnStakingCount(address _layer2)\\n        public\\n        view\\n        nonZero(stakeRegistry)\\n        nonZero(_layer2)\\n        onlyClosed\\n        sameTokamakLayer(_layer2)\\n        returns (uint256 count, uint256 amount)\\n    {\\n        uint128 num = 0;\\n        uint128 pamount = 0;\\n        uint256 startIndex =\\n            IIIDepositManager(depositManager).withdrawalRequestIndex(\\n                _layer2,\\n                address(this)\\n            );\\n        uint256 numPendingRequests =\\n            IIIDepositManager(depositManager)\\n                .numPendingRequests(_layer2, address(this))\\n                .add(startIndex);\\n\\n        for (uint256 i = startIndex; i < numPendingRequests; i++) {\\n            uint128 _block = 0;\\n            uint128 _amount = 0;\\n            bool processed = false;\\n            (_block, _amount, processed) = IIIDepositManager(depositManager)\\n                .withdrawalRequest(_layer2, address(this), i);\\n\\n            if (\\n                processed == false &&\\n                (uint256(_block) > 0 && uint256(_block) < block.number)\\n            ) {\\n                num++;\\n                pamount += _amount;\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        return (uint256(num), uint256(pamount));\\n    }\\n\\n    /// @dev exchange holded WTON to TOS using uniswap\\n    /// @param _amountIn the input amount\\n    /// @param _amountOutMinimum the minimun output amount\\n    /// @param _deadline deadline\\n    /// @param _sqrtPriceLimitX96 sqrtPriceLimitX96\\n    /// @param _kind the function type, if 0, use exactInputSingle function, else if, use exactInput function\\n    /// @return amountOut the amount of exchanged out token\\n    function exchangeWTONtoTOS(\\n        uint256 _amountIn,\\n        uint256 _amountOutMinimum,\\n        uint256 _deadline,\\n        uint160 _sqrtPriceLimitX96,\\n        uint256 _kind\\n    ) external override lock onlyClosed returns (uint256 amountOut) {\\n        require(block.number <= endBlock, \\\"TokamakStaker: period end\\\");\\n        require(_kind < 2, \\\"TokamakStaker: not available kind\\\");\\n        checkTokamak();\\n\\n        {\\n            uint256 _amountWTON = IERC20BASE2(wton).balanceOf(address(this));\\n            uint256 _amountTON = IERC20BASE2(ton).balanceOf(address(this));\\n            uint256 stakeOf = 0;\\n            if (tokamakLayer2 != address(0)) {\\n                stakeOf = IISeigManager(seigManager).stakeOf(\\n                    tokamakLayer2,\\n                    address(this)\\n                );\\n                stakeOf = stakeOf.add(\\n                    IIIDepositManager(depositManager).pendingUnstaked(\\n                        tokamakLayer2,\\n                        address(this)\\n                    )\\n                );\\n            }\\n            uint256 holdAmount = _amountWTON;\\n            if (_amountTON > 0)\\n                holdAmount = holdAmount.add(_amountTON.mul(10**9));\\n            require(\\n                holdAmount >= _amountIn,\\n                \\\"TokamakStaker: wton insufficient\\\"\\n            );\\n\\n            if (stakeOf > 0) holdAmount = holdAmount.add(stakeOf);\\n\\n            require(\\n                holdAmount > totalStakedAmount.mul(10**9) &&\\n                    holdAmount.sub(totalStakedAmount.mul(10**9)) >= _amountIn,\\n                \\\"TokamakStaker:insufficient\\\"\\n            );\\n            if (_amountWTON < _amountIn) {\\n                bytes memory data = abi.encode(swapProxy, swapProxy);\\n                uint256 swapTON = _amountIn.sub(_amountWTON).div(10**9);\\n                require(\\n                    ITON(ton).approveAndCall(wton, swapTON, data),\\n                    \\\"TokamakStaker:exchangeWTONtoTOS approveAndCall fail\\\"\\n                );\\n            }\\n        }\\n\\n        toUniswapWTON = toUniswapWTON.add(_amountIn);\\n        (address uniswapRouter, , , uint256 _fee, ) =\\n            ITokamakRegistry2(stakeRegistry).getUniswap();\\n        require(uniswapRouter != address(0), \\\"TokamakStaker:uniswap zero\\\");\\n        require(\\n            IERC20BASE2(wton).approve(uniswapRouter, _amountIn),\\n            \\\"TokamakStaker:can't approve uniswapRouter\\\"\\n        );\\n\\n        //if (_kind == 0) {\\n        ISwapRouter.ExactInputSingleParams memory params =\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: wton,\\n                tokenOut: token,\\n                fee: uint24(_fee),\\n                recipient: address(this),\\n                deadline: _deadline,\\n                amountIn: _amountIn,\\n                amountOutMinimum: _amountOutMinimum,\\n                sqrtPriceLimitX96: _sqrtPriceLimitX96\\n            });\\n        amountOut = ISwapRouter(uniswapRouter).exactInputSingle(params);\\n        /*\\n        } else if (_kind == 1) {\\n            ISwapRouter.ExactInputParams memory params =\\n                ISwapRouter.ExactInputParams({\\n                    path: abi.encodePacked(\\n                        wton,\\n                        uint24(_fee),\\n                        wethAddress,\\n                        uint24(_fee),\\n                        token\\n                    ),\\n                    recipient: address(this),\\n                    deadline: _deadline,\\n                    amountIn: _amountIn,\\n                    amountOutMinimum: _amountOutMinimum\\n                });\\n            amountOut = ISwapRouter(uniswapRouter).exactInput(params);\\n        } */\\n\\n        emit ExchangedWTONtoTOS(msg.sender, _amountIn, amountOut);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokamakStaker.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\ninterface ITokamakStaker {\\n    /// @dev set the tokamak Layer2 address\\n    /// @param _layer2 new the tokamak Layer2 address\\n    function setTokamakLayer2(address _layer2) external;\\n\\n    /// @dev get the addresses yhat used in uniswap interfaces\\n    /// @return uniswapRouter the address of uniswapV3 Router\\n    /// @return npm the address of positionManagerAddress\\n    /// @return ext the address of ext\\n    /// @return fee the amount of fee\\n    /// @return uniswapV2Router uniswapV2 router address\\n    function getUniswapInfo()\\n        external\\n        view\\n        returns (\\n            address uniswapRouter,\\n            address npm,\\n            address ext,\\n            uint256 fee,\\n            address uniswapV2Router\\n        );\\n\\n    /// @dev Change the TON holded in contract have to WTON, or change WTON to TON.\\n    /// @param amount the amount to be changed\\n    /// @param toWTON if it's true, TON->WTON , else WTON->TON\\n    function swapTONtoWTON(uint256 amount, bool toWTON) external;\\n\\n    /// @dev  staking the staked TON in layer2 in tokamak\\n    /// @param _layer2 the layer2 address in tokamak\\n    /// @param stakeAmount the amount that stake to layer2\\n    function tokamakStaking(address _layer2, uint256 stakeAmount) external;\\n\\n    /// @dev  request unstaking the wtonAmount in layer2 in tokamak\\n    /// @param _layer2 the layer2 address in tokamak\\n    /// @param wtonAmount the amount requested to unstaking\\n    function tokamakRequestUnStaking(address _layer2, uint256 wtonAmount)\\n        external;\\n\\n    /// @dev  request unstaking the wtonAmount in layer2 in tokamak\\n    /// @param _layer2 the layer2 address in tokamak\\n    function tokamakRequestUnStakingAll(address _layer2) external;\\n\\n    /// @dev process unstaking in layer2 in tokamak\\n    /// @param _layer2 the layer2 address in tokamak\\n    function tokamakProcessUnStaking(address _layer2) external;\\n\\n    /// @dev exchange holded WTON to TOS using uniswap-v3\\n    /// @param _amountIn the input amount\\n    /// @param _amountOutMinimum the minimun output amount\\n    /// @param _deadline deadline\\n    /// @param _sqrtPriceLimitX96 sqrtPriceLimitX96\\n    /// @param _kind the function type, if 0, use exactInputSingle function, else if, use exactInput function\\n    function exchangeWTONtoTOS(\\n        uint256 _amountIn,\\n        uint256 _amountOutMinimum,\\n        uint256 _deadline,\\n        uint160 _sqrtPriceLimitX96,\\n        uint256 _kind\\n    ) external returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITON.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface ITON {\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approveAndCall(\\n        address spender,\\n        uint256 amount,\\n        bytes memory data\\n    ) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function onApprove(\\n        address owner,\\n        address spender,\\n        uint256 tonAmount,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function swapToTON(uint256 wtonAmount) external returns (bool);\\n\\n    function swapFromTON(uint256 tonAmount) external returns (bool);\\n\\n    function swapToTONAndTransfer(address to, uint256 wtonAmount)\\n        external\\n        returns (bool);\\n\\n    function swapFromTONAndTransfer(address to, uint256 tonAmount)\\n        external\\n        returns (bool);\\n\\n    function renounceTonMinter() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIIDepositManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IIIDepositManager {\\n    function globalWithdrawalDelay()\\n        external\\n        view\\n        returns (uint256 withdrawalDelay);\\n\\n    function accStaked(address layer2, address account)\\n        external\\n        view\\n        returns (uint256 wtonAmount);\\n\\n    function accStakedLayer2(address layer2)\\n        external\\n        view\\n        returns (uint256 wtonAmount);\\n\\n    function accStakedAccount(address account)\\n        external\\n        view\\n        returns (uint256 wtonAmount);\\n\\n    function pendingUnstaked(address layer2, address account)\\n        external\\n        view\\n        returns (uint256 wtonAmount);\\n\\n    function pendingUnstakedLayer2(address layer2)\\n        external\\n        view\\n        returns (uint256 wtonAmount);\\n\\n    function pendingUnstakedAccount(address account)\\n        external\\n        view\\n        returns (uint256 wtonAmount);\\n\\n    function accUnstaked(address layer2, address account)\\n        external\\n        view\\n        returns (uint256 wtonAmount);\\n\\n    function accUnstakedLayer2(address layer2)\\n        external\\n        view\\n        returns (uint256 wtonAmount);\\n\\n    function accUnstakedAccount(address account)\\n        external\\n        view\\n        returns (uint256 wtonAmount);\\n\\n    function withdrawalRequestIndex(address layer2, address account)\\n        external\\n        view\\n        returns (uint256 index);\\n\\n    // solhint-disable-next-line max-line-length\\n    function withdrawalRequest(\\n        address layer2,\\n        address account,\\n        uint256 index\\n    )\\n        external\\n        view\\n        returns (\\n            uint128 withdrawableBlockNumber,\\n            uint128 amount,\\n            bool processed\\n        );\\n\\n    function WITHDRAWAL_DELAY() external view returns (uint256);\\n\\n    function deposit(address layer2, uint256 amount) external returns (bool);\\n\\n    function requestWithdrawal(address layer2, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function processRequest(address layer2, bool receiveTON)\\n        external\\n        returns (bool);\\n\\n    function requestWithdrawalAll(address layer2) external returns (bool);\\n\\n    function processRequests(\\n        address layer2,\\n        uint256 n,\\n        bool receiveTON\\n    ) external returns (bool);\\n\\n    function numRequests(address layer2, address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function numPendingRequests(address layer2, address account)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IISeigManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IISeigManager {\\n    function stakeOf(address layer2, address account)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/common/AccessibleCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AccessRoleCommon.sol\\\";\\n\\ncontract AccessibleCommon is AccessRoleCommon, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"Accessible: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) external virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(ADMIN_ROLE, newAdmin);\\n        renounceRole(ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(ADMIN_ROLE, account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/stake/StakeTONStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\nimport \\\"./Stake1Storage.sol\\\";\\n\\n/// @title the storage of StakeTONStorage\\ncontract StakeTONStorage is Stake1Storage {\\n    /// @dev TON address\\n    address public ton;\\n\\n    /// @dev WTON address\\n    address public wton;\\n\\n    /// @dev SeigManager address\\n    address public seigManager;\\n\\n    /// @dev DepositManager address\\n    address public depositManager;\\n\\n    /// @dev swapProxy address\\n    address public swapProxy;\\n\\n    /// @dev the layer2 address in Tokamak\\n    address public tokamakLayer2;\\n\\n    /// @dev the accumulated TON amount staked into tokamak , in wei unit\\n    uint256 public toTokamak;\\n\\n    /// @dev the accumulated WTON amount unstaked from tokamak , in ray unit\\n    uint256 public fromTokamak;\\n\\n    /// @dev the accumulated WTON amount swapped using uniswap , in ray unit\\n    uint256 public toUniswapWTON;\\n\\n    /// @dev the TOS balance in this contract\\n    uint256 public swappedAmountTOS;\\n\\n    /// @dev the TON balance in this contract when withdraw at first\\n    uint256 public finalBalanceTON;\\n\\n    /// @dev the WTON balance in this contract when withdraw at first\\n    uint256 public finalBalanceWTON;\\n\\n    /// @dev defi status\\n    uint256 public defiStatus;\\n\\n    /// @dev the number of requesting unstaking to tokamak , when process unstaking, reset zero.\\n    uint256 public requestNum;\\n\\n    /// @dev the withdraw flag, when withdraw at first, set true\\n    bool public withdrawFlag;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/AccessRoleCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ncontract AccessRoleCommon {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER\\\");\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/stake/Stake1Storage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\nimport \\\"../libraries/LibTokenStake1.sol\\\";\\n\\n/// @title The base storage of stakeContract\\ncontract Stake1Storage {\\n    /// @dev reward token : TOS\\n    address public token;\\n\\n    /// @dev registry\\n    address public stakeRegistry;\\n\\n    /// @dev paytoken is the token that the user stakes. ( if paytoken is ether, paytoken is address(0) )\\n    address public paytoken;\\n\\n    /// @dev A vault that holds TOS rewards.\\n    address public vault;\\n\\n    /// @dev the start block for sale.\\n    uint256 public saleStartBlock;\\n\\n    /// @dev the staking start block, once staking starts, users can no longer apply for staking.\\n    uint256 public startBlock;\\n\\n    /// @dev the staking end block.\\n    uint256 public endBlock;\\n\\n    /// @dev the total amount claimed\\n    uint256 public rewardClaimedTotal;\\n\\n    /// @dev the total staked amount\\n    uint256 public totalStakedAmount;\\n\\n    /// @dev information staked by user\\n    mapping(address => LibTokenStake1.StakedAmount) public userStaked;\\n\\n    /// @dev total stakers\\n    uint256 public totalStakers;\\n\\n    uint256 internal _lock;\\n\\n    /// @dev flag for pause proxy\\n    bool public pauseProxy;\\n\\n    /// @dev extra address storage\\n    address public defiAddr;\\n\\n    ///@dev for migrate L2\\n    bool public migratedL2;\\n\\n    /// @dev user's staked information\\n    function getUserStaked(address user)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 claimedBlock,\\n            uint256 claimedAmount,\\n            uint256 releasedBlock,\\n            uint256 releasedAmount,\\n            uint256 releasedTOSAmount,\\n            bool released\\n        )\\n    {\\n        return (\\n            userStaked[user].amount,\\n            userStaked[user].claimedBlock,\\n            userStaked[user].claimedAmount,\\n            userStaked[user].releasedBlock,\\n            userStaked[user].releasedAmount,\\n            userStaked[user].releasedTOSAmount,\\n            userStaked[user].released\\n        );\\n    }\\n\\n    /// @dev Give the infomation of this stakeContracts\\n    /// @return paytoken, vault, [saleStartBlock, startBlock, endBlock], rewardClaimedTotal, totalStakedAmount, totalStakers\\n    function infos()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256[3] memory,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            paytoken,\\n            vault,\\n            [saleStartBlock, startBlock, endBlock],\\n            rewardClaimedTotal,\\n            totalStakedAmount,\\n            totalStakers\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimBlock\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"ExchangedWTONtoTOS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"SetRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"SetTokamakLayer2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"receiveTON\",\"type\":\"bool\"}],\"name\":\"TokamakProcessedUnStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokamakRequestedUnStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"}],\"name\":\"TokamakRequestedUnStakingAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"layer2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokamakStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tonAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tosAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"specificBlock\",\"type\":\"uint256\"}],\"name\":\"canRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layer2\",\"type\":\"address\"}],\"name\":\"canTokamakProcessUnStakingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layer2\",\"type\":\"address\"}],\"name\":\"canTokamakRequestUnStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"canUnStakingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layer2\",\"type\":\"address\"}],\"name\":\"canTokamakRequestUnStakingAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"can\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layer2\",\"type\":\"address\"}],\"name\":\"canTokamakRequestUnStakingAllBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkTokamak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defiAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defiStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"_sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"_kind\",\"type\":\"uint256\"}],\"name\":\"exchangeWTONtoTOS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalBalanceTON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalBalanceWTON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTokamak\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"npm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ext\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapRouterV2\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedTOSAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"infos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migratedL2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paytoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardClaimedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layer2\",\"type\":\"address\"}],\"name\":\"setTokamakLayer2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"toWTON\",\"type\":\"bool\"}],\"name\":\"swapTONtoWTON\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swappedAmountTOS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTokamak\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toUniswapWTON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokamakLayer2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layer2\",\"type\":\"address\"}],\"name\":\"tokamakProcessUnStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layer2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wtonAmount\",\"type\":\"uint256\"}],\"name\":\"tokamakRequestUnStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layer2\",\"type\":\"address\"}],\"name\":\"tokamakRequestUnStakingAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layer2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"tokamakStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedTOSAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"StakeTONUpgrade2","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}