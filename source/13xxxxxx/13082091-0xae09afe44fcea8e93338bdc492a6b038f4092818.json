{"status":"1","message":"OK","result":[{"SourceCode":"/// SurplusAuctionTrigger.sol\r\n\r\n// Copyright (C) 2021 Reflexer Labs, INC\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.7;\r\n\r\nabstract contract SAFEEngineLike {\r\n    function approveSAFEModification(address) virtual external;\r\n    function coinBalance(address) virtual public view returns (uint256);\r\n    function transferInternalCoins(address,address,uint256) virtual external;\r\n}\r\nabstract contract SurplusAuctionHouseLike {\r\n    function startAuction(uint256, uint256) virtual public returns (uint256);\r\n    function contractEnabled() virtual public returns (uint256);\r\n}\r\nabstract contract AccountingEngineLike {\r\n    function contractEnabled() virtual public returns (uint256);\r\n}\r\n\r\ncontract SurplusAuctionTrigger {\r\n    // --- Auth ---\r\n    mapping (address => uint256) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"SurplusAuctionTrigger/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Variables ---\r\n    // Amount of surplus stability fees sold in one surplus auction\r\n    uint256                    public surplusAuctionAmountToSell; // [rad]\r\n\r\n    // SAFE database\r\n    SAFEEngineLike             public safeEngine;\r\n    // Contract that handles auctions for surplus stability fees\r\n    SurplusAuctionHouseLike    public surplusAuctionHouse;\r\n    // Accounting engine contract\r\n    AccountingEngineLike       public accountingEngine;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event AuctionSurplus(uint256 indexed id, uint256 coinBalance);\r\n    event TransferSurplus(address dst, uint256 surplusAmount);\r\n\r\n    constructor(\r\n      address safeEngine_,\r\n      address surplusAuctionHouse_,\r\n      address accountingEngine_,\r\n      uint256 surplusAuctionAmountToSell_\r\n    ) public {\r\n        require(safeEngine_ != address(0), \"SurplusAuctionTrigger/null-safe-engine\");\r\n        require(surplusAuctionHouse_ != address(0), \"SurplusAuctionTrigger/null-surplus-auction-house\");\r\n        require(accountingEngine_ != address(0), \"SurplusAuctionTrigger/null-accounting-engine\");\r\n\r\n        authorizedAccounts[msg.sender] = 1;\r\n\r\n        safeEngine                 = SAFEEngineLike(safeEngine_);\r\n        surplusAuctionHouse        = SurplusAuctionHouseLike(surplusAuctionHouse_);\r\n        accountingEngine           = AccountingEngineLike(accountingEngine_);\r\n        surplusAuctionAmountToSell = surplusAuctionAmountToSell_;\r\n\r\n        safeEngine.approveSAFEModification(surplusAuctionHouse_);\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n\r\n    /**\r\n     * @notice Start a new surplus auction\r\n    **/\r\n    function auctionSurplus() external returns (uint256 id) {\r\n        require(\r\n          safeEngine.coinBalance(address(this)) >= surplusAuctionAmountToSell, \"SurplusAuctionTrigger/insufficient-surplus\"\r\n        );\r\n        id = surplusAuctionHouse.startAuction(surplusAuctionAmountToSell, 0);\r\n        emit AuctionSurplus(id, safeEngine.coinBalance(address(this)));\r\n    }\r\n    /**\r\n    * @notice Transfer surplus out of this contract if you're an authed address\r\n    * @param dst Destination address\r\n    * @param surplusAmount Amount of surplus to transfer\r\n    **/\r\n    function transferSurplus(address dst, uint256 surplusAmount) external isAuthorized {\r\n        require(\r\n          either(accountingEngine.contractEnabled() == 0, surplusAuctionHouse.contractEnabled() == 0),\r\n          \"SurplusAuctionTrigger/cannot-transfer-surplus\"\r\n        );\r\n\r\n        surplusAuctionHouse.contractEnabled() == 0;\r\n        safeEngine.transferInternalCoins(address(this), dst, surplusAmount);\r\n        emit TransferSurplus(dst, surplusAmount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"surplusAuctionHouse_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountingEngine_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"surplusAuctionAmountToSell_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinBalance\",\"type\":\"uint256\"}],\"name\":\"AuctionSurplus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"surplusAmount\",\"type\":\"uint256\"}],\"name\":\"TransferSurplus\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountingEngine\",\"outputs\":[{\"internalType\":\"contract AccountingEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionSurplus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract SAFEEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplusAuctionAmountToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplusAuctionHouse\",\"outputs\":[{\"internalType\":\"contract SurplusAuctionHouseLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"surplusAmount\",\"type\":\"uint256\"}],\"name\":\"transferSurplus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SurplusAuctionTrigger","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cc88a9d330da1133df3a7bd823b95e52511a6962000000000000000000000000ae402576187cc68098f74e14253c9816346eb932000000000000000000000000cee6aa1ab47d0fb0f24f51a3072ec16e20f90fce00000000000000000000000000000000000000000000021e19e0c9bab2400000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a18dbcbc630f8f80f1bf75fab52c31bb87186ac65392501ff1524bdc346e1ce7"}]}