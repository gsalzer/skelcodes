{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface ITestCaller {\r\n    function setValue(uint256 _v) external;\r\n    function sender() external view returns(address);\r\n    function value() external view returns(uint256);\r\n}\r\n\r\ncontract Target {\r\n    address public sender;\r\n    uint256 public value;\r\n\r\n    function setValue(uint256 _v) public {\r\n        value = _v;\r\n        sender = msg.sender;\r\n    }\r\n}\r\n\r\ncontract Proxy {\r\n    address public target;\r\n\r\n    constructor(address _target) public {\r\n        target = _target;\r\n    }\r\n    \r\n    function setValue(uint256 _v) public {\r\n        ITestCaller(target).setValue(_v);\r\n    }\r\n    \r\n    function sender() public view returns(address) {\r\n        return ITestCaller(target).sender();\r\n    }\r\n    \r\n    function value() public view returns(uint256) {\r\n        return ITestCaller(target).value();\r\n    }\r\n}\r\n\r\ncontract Caller {\r\n    address public sender;\r\n    uint256 public value;\r\n    address public proxy;\r\n\r\n    constructor(address _proxy) public {\r\n        proxy = _proxy;\r\n    }\r\n\r\n    function setValue1(uint256 _v) external {\r\n        (bool success, ) =  proxy.call(abi.encodeWithSignature(\"setValue(uint256)\", _v));\r\n\r\n        require(success,\"!success\");\r\n    }\r\n    \r\n    function setValue2(uint256 _v) external {\r\n        (bool success, ) =  proxy.delegatecall(abi.encodeWithSignature(\"setValue(uint256)\", _v));\r\n\r\n        require(success,\"!success\");\r\n    }\r\n    \r\n    function getSender1() public view returns(address) {\r\n       return ITestCaller(proxy).sender();\r\n    }\r\n    \r\n    function getValue1() public view returns(uint256) {\r\n        return ITestCaller(proxy).value();\r\n    }\r\n    \r\n    function getSender2() public view returns(address) {\r\n        return sender;\r\n    }\r\n    \r\n    function getValue2() public view returns(uint256) {\r\n        return value;\r\n    }\r\n}\r\n\r\ncontract Factory {\r\n    address[] public callers;\r\n    address public proxy;\r\n    address public target;\r\n\r\n    constructor() public {\r\n        target = address(new Target());\r\n        proxy = address(new Proxy(target));\r\n    }\r\n\r\n    function createCaller() external returns (address) {\r\n        address caller = address(new Caller(proxy));\r\n\r\n        callers.push(caller);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"callers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Factory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://13ee0739b2b2c13ee8f23701640e50b24e9783b7727426661a121f60381a6e10"}]}