{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/dperk6/eth/swap-contract-final/contracts/Multiswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\ncontract Multiswap {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // WETH Address\\n    address private immutable WETH;\\n\\n    // Uniswap Router for swaps\\n    IUniswapV2Router02 private immutable uniswapRouter;\\n\\n    // Referral data\\n    mapping (address => bool) private referrers;\\n    mapping (address => uint256) private referralFees;\\n\\n    // Data struct\\n    struct ContractData {\\n        uint160 owner;\\n        uint16 swapFeeBase;\\n        uint16 swapFeeToken;\\n        uint16 referralFee;\\n        uint16 maxFee;\\n    }\\n    \\n    ContractData private data;\\n\\n    // Modifier for only owner functions\\n    modifier onlyOwner {\\n        require(msg.sender == address(data.owner), \\\"Not allowed\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor sets values for Uniswap, WETH, and fee data\\n     * \\n     * These values are the immutable state values for Uniswap and WETH.\\n     *\\n    */\\n    constructor() {\\n        uniswapRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n        \\n        data.owner = uint160(msg.sender);\\n        // add extra two digits to percent for accuracy (30 = 0.3)\\n        data.swapFeeBase = uint16(30); // 0.3%\\n        data.swapFeeToken = uint16(20); // 0.2% per token\\n        data.referralFee = uint16(4500); // 45% for referrals\\n        data.maxFee = uint16(150); // 1.5% max fee\\n\\n        // Add standard referrers\\n        referrers[address(this)] = true;\\n        referrers[address(0x1190074795DAD0E61b61270De48e108427f8f817)] = true;\\n    }\\n    \\n    /**\\n     * @dev Enables receiving ETH with no function call\\n    */\\n    receive() external payable {}\\n    fallback() external payable {}\\n\\n    /**\\n     * @dev Checks and returns expected output fom ETH swap.\\n    */\\n    function checkOutputsETH(\\n        address[] memory _tokens,\\n        uint256[] memory _percent,\\n        uint256 _total\\n    ) external view returns (address[] memory, uint256[] memory, uint256)\\n    {\\n        require(_tokens.length == _percent.length);\\n\\n        uint256 _totalPercent = 0;\\n        (uint256 valueToSend, uint256 feeAmount) = applyFeeETH(_total, _tokens.length);\\n\\n        uint256[] memory _outputAmount = new uint256[](_tokens.length);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _totalPercent += _percent[i];\\n            (_outputAmount[i],) = calcOutputEth(\\n                _tokens[i],\\n                valueToSend.mul(_percent[i]).div(100)\\n            );\\n        }\\n\\n        require(_totalPercent == 100);\\n\\n        return (_tokens, _outputAmount, feeAmount);\\n    }\\n\\n    /**\\n     * @dev Checks and returns expected output from token swap.\\n    */\\n    function checkOutputsToken(\\n        address[] memory _tokens,\\n        uint256[] memory _percent,\\n        address _base,\\n        uint256 _total\\n        ) external view returns (address[] memory, uint256[] memory)\\n    {\\n        require(_tokens.length == _percent.length);\\n        \\n        uint256 _totalPercent = 0;\\n        uint256[] memory _outputAmount = new uint256[](_tokens.length);\\n        address[] memory path = new address[](3);\\n        path[0] = _base;\\n        path[1] = WETH;\\n        \\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _totalPercent += _percent[i];\\n            path[2] = _tokens[i];\\n            uint256[] memory expected = uniswapRouter.getAmountsOut(_total.mul(_percent[i]).div(100), path);\\n            _outputAmount[i] = uint256(expected[1]);\\n        }\\n        \\n        require(_totalPercent == 100);\\n        \\n        return (_tokens, _outputAmount);\\n    }\\n    \\n    /**\\n     * @dev Checks and returns ETH value of token amount.\\n    */\\n    function checkTokenValueETH(address _token, uint256 _amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        address[] memory path = new address[](2);\\n        path[0] = _token;\\n        path[1] = WETH;\\n        uint256[] memory expected = uniswapRouter.getAmountsOut(_amount, path);\\n        return expected[1];\\n    }\\n    \\n    /**\\n     * @dev Checks and returns ETH value of portfolio.\\n    */\\n    function checkAllValue(address[] memory _tokens, uint256[] memory _amounts)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalValue;\\n        \\n        for (uint i = 0; i < _tokens.length; i++) {\\n            totalValue += checkTokenValueETH(_tokens[i], _amounts[i]);\\n        }\\n        \\n        return totalValue;\\n    }\\n    \\n    /**\\n     * @dev Internal function to calculate the output from one ETH swap.\\n    */\\n    function calcOutputEth(address _token, uint256 _value)\\n        internal\\n        view\\n        returns (uint256, address[] memory)\\n    {\\n        address[] memory path = new address[](2);\\n        path[0] = WETH;\\n        path[1] = _token;\\n        \\n        uint256[] memory expected = uniswapRouter.getAmountsOut(_value, path);\\n        \\n        return (expected[1], path);\\n    }\\n\\n    /**\\n     * @dev Internal function to calculate the output from one token swap.\\n    */\\n    function calcOutputToken(address[] memory _path, uint256 _value)\\n        internal\\n        view\\n        returns (uint256[] memory expected)\\n    {\\n        \\n        expected = uniswapRouter.getAmountsOut(_value, _path);\\n        return expected;\\n    }\\n\\n    /**\\n     * @dev Execute ETH swap for each token in portfolio.\\n    */\\n    function makeETHSwap(address[] memory _tokens, uint256[] memory _percent, address _referrer)\\n        external\\n        payable\\n        returns (uint256[] memory)\\n    {\\n        (uint256 valueToSend, uint256 feeAmount) = applyFeeETH(msg.value, _tokens.length);\\n        uint256 totalPercent;\\n        uint256[] memory outputs = new uint256[](_tokens.length);\\n        address[] memory path = new address[](2);\\n        path[0] = WETH;\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            totalPercent += _percent[i];\\n            require(totalPercent <= 100, 'Exceeded 100%');\\n\\n            path[1] = _tokens[i];\\n\\n            uint256 swapVal = valueToSend.mul(_percent[i]).div(100);\\n            uint256[] memory expected = uniswapRouter.getAmountsOut(swapVal, path);\\n            uint256[] memory out = uniswapRouter.swapExactETHForTokens{value: swapVal}(\\n                expected[1],\\n                path,\\n                msg.sender,\\n                block.timestamp + 1200\\n            );\\n            outputs[i] = out[1];\\n        }\\n\\n        require(totalPercent == 100, 'Percent not 100');\\n        \\n        if (_referrer != address(this)) {\\n            uint256 referralFee = takeReferralFee(feeAmount, _referrer);\\n            (bool sent, ) = _referrer.call{value: referralFee}(\\\"\\\");\\n            require(sent, 'Failed to send referral fee');\\n        }\\n        \\n        return outputs;\\n    }\\n\\n    /**\\n     * @dev Execute token swap for each token in portfolio.\\n    */\\n    function makeTokenSwap(\\n        address[] memory _tokens,\\n        uint256[] memory _percent,\\n        address _base,\\n        uint256 _total)\\n        external returns (uint256[] memory)\\n    {\\n        IERC20 token = IERC20(_base);\\n        uint256 totalPercent = 0;\\n        uint256[] memory outputs = new uint256[](_tokens.length);\\n\\n        token.safeTransferFrom(msg.sender, address(this), _total);\\n\\n        require(token.approve(address(uniswapRouter), _total), 'Uniswap approval failed');\\n        \\n        address[] memory path = new address[](3);\\n        path[0] = _base;\\n        path[1] = WETH;\\n        \\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            totalPercent += _percent[i];\\n\\n            require(totalPercent <= 100, 'Exceeded 100');\\n            \\n            path[2] = _tokens[i];            \\n            uint256 swapVal = _total.mul(_percent[i]).div(100);\\n            uint256[] memory expected = uniswapRouter.getAmountsOut(swapVal, path);\\n\\n            uint256[] memory out = uniswapRouter.swapExactTokensForTokens(\\n                expected[0],\\n                expected[1],\\n                path,\\n                msg.sender,\\n                block.timestamp + 1200\\n            );\\n            \\n            outputs[i] = out[1];\\n        }\\n\\n        require(totalPercent == 100, 'Percent not 100');\\n        \\n        return outputs;\\n    }\\n    \\n    /**\\n     * @dev Swap tokens for ETH\\n    */\\n    function makeTokenSwapForETH(\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        address _referrer\\n    ) external payable returns (uint256)\\n    {\\n        address[] memory path = new address[](2);\\n        path[1] = WETH;\\n        uint256 totalOutput;\\n        \\n        for (uint i = 0; i < _tokens.length; i++) {\\n            path[0] = _tokens[i];\\n            IERC20 token = IERC20(_tokens[i]);\\n            token.transferFrom(msg.sender, address(this), _amounts[i]);\\n            token.approve(address(uniswapRouter), _amounts[i]);\\n            uint256[] memory expected = uniswapRouter.getAmountsOut(_amounts[i], path);\\n            uint256[] memory swapOutput = uniswapRouter.swapExactTokensForETH(expected[0], expected[1], path, address(this), block.timestamp + 1200);\\n            totalOutput = totalOutput.add(swapOutput[1]);\\n        }\\n\\n        (uint256 valueToSend, uint256 feeAmount) = applyFeeETH(totalOutput, _tokens.length);\\n\\n        if (_referrer != address(this)) {\\n            uint256 referralFee = takeReferralFee(feeAmount, _referrer);\\n            (bool sent, ) = _referrer.call{value: referralFee}(\\\"\\\");\\n            require(sent, 'Failed to send referral fee');\\n        }\\n        \\n       (bool delivered, ) = msg.sender.call{value: valueToSend}(\\\"\\\");\\n       require(delivered, 'Failed to send swap output');\\n        \\n        return valueToSend;\\n    }\\n\\n    /**\\n     * @dev Apply fee to total value amount for ETH swap.\\n    */\\n    function applyFeeETH(uint256 _amount, uint256 _numberOfTokens)\\n        private\\n        view\\n        returns (uint256 valueToSend, uint256 feeAmount)\\n    {\\n        uint256 feePercent = _numberOfTokens.mul(data.swapFeeToken);\\n        feePercent -= data.swapFeeToken;\\n        feePercent += data.swapFeeBase;\\n\\n        feeAmount = _amount.mul(feePercent).div(10000);\\n        valueToSend = _amount.sub(feeAmount);\\n\\n        return (valueToSend, feeAmount);\\n    }\\n\\n    /**\\n     * @dev Take referral fee and distribute\\n    */\\n    function takeReferralFee(uint256 _fee, address _referrer) internal returns (uint256) {\\n        require(referrers[_referrer], 'Not signed up as referrer');\\n        uint256 referralFee = _fee.mul(data.referralFee).div(10000);\\n        referralFees[_referrer] = referralFees[_referrer].add(referralFee);\\n        \\n        return referralFee;\\n    }\\n\\n    /**\\n     * @dev Owner only function to update contract fees.\\n    */\\n    function updateFee(\\n        uint16 _newFeeBase,\\n        uint16 _newFeeToken,\\n        uint16 _newFeeReferral,\\n        uint16 _newMaxFee\\n    ) public onlyOwner returns (bool) {\\n        data.swapFeeBase = _newFeeBase;\\n        data.swapFeeToken = _newFeeToken;\\n        data.referralFee = _newFeeReferral;\\n        data.maxFee = _newMaxFee;\\n        \\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns current app fees.\\n    */\\n    function getCurrentFee()\\n        external\\n        view\\n        returns (\\n            uint16,\\n            uint16,\\n            uint16,\\n            uint16\\n        )\\n    {\\n        return (data.swapFeeBase, data.swapFeeToken, data.referralFee, data.maxFee);\\n    }\\n\\n    /**\\n     * @dev Owner only function to change contract owner.\\n    */\\n    function changeOwner(address newOwner) external onlyOwner returns (bool) {\\n        data.owner = uint160(newOwner);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Owner only function to change contract owner.\\n    */\\n    function addReferrer(address _referrer) external onlyOwner returns (bool) {\\n        referrers[_referrer] = true;\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Owner only function to change contract owner.\\n    */\\n    function removeReferrer(address _referrer) external onlyOwner returns (bool) {\\n        referrers[_referrer] = false;\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Return owner address\\n    */\\n    function getOwner() external view returns (address) {\\n        return address(data.owner);\\n    }\\n    \\n    /**\\n     * @dev Function to see referral balancees\\n    */\\n    function getReferralFees(address _referrer) external view returns (uint256) {\\n        return referralFees[_referrer];\\n    }\\n\\n    /**\\n     * @dev Owner only function to retreive ETH fees\\n    */\\n    function retrieveEthFees() external onlyOwner {\\n        (bool sent, ) = address(data.owner).call{value: address(this).balance}(\\\"\\\");\\n        require(sent, 'Transfer failed');\\n    }\\n\\n}\"\r\n    },\r\n    \"/Users/dperk6/eth/swap-contract-final/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"/Users/dperk6/eth/swap-contract-final/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"\r\n    },\r\n    \"/Users/dperk6/eth/swap-contract-final/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"\r\n    },\r\n    \"/Users/dperk6/eth/swap-contract-final/contracts/libraries/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"/Users/dperk6/eth/swap-contract-final/contracts/libraries/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"/Users/dperk6/eth/swap-contract-final/contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SafeMath {\\n    /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    *\\n    * - Addition cannot overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    *\\n    * - Subtraction cannot overflow.\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    *\\n    * - Subtraction cannot overflow.\\n    */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    *\\n    * - Multiplication cannot overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    *\\n    * - The divisor cannot be zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    *\\n    * - The divisor cannot be zero.\\n    */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    *\\n    * - The divisor cannot be zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts with custom message when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    *\\n    * - The divisor cannot be zero.\\n    */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"addReferrer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"checkAllValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percent\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"checkOutputsETH\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percent\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"checkOutputsToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkTokenValueETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"getReferralFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percent\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"makeETHSwap\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percent\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"makeTokenSwap\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"makeTokenSwapForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"removeReferrer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveEthFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newFeeBase\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_newFeeToken\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_newFeeReferral\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_newMaxFee\",\"type\":\"uint16\"}],\"name\":\"updateFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Multiswap","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}