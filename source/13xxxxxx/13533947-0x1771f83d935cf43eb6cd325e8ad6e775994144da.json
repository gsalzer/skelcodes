{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n \r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address ) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n    \r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(block.timestamp > _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract MEWTWO is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n\r\n    mapping (address => bool) public _isExcludedBal; // list for Max Bal limits\r\n\r\n    mapping (address => bool) public _isBlacklisted; \r\n\r\n   \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 1000000000 * 10**6 * 10**18; \r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name = \"MewTwo Infused Shiba\";\r\n    string private _symbol = \"MEWTWO\";\r\n    uint8 private _decimals = 18;\r\n    \r\n    uint256 public _burnFee = 3;\r\n    uint256 private _previousBurnFee = _burnFee;\r\n    \r\n    uint256 public _taxFee = 1;\r\n    uint256 private _previousTaxFee = _taxFee;\r\n    \r\n    uint256 private _liquidityFee = 10;\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\r\n    \r\n    uint256 public _buyFees = 9;\r\n    uint256 public _sellFees = 15;\r\n\r\n    address public marketing = 0xbC05ea2B065d444Ca15A1cb2D506D7195952BCAB;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    \r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    \r\n    bool private cooldownEnabled = false;\r\n    uint private coolDownGap = 7200;\r\n\r\n    mapping (address => uint) private cooldown;\r\n\r\n    uint256 public _maxBalAmount = _tTotal.mul(8).div(1000);\r\n    uint256 public numTokensSellToAddToLiquidity = 1 * 10**18;\r\n    \r\n    bool public _taxEnabled = true;\r\n\r\n    event SetTaxEnable(bool enabled);\r\n    event SetSellFeePercent(uint256 sellFee);\r\n    event SetBuyFeePercent(uint256 buyFee);\r\n    event SetTaxFeePercent(uint256 taxFee);\r\n    event SetMarketingPercent(uint256 marketingFee);\r\n    event SetDevPercent(uint256 devFee);\r\n    event SetCommunityPercent(uint256 charityFee);\r\n    event SetMaxBalPercent(uint256 maxBalPercent);\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event TaxEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived\r\n    );\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n    constructor () {\r\n        _rOwned[msg.sender] = _rTotal;\r\n        \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n         // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n        \r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _isExcluded[uniswapV2Pair] = true; // excluded from rewards\r\n        _isExcluded[address(this)] = true; // excluded from rewards\r\n\r\n        _isExcludedBal[uniswapV2Pair] = true; \r\n        _isExcludedBal[owner()] = true;\r\n        _isExcludedBal[address(this)] = true; \r\n        _isExcludedBal[address(0)] = true; \r\n        \r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n        uint256 airDrop = _tTotal.mul(10).div(100).div(180);\r\n\r\n        _transfer(_msgSender(), 0x43Cd094e9540E00E2D92c648F254Cc18911B8e9D, airDrop);\r\n        _transfer(_msgSender(), 0x51407f3FeB8B62A6103b76728E5035F6C4537119, airDrop);\r\n        _transfer(_msgSender(), 0x15967114d89c4C7E2218be941A50863d3f804b28, airDrop);\r\n        _transfer(_msgSender(), 0x63694B77A249d4158579679EDC2281e9CbB2c1c0, airDrop);\r\n        _transfer(_msgSender(), 0x6A0f3803919CF7e0a9AbF21d63319d55640b18b3, airDrop);\r\n        _transfer(_msgSender(), 0x2924B904B76c37252BF3f5A81697C50A784297a8, airDrop);\r\n        _transfer(_msgSender(), 0xd26Bf6eee2364329aDC2598Fc7608D7697B8fAc8, airDrop);\r\n        _transfer(_msgSender(), 0x761c02C0937de8529B9D1854eAfD629cDa0355DC, airDrop);\r\n        _transfer(_msgSender(), 0x8FD65a18e500c49207c6FE7d88e7A933a1CA79CF, airDrop);\r\n        _transfer(_msgSender(), 0x0979F58ff5707A007CFb7696816c36Ff5bb1BdEC, airDrop);\r\n        _transfer(_msgSender(), 0xfcf6a3d7eb8c62a5256a020e48f153c6D5Dd6909, airDrop);\r\n        _transfer(_msgSender(), 0x2881C61655658C76D3f19a8Df187693eD8a057a6, airDrop);\r\n        _transfer(_msgSender(), 0xB9Cb00FeF9406211958BAc6073558290aed8C1c1, airDrop);\r\n        _transfer(_msgSender(), 0xc63aD79E457C8869E0F88bbD9275D0e99c7fD0E5, airDrop);\r\n        _transfer(_msgSender(), 0x7264e8daD75B3C7Ea33fAA80Fb421157Ff2E1eC2, airDrop);\r\n        _transfer(_msgSender(), 0xF818aCeC29861228630Df8361a611E0f88302958, airDrop);\r\n        _transfer(_msgSender(), 0x3d0dE7E4599f0F81776C4f46D8101CCFD5a852C6, airDrop);\r\n        _transfer(_msgSender(), 0x7C8e4498BD6019603eBdd1F933499395B346f06B, airDrop);\r\n        _transfer(_msgSender(), 0x38A174356f7eCD78c4b2E2c315A692be37F4133C, airDrop);\r\n        _transfer(_msgSender(), 0x51acBfc99Ef8b30FA0d363921E152fB9FC6153e3, airDrop);\r\n        _transfer(_msgSender(), 0xfbEc758547a266eA3BDdBC64eE6733842187cFda, airDrop);\r\n        _transfer(_msgSender(), 0x11E57e9fd63B649dD42b691337239c072D7365CC, airDrop);\r\n        _transfer(_msgSender(), 0xE6aE94f13E4a5DfD73eAf980c5D13A896cF02F14, airDrop);\r\n        _transfer(_msgSender(), 0xc0De7137d98c81f5c7dFec233142D79f848e8851, airDrop);\r\n        _transfer(_msgSender(), 0x48dBaa70ff8C1a831A0Ef285d56c6A20Dc41446f, airDrop);\r\n        _transfer(_msgSender(), 0x2763Bf81D5E6D115C84Ca47605D17988DA1DCA1b, airDrop);\r\n        _transfer(_msgSender(), 0xd120aB7E267ba6B13E695f5f4725d18687bD7726, airDrop);\r\n        _transfer(_msgSender(), 0x49b9189EE2001DFb2782B8F24b1e3418b66237F0, airDrop);\r\n        _transfer(_msgSender(), 0xBCe480F4Cc879983c21C3db9Ed9698EBc9452b8E, airDrop);\r\n        _transfer(_msgSender(), 0xA9A113f78f051Ef6580B473728Ea250f17B4F0Dc, airDrop);\r\n        _transfer(_msgSender(), 0x2673805396040B8584B0F53C1caDdE0f76CEab4c, airDrop);\r\n        _transfer(_msgSender(), 0x72Dd84c78D5a735C4A0a954C037a8b9aC176A362, airDrop);\r\n        _transfer(_msgSender(), 0x156bfAc22aFb58e3511311b7ca0B66b48E1f5015, airDrop);\r\n        _transfer(_msgSender(), 0x493291f3eD253C103854351afFc3AE89f275B473, airDrop);\r\n        _transfer(_msgSender(), 0x62032C9EdC927a3d8994716A6e2FC433bf74775a, airDrop);\r\n        _transfer(_msgSender(), 0x881f8619D07A6a1E8e334F7d7D5205Cc7470a081, airDrop);\r\n        _transfer(_msgSender(), 0x7dd3bb2717AD3cf3ca22c1D3Ee8EDdE25a743500, airDrop);\r\n        _transfer(_msgSender(), 0xaC4a5F6D4b9b6Acf2a117d2a08c6EAB7FF9ff5De, airDrop);\r\n        _transfer(_msgSender(), 0x402d535C8F91581FCF8a7D7a19Ea6928d930Dcf8, airDrop);\r\n        _transfer(_msgSender(), 0x8410a8De4f5331911775f5c9009F9ddDce1D998d, airDrop);\r\n        _transfer(_msgSender(), 0xAdaceFF1E46c01588a763FCF933F5858A076030b, airDrop);\r\n        _transfer(_msgSender(), 0x50bE53C8a3D60De7974985A9dBA8A2468E364894, airDrop);\r\n        _transfer(_msgSender(), 0x8477a02D272899F125C394E085b77A98e5b84199, airDrop);\r\n        _transfer(_msgSender(), 0xF9F2405cac359625D9c594b39d3a7655070401B3, airDrop);\r\n        _transfer(_msgSender(), 0xbF00562d81A748cb79AC5896aFa25f0c49b6DdBb, airDrop);\r\n        _transfer(_msgSender(), 0x44EBBedee90a267366Bf03F44B563945234A63E3, airDrop);\r\n        _transfer(_msgSender(), 0xdA583341C4187BE75851610013De3586934d10Ea, airDrop);\r\n        _transfer(_msgSender(), 0xc1564E1b80D92fF8CCE98446B167c077971163f8, airDrop);\r\n        _transfer(_msgSender(), 0x66Eb811Fd65677d7A320bF673db3DBE01EA688bB, airDrop);\r\n        _transfer(_msgSender(), 0xAa2314A5135D52237a6ac58eedE846dE66A32C4d, airDrop);\r\n        _transfer(_msgSender(), 0xf0b759e9C6e6Bd319B507FA8aa65092E92fe34F5, airDrop);\r\n        _transfer(_msgSender(), 0x35d9ABaEe76F9BCa4DAa8b573226CDD70cb3675A, airDrop);\r\n        _transfer(_msgSender(), 0x9a4a079548194E52b9F7c380d33669C53BaDc626, airDrop);\r\n        _transfer(_msgSender(), 0x85d0a5915d870cfbC9A3e9bB29c3df86aAF8f9Cd, airDrop);\r\n        _transfer(_msgSender(), 0x72d1d91898BdaF99C987E65B8C26a4A7523A7aa0, airDrop);\r\n        _transfer(_msgSender(), 0x99c65f3AA69327cFe9920CecC67Ee6CDA53C695f, airDrop);\r\n        _transfer(_msgSender(), 0x6D2527F836394B345125A739617B2bDe3F077669, airDrop);\r\n        _transfer(_msgSender(), 0x66E368142bbdFfb977236bBd9B0F8244632393ba, airDrop);\r\n        _transfer(_msgSender(), 0x2F774a70993989e989819DCC8B09100456E50437, airDrop);\r\n        _transfer(_msgSender(), 0xF419735375E0FdC43A22faF11d3471863908dCDB, airDrop);\r\n        _transfer(_msgSender(), 0x1A95f1C8E16BBe0D6dE83811140870C557C2F00b, airDrop);\r\n        _transfer(_msgSender(), 0xA28B49DD0dC0731A13e20197d9190699754340D4, airDrop);\r\n        _transfer(_msgSender(), 0xFEf2b2a2d4b2aD23Cf8561CaB1b4C99d87C6a755, airDrop);\r\n        _transfer(_msgSender(), 0xc13068EF06024bbf669b5394D30cC1C511d97499, airDrop);\r\n        _transfer(_msgSender(), 0x901cA790E771e82C78DB839Cc91Fc30Ceb7BA4ae, airDrop);\r\n        _transfer(_msgSender(), 0xA30F48CB60782d65bDfA958c72A20C8210e17e2C, airDrop);\r\n        _transfer(_msgSender(), 0x76036E679d1152aa02895c7DBaE7d0f099A5CfA1, airDrop);\r\n        _transfer(_msgSender(), 0x3FD8311383c90CAe13eb17441FFDC9f71a5ef72c, airDrop);\r\n        _transfer(_msgSender(), 0xe9A6c8536B0D845AC4DFB41DfFaD32BADD0bF299, airDrop);\r\n        _transfer(_msgSender(), 0x74731C8b92084a2C267C5F23ECdFc931198954eb, airDrop);\r\n        _transfer(_msgSender(), 0xf83FC5E2Aa844a5e8185836746391cf71C42dD8c, airDrop);\r\n        _transfer(_msgSender(), 0x3A56b3b3f778aaA38beBd26d584A900BAbCCadB4, airDrop);\r\n        _transfer(_msgSender(), 0x60aA466Be00Acc37DC5e3b89ff299331907Df045, airDrop);\r\n        _transfer(_msgSender(), 0x3ade785Cd90C377391b3889cE89B36bdaEfa75ea, airDrop);\r\n        _transfer(_msgSender(), 0xf66dcF7Ffef9fd5bDECB70e49Cd49f035AAF7975, airDrop);\r\n        _transfer(_msgSender(), 0xda14ffDa9bb3dee1f7F1ece538Bd5ba595AAcc74, airDrop);\r\n        _transfer(_msgSender(), 0x03129C8b3F7B95f8798C2714634E9130bF229AF1, airDrop);\r\n        _transfer(_msgSender(), 0xBEF5575e861c065c2FdA8E61287EDa9040E357D6, airDrop);\r\n        _transfer(_msgSender(), 0xc4b064ddD5Ac6FAA1928C05fede985c3A327ff85, airDrop);\r\n        _transfer(_msgSender(), 0xfaE8D64aee7fa2fB049f904456B71C432A194802, airDrop);\r\n        _transfer(_msgSender(), 0x505f6e82D94111aDe2B9620660112464c6A02AC7, airDrop);\r\n        _transfer(_msgSender(), 0x55d07da7c3f992503642989abF006512182e2996, airDrop);\r\n        _transfer(_msgSender(), 0xAE47cc4A816d6fCe33EcE2b9ca0dB68E10612292, airDrop);\r\n        _transfer(_msgSender(), 0x97C8e9299b00487ff7aB79E7a2c6384b539BbecE, airDrop);\r\n        _transfer(_msgSender(), 0xe7C2152a126d7b09CB2BF463Ba3A539F472Ac7c4, airDrop);\r\n        _transfer(_msgSender(), 0x96c195F6643A3D797cb90cb6BA0Ae2776D51b5F3, airDrop);\r\n        _transfer(_msgSender(), 0xed0c2fFAfbF2e337680CcB6255C44b19C8F586e5, airDrop);\r\n        _transfer(_msgSender(), 0x91B305F0890Fd0534B66D8d479da6529C35A3eeC, airDrop);\r\n        _transfer(_msgSender(), 0x338A8F0e59eF711b54d7faB5a23aDa9AbaE3B3bE, airDrop);\r\n        _transfer(_msgSender(), 0x90259AB39098cBcB7935EdfD68a4a0013e21485c, airDrop);\r\n        _transfer(_msgSender(), 0x06CFe496F65169f9B01f9b41C0d78A0bfBf9d198, airDrop);\r\n        _transfer(_msgSender(), 0x11824C49C06A77A6dfCAd30950533d95e7BA0f27, airDrop);\r\n        _transfer(_msgSender(), 0x4235B58ee75992B39D89843e9dEAADbd3B94087F, airDrop);\r\n        _transfer(_msgSender(), 0x09B0a1D11221C11aD53a4ca9dD9cAe2DA9DC7c74, airDrop);\r\n        _transfer(_msgSender(), 0xdC73f7f760DCbbfC7371ddFDC0745ac53559f939, airDrop);\r\n        _transfer(_msgSender(), 0xA7aF38dc5BD1Ea42347659FD84154b0064086aA6, airDrop);\r\n        _transfer(_msgSender(), 0x18B5b77Fe9660b79f0283b1Fc98097d97F9CB4A7, airDrop);\r\n        _transfer(_msgSender(), 0x21E95dC10159da24e35198cD74CA37E9085a5050, airDrop);\r\n        _transfer(_msgSender(), 0xA5A5D38366C213b1c8caeA7107321937B412C700, airDrop);\r\n        _transfer(_msgSender(), 0x6f02460403FDd7B063097985D7F100d70aA0406A, airDrop);\r\n        _transfer(_msgSender(), 0x881350D021053086Cb011D4A7BBBeEdE427eb79F, airDrop);\r\n        _transfer(_msgSender(), 0xAfd712E0dA07c6EC6617d5f9FAD474cFD8dDdDad, airDrop);\r\n        _transfer(_msgSender(), 0x6d95880d54c5009f3cA284751c4F2edea9AB6E59, airDrop);\r\n        _transfer(_msgSender(), 0xec72093219F97f24ae43659c07e23A3c6a7Adbba, airDrop);\r\n        _transfer(_msgSender(), 0x1728E5dB1a1548811113E6534ccC2ef8A0a7dA5B, airDrop);\r\n        _transfer(_msgSender(), 0xcB1Ad3e6001eA2826fEB08D6E4DE5bDC989d2601, airDrop);\r\n        _transfer(_msgSender(), 0x8ee9986719Dd036cc1CE0207044b0aC4D72F7476, airDrop);\r\n        _transfer(_msgSender(), 0x25c7B79b0bBF971a01500e50e991fF9deb285Fe1, airDrop);\r\n        _transfer(_msgSender(), 0x2065ca2e5a745f6e627e92E21d3036ed7d2bbDC1, airDrop);\r\n        _transfer(_msgSender(), 0x1f2186A35D4Ec3152C573AfEd2754ADA0c391D55, airDrop);\r\n        _transfer(_msgSender(), 0x3Bf854222bF4cce618D9fcdF1b508e50605d3d29, airDrop);\r\n        _transfer(_msgSender(), 0x3E240d46527039B5d7ffbb2AcD988D73458E6b26, airDrop);\r\n        _transfer(_msgSender(), 0x303425052e462DD0F3044AEe17e1f5BE9c7de783, airDrop);\r\n        _transfer(_msgSender(), 0x74Bd54F2c52280bbB17a1eB4790130E246415930, airDrop);\r\n        _transfer(_msgSender(), 0x2B3D47743797E65911c7eFF362eef136Cb245150, airDrop);\r\n        _transfer(_msgSender(), 0x5136a9A5D077aE4247C7706b577F77153C32A01C, airDrop);\r\n        _transfer(_msgSender(), 0xd31Ef58E191692B1252D930ED3Db781707977B80, airDrop);\r\n        _transfer(_msgSender(), 0x90484Bb9bc05fD3B5FF1fe412A492676cd81790C, airDrop);\r\n        _transfer(_msgSender(), 0xEc91c0Ef336a065F7e8b47F34c5Fb76942b52De4, airDrop);\r\n        _transfer(_msgSender(), 0xc090E3b2946FB4724bc8C77f828e96734832aB36, airDrop);\r\n        _transfer(_msgSender(), 0x21Cd41c673141a5c13365E27599774418f15877B, airDrop);\r\n        _transfer(_msgSender(), 0x39786d96b9df5aC2fb9BF1688d42485406F08658, airDrop);\r\n        _transfer(_msgSender(), 0x064102D2884D3B89d412747784BcEb2e832B3df4, airDrop);\r\n        _transfer(_msgSender(), 0x8182B02505C201806f825bC65a4bc2eb37a8f7c5, airDrop);\r\n        _transfer(_msgSender(), 0x4eF45ea052eeAB1631DCa09d28946fE8e17633b5, airDrop);\r\n        _transfer(_msgSender(), 0x7a40076e5A461575bD7C81FabD85c19D60533071, airDrop);\r\n        _transfer(_msgSender(), 0x7f52A6739250e03ad7174DF033731f5C558699e8, airDrop);\r\n        _transfer(_msgSender(), 0x0069f94C6Ef196cf54b2f0746dE92D40a83D41A5, airDrop);\r\n        _transfer(_msgSender(), 0xa2586Cffb7DaD1dE64581cB054B23a0d27970146, airDrop);\r\n        _transfer(_msgSender(), 0x778C5b96E7C99afd5cf918d4d8c376a0211B217C, airDrop);\r\n        _transfer(_msgSender(), 0x14439dbe3eACf79d66d11D866A38ffF52fe67FaC, airDrop);\r\n        _transfer(_msgSender(), 0xD770F7a7926FAe6643fd8af823AACbEeb671dE06, airDrop);\r\n        _transfer(_msgSender(), 0xD9a183205f2C4456885aE1EAf8711A6fDFa5bd85, airDrop);\r\n        _transfer(_msgSender(), 0xBE7c592b587Ad886a0124042C2EA817013fEdC2C, airDrop);\r\n        _transfer(_msgSender(), 0x4b57f4354708C0e993898B7D3eC9AEAbEb8020Fa, airDrop);\r\n        _transfer(_msgSender(), 0x258d998A22d9A36b64CCA9cCfeEd1F94f68c5b1c, airDrop);\r\n        _transfer(_msgSender(), 0xea28F3eD44D5857561CC21E72DAD8C25c9Dc7233, airDrop);\r\n        _transfer(_msgSender(), 0x79e1213AD616d9e8935bdD825fd083B0302B952C, airDrop);\r\n        _transfer(_msgSender(), 0x91F1B076726A4753383029FdB081a03779B65f1e, airDrop);\r\n        _transfer(_msgSender(), 0xdDf6353D3341527033773a7BfACb78F4f1E26244, airDrop);\r\n        _transfer(_msgSender(), 0xd8901E5E74034000C7a3b55446B8CfF95A36A926, airDrop);\r\n        _transfer(_msgSender(), 0xC4cc59B7fFEE66af24DdAe7B9c7291315CA1B0EA, airDrop);\r\n        _transfer(_msgSender(), 0x1a24062D0b58B0c5e68260B46a214393fed04933, airDrop);\r\n        _transfer(_msgSender(), 0x485af5f2bE564E403e2FC97FED8cC8c4BBEcf1E9, airDrop);\r\n        _transfer(_msgSender(), 0xa3121e49Bd253Ecd698F9A2ddc71162A4C9615ac, airDrop);\r\n        _transfer(_msgSender(), 0x5b98B06e4570e66a6DB9976059b564Fe6c39cD49, airDrop);\r\n        _transfer(_msgSender(), 0xA4cE5470A3854A2840E970D51dE7810e65417B71, airDrop);\r\n        _transfer(_msgSender(), 0xe94471df7BC56e710AC34f25B15Bd6DC1572E3Bc, airDrop);\r\n        _transfer(_msgSender(), 0x86F74E95b546984B9a197BE4902a06Eef483d168, airDrop);\r\n        _transfer(_msgSender(), 0x7fF3556BFc5f099d15A28C7Df51afF202F1de4f8, airDrop);\r\n        _transfer(_msgSender(), 0xA25ac7d64DaD8c5311Fb8c99745380aFBe11e45A, airDrop);\r\n        _transfer(_msgSender(), 0x59aDc2E7A5B785A354A902fdA8ddC53737778490, airDrop);\r\n        _transfer(_msgSender(), 0x1A7e12ffB34a7C07C4020b2f9EB2Bf69193e41cC, airDrop);\r\n        _transfer(_msgSender(), 0x007DEF61181B1731E5532d1f08f0a5A27281AeA4, airDrop);\r\n        _transfer(_msgSender(), 0xe52543218e575D2f1EFb464eF6c9A9C9677bfD52, airDrop);\r\n        _transfer(_msgSender(), 0x9965026A6A2d37cE3ea327c9B5d15B92845bec1C, airDrop);\r\n        _transfer(_msgSender(), 0xDc5B954c63Ecf7A7Bd1bD7Ba84280C5491811aB5, airDrop);\r\n        _transfer(_msgSender(), 0x802ab638a70CcdD0cEbD5Dd1a6477ce859041a97, airDrop);\r\n        _transfer(_msgSender(), 0x424a6067f76073eE3cb69D0ACAB86909df441a93, airDrop);\r\n        _transfer(_msgSender(), 0x7F93fb09c4205F8c692C35B7FD376Cee3BF4b5C7, airDrop);\r\n        _transfer(_msgSender(), 0x875B24DaEc80eC04a5650403dcB91b2BDa32Bd52, airDrop);\r\n        _transfer(_msgSender(), 0x131102d2174860e269f8E6FF4AdC2cc0bC1d776E, airDrop);\r\n        _transfer(_msgSender(), 0x70da0c44a211da28ef2b95D42c0362D85C175c45, airDrop);\r\n        _transfer(_msgSender(), 0xd225B46Cfd4A571728b89F63D286292C6Ea886A4, airDrop);\r\n        _transfer(_msgSender(), 0xb1930E011593D4ce7528A69160d126D47098909B, airDrop);\r\n        _transfer(_msgSender(), 0xa7D692516B9024847a243440cc09D7d5D3561388, airDrop);\r\n        _transfer(_msgSender(), 0x3F8865e44c140BEdAcF0e1C2453B226830357698, airDrop);\r\n        _transfer(_msgSender(), 0x653325aFDb00DD741Fee25a694467eBA17E8e93D, airDrop);\r\n        _transfer(_msgSender(), 0xaC79B5E7C60A14106761ECa0114F4EEF2bCc4214, airDrop);\r\n        _transfer(_msgSender(), 0x55a01641156A81dA0aD2c6f52528A65e91c8D249, airDrop);\r\n        _transfer(_msgSender(), 0x25548Ba111d4F6cbA0498Ab77a6b40EACbeFab52, airDrop);\r\n        _transfer(_msgSender(), 0x50CDC49484391e27452d613605BcaBF35e7D4748, airDrop);\r\n        _transfer(_msgSender(), 0x5f5a6A495D5970491E096560899fD1C4A6233FA6, airDrop);\r\n        _transfer(_msgSender(), 0xB6B418238B5613ED56684a7dFC95E0Ae178BEa2D, airDrop);\r\n        _transfer(_msgSender(), 0xd831dF755eB72bE41a07da21eaA36021d59a6332, airDrop);\r\n        _transfer(_msgSender(), 0x3b70EB36E4bef207E7Ac4151fDA665A534dD3A11, airDrop);\r\n        _transfer(_msgSender(), 0x6e1596069691c84aA7eFD19C573F190eF84601C6, airDrop);\r\n        _transfer(_msgSender(), 0x2eA32F87107e50A168ea0834bc92501226E1279F, airDrop);\r\n        _transfer(_msgSender(), 0xEf89272147fa946461083a3F95056b4C06dE27e3, airDrop);\r\n        _transfer(_msgSender(), 0xe649249C0c07b55d367B929F6d46C578bB7c2710, airDrop);\r\n        \r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner() {\r\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromLimit(address account) public onlyOwner() {\r\n        require(!_isExcludedBal[account], \"Account is already excluded\");\r\n        _isExcludedBal[account] = true;\r\n    }\r\n\r\n    function includeInLimit(address account) external onlyOwner() {\r\n        require(_isExcludedBal[account], \"Account is already excluded\");\r\n        _isExcludedBal[account] = false;\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tBurn ) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \r\n        if(tLiquidity > 0 ) _takeLiquidity(sender, tLiquidity);\r\n        if(tBurn > 0) _burn(sender, tBurn);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n    \r\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {\r\n        _taxFee = taxFee;\r\n        emit SetTaxFeePercent(taxFee);\r\n    }\r\n    \r\n    function setSellFeePercent(uint256 sellFee) external onlyOwner() {\r\n        _sellFees = sellFee;\r\n        emit SetSellFeePercent(sellFee);\r\n    }\r\n\r\n    function setBuyFeePercent(uint256 buyFee) external onlyOwner() {\r\n        _buyFees = buyFee;\r\n        emit SetBuyFeePercent(buyFee);\r\n    }\r\n\r\n    function setMaxBalPercent(uint256 maxBalPercent) external onlyOwner() {\r\n        _maxBalAmount = _tTotal.mul(maxBalPercent).div(\r\n            10**2\r\n        );\r\n        emit SetMaxBalPercent(maxBalPercent);   \r\n    }\r\n\r\n    function setSwapAmount(uint256 amount) external onlyOwner() {\r\n        numTokensSellToAddToLiquidity = amount;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }    \r\n\r\n    function setTaxEnable (bool _enable) public onlyOwner {\r\n        _taxEnabled = _enable;\r\n        emit SetTaxEnable(_enable);\r\n    }\r\n\r\n    function addToBlackList (address[] calldata accounts ) public onlyOwner {\r\n        for (uint256 i =0; i < accounts.length; ++i ) {\r\n            _isBlacklisted[accounts[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeFromBlackList(address account) public onlyOwner {\r\n        _isBlacklisted[account] = false;\r\n    }\r\n\r\n    function setCooldownEnabled(bool onoff) external onlyOwner() {\r\n        cooldownEnabled = onoff;\r\n    }\r\n\r\n    function setCooldownGap(uint _seconds) external onlyOwner() {\r\n        coolDownGap = _seconds;\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns ( uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tBurn) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate(), tBurn);\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity, tBurn);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {\r\n        uint256 tBurn = calculateBurnFee(tAmount);\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        \r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity).sub(tBurn);\r\n        return (tTransferAmount, tFee, tLiquidity, tBurn);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate, uint256 tBurn) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rBurn = tBurn.mul(currentRate);\r\n        \r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity).sub(rBurn);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function _takeLiquidity(address sender, uint256 tLiquidity) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n        emit Transfer(sender, address(this), tLiquidity);\r\n        \r\n    }\r\n\r\n    function _burn(address sender, uint256 tBurn) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rLiquidity = tBurn.mul(currentRate);\r\n        _rOwned[address(0)] = _rOwned[address(0)].add(rLiquidity);\r\n        if(_isExcluded[address(0)])\r\n            _tOwned[address(0)] = _tOwned[address(0)].add(tBurn);\r\n        emit Transfer(sender, address(0), tBurn);\r\n\r\n    }\r\n    \r\n    \r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_taxFee).div(10**2);\r\n\r\n    }\r\n\r\n    function calculateBurnFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_burnFee).div(10**3);\r\n\r\n    }\r\n\r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_liquidityFee).div(\r\n            10**2\r\n        );\r\n    }\r\n    \r\n    function removeAllFee() private {\r\n        if(_taxFee == 0 && _liquidityFee == 0 ) return;\r\n    \r\n        _previousTaxFee = _taxFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n        \r\n        _taxFee = 0;\r\n        _liquidityFee = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n    }\r\n    \r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(!_isBlacklisted[from] && !_isBlacklisted[to], \"This address is blacklisted\");\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (to == uniswapV2Pair && cooldownEnabled && !_isExcludedBal[from]) {\r\n            require(cooldown[from] < block.timestamp, \"sell gap to avoid bots\");\r\n            cooldown[from] = block.timestamp.add(coolDownGap);\r\n        }\r\n        // if(from != owner() && to != owner())\r\n        //     require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is uniswap pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        \r\n        // if(contractTokenBalance >= _maxTxAmount)\r\n        // {\r\n        //     contractTokenBalance = _maxTxAmount;\r\n        // }\r\n        \r\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            from != uniswapV2Pair &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            // contractTokenBalance = numTokensSellToAddToLiquidity;\r\n            //add liquidity\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n        \r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = false;\r\n\r\n        if(from == uniswapV2Pair || to == uniswapV2Pair) {\r\n            takeFee = true;\r\n        }\r\n\r\n        if(!_taxEnabled || _isExcludedFromFee[from] || _isExcludedFromFee[to]){  //if any account belongs to _isExcludedFromFee account then remove the fee\r\n            takeFee = false;\r\n        }\r\n        if(from == uniswapV2Pair) {\r\n            _liquidityFee = _buyFees;\r\n        }\r\n\r\n        if (to == uniswapV2Pair) {\r\n            _liquidityFee = _sellFees;\r\n        }\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from,to,amount,takeFee);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {        \r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n\r\n        // swap tokens for ETH\r\n        swapTokensForEth(contractTokenBalance); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 Balance = address(this).balance;\r\n\r\n        (bool succ, ) = address(marketing).call{value: Balance}(\"\");\r\n        require(succ, \"marketing ETH not sent\");\r\n        emit SwapAndLiquify(contractTokenBalance, Balance);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\n        if(!takeFee)\r\n            removeAllFee();\r\n        \r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n\r\n        if(!_isExcludedBal[recipient] ) {\r\n            require(balanceOf(recipient)<= _maxBalAmount, \"Balance limit reached\");\r\n        }        \r\n        if(!takeFee)\r\n            restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tBurn ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        if(tBurn > 0) _burn(sender, tBurn);\r\n        if(tLiquidity > 0 ) _takeLiquidity(sender, tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tBurn ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \r\n        if(tBurn > 0) _burn(sender, tBurn);\r\n        if(tLiquidity > 0 ) _takeLiquidity(sender, tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tBurn ) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \r\n        if(tBurn > 0) _burn(sender, tBurn);\r\n        if(tLiquidity > 0 ) _takeLiquidity(sender, tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }   \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"}],\"name\":\"SetBuyFeePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"charityFee\",\"type\":\"uint256\"}],\"name\":\"SetCommunityPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"}],\"name\":\"SetDevPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"name\":\"SetMarketingPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBalPercent\",\"type\":\"uint256\"}],\"name\":\"SetMaxBalPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"}],\"name\":\"SetSellFeePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetTaxEnable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"SetTaxFeePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TaxEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedBal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxBalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addToBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setCooldownGap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBalPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxBalPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"}],\"name\":\"setSellFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setTaxEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MEWTWO","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://97d5482c43f0a4be92cd560438b52b5e63591b3ba0ce7c6f43882ef4647eb854"}]}