{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n// Part: AddressUpgradeable\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) =\r\n            target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Part: ICVXBribes\r\n\r\ninterface ICVXBribes {\r\n    function getReward(address _account, address _token) external;\r\n    function getRewards(address _account, address[] calldata _tokens) external;\r\n}\r\n\r\n// Part: IController\r\n\r\ninterface IController {\r\n    function withdraw(address, uint256) external;\r\n\r\n    function strategies(address) external view returns (address);\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function earn(address, uint256) external;\r\n\r\n    function want(address) external view returns (address);\r\n\r\n    function rewards() external view returns (address);\r\n\r\n    function vaults(address) external view returns (address);\r\n}\r\n\r\n// Part: ICvxLocker\r\n\r\ninterface ICvxLocker {\r\n    function notifyRewardAmount(address _rewardsToken, uint256 reward) external;\r\n    function maximumBoostPayment() external view returns (uint256);\r\n\r\n    function lock(\r\n        address _account,\r\n        uint256 _amount,\r\n        uint256 _spendRatio\r\n    ) external;\r\n\r\n    function getReward(address _account, bool _stake) external;\r\n\r\n    //BOOSTED balance of an account which only includes properly locked tokens as of the most recent eligible epoch\r\n    function balanceOf(address _user) external view returns (uint256 amount);\r\n\r\n    // total token balance of an account, including unlocked but not withdrawn tokens\r\n    function lockedBalanceOf(address _user)\r\n        external\r\n        view\r\n        returns (uint256 amount);\r\n\r\n    // Withdraw/relock all currently locked tokens where the unlock time has passed\r\n    function processExpiredLocks(\r\n        bool _relock,\r\n        uint256 _spendRatio,\r\n        address _withdrawTo\r\n    ) external;\r\n\r\n    // Withdraw/relock all currently locked tokens where the unlock time has passed\r\n    function processExpiredLocks(bool _relock) external;\r\n}\r\n\r\n// Part: IDelegateRegistry\r\n\r\n///@dev Snapshot Delegate registry so we can delegate voting to XYZ\r\ninterface IDelegateRegistry {\r\n    function setDelegate(bytes32 id, address delegate) external;\r\n\r\n    function delegation(address, bytes32) external returns (address);\r\n}\r\n\r\n// Part: IERC20Upgradeable\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// Part: ISettV4\r\n\r\ninterface ISettV4 {\r\n    function deposit(uint256 _amount) external;\r\n\r\n    function depositFor(address _recipient, uint256 _amount) external;\r\n\r\n\r\n    function withdraw(uint256 _amount) external;\r\n\r\n    function getPricePerFullShare() external view returns (uint256);\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\n// Part: IUniswapRouterV2\r\n\r\ninterface IUniswapRouterV2 {\r\n    function factory() external view returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\n// Part: IVotiumBribes\r\n\r\ninterface IVotiumBribes {\r\n    struct claimParam {\r\n        address token;\r\n        uint256 index;\r\n        uint256 amount;\r\n        bytes32[] merkleProof;\r\n    }\r\n\r\n    function claimMulti(address account, claimParam[] calldata claims) external;\r\n    function claim(address token, uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external;\r\n}\r\n\r\n// Part: Initializable\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(\r\n            _initializing || _isConstructor() || !_initialized,\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n}\r\n\r\n// Part: MathUpgradeable\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary MathUpgradeable {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n    }\r\n}\r\n\r\n// Part: SafeMathUpgradeable\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Part: ContextUpgradeable\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {}\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// Part: SafeERC20Upgradeable\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(\r\n        IERC20Upgradeable token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20Upgradeable token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).sub(\r\n                value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data)\r\n        private\r\n    {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata =\r\n            address(token).functionCall(\r\n                data,\r\n                \"SafeERC20: low-level call failed\"\r\n            );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// Part: SettAccessControl\r\n\r\n/*\r\n    Common base for permissioned roles throughout Sett ecosystem\r\n*/\r\ncontract SettAccessControl is Initializable {\r\n    address public governance;\r\n    address public strategist;\r\n    address public keeper;\r\n\r\n    // ===== MODIFIERS =====\r\n    function _onlyGovernance() internal view {\r\n        require(msg.sender == governance, \"onlyGovernance\");\r\n    }\r\n\r\n    function _onlyGovernanceOrStrategist() internal view {\r\n        require(\r\n            msg.sender == strategist || msg.sender == governance,\r\n            \"onlyGovernanceOrStrategist\"\r\n        );\r\n    }\r\n\r\n    function _onlyAuthorizedActors() internal view {\r\n        require(\r\n            msg.sender == keeper || msg.sender == governance,\r\n            \"onlyAuthorizedActors\"\r\n        );\r\n    }\r\n\r\n    // ===== PERMISSIONED ACTIONS =====\r\n\r\n    /// @notice Change strategist address\r\n    /// @notice Can only be changed by governance itself\r\n    function setStrategist(address _strategist) external {\r\n        _onlyGovernance();\r\n        strategist = _strategist;\r\n    }\r\n\r\n    /// @notice Change keeper address\r\n    /// @notice Can only be changed by governance itself\r\n    function setKeeper(address _keeper) external {\r\n        _onlyGovernance();\r\n        keeper = _keeper;\r\n    }\r\n\r\n    /// @notice Change governance address\r\n    /// @notice Can only be changed by governance itself\r\n    function setGovernance(address _governance) public {\r\n        _onlyGovernance();\r\n        governance = _governance;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// Part: PausableUpgradeable\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal initializer {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// Part: BaseStrategy\r\n\r\n/*\r\n    ===== Badger Base Strategy =====\r\n    Common base class for all Sett strategies\r\n\r\n    Changelog\r\n    V1.1\r\n    - Verify amount unrolled from strategy positions on withdraw() is within a threshold relative to the requested amount as a sanity check\r\n    - Add version number which is displayed with baseStrategyVersion(). If a strategy does not implement this function, it can be assumed to be 1.0\r\n\r\n    V1.2\r\n    - Remove idle want handling from base withdraw() function. This should be handled as the strategy sees fit in _withdrawSome()\r\n*/\r\nabstract contract BaseStrategy is PausableUpgradeable, SettAccessControl {\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n    using AddressUpgradeable for address;\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    event Withdraw(uint256 amount);\r\n    event WithdrawAll(uint256 balance);\r\n    event WithdrawOther(address token, uint256 amount);\r\n    event SetStrategist(address strategist);\r\n    event SetGovernance(address governance);\r\n    event SetController(address controller);\r\n    event SetWithdrawalFee(uint256 withdrawalFee);\r\n    event SetPerformanceFeeStrategist(uint256 performanceFeeStrategist);\r\n    event SetPerformanceFeeGovernance(uint256 performanceFeeGovernance);\r\n    event Harvest(uint256 harvested, uint256 indexed blockNumber);\r\n    event Tend(uint256 tended);\r\n\r\n    address public want; // Want: Curve.fi renBTC/wBTC (crvRenWBTC) LP token\r\n\r\n    uint256 public performanceFeeGovernance;\r\n    uint256 public performanceFeeStrategist;\r\n    uint256 public withdrawalFee;\r\n\r\n    uint256 public constant MAX_FEE = 10000;\r\n    address public constant uniswap =\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // Uniswap Dex\r\n\r\n    address public controller;\r\n    address public guardian;\r\n\r\n    uint256 public withdrawalMaxDeviationThreshold;\r\n\r\n    function __BaseStrategy_init(\r\n        address _governance,\r\n        address _strategist,\r\n        address _controller,\r\n        address _keeper,\r\n        address _guardian\r\n    ) public initializer whenNotPaused {\r\n        __Pausable_init();\r\n        governance = _governance;\r\n        strategist = _strategist;\r\n        keeper = _keeper;\r\n        controller = _controller;\r\n        guardian = _guardian;\r\n        withdrawalMaxDeviationThreshold = 50;\r\n    }\r\n\r\n    // ===== Modifiers =====\r\n\r\n    function _onlyController() internal view {\r\n        require(msg.sender == controller, \"onlyController\");\r\n    }\r\n\r\n    function _onlyAuthorizedActorsOrController() internal view {\r\n        require(\r\n            msg.sender == keeper ||\r\n                msg.sender == governance ||\r\n                msg.sender == controller,\r\n            \"onlyAuthorizedActorsOrController\"\r\n        );\r\n    }\r\n\r\n    function _onlyAuthorizedPausers() internal view {\r\n        require(\r\n            msg.sender == guardian || msg.sender == governance,\r\n            \"onlyPausers\"\r\n        );\r\n    }\r\n\r\n    /// ===== View Functions =====\r\n    function baseStrategyVersion() public view returns (string memory) {\r\n        return \"1.2\";\r\n    }\r\n\r\n    /// @notice Get the balance of want held idle in the Strategy\r\n    function balanceOfWant() public view returns (uint256) {\r\n        return IERC20Upgradeable(want).balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice Get the total balance of want realized in the strategy, whether idle or active in Strategy positions.\r\n    function balanceOf() public view virtual returns (uint256) {\r\n        return balanceOfWant().add(balanceOfPool());\r\n    }\r\n\r\n    function isTendable() public view virtual returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /// ===== Permissioned Actions: Governance =====\r\n\r\n    function setGuardian(address _guardian) external {\r\n        _onlyGovernance();\r\n        guardian = _guardian;\r\n    }\r\n\r\n    function setWithdrawalFee(uint256 _withdrawalFee) external {\r\n        _onlyGovernance();\r\n        require(\r\n            _withdrawalFee <= MAX_FEE,\r\n            \"base-strategy/excessive-withdrawal-fee\"\r\n        );\r\n        withdrawalFee = _withdrawalFee;\r\n    }\r\n\r\n    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist)\r\n        external\r\n    {\r\n        _onlyGovernance();\r\n        require(\r\n            _performanceFeeStrategist <= MAX_FEE,\r\n            \"base-strategy/excessive-strategist-performance-fee\"\r\n        );\r\n        performanceFeeStrategist = _performanceFeeStrategist;\r\n    }\r\n\r\n    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance)\r\n        external\r\n    {\r\n        _onlyGovernance();\r\n        require(\r\n            _performanceFeeGovernance <= MAX_FEE,\r\n            \"base-strategy/excessive-governance-performance-fee\"\r\n        );\r\n        performanceFeeGovernance = _performanceFeeGovernance;\r\n    }\r\n\r\n    function setController(address _controller) external {\r\n        _onlyGovernance();\r\n        controller = _controller;\r\n    }\r\n\r\n    function setWithdrawalMaxDeviationThreshold(uint256 _threshold) external {\r\n        _onlyGovernance();\r\n        require(\r\n            _threshold <= MAX_FEE,\r\n            \"base-strategy/excessive-max-deviation-threshold\"\r\n        );\r\n        withdrawalMaxDeviationThreshold = _threshold;\r\n    }\r\n\r\n    function deposit() public virtual whenNotPaused {\r\n        _onlyAuthorizedActorsOrController();\r\n        uint256 _want = IERC20Upgradeable(want).balanceOf(address(this));\r\n        if (_want > 0) {\r\n            _deposit(_want);\r\n        }\r\n        _postDeposit();\r\n    }\r\n\r\n    // ===== Permissioned Actions: Controller =====\r\n\r\n    /// @notice Controller-only function to Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdrawAll()\r\n        external\r\n        virtual\r\n        whenNotPaused\r\n        returns (uint256 balance)\r\n    {\r\n        _onlyController();\r\n\r\n        _withdrawAll();\r\n\r\n        _transferToVault(IERC20Upgradeable(want).balanceOf(address(this)));\r\n    }\r\n\r\n    /// @notice Withdraw partial funds from the strategy, unrolling from strategy positions as necessary\r\n    /// @notice Processes withdrawal fee if present\r\n    /// @dev If it fails to recover sufficient funds (defined by withdrawalMaxDeviationThreshold), the withdrawal should fail so that this unexpected behavior can be investigated\r\n    function withdraw(uint256 _amount) external virtual whenNotPaused {\r\n        _onlyController();\r\n\r\n        // Withdraw from strategy positions, typically taking from any idle want first.\r\n        _withdrawSome(_amount);\r\n        uint256 _postWithdraw =\r\n            IERC20Upgradeable(want).balanceOf(address(this));\r\n\r\n        // Sanity check: Ensure we were able to retrieve sufficent want from strategy positions\r\n        // If we end up with less than the amount requested, make sure it does not deviate beyond a maximum threshold\r\n        if (_postWithdraw < _amount) {\r\n            uint256 diff = _diff(_amount, _postWithdraw);\r\n\r\n            // Require that difference between expected and actual values is less than the deviation threshold percentage\r\n            require(\r\n                diff <=\r\n                    _amount.mul(withdrawalMaxDeviationThreshold).div(MAX_FEE),\r\n                \"base-strategy/withdraw-exceed-max-deviation-threshold\"\r\n            );\r\n        }\r\n\r\n        // Return the amount actually withdrawn if less than amount requested\r\n        uint256 _toWithdraw = MathUpgradeable.min(_postWithdraw, _amount);\r\n\r\n        // Process withdrawal fee\r\n        uint256 _fee = _processWithdrawalFee(_toWithdraw);\r\n\r\n        // Transfer remaining to Vault to handle withdrawal\r\n        _transferToVault(_toWithdraw.sub(_fee));\r\n    }\r\n\r\n    // NOTE: must exclude any tokens used in the yield\r\n    // Controller role - withdraw should return to Controller\r\n    function withdrawOther(address _asset)\r\n        external\r\n        virtual\r\n        whenNotPaused\r\n        returns (uint256 balance)\r\n    {\r\n        _onlyController();\r\n        _onlyNotProtectedTokens(_asset);\r\n\r\n        balance = IERC20Upgradeable(_asset).balanceOf(address(this));\r\n        IERC20Upgradeable(_asset).safeTransfer(controller, balance);\r\n    }\r\n\r\n    /// ===== Permissioned Actions: Authoized Contract Pausers =====\r\n\r\n    function pause() external {\r\n        _onlyAuthorizedPausers();\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external {\r\n        _onlyGovernance();\r\n        _unpause();\r\n    }\r\n\r\n    /// ===== Internal Helper Functions =====\r\n\r\n    /// @notice If withdrawal fee is active, take the appropriate amount from the given value and transfer to rewards recipient\r\n    /// @return The withdrawal fee that was taken\r\n    function _processWithdrawalFee(uint256 _amount) internal returns (uint256) {\r\n        if (withdrawalFee == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 fee = _amount.mul(withdrawalFee).div(MAX_FEE);\r\n        IERC20Upgradeable(want).safeTransfer(\r\n            IController(controller).rewards(),\r\n            fee\r\n        );\r\n        return fee;\r\n    }\r\n\r\n    /// @dev Helper function to process an arbitrary fee\r\n    /// @dev If the fee is active, transfers a given portion in basis points of the specified value to the recipient\r\n    /// @return The fee that was taken\r\n    function _processFee(\r\n        address token,\r\n        uint256 amount,\r\n        uint256 feeBps,\r\n        address recipient\r\n    ) internal returns (uint256) {\r\n        if (feeBps == 0) {\r\n            return 0;\r\n        }\r\n        uint256 fee = amount.mul(feeBps).div(MAX_FEE);\r\n        IERC20Upgradeable(token).safeTransfer(recipient, fee);\r\n        return fee;\r\n    }\r\n\r\n    /// @dev Reset approval and approve exact amount\r\n    function _safeApproveHelper(\r\n        address token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        IERC20Upgradeable(token).safeApprove(recipient, 0);\r\n        IERC20Upgradeable(token).safeApprove(recipient, amount);\r\n    }\r\n\r\n    function _transferToVault(uint256 _amount) internal {\r\n        address _vault = IController(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20Upgradeable(want).safeTransfer(_vault, _amount);\r\n    }\r\n\r\n    /// @notice Swap specified balance of given token on Uniswap with given path\r\n    function _swap(\r\n        address startToken,\r\n        uint256 balance,\r\n        address[] memory path\r\n    ) internal {\r\n        _safeApproveHelper(startToken, uniswap, balance);\r\n        IUniswapRouterV2(uniswap).swapExactTokensForTokens(\r\n            balance,\r\n            0,\r\n            path,\r\n            address(this),\r\n            now\r\n        );\r\n    }\r\n\r\n    function _swapEthIn(uint256 balance, address[] memory path) internal {\r\n        IUniswapRouterV2(uniswap).swapExactETHForTokens{value: balance}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            now\r\n        );\r\n    }\r\n\r\n    function _swapEthOut(\r\n        address startToken,\r\n        uint256 balance,\r\n        address[] memory path\r\n    ) internal {\r\n        _safeApproveHelper(startToken, uniswap, balance);\r\n        IUniswapRouterV2(uniswap).swapExactTokensForETH(\r\n            balance,\r\n            0,\r\n            path,\r\n            address(this),\r\n            now\r\n        );\r\n    }\r\n\r\n    /// @notice Add liquidity to uniswap for specified token pair, utilizing the maximum balance possible\r\n    function _add_max_liquidity_uniswap(address token0, address token1)\r\n        internal\r\n        virtual\r\n    {\r\n        uint256 _token0Balance =\r\n            IERC20Upgradeable(token0).balanceOf(address(this));\r\n        uint256 _token1Balance =\r\n            IERC20Upgradeable(token1).balanceOf(address(this));\r\n\r\n        _safeApproveHelper(token0, uniswap, _token0Balance);\r\n        _safeApproveHelper(token1, uniswap, _token1Balance);\r\n\r\n        IUniswapRouterV2(uniswap).addLiquidity(\r\n            token0,\r\n            token1,\r\n            _token0Balance,\r\n            _token1Balance,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /// @notice Utility function to diff two numbers, expects higher value in first position\r\n    function _diff(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(a >= b, \"diff/expected-higher-number-in-first-position\");\r\n        return a.sub(b);\r\n    }\r\n\r\n    // ===== Abstract Functions: To be implemented by specific Strategies =====\r\n\r\n    /// @dev Internal deposit logic to be implemented by Stratgies\r\n    function _deposit(uint256 _amount) internal virtual;\r\n\r\n    function _postDeposit() internal virtual {\r\n        //no-op by default\r\n    }\r\n\r\n    /// @notice Specify tokens used in yield process, should not be available to withdraw via withdrawOther()\r\n    function _onlyNotProtectedTokens(address _asset) internal virtual;\r\n\r\n    function getProtectedTokens()\r\n        external\r\n        view\r\n        virtual\r\n        returns (address[] memory);\r\n\r\n    /// @dev Internal logic for strategy migration. Should exit positions as efficiently as possible\r\n    function _withdrawAll() internal virtual;\r\n\r\n    /// @dev Internal logic for partial withdrawals. Should exit positions as efficiently as possible.\r\n    /// @dev The withdraw() function shell automatically uses idle want in the strategy before attempting to withdraw more using this\r\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\r\n\r\n    /// @dev Realize returns from positions\r\n    /// @dev Returns can be reinvested into positions, or distributed in another fashion\r\n    /// @dev Performance fees should also be implemented in this function\r\n    /// @dev Override function stub is removed as each strategy can have it's own return signature for STATICCALL\r\n    // function harvest() external virtual;\r\n\r\n    /// @dev User-friendly name for this strategy for purposes of convenient reading\r\n    function getName() external pure virtual returns (string memory);\r\n\r\n    /// @dev Balance of want currently held in strategy positions\r\n    function balanceOfPool() public view virtual returns (uint256);\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: MyStrategy.sol\r\n\r\n/**\r\n * CHANGELOG\r\n * V1.0 Initial Release, can lock\r\n * V1.1 Update to handle rewards which are sent to a multisig\r\n * V1.2 Update to emit badger, all other rewards are sent to multisig\r\n */\r\ncontract MyStrategy is BaseStrategy {\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n    using AddressUpgradeable for address;\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    uint256 public constant MAX_BPS = 10_000;\r\n\r\n    // address public want // Inherited from BaseStrategy, the token the strategy wants, swaps into and tries to grow\r\n    address public lpComponent; // Token we provide liquidity with\r\n    address public reward; // Token we farm and swap to want / lpComponent\r\n\r\n    address public constant BADGER_TREE = 0x660802Fc641b154aBA66a62137e71f331B6d787A;\r\n\r\n    IDelegateRegistry public constant SNAPSHOT =\r\n        IDelegateRegistry(0x469788fE6E9E9681C6ebF3bF78e7Fd26Fc015446);\r\n\r\n    // The initial DELEGATE for the strategy // NOTE we can change it by using manualSetDelegate below\r\n    address public constant DELEGATE =\r\n        0x14F83fF95D4Ec5E8812DDf42DA1232b0ba1015e6;\r\n\r\n    bytes32 public constant DELEGATED_SPACE =\r\n        0x6376782e65746800000000000000000000000000000000000000000000000000;\r\n    \r\n    ISettV4 public constant CVXCRV_VAULT =\r\n        ISettV4(0x2B5455aac8d64C14786c3a29858E43b5945819C0);\r\n\r\n    // NOTE: At time of publishing, this contract is under audit\r\n    ICvxLocker public constant LOCKER = ICvxLocker(0xD18140b4B819b895A3dba5442F959fA44994AF50);\r\n\r\n    ICVXBribes public constant CVX_EXTRA_REWARDS = ICVXBribes(0x8Ed4bbf39E3080b35DA84a13A0D1A2FDcE1e0602);\r\n    IVotiumBribes public constant VOTIUM_BRIBE_CLAIMER = IVotiumBribes(0x378Ba9B73309bE80BF4C2c027aAD799766a7ED5A);\r\n    \r\n    // We hardcode, an upgrade is required to change this as it's a meaningful change\r\n    address public constant BRIBES_RECEIVER = 0x6F76C6A1059093E21D8B1C13C4e20D8335e2909F;\r\n    \r\n    // We emit badger through the tree to the vault holders\r\n    address public constant BADGER = 0x3472A5A71965499acd81997a54BBA8D852C6E53d;\r\n\r\n    bool public withdrawalSafetyCheck = false;\r\n    bool public harvestOnRebalance = false;\r\n    // If nothing is unlocked, processExpiredLocks will revert\r\n    bool public processLocksOnReinvest = false;\r\n    bool public processLocksOnRebalance = false;\r\n\r\n    // Used to signal to the Badger Tree that rewards where sent to it\r\n    event TreeDistribution(\r\n        address indexed token,\r\n        uint256 amount,\r\n        uint256 indexed blockNumber,\r\n        uint256 timestamp\r\n    );\r\n    event RewardsCollected(\r\n        address token,\r\n        uint256 amount\r\n    );\r\n    event PerformanceFeeGovernance(\r\n        address indexed destination,\r\n        address indexed token,\r\n        uint256 amount,\r\n        uint256 indexed blockNumber,\r\n        uint256 timestamp\r\n    );\r\n    event PerformanceFeeStrategist(\r\n        address indexed destination,\r\n        address indexed token,\r\n        uint256 amount,\r\n        uint256 indexed blockNumber,\r\n        uint256 timestamp\r\n    );\r\n\r\n    function initialize(\r\n        address _governance,\r\n        address _strategist,\r\n        address _controller,\r\n        address _keeper,\r\n        address _guardian,\r\n        address[3] memory _wantConfig,\r\n        uint256[3] memory _feeConfig\r\n    ) public initializer {\r\n        __BaseStrategy_init(\r\n            _governance,\r\n            _strategist,\r\n            _controller,\r\n            _keeper,\r\n            _guardian\r\n        );\r\n\r\n        /// @dev Add config here\r\n        want = _wantConfig[0];\r\n        lpComponent = _wantConfig[1];\r\n        reward = _wantConfig[2];\r\n\r\n        performanceFeeGovernance = _feeConfig[0];\r\n        performanceFeeStrategist = _feeConfig[1];\r\n        withdrawalFee = _feeConfig[2];\r\n\r\n        \r\n        IERC20Upgradeable(reward).safeApprove(address(CVXCRV_VAULT), type(uint256).max);\r\n\r\n        /// @dev do one off approvals here\r\n        // Permissions for Locker\r\n        IERC20Upgradeable(want).safeApprove(address(LOCKER), type(uint256).max);\r\n\r\n        // Delegate voting to DELEGATE\r\n        SNAPSHOT.setDelegate(DELEGATED_SPACE, DELEGATE);\r\n    }\r\n\r\n    /// ===== Extra Functions =====\r\n    /// @dev Change Delegation to another address\r\n    function manualSetDelegate(address delegate) external {\r\n        _onlyGovernance();\r\n        // Set delegate is enough as it will clear previous delegate automatically\r\n        SNAPSHOT.setDelegate(DELEGATED_SPACE, delegate);\r\n    }\r\n\r\n    ///@dev Should we check if the amount requested is more than what we can return on withdrawal?\r\n    function setWithdrawalSafetyCheck(bool newWithdrawalSafetyCheck) external {\r\n        _onlyGovernance();\r\n        withdrawalSafetyCheck = newWithdrawalSafetyCheck;\r\n    }\r\n\r\n    ///@dev Should we harvest before doing manual rebalancing\r\n    ///@notice you most likely want to skip harvest if everything is unlocked, or there's something wrong and you just want out\r\n    function setHarvestOnRebalance(bool newHarvestOnRebalance) external {\r\n        _onlyGovernance();\r\n        harvestOnRebalance = newHarvestOnRebalance;\r\n    }\r\n\r\n    ///@dev Should we processExpiredLocks during reinvest?\r\n    function setProcessLocksOnReinvest(bool newProcessLocksOnReinvest) external {\r\n        _onlyGovernance();\r\n        processLocksOnReinvest = newProcessLocksOnReinvest;\r\n    }\r\n\r\n    ///@dev Should we processExpiredLocks during manualRebalance?\r\n    function setProcessLocksOnRebalance(bool newProcessLocksOnRebalance)\r\n        external\r\n    {\r\n        _onlyGovernance();\r\n        processLocksOnRebalance = newProcessLocksOnRebalance;\r\n    }\r\n\r\n    /// *** Bribe Claiming ***\r\n    /// @dev given a token address, claim that as reward from CVX Extra Rewards\r\n    /// @notice funds are transfered to the hardcoded address BRIBES_RECEIVER\r\n    /// @notice for security reasons, you can't claim a bribe for a protected token\r\n    function claimBribeFromConvex (address token) external {\r\n        _onlyGovernanceOrStrategist();\r\n\r\n        // Revert if you try to claim a protected token, this is to avoid rugging\r\n        _onlyNotProtectedTokens(token);\r\n        // NOTE: If we end up getting bribes in form or protected tokens, we'll have to change\r\n\r\n        // Claim reward for token\r\n        CVX_EXTRA_REWARDS.getReward(address(this), token);\r\n\r\n        _handleRewardTransfer(token);\r\n    }\r\n\r\n    /// @dev given a list of token addresses, claim that as reward from CVX Extra Rewards\r\n    /// @notice funds are transfered to the hardcoded address BRIBES_RECEIVER\r\n    /// @notice for security reasons, you can't claim a bribe for a protected token\r\n    function claimBribesFromConvex(address[] calldata tokens) external {\r\n        _onlyGovernanceOrStrategist();\r\n\r\n        // Revert if you try to claim a protected token, this is to avoid rugging\r\n        uint256 length = tokens.length;\r\n        for(uint i = 0; i < length; i++){\r\n            _onlyNotProtectedTokens(tokens[i]);\r\n        }\r\n        // NOTE: If we end up getting bribes in form or protected tokens, we'll have to change\r\n\r\n        // Claim reward for tokens\r\n        CVX_EXTRA_REWARDS.getRewards(address(this), tokens);\r\n\r\n        // Send reward to Multisig\r\n        for(uint x = 0; x < length; x++){\r\n            _handleRewardTransfer(tokens[x]);\r\n        }\r\n    }\r\n\r\n    /// @dev given the votium data (available at: https://github.com/oo-00/Votium/tree/main/merkle)\r\n    /// @dev allows claiming of rewards, badger is sent to tree\r\n    /// @notice for security reasons, you can't claim a bribe for a protected token\r\n    function claimBribeFromVotium(\r\n        address token, \r\n        uint256 index, \r\n        address account, \r\n        uint256 amount, \r\n        bytes32[] calldata merkleProof\r\n    ) external {\r\n        _onlyGovernanceOrStrategist();\r\n\r\n        // Revert if you try to claim a protected token, this is to avoid rugging\r\n        _onlyNotProtectedTokens(token);\r\n        // NOTE: If we end up getting bribes in form or protected tokens, we'll have to change\r\n\r\n        VOTIUM_BRIBE_CLAIMER.claim(token, index, account, amount, merkleProof);\r\n\r\n        _handleRewardTransfer(token);\r\n    }\r\n    /// @dev given the votium data (available at: https://github.com/oo-00/Votium/tree/main/merkle)\r\n    /// @dev allows claiming of multiple rewards rewards, badger is sent to tree\r\n    /// @notice for security reasons, you can't claim a bribe for a protected token\r\n    function claimBribesFromVotium(\r\n        address account, \r\n        address[] calldata tokens, \r\n        uint256[] calldata indexes,\r\n        uint256[] calldata amounts, \r\n        bytes32[][] calldata merkleProofs\r\n    ) external {\r\n        _onlyGovernanceOrStrategist();\r\n\r\n        // Revert if you try to claim a protected token, this is to avoid rugging\r\n        uint256 length = tokens.length;\r\n        require(length == indexes.length && length == amounts.length && length == merkleProofs.length, \"Length Mismatch\");\r\n\r\n        for(uint i = 0; i < length; i++){\r\n            _onlyNotProtectedTokens(tokens[i]);\r\n        }\r\n        // NOTE: If we end up getting bribes in form or protected tokens, we'll have to change\r\n\r\n        IVotiumBribes.claimParam[] memory request = new IVotiumBribes.claimParam[](length);\r\n        for(uint x = 0; x < length; x++){\r\n            request[x] = IVotiumBribes.claimParam({\r\n                token: tokens[x],\r\n                index: indexes[x],\r\n                amount: amounts[x],\r\n                merkleProof: merkleProofs[x]\r\n            });\r\n        }\r\n\r\n        VOTIUM_BRIBE_CLAIMER.claimMulti(account, request);\r\n\r\n        for(uint x = 0; x < length; x++){\r\n            _handleRewardTransfer(tokens[x]);\r\n        }\r\n    }\r\n\r\n    /// *** Handling of rewards ***\r\n    function _handleRewardTransfer(address token) internal {\r\n        // NOTE: BADGER is emitted through the tree\r\n        if (token == BADGER){\r\n            _sendBadgerToTree();\r\n        } else {\r\n        // NOTE: All other tokens are sent to multisig\r\n            _sentTokenToBribesReceiver(token);\r\n        }\r\n    }\r\n\r\n    /// @dev Send funds to the bribes receiver\r\n    function _sentTokenToBribesReceiver(address token) internal {\r\n        // Send reward to Multisig\r\n        uint256 toSend = IERC20Upgradeable(token).balanceOf(address(this));\r\n        IERC20Upgradeable(token).safeTransfer(BRIBES_RECEIVER, toSend);\r\n        emit RewardsCollected(token, toSend);\r\n    }\r\n\r\n    /// @dev Send the BADGER token to the badgerTree\r\n    function _sendBadgerToTree() internal {\r\n        uint256 badgerSent = IERC20Upgradeable(BADGER).balanceOf(address(this));\r\n        IERC20Upgradeable(BADGER).safeTransfer(BADGER_TREE, badgerSent);\r\n        emit TreeDistribution(BADGER, badgerSent, block.number, block.timestamp);\r\n    }\r\n\r\n    /// ===== View Functions =====\r\n\r\n    function getBoostPayment() public view returns(uint256){\r\n        uint256 maximumBoostPayment = LOCKER.maximumBoostPayment();\r\n        require(maximumBoostPayment <= 1500, \"over max payment\"); //max 15%\r\n        return maximumBoostPayment;\r\n    }\r\n\r\n    /// @dev Specify the name of the strategy\r\n    function getName() external pure override returns (string memory) {\r\n        return \"veCVX Voting Strategy\";\r\n    }\r\n\r\n    /// @dev Specify the version of the Strategy, for upgrades\r\n    function version() external pure returns (string memory) {\r\n        return \"1.1\";\r\n    }\r\n\r\n    /// @dev Balance of want currently held in strategy positions\r\n    function balanceOfPool() public view override returns (uint256) {\r\n        // Return the balance in locker\r\n        return LOCKER.lockedBalanceOf(address(this));\r\n    }\r\n\r\n    /// @dev Returns true if this strategy requires tending\r\n    function isTendable() public view override returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    // @dev These are the tokens that cannot be moved except by the vault\r\n    function getProtectedTokens()\r\n        public\r\n        view\r\n        override\r\n        returns (address[] memory)\r\n    {\r\n        address[] memory protectedTokens = new address[](3);\r\n        protectedTokens[0] = want;\r\n        protectedTokens[1] = lpComponent;\r\n        protectedTokens[2] = reward;\r\n        return protectedTokens;\r\n    }\r\n\r\n    /// ===== Internal Core Implementations =====\r\n    /// @dev security check to avoid moving tokens that would cause a rugpull, edit based on strat\r\n    function _onlyNotProtectedTokens(address _asset) internal override {\r\n        address[] memory protectedTokens = getProtectedTokens();\r\n\r\n        for (uint256 x = 0; x < protectedTokens.length; x++) {\r\n            require(\r\n                address(protectedTokens[x]) != _asset,\r\n                \"Asset is protected\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @dev invest the amount of want\r\n    /// @notice When this function is called, the controller has already sent want to this\r\n    /// @notice Just get the current balance and then invest accordingly\r\n    function _deposit(uint256 _amount) internal override {\r\n        // Lock tokens for 16 weeks, send credit to strat, always use max boost cause why not?\r\n        LOCKER.lock(address(this), _amount, getBoostPayment());\r\n    }\r\n\r\n    /// @dev utility function to withdraw all CVX that we can from the lock\r\n    function prepareWithdrawAll() external {\r\n        manualProcessExpiredLocks();\r\n    }\r\n\r\n    /// @dev utility function to withdraw everything for migration\r\n    /// @dev NOTE: You cannot call this unless you have rebalanced to have only CVX left in the vault\r\n    function _withdrawAll() internal override {\r\n        //NOTE: This probably will always fail unless we have all tokens expired\r\n        require(\r\n            LOCKER.lockedBalanceOf(address(this)) == 0 &&\r\n                LOCKER.balanceOf(address(this)) == 0,\r\n            \"You have to wait for unlock or have to manually rebalance out of it\"\r\n        );\r\n\r\n        // Make sure to call prepareWithdrawAll before _withdrawAll\r\n    }\r\n\r\n    /// @dev withdraw the specified amount of want, liquidate from lpComponent to want, paying off any necessary debt for the conversion\r\n    function _withdrawSome(uint256 _amount)\r\n        internal\r\n        override\r\n        returns (uint256)\r\n    {\r\n        uint256 max = IERC20Upgradeable(want).balanceOf(address(this));\r\n\r\n        if (withdrawalSafetyCheck) {\r\n            require(\r\n                max >= _amount.mul(9_980).div(MAX_BPS),\r\n                \"Withdrawal Safety Check\"\r\n            ); // 20 BP of slippage\r\n        }\r\n\r\n        if (max < _amount) {\r\n            return max;\r\n        }\r\n\r\n        return _amount;\r\n    }\r\n\r\n    /// @dev Harvest from strategy mechanics, realizing increase in underlying position\r\n    function harvest() public whenNotPaused returns (uint256) {\r\n        _onlyAuthorizedActors();\r\n\r\n        uint256 _beforeReward = IERC20Upgradeable(reward).balanceOf(address(this));\r\n\r\n        // Get cvxCRV\r\n        LOCKER.getReward(address(this), false);\r\n\r\n        // Rewards Math\r\n        uint256 earnedReward =\r\n            IERC20Upgradeable(reward).balanceOf(address(this)).sub(_beforeReward);\r\n\r\n        uint256 cvxCrvToGovernance = earnedReward.mul(performanceFeeGovernance).div(MAX_FEE);\r\n        if(cvxCrvToGovernance > 0){\r\n            CVXCRV_VAULT.depositFor(IController(controller).rewards(), cvxCrvToGovernance);\r\n            emit PerformanceFeeGovernance(IController(controller).rewards(), address(CVXCRV_VAULT), cvxCrvToGovernance, block.number, block.timestamp);\r\n        }\r\n        uint256 cvxCrvToStrategist = earnedReward.mul(performanceFeeStrategist).div(MAX_FEE);\r\n        if(cvxCrvToStrategist > 0){\r\n            CVXCRV_VAULT.depositFor(strategist, cvxCrvToStrategist);\r\n            emit PerformanceFeeStrategist(strategist, address(CVXCRV_VAULT), cvxCrvToStrategist, block.number, block.timestamp);   \r\n        }\r\n\r\n        // Send rest of earned to tree //We send all rest to avoid dust and avoid protecting the token\r\n        uint256 cvxCrvToTree = IERC20Upgradeable(reward).balanceOf(address(this));\r\n        CVXCRV_VAULT.depositFor(BADGER_TREE, cvxCrvToTree);\r\n        emit TreeDistribution(address(CVXCRV_VAULT), cvxCrvToTree, block.number, block.timestamp);\r\n\r\n\r\n        /// @dev Harvest event that every strategy MUST have, see BaseStrategy\r\n        emit Harvest(earnedReward, block.number);\r\n\r\n        /// @dev Harvest must return the amount of want increased\r\n        return earnedReward;\r\n    }\r\n\r\n    /// @dev Rebalance, Compound or Pay off debt here\r\n    function tend() external whenNotPaused {\r\n        revert(\"no op\"); // NOTE: For now tend is replaced by manualRebalance\r\n    }\r\n\r\n    /// MANUAL FUNCTIONS ///\r\n\r\n    /// @dev manual function to reinvest all CVX that was locked\r\n    function reinvest() external whenNotPaused returns (uint256) {\r\n        _onlyGovernance();\r\n\r\n        if (processLocksOnReinvest) {\r\n            // Withdraw all we can\r\n            LOCKER.processExpiredLocks(false);\r\n        }\r\n\r\n        // Redeposit all into veCVX\r\n        uint256 toDeposit = IERC20Upgradeable(want).balanceOf(address(this));\r\n\r\n        // Redeposit into veCVX\r\n        _deposit(toDeposit);\r\n\r\n        return toDeposit;\r\n    }\r\n\r\n    /// @dev process all locks, to redeem\r\n    function manualProcessExpiredLocks() public whenNotPaused {\r\n        _onlyGovernance();\r\n        LOCKER.processExpiredLocks(false);\r\n        // Unlock veCVX that is expired and redeem CVX back to this strat\r\n    }\r\n\r\n    /// @dev Send all available CVX to the Vault\r\n    /// @notice you can do this so you can earn again (re-lock), or just to add to the redemption pool\r\n    function manualSendCVXToVault() external whenNotPaused {\r\n        _onlyGovernance();\r\n        uint256 cvxAmount = IERC20Upgradeable(want).balanceOf(address(this));\r\n        _transferToVault(cvxAmount);\r\n    }\r\n\r\n    /// @dev use the currently available CVX to lock\r\n    /// @notice toLock = 0, lock nothing, deposit in CVX as much as you can\r\n    /// @notice toLock = 10_000, lock everything (CVX) you have\r\n    function manualRebalance(uint256 toLock) external whenNotPaused {\r\n        _onlyGovernance();\r\n        require(toLock <= MAX_BPS, \"Max is 100%\");\r\n\r\n        if (processLocksOnRebalance) {\r\n            // manualRebalance will revert if you have no expired locks\r\n            LOCKER.processExpiredLocks(false);\r\n        }\r\n\r\n        if (harvestOnRebalance) {\r\n            harvest();\r\n        }\r\n\r\n        // Token that is highly liquid\r\n        uint256 balanceOfWant =\r\n            IERC20Upgradeable(want).balanceOf(address(this));\r\n        // Locked CVX in the locker\r\n        uint256 balanceInLock = LOCKER.balanceOf(address(this));\r\n        uint256 totalCVXBalance =\r\n            balanceOfWant.add(balanceInLock);\r\n\r\n        // Amount we want to have in lock\r\n        uint256 newLockAmount = totalCVXBalance.mul(toLock).div(MAX_BPS);\r\n\r\n        // We can't unlock enough, no-op\r\n        if (newLockAmount <= balanceInLock) {\r\n            return;\r\n        }\r\n\r\n        // If we're continuing, then we are going to lock something\r\n        uint256 cvxToLock = newLockAmount.sub(balanceInLock);\r\n\r\n        // We only lock up to the available CVX\r\n        uint256 maxCVX = IERC20Upgradeable(want).balanceOf(address(this));\r\n        if (cvxToLock > maxCVX) {\r\n            // Just lock what we can\r\n            LOCKER.lock(address(this), maxCVX, getBoostPayment());\r\n        } else {\r\n            // Lock proper\r\n            LOCKER.lock(address(this), cvxToLock, getBoostPayment());\r\n        }\r\n\r\n        // If anything left, send to vault\r\n        uint256 cvxLeft = IERC20Upgradeable(want).balanceOf(address(this));\r\n        if(cvxLeft > 0){\r\n            _transferToVault(cvxLeft);\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvested\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PerformanceFeeGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PerformanceFeeStrategist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"SetGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFeeGovernance\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFeeGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFeeStrategist\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFeeStrategist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"}],\"name\":\"SetStrategist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tended\",\"type\":\"uint256\"}],\"name\":\"Tend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TreeDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WithdrawAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawOther\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BADGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BADGER_TREE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BRIBES_RECEIVER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVXCRV_VAULT\",\"outputs\":[{\"internalType\":\"contract ISettV4\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVX_EXTRA_REWARDS\",\"outputs\":[{\"internalType\":\"contract ICVXBribes\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATED_SPACE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCKER\",\"outputs\":[{\"internalType\":\"contract ICvxLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SNAPSHOT\",\"outputs\":[{\"internalType\":\"contract IDelegateRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTIUM_BRIBE_CLAIMER\",\"outputs\":[{\"internalType\":\"contract IVotiumBribes\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"__BaseStrategy_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStrategyVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimBribeFromConvex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimBribeFromVotium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"claimBribesFromConvex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"merkleProofs\",\"type\":\"bytes32[][]\"}],\"name\":\"claimBribesFromVotium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBoostPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtectedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestOnRebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"_wantConfig\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_feeConfig\",\"type\":\"uint256[3]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTendable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpComponent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualProcessExpiredLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toLock\",\"type\":\"uint256\"}],\"name\":\"manualRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSendCVXToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"manualSetDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeGovernance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeStrategist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prepareWithdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLocksOnRebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLocksOnReinvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newHarvestOnRebalance\",\"type\":\"bool\"}],\"name\":\"setHarvestOnRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFeeGovernance\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFeeStrategist\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newProcessLocksOnRebalance\",\"type\":\"bool\"}],\"name\":\"setProcessLocksOnRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newProcessLocksOnReinvest\",\"type\":\"bool\"}],\"name\":\"setProcessLocksOnReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalMaxDeviationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newWithdrawalSafetyCheck\",\"type\":\"bool\"}],\"name\":\"setWithdrawalSafetyCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdrawOther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalMaxDeviationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalSafetyCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MyStrategy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://06e5948ac9f8f53c7133023f22f34e97275a8d0632e16c41c86562da5aae1ecb"}]}