{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"GratuitySplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\u0027./IWolfPack.sol\\u0027;\\r\\nimport \\u0027./Ownable.sol\\u0027;\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\nimport \\\"./Strings.sol\\\";\\r\\n\\r\\ncontract GratuitySplitter is Ownable {\\r\\n\\r\\n    using Strings for uint256;\\r\\n\\r\\n    IWolfPack private WolfPackContract;\\r\\n    IERC20 private wrappedEth;\\r\\n    IERC20 private denToken;\\r\\n    \\r\\n    address private communityWallet;\\r\\n    uint256 private _totalReleased;\\r\\n    uint64 private pullThreshold;\\r\\n\\r\\n    mapping(address =\\u003e uint16) private minterToAmountMinted;\\r\\n    mapping(address =\\u003e uint256) private _released;\\r\\n\\r\\n    event GratuityReceived(address from, uint amount);\\r\\n    event GratuityReleased(address to, uint256 amount);\\r\\n\\r\\n    function setWolfPackContractAddress(address contractAddress) external onlyOwner {\\r\\n        WolfPackContract = IWolfPack(contractAddress);\\r\\n    }\\r\\n\\r\\n    function setWrappedEthContractAddress(address contractAddress) external onlyOwner {\\r\\n        wrappedEth = IERC20(contractAddress);\\r\\n    }\\r\\n\\r\\n    function setDenTokenContractAddress(address contractAddress) external onlyOwner {\\r\\n        denToken = IERC20(contractAddress);\\r\\n    }\\r\\n    \\r\\n    function setCommunityWallet(address _address) external onlyOwner {\\r\\n        communityWallet = _address;\\r\\n    }\\r\\n\\r\\n    function getCommunityWallet() external view returns(address) {\\r\\n        return communityWallet;\\r\\n    }\\r\\n\\r\\n    function setPullThreshold(uint64 _pullThreshold) external onlyOwner {\\r\\n        pullThreshold = _pullThreshold;\\r\\n    }\\r\\n\\r\\n    function getPullThreshold() external view returns(uint64) {\\r\\n        return (pullThreshold / 1000000000000000000);\\r\\n    }\\r\\n\\r\\n    function withdrawWETH(address _to) external onlyOwner {\\r\\n        wrappedEth.transfer(_to, wrappedEth.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function withdrawDEN(address _to) external onlyOwner {\\r\\n        denToken.transfer(_to, denToken.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    receive() external payable virtual {\\r\\n        emit GratuityReceived(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the total amount of Ether already released.\\r\\n     */\\r\\n    function totalReleased() public view returns (uint256) {\\r\\n        return _totalReleased;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of Ether already released to a member.\\r\\n     */\\r\\n    function released(address account) public view returns (uint256) {\\r\\n        return _released[account];\\r\\n    }\\r\\n\\r\\n    function pullGratuity(address payable account) public {\\r\\n        require(account == msg.sender, \\\"You can only withdraw to your own wallet!\\\");\\r\\n        require(\\r\\n            minterToAmountMinted[account] \\u003e 0 ||\\r\\n            WolfPackContract.balanceOf(account) \\u003e 0 ||\\r\\n            account == communityWallet,\\r\\n            \\\"Account not eligible for withdrawal!\\\"\\r\\n        );\\r\\n        uint gratuity = availableWithdrawalBalance(account);\\r\\n        require(gratuity \\u003e 0, \\\"Nothing available to withdraw!\\\");\\r\\n        require(\\r\\n            gratuity \\u003e= pullThreshold,\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"You Haven\\u0027t reached the required threshold yet! The threshold is: \\\",\\r\\n                    uint(pullThreshold / 1000000000000000000).toString()\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        \\r\\n\\r\\n        _released[account] += gratuity;\\r\\n        _totalReleased += gratuity;\\r\\n\\r\\n        bool success = account.send(gratuity);\\r\\n        require(success, \\\"Gratuity release didn\\u0027t go through\\\");\\r\\n        emit GratuityReleased(account, gratuity);\\r\\n    }\\r\\n\\r\\n    function availableWithdrawalBalance(address account) public view returns(uint) {\\r\\n\\r\\n        uint totalReceived = address(this).balance + _totalReleased;\\r\\n        uint gratuity;\\r\\n        uint amountMinted = minterToAmountMinted[account];\\r\\n        uint balance = _tokenBalance(account);\\r\\n\\r\\n        if (amountMinted \\u003e 0) {\\r\\n            gratuity += ((totalReceived * 3) * amountMinted) / 11900;\\r\\n        }\\r\\n        if (balance \\u003e 0) {\\r\\n            gratuity += ((totalReceived * 2) * balance) / 11900;\\r\\n        }\\r\\n        if (account == communityWallet) {\\r\\n            gratuity += (totalReceived * 2) / 7;\\r\\n        }\\r\\n        \\r\\n        gratuity -= _released[account];\\r\\n        return gratuity;\\r\\n    }\\r\\n\\r\\n    function _tokenBalance(address account) public view returns(uint) {\\r\\n        uint balance = WolfPackContract.balanceOf(account);\\r\\n        if (account == communityWallet) {\\r\\n            return (balance + (1701 - WolfPackContract.getSupply()));\\r\\n        } else {\\r\\n            return balance;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an array of the minters.\\r\\n     *      If they were airdropped it will set it to the team address.\\r\\n     *      To add a minter for a specific ID, call the WolfPack contract. \\r\\n     */\\r\\n    function mintersList() external view returns(address[] memory) {\\r\\n        address[] memory minters = new address[](1700);\\r\\n        for (uint256 i = 1; i \\u003c= 1700; i++) {\\r\\n            if (WolfPackContract.getTokenMinter(i) != address(0)) {\\r\\n                minters[i] = WolfPackContract.getTokenMinter(i);\\r\\n            } else {\\r\\n                minters[i] = communityWallet;\\r\\n            }\\r\\n        }\\r\\n        return minters;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the amount of tokens a minter has minted.\\r\\n     */\\r\\n    function amountPerMinter(address _minter) external view returns(uint16) {\\r\\n        uint16 counter;\\r\\n        if (_minter == communityWallet) {\\r\\n            for (uint256 i = 1; i \\u003c= 1700; i++) {\\r\\n                address tokenMinter = WolfPackContract.getTokenMinter(i);\\r\\n                if (tokenMinter == address(0) || tokenMinter == _minter) {\\r\\n                    counter += 1;\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            for (uint256 i = 1; i \\u003c= 1700; i++) {\\r\\n                if (WolfPackContract.getTokenMinter(i) == _minter) {\\r\\n                    counter += 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return counter;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get minterToAmountMinted mapping\\r\\n     * @notice this can be used to verify if the token amount per minter is set correctly.\\r\\n     */\\r\\n    function getMinterToAmountMinted(address minter) external view returns(uint16) {\\r\\n        return minterToAmountMinted[minter];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set minterToAmountMinted mapping\\r\\n     */\\r\\n    function setMinterToAmountMinted(address minter, uint16 amount) external onlyOwner {\\r\\n        minterToAmountMinted[minter] = amount;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"// https://eips.ethereum.org/EIPS/eip-20\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    /// @param _owner The address from which the balance will be retrieved\\r\\n    /// @return balance the balance\\r\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\r\\n\\r\\n    /// @notice send `_value` token to `_to` from `msg.sender`\\r\\n    /// @param _to The address of the recipient\\r\\n    /// @param _value The amount of token to be transferred\\r\\n    /// @return success Whether the transfer was successful or not\\r\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\r\\n\\r\\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\r\\n    /// @param _from The address of the sender\\r\\n    /// @param _to The address of the recipient\\r\\n    /// @param _value The amount of token to be transferred\\r\\n    /// @return success Whether the transfer was successful or not\\r\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\r\\n\\r\\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\\r\\n    /// @param _spender The address of the account able to transfer the tokens\\r\\n    /// @param _value The amount of wei to be approved for transfer\\r\\n    /// @return success Whether the approval was successful or not\\r\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\r\\n\\r\\n    /// @param _owner The address of the account owning tokens\\r\\n    /// @param _spender The address of the account able to transfer the tokens\\r\\n    /// @return remaining Amount of remaining tokens allowed to spent\\r\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\r\\n\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\r\\n}\"},\"IWolfPack.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IWolfPack {\\r\\n\\r\\n    function getTokenMinter(uint256 _tokenId) external view returns (address);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function getSupply() external view returns (uint256);\\r\\n    \\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// source: Openzeppelin\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp \\u003e\\u003e= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GratuityReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GratuityReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"amountPerMinter\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"availableWithdrawalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommunityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"getMinterToAmountMinted\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPullThreshold\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pullGratuity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCommunityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setDenTokenContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"setMinterToAmountMinted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_pullThreshold\",\"type\":\"uint64\"}],\"name\":\"setPullThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setWolfPackContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setWrappedEthContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawDEN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GratuitySplitter","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9b9c0fd4a4941b663c5893fa97b69b716c251aa2f891aec208db99de0e42a0a6"}]}