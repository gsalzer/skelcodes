{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/MachinieLevel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Owner.sol\\\";\\r\\ncontract MachinieLevel is Ownable {\\r\\n\\r\\n    uint8 [888] private level =  [\\r\\n                    2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 2, 1, 3, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1, 3, 2, 2,\\r\\n                    3, 2, 2, 1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1,\\r\\n                    1, 1, 1, 2, 1, 1, 2, 3, 1, 3, 1, 3, 1, 2, 2, 3, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1,\\r\\n                    2, 1, 3, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 3, 2, 3, 2, 2,\\r\\n                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 3, 2, 2, 2, 2,\\r\\n                    2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 4, 1, 2, 3, 1, 2, 3, 1, 3, 1, 2, 3, 2, 1, 2,\\r\\n                    2, 2, 1, 2, 2, 1, 2, 3, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 3, 3, 3,\\r\\n                    2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1,\\r\\n                    2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 1,\\r\\n                    3, 3, 2, 2, 2, 4, 1, 1, 3, 3, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2,\\r\\n                    1, 4, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 2, 3, 2, 1, 1, 1, 2, 3,\\r\\n                    1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1,\\r\\n                    2, 2, 2, 1, 1, 4, 1, 2, 1, 2, 1, 1, 4, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1,\\r\\n                    1, 3, 1, 3, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 3, 1, 2, 2, 4, 1, 1, 2, 1, 1, 1, 1,\\r\\n                    1, 1, 2, 3, 1, 1, 1, 2, 2, 2, 2, 2, 3, 1, 2, 1, 4, 2, 1, 1, 1, 1, 2, 2, 2, 2,\\r\\n                    3, 3, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1,\\r\\n                    2, 1, 4, 2, 2, 2, 1, 1, 3, 2, 2, 1, 2, 2, 1, 3, 1, 3, 1, 2, 2, 1, 1, 1, 1, 3,\\r\\n                    1, 2, 4, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 3, 2, 2, 1, 2, 1, 1, 1, 3, 1, 3,\\r\\n                    2, 2, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 4, 1, 1, 2, 1, 2, 1, 1, 1,\\r\\n                    1, 1, 3, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 3, 2, 1,\\r\\n                    1, 3, 2, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2,\\r\\n                    2, 1, 2, 1, 1, 1, 3, 2, 2, 2, 2, 3, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 2,\\r\\n                    3, 2, 3, 1, 1, 1, 1, 2, 1, 2, 3, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 4, 2, 1, 2,\\r\\n                    3, 2, 1, 1, 2, 1, 1, 2, 3, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 3, 4, 3, 2, 2,\\r\\n                    3, 1, 2, 2, 2, 2, 1, 2, 3, 2, 2, 1, 2, 2, 2, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 3,\\r\\n                    3, 2, 1, 2, 3, 2, 1, 3, 1, 3, 2, 2, 3, 1, 1, 2, 2, 1, 2, 3, 1, 3, 2, 2, 3, 1,\\r\\n                    1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1,\\r\\n                    2, 2, 2, 2, 2, 2, 2, 1, 3, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1,\\r\\n                    1, 3, 2, 2, 3, 1, 1, 1, 2, 1, 1, 1, 3, 1, 4, 1, 1, 3, 2, 1, 1, 2, 3, 1, 1, 2,\\r\\n                    1, 1, 2, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1,\\r\\n                    2, 1, 2, 4, 2, 1, 1, 1, 2, 1, 2, 4, 1, 3, 1, 4, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1,\\r\\n                    1, 2, 2, 2, 1, 1, 1, 1, 3, 2, 3, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1,\\r\\n                    1, 3, 1, 1, 1, 3, 1, 2, 1, 2, 2, 1, 1, 4, 1, 1, 2, 2, 1, 1, 2, 3, 2, 3, 1, 2,\\r\\n                    1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 3, 1, 1, 3, 2, 1, 4, 2, 1,\\r\\n                    2, 1, 3, 1];\\r\\n\\r\\n    constructor(){\\r\\n\\r\\n    }\\r\\n    function getLevel (uint256 tokenId_) external view returns(uint256) {\\r\\n        return level[tokenId_];\\r\\n    }  \\r\\n\\r\\n    function updateLevel(uint256 [] memory tokenId_, uint8 level_) external onlyAdmin{\\r\\n        for(uint _i =0; _i<tokenId_.length; _i++)\\r\\n        {\\r\\n            level[tokenId_[_i]] = level_;\\r\\n        }\\r\\n    } \\r\\n    \\r\\n\\r\\n    \\r\\n}\"\r\n    },\r\n    \"/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/Owner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n    mapping (address => bool) _admin;\\r\\n    mapping (address => bool) _worker;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n        _admin[_msgSender()] = true;\\r\\n        _worker[_msgSender()] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n    function isAdmin(address account_) public view virtual returns (bool) {\\r\\n        return _admin[account_];\\r\\n    }\\r\\n    function isWorker(address account_) public view virtual returns (bool) {\\r\\n        return _worker[account_];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(isAdmin(_msgSender()), \\\"Ownable: caller is not the Admin\\\");\\r\\n        _;\\r\\n    }\\r\\n    modifier onlyWorker() {\\r\\n        require(isWorker(_msgSender()), \\\"Ownable: caller is not the Worker\\\");\\r\\n        _;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    function updateAdmin(address account_, bool status_) public  onlyOwner{\\r\\n        require(account_ != address(0), \\\"Ownable: new Admin is the zero address\\\");\\r\\n        _admin[account_] = status_;\\r\\n    }\\r\\n\\r\\n    function updateWorker(address account_, bool status_) public  onlyOwner{\\r\\n        require(account_ != address(0), \\\"Ownable: new Worker is the zero address\\\");\\r\\n        _worker[account_] = status_;\\r\\n    }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"isWorker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"level_\",\"type\":\"uint8\"}],\"name\":\"updateLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"name\":\"updateWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MachinieLevel","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}