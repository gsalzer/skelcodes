{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/GetNFTs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IERC721 {\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n}\\n\\ncontract GetNFTs {\\n    function GetNFTsForAddress(\\n        address _owner,\\n        address _nftAddress,\\n        uint256 _tokenIdFrom,\\n        uint256 _tokenIdTo\\n    ) external view returns (uint256[] memory) {\\n        uint256 selectedTokenIds = 0;\\n        uint256[] memory selectedTokenIdsList = new uint256[](\\n            _tokenIdTo - _tokenIdFrom\\n        );\\n\\n        IERC721 nft = IERC721(_nftAddress);\\n\\n        for (uint256 i = _tokenIdFrom; i <= _tokenIdTo; i++) {\\n            try nft.ownerOf(i) returns (address owner) {\\n                if (owner == _owner) {\\n                    selectedTokenIdsList[i] = i;\\n                    selectedTokenIds++;\\n                }\\n            } catch {}\\n        }\\n\\n        // get only those ids that are not 0\\n        return getSelectedItems(selectedTokenIdsList, selectedTokenIds);\\n    }\\n\\n    function getSelectedItems(uint256[] memory temp, uint256 selectedCount)\\n        private\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256 someI = 0;\\n        uint256[] memory selectedPresales = new uint256[](selectedCount);\\n\\n        for (uint256 i = 0; i < temp.length; i++)\\n            if (temp[i] != 0) selectedPresales[someI++] = temp[i];\\n\\n        return selectedPresales;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdTo\",\"type\":\"uint256\"}],\"name\":\"GetNFTsForAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GetNFTs","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}