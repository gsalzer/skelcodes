{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.5.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/insured-bridge/interfaces/BridgePoolInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface BridgePoolInterface {\r\n    function l1Token() external view returns (IERC20);\r\n\r\n    function changeAdmin(address newAdmin) external;\r\n}\r\n\r\n\r\n// File contracts/insured-bridge/interfaces/BridgeAdminInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @notice Helper view methods designed to be called by BridgePool contracts.\r\n */\r\ninterface BridgeAdminInterface {\r\n    event SetDepositContracts(\r\n        uint256 indexed chainId,\r\n        address indexed l2DepositContract,\r\n        address indexed l2MessengerContract\r\n    );\r\n    event SetCrossDomainAdmin(uint256 indexed chainId, address indexed newAdmin);\r\n    event SetRelayIdentifier(bytes32 indexed identifier);\r\n    event SetOptimisticOracleLiveness(uint32 indexed liveness);\r\n    event SetProposerBondPct(uint64 indexed proposerBondPct);\r\n    event WhitelistToken(uint256 chainId, address indexed l1Token, address indexed l2Token, address indexed bridgePool);\r\n    event SetMinimumBridgingDelay(uint256 indexed chainId, uint64 newMinimumBridgingDelay);\r\n    event DepositsEnabled(uint256 indexed chainId, address indexed l2Token, bool depositsEnabled);\r\n    event BridgePoolsAdminTransferred(address[] bridgePools, address indexed newAdmin);\r\n\r\n    function finder() external view returns (address);\r\n\r\n    struct DepositUtilityContracts {\r\n        address depositContract; // L2 deposit contract where cross-chain relays originate.\r\n        address messengerContract; // L1 helper contract that can send a message to the L2 with the mapped network ID.\r\n    }\r\n\r\n    function depositContracts(uint256) external view returns (DepositUtilityContracts memory);\r\n\r\n    struct L1TokenRelationships {\r\n        mapping(uint256 => address) l2Tokens; // L2 Chain Id to l2Token address.\r\n        address bridgePool;\r\n    }\r\n\r\n    function whitelistedTokens(address, uint256) external view returns (address l2Token, address bridgePool);\r\n\r\n    function optimisticOracleLiveness() external view returns (uint32);\r\n\r\n    function proposerBondPct() external view returns (uint64);\r\n\r\n    function identifier() external view returns (bytes32);\r\n}\r\n\r\n\r\n// File contracts/insured-bridge/interfaces/MessengerInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @notice Sends cross chain messages to contracts on a specific L2 network. The `relayMessage` implementation will\r\n * differ for each L2.\r\n */\r\ninterface MessengerInterface {\r\n    function relayMessage(\r\n        address target,\r\n        address userToRefund,\r\n        uint256 l1CallValue,\r\n        uint256 gasLimit,\r\n        uint256 gasPrice,\r\n        uint256 maxSubmissionCost,\r\n        bytes memory message\r\n    ) external payable;\r\n}\r\n\r\n\r\n// File contracts/oracle/interfaces/IdentifierWhitelistInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Interface for whitelists of supported identifiers that the oracle can provide prices for.\r\n */\r\ninterface IdentifierWhitelistInterface {\r\n    /**\r\n     * @notice Adds the provided identifier as a supported identifier.\r\n     * @dev Price requests using this identifier will succeed after this call.\r\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\r\n     */\r\n    function addSupportedIdentifier(bytes32 identifier) external;\r\n\r\n    /**\r\n     * @notice Removes the identifier from the whitelist.\r\n     * @dev Price requests using this identifier will no longer succeed after this call.\r\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\r\n     */\r\n    function removeSupportedIdentifier(bytes32 identifier) external;\r\n\r\n    /**\r\n     * @notice Checks whether an identifier is on the whitelist.\r\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\r\n     * @return bool if the identifier is supported (or not).\r\n     */\r\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/oracle/interfaces/FinderInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Provides addresses of the live contracts implementing certain interfaces.\r\n * @dev Examples are the Oracle or Store interfaces.\r\n */\r\ninterface FinderInterface {\r\n    /**\r\n     * @notice Updates the address of the contract that implements `interfaceName`.\r\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\r\n     * @param implementationAddress address of the deployed contract that implements the interface.\r\n     */\r\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\r\n\r\n    /**\r\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\r\n     * @param interfaceName queried interface.\r\n     * @return implementationAddress address of the deployed contract that implements the interface.\r\n     */\r\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/oracle/implementation/Constants.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\r\n */\r\nlibrary OracleInterfaces {\r\n    bytes32 public constant Oracle = \"Oracle\";\r\n    bytes32 public constant IdentifierWhitelist = \"IdentifierWhitelist\";\r\n    bytes32 public constant Store = \"Store\";\r\n    bytes32 public constant FinancialContractsAdmin = \"FinancialContractsAdmin\";\r\n    bytes32 public constant Registry = \"Registry\";\r\n    bytes32 public constant CollateralWhitelist = \"CollateralWhitelist\";\r\n    bytes32 public constant OptimisticOracle = \"OptimisticOracle\";\r\n    bytes32 public constant Bridge = \"Bridge\";\r\n    bytes32 public constant GenericHandler = \"GenericHandler\";\r\n    bytes32 public constant SkinnyOptimisticOracle = \"SkinnyOptimisticOracle\";\r\n}\r\n\r\n\r\n// File contracts/common/interfaces/AddressWhitelistInterface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AddressWhitelistInterface {\r\n    function addToWhitelist(address newElement) external;\r\n\r\n    function removeFromWhitelist(address newElement) external;\r\n\r\n    function isOnWhitelist(address newElement) external view returns (bool);\r\n\r\n    function getWhitelist() external view returns (address[] memory);\r\n}\r\n\r\n\r\n// File contracts/common/implementation/Lockable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\r\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\r\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\r\n */\r\ncontract Lockable {\r\n    bool private _notEntered;\r\n\r\n    constructor() {\r\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\r\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\r\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\r\n        // refund coming into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\r\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\r\n     * function that does the actual state modification.\r\n     */\r\n    modifier nonReentrant() {\r\n        _preEntranceCheck();\r\n        _preEntranceSet();\r\n        _;\r\n        _postEntranceReset();\r\n    }\r\n\r\n    /**\r\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\r\n     */\r\n    modifier nonReentrantView() {\r\n        _preEntranceCheck();\r\n        _;\r\n    }\r\n\r\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\r\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\r\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\r\n    // then call `_postEntranceReset()`.\r\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\r\n    function _preEntranceCheck() internal view {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n\r\n    function _preEntranceSet() internal {\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n    }\r\n\r\n    function _postEntranceReset() internal {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/insured-bridge/BridgeAdmin.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice Administrative contract deployed on L1 that has implicit references to all L2 DepositBoxes.\r\n * @dev This contract is\r\n * responsible for making global variables accessible to BridgePool contracts, which house passive liquidity and\r\n * enable relaying of L2 deposits.\r\n * @dev The owner of this contract can also call permissioned functions on registered L2 DepositBoxes.\r\n */\r\ncontract BridgeAdmin is BridgeAdminInterface, Ownable, Lockable {\r\n    // Finder used to point to latest OptimisticOracle and other DVM contracts.\r\n    address public override finder;\r\n\r\n    // This contract can relay messages to any number of L2 DepositBoxes, one per L2 network, each identified by a\r\n    // unique network ID. To relay a message, both the deposit box contract address and a messenger contract address\r\n    // need to be stored. The messenger implementation differs for each L2 because L1 --> L2 messaging is non-standard.\r\n    // The deposit box contract originate the deposits that can be fulfilled by BridgePool contracts on L1.\r\n    mapping(uint256 => DepositUtilityContracts) private _depositContracts;\r\n\r\n    // L1 token addresses are mapped to their canonical token address on L2 and the BridgePool contract that houses\r\n    // relay liquidity for any deposits of the canonical L2 token.\r\n    mapping(address => L1TokenRelationships) private _whitelistedTokens;\r\n\r\n    // Set upon construction and can be reset by Owner.\r\n    uint32 public override optimisticOracleLiveness;\r\n    uint64 public override proposerBondPct;\r\n    bytes32 public override identifier;\r\n\r\n    // Add this modifier to methods that are expected to bridge messages to a L2 Deposit contract, which\r\n    // will cause unexpected behavior if the deposit or messenger helper contract isn't set and valid.\r\n    modifier canRelay(uint256 chainId) {\r\n        _validateDepositContracts(\r\n            _depositContracts[chainId].depositContract,\r\n            _depositContracts[chainId].messengerContract\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Construct the Bridge Admin\r\n     * @param _finder DVM finder to find other UMA ecosystem contracts.\r\n     * @param _optimisticOracleLiveness Timeout that all bridging actions from L2->L1 must wait for a OptimisticOracle response.\r\n     * @param _proposerBondPct Percentage of the bridged amount that a relayer must put up as a bond.\r\n     * @param _identifier Identifier used when querying the OO for a cross bridge transfer action.\r\n     */\r\n    constructor(\r\n        address _finder,\r\n        uint32 _optimisticOracleLiveness,\r\n        uint64 _proposerBondPct,\r\n        bytes32 _identifier\r\n    ) {\r\n        finder = _finder;\r\n        require(address(_getCollateralWhitelist()) != address(0), \"Invalid finder\");\r\n        _setOptimisticOracleLiveness(_optimisticOracleLiveness);\r\n        _setProposerBondPct(_proposerBondPct);\r\n        _setIdentifier(_identifier);\r\n    }\r\n\r\n    /**************************************\r\n     *        ADMIN FUNCTIONS             *\r\n     **************************************/\r\n\r\n    /**\r\n     * @notice Sets a price identifier to use for relayed deposits. BridgePools reads the identifier from this contract.\r\n     * @dev Can only be called by the current owner.\r\n     * @param _identifier New identifier to set.\r\n     */\r\n    function setIdentifier(bytes32 _identifier) public onlyOwner nonReentrant() {\r\n        _setIdentifier(_identifier);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets challenge period for relayed deposits. BridgePools will read this value from this contract.\r\n     * @dev Can only be called by the current owner.\r\n     * @param liveness New OptimisticOracle liveness period to set for relay price requests.\r\n     */\r\n    function setOptimisticOracleLiveness(uint32 liveness) public onlyOwner nonReentrant() {\r\n        _setOptimisticOracleLiveness(liveness);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets challenge period for relayed deposits. BridgePools will read this value from this contract.\r\n     * @dev Can only be called by the current owner.\r\n     * @param _proposerBondPct New OptimisticOracle proposer bond % to set for relay price requests. 1e18 = 100%.\r\n     */\r\n    function setProposerBondPct(uint64 _proposerBondPct) public onlyOwner nonReentrant() {\r\n        _setProposerBondPct(_proposerBondPct);\r\n    }\r\n\r\n    /**\r\n     * @notice Associates the L2 deposit and L1 messenger helper addresses with an L2 network ID.\r\n     * @dev Only callable by the current owner.\r\n     * @param chainId L2 network ID to set addresses for.\r\n     * @param depositContract Address of L2 deposit contract.\r\n     * @param messengerContract Address of L1 helper contract that relays messages to L2.\r\n     */\r\n    function setDepositContract(\r\n        uint256 chainId,\r\n        address depositContract,\r\n        address messengerContract\r\n    ) public onlyOwner nonReentrant() {\r\n        _validateDepositContracts(depositContract, messengerContract);\r\n        _depositContracts[chainId].depositContract = depositContract;\r\n        _depositContracts[chainId].messengerContract = messengerContract;\r\n        emit SetDepositContracts(chainId, depositContract, messengerContract);\r\n    }\r\n\r\n    /**\r\n     * @notice Enables the current owner to transfer ownership of a set of owned bridge pools to a new owner.\r\n     * @dev Only callable by the current owner.\r\n     * @param bridgePools array of bridge pools to transfer ownership.\r\n     * @param newAdmin new admin contract to set ownership to.\r\n     */\r\n    function transferBridgePoolAdmin(address[] memory bridgePools, address newAdmin) public onlyOwner nonReentrant() {\r\n        for (uint8 i = 0; i < bridgePools.length; i++) {\r\n            BridgePoolInterface(bridgePools[i]).changeAdmin(newAdmin);\r\n        }\r\n        emit BridgePoolsAdminTransferred(bridgePools, newAdmin);\r\n    }\r\n\r\n    /**************************************************\r\n     *        CROSSDOMAIN ADMIN FUNCTIONS             *\r\n     **************************************************/\r\n\r\n    /**\r\n     * @notice Set new contract as the admin address in the L2 Deposit contract.\r\n     * @dev Only callable by the current owner.\r\n     * @dev msg.value must equal to l1CallValue.\r\n     * @param chainId L2 network ID where Deposit contract is deployed.\r\n     * @param admin New admin address to set on L2.\r\n     * @param l1CallValue Amount of ETH to include in msg.value. Used to pay for L2 fees, but its exact usage varies\r\n     * depending on the L2 network that this contract sends a message to.\r\n     * @param l2Gas Gas limit to set for relayed message on L2.\r\n     * @param l2GasPrice Gas price bid to set for relayed message on L2.\r\n     * @param maxSubmissionCost: Arbitrum only: fee deducted from L2 sender's balance to pay for L2 gas.\r\n     */\r\n    function setCrossDomainAdmin(\r\n        uint256 chainId,\r\n        address admin,\r\n        uint256 l1CallValue,\r\n        uint256 l2Gas,\r\n        uint256 l2GasPrice,\r\n        uint256 maxSubmissionCost\r\n    ) public payable onlyOwner canRelay(chainId) nonReentrant() {\r\n        require(admin != address(0), \"Admin cannot be zero address\");\r\n        _relayMessage(\r\n            _depositContracts[chainId].messengerContract,\r\n            l1CallValue,\r\n            _depositContracts[chainId].depositContract,\r\n            msg.sender,\r\n            l2Gas,\r\n            l2GasPrice,\r\n            maxSubmissionCost,\r\n            abi.encodeWithSignature(\"setCrossDomainAdmin(address)\", admin)\r\n        );\r\n        emit SetCrossDomainAdmin(chainId, admin);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the minimum time between L2-->L1 token withdrawals in the L2 Deposit contract.\r\n     * @dev Only callable by the current owner.\r\n     * @dev msg.value must equal to l1CallValue.\r\n     * @param chainId L2 network ID where Deposit contract is deployed.\r\n     * @param minimumBridgingDelay the new minimum delay.\r\n     * @param l1CallValue Amount of ETH to include in msg.value. Used to pay for L2 fees, but its exact usage varies\r\n     * depending on the L2 network that this contract sends a message to.\r\n     * @param l2Gas Gas limit to set for relayed message on L2.\r\n     * @param l2GasPrice Gas price bid to set for relayed message on L2.\r\n     * @param maxSubmissionCost: Arbitrum only: fee deducted from L2 sender's balance to pay for L2 gas.\r\n     */\r\n    function setMinimumBridgingDelay(\r\n        uint256 chainId,\r\n        uint64 minimumBridgingDelay,\r\n        uint256 l1CallValue,\r\n        uint256 l2Gas,\r\n        uint256 l2GasPrice,\r\n        uint256 maxSubmissionCost\r\n    ) public payable onlyOwner canRelay(chainId) nonReentrant() {\r\n        _relayMessage(\r\n            _depositContracts[chainId].messengerContract,\r\n            l1CallValue,\r\n            _depositContracts[chainId].depositContract,\r\n            msg.sender,\r\n            l2Gas,\r\n            l2GasPrice,\r\n            maxSubmissionCost,\r\n            abi.encodeWithSignature(\"setMinimumBridgingDelay(uint64)\", minimumBridgingDelay)\r\n        );\r\n        emit SetMinimumBridgingDelay(chainId, minimumBridgingDelay);\r\n    }\r\n\r\n    /**\r\n     * @notice Owner can pause/unpause L2 deposits for a tokens.\r\n     * @dev Only callable by Owner of this contract. Will set the same setting in the L2 Deposit contract via the cross\r\n     * domain messenger.\r\n     * @dev msg.value must equal to l1CallValue.\r\n     * @param chainId L2 network ID where Deposit contract is deployed.\r\n     * @param l2Token address of L2 token to enable/disable deposits for.\r\n     * @param depositsEnabled bool to set if the deposit box should accept/reject deposits.\r\n     * @param l1CallValue Amount of ETH to include in msg.value. Used to pay for L2 fees, but its exact usage varies\r\n     * depending on the L2 network that this contract sends a message to.\r\n     * @param l2Gas Gas limit to set for relayed message on L2.\r\n     * @param l2GasPrice Gas price bid to set for relayed message on L2.\r\n     * @param maxSubmissionCost: Arbitrum only: fee deducted from L2 sender's balance to pay for L2 gas.\r\n     */\r\n    function setEnableDeposits(\r\n        uint256 chainId,\r\n        address l2Token,\r\n        bool depositsEnabled,\r\n        uint256 l1CallValue,\r\n        uint256 l2Gas,\r\n        uint256 l2GasPrice,\r\n        uint256 maxSubmissionCost\r\n    ) public payable onlyOwner canRelay(chainId) nonReentrant() {\r\n        _relayMessage(\r\n            _depositContracts[chainId].messengerContract,\r\n            l1CallValue,\r\n            _depositContracts[chainId].depositContract,\r\n            msg.sender,\r\n            l2Gas,\r\n            l2GasPrice,\r\n            maxSubmissionCost,\r\n            abi.encodeWithSignature(\"setEnableDeposits(address,bool)\", l2Token, depositsEnabled)\r\n        );\r\n        emit DepositsEnabled(chainId, l2Token, depositsEnabled);\r\n    }\r\n\r\n    /**\r\n     * @notice Privileged account can associate a whitelisted token with its linked token address on L2. The linked L2\r\n     * token can thereafter be deposited into the Deposit contract on L2 and relayed via the BridgePool contract.\r\n     * @dev msg.value must equal to l1CallValue.\r\n     * @dev This method is also used to to update the address of the bridgePool within a BridgeDepositBox through the\r\n     * re-whitelisting of a previously whitelisted token to update the address of the bridge pool in the deposit box.\r\n     * @dev Only callable by Owner of this contract. Also initiates a cross-chain call to the L2 Deposit contract to\r\n     * whitelist the token mapping.\r\n     * @param chainId L2 network ID where Deposit contract is deployed.\r\n     * @param l1Token Address of L1 token that can be used to relay L2 token deposits.\r\n     * @param l2Token Address of L2 token whose deposits are fulfilled by `l1Token`.\r\n     * @param bridgePool Address of BridgePool which manages liquidity to fulfill L2-->L1 relays.\r\n     * @param l1CallValue Amount of ETH to include in msg.value. Used to pay for L2 fees, but its exact usage varies\r\n     * depending on the L2 network that this contract sends a message to.\r\n     * @param l2Gas Gas limit to set for relayed message on L2.\r\n     * @param l2GasPrice Gas price bid to set for relayed message on L2.\r\n     * @param maxSubmissionCost: Arbitrum only: fee deducted from L2 sender's balance to pay for L2 gas.\r\n     */\r\n    function whitelistToken(\r\n        uint256 chainId,\r\n        address l1Token,\r\n        address l2Token,\r\n        address bridgePool,\r\n        uint256 l1CallValue,\r\n        uint256 l2Gas,\r\n        uint256 l2GasPrice,\r\n        uint256 maxSubmissionCost\r\n    ) public payable onlyOwner canRelay(chainId) nonReentrant() {\r\n        require(bridgePool != address(0), \"BridgePool cannot be zero address\");\r\n        require(l2Token != address(0), \"L2 token cannot be zero address\");\r\n        require(_getCollateralWhitelist().isOnWhitelist(address(l1Token)), \"L1Token token not whitelisted\");\r\n\r\n        require(address(BridgePoolInterface(bridgePool).l1Token()) == l1Token, \"Bridge pool has different L1 token\");\r\n\r\n        // Braces to resolve Stack too deep compile error\r\n        {\r\n            L1TokenRelationships storage l1TokenRelationships = _whitelistedTokens[l1Token];\r\n            l1TokenRelationships.l2Tokens[chainId] = l2Token; // Set the L2Token at the index of the chainId.\r\n            l1TokenRelationships.bridgePool = bridgePool;\r\n        }\r\n\r\n        _relayMessage(\r\n            _depositContracts[chainId].messengerContract,\r\n            l1CallValue,\r\n            _depositContracts[chainId].depositContract,\r\n            msg.sender,\r\n            l2Gas,\r\n            l2GasPrice,\r\n            maxSubmissionCost,\r\n            abi.encodeWithSignature(\"whitelistToken(address,address,address)\", l1Token, l2Token, bridgePool)\r\n        );\r\n        emit WhitelistToken(chainId, l1Token, l2Token, bridgePool);\r\n    }\r\n\r\n    /**************************************\r\n     *           VIEW FUNCTIONS           *\r\n     **************************************/\r\n    function depositContracts(uint256 chainId) external view override returns (DepositUtilityContracts memory) {\r\n        return _depositContracts[chainId];\r\n    }\r\n\r\n    function whitelistedTokens(address l1Token, uint256 chainId)\r\n        external\r\n        view\r\n        override\r\n        returns (address l2Token, address bridgePool)\r\n    {\r\n        return (_whitelistedTokens[l1Token].l2Tokens[chainId], _whitelistedTokens[l1Token].bridgePool);\r\n    }\r\n\r\n    /**************************************\r\n     *        INTERNAL FUNCTIONS          *\r\n     **************************************/\r\n\r\n    function _getIdentifierWhitelist() private view returns (IdentifierWhitelistInterface) {\r\n        return\r\n            IdentifierWhitelistInterface(\r\n                FinderInterface(finder).getImplementationAddress(OracleInterfaces.IdentifierWhitelist)\r\n            );\r\n    }\r\n\r\n    function _getCollateralWhitelist() private view returns (AddressWhitelistInterface) {\r\n        return\r\n            AddressWhitelistInterface(\r\n                FinderInterface(finder).getImplementationAddress(OracleInterfaces.CollateralWhitelist)\r\n            );\r\n    }\r\n\r\n    function _setIdentifier(bytes32 _identifier) private {\r\n        require(_getIdentifierWhitelist().isIdentifierSupported(_identifier), \"Identifier not registered\");\r\n        identifier = _identifier;\r\n        emit SetRelayIdentifier(identifier);\r\n    }\r\n\r\n    function _setOptimisticOracleLiveness(uint32 liveness) private {\r\n        // The following constraints are copied from a similar function in the OptimisticOracle contract:\r\n        // - https://github.com/UMAprotocol/protocol/blob/dd211c4e3825fe007d1161025a34e9901b26031a/packages/core/contracts/oracle/implementation/OptimisticOracle.sol#L621\r\n        require(liveness < 5200 weeks, \"Liveness too large\");\r\n        require(liveness > 0, \"Liveness cannot be 0\");\r\n        optimisticOracleLiveness = liveness;\r\n        emit SetOptimisticOracleLiveness(optimisticOracleLiveness);\r\n    }\r\n\r\n    function _setProposerBondPct(uint64 _proposerBondPct) private {\r\n        proposerBondPct = _proposerBondPct;\r\n        emit SetProposerBondPct(proposerBondPct);\r\n    }\r\n\r\n    function _validateDepositContracts(address depositContract, address messengerContract) private pure {\r\n        require(\r\n            (depositContract != address(0)) && (messengerContract != address(0)),\r\n            \"Invalid deposit or messenger contract\"\r\n        );\r\n    }\r\n\r\n    // Send msg.value == l1CallValue to Messenger, which can then use it in any way to execute cross domain message.\r\n    function _relayMessage(\r\n        address messengerContract,\r\n        uint256 l1CallValue,\r\n        address target,\r\n        address user,\r\n        uint256 l2Gas,\r\n        uint256 l2GasPrice,\r\n        uint256 maxSubmissionCost,\r\n        bytes memory message\r\n    ) private {\r\n        require(l1CallValue == msg.value, \"Wrong number of ETH sent\");\r\n        MessengerInterface(messengerContract).relayMessage{ value: l1CallValue }(\r\n            target,\r\n            user,\r\n            l1CallValue,\r\n            l2Gas,\r\n            l2GasPrice,\r\n            maxSubmissionCost,\r\n            message\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_finder\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_optimisticOracleLiveness\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_proposerBondPct\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_identifier\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bridgePools\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"BridgePoolsAdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"depositsEnabled\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetCrossDomainAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2DepositContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2MessengerContract\",\"type\":\"address\"}],\"name\":\"SetDepositContracts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newMinimumBridgingDelay\",\"type\":\"uint64\"}],\"name\":\"SetMinimumBridgingDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"liveness\",\"type\":\"uint32\"}],\"name\":\"SetOptimisticOracleLiveness\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"proposerBondPct\",\"type\":\"uint64\"}],\"name\":\"SetProposerBondPct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"}],\"name\":\"SetRelayIdentifier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgePool\",\"type\":\"address\"}],\"name\":\"WhitelistToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"depositContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"depositContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messengerContract\",\"type\":\"address\"}],\"internalType\":\"struct BridgeAdminInterface.DepositUtilityContracts\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimisticOracleLiveness\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposerBondPct\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"l1CallValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2Gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2GasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"setCrossDomainAdmin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messengerContract\",\"type\":\"address\"}],\"name\":\"setDepositContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"depositsEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"l1CallValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2Gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2GasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"setEnableDeposits\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_identifier\",\"type\":\"bytes32\"}],\"name\":\"setIdentifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"minimumBridgingDelay\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"l1CallValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2Gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2GasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"setMinimumBridgingDelay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"liveness\",\"type\":\"uint32\"}],\"name\":\"setOptimisticOracleLiveness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_proposerBondPct\",\"type\":\"uint64\"}],\"name\":\"setProposerBondPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bridgePools\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferBridgePoolAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"l1CallValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2Gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2GasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"whitelistToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgePool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BridgeAdmin","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"00000000000000000000000040f941e48a552bf496b154af6bf55725f18d77c3000000000000000000000000000000000000000000000000000000000000546000000000000000000000000000000000000000000000000000b1a2bc2ec5000049535f52454c41595f56414c4944000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9cc6b8d82965b26debd6b3e6bfa9845c117be3684913c06cc4db6ee16933c6ae"}]}