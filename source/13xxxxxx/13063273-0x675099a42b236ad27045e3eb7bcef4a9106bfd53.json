{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of src/DssSpell.sol\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity =0.6.12 >=0.6.12 <0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n////// lib/dss-exec-lib/src/CollateralOpts.sol\r\n/* pragma solidity ^0.6.12; */\r\n\r\nstruct CollateralOpts {\r\n    bytes32 ilk;\r\n    address gem;\r\n    address join;\r\n    address clip;\r\n    address calc;\r\n    address pip;\r\n    bool    isLiquidatable;\r\n    bool    isOSM;\r\n    bool    whitelistOSM;\r\n    uint256 ilkDebtCeiling;\r\n    uint256 minVaultAmount;\r\n    uint256 maxLiquidationAmount;\r\n    uint256 liquidationPenalty;\r\n    uint256 ilkStabilityFee;\r\n    uint256 startingPriceFactor;\r\n    uint256 breakerTolerance;\r\n    uint256 auctionDuration;\r\n    uint256 permittedDrop;\r\n    uint256 liquidationRatio;\r\n    uint256 kprFlatReward;\r\n    uint256 kprPctReward;\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssExecLib.sol\r\n//\r\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity ^0.6.12; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\r\n\r\ninterface Initializable {\r\n    function init(bytes32) external;\r\n}\r\n\r\ninterface Authorizable {\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n}\r\n\r\ninterface Fileable {\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n}\r\n\r\ninterface Drippable {\r\n    function drip() external returns (uint256);\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface Pricing {\r\n    function poke(bytes32) external;\r\n}\r\n\r\ninterface ERC20 {\r\n    function decimals() external returns (uint8);\r\n}\r\n\r\ninterface DssVat {\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\r\n    function Line() external view returns (uint256);\r\n    function suck(address, address, uint) external;\r\n}\r\n\r\ninterface ClipLike {\r\n    function vat() external returns (address);\r\n    function dog() external returns (address);\r\n    function spotter() external view returns (address);\r\n    function calc() external view returns (address);\r\n    function ilk() external returns (bytes32);\r\n}\r\n\r\ninterface JoinLike {\r\n    function vat() external returns (address);\r\n    function ilk() external returns (bytes32);\r\n    function gem() external returns (address);\r\n    function dec() external returns (uint256);\r\n    function join(address, uint) external;\r\n    function exit(address, uint) external;\r\n}\r\n\r\n// Includes Median and OSM functions\r\ninterface OracleLike_2 {\r\n    function src() external view returns (address);\r\n    function lift(address[] calldata) external;\r\n    function drop(address[] calldata) external;\r\n    function setBar(uint256) external;\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n    function orb0() external view returns (address);\r\n    function orb1() external view returns (address);\r\n}\r\n\r\ninterface MomLike {\r\n    function setOsm(bytes32, address) external;\r\n    function setPriceTolerance(address, uint256) external;\r\n}\r\n\r\ninterface RegistryLike {\r\n    function add(address) external;\r\n    function xlip(bytes32) external view returns (address);\r\n}\r\n\r\n// https://github.com/makerdao/dss-chain-log\r\ninterface ChainlogLike {\r\n    function setVersion(string calldata) external;\r\n    function setIPFS(string calldata) external;\r\n    function setSha256sum(string calldata) external;\r\n    function getAddress(bytes32) external view returns (address);\r\n    function setAddress(bytes32, address) external;\r\n    function removeAddress(bytes32) external;\r\n}\r\n\r\ninterface IAMLike {\r\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\r\n    function setIlk(bytes32,uint256,uint256,uint256) external;\r\n    function remIlk(bytes32) external;\r\n    function exec(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface LerpFactoryLike {\r\n    function newLerp(bytes32 name_, address target_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\r\n    function newIlkLerp(bytes32 name_, address target_, bytes32 ilk_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\r\n}\r\n\r\ninterface LerpLike {\r\n    function tick() external;\r\n}\r\n\r\n\r\nlibrary DssExecLib {\r\n\r\n    /*****************/\r\n    /*** Constants ***/\r\n    /*****************/\r\n    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\r\n\r\n    uint256 constant internal WAD      = 10 ** 18;\r\n    uint256 constant internal RAY      = 10 ** 27;\r\n    uint256 constant internal RAD      = 10 ** 45;\r\n    uint256 constant internal THOUSAND = 10 ** 3;\r\n    uint256 constant internal MILLION  = 10 ** 6;\r\n\r\n    uint256 constant internal BPS_ONE_PCT             = 100;\r\n    uint256 constant internal BPS_ONE_HUNDRED_PCT     = 100 * BPS_ONE_PCT;\r\n    uint256 constant internal RATES_ONE_HUNDRED_PCT   = 1000000021979553151239153027;\r\n\r\n    /**********************/\r\n    /*** Math Functions ***/\r\n    /**********************/\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    /****************************/\r\n    /*** Core Address Helpers ***/\r\n    /****************************/\r\n    function dai()        public view returns (address) { return getChangelogAddress(\"MCD_DAI\"); }\r\n    function mkr()        public view returns (address) { return getChangelogAddress(\"MCD_GOV\"); }\r\n    function vat()        public view returns (address) { return getChangelogAddress(\"MCD_VAT\"); }\r\n    function cat()        public view returns (address) { return getChangelogAddress(\"MCD_CAT\"); }\r\n    function dog()        public view returns (address) { return getChangelogAddress(\"MCD_DOG\"); }\r\n    function jug()        public view returns (address) { return getChangelogAddress(\"MCD_JUG\"); }\r\n    function pot()        public view returns (address) { return getChangelogAddress(\"MCD_POT\"); }\r\n    function vow()        public view returns (address) { return getChangelogAddress(\"MCD_VOW\"); }\r\n    function end()        public view returns (address) { return getChangelogAddress(\"MCD_END\"); }\r\n    function esm()        public view returns (address) { return getChangelogAddress(\"MCD_ESM\"); }\r\n    function reg()        public view returns (address) { return getChangelogAddress(\"ILK_REGISTRY\"); }\r\n    function spotter()    public view returns (address) { return getChangelogAddress(\"MCD_SPOT\"); }\r\n    function flap()       public view returns (address) { return getChangelogAddress(\"MCD_FLAP\"); }\r\n    function flop()       public view returns (address) { return getChangelogAddress(\"MCD_FLOP\"); }\r\n    function osmMom()     public view returns (address) { return getChangelogAddress(\"OSM_MOM\"); }\r\n    function govGuard()   public view returns (address) { return getChangelogAddress(\"GOV_GUARD\"); }\r\n    function flipperMom() public view returns (address) { return getChangelogAddress(\"FLIPPER_MOM\"); }\r\n    function clipperMom() public view returns (address) { return getChangelogAddress(\"CLIPPER_MOM\"); }\r\n    function pauseProxy() public view returns (address) { return getChangelogAddress(\"MCD_PAUSE_PROXY\"); }\r\n    function autoLine()   public view returns (address) { return getChangelogAddress(\"MCD_IAM_AUTO_LINE\"); }\r\n    function daiJoin()    public view returns (address) { return getChangelogAddress(\"MCD_JOIN_DAI\"); }\r\n    function lerpFab()    public view returns (address) { return getChangelogAddress(\"LERP_FAB\"); }\r\n\r\n    function clip(bytes32 _ilk) public view returns (address _clip) {\r\n        _clip = RegistryLike(reg()).xlip(_ilk);\r\n    }\r\n\r\n    function flip(bytes32 _ilk) public view returns (address _flip) {\r\n        _flip = RegistryLike(reg()).xlip(_ilk);\r\n    }\r\n\r\n    function calc(bytes32 _ilk) public view returns (address _calc) {\r\n        _calc = ClipLike(clip(_ilk)).calc();\r\n    }\r\n\r\n    function getChangelogAddress(bytes32 _key) public view returns (address) {\r\n        return ChainlogLike(LOG).getAddress(_key);\r\n    }\r\n\r\n    /****************************/\r\n    /*** Changelog Management ***/\r\n    /****************************/\r\n    /**\r\n        @dev Set an address in the MCD on-chain changelog.\r\n        @param _key Access key for the address (e.g. \"MCD_VAT\")\r\n        @param _val The address associated with the _key\r\n    */\r\n    function setChangelogAddress(bytes32 _key, address _val) public {\r\n        ChainlogLike(LOG).setAddress(_key, _val);\r\n    }\r\n\r\n    /**\r\n        @dev Set version in the MCD on-chain changelog.\r\n        @param _version Changelog version (e.g. \"1.1.2\")\r\n    */\r\n    function setChangelogVersion(string memory _version) public {\r\n        ChainlogLike(LOG).setVersion(_version);\r\n    }\r\n    /**\r\n        @dev Set IPFS hash of IPFS changelog in MCD on-chain changelog.\r\n        @param _ipfsHash IPFS hash (e.g. \"QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\")\r\n    */\r\n    function setChangelogIPFS(string memory _ipfsHash) public {\r\n        ChainlogLike(LOG).setIPFS(_ipfsHash);\r\n    }\r\n    /**\r\n        @dev Set SHA256 hash in MCD on-chain changelog.\r\n        @param _SHA256Sum SHA256 hash (e.g. \"e42dc9d043a57705f3f097099e6b2de4230bca9a020c797508da079f9079e35b\")\r\n    */\r\n    function setChangelogSHA256(string memory _SHA256Sum) public {\r\n        ChainlogLike(LOG).setSha256sum(_SHA256Sum);\r\n    }\r\n\r\n\r\n    /**********************/\r\n    /*** Authorizations ***/\r\n    /**********************/\r\n    /**\r\n        @dev Give an address authorization to perform auth actions on the contract.\r\n        @param _base   The address of the contract where the authorization will be set\r\n        @param _ward   Address to be authorized\r\n    */\r\n    function authorize(address _base, address _ward) public {\r\n        Authorizable(_base).rely(_ward);\r\n    }\r\n    /**\r\n        @dev Revoke contract authorization from an address.\r\n        @param _base   The address of the contract where the authorization will be revoked\r\n        @param _ward   Address to be deauthorized\r\n    */\r\n    function deauthorize(address _base, address _ward) public {\r\n        Authorizable(_base).deny(_ward);\r\n    }\r\n    /**\r\n        @dev Delegate vat authority to the specified address.\r\n        @param _usr Address to be authorized\r\n    */\r\n    function delegateVat(address _usr) public {\r\n        DssVat(vat()).hope(_usr);\r\n    }\r\n    /**\r\n        @dev Revoke vat authority to the specified address.\r\n        @param _usr Address to be deauthorized\r\n    */\r\n    function undelegateVat(address _usr) public {\r\n        DssVat(vat()).nope(_usr);\r\n    }\r\n\r\n    /******************************/\r\n    /*** OfficeHours Management ***/\r\n    /******************************/\r\n\r\n    /**\r\n        @dev Returns true if a time is within office hours range\r\n        @param _ts           The timestamp to check, usually block.timestamp\r\n        @param _officeHours  true if office hours is enabled.\r\n        @return              true if time is in castable range\r\n    */\r\n    function canCast(uint40 _ts, bool _officeHours) public pure returns (bool) {\r\n        if (_officeHours) {\r\n            uint256 day = (_ts / 1 days + 3) % 7;\r\n            if (day >= 5)                 { return false; }  // Can only be cast on a weekday\r\n            uint256 hour = _ts / 1 hours % 24;\r\n            if (hour < 14 || hour >= 21)  { return false; }  // Outside office hours\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev Calculate the next available cast time in epoch seconds\r\n        @param _eta          The scheduled time of the spell plus the pause delay\r\n        @param _ts           The current timestamp, usually block.timestamp\r\n        @param _officeHours  true if office hours is enabled.\r\n        @return castTime     The next available cast timestamp\r\n    */\r\n    function nextCastTime(uint40 _eta, uint40 _ts, bool _officeHours) public pure returns (uint256 castTime) {\r\n        require(_eta != 0);  // \"DssExecLib/invalid eta\"\r\n        require(_ts  != 0);  // \"DssExecLib/invalid ts\"\r\n        castTime = _ts > _eta ? _ts : _eta; // Any day at XX:YY\r\n\r\n        if (_officeHours) {\r\n            uint256 day    = (castTime / 1 days + 3) % 7;\r\n            uint256 hour   = castTime / 1 hours % 24;\r\n            uint256 minute = castTime / 1 minutes % 60;\r\n            uint256 second = castTime % 60;\r\n\r\n            if (day >= 5) {\r\n                castTime += (6 - day) * 1 days;                 // Go to Sunday XX:YY\r\n                castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday\r\n                castTime -= minute * 1 minutes + second;        // Go to 14:00 UTC\r\n            } else {\r\n                if (hour >= 21) {\r\n                    if (day == 4) castTime += 2 days;           // If Friday, fast forward to Sunday XX:YY\r\n                    castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                } else if (hour < 14) {\r\n                    castTime += (14 - hour) * 1 hours;          // Go to 14:YY UTC same day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**************************/\r\n    /*** Accumulating Rates ***/\r\n    /**************************/\r\n    /**\r\n        @dev Update rate accumulation for the Dai Savings Rate (DSR).\r\n    */\r\n    function accumulateDSR() public {\r\n        Drippable(pot()).drip();\r\n    }\r\n    /**\r\n        @dev Update rate accumulation for the stability fees of a given collateral type.\r\n        @param _ilk   Collateral type\r\n    */\r\n    function accumulateCollateralStabilityFees(bytes32 _ilk) public {\r\n        Drippable(jug()).drip(_ilk);\r\n    }\r\n\r\n    /*********************/\r\n    /*** Price Updates ***/\r\n    /*********************/\r\n    /**\r\n        @dev Update price of a given collateral type.\r\n        @param _ilk   Collateral type\r\n    */\r\n    function updateCollateralPrice(bytes32 _ilk) public {\r\n        Pricing(spotter()).poke(_ilk);\r\n    }\r\n\r\n    /****************************/\r\n    /*** System Configuration ***/\r\n    /****************************/\r\n    /**\r\n        @dev Set a contract in another contract, defining the relationship (ex. set a new Calc contract in Clip)\r\n        @param _base   The address of the contract where the new contract address will be filed\r\n        @param _what   Name of contract to file\r\n        @param _addr   Address of contract to file\r\n    */\r\n    function setContract(address _base, bytes32 _what, address _addr) public {\r\n        Fileable(_base).file(_what, _addr);\r\n    }\r\n    /**\r\n        @dev Set a contract in another contract, defining the relationship (ex. set a new Calc contract in a Clip)\r\n        @param _base   The address of the contract where the new contract address will be filed\r\n        @param _ilk    Collateral type\r\n        @param _what   Name of contract to file\r\n        @param _addr   Address of contract to file\r\n    */\r\n    function setContract(address _base, bytes32 _ilk, bytes32 _what, address _addr) public {\r\n        Fileable(_base).file(_ilk, _what, _addr);\r\n    }\r\n    /**\r\n        @dev Set a value in a contract, via a governance authorized File pattern.\r\n        @param _base   The address of the contract where the new contract address will be filed\r\n        @param _what   Name of tag for the value (e.x. \"Line\")\r\n        @param _amt    The value to set or update\r\n    */\r\n    function setValue(address _base, bytes32 _what, uint256 _amt) public {\r\n        Fileable(_base).file(_what, _amt);\r\n    }\r\n    /**\r\n        @dev Set an ilk-specific value in a contract, via a governance authorized File pattern.\r\n        @param _base   The address of the contract where the new value will be filed\r\n        @param _ilk    Collateral type\r\n        @param _what   Name of tag for the value (e.x. \"Line\")\r\n        @param _amt    The value to set or update\r\n    */\r\n    function setValue(address _base, bytes32 _ilk, bytes32 _what, uint256 _amt) public {\r\n        Fileable(_base).file(_ilk, _what, _amt);\r\n    }\r\n\r\n    /******************************/\r\n    /*** System Risk Parameters ***/\r\n    /******************************/\r\n    // function setGlobalDebtCeiling(uint256 _amount) public { setGlobalDebtCeiling(vat(), _amount); }\r\n    /**\r\n        @dev Set the global debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setGlobalDebtCeiling(uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-global-Line-precision\"\r\n        setValue(vat(), \"Line\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Increase the global debt ceiling by a specific amount. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to add in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function increaseGlobalDebtCeiling(uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-Line-increase-precision\"\r\n        address _vat = vat();\r\n        setValue(_vat, \"Line\", add(DssVat(_vat).Line(), _amount * RAD));\r\n    }\r\n    /**\r\n        @dev Decrease the global debt ceiling by a specific amount. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to reduce in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function decreaseGlobalDebtCeiling(uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-Line-decrease-precision\"\r\n        address _vat = vat();\r\n        setValue(_vat, \"Line\", sub(DssVat(_vat).Line(), _amount * RAD));\r\n    }\r\n    /**\r\n        @dev Set the Dai Savings Rate. See: docs/rates.txt\r\n        @param _rate   The accumulated rate (ex. 4% => 1000000001243680656318820312)\r\n        @param _doDrip `true` to accumulate interest owed\r\n    */\r\n    function setDSR(uint256 _rate, bool _doDrip) public {\r\n        require((_rate >= RAY) && (_rate <= RATES_ONE_HUNDRED_PCT));  // \"LibDssExec/dsr-out-of-bounds\"\r\n        if (_doDrip) Drippable(pot()).drip();\r\n        setValue(pot(), \"dsr\", _rate);\r\n    }\r\n    /**\r\n        @dev Set the DAI amount for system surplus auctions. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setSurplusAuctionAmount(uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-vow-bump-precision\"\r\n        setValue(vow(), \"bump\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Set the DAI amount for system surplus buffer, must be exceeded before surplus auctions start. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setSurplusBuffer(uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-vow-hump-precision\"\r\n        setValue(vow(), \"hump\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Set minimum bid increase for surplus auctions. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _pct_bps The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setMinSurplusAuctionBidIncrease(uint256 _pct_bps) public {\r\n        require(_pct_bps < BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-flap-beg-precision\"\r\n        setValue(flap(), \"beg\", add(WAD, wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT)));\r\n    }\r\n    /**\r\n        @dev Set bid duration for surplus auctions.\r\n        @param _duration Amount of time for bids. (in seconds)\r\n    */\r\n    function setSurplusAuctionBidDuration(uint256 _duration) public {\r\n        setValue(flap(), \"ttl\", _duration);\r\n    }\r\n    /**\r\n        @dev Set total auction duration for surplus auctions.\r\n        @param _duration Amount of time for auctions. (in seconds)\r\n    */\r\n    function setSurplusAuctionDuration(uint256 _duration) public {\r\n        setValue(flap(), \"tau\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the number of seconds that pass before system debt is auctioned for MKR tokens.\r\n        @param _duration Duration in seconds\r\n    */\r\n    function setDebtAuctionDelay(uint256 _duration) public {\r\n        setValue(vow(), \"wait\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the DAI amount for system debt to be covered by each debt auction. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setDebtAuctionDAIAmount(uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-vow-sump-precision\"\r\n        setValue(vow(), \"sump\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Set the starting MKR amount to be auctioned off to cover system debt in debt auctions. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in MKR (ex. 250 MKR amount == 250)\r\n    */\r\n    function setDebtAuctionMKRAmount(uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-vow-dump-precision\"\r\n        setValue(vow(), \"dump\", _amount * WAD);\r\n    }\r\n    /**\r\n        @dev Set minimum bid increase for debt auctions. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setMinDebtAuctionBidIncrease(uint256 _pct_bps) public {\r\n        require(_pct_bps < BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-flap-beg-precision\"\r\n        setValue(flop(), \"beg\", add(WAD, wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT)));\r\n    }\r\n    /**\r\n        @dev Set bid duration for debt auctions.\r\n        @param _duration Amount of time for bids.\r\n    */\r\n    function setDebtAuctionBidDuration(uint256 _duration) public {\r\n        setValue(flop(), \"ttl\", _duration);\r\n    }\r\n    /**\r\n        @dev Set total auction duration for debt auctions.\r\n        @param _duration Amount of time for auctions.\r\n    */\r\n    function setDebtAuctionDuration(uint256 _duration) public {\r\n        setValue(flop(), \"tau\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the rate of increasing amount of MKR out for auction during debt auctions. Amount will be converted to the correct internal precision.\r\n        @dev MKR amount is increased by this rate every \"tick\" (if auction duration has passed and no one has bid on the MKR)\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setDebtAuctionMKRIncreaseRate(uint256 _pct_bps) public {\r\n        setValue(flop(), \"pad\", add(WAD, wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT)));\r\n    }\r\n    /**\r\n        @dev Set the maximum total DAI amount that can be out for liquidation in the system at any point. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in DAI (ex. 250,000 DAI amount == 250000)\r\n    */\r\n    function setMaxTotalDAILiquidationAmount(uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-dog-Hole-precision\"\r\n        setValue(dog(), \"Hole\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev (LIQ 1.2) Set the maximum total DAI amount that can be out for liquidation in the system at any point. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in DAI (ex. 250,000 DAI amount == 250000)\r\n    */\r\n    function setMaxTotalDAILiquidationAmountLEGACY(uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-cat-box-amount\"\r\n        setValue(cat(), \"box\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Set the duration of time that has to pass during emergency shutdown before collateral can start being claimed by DAI holders.\r\n        @param _duration Time in seconds to set for ES processing time\r\n    */\r\n    function setEmergencyShutdownProcessingTime(uint256 _duration) public {\r\n        setValue(end(), \"wait\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the global stability fee (is not typically used, currently is 0).\r\n            Many of the settings that change weekly rely on the rate accumulator\r\n            described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n            To check this yourself, use the following rate calculation (example 8%):\r\n\r\n            $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n\r\n            A table of rates can also be found at:\r\n            https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n        @param _rate   The accumulated rate (ex. 4% => 1000000001243680656318820312)\r\n    */\r\n    function setGlobalStabilityFee(uint256 _rate) public {\r\n        require((_rate >= RAY) && (_rate <= RATES_ONE_HUNDRED_PCT));  // \"LibDssExec/global-stability-fee-out-of-bounds\"\r\n        setValue(jug(), \"base\", _rate);\r\n    }\r\n    /**\r\n        @dev Set the value of DAI in the reference asset (e.g. $1 per DAI). Value will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is value * RAY / 1000\r\n        @param _value The value to set as integer (x1000) (ex. $1.025 == 1025)\r\n    */\r\n    function setDAIReferenceValue(uint256 _value) public {\r\n        require(_value < WAD);  // \"LibDssExec/incorrect-par-precision\"\r\n        setValue(spotter(), \"par\", rdiv(_value, 1000));\r\n    }\r\n\r\n    /*****************************/\r\n    /*** Collateral Management ***/\r\n    /*****************************/\r\n    /**\r\n        @dev Set a collateral debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setIlkDebtCeiling(bytes32 _ilk, uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-ilk-line-precision\"\r\n        setValue(vat(), _ilk, \"line\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Increase a collateral debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to increase in DAI (ex. 10m DAI amount == 10000000)\r\n        @param _global If true, increases the global debt ceiling by _amount\r\n    */\r\n    function increaseIlkDebtCeiling(bytes32 _ilk, uint256 _amount, bool _global) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-ilk-line-precision\"\r\n        address _vat = vat();\r\n        (,,,uint256 line_,) = DssVat(_vat).ilks(_ilk);\r\n        setValue(_vat, _ilk, \"line\", add(line_, _amount * RAD));\r\n        if (_global) { increaseGlobalDebtCeiling(_amount); }\r\n    }\r\n    /**\r\n        @dev Decrease a collateral debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to decrease in DAI (ex. 10m DAI amount == 10000000)\r\n        @param _global If true, decreases the global debt ceiling by _amount\r\n    */\r\n    function decreaseIlkDebtCeiling(bytes32 _ilk, uint256 _amount, bool _global) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-ilk-line-precision\"\r\n        address _vat = vat();\r\n        (,,,uint256 line_,) = DssVat(_vat).ilks(_ilk);\r\n        setValue(_vat, _ilk, \"line\", sub(line_, _amount * RAD));\r\n        if (_global) { decreaseGlobalDebtCeiling(_amount); }\r\n    }\r\n    /**\r\n        @dev Set the parameters for an ilk in the \"MCD_IAM_AUTO_LINE\" auto-line\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The Maximum value (ex. 100m DAI amount == 100000000)\r\n        @param _gap    The amount of Dai per step (ex. 5m Dai == 5000000)\r\n        @param _ttl    The amount of time (in seconds)\r\n    */\r\n    function setIlkAutoLineParameters(bytes32 _ilk, uint256 _amount, uint256 _gap, uint256 _ttl) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-auto-line-amount-precision\"\r\n        require(_gap < WAD);  // \"LibDssExec/incorrect-auto-line-gap-precision\"\r\n        IAMLike(autoLine()).setIlk(_ilk, _amount * RAD, _gap * RAD, _ttl);\r\n    }\r\n    /**\r\n        @dev Set the debt ceiling for an ilk in the \"MCD_IAM_AUTO_LINE\" auto-line without updating the time values\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The Maximum value (ex. 100m DAI amount == 100000000)\r\n    */\r\n    function setIlkAutoLineDebtCeiling(bytes32 _ilk, uint256 _amount) public {\r\n        address _autoLine = autoLine();\r\n        (, uint256 gap, uint48 ttl,,) = IAMLike(_autoLine).ilks(_ilk);\r\n        require(gap != 0 && ttl != 0);  // \"LibDssExec/auto-line-not-configured\"\r\n        IAMLike(_autoLine).setIlk(_ilk, _amount * RAD, uint256(gap), uint256(ttl));\r\n    }\r\n    /**\r\n        @dev Remove an ilk in the \"MCD_IAM_AUTO_LINE\" auto-line\r\n        @param _ilk    The ilk to remove (ex. bytes32(\"ETH-A\"))\r\n    */\r\n    function removeIlkFromAutoLine(bytes32 _ilk) public {\r\n        IAMLike(autoLine()).remIlk(_ilk);\r\n    }\r\n    /**\r\n        @dev Set a collateral minimum vault amount. Amount will be converted to the correct internal precision.\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setIlkMinVaultAmount(bytes32 _ilk, uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-ilk-dust-precision\"\r\n        setValue(vat(), _ilk, \"dust\", _amount * RAD);\r\n        (bool ok,) = clip(_ilk).call(abi.encodeWithSignature(\"upchost()\")); ok;\r\n    }\r\n    /**\r\n        @dev Set a collateral liquidation penalty. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 10.25% = 10.25 * 100 = 1025)\r\n    */\r\n    function setIlkLiquidationPenalty(bytes32 _ilk, uint256 _pct_bps) public {\r\n        require(_pct_bps < BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-ilk-chop-precision\"\r\n        setValue(dog(), _ilk, \"chop\", add(WAD, wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT)));\r\n        (bool ok,) = clip(_ilk).call(abi.encodeWithSignature(\"upchost()\")); ok;\r\n    }\r\n    /**\r\n        @dev Set max DAI amount for liquidation per vault for collateral. Amount will be converted to the correct internal precision.\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setIlkMaxLiquidationAmount(bytes32 _ilk, uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-ilk-hole-precision\"\r\n        setValue(dog(), _ilk, \"hole\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Set a collateral liquidation ratio. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is pct * RAY / 10,000\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 150% = 150 * 100 = 15000)\r\n    */\r\n    function setIlkLiquidationRatio(bytes32 _ilk, uint256 _pct_bps) public {\r\n        require(_pct_bps < 10 * BPS_ONE_HUNDRED_PCT); // \"LibDssExec/incorrect-ilk-mat-precision\" // Fails if pct >= 1000%\r\n        require(_pct_bps >= BPS_ONE_HUNDRED_PCT); // the liquidation ratio has to be bigger or equal to 100%\r\n        setValue(spotter(), _ilk, \"mat\", rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n    }\r\n    /**\r\n        @dev Set an auction starting multiplier. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is pct * RAY / 10,000\r\n        @param _ilk      The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _pct_bps  The pct, in basis points, to set in integer form (x100). (ex. 1.3x starting multiplier = 130% = 13000)\r\n    */\r\n    function setStartingPriceMultiplicativeFactor(bytes32 _ilk, uint256 _pct_bps) public {\r\n        require(_pct_bps < 10 * BPS_ONE_HUNDRED_PCT); // \"LibDssExec/incorrect-ilk-mat-precision\" // Fails if gt 10x\r\n        require(_pct_bps >= BPS_ONE_HUNDRED_PCT); // fail if start price is less than OSM price\r\n        setValue(clip(_ilk), \"buf\", rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n    }\r\n\r\n    /**\r\n        @dev Set the amout of time before an auction resets.\r\n        @param _ilk      The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _duration Amount of time before auction resets (in seconds).\r\n    */\r\n    function setAuctionTimeBeforeReset(bytes32 _ilk, uint256 _duration) public {\r\n        setValue(clip(_ilk), \"tail\", _duration);\r\n    }\r\n\r\n    /**\r\n        @dev Percentage drop permitted before auction reset\r\n        @param _ilk     The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _pct_bps The pct, in basis points, of drop to permit (x100).\r\n    */\r\n    function setAuctionPermittedDrop(bytes32 _ilk, uint256 _pct_bps) public {\r\n        require(_pct_bps < BPS_ONE_HUNDRED_PCT); // \"LibDssExec/incorrect-clip-cusp-value\"\r\n        setValue(clip(_ilk), \"cusp\", rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n    }\r\n\r\n    /**\r\n        @dev Percentage of tab to suck from vow to incentivize keepers. Amount will be converted to the correct internal precision.\r\n        @param _ilk     The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _pct_bps The pct, in basis points, of the tab to suck. (0.01% == 1)\r\n    */\r\n    function setKeeperIncentivePercent(bytes32 _ilk, uint256 _pct_bps) public {\r\n        require(_pct_bps < BPS_ONE_HUNDRED_PCT); // \"LibDssExec/incorrect-clip-chip-precision\"\r\n        setValue(clip(_ilk), \"chip\", wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n    }\r\n\r\n    /**\r\n        @dev Set max DAI amount for flat rate keeper incentive. Amount will be converted to the correct internal precision.\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to set in DAI (ex. 1000 DAI amount == 1000)\r\n    */\r\n    function setKeeperIncentiveFlatRate(bytes32 _ilk, uint256 _amount) public {\r\n        require(_amount < WAD); // \"LibDssExec/incorrect-clip-tip-precision\"\r\n        setValue(clip(_ilk), \"tip\", _amount * RAD);\r\n    }\r\n\r\n    /**\r\n        @dev Sets the circuit breaker price tolerance in the clipper mom.\r\n            This is somewhat counter-intuitive,\r\n             to accept a 25% price drop, use a value of 75%\r\n        @param _clip    The clipper to set the tolerance for\r\n        @param _pct_bps The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setLiquidationBreakerPriceTolerance(address _clip, uint256 _pct_bps) public {\r\n        require(_pct_bps < BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-clippermom-price-tolerance\"\r\n        MomLike(clipperMom()).setPriceTolerance(_clip, rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n    }\r\n\r\n    /**\r\n        @dev Set the stability fee for a given ilk.\r\n            Many of the settings that change weekly rely on the rate accumulator\r\n            described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n            To check this yourself, use the following rate calculation (example 8%):\r\n\r\n            $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n\r\n            A table of rates can also be found at:\r\n            https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\") )\r\n        @param _rate   The accumulated rate (ex. 4% => 1000000001243680656318820312)\r\n        @param _doDrip `true` to accumulate stability fees for the collateral\r\n    */\r\n    function setIlkStabilityFee(bytes32 _ilk, uint256 _rate, bool _doDrip) public {\r\n        require((_rate >= RAY) && (_rate <= RATES_ONE_HUNDRED_PCT));  // \"LibDssExec/ilk-stability-fee-out-of-bounds\"\r\n        address _jug = jug();\r\n        if (_doDrip) Drippable(_jug).drip(_ilk);\r\n\r\n        setValue(_jug, _ilk, \"duty\", _rate);\r\n    }\r\n\r\n\r\n    /*************************/\r\n    /*** Abacus Management ***/\r\n    /*************************/\r\n\r\n    /**\r\n        @dev Set the number of seconds from the start when the auction reaches zero price.\r\n        @dev Abacus:LinearDecrease only.\r\n        @param _calc     The address of the LinearDecrease pricing contract\r\n        @param _duration Amount of time for auctions.\r\n    */\r\n    function setLinearDecrease(address _calc, uint256 _duration) public {\r\n        setValue(_calc, \"tau\", _duration);\r\n    }\r\n\r\n    /**\r\n        @dev Set the number of seconds for each price step.\r\n        @dev Abacus:StairstepExponentialDecrease only.\r\n        @param _calc     The address of the StairstepExponentialDecrease pricing contract\r\n        @param _duration Length of time between price drops [seconds]\r\n        @param _pct_bps Per-step multiplicative factor in basis points. (ex. 99% == 9900)\r\n    */\r\n    function setStairstepExponentialDecrease(address _calc, uint256 _duration, uint256 _pct_bps) public {\r\n        require(_pct_bps < BPS_ONE_HUNDRED_PCT); // DssExecLib/cut-too-high\r\n        setValue(_calc, \"cut\", rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n        setValue(_calc, \"step\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the number of seconds for each price step. (99% cut = 1% price drop per step)\r\n             Amounts will be converted to the correct internal precision.\r\n        @dev Abacus:ExponentialDecrease only\r\n        @param _calc     The address of the ExponentialDecrease pricing contract\r\n        @param _pct_bps Per-step multiplicative factor in basis points. (ex. 99% == 9900)\r\n    */\r\n    function setExponentialDecrease(address _calc, uint256 _pct_bps) public {\r\n        require(_pct_bps < BPS_ONE_HUNDRED_PCT); // DssExecLib/cut-too-high\r\n        setValue(_calc, \"cut\", rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n    }\r\n\r\n    /*************************/\r\n    /*** Oracle Management ***/\r\n    /*************************/\r\n    /**\r\n        @dev Allows an oracle to read prices from its source feeds\r\n        @param _oracle  An OSM or LP oracle contract\r\n    */\r\n    function whitelistOracleMedians(address _oracle) public {\r\n        (bool ok, bytes memory data) = _oracle.call(abi.encodeWithSignature(\"orb0()\"));\r\n        if (ok) {\r\n            // Token is an LP oracle\r\n            address median0 = abi.decode(data, (address));\r\n            addReaderToMedianWhitelist(median0, _oracle);\r\n            addReaderToMedianWhitelist(OracleLike_2(_oracle).orb1(), _oracle);\r\n        } else {\r\n            // Standard OSM\r\n            addReaderToMedianWhitelist(OracleLike_2(_oracle).src(), _oracle);\r\n        }\r\n    }\r\n\r\n    /**\r\n        @dev Adds oracle feeds to the Median's writer whitelist, allowing the feeds to write prices.\r\n        @param _median  Median core contract address\r\n        @param _feeds   Array of oracle feed addresses to add to whitelist\r\n    */\r\n    function addWritersToMedianWhitelist(address _median, address[] memory _feeds) public {\r\n        OracleLike_2(_median).lift(_feeds);\r\n    }\r\n    /**\r\n        @dev Removes oracle feeds to the Median's writer whitelist, disallowing the feeds to write prices.\r\n        @param _median  Median core contract address\r\n        @param _feeds   Array of oracle feed addresses to remove from whitelist\r\n    */\r\n    function removeWritersFromMedianWhitelist(address _median, address[] memory _feeds) public {\r\n        OracleLike_2(_median).drop(_feeds);\r\n    }\r\n    /**\r\n        @dev Adds addresses to the Median's reader whitelist, allowing the addresses to read prices from the median.\r\n        @param _median  Median core contract address\r\n        @param _readers Array of addresses to add to whitelist\r\n    */\r\n    function addReadersToMedianWhitelist(address _median, address[] memory _readers) public {\r\n        OracleLike_2(_median).kiss(_readers);\r\n    }\r\n    /**\r\n        @dev Adds an address to the Median's reader whitelist, allowing the address to read prices from the median.\r\n        @param _median  Median core contract address\r\n        @param _reader  Address to add to whitelist\r\n    */\r\n    function addReaderToMedianWhitelist(address _median, address _reader) public {\r\n        OracleLike_2(_median).kiss(_reader);\r\n    }\r\n    /**\r\n        @dev Removes addresses from the Median's reader whitelist, disallowing the addresses to read prices from the median.\r\n        @param _median  Median core contract address\r\n        @param _readers Array of addresses to remove from whitelist\r\n    */\r\n    function removeReadersFromMedianWhitelist(address _median, address[] memory _readers) public {\r\n        OracleLike_2(_median).diss(_readers);\r\n    }\r\n    /**\r\n        @dev Removes an address to the Median's reader whitelist, disallowing the address to read prices from the median.\r\n        @param _median  Median core contract address\r\n        @param _reader  Address to remove from whitelist\r\n    */\r\n    function removeReaderFromMedianWhitelist(address _median, address _reader) public {\r\n        OracleLike_2(_median).diss(_reader);\r\n    }\r\n    /**\r\n        @dev Sets the minimum number of valid messages from whitelisted oracle feeds needed to update median price.\r\n        @param _median     Median core contract address\r\n        @param _minQuorum  Minimum number of valid messages from whitelisted oracle feeds needed to update median price (NOTE: MUST BE ODD NUMBER)\r\n    */\r\n    function setMedianWritersQuorum(address _median, uint256 _minQuorum) public {\r\n        OracleLike_2(_median).setBar(_minQuorum);\r\n    }\r\n    /**\r\n        @dev Adds an address to the Median's reader whitelist, allowing the address to read prices from the OSM.\r\n        @param _osm        Oracle Security Module (OSM) core contract address\r\n        @param _reader     Address to add to whitelist\r\n    */\r\n    function addReaderToOSMWhitelist(address _osm, address _reader) public {\r\n        OracleLike_2(_osm).kiss(_reader);\r\n    }\r\n    /**\r\n        @dev Removes an address to the Median's reader whitelist, disallowing the address to read prices from the OSM.\r\n        @param _osm        Oracle Security Module (OSM) core contract address\r\n        @param _reader     Address to remove from whitelist\r\n    */\r\n    function removeReaderFromOSMWhitelist(address _osm, address _reader) public {\r\n        OracleLike_2(_osm).diss(_reader);\r\n    }\r\n    /**\r\n        @dev Add OSM address to OSM mom, allowing it to be frozen by governance.\r\n        @param _osm        Oracle Security Module (OSM) core contract address\r\n        @param _ilk        Collateral type using OSM\r\n    */\r\n    function allowOSMFreeze(address _osm, bytes32 _ilk) public {\r\n        MomLike(osmMom()).setOsm(_ilk, _osm);\r\n    }\r\n\r\n\r\n    /*****************************/\r\n    /*** Collateral Onboarding ***/\r\n    /*****************************/\r\n\r\n    /**\r\n        @dev Performs basic functions and sanity checks to add a new collateral type to the MCD system\r\n        @param _ilk      Collateral type key code [Ex. \"ETH-A\"]\r\n        @param _gem      Address of token contract\r\n        @param _join     Address of join adapter\r\n        @param _clip     Address of liquidation agent\r\n        @param _calc     Address of the pricing function\r\n        @param _pip      Address of price feed\r\n    */\r\n    function addCollateralBase(\r\n        bytes32 _ilk,\r\n        address _gem,\r\n        address _join,\r\n        address _clip,\r\n        address _calc,\r\n        address _pip\r\n    ) public {\r\n        // Sanity checks\r\n        address _vat = vat();\r\n        address _dog = dog();\r\n        address _spotter = spotter();\r\n        require(JoinLike(_join).vat() == _vat);     // \"join-vat-not-match\"\r\n        require(JoinLike(_join).ilk() == _ilk);     // \"join-ilk-not-match\"\r\n        require(JoinLike(_join).gem() == _gem);     // \"join-gem-not-match\"\r\n        require(JoinLike(_join).dec() ==\r\n                   ERC20(_gem).decimals());         // \"join-dec-not-match\"\r\n        require(ClipLike(_clip).vat() == _vat);     // \"clip-vat-not-match\"\r\n        require(ClipLike(_clip).dog() == _dog);     // \"clip-dog-not-match\"\r\n        require(ClipLike(_clip).ilk() == _ilk);     // \"clip-ilk-not-match\"\r\n        require(ClipLike(_clip).spotter() == _spotter);  // \"clip-ilk-not-match\"\r\n\r\n        // Set the token PIP in the Spotter\r\n        setContract(spotter(), _ilk, \"pip\", _pip);\r\n\r\n        // Set the ilk Clipper in the Dog\r\n        setContract(_dog, _ilk, \"clip\", _clip);\r\n        // Set vow in the clip\r\n        setContract(_clip, \"vow\", vow());\r\n        // Set the pricing function for the Clipper\r\n        setContract(_clip, \"calc\", _calc);\r\n\r\n        // Init ilk in Vat & Jug\r\n        Initializable(_vat).init(_ilk);  // Vat\r\n        Initializable(jug()).init(_ilk);  // Jug\r\n\r\n        // Allow ilk Join to modify Vat registry\r\n        authorize(_vat, _join);\r\n        // Allow ilk Join to suck dai for keepers\r\n        authorize(_vat, _clip);\r\n        // Allow the ilk Clipper to reduce the Dog hole on deal()\r\n        authorize(_dog, _clip);\r\n        // Allow Dog to kick auctions in ilk Clipper\r\n        authorize(_clip, _dog);\r\n        // Allow End to yank auctions in ilk Clipper\r\n        authorize(_clip, end());\r\n        // Authorize the ESM to execute in the clipper\r\n        authorize(_clip, esm());\r\n\r\n        // Add new ilk to the IlkRegistry\r\n        RegistryLike(reg()).add(_join);\r\n    }\r\n\r\n    // Complete collateral onboarding logic.\r\n    function addNewCollateral(CollateralOpts memory co) public {\r\n        // Add the collateral to the system.\r\n        addCollateralBase(co.ilk, co.gem, co.join, co.clip, co.calc, co.pip);\r\n        address clipperMom_ = clipperMom();\r\n\r\n        if (!co.isLiquidatable) {\r\n            // Disallow Dog to kick auctions in ilk Clipper\r\n            setValue(co.clip, \"stopped\", 3);\r\n        } else {\r\n            // Grant ClipperMom access to the ilk Clipper\r\n            authorize(co.clip, clipperMom_);\r\n        }\r\n\r\n        if(co.isOSM) { // If pip == OSM\r\n            // Allow OsmMom to access to the TOKEN OSM\r\n            authorize(co.pip, osmMom());\r\n            if (co.whitelistOSM) { // If median is src in OSM\r\n                // Whitelist OSM to read the Median data (only necessary if it is the first time the token is being added to an ilk)\r\n                whitelistOracleMedians(co.pip);\r\n            }\r\n            // Whitelist Spotter to read the OSM data (only necessary if it is the first time the token is being added to an ilk)\r\n            addReaderToOSMWhitelist(co.pip, spotter());\r\n            // Whitelist Clipper on pip\r\n            addReaderToOSMWhitelist(co.pip, co.clip);\r\n            // Allow the clippermom to access the feed\r\n            addReaderToOSMWhitelist(co.pip, clipperMom_);\r\n            // Whitelist End to read the OSM data (only necessary if it is the first time the token is being added to an ilk)\r\n            addReaderToOSMWhitelist(co.pip, end());\r\n            // Set TOKEN OSM in the OsmMom for new ilk\r\n            allowOSMFreeze(co.pip, co.ilk);\r\n        }\r\n        // Increase the global debt ceiling by the ilk ceiling\r\n        increaseGlobalDebtCeiling(co.ilkDebtCeiling);\r\n        // Set the ilk debt ceiling\r\n        setIlkDebtCeiling(co.ilk, co.ilkDebtCeiling);\r\n        // Set the ilk dust\r\n        setIlkMinVaultAmount(co.ilk, co.minVaultAmount);\r\n        // Set the hole size\r\n        setIlkMaxLiquidationAmount(co.ilk, co.maxLiquidationAmount);\r\n        // Set the ilk liquidation penalty\r\n        setIlkLiquidationPenalty(co.ilk, co.liquidationPenalty);\r\n\r\n        // Set the ilk stability fee\r\n        setIlkStabilityFee(co.ilk, co.ilkStabilityFee, true);\r\n\r\n        // Set the auction starting price multiplier\r\n        setStartingPriceMultiplicativeFactor(co.ilk, co.startingPriceFactor);\r\n\r\n        // Set the amount of time before an auction resets.\r\n        setAuctionTimeBeforeReset(co.ilk, co.auctionDuration);\r\n\r\n        // Set the allowed auction drop percentage before reset\r\n        setAuctionPermittedDrop(co.ilk, co.permittedDrop);\r\n\r\n        // Set the ilk min collateralization ratio\r\n        setIlkLiquidationRatio(co.ilk, co.liquidationRatio);\r\n\r\n        // Set the price tolerance in the liquidation circuit breaker\r\n        setLiquidationBreakerPriceTolerance(co.clip, co.breakerTolerance);\r\n\r\n        // Set a flat rate for the keeper reward\r\n        setKeeperIncentiveFlatRate(co.ilk, co.kprFlatReward);\r\n\r\n        // Set the percentage of liquidation as keeper award\r\n        setKeeperIncentivePercent(co.ilk, co.kprPctReward);\r\n\r\n        // Update ilk spot value in Vat\r\n        updateCollateralPrice(co.ilk);\r\n    }\r\n\r\n    /***************/\r\n    /*** Payment ***/\r\n    /***************/\r\n    /**\r\n        @dev Send a payment in ERC20 DAI from the surplus buffer.\r\n        @param _target The target address to send the DAI to.\r\n        @param _amount The amount to send in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function sendPaymentFromSurplusBuffer(address _target, uint256 _amount) public {\r\n        require(_amount < WAD);  // \"LibDssExec/incorrect-ilk-line-precision\"\r\n        DssVat(vat()).suck(vow(), address(this), _amount * RAD);\r\n        JoinLike(daiJoin()).exit(_target, _amount * WAD);\r\n    }\r\n\r\n    /************/\r\n    /*** Misc ***/\r\n    /************/\r\n    /**\r\n        @dev Initiate linear interpolation on an administrative value over time.\r\n        @param _name        The label for this lerp instance\r\n        @param _target      The target contract\r\n        @param _what        The target parameter to adjust\r\n        @param _startTime   The time for this lerp\r\n        @param _start       The start value for the target parameter\r\n        @param _end         The end value for the target parameter\r\n        @param _duration    The duration of the interpolation\r\n    */\r\n    function linearInterpolation(bytes32 _name, address _target, bytes32 _what, uint256 _startTime, uint256 _start, uint256 _end, uint256 _duration) public returns (address) {\r\n        address lerp = LerpFactoryLike(lerpFab()).newLerp(_name, _target, _what, _startTime, _start, _end, _duration);\r\n        Authorizable(_target).rely(lerp);\r\n        LerpLike(lerp).tick();\r\n        return lerp;\r\n    }\r\n    /**\r\n        @dev Initiate linear interpolation on an administrative value over time.\r\n        @param _name        The label for this lerp instance\r\n        @param _target      The target contract\r\n        @param _ilk         The ilk to target\r\n        @param _what        The target parameter to adjust\r\n        @param _startTime   The time for this lerp\r\n        @param _start       The start value for the target parameter\r\n        @param _end         The end value for the target parameter\r\n        @param _duration    The duration of the interpolation\r\n    */\r\n    function linearInterpolation(bytes32 _name, address _target, bytes32 _ilk, bytes32 _what, uint256 _startTime, uint256 _start, uint256 _end, uint256 _duration) public returns (address) {\r\n        address lerp = LerpFactoryLike(lerpFab()).newIlkLerp(_name, _target, _ilk, _what, _startTime, _start, _end, _duration);\r\n        Authorizable(_target).rely(lerp);\r\n        LerpLike(lerp).tick();\r\n        return lerp;\r\n    }\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssAction.sol\r\n//\r\n// DssAction.sol -- DSS Executive Spell Actions\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.12; */\r\n\r\n/* import { DssExecLib } from \"./DssExecLib.sol\"; */\r\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\r\n\r\ninterface OracleLike_1 {\r\n    function src() external view returns (address);\r\n}\r\n\r\nabstract contract DssAction {\r\n\r\n    using DssExecLib for *;\r\n\r\n    // Modifier used to limit execution time when office hours is enabled\r\n    modifier limited {\r\n        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), \"Outside office hours\");\r\n        _;\r\n    }\r\n\r\n    // Office Hours defaults to true by default.\r\n    //   To disable office hours, override this function and\r\n    //    return false in the inherited action.\r\n    function officeHours() public virtual returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\r\n    function execute() external limited {\r\n        actions();\r\n    }\r\n\r\n    // DssAction developer must override `actions()` and place all actions to be called inside.\r\n    //   The DssExec function will call this subject to the officeHours limiter\r\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\r\n    function actions() public virtual;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\r\n    function description() external virtual view returns (string memory);\r\n\r\n    // Returns the next available cast time\r\n    function nextCastTime(uint256 eta) external returns (uint256 castTime) {\r\n        require(eta <= uint40(-1));\r\n        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\r\n    }\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssExec.sol\r\n//\r\n// DssExec.sol -- MakerDAO Executive Spell Template\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.12; */\r\n\r\ninterface PauseAbstract {\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\ninterface Changelog {\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface SpellAction {\r\n    function officeHours() external view returns (bool);\r\n    function description() external view returns (string memory);\r\n    function nextCastTime(uint256) external view returns (uint256);\r\n}\r\n\r\ncontract DssExec {\r\n\r\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n    uint256                 public eta;\r\n    bytes                   public sig;\r\n    bool                    public done;\r\n    bytes32       immutable public tag;\r\n    address       immutable public action;\r\n    uint256       immutable public expiration;\r\n    PauseAbstract immutable public pause;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\r\n    function description() external view returns (string memory) {\r\n        return SpellAction(action).description();\r\n    }\r\n\r\n    function officeHours() external view returns (bool) {\r\n        return SpellAction(action).officeHours();\r\n    }\r\n\r\n    function nextCastTime() external view returns (uint256 castTime) {\r\n        return SpellAction(action).nextCastTime(eta);\r\n    }\r\n\r\n    // @param _description  A string description of the spell\r\n    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\r\n    // @param _spellAction  The address of the spell action\r\n    constructor(uint256 _expiration, address _spellAction) public {\r\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\r\n        expiration  = _expiration;\r\n        action      = _spellAction;\r\n\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        bytes32 _tag;                    // Required for assembly access\r\n        address _action = _spellAction;  // Required for assembly access\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + PauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}\r\n\r\n////// src/DssSpell.sol\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.6.12; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\n/* import \"dss-exec-lib/DssExec.sol\"; */\r\n/* import \"dss-exec-lib/DssAction.sol\"; */\r\n\r\ninterface RwaOutputConduitLike_1 {\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n}\r\n\r\ninterface Bumpable {\r\n    function bump(bytes32, uint256) external;\r\n}\r\n\r\ncontract DssSpellAction is DssAction {\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/40b362fc70793e9980a8d53c47b1937e05d0c6d3/governance/votes/Executive%20vote%20-%20August%2020%2C%202021.md -q -O - 2>/dev/null)\"\r\n    string public constant override description =\r\n        \"2021-08-20 MakerDAO Executive Spell | Hash: 0x2b31d3c81f06eac1e304c3c8b257878729f518d1f9632d95c37efa19241eb8a7\";\r\n\r\n    // Foundation SC team old deployer address (for removal from RWA output conduit)\r\n    address constant SC_DOMAIN_DEPLOYER_07 = 0xDA0FaB0700A4389F6E6679aBAb1692B4601ce9bf;\r\n\r\n    // Genesis broker/dealer address for 6s (for addition to RWA output conduit):\r\n    // https://forum.makerdao.com/t/6s-broker-dealer-dai-address/9780\r\n    address constant GENESIS_6S = 0xE5C35757c296FD19faA2bFF85e66C6B25AC8b978;\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    // A table of rates can be found at\r\n    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n    //\r\n    uint256 constant ZERO_PCT_RATE  = 1000000000000000000000000000;\r\n    uint256 constant THREE_PCT_RATE = 1000000000937303470807876289;\r\n\r\n    // Math\r\n    uint256 constant THOUSAND = 10 ** 3;\r\n    uint256 constant MILLION  = 10 ** 6;\r\n    uint256 constant WAD      = 10 ** 18;\r\n    uint256 constant RAY      = 10 ** 27;\r\n    uint256 constant RAD      = 10 ** 45;\r\n\r\n    address constant MATIC                   = 0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0;\r\n    address constant MCD_JOIN_MATIC_A        = 0x885f16e177d45fC9e7C87e1DA9fd47A9cfcE8E13;\r\n    address constant MCD_CLIP_MATIC_A        = 0x29342F530ed6120BDB219D602DaFD584676293d1;\r\n    address constant MCD_CLIP_CALC_MATIC_A   = 0xdF8C347B06a31c6ED11f8213C2366348BFea68dB;\r\n    address constant PIP_MATIC               = 0x8874964279302e6d4e523Fb1789981C39a1034Ba;\r\n\r\n    address constant PAX                     = 0x8E870D67F660D95d5be530380D0eC0bd388289E1;\r\n    address constant MCD_JOIN_PSM_PAX_A      = 0x7bbd8cA5e413bCa521C2c80D8d1908616894Cf21;\r\n    address constant MCD_CLIP_PSM_PAX_A      = 0x5322a3551bc6a1b39d5D142e5e38Dc5B4bc5B3d2;\r\n    address constant MCD_CLIP_CALC_PSM_PAX_A = 0xC19eAc21A4FccdD30812F5fF5FebFbD6817b7593;\r\n    address constant MCD_PSM_PAX_A           = 0x961Ae24a1Ceba861D1FDf723794f6024Dc5485Cf;\r\n    address constant PIP_PSM_PAX             = 0x043B963E1B2214eC90046167Ea29C2c8bDD7c0eC;\r\n\r\n    address constant CALC_FAB                = 0xE1820A2780193d74939CcA104087CADd6c1aA13A;\r\n\r\n    function actions() public override {\r\n\r\n        //\r\n        // RWA Updates\r\n        //\r\n        bytes32 ilk = bytes32(\"RWA001-A\");\r\n        address MIP21_LIQUIDATION_ORACLE = DssExecLib.getChangelogAddress(\r\n            \"MIP21_LIQUIDATION_ORACLE\"\r\n        );\r\n        address RWA001_A_OUTPUT_CONDUIT = DssExecLib.getChangelogAddress(\r\n            \"RWA001_A_OUTPUT_CONDUIT\"\r\n        );\r\n\r\n        // This old foundation deployer address address was only used to test\r\n        // the circuit, and must be removed before the debt ceiling goes live.\r\n        RwaOutputConduitLike_1(RWA001_A_OUTPUT_CONDUIT).diss(\r\n            SC_DOMAIN_DEPLOYER_07\r\n        );\r\n\r\n        // Adds the Genesis broker/dealer address to the output conduit\r\n        RwaOutputConduitLike_1(RWA001_A_OUTPUT_CONDUIT).kiss(GENESIS_6S);\r\n\r\n        // increase the ilk and global DC. Check page 9 of the term sheet here:\r\n        // https://forum.makerdao.com/t/mip13c3-sp4-declaration-of-intent-commercial-points-off-chain-asset-backed-lender-to-onboard-real-world-assets-as-collateral-for-a-dai-loan/3914\r\n        // executive ratification here:\r\n        // https://vote.makerdao.com/executive/template-executive-vote-approve-october-2020-governance-cycle-bundle-october-26-2020?network=mainnet#proposal-detail\r\n        DssExecLib.increaseIlkDebtCeiling(\r\n            ilk,\r\n            14_999_000,  // DC to 15 million less the existing 1000\r\n            true\r\n        );\r\n\r\n        // Increase the price to enable DAI to be drawn -- value corresponds to\r\n        // [ (debt ceiling) + (2 years interest at current rate) ] * mat, i.e.\r\n        // 15MM * 1.03^2 * 1.00 as a WAD\r\n        Bumpable(MIP21_LIQUIDATION_ORACLE).bump(ilk, 15_913_500 * WAD);\r\n        DssExecLib.updateCollateralPrice(ilk);\r\n\r\n\r\n        // PAX PSM\r\n        // https://vote.makerdao.com/polling/QmdBrVKD#poll-detail\r\n        DssExecLib.setStairstepExponentialDecrease(MCD_CLIP_CALC_PSM_PAX_A, 120 seconds, 9990);\r\n\r\n        CollateralOpts memory PSM_PAX_A = CollateralOpts({\r\n            ilk:                   \"PSM-PAX-A\",\r\n            gem:                   PAX,\r\n            join:                  MCD_JOIN_PSM_PAX_A,\r\n            clip:                  MCD_CLIP_PSM_PAX_A,\r\n            calc:                  MCD_CLIP_CALC_PSM_PAX_A,\r\n            pip:                   PIP_PSM_PAX,\r\n            isLiquidatable:        false,\r\n            isOSM:                 false,\r\n            whitelistOSM:          false,\r\n            ilkDebtCeiling:        50 * MILLION,\r\n            minVaultAmount:        0,\r\n            maxLiquidationAmount:  0,\r\n            liquidationPenalty:    1300,\r\n            ilkStabilityFee:       ZERO_PCT_RATE,\r\n            startingPriceFactor:   10500,\r\n            breakerTolerance:      9500, // Allows for a 5% hourly price drop before disabling liquidations\r\n            auctionDuration:       220 minutes,\r\n            permittedDrop:         9000,\r\n            liquidationRatio:      10000,\r\n            kprFlatReward:         300,\r\n            kprPctReward:          10 // 0.1%\r\n        });\r\n\r\n        DssExecLib.addNewCollateral(PSM_PAX_A);\r\n\r\n        DssExecLib.setValue(MCD_PSM_PAX_A, \"tin\", 1 * WAD / 1000);\r\n        DssExecLib.setValue(MCD_PSM_PAX_A, \"tout\", 0);\r\n\r\n        DssExecLib.setChangelogAddress(\"MCD_JOIN_PSM_PAX_A\", MCD_JOIN_PSM_PAX_A);\r\n        DssExecLib.setChangelogAddress(\"MCD_CLIP_PSM_PAX_A\", MCD_CLIP_PSM_PAX_A);\r\n        DssExecLib.setChangelogAddress(\"MCD_CLIP_CALC_PSM_PAX_A\", MCD_CLIP_CALC_PSM_PAX_A);\r\n        DssExecLib.setChangelogAddress(\"MCD_PSM_PAX_A\", MCD_PSM_PAX_A);\r\n        DssExecLib.setChangelogAddress(\"PIP_PSM_PAX\", PIP_PSM_PAX);\r\n\r\n        // Set USDC tin value to 0.2%\r\n        DssExecLib.setValue(DssExecLib.getChangelogAddress(\"MCD_PSM_USDC_A\"), \"tin\", 2 * WAD / 1000);\r\n\r\n        //\r\n        // MATIC Onboarding\r\n        // https://vote.makerdao.com/polling/QmeRhDHX?network=mainnet#poll-detail\r\n        // https://forum.makerdao.com/t/matic-collateral-onboarding-risk-evaluation/9069\r\n\r\n        DssExecLib.setStairstepExponentialDecrease(MCD_CLIP_CALC_MATIC_A, 90 seconds, 9900);\r\n\r\n        CollateralOpts memory MATIC_A = CollateralOpts({\r\n            ilk:                   \"MATIC-A\",\r\n            gem:                   MATIC,\r\n            join:                  MCD_JOIN_MATIC_A,\r\n            clip:                  MCD_CLIP_MATIC_A,\r\n            calc:                  MCD_CLIP_CALC_MATIC_A,\r\n            pip:                   PIP_MATIC,\r\n            isLiquidatable:        true,\r\n            isOSM:                 true,\r\n            whitelistOSM:          true,\r\n            ilkDebtCeiling:        3 * MILLION,\r\n            minVaultAmount:        10 * THOUSAND,\r\n            maxLiquidationAmount:  3 * MILLION,\r\n            liquidationPenalty:    1300,\r\n            ilkStabilityFee:       THREE_PCT_RATE,\r\n            startingPriceFactor:   13000,\r\n            breakerTolerance:      5000, // Allows for a 50% hourly price drop before disabling liquidations\r\n            auctionDuration:       140 minutes,\r\n            permittedDrop:         4000,\r\n            liquidationRatio:      17500,\r\n            kprFlatReward:         300,\r\n            kprPctReward:          10 // 0.1%\r\n        });\r\n\r\n        DssExecLib.addNewCollateral(MATIC_A);\r\n        DssExecLib.setIlkAutoLineParameters(\"MATIC-A\", 10 * MILLION, 3 * MILLION, 8 hours);\r\n\r\n        DssExecLib.setChangelogAddress(\"MATIC\", MATIC);\r\n        DssExecLib.setChangelogAddress(\"MCD_JOIN_MATIC_A\", MCD_JOIN_MATIC_A);\r\n        DssExecLib.setChangelogAddress(\"MCD_CLIP_MATIC_A\", MCD_CLIP_MATIC_A);\r\n        DssExecLib.setChangelogAddress(\"MCD_CLIP_CALC_MATIC_A\", MCD_CLIP_CALC_MATIC_A);\r\n        DssExecLib.setChangelogAddress(\"PIP_MATIC\", PIP_MATIC);\r\n\r\n\r\n        // Liquidation Ratio\r\n        // https://vote.makerdao.com/polling/QmZQdJpG?network=mainnet#poll-detail\r\n        DssExecLib.setIlkLiquidationRatio(\"ETH-A\", 14500);\r\n        DssExecLib.setIlkLiquidationRatio(\"WBTC-A\", 14500);\r\n        DssExecLib.setIlkLiquidationRatio(\"ETH-C\", 17000);\r\n        DssExecLib.setIlkLiquidationRatio(\"LINK-A\", 16500);\r\n        DssExecLib.setIlkLiquidationRatio(\"UNIV2DAIETH-A\", 12000);\r\n        DssExecLib.setIlkLiquidationRatio(\"YFI-A\", 16500);\r\n        DssExecLib.setIlkLiquidationRatio(\"UNIV2WBTCETH-A\", 14500);\r\n        DssExecLib.setIlkLiquidationRatio(\"UNIV2UNIETH-A\", 16000);\r\n        DssExecLib.setIlkLiquidationRatio(\"UNIV2USDCETH-A\", 12000);\r\n        DssExecLib.setIlkLiquidationRatio(\"RENBTC-A\", 16500);\r\n        DssExecLib.setIlkLiquidationRatio(\"UNI-A\", 16500);\r\n        DssExecLib.setIlkLiquidationRatio(\"AAVE-A\", 16500);\r\n        DssExecLib.setIlkLiquidationRatio(\"UNIV2WBTCDAI-A\", 12000);\r\n        DssExecLib.setIlkLiquidationRatio(\"BAL-A\", 16500);\r\n        DssExecLib.setIlkLiquidationRatio(\"COMP-A\", 16500);\r\n\r\n\r\n        // Housekeeping\r\n        DssExecLib.setChangelogAddress(\"CALC_FAB\", CALC_FAB);\r\n\r\n\r\n        // Bump changelog version\r\n        DssExecLib.setChangelogVersion(\"1.9.4\");\r\n    }\r\n}\r\n\r\ncontract DssSpell is DssExec {\r\n    constructor() DssExec(block.timestamp + 30 days, address(new DssSpellAction())) public {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"log\",\"outputs\":[{\"internalType\":\"contract Changelog\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract PauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"DssExecLib:3117d2cba81fc118fc471d383ab20f11939a3cff","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9bdab0291d23afd5d3f037069bd62b7758de98da9d9e6d0437080576b7a726f6"}]}