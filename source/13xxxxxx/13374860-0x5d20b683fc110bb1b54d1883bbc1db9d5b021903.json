{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/sterlingcrispin/code/ConceptualLandscapesCONCEPT/Messages/contracts/DrawSvgOps.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Mixed...\\npragma solidity ^0.8.0;\\nimport \\\"openzeppelin-solidity/contracts/utils/Strings.sol\\\";\\n\\n/// Copyright (c) Sterling Crispin\\n/// All rights reserved.\\n/// @title DrawSvgOps\\n/// @notice Provides some drawing functions used in MESSAGE\\n/// @author Sterling Crispin <sterlingcrispin@gmail.com>\\nlibrary DrawSvgOps {\\n\\n    string internal constant elli1 = '<ellipse cx=\\\"';\\n    string internal constant elli2 = '\\\" cy=\\\"';\\n    string internal constant elli3 = '\\\" rx=\\\"';\\n    string internal constant elli4 = '\\\" ry=\\\"';\\n    string internal constant elli5 = '\\\" stroke=\\\"mediumpurple\\\" stroke-dasharray=\\\"';\\n    string internal constant upgradeShapeEnd = '\\\"  fill-opacity=\\\"0\\\"/>';\\n    string internal constant strBlank = ' ';\\n\\n    function rand(uint num) internal view returns (uint256) {\\n        return  uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, num))) % num;\\n    }\\n    function Ellipse(uint256 size) external view returns (string memory){\\n        string memory xLoc = Strings.toString(rand(size-1));\\n        string memory yLoc = Strings.toString(rand(size-2));\\n        string memory output = string(abi.encodePacked(\\n            elli1,xLoc,\\n            elli2,yLoc,\\n            elli3,Strings.toString(rand(size-3)),\\n            elli4,Strings.toString(rand(size-3))));\\n        output = string(abi.encodePacked(\\n            output,\\n            elli5,Strings.toString(rand(7)+1),upgradeShapeEnd,\\n            elli1,xLoc,\\n            elli2,yLoc\\n        ));\\n        output = string(abi.encodePacked(\\n            output,elli3,\\n            Strings.toString(rand(size-4)),\\n            elli4,Strings.toString(rand(size-5)),\\n            elli5,Strings.toString(rand(6)+1),upgradeShapeEnd\\n            ));\\n        output = string(abi.encodePacked(\\n            output,\\n            elli1,xLoc,\\n            elli2,yLoc,\\n            elli3,Strings.toString(rand(size-5)),\\n            elli4));\\n        output = string(abi.encodePacked(\\n            output,Strings.toString(rand(size-6)),\\n            elli5,Strings.toString(rand(4)+1),upgradeShapeEnd\\n        ));\\n        return output;\\n    }\\n\\n    function Wiggle(uint256 size) external view returns (string memory){\\n        string memory output = string(abi.encodePacked(\\n            '<path d=\\\"M ',\\n            Strings.toString(rand(size-1)), strBlank,\\n            Strings.toString(rand(size-2)), strBlank,\\n            'Q ', Strings.toString(rand(size-3)), strBlank));\\n        output = string(abi.encodePacked(output,\\n            Strings.toString(rand(size-4)), ', ',\\n            Strings.toString(rand(size-5)), strBlank,\\n            Strings.toString(rand(size-6)), strBlank,\\n            'T ',  Strings.toString(rand(size-7)), strBlank,\\n            Strings.toString(rand(size-8)), '\\\"'\\n            ));\\n        output = string(abi.encodePacked(output,\\n            ' stroke=\\\"red\\\" stroke-dasharray=\\\"',Strings.toString(rand(7)+1), upgradeShapeEnd\\n        ));\\n        return output;\\n    }\\n}\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"Ellipse\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"Wiggle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DrawSvgOps","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"20","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}