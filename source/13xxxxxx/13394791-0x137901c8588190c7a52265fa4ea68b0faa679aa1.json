{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"DORToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721Enumerable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./WhitelistAdminRole.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\n\\ncontract DORToken is ERC721Enumerable, ReentrancyGuard, Pausable, WhitelistAdminRole {\\n    using SafeMath for uint256;\\n\\n    enum TokenType {\\n        NONE,\\n        SILVER, // 1. Mix \\u0026 Match Silver Grade Daughter\\n        GOLD, // 2. Mix \\u0026 Match Gold Grade Daughter\\n        RAINBOW, // 3. Mix \\u0026 Match Rainbow Grade Daughter\\n        EBIBLE, // 4. Daughter E-bible\\n        RANDOM, // 5. NONE\\n        M3D, // 6. 3D Mother NFT\\n        AIRDROPS, // 7. Limited Daughter NFT\\n        SPARK, // 8. SPARK Token NFT\\n        DAUGHTER, // 9. daughters\\n        ALIEN, // 10. daughters of alien\\n        RARE, // 11. rare daughters\\n        MOTHER // 12. the mother\\n    }\\n\\n    uint256 public salePrice = 0.05 ether;\\n    string private _baseTokenURI;\\n    mapping(uint256 =\\u003e uint256) typeMapping;\\n\\n    // params\\n    uint256 public SILVER_CLAIM_DAUGHTER_MIN_NUM = 5;\\n    uint256 public GOLD_CLAIM_DAUGHTER_MIN_NUM = 10;\\n    uint256 public RAINBOW_CLAIM_DAUGHTER_MIN_NUM = 20;\\n\\n    // claim flags\\n    mapping(uint256 =\\u003e bool) claimFlags; // claim flags for silver/gold/rainbow\\n    mapping(uint256 =\\u003e bool) claim3DFlags; // claim flags for m3d\\n    mapping(uint256 =\\u003e bool) claimEbibleFlags; // claim flags for ebible\\n    mapping(address =\\u003e bool) claimAirdropsFlags; // claim flags for airdrops type\\n    mapping(address =\\u003e bool) claimSparkFlags; // claim flags for spark type\\n\\n    mapping(address =\\u003e bool) whitelistAirdrops; // whitelist for AIRDROPS type\\n    mapping(address =\\u003e bool) whitelistSpark; // whitelist for SPARK type\\n\\n    ////////////////////////////////////////////////////\\n    // nft index\\n    ////////////////////////////////////////////////////\\n    // daughter index\\n    uint256 nextDaughterIndex = 1;\\n    uint256 daughterIndexMin = 1;\\n    uint256 daughterIndexMax = 999;\\n    // alien index\\n    uint256 nextAlienIndex = daughterIndexMax + 1;\\n    uint256 alienIndexMin = daughterIndexMax + 1;\\n    uint256 alienIndexMax = daughterIndexMax + 44;\\n    // silver index\\n    uint256 nextSilverIndex = alienIndexMax + 1;\\n    uint256 silverIndexMin = alienIndexMax + 1;\\n    uint256 silverIndexMax = alienIndexMax + 300;\\n    // gold index\\n    uint256 nextGoldIndex = silverIndexMax + 1;\\n    uint256 goldIndexMin = silverIndexMax + 1;\\n    uint256 goldIndexMax = silverIndexMax + 150;\\n    // rainbow index\\n    uint256 nextRainbowIndex = goldIndexMax + 1;\\n    uint256 rainbowIndexMin = goldIndexMax + 1;\\n    uint256 rainbowIndexMax = goldIndexMax + 50;\\n    // rare index\\n    uint256 nextRareIndex = rainbowIndexMax + 1;\\n    uint256 rareIndexMin = rainbowIndexMax + 1;\\n    uint256 rareIndexMax = rainbowIndexMax + 450;\\n    // ebible index\\n    uint256 nextEbibleIndex = rareIndexMax + 1;\\n    uint256 ebibleIndexMin = rareIndexMax + 1;\\n    uint256 ebibleIndexMax = rareIndexMax + 500;\\n    // mother index\\n    uint256 nextMotherIndex = ebibleIndexMax + 1;\\n    uint256 motherIndexMin = ebibleIndexMax + 1;\\n    uint256 motherIndexMax = ebibleIndexMax + 30;\\n    // m3d index\\n    uint256 nextM3dIndex = motherIndexMax + 1;\\n    uint256 m3dIndexMin = motherIndexMax + 1;\\n    uint256 m3dIndexMax = motherIndexMax + 30;\\n    // airdrop index\\n    uint256 nextAirdropsIndex = m3dIndexMax + 1;\\n    uint256 airdropsIndexMin = m3dIndexMax + 1;\\n    uint256 airdropsIndexMax = m3dIndexMax + 300;\\n    // spark index\\n    uint256 nextSparkIndex = airdropsIndexMax + 1;\\n    uint256 sparkIndexMin = airdropsIndexMax + 1;\\n    uint256 sparkIndexMax = airdropsIndexMax + 500;\\n    ////////////////////////////////////////////////////\\n    // nft index\\n    ////////////////////////////////////////////////////\\n\\n    bool whitelistEnabled = true;  // whitelist switch, for pre-sale\\n    mapping(address =\\u003e bool) whitelist; // whitelist for mint\\n    mapping (address =\\u003e uint256) public whitelistMintCounts; // limit for pre-sale\\n    uint256 public whitelistMintMaxCount = 2;\\n\\n    bool public sgrClaimEnabled; // silver/gold/rainbow switch\\n    bool public ebibleClaimEnabled; // ebible claim switch\\n    bool public m3dClaimEnabled;  // m3d claim switch\\n\\n    /////////////////////////////////////////////////////\\n    // params\\n    function setWhitelistMintMaxCount(uint256 value) public onlyWhitelistAdmin {\\n        whitelistMintMaxCount = value;\\n    }\\n\\n    function setSGREnabled(bool flag) public onlyWhitelistAdmin {\\n        sgrClaimEnabled = flag;\\n    }\\n\\n    function setEbileEnabled(bool flag) public onlyWhitelistAdmin {\\n        ebibleClaimEnabled = flag;\\n    }\\n\\n    function set3DEnabled(bool flag) public onlyWhitelistAdmin {\\n        m3dClaimEnabled = flag;\\n    }\\n\\n    function setWhitelistEnabled(bool flag) public onlyWhitelistAdmin {\\n        whitelistEnabled = flag;\\n    }\\n\\n    function setSalePrice(uint256 value) public onlyWhitelistAdmin {\\n        salePrice = value;\\n    }\\n\\n    function setSilverClaimDaughterMinNum(uint256 value) public onlyWhitelistAdmin {\\n        SILVER_CLAIM_DAUGHTER_MIN_NUM = value;\\n    }\\n\\n    function setGoldClaimDaughterMinNum(uint256 value) public onlyWhitelistAdmin {\\n        GOLD_CLAIM_DAUGHTER_MIN_NUM = value;\\n    }\\n\\n    function setRainbowClaimDaughterMinNum(uint256 value) public onlyWhitelistAdmin {\\n        RAINBOW_CLAIM_DAUGHTER_MIN_NUM = value;\\n    }\\n    /////////////////////////////////////////////////////\\n\\n\\n    constructor() ERC721(\\\"Daughters of Rainbow\\\", \\\"DOR\\\") {\\n        // _baseTokenURI = \\\"ipfs://QmaWSLDeJ3Urn47RX3fNEKcU4Tg7TXHpLy1t4t8z466AUP/\\\";\\n        // metadata: ipfs://QmaWSLDeJ3Urn47RX3fNEKcU4Tg7TXHpLy1t4t8z466AUP/\\u003ctokenId\\u003e.json\\n    }\\n\\n    function getNextDaughterId() internal returns (uint256 id) {\\n        id = nextDaughterIndex;\\n        nextDaughterIndex = nextDaughterIndex.add(1);\\n    }\\n\\n    function getNextAlienId() internal returns (uint256 id) {\\n        id = nextAlienIndex;\\n        nextAlienIndex = nextAlienIndex.add(1);\\n    }\\n\\n    function getNextSilverId() internal returns (uint256 id) {\\n        id = nextSilverIndex;\\n        nextSilverIndex = nextSilverIndex.add(1);\\n    }\\n\\n    function getNextGoldId() internal returns (uint256 id) {\\n        id = nextGoldIndex;\\n        nextGoldIndex = nextGoldIndex.add(1);\\n    }\\n\\n    function getNextRainbowId() internal returns (uint256 id) {\\n        id = nextRainbowIndex;\\n        nextRainbowIndex = nextRainbowIndex.add(1);\\n    }\\n\\n    function getNextRareId() internal returns (uint256 id) {\\n        id = nextRareIndex;\\n        nextRareIndex = nextRareIndex.add(1);\\n    }\\n\\n    function getNextEbibleId() internal returns (uint256 id) {\\n        id = nextEbibleIndex;\\n        nextEbibleIndex = nextEbibleIndex.add(1);\\n    }\\n\\n    function getNextMotherId() internal returns (uint256 id) {\\n        id = nextMotherIndex;\\n        nextMotherIndex = nextMotherIndex.add(1);\\n    }\\n\\n    function getNextM3dId() internal returns (uint256 id) {\\n        id = nextM3dIndex;\\n        nextM3dIndex = nextM3dIndex.add(1);\\n    }\\n\\n    function getNextAirdropsId() internal returns (uint256 id) {\\n        id = nextAirdropsIndex;\\n        nextAirdropsIndex = nextAirdropsIndex.add(1);\\n    }\\n\\n    function getNextSparkId() internal returns (uint256 id) {\\n        id = nextSparkIndex;\\n        nextSparkIndex = nextSparkIndex.add(1);\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    // NFT type and count functions\\n    function daughterLeftover() public view returns (uint256) {\\n        if (nextDaughterIndex \\u003e daughterIndexMax) {\\n            return 0;\\n        }\\n        return daughterIndexMax.sub(nextDaughterIndex).add(1);\\n    }\\n\\n    function getDaughterCount() public view returns (uint256) {\\n        return daughterCurrentCount();\\n    }\\n\\n    function daughterCurrentCount() public view returns (uint256) {\\n        return nextDaughterIndex.sub(daughterIndexMin);\\n    }\\n\\n    function alienLeftover() public view returns (uint256) {\\n        if (nextAlienIndex \\u003e alienIndexMax) {\\n            return 0;\\n        }\\n        return alienIndexMax.sub(nextAlienIndex).add(1);\\n    }\\n\\n    function alienCurrentCount() public view returns (uint256) {\\n        return nextAlienIndex.sub(alienIndexMin);\\n    }\\n\\n    function silverLeftover() public view returns (uint256) {\\n        if (nextSilverIndex \\u003e silverIndexMax) {\\n            return 0;\\n        }\\n        return silverIndexMax.sub(nextSilverIndex).add(1);\\n    }\\n\\n    function silverCurrentCount() public view returns (uint256) {\\n        return nextSilverIndex.sub(silverIndexMin);\\n    }\\n\\n    function goldLeftover() public view returns (uint256) {\\n        if (nextGoldIndex \\u003e goldIndexMax) {\\n            return 0;\\n        }\\n        return goldIndexMax.sub(nextGoldIndex).add(1);\\n    }\\n\\n    function goldCurrentCount() public view returns (uint256) {\\n        return nextGoldIndex.sub(goldIndexMin);\\n    }\\n\\n    function rainbowLeftover() public view returns (uint256) {\\n        if (nextRainbowIndex \\u003e rainbowIndexMax) {\\n            return 0;\\n        }\\n        return rainbowIndexMax.sub(nextRainbowIndex).add(1);\\n    }\\n\\n    function rainbowCurrentCount() public view returns (uint256) {\\n        return nextRainbowIndex.sub(rainbowIndexMin);\\n    }\\n\\n    function rareLeftover() public view returns (uint256) {\\n        if (nextRareIndex \\u003e rareIndexMax) {\\n            return 0;\\n        }\\n        return rareIndexMax.sub(nextRareIndex).add(1);\\n    }\\n\\n    function rareCurrentCount() public view returns (uint256) {\\n        return nextRareIndex.sub(rareIndexMin);\\n    }\\n\\n    function ebibleLeftover() public view returns (uint256) {\\n        if (nextEbibleIndex \\u003e ebibleIndexMax) {\\n            return 0;\\n        }\\n        return ebibleIndexMax.sub(nextEbibleIndex).add(1);\\n    }\\n\\n    function ebibleCurrentCount() public view returns (uint256) {\\n        return nextEbibleIndex.sub(ebibleIndexMin);\\n    }\\n\\n    function motherLeftover() public view returns (uint256) {\\n        if (nextMotherIndex \\u003e motherIndexMax) {\\n            return 0;\\n        }\\n        return motherIndexMax.sub(nextMotherIndex).add(1);\\n    }\\n\\n    function motherCurrentCount() public view returns (uint256) {\\n        return nextMotherIndex.sub(motherIndexMin);\\n    }\\n\\n    function m3dLeftover() public view returns (uint256) {\\n        if (nextM3dIndex \\u003e m3dIndexMax) {\\n            return 0;\\n        }\\n        return m3dIndexMax.sub(nextM3dIndex).add(1);\\n    }\\n\\n    function m3dCurrentCount() public view returns (uint256) {\\n        return nextM3dIndex.sub(m3dIndexMin);\\n    }\\n\\n    function airdropsLeftover() public view returns (uint256) {\\n        if (nextAirdropsIndex \\u003e airdropsIndexMax) {\\n            return 0;\\n        }\\n        return airdropsIndexMax.sub(nextAirdropsIndex).add(1);\\n    }\\n\\n    function airdropsCurrentCount() public view returns (uint256) {\\n        return nextAirdropsIndex.sub(airdropsIndexMin);\\n    }\\n\\n    function sparkLeftover() public view returns (uint256) {\\n        if (nextSparkIndex \\u003e sparkIndexMax) {\\n            return 0;\\n        }\\n        return sparkIndexMax.sub(nextSparkIndex).add(1);\\n    }\\n\\n    function sparkCurrentCount() public view returns (uint256) {\\n        return nextSparkIndex.sub(sparkIndexMin);\\n    }\\n    //////////////////////////////////////////////////////////////\\n\\n\\n    //////////////////////////////////////////////////////////////\\n    // claim flags\\n    function setClaimFlag(uint256 tokenId, bool flag) internal {\\n        claimFlags[tokenId] = flag;\\n    }\\n\\n    function setClaim3DFlag(uint256 tokenId, bool flag) internal {\\n        claim3DFlags[tokenId] = flag;\\n    }\\n\\n    function setClaimEbibleFlag(uint256 tokenId, bool flag) internal {\\n        claimEbibleFlags[tokenId] = flag;\\n    }\\n\\n    function setClaimAirdropsFlag(address account, bool flag) internal {\\n        claimAirdropsFlags[account] = flag;\\n    }\\n\\n    function setClaimSparkFlag(address account, bool flag) internal {\\n        claimSparkFlags[account] = flag;\\n    }\\n\\n    function getClaimFlag(uint256 tokenId) public view returns (bool) {\\n        return claimFlags[tokenId];\\n    }\\n\\n    function getClaim3DFlag(uint256 tokenId) public view returns (bool) {\\n        return claim3DFlags[tokenId];\\n    }\\n\\n    function getClaimEbibleFlag(uint256 tokenId) public view returns (bool) {\\n        return claimEbibleFlags[tokenId];\\n    }\\n\\n    function getClaimAirdropsFlag(address account) public view returns (bool) {\\n        return claimAirdropsFlags[account];\\n    }\\n\\n    function getClaimSparkFlag(address account) public view returns (bool) {\\n        return claimSparkFlags[account];\\n    }\\n    //////////////////////////////////////////////////////////////\\n\\n    function addWhitelist(address[] memory accounts) public onlyWhitelistAdmin {\\n        for (uint256 i = 0; i \\u003c accounts.length; i++) {\\n            whitelist[accounts[i]] = true;\\n        }\\n    }\\n\\n    function isWhitelist(address account) public view returns (bool) {\\n        return whitelist[account];\\n    }\\n\\n    function addWhitelistAirdrops(address[] memory accounts) public onlyWhitelistAdmin {\\n        for (uint256 i = 0; i \\u003c accounts.length; i++) {\\n            whitelistAirdrops[accounts[i]] = true;\\n        }\\n    }\\n\\n    function isWhitelistAirdrops(address account) public view returns (bool) {\\n        return whitelistAirdrops[account];\\n    }\\n\\n    function addWhitelistSpark(address[] memory accounts) public onlyWhitelistAdmin {\\n        for (uint256 i = 0; i \\u003c accounts.length; i++) {\\n            whitelistSpark[accounts[i]] = true;\\n        }\\n    }\\n\\n    function isWhitelistSpark(address account) public view returns (bool) {\\n        return whitelistSpark[account];\\n    }\\n\\n    function removeWhitelistAdmin(address account) public onlyOwner {\\n        _removeWhitelistAdmin(account);\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function baseURI() external view returns (string memory) {\\n        return _baseURI();\\n    }\\n\\n    function setBaseURI(string memory baseTokenURI) external onlyWhitelistAdmin {\\n        _baseTokenURI = baseTokenURI;\\n    }\\n\\n    function exists(uint256 tokenId) public view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    function burn(uint256 tokenId) public virtual {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"!(owner|approved)\\\");\\n        _burn(tokenId);\\n    }\\n\\n    function getType(uint256 tokenId) public view returns (uint256) {\\n        return typeMapping[tokenId];\\n    }\\n\\n    function getTokenTypes(uint256[] memory tokenIds) public view returns (uint256[] memory types) {\\n        types = new uint256[](tokenIds.length);\\n        for (uint256 i = 0; i \\u003c tokenIds.length; i++) {\\n            types[i] = getType(tokenIds[i]);\\n        }\\n    }\\n\\n    function setTokenType(uint256 tokenId, uint256 tp) public onlyWhitelistAdmin {\\n        setType(tokenId, tp);\\n    }\\n\\n    function setType(uint256 tokenId, uint256 tp) internal {\\n        typeMapping[tokenId] = tp;\\n    }\\n\\n    function _mintDaughter(address account, uint256 num) internal {\\n        require(nextDaughterIndex.add(num) \\u003c= daughterIndexMax.add(1), \\\"num limited\\\");\\n        for (uint256 i; i \\u003c num; i++) {\\n            // get new token id\\n            uint256 tokenId = getNextDaughterId();\\n            // mint and set token type\\n            _safeMint(account, tokenId);\\n            setType(tokenId, uint256(TokenType.DAUGHTER));\\n        }\\n    }\\n\\n    function _mintAlien(address account, uint256 num) internal {\\n        require(nextAlienIndex.add(num) \\u003c= alienIndexMax.add(1), \\\"num limited\\\");\\n        for (uint256 i; i \\u003c num; i++) {\\n            // get new token id\\n            uint256 tokenId = getNextAlienId();\\n            // mint and set token type\\n            _safeMint(account, tokenId);\\n            setType(tokenId, uint256(TokenType.ALIEN));\\n        }\\n    }\\n\\n    function claimSGR(uint256 tp) public {\\n        require(sgrClaimEnabled, \\\"not start\\\");\\n\\n        address account = _msgSender();\\n        // check silver/gold/rainbow\\n        (uint256[] memory tokenIds, uint256[] memory tokenTypes) = getTokens(account);\\n        uint256 daughterCount;\\n        for (uint256 i = 0; i \\u003c tokenTypes.length; i++) {\\n            if (tokenTypes[i] == uint256(TokenType.DAUGHTER) \\u0026\\u0026 !getClaimFlag(tokenIds[i])) {\\n                daughterCount = daughterCount.add(1);\\n            }\\n        }\\n\\n        uint256 cnt;\\n        if (tp == uint256(TokenType.RAINBOW)) {\\n            cnt = RAINBOW_CLAIM_DAUGHTER_MIN_NUM;\\n            require(rainbowLeftover() \\u003e 0, \\\"no rainbow leftover\\\");\\n        } else if (tp == uint256(TokenType.GOLD)) {\\n            cnt = GOLD_CLAIM_DAUGHTER_MIN_NUM;\\n            require(goldLeftover() \\u003e 0, \\\"no gold leftover\\\");\\n        } else if (tp == uint256(TokenType.SILVER)) {\\n            cnt = SILVER_CLAIM_DAUGHTER_MIN_NUM;\\n            require(silverLeftover() \\u003e 0, \\\"no silver leftover\\\");\\n        } else {\\n            require(false, \\\"type error\\\");\\n        }\\n        require(daughterCount \\u003e= cnt, \\\"can\\u0027t claim SGR\\\");\\n        // set claim flag\\n        for (uint256 i = 0; i \\u003c tokenTypes.length \\u0026\\u0026 cnt \\u003e 0; i++) {\\n            if (tokenTypes[i] == uint256(TokenType.DAUGHTER) \\u0026\\u0026 !getClaimFlag(tokenIds[i])) {\\n                setClaimFlag(tokenIds[i], true);\\n                cnt = cnt.sub(1);\\n            }\\n        }\\n\\n        // mint\\n        if (tp == uint256(TokenType.RAINBOW)) {\\n            _mintRainbow(account, 1);\\n        } else if (tp == uint256(TokenType.GOLD)) {\\n            _mintGold(account, 1);\\n        } else if (tp == uint256(TokenType.SILVER)) {\\n            _mintSilver(account, 1);\\n        }\\n    }\\n\\n    function _mintSilver(address account, uint256 num) internal {\\n        require(nextSilverIndex.add(num) \\u003c= silverIndexMax.add(1), \\\"num limited\\\");\\n        for (uint256 i; i \\u003c num; i++) {\\n            // get new token id\\n            uint256 tokenId = getNextSilverId();\\n            // mint and set token type\\n            _safeMint(account, tokenId);\\n            setType(tokenId, uint256(TokenType.SILVER));\\n        }\\n    }\\n\\n    function _mintGold(address account, uint256 num) internal {\\n        require(nextGoldIndex.add(num) \\u003c= goldIndexMax.add(1), \\\"num limited\\\");\\n        for (uint256 i; i \\u003c num; i++) {\\n            // get new token id\\n            uint256 tokenId = getNextGoldId();\\n            // mint and set token type\\n            _safeMint(account, tokenId);\\n            setType(tokenId, uint256(TokenType.GOLD));\\n        }\\n    }\\n\\n    function _mintRainbow(address account, uint256 num) internal {\\n        require(nextRainbowIndex.add(num) \\u003c= rainbowIndexMax.add(1), \\\"num limited\\\");\\n        for (uint256 i; i \\u003c num; i++) {\\n            // get new token id\\n            uint256 tokenId = getNextRainbowId();\\n            // mint and set token type\\n            _safeMint(account, tokenId);\\n            setType(tokenId, uint256(TokenType.RAINBOW));\\n        }\\n    }\\n\\n    function _mintRare(address account, uint256 num) internal {\\n        require(nextRareIndex.add(num) \\u003c= rareIndexMax.add(1), \\\"num limited\\\");\\n        for (uint256 i; i \\u003c num; i++) {\\n            // get new token id\\n            uint256 tokenId = getNextRareId();\\n            // mint and set token type\\n            _safeMint(account, tokenId);\\n            setType(tokenId, uint256(TokenType.RARE));\\n        }\\n    }\\n\\n    function _mintEbible(address account, uint256 num) internal {\\n        require(nextEbibleIndex.add(num) \\u003c= ebibleIndexMax.add(1), \\\"num limited\\\");\\n        for (uint256 i; i \\u003c num; i++) {\\n            // get new token id\\n            uint256 tokenId = getNextEbibleId();\\n            // mint and set token type\\n            _safeMint(account, tokenId);\\n            setType(tokenId, uint256(TokenType.EBIBLE));\\n        }\\n    }\\n\\n    function _mintMother(address account, uint256 num) internal {\\n        require(nextMotherIndex.add(num) \\u003c= motherIndexMax.add(1), \\\"num limited\\\");\\n        for (uint256 i; i \\u003c num; i++) {\\n            // get new token id\\n            uint256 tokenId = getNextMotherId();\\n            // mint and set token type\\n            _safeMint(account, tokenId);\\n            setType(tokenId, uint256(TokenType.MOTHER));\\n        }\\n    }\\n\\n    function _mintM3d(address account, uint256 num) internal {\\n        require(nextM3dIndex.add(num) \\u003c= m3dIndexMax.add(1), \\\"num limited\\\");\\n        for (uint256 i; i \\u003c num; i++) {\\n            // get new token id\\n            uint256 tokenId = getNextM3dId();\\n            // mint and set token type\\n            _safeMint(account, tokenId);\\n            setType(tokenId, uint256(TokenType.M3D));\\n        }\\n    }\\n\\n    function _mintAirdrops(address account, uint256 num) internal {\\n        require(nextAirdropsIndex.add(num) \\u003c= airdropsIndexMax.add(1), \\\"num limited\\\");\\n        for (uint256 i; i \\u003c num; i++) {\\n            // get new token id\\n            uint256 tokenId = getNextAirdropsId();\\n            // mint and set token type\\n            _safeMint(account, tokenId);\\n            setType(tokenId, uint256(TokenType.AIRDROPS));\\n        }\\n    }\\n\\n    function _mintSpark(address account, uint256 num) internal {\\n        require(nextSparkIndex.add(num) \\u003c= sparkIndexMax.add(1), \\\"num limited\\\");\\n        for (uint256 i; i \\u003c num; i++) {\\n            // get new token id\\n            uint256 tokenId = getNextSparkId();\\n            // mint and set token type\\n            _safeMint(account, tokenId);\\n            setType(tokenId, uint256(TokenType.SPARK));\\n        }\\n    }\\n\\n    // presale for daughter\\n    function mint(uint256 num) public payable nonReentrant WhenNotPaused {\\n        if (whitelistEnabled) { // check whitelist\\n            require(isWhitelist(_msgSender()), \\\"not in whitelist\\\");\\n            require(whitelistMintCounts[_msgSender()].add(num) \\u003c= whitelistMintMaxCount, \\\"whitelist mint num limited\\\");\\n            whitelistMintCounts[_msgSender()] =  whitelistMintCounts[_msgSender()].add(num);\\n        }\\n        // validate\\n        require(msg.value \\u003e= salePrice.mul(num), \\\"payment invalid\\\");\\n        // mint daughter\\n        _mintDaughter(_msgSender(), num);\\n    }\\n\\n    // returns (uint256[] tokenIds, uint256[] tokenTypes)\\n    function getTokens(address owner) public view returns (uint256[] memory, uint256[] memory) {\\n        uint256 balance = balanceOf(owner);\\n        uint256[] memory tokenIds = new uint256[](balance);\\n        uint256[] memory tokenTypes = new uint256[](balance);\\n        for (uint256 i = 0; i \\u003c balance; i++) {\\n            uint256 id = tokenOfOwnerByIndex(owner, i);\\n            tokenIds[i] = id;\\n            tokenTypes[i] = getType(id);\\n        }\\n        return (tokenIds, tokenTypes);\\n    }\\n\\n    function canClaimSGR(address owner) public view returns (bool silver, bool gold, bool rainbow) {\\n        if (!sgrClaimEnabled) { // not enabled\\n            return (false, false, false);\\n        }\\n\\n        // check silver/gold/rainbow\\n        (uint256[] memory tokenIds, uint256[] memory tokenTypes) = getTokens(owner);\\n        uint256 daughterCount;\\n        for (uint256 i = 0; i \\u003c tokenTypes.length; i++) {\\n            if (tokenTypes[i] == uint256(TokenType.DAUGHTER) \\u0026\\u0026 !getClaimFlag(tokenIds[i])) {\\n                daughterCount = daughterCount.add(1);\\n            }\\n        }\\n\\n        if (daughterCount \\u003e= RAINBOW_CLAIM_DAUGHTER_MIN_NUM \\u0026\\u0026 rainbowLeftover() \\u003e 0) {\\n            rainbow = true;\\n        } else if (daughterCount \\u003e= GOLD_CLAIM_DAUGHTER_MIN_NUM \\u0026\\u0026 goldLeftover() \\u003e 0) {\\n            gold = true;\\n        } else if (daughterCount \\u003e= SILVER_CLAIM_DAUGHTER_MIN_NUM \\u0026\\u0026 silverLeftover() \\u003e 0) {\\n            silver = true;\\n        }\\n    }\\n\\n    function canClaim(address account) public view\\n        returns\\n        (bool silver, bool gold, bool rainbow, bool ebible, bool random, bool m3d, bool airdrops, bool spark) {\\n        // check silver/gold/rainbow\\n        (silver, gold, rainbow) = canClaimSGR(account);\\n\\n        // check ebible\\n        ebible = canClaimEbible(account);\\n\\n        // check random silver/gold/rainbow\\n        random = false;\\n\\n        // check m3d\\n        m3d = canClaim3D(account);\\n\\n        // check airdrops\\n        airdrops = canClaimAirdrops(account);\\n\\n        // check spark\\n        spark = canClaimSpark(account);\\n    }\\n\\n    function canClaim3D(address account) public view returns (bool) {\\n        if (!m3dClaimEnabled) {\\n            return false;\\n        }\\n\\n        // mint over\\n        if (m3dLeftover() == 0) {\\n            return false;\\n        }\\n\\n        (uint256[] memory tokenIds, uint256[] memory tokenTypes) = getTokens(account);\\n        for (uint256 i = 0; i \\u003c tokenTypes.length; i++) {\\n            if (tokenTypes[i] == uint256(TokenType.MOTHER) \\u0026\\u0026 !getClaim3DFlag(tokenIds[i])) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function canClaimEbible(address account) public view returns (bool) {\\n        if (!ebibleClaimEnabled) { // not enabled\\n            return false;\\n        }\\n\\n        // mint over\\n        if (ebibleLeftover() == 0) {\\n            return false;\\n        }\\n\\n        (uint256[] memory tokenIds, uint256[] memory tokenTypes) = getTokens(account);\\n        uint256 cnt;\\n        for (uint256 i = 0; i \\u003c tokenTypes.length; i++) {\\n            if (tokenTypes[i] == uint256(TokenType.RARE) \\u0026\\u0026 !getClaimEbibleFlag(tokenIds[i])) {\\n                cnt = cnt.add(1);\\n            }\\n        }\\n\\n        if (cnt \\u003e= 3) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function claim3D() public {\\n        require(m3dClaimEnabled, \\\"not start\\\");\\n\\n        (uint256[] memory tokenIds, uint256[] memory tokenTypes) = getTokens(_msgSender());\\n        bool can;\\n        for (uint256 i = 0; i \\u003c tokenTypes.length; i++) {\\n            if (tokenTypes[i] == uint256(TokenType.MOTHER) \\u0026\\u0026 !getClaim3DFlag(tokenIds[i])) {\\n                can = true;\\n                break;\\n            }\\n        }\\n        require(can, \\\"can\\u0027t claim 3D mother\\\");\\n\\n        // set claim flag\\n        for (uint256 i = 0; i \\u003c tokenTypes.length; i++) {\\n            if (tokenTypes[i] == uint256(TokenType.MOTHER) \\u0026\\u0026 !getClaim3DFlag(tokenIds[i])) {\\n                setClaim3DFlag(tokenIds[i], true);\\n                break;\\n            }\\n        }\\n\\n        // mint\\n        _mintM3d(_msgSender(), 1);\\n    }\\n\\n    function canClaimAirdrops(address account) public view returns (bool) {\\n        if (isWhitelistAirdrops(account) \\u0026\\u0026 !getClaimAirdropsFlag(account) \\u0026\\u0026 airdropsLeftover() \\u003e 0) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function claimAirdrops() public {\\n        address account = _msgSender();\\n        require(canClaimAirdrops(account), \\\"can\\u0027t claim airdrops\\\");\\n\\n        // set claim flags\\n        setClaimAirdropsFlag(account, true);\\n\\n        // mint\\n        _mintAirdrops(account, 1);\\n    }\\n\\n    function canClaimSpark(address account) public view returns (bool) {\\n        if (isWhitelistSpark(account) \\u0026\\u0026 !getClaimSparkFlag(account) \\u0026\\u0026 sparkLeftover() \\u003e 0) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function claimSpark() public {\\n        address account = _msgSender();\\n        require(canClaimSpark(account), \\\"can\\u0027t claim spark\\\");\\n\\n        // set claim flags\\n        setClaimSparkFlag(account, true);\\n\\n        // mint\\n        _mintSpark(account, 1);\\n    }\\n\\n    function claim(uint256 tp) public {\\n        if (tp == uint256(TokenType.SILVER) || tp == uint256(TokenType.GOLD) || tp == uint256(TokenType.RAINBOW)) {\\n            claimSGR(tp);\\n        } else if (tp == uint256(TokenType.EBIBLE)) {\\n            claimEbible();\\n        } else if (tp == uint256(TokenType.M3D)) {\\n            claim3D();\\n        } else if (tp == uint256(TokenType.AIRDROPS)) {\\n            claimAirdrops();\\n        } else if (tp == uint256(TokenType.SPARK)) {\\n            claimSpark();\\n        }\\n    }\\n\\n    function claimEbible() public {\\n        require(ebibleClaimEnabled, \\\"not start\\\");\\n\\n        // check and set claim flag\\n        (uint256[] memory tokenIds, uint256[] memory tokenTypes) = getTokens(_msgSender());\\n        uint256 cnt;\\n        for (uint256 i = 0; i \\u003c tokenTypes.length; i++) {\\n            if (tokenTypes[i] == uint256(TokenType.RARE) \\u0026\\u0026 !getClaimEbibleFlag(tokenIds[i])) {\\n                cnt = cnt.add(1);\\n            }\\n        }\\n\\n        require(cnt \\u003e= 3, \\\"can claim ebile\\\");\\n\\n        // set claim flag\\n        uint256 c = 3;\\n        for (uint256 i = 0; i \\u003c tokenTypes.length \\u0026\\u0026 c \\u003e 0; i++) {\\n            if (tokenTypes[i] == uint256(TokenType.RARE) \\u0026\\u0026 !getClaimEbibleFlag(tokenIds[i])) {\\n                setClaimEbibleFlag(tokenIds[i], true);\\n                c = c.sub(1);\\n            }\\n        }\\n\\n        // mint\\n        _mintEbible(_msgSender(), 1);\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    // admin operation\\n    ////////////////////////////////////////////////////\\n\\n    function adminMintDaughter(address account, uint256 num) public onlyWhitelistAdmin {\\n        _mintDaughter(account, num);\\n    }\\n\\n    // admin mint alien\\n    function adminMintAlien(address account, uint256 num) public onlyWhitelistAdmin {\\n        _mintAlien(account, num);\\n    }\\n\\n    // admin mint alien\\n    function adminMintRare(address account, uint256 num) public onlyWhitelistAdmin {\\n        _mintRare(account, num);\\n    }\\n\\n    // admin mint mother\\n    function adminMintMother(address account, uint256 num) public onlyWhitelistAdmin {\\n        _mintMother(account, num);\\n    }\\n\\n    // admin mint airdrops\\n    function adminMintAirdrops(address account, uint256 num) public onlyWhitelistAdmin {\\n        _mintAirdrops(account, num);\\n    }\\n\\n    // admin mint spark\\n    function adminMintSpark(address account, uint256 num) public onlyWhitelistAdmin {\\n        _mintSpark(account, num);\\n    }\\n\\n    function adminMint(address account, uint256 tp, uint256 num) public onlyWhitelistAdmin {\\n        if (tp == uint256(TokenType.DAUGHTER)) {\\n            _mintDaughter(account, num);\\n        } else if (tp == uint256(TokenType.ALIEN)) {\\n            _mintAlien(account, num);\\n        } else if (tp == uint256(TokenType.SILVER)) {\\n            _mintSilver(account, num);\\n        } else if (tp == uint256(TokenType.GOLD)) {\\n            _mintGold(account, num);\\n        } else if (tp == uint256(TokenType.RAINBOW)) {\\n            _mintRainbow(account, num);\\n        } else if (tp == uint256(TokenType.RARE)) {\\n            _mintRare(account, num);\\n        } else if (tp == uint256(TokenType.EBIBLE)) {\\n            _mintEbible(account, num);\\n        } else if (tp == uint256(TokenType.MOTHER)) {\\n            _mintMother(account, num);\\n        } else if (tp == uint256(TokenType.M3D)) {\\n            _mintM3d(account, num);\\n        } else if (tp == uint256(TokenType.AIRDROPS)) {\\n            _mintAirdrops(account, num);\\n        } else if (tp == uint256(TokenType.SPARK)) {\\n            _mintSpark(account, num);\\n        }\\n    }\\n\\n    function adminMintx(address account, uint256 tp, uint256 tokenId) public onlyWhitelistAdmin {\\n        // mint and set token type\\n        _safeMint(account, tokenId);\\n        setType(tokenId, tp);\\n    }\\n\\n    function withdrawAll() public onlyOwner {\\n        require(payable(msg.sender).send(address(this).balance));\\n    }\\n    ////////////////////////////////////////////////////\\n}\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\"},\"ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\n\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Strings.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 =\\u003e address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address =\\u003e uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 =\\u003e address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n        interfaceId == type(IERC721).interfaceId ||\\n        interfaceId == type(IERC721Metadata).interfaceId ||\\n        super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length \\u003e 0 ? string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\")) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``\\u0027s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``\\u0027s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\\n\\n\"},\"ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 =\\u003e uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 =\\u003e uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index \\u003c ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index \\u003c ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``\\u0027s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``\\u0027s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension\\u0027s ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension\\u0027s token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension\\u0027s ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from\\u0027s tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token\\u0027s index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension\\u0027s token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an \\u0027if\\u0027 statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token\\u0027s index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n\"},\"IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``\\u0027s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"},\"IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\"},\"IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\"},\"Migrations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\n\\ncontract Migrations {\\n  address public owner = msg.sender;\\n  uint public last_completed_migration;\\n\\n  modifier restricted() {\\n    require(\\n      msg.sender == owner,\\n      \\\"This function is restricted to the contract\\u0027s owner\\\"\\n    );\\n    _;\\n  }\\n\\n  function setCompleted(uint completed) public restricted {\\n    last_completed_migration = completed;\\n  }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\nabstract contract Pausable is Ownable {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    bool public paused;\\n\\n    constructor ()  {\\n        paused = false;\\n    }\\n\\n    modifier WhenNotPaused() {\\n        require(!paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier WhenPaused() {\\n        require(paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    function Pause() public onlyOwner {\\n        paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function Unpause() public onlyOwner {\\n        paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n\\n\"},\"Roles.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address =\\u003e bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account\\u0027s access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp \\u003e\\u003e= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\\n\\n\"},\"WhitelistAdminRole.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Roles.sol\\\";\\n\\n/**\\n * @title WhitelistAdminRole\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n */\\ncontract WhitelistAdminRole is Context {\\n    using Roles for Roles.Role;\\n\\n    event WhitelistAdminAdded(address indexed account);\\n    event WhitelistAdminRemoved(address indexed account);\\n\\n    Roles.Role private _whitelistAdmins;\\n\\n    constructor () {\\n        _addWhitelistAdmin(_msgSender());\\n    }\\n\\n    modifier onlyWhitelistAdmin() {\\n        require(isWhitelistAdmin(_msgSender()), \\\"WhitelistAdminRole: caller does not have the WhitelistAdmin role\\\");\\n        _;\\n    }\\n\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\n        return _whitelistAdmins.has(account);\\n    }\\n\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n        _addWhitelistAdmin(account);\\n    }\\n\\n    function renounceWhitelistAdmin() public {\\n        _removeWhitelistAdmin(_msgSender());\\n    }\\n\\n    function _addWhitelistAdmin(address account) internal {\\n        _whitelistAdmins.add(account);\\n        emit WhitelistAdminAdded(account);\\n    }\\n\\n    function _removeWhitelistAdmin(address account) internal {\\n        _whitelistAdmins.remove(account);\\n        emit WhitelistAdminRemoved(account);\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GOLD_CLAIM_DAUGHTER_MIN_NUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAINBOW_CLAIM_DAUGHTER_MIN_NUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SILVER_CLAIM_DAUGHTER_MIN_NUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addWhitelistAirdrops\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addWhitelistSpark\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"adminMintAirdrops\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"adminMintAlien\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"adminMintDaughter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"adminMintMother\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"adminMintRare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"adminMintSpark\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"adminMintx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropsCurrentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropsLeftover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alienCurrentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alienLeftover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"silver\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"gold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"rainbow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ebible\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"random\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"m3d\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"airdrops\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"spark\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canClaim3D\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canClaimAirdrops\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canClaimEbible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"canClaimSGR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"silver\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"gold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"rainbow\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canClaimSpark\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim3D\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAirdrops\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEbible\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"}],\"name\":\"claimSGR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimSpark\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daughterCurrentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daughterLeftover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ebibleClaimEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ebibleCurrentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ebibleLeftover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getClaim3DFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getClaimAirdropsFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getClaimEbibleFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getClaimFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getClaimSparkFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDaughterCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getTokenTypes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"types\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldCurrentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldLeftover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAirdrops\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistSpark\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m3dClaimEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m3dCurrentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m3dLeftover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"motherCurrentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"motherLeftover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rainbowCurrentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rainbowLeftover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rareCurrentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rareLeftover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"set3DEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setEbileEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setGoldClaimDaughterMinNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setRainbowClaimDaughterMinNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setSGREnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSilverClaimDaughterMinNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"}],\"name\":\"setTokenType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setWhitelistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setWhitelistMintMaxCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sgrClaimEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silverCurrentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silverLeftover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sparkCurrentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sparkLeftover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistMintCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMintMaxCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DORToken","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c6662bff5039695f42d42241af537893464966062f2f862dc49e69369643f01e"}]}