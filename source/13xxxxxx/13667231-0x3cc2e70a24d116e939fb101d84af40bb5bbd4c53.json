{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"MyobuChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n//Address (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol)\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n// Context (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol) \\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// Ownable (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol)\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n// ReentrancyGuard (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t//\\r\\n// IERC20 (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol)\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n// SafeERC20 (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol)\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n// IMyobu \\r\\ninterface IMyobu is IERC20 {\\r\\n    event DAOChanged(address newDAOContract);\\r\\n    event MyobuSwapChanged(address newMyobuSwap);\\r\\n\\r\\n    function DAO() external view returns (address); // solhint-disable-line\\r\\n\\r\\n    function myobuSwap() external view returns (address);\\r\\n\\r\\n    event TaxAddressChanged(address newTaxAddress);\\r\\n    event TaxedTransferAddedFor(address[] addresses);\\r\\n    event TaxedTransferRemovedFor(address[] addresses);\\r\\n\\r\\n    event FeesTaken(uint256 teamFee);\\r\\n    event FeesChanged(Fees newFees);\\r\\n\\r\\n    struct Fees {\\r\\n        uint256 impact;\\r\\n        uint256 buyFee;\\r\\n        uint256 sellFee;\\r\\n        uint256 transferFee;\\r\\n    }\\r\\n\\r\\n    function currentFees() external view returns (Fees memory);\\r\\n\\r\\n    struct LiquidityETHParams {\\r\\n        address pair;\\r\\n        address to;\\r\\n        uint256 amountTokenOrLP;\\r\\n        uint256 amountTokenMin;\\r\\n        uint256 amountETHMin;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    event LiquidityAddedETH(\\r\\n        address pair,\\r\\n        uint256 amountToken,\\r\\n        uint256 amountETH,\\r\\n        uint256 liquidity\\r\\n    );\\r\\n\\r\\n    function noFeeAddLiquidityETH(LiquidityETHParams calldata params)\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n\\r\\n    function taxedPair(address pair) external view returns (bool);\\r\\n} \\r\\ninterface IRewardToken is IERC20 {\\r\\n\\r\\nfunction mint(uint256 amount) external returns(bool);\\r\\n\\r\\n}\\r\\n// IERC165(https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol)\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\n// IERC721(https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/IERC721.sol)\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n      *\\r\\n      * Requirements:\\r\\n      *\\r\\n      * - `from` cannot be the zero address.\\r\\n      * - `to` cannot be the zero address.\\r\\n      * - `tokenId` token must exist and be owned by `from`.\\r\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n      *\\r\\n      * Emits a {Transfer} event.\\r\\n      */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\r\\n\\r\\n}\\r\\n// IERC721Receiver(https://github.com/binodnp/openzeppelin-solidity/blob/master/contracts/token/ERC721/IERC721Receiver.sol)\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\r\\n}\\r\\n\\r\\n// ERC721Holder (https://github.com/binodnp/openzeppelin-solidity/blob/master/contracts/token/ERC721/ERC721Holder.sol)\\r\\n\\r\\n  /**\\r\\n   * @dev Implementation of the {IERC721Receiver} interface.\\r\\n   *\\r\\n   * Accepts all token transfers.\\r\\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\r\\n   */\\r\\n  \\r\\ncontract ERC721Holder is IERC721Receiver {\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Receiver-onERC721Received}.\\r\\n     *\\r\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface INFT is IERC721 {\\r\\n\\tfunction getMultiplierForTokenID(uint256 _tokenID) external view returns (uint256);\\r\\n}\\r\\n// IUniswapV2Router01 (https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router01.sol)\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n// IUniswapV2Router02 (https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router02.sol)\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n// Staking contract (this is forked, rewritten for 0.8.x, gas optimized and functionally modified from GooseDefi's MasterchefV2, codebase is battle tested countless times and is totally safe).\\r\\n// You're free to publish, distribute and modify a copy of this contract as you want. Please mention where it's from though. \\r\\n// Have fun reading it :) ( Original contract : https://github.com/goosedefi/goose-contracts/blob/master/contracts/MasterChefV2.sol). \\r\\n// RWT is a placeholder name for the upcoming reward token\\r\\ncontract MyobuChef is Ownable, ReentrancyGuard, ERC721Holder {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\t\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint16 boostPointsBP;\\t    // The NFT multiplier. \\r\\n        uint16 lockTimeBoost;          // the lock time boost, max is x3\\r\\n        uint32 lockedUntil;         // lock end in UNIX seconds, used to compute the lockTimeBoost\\r\\n        uint96 claimableRWT;\\r\\n\\t\\tuint96 claimableETH;\\r\\n        uint112 amount;             // How many LP tokens the user has provided.\\r\\n        uint112 weightedBalance;    // amount * boostPointsBP * lockTimeBoost\\r\\n        uint112 rewardDebt;\\t\\t    // Reward debt. See explanation below.\\r\\n\\t\\tuint112 ETHrewardDebt;\\r\\n        address[] NFTContracts;         // Trackers for NFT tokens staked \\r\\n        uint[] NFTTokenIDs;              \\r\\n        //\\r\\n        // We do some fancy math here. Basically, any point in time, the amount of RWTs and ETH \\r\\n        // entitled to a user but is pending to be distributed is:\\r\\n\\t\\t//  weightedBalance = (user.amount * (1000+boostPointsBP * 1000+lockTimeBoost)) / 1000000\\r\\n        //   pending RWT reward = ((user.weightedBalance * pool.accRwtPerShare) - user.rewardDebt)\\r\\n        //\\t pending ETH rewards = \\t(user.amount * pool.accETHPerShare) - user.ETHrewardDebt\\t\\t\\r\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\r\\n        //   1. The pool's `accEggPerShare` (and `lastRewardBlock`) gets updated.\\r\\n        //   2. User receives the pending reward sent to his/her address.\\r\\n        //   3. User's `amount` gets updated.\\r\\n        //   4. User's `rewardDebt` gets updated.\\r\\n    }\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IERC20 lpToken;             // Address of LP token contract.\\r\\n        uint64 allocPoint;          // How many allocation points assigned to this pool. EGGs to distribute per block.\\r\\n        uint64 lastRewardBlock;     // Last block number that rewards distribution occurs.\\r\\n        uint112 accRwtPerShare;     // Accumulated RWTs per share, times 1e12.\\r\\n        uint112 accETHPerShare;     // Accumulated ETH rewards  per share, times 1e12. \\r\\n\\t\\tuint112 weightedBalance;    // The total of all weightedBalances from users. \\r\\n    }\\r\\n\\r\\n  \\r\\n    // The Myobu token\\r\\n    IMyobu public Myobu;\\r\\n\\t// The reward token \\r\\n\\tIRewardToken public rwt;\\r\\n\\t// The uniswap V2 router\\r\\n\\taddress public router;\\r\\n\\t// The WETH token contract\\r\\n\\taddress public WETH;\\r\\n\\t// The ETHBank address\\r\\n\\taddress public ETHBank;\\r\\n\\t// The boost nft contracts \\r\\n\\tmapping (address => bool) public isNFTContract;\\r\\n    // RWT tokens created per block.\\r\\n    uint256 public rwtPerBlock;\\r\\n    // ETH distributed per block \\r\\n\\tuint256 public ETHPerBlock;\\r\\n\\t// ETH not distributed yet (should be address(this).balance - ETHLeftUnclaimed)\\r\\n\\tuint256 public ETHLeftUnshared;\\r\\n\\t// ETH distributed  but not claimed yet \\r\\n\\tuint256 public ETHLeftUnclaimed;\\r\\n    // Days \\r\\n    uint256 public numdays;\\r\\n    // Info of each pool.\\r\\n    PoolInfo[] public poolInfo;\\r\\n    // Info of each user that stakes LP tokens.\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n    uint256 public totalAllocPoint;\\r\\n    // The block number when the farm starts mining starts.\\r\\n    uint256 public startBlock;\\r\\n\\t// Has the secondary reward token been released yet? \\r\\n\\tbool public tokenReleased;\\r\\n\\tbool public isEmergency;\\r\\n\\tevent RewardTokenSet(address indexed tokenAddress, uint256 indexed rwtPerBlock, uint256 timestamp);\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event UpdateEmissionRate(address indexed user, uint256 rwtPerBlock);\\r\\n\\tevent NFTStaked(address indexed user, address indexed NFTContract, uint256 tokenID);\\r\\n\\tevent NFTWithdrawn(address indexed user, address indexed NFTContract, uint256 tokenID);\\r\\n\\tevent TokensLocked(address indexed user, uint256 timestamp, uint256 lockTime);\\r\\n\\tevent Emergency(uint256 timestamp, bool ifEmergency);\\r\\n    mapping(IERC20 => bool) public poolExistence;\\r\\n    modifier nonDuplicated(IERC20 _lpToken) {\\r\\n        require(poolExistence[_lpToken] == false, \\\"nonDuplicated: duplicated\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyEmergency {\\r\\n        require(isEmergency == true, \\\"onlyEmergency: Emergency use only!\\\");\\r\\n        _;\\r\\n    }\\r\\n    mapping(address => bool) public authorized;\\r\\n    modifier onlyAuthorized {\\r\\n        require(authorized[msg.sender] == true, \\\"onlyAuthorized: address not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n    constructor(\\r\\n        IMyobu _myo,\\r\\n\\t\\taddress _router\\r\\n    ) {\\r\\n        Myobu = _myo;\\r\\n        router = _router;\\r\\n\\t\\tWETH = IUniswapV2Router02(router).WETH();\\r\\n\\t\\tstartBlock = type(uint256).max;\\r\\n        numdays = 1;\\r\\n    }\\r\\n\\r\\n//--------------------------------------------------------VIEW FUNCTIONS --------------------------------------------------------\\r\\n    // Return number of pools\\r\\n\\tfunction poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n    // Return reward multiplier over the given _from to _to block.\\r\\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\\r\\n        return (_to - _from);\\r\\n    }\\r\\n\\r\\n    // View function to see pending rewards (RWT and ETH) on frontend.\\r\\n    function pendingRewards(uint256 _pid, address _user) external view returns (uint256, uint256) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 userWeightedAmount = user.weightedBalance;\\r\\n        uint256 accRwtPerShare = pool.accRwtPerShare;\\r\\n        uint256 accETHPerShare = pool.accETHPerShare;\\r\\n        uint256 weightedBalance = pool.weightedBalance;\\r\\n        uint256 PendingRWT;\\r\\n        uint256 PendingETH;\\r\\n        if (block.number > pool.lastRewardBlock && weightedBalance != 0) {\\r\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\r\\n            uint256 rwtReward = multiplier * rwtPerBlock * pool.allocPoint / totalAllocPoint;\\r\\n            accRwtPerShare = accRwtPerShare + rwtReward * 1e12 / weightedBalance;\\r\\n            uint256 ETHReward = multiplier * ETHPerBlock * pool.allocPoint / totalAllocPoint;\\r\\n            accETHPerShare = accETHPerShare + ETHReward * 1e12 / weightedBalance;\\r\\n            PendingRWT = (userWeightedAmount * accRwtPerShare / 1e12) - user.rewardDebt + user.claimableRWT;\\r\\n            PendingETH = (userWeightedAmount * accETHPerShare / 1e12) - user.ETHrewardDebt + user.claimableETH;\\r\\n        }\\r\\n        return(PendingRWT, PendingETH);\\r\\n    }\\r\\n\\r\\n\\r\\n//--------------------------------------------------------PUBLIC FUNCTIONS --------------------------------------------------------\\r\\n    // Update reward variables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            updatePool(pid);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n\\t//Receive ETH from the tax splitter contract. triggered on a walue transfer with .call(\\\"arbitraryData\\\").\\r\\n    fallback() external payable {\\r\\n        ETHLeftUnshared += msg.value;\\r\\n        updateETHRewards();\\r\\n    }\\r\\n\\t//Receive ETH sent through .send, .transfer, or .call(\\\"\\\"). These wont be taken into account in the rewards. \\r\\n    receive() external payable {\\r\\n        require(msg.sender != ETHBank);\\r\\n    }\\r\\n    \\r\\n    // Update reward variables of the given pool to be up-to-date.\\r\\n    function updatePool(uint256 _pid) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (block.number <= pool.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 lpSupply = pool.weightedBalance;\\r\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\r\\n            pool.lastRewardBlock = uint64(block.number);\\r\\n            return;\\r\\n        }\\r\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\r\\n        if(tokenReleased) {\\r\\n            uint256 rwtReward = multiplier * rwtPerBlock * pool.allocPoint / totalAllocPoint;\\r\\n            pool.accRwtPerShare = uint112(pool.accRwtPerShare + rwtReward * 1e12 / lpSupply);\\r\\n        }\\r\\n        uint256 ETHReward = multiplier * ETHPerBlock * pool.allocPoint / totalAllocPoint;\\r\\n        ETHLeftUnclaimed = ETHLeftUnclaimed + ETHReward;\\r\\n        ETHLeftUnshared = ETHLeftUnshared - ETHReward;\\r\\n        pool.accETHPerShare = uint112(pool.accETHPerShare + ETHReward * 1e12 / lpSupply);\\r\\n        pool.lastRewardBlock = uint64(block.number);\\r\\n    }\\r\\n\\r\\n    // Deposit tokens for rewards.\\r\\n    function deposit(uint256 _pid, uint256 _amount, uint256 lockTime) public nonReentrant {\\r\\n        _deposit(msg.sender, _pid, _amount, lockTime);\\r\\n    }\\r\\n    // Withdraw unlocked tokens.\\r\\n    function withdraw(uint32 _pid, uint256 _amount) public nonReentrant {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        require(user.lockedUntil < block.timestamp, \\\"withdraw: Tokens locked, if you're trying to claim your rewards use the deposit function\\\");\\r\\n        require(user.amount >= _amount && _amount > 0, \\\"withdraw: not good\\\");\\r\\n        updatePool(_pid);\\r\\n        if (user.weightedBalance > 0){\\r\\n            _addToClaimable(_pid, msg.sender);\\r\\n            if(tokenReleased) {\\r\\n                if (user.claimableRWT > 0) {\\r\\n                    safeRWTTransfer(msg.sender, user.claimableRWT);\\r\\n                    user.claimableRWT = 0;\\r\\n                }\\r\\n            }\\r\\n            if (user.claimableETH > 0) { \\r\\n                safeETHTransfer(msg.sender, user.claimableETH);\\r\\n                user.claimableETH = 0;\\r\\n            }\\r\\n        }\\r\\n        user.amount = uint112(user.amount - _amount);\\r\\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\\r\\n        updateUserWeightedBalance(_pid, msg.sender);\\r\\n\\r\\n        emit Withdraw(msg.sender, _pid, _amount);\\r\\n    }\\r\\n    \\r\\n    // Withdraw unlocked tokens without caring about rewards. EMERGENCY ONLY.\\r\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant onlyEmergency {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        uint256 amount = user.amount;\\r\\n        pool.weightedBalance -= user.weightedBalance;\\r\\n        user.amount = 0;\\r\\n        user.weightedBalance = 0;\\r\\n        user.ETHrewardDebt = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        user.claimableETH = 0;\\r\\n        user.claimableRWT = 0;\\r\\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\\r\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\r\\n    }\\r\\n\\t\\r\\n\\t\\r\\n\\t//Adds Myobu/ETH liquidity without transfer fees and stakes the amount. Refund any unspent ETH to the user.\\r\\n    \\r\\n\\t//@dev The Myobu/ETH pool MUST be pool 0\\r\\n    function addLiquidityNoFeeAndStake(uint256 amountTokensIn, uint256 amountETHMin, uint256 amountTokenMin, uint256 lockTime) public payable nonReentrant {\\r\\n        IMyobu.LiquidityETHParams memory params;\\r\\n        UserInfo storage user = userInfo[0][msg.sender];\\r\\n        require(msg.value > 0);\\r\\n        require((lockTime >= 604800 && lockTime <= 31449600 && user.lockedUntil <= lockTime + block.timestamp) || (lockTime == 0 && user.lockedUntil >= block.timestamp), \\\"addLiquidityNoFeeAndStake : Can't lock tokens for less than 1 week\\\");\\r\\n        updatePool(0);\\r\\n        if (user.weightedBalance > 0) {\\r\\n            _addToClaimable(0, msg.sender);\\r\\n        }\\r\\n        Myobu.transferFrom(msg.sender, address(this), amountTokensIn);\\r\\n        params.pair = address(poolInfo[0].lpToken);\\r\\n        params.to = address(this);\\r\\n        params.amountTokenMin = amountTokenMin;\\r\\n        params.amountETHMin = amountETHMin;\\r\\n        params.amountTokenOrLP = amountTokensIn;\\r\\n        params.deadline = block.timestamp;\\r\\n        (,uint256 ETHUsed ,uint256 numLiquidityAdded) = Myobu.noFeeAddLiquidityETH{value: msg.value}(params);\\r\\n        //noFeeAddLiquidityETH refunds unused ETH, but not Myobu, we're forced to do the same here (any unused Myobu is locked in the token contract and will be treated as transfer fees).\\r\\n        // @dev no access to address(this).balance, saves about 1,3k gas.\\r\\n        payable(msg.sender).transfer(msg.value - ETHUsed);\\r\\n        user.amount += uint112(numLiquidityAdded);\\r\\n        if (lockTime > 0) {\\r\\n            lockTokens(msg.sender, 0, lockTime);\\r\\n        }\\r\\n        else {\\r\\n            updateUserWeightedBalance(0, msg.sender);\\r\\n        }\\r\\n\\t\\temit Deposit(msg.sender, 0, numLiquidityAdded);\\r\\n    }\\r\\n    \\r\\n\\t//Buy Myobu with the ETH rewards from the Myobu single asset pool to compound\\r\\n\\t// @dev Myobu single asset pool MUST be pool 1\\r\\n    function reinvestETHRewards(uint256 amountOutMin) public nonReentrant {\\r\\n            UserInfo storage user = userInfo[1][msg.sender];\\r\\n            require(user.lockedUntil >= block.timestamp);\\r\\n            updatePool(1);\\r\\n            uint256 ETHPending = (user.weightedBalance * poolInfo[1].accETHPerShare / 1e12) - user.ETHrewardDebt + user.claimableETH;\\r\\n            require(ETHPending > 0);\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = WETH;\\r\\n            path[1] = address(Myobu);\\r\\n            if(ETHPending > ETHLeftUnclaimed) {\\r\\n                ETHPending = ETHLeftUnclaimed;\\r\\n            }\\r\\n            uint256 balanceBefore = Myobu.balanceOf(address(this));\\r\\n            IUniswapV2Router02(router).swapExactETHForTokensSupportingFeeOnTransferTokens{value: ETHPending}(\\r\\n            amountOutMin,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n            );\\r\\n            uint256 amountSwapped = Myobu.balanceOf(address(this)) - balanceBefore;\\r\\n            user.amount += uint112(amountSwapped);\\r\\n            user.claimableETH = 0;\\r\\n            updateUserWeightedBalance(1, msg.sender);\\r\\n            emit Deposit(msg.sender, 1, amountSwapped);\\r\\n    }\\r\\n    \\r\\n    function buyAndStakeETH(uint256 amountOutMin, uint256 lockTime) public payable nonReentrant{\\r\\n        UserInfo storage user = userInfo[1][msg.sender];\\r\\n        require(msg.value > 0);\\r\\n        require((lockTime >= 604800 && lockTime <= 31449600 && user.lockedUntil <= lockTime + block.timestamp) || (lockTime == 0 && user.lockedUntil >= block.timestamp), \\\"buyAndStakeETH : Can't lock tokens for less than 1 week\\\");\\r\\n        updatePool(1);\\r\\n        if (user.weightedBalance > 0) {\\r\\n            _addToClaimable(1, msg.sender);\\r\\n        }\\r\\n        uint256 balanceBefore = Myobu.balanceOf(address(this));\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = WETH;\\r\\n        path[1] = address(Myobu);\\r\\n        IUniswapV2Router02(router).swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\\r\\n            amountOutMin,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n        uint256 _amount = Myobu.balanceOf(address(this)) - balanceBefore;\\r\\n        user.amount = uint112(user.amount + _amount);\\r\\n        if (lockTime > 0){\\r\\n            lockTokens(msg.sender, 1, lockTime);\\r\\n        }\\r\\n        else {\\r\\n            updateUserWeightedBalance(1, msg.sender);\\r\\n        }\\r\\n        emit Deposit(msg.sender, 1, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw previously staked NFT, loosing the rewards boost\\r\\n\\tfunction withdrawNFT(uint256 _pid, address NFTContract, uint tokenID) public nonReentrant {\\r\\n        address sender = msg.sender;\\r\\n\\t\\tuint256 NFTIndex;\\r\\n        bool tokenFound;\\r\\n        uint length = userInfo[_pid][sender].NFTContracts.length;\\r\\n        updatePool(_pid);\\r\\n        _addToClaimable(_pid, sender);\\r\\n        for (uint i; i < userInfo[_pid][sender].NFTContracts.length; i++) {\\r\\n            if (userInfo[_pid][sender].NFTContracts[i] == NFTContract) {\\r\\n                if(userInfo[_pid][sender].NFTTokenIDs[i] == tokenID) {\\r\\n                tokenFound = true;\\r\\n                NFTIndex = i;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t}\\r\\n            }\\r\\n\\t\\t}\\r\\n        require(tokenFound == true, \\\"withdrawNFT, token not found\\\");\\r\\n\\t\\tuserInfo[_pid][sender].boostPointsBP -= uint16(INFT(NFTContract).getMultiplierForTokenID(tokenID));\\r\\n\\t\\tuserInfo[_pid][sender].NFTContracts[NFTIndex] = userInfo[_pid][sender].NFTContracts[length -1];\\r\\n\\t\\tuserInfo[_pid][sender].NFTContracts.pop();\\r\\n\\t\\tuserInfo[_pid][sender].NFTTokenIDs[NFTIndex] = userInfo[_pid][sender].NFTTokenIDs[length -1];\\r\\n\\t\\tuserInfo[_pid][sender].NFTTokenIDs.pop();\\r\\n\\t\\tupdateUserWeightedBalance(_pid, sender);\\r\\n\\t\\tINFT(NFTContract).safeTransferFrom(address(this), sender, tokenID);\\r\\n\\t\\t\\temit NFTWithdrawn(sender, NFTContract, tokenID);\\r\\n    }\\r\\n\\r\\n\\t// Stake an NFT for rewards boost. Cannot be called by other contracts, see below.\\r\\n    function boostWithNFT(uint256 _pid, address NFTContract, uint tokenID) public nonReentrant {\\r\\n        // We allow vaults to interact with our contracts, but we believe that they shouldnt be allowed to stake NFTs to have all their users enjoy boosted rewards as a group.\\r\\n        // In an effort to prevent this we dont allow other contracts to interact with this function. \\r\\n        // All other functions public functions are accessible and devs are more than welcomed to build on top of our contracts.\\r\\n        require(msg.sender == tx.origin, \\\"boostWithNFT : no contracts\\\"); \\r\\n        require(isNFTContract[NFTContract], \\\"boostWithNFT: incorrect contract address\\\");\\r\\n        require(userInfo[_pid][msg.sender].lockedUntil >= block.timestamp);\\r\\n        updatePool(_pid);\\r\\n        _addToClaimable(_pid, msg.sender);\\r\\n        INFT(NFTContract).safeTransferFrom(msg.sender, address(this), tokenID);\\r\\n        userInfo[_pid][msg.sender].NFTContracts.push(NFTContract);\\r\\n\\t\\tuserInfo[_pid][msg.sender].NFTTokenIDs.push(tokenID);\\r\\n        userInfo[_pid][msg.sender].boostPointsBP += uint16(INFT(NFTContract).getMultiplierForTokenID(tokenID));\\r\\n        updateUserWeightedBalance(_pid, msg.sender);\\r\\n\\t\\temit NFTWithdrawn(msg.sender, NFTContract, tokenID);\\r\\n    }\\r\\n    \\r\\n    function addToClaimable(uint256 _pid, address sender) public nonReentrant {\\r\\n        require(userInfo[_pid][sender].lockedUntil >= block.timestamp);\\r\\n        updatePool(_pid);\\r\\n        _addToClaimable(_pid, sender);\\r\\n    }\\r\\n\\r\\n//--------------------------------------------------------RESTRICTED FUNCTIONS --------------------------------------------------------\\t\\r\\n\\r\\n    function depositFor(address sender, uint256 _pid, uint256 amount, uint256 lockTime) public onlyAuthorized {\\r\\n        _deposit(sender, _pid, amount, lockTime);\\r\\n    }\\r\\n    // Create a new pool. Can only be called by the owner.\\r\\n    function add(uint64 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyOwner nonDuplicated(_lpToken) {\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        uint64 lastRewardBlock = uint64(block.number > startBlock ? block.number : startBlock);\\r\\n        totalAllocPoint = totalAllocPoint + _allocPoint;\\r\\n        poolExistence[_lpToken] = true;\\r\\n        poolInfo.push(PoolInfo({\\r\\n        lpToken : _lpToken,\\r\\n        allocPoint : _allocPoint,\\r\\n        lastRewardBlock : lastRewardBlock,\\r\\n        accRwtPerShare : 0,\\r\\n        accETHPerShare : 0,\\r\\n        weightedBalance : 0\\r\\n        }));\\r\\n    }\\r\\n\\t// Add an NFT Contract to the list. \\r\\n\\tfunction addNFTContract(address NFTcontract) public onlyOwner {\\r\\n\\t\\tisNFTContract[NFTcontract] = true;\\r\\n\\t}\\r\\n\\t\\r\\n\\t// Set ETHBank\\r\\n\\tfunction setETHBank(address _ETHBank) public onlyOwner {\\r\\n\\t    ETHBank = _ETHBank;\\r\\n\\t}\\r\\n\\r\\n    // Set Router\\r\\n    function setRouter(address _router) public onlyOwner {\\r\\n        router = _router;\\r\\n    }\\r\\n\\t\\r\\n\\t// Pull out tokens accidentally sent to the contract. Doesnt work with the reward token or any staked token. Can only be called by the owner.\\r\\n    function rescueToken(address tokenAddress) public onlyOwner {\\r\\n        require((tokenAddress != address(rwt)) && !poolExistence[IERC20(tokenAddress)], \\\"rescueToken : wrong token address\\\");\\r\\n        uint256 bal = IERC20(tokenAddress).balanceOf(address(this));\\r\\n        IERC20(tokenAddress).transfer(msg.sender, bal);\\r\\n    }\\r\\n\\r\\n    // Update the given pool's rewards allocation point and deposit fee. Can only be called by the owner.\\r\\n    function set(uint256 _pid, uint64 _allocPoint, bool _withUpdate) public onlyOwner {\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint ;\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n    }\\r\\n\\t// Initialize the ETH rewards. Can only be called by the owner. \\r\\n    function startRewards() public onlyOwner {\\r\\n        require(startBlock > block.number, \\\"startRewards: rewards already started\\\");\\r\\n        startBlock = block.number;\\r\\n        for (uint i; i < poolInfo.length; i++) {\\r\\n            poolInfo[i].lastRewardBlock = uint64(block.number);            \\r\\n        }\\r\\n    }\\r\\n    // Updates RWT emision rate. Can only be called by the owner\\r\\n    function updateEmissionRate(uint256 _rwtPerBlock) public onlyOwner {\\r\\n        require(tokenReleased == true, \\\"updateEmissionRate: Reward token not set\\\");\\r\\n\\t\\tmassUpdatePools();\\r\\n        rwtPerBlock = _rwtPerBlock;\\r\\n        emit UpdateEmissionRate(msg.sender, _rwtPerBlock);\\r\\n    }\\r\\n    // Sets the reward token address and the initial emission rate. Can only be called by the owner. \\r\\n    function setRewardToken(address _RWT, uint _rwtPerBlock) public onlyOwner {\\r\\n        require(tokenReleased == false, \\\"Reward token already set\\\");\\r\\n        rwt = IRewardToken(_RWT);\\r\\n        rwtPerBlock = _rwtPerBlock;\\r\\n\\t\\ttokenReleased = true;\\r\\n        emit RewardTokenSet(_RWT, _rwtPerBlock, block.timestamp);\\r\\n    }\\r\\n    \\r\\n    // Emergency only \\r\\n    function emergency(bool _isEmergency) public onlyOwner {\\r\\n        isEmergency = _isEmergency;\\r\\n        emit Emergency(block.timestamp, _isEmergency);\\r\\n    }\\r\\n    function authorize(address _address) public onlyOwner {\\r\\n        authorized[_address] = true;\\r\\n    }\\r\\n    function unauthorize(address _address) public onlyOwner {\\r\\n        authorized[_address] = false;\\r\\n    }\\r\\n    function setnumdays(uint256 _days) public onlyOwner {\\r\\n        require(_days > 0 && _days < 14);\\r\\n        numdays = _days;\\r\\n    }\\r\\n    \\r\\n\\r\\n//--------------------------------------------------------INTERNAL FUNCTIONS --------------------------------------------------------\\r\\n    function _deposit(address sender, uint256 _pid, uint256 _amount, uint256 lockTime) internal {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][sender];\\r\\n        updatePool(_pid);\\r\\n        if (user.weightedBalance > 0) {\\r\\n            if (_amount == 0 && lockTime == 0) {\\r\\n                if(tokenReleased) {\\r\\n                    uint256 pending = (user.weightedBalance * pool.accRwtPerShare / 1e12) - user.rewardDebt + user.claimableRWT;\\r\\n                    if (pending > 0) {\\r\\n                        safeRWTTransfer(sender, pending);\\r\\n                    }\\r\\n                    user.rewardDebt = user.weightedBalance * pool.accRwtPerShare / 1e12;\\r\\n                }\\r\\n                uint256 ETHPending = (user.weightedBalance * pool.accETHPerShare / 1e12) - user.ETHrewardDebt + user.claimableETH;\\r\\n                if (ETHPending > 0) { \\r\\n                    safeETHTransfer(sender, ETHPending);\\r\\n                    user.ETHrewardDebt = user.weightedBalance * pool.accETHPerShare / 1e12;\\r\\n\\r\\n                }\\r\\n                user.claimableRWT = 0;\\r\\n                user.claimableETH = 0;\\r\\n            }\\r\\n            else {\\r\\n                _addToClaimable(_pid, sender);\\r\\n            }\\r\\n        }\\r\\n        if (_amount > 0) {\\r\\n            require((lockTime >= 604800 && lockTime <= 31449600 && user.lockedUntil <= lockTime + block.timestamp) || (lockTime == 0 && user.lockedUntil >= block.timestamp), \\\"deposit : Can't lock tokens for less than 1 week\\\");\\r\\n            //Still takes the tokens from msg.sender (intended)\\r\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n            user.amount = uint112(user.amount + _amount);\\r\\n            if (lockTime == 0) {\\r\\n                updateUserWeightedBalance(_pid, sender);\\r\\n            }\\r\\n        }\\r\\n\\t\\tif (lockTime > 0) {\\r\\n\\t\\t    lockTokens(sender, _pid, lockTime);\\r\\n\\t\\t}\\r\\n\\t\\tif (user.lockedUntil < block.timestamp) {\\r\\n\\t\\t    updateUserWeightedBalance(_pid, sender);\\r\\n\\t\\t}\\r\\n        emit Deposit(sender, _pid, _amount);\\r\\n    }\\r\\n    \\r\\n    //Lock tokens up to 52 weeks for rewards boost, ( max rewards = x3, rewards increase linearly with lock time)\\r\\n    function lockTokens(address sender, uint256 _pid, uint256 lockTime) internal {\\r\\n        UserInfo storage user = userInfo[_pid][sender]; \\r\\n        require(user.amount > 0, \\\"lockTokens: No tokens to lock\\\"); \\r\\n        require(user.lockedUntil <= block.timestamp + lockTime, \\\"lockTokens: Tokens already locked\\\");\\r\\n        require(lockTime >= 604800, \\\"lockTokens: Lock time too short\\\");\\r\\n        require(lockTime <= 31449600, \\\"lockTokens: Lock time too long\\\");\\r\\n        user.lockedUntil = uint32(block.timestamp + lockTime);\\r\\n        user.lockTimeBoost = uint16(2 * 1000 * (lockTime-604800) / 30844800); // 0 - 2000 \\r\\n        updateUserWeightedBalance(_pid, sender);\\r\\n\\t\\temit TokensLocked(sender, block.timestamp, lockTime);\\r\\n    }\\r\\n    \\r\\n    // calculate and update the user weighted balance\\r\\n\\tfunction updateUserWeightedBalance(uint256 _pid, address _user) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n\\t\\tuint256 poolBalance = pool.weightedBalance - user.weightedBalance;\\r\\n\\t\\tif (user.lockedUntil < block.timestamp) {\\r\\n\\t\\t    user.weightedBalance = 0;\\r\\n\\t\\t    user.lockTimeBoost = 0;\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n            user.weightedBalance = user.amount * (1000 + user.lockTimeBoost) * (1000 + user.boostPointsBP) / 1000000;\\r\\n        }\\r\\n        pool.weightedBalance = uint112(poolBalance + user.weightedBalance);\\r\\n\\t\\tuser.rewardDebt = user.weightedBalance * pool.accRwtPerShare / 1e12;\\r\\n\\t\\tuser.ETHrewardDebt = user.weightedBalance * pool.accETHPerShare / 1e12;\\r\\n    }\\r\\n    \\r\\n    // triggered on refills. \\r\\n    function updateETHRewards() internal {\\r\\n        // ETHPerBlock = ETHLeftUnshared / nb of blocks in numdays days. \\r\\n        // The contact assumes it's not going to receive any ether for another numdays days and computes the rewards for this period accordingly.\\r\\n        // Refilling early isnt an issue, any unshared ETH left will make it into the next rewards cycle\\r\\n        ETHPerBlock = ETHLeftUnshared / (6400 * numdays);\\r\\n        massUpdatePools();\\r\\n    }\\r\\n    \\r\\n    function _addToClaimable(uint256 _pid, address sender) internal {\\r\\n        UserInfo storage user = userInfo[_pid][sender];\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if(tokenReleased) {\\r\\n                uint256 pending = (user.weightedBalance * pool.accRwtPerShare / 1e12) - user.rewardDebt;\\r\\n                if (pending > 0) {\\r\\n                    user.claimableRWT += uint96(pending);\\r\\n                    user.rewardDebt = user.weightedBalance * pool.accRwtPerShare / 1e12;\\r\\n                }\\r\\n            }\\r\\n            uint256 ETHPending = (user.weightedBalance * pool.accETHPerShare / 1e12) - user.ETHrewardDebt;\\r\\n            if (ETHPending > 0) { \\r\\n                user.claimableETH += uint96(ETHPending);\\r\\n                user.ETHrewardDebt = user.weightedBalance * pool.accETHPerShare / 1e12;\\r\\n            }\\r\\n    }\\r\\n\\r\\n    // Safe transfer function, just in case if rounding error causes pool to not have enough RWTs.\\r\\n    function safeRWTTransfer(address _to, uint256 _amount) internal {\\r\\n        uint256 rwtBal = rwt.balanceOf(address(this));\\r\\n        bool transferSuccess = false;\\r\\n        if (_amount > rwtBal) {\\r\\n            transferSuccess = rwt.transfer(_to, rwtBal);\\r\\n        } else {\\r\\n            transferSuccess = rwt.transfer(_to, _amount);\\r\\n        }\\r\\n        require(transferSuccess, \\\"safeRWTTransfer: transfer failed\\\");\\r\\n    }\\r\\n    // Same as the previous function,\\r\\n\\t// deleted check, will fail only on being sent to a contract with a fallback function not empty/without a fallback/recieve function, and will revert in this case (If balance is not enough will simply transfer 0 ETH)\\r\\n    function safeETHTransfer(address _to, uint256 _amount) internal {\\r\\n        if (_amount > ETHLeftUnclaimed) {\\r\\n            _amount = ETHLeftUnclaimed;\\r\\n        }\\r\\n            payable(_to).transfer(_amount);\\r\\n            ETHLeftUnclaimed-= _amount;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IMyobu\",\"name\":\"_myo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"ifEmergency\",\"type\":\"bool\"}],\"name\":\"Emergency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"NFTContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"NFTStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"NFTContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"NFTWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rwtPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwtPerBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ETHBank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETHLeftUnclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETHLeftUnshared\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETHPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Myobu\",\"outputs\":[{\"internalType\":\"contract IMyobu\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_allocPoint\",\"type\":\"uint64\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTokensIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"addLiquidityNoFeeAndStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTcontract\",\"type\":\"address\"}],\"name\":\"addNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"addToClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"boostWithNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"buyAndStakeETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isEmergency\",\"type\":\"bool\"}],\"name\":\"emergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEmergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isNFTContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numdays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"allocPoint\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint112\",\"name\":\"accRwtPerShare\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"accETHPerShare\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"weightedBalance\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"reinvestETHRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rwt\",\"outputs\":[{\"internalType\":\"contract IRewardToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rwtPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_allocPoint\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ETHBank\",\"type\":\"address\"}],\"name\":\"setETHBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_RWT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rwtPerBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setnumdays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReleased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rwtPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"updateUserWeightedBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"boostPointsBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"lockTimeBoost\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"lockedUntil\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"claimableRWT\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"claimableETH\",\"type\":\"uint96\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"weightedBalance\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"rewardDebt\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"ETHrewardDebt\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_pid\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MyobuChef","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"000000000000000000000000DfDd3459D4F87234751696840092ee20C970Fb070000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}