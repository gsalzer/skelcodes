{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BitstraysSeeder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title The BitstraysToken pseudo-random seed generator\\n\\n/***********************************************************\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@........................@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@%.................................@@@@@@@@@@@@@\\n.......................@@@@@@@..............................\\n./@@@@@@@@@...................@@@....*@@@@.......*@@@@@@@@@.\\n./@@@@@@@.......@@@@@.........@@@.........@@@@@.......@@@@@.\\n@%..@@.......................................@@.......@@@..@\\n@%**.........,**.........................................**@\\n@@@@##.....##(**#######   .........  ,#######  .......###@@@\\n@@@@@@...@@@@#  @@   @@   .........  ,@@  @@@  .......@@@@@@\\n@@@@@@.....@@#  @@@@@@@   .........  ,@@@@@@@  .......@@@@@@\\n@@@@@@.....@@@@@       @@%............       .........@@@@@@\\n@@@@@@@@@..../@@@@@@@@@.............................@@@@@@@@\\n@@@@@@@@@............                   ............@@@@@@@@\\n@@@@@@@@@@@..........  @@@@@@@@@@@@@@%  .........*@@@@@@@@@@\\n@@@@@@@@@@@@@%....   @@//////////////#@@  .....@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@  @@@///////////////////@@   @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@  ************************   @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n************************************************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { IBitstraysSeeder } from './interfaces/IBitstraysSeeder.sol';\\nimport { IBitstraysDescriptor } from './interfaces/IBitstraysDescriptor.sol';\\n\\ncontract BitstraysSeeder is IBitstraysSeeder {\\n    /**\\n     * @notice Generate a pseudo-random Bitstray seed using the previous blockhash and bitstray ID.\\n     */\\n    // prettier-ignore\\n    function generateSeed(uint256 bitstrayId, IBitstraysDescriptor descriptor) external view override returns (Seed memory) {\\n        uint256 pseudorandomness = uint256(\\n            keccak256(abi.encodePacked(blockhash(block.number - 1), bitstrayId))\\n        );\\n\\n        uint256 backgroundCount = descriptor.backgroundCount();\\n        uint256 armsCount = descriptor.armsCount();\\n        uint256 shirtsCount = descriptor.shirtsCount();\\n        uint256 motivesCount = descriptor.motivesCount();\\n        uint256 headCount = descriptor.headCount();\\n        uint256 eyesCount = descriptor.eyesCount();\\n        uint256 mouthsCount = descriptor.mouthsCount();\\n\\n        uint256 kings = 10; //number of king hads\\n        uint256 beanies = 26; //number of special heads\\n\\n        uint48 rarity = uint48(uint48(pseudorandomness) % 100);\\n\\n        if (rarity < 75) { //normal\\n            headCount = headCount-beanies-kings;\\n        } else if ( rarity > 75 && rarity < 90 ) {\\n            headCount = headCount-kings; //add special head\\n        }\\n\\n        return Seed({\\n            background: uint48(\\n                uint48(pseudorandomness) % backgroundCount\\n            ),\\n            arms: uint48(\\n                uint48(pseudorandomness >> 240) % armsCount\\n            ),\\n            shirt: uint48(\\n                uint48(pseudorandomness >> 24) % shirtsCount\\n            ),\\n            motive: uint48(\\n                uint48(pseudorandomness >> 48) % motivesCount\\n            ),\\n            head: uint48(\\n                uint48(pseudorandomness >> 96) % headCount\\n            ),\\n            eyes: uint48(\\n                uint48(pseudorandomness >> 144) % eyesCount\\n            ),\\n            mouth: uint48(\\n                uint48(pseudorandomness >> 192) % mouthsCount\\n            )\\n        });\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBitstraysSeeder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for BitstraysSeeder\\n\\n/***********************************************************\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@........................@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@%.................................@@@@@@@@@@@@@\\n.......................@@@@@@@..............................\\n./@@@@@@@@@...................@@@....*@@@@.......*@@@@@@@@@.\\n./@@@@@@@.......@@@@@.........@@@.........@@@@@.......@@@@@.\\n@%..@@.......................................@@.......@@@..@\\n@%**.........,**.........................................**@\\n@@@@##.....##(**#######   .........  ,#######  .......###@@@\\n@@@@@@...@@@@#  @@   @@   .........  ,@@  @@@  .......@@@@@@\\n@@@@@@.....@@#  @@@@@@@   .........  ,@@@@@@@  .......@@@@@@\\n@@@@@@.....@@@@@       @@%............       .........@@@@@@\\n@@@@@@@@@..../@@@@@@@@@.............................@@@@@@@@\\n@@@@@@@@@............                   ............@@@@@@@@\\n@@@@@@@@@@@..........  @@@@@@@@@@@@@@%  .........*@@@@@@@@@@\\n@@@@@@@@@@@@@%....   @@//////////////#@@  .....@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@  @@@///////////////////@@   @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@  ************************   @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n************************************************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { IBitstraysDescriptor } from './IBitstraysDescriptor.sol';\\n\\ninterface IBitstraysSeeder {\\n    struct Seed {\\n        uint48 background;\\n        uint48 arms;\\n        uint48 shirt;\\n        uint48 motive;\\n        uint48 head;\\n        uint48 eyes;\\n        uint48 mouth;\\n    }\\n\\n    function generateSeed(uint256 bitstrayId, IBitstraysDescriptor descriptor) external view returns (Seed memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBitstraysDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for BitstraysDescriptor\\n\\n/***********************************************************\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@........................@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@%.................................@@@@@@@@@@@@@\\n.......................@@@@@@@..............................\\n./@@@@@@@@@...................@@@....*@@@@.......*@@@@@@@@@.\\n./@@@@@@@.......@@@@@.........@@@.........@@@@@.......@@@@@.\\n@%..@@.......................................@@.......@@@..@\\n@%**.........,**.........................................**@\\n@@@@##.....##(**#######   .........  ,#######  .......###@@@\\n@@@@@@...@@@@#  @@   @@   .........  ,@@  @@@  .......@@@@@@\\n@@@@@@.....@@#  @@@@@@@   .........  ,@@@@@@@  .......@@@@@@\\n@@@@@@.....@@@@@       @@%............       .........@@@@@@\\n@@@@@@@@@..../@@@@@@@@@.............................@@@@@@@@\\n@@@@@@@@@............                   ............@@@@@@@@\\n@@@@@@@@@@@..........  @@@@@@@@@@@@@@%  .........*@@@@@@@@@@\\n@@@@@@@@@@@@@%....   @@//////////////#@@  .....@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@  @@@///////////////////@@   @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@  ************************   @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n************************************************************/\\n\\npragma solidity ^0.8.6;\\n\\nimport { IBitstraysSeeder } from './IBitstraysSeeder.sol';\\n\\ninterface IBitstraysDescriptor {\\n    \\n    event PartsLocked();\\n\\n    event DataURIToggled(bool enabled);\\n\\n    event AttributesToggled(bool enabled);\\n\\n    event BaseURIUpdated(string baseURI);\\n\\n    function arePartsLocked() external returns (bool);\\n\\n    function areAttributesEnabled() external returns (bool);\\n\\n    function isDataURIEnabled() external returns (bool);\\n\\n    function baseURI() external returns (string memory);\\n\\n    function palettes(uint8 paletteIndex, uint256 colorIndex) external view returns (string memory);\\n    \\n    function metadata(uint8 index, uint256 traitIndex) external view returns (string memory);\\n\\n    function traitNames(uint256 index) external view returns (string memory);\\n\\n    function backgrounds(uint256 index) external view returns (string memory);\\n\\n    function arms(uint256 index) external view returns (bytes memory);\\n\\n    function shirts(uint256 index) external view returns (bytes memory);\\n\\n    function motives(uint256 index) external view returns (bytes memory);\\n\\n    function heads(uint256 index) external view returns (bytes memory);\\n\\n    function eyes(uint256 index) external view returns (bytes memory);\\n\\n    function mouths(uint256 index) external view returns (bytes memory);\\n\\n    function backgroundCount() external view returns (uint256);\\n\\n    function armsCount() external view returns (uint256);\\n\\n    function shirtsCount() external view returns (uint256);\\n\\n    function motivesCount() external view returns (uint256);\\n\\n    function headCount() external view returns (uint256);\\n\\n    function eyesCount() external view returns (uint256);\\n\\n    function mouthsCount() external view returns (uint256);\\n\\n    function addManyMetadata(string[] calldata _metadata) external;\\n\\n    function addManyColorsToPalette(uint8 paletteIndex, string[] calldata newColors) external;\\n\\n    function addManyBackgrounds(string[] calldata backgrounds) external;\\n\\n    function addManyArms(bytes[] calldata _arms) external;\\n\\n    function addManyShirts(bytes[] calldata _shirts) external;\\n\\n    function addManyMotives(bytes[] calldata _motives) external;\\n\\n    function addManyHeads(bytes[] calldata _heads) external;\\n\\n    function addManyEyes(bytes[] calldata _eyes) external;\\n\\n    function addManyMouths(bytes[] calldata _mouths) external;\\n\\n    function addColorToPalette(uint8 paletteIndex, string calldata color) external;\\n\\n    function addBackground(string calldata background) external;\\n\\n    function addArms(bytes calldata body) external;\\n\\n    function addShirt(bytes calldata shirt) external;\\n\\n    function addMotive(bytes calldata motive) external;\\n\\n    function addHead(bytes calldata head) external;\\n\\n    function addEyes(bytes calldata eyes) external;\\n\\n    function addMouth(bytes calldata mouth) external;\\n\\n    function lockParts() external;\\n\\n    function toggleDataURIEnabled() external;\\n\\n    function toggleAttributesEnabled() external;\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function tokenURI(uint256 tokenId, IBitstraysSeeder.Seed memory seed) external view returns (string memory);\\n\\n    function dataURI(uint256 tokenId, IBitstraysSeeder.Seed memory seed) external view returns (string memory);\\n\\n    function genericDataURI(\\n        string calldata name,\\n        string calldata description,\\n        IBitstraysSeeder.Seed memory seed\\n    ) external view returns (string memory);\\n\\n    function generateSVGImage(IBitstraysSeeder.Seed memory seed) external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitstrayId\",\"type\":\"uint256\"},{\"internalType\":\"contract IBitstraysDescriptor\",\"name\":\"descriptor\",\"type\":\"address\"}],\"name\":\"generateSeed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"arms\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"shirt\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"motive\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"head\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"eyes\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"mouth\",\"type\":\"uint48\"}],\"internalType\":\"struct IBitstraysSeeder.Seed\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BitstraysSeeder","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}