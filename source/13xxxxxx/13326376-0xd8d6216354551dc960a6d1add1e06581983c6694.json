{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/WrappedInvoiceFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./interfaces/IWrappedInvoice.sol\\\";\\nimport \\\"./interfaces/IWrappedInvoiceFactory.sol\\\";\\nimport \\\"./interfaces/ISmartInvoiceFactory.sol\\\";\\n\\ncontract WrappedInvoiceFactory is IWrappedInvoiceFactory {\\n    uint256 public invoiceCount = 0;\\n    mapping(uint256 => address) internal _invoices;\\n\\n    event LogNewWrappedInvoice(uint256 indexed index, address wrappedInvoice);\\n\\n    address public immutable implementation;\\n    ISmartInvoiceFactory public immutable smartInvoiceFactory;\\n\\n    constructor(address _implementation, address _smartInvoiceFactory) {\\n        require(_implementation != address(0), \\\"invalid implementation\\\");\\n        require(\\n            _smartInvoiceFactory != address(0),\\n            \\\"invalid smartInvoiceFactory\\\"\\n        );\\n        implementation = _implementation;\\n        smartInvoiceFactory = ISmartInvoiceFactory(_smartInvoiceFactory);\\n    }\\n\\n    function _createSmartInvoice(SmartInvoiceInfo memory _info)\\n        internal\\n        returns (address)\\n    {\\n        return\\n            smartInvoiceFactory.create(\\n                _info.client,\\n                _info.provider,\\n                _info.resolverType,\\n                _info.resolver,\\n                _info.token,\\n                _info.amounts,\\n                _info.terminationTime,\\n                _info.details\\n            );\\n    }\\n\\n    function _init(WrappedInvoiceInfo memory _info) internal {\\n        address smartInvoiceAddress =\\n            _createSmartInvoice(_info.smartInvoiceInfo);\\n\\n        IWrappedInvoice(_info.invoiceAddress).init(\\n            _info.providers[0],\\n            _info.providers[1],\\n            smartInvoiceAddress,\\n            _info.splitFactor\\n        );\\n\\n        uint256 invoiceId = invoiceCount;\\n        _invoices[invoiceId] = _info.invoiceAddress;\\n        invoiceCount = invoiceCount + 1;\\n\\n        emit LogNewWrappedInvoice(invoiceId, _info.invoiceAddress);\\n    }\\n\\n    function _newClone() internal returns (address) {\\n        return Clones.clone(implementation);\\n    }\\n\\n    struct SmartInvoiceInfo {\\n        address client;\\n        address provider;\\n        uint8 resolverType;\\n        address resolver;\\n        address token;\\n        uint256[] amounts;\\n        uint256 terminationTime;\\n        bytes32 details;\\n    }\\n\\n    struct WrappedInvoiceInfo {\\n        SmartInvoiceInfo smartInvoiceInfo;\\n        address invoiceAddress;\\n        address[] providers;\\n        uint256 splitFactor;\\n    }\\n\\n    function create(\\n        address _client,\\n        address[] calldata _providers,\\n        uint256 _splitFactor,\\n        uint8 _resolverType,\\n        address _resolver,\\n        address _token,\\n        uint256[] calldata _amounts,\\n        uint256 _terminationTime,\\n        bytes32 _details\\n    ) external override returns (address) {\\n        require(_providers.length == 2, \\\"invalid providers\\\");\\n\\n        address invoiceAddress = _newClone();\\n\\n        SmartInvoiceInfo memory smartInvoiceInfo;\\n\\n        {\\n            smartInvoiceInfo.client = _client;\\n            smartInvoiceInfo.provider = invoiceAddress;\\n            smartInvoiceInfo.resolverType = _resolverType;\\n            smartInvoiceInfo.resolver = _resolver;\\n            smartInvoiceInfo.token = _token;\\n            smartInvoiceInfo.amounts = _amounts;\\n            smartInvoiceInfo.terminationTime = _terminationTime;\\n            smartInvoiceInfo.details = _details;\\n        }\\n\\n        WrappedInvoiceInfo memory wrappedInvoiceInfo;\\n\\n        {\\n            wrappedInvoiceInfo.smartInvoiceInfo = smartInvoiceInfo;\\n            wrappedInvoiceInfo.invoiceAddress = invoiceAddress;\\n            wrappedInvoiceInfo.providers = _providers;\\n            wrappedInvoiceInfo.splitFactor = _splitFactor;\\n        }\\n\\n        _init(wrappedInvoiceInfo);\\n\\n        return invoiceAddress;\\n    }\\n\\n    function getInvoiceAddress(uint256 _index) public view returns (address) {\\n        return _invoices[_index];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWrappedInvoice.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWrappedInvoice {\\n    function init(\\n        address _parent,\\n        address _child,\\n        address _invoice,\\n        uint256 _splitFactor\\n    ) external;\\n\\n    function withdrawAll() external;\\n\\n    function withdrawAll(address _token) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdraw(address _token, uint256 _amount) external;\\n\\n    function disperseAll(\\n        uint256[] calldata _amounts,\\n        address[] calldata _fundees\\n    ) external;\\n\\n    function disperseAll(\\n        uint256[] calldata _amounts,\\n        address[] calldata _fundees,\\n        address _token\\n    ) external;\\n\\n    function disperse(\\n        uint256[] calldata _amounts,\\n        address[] calldata _fundees,\\n        uint256 _amount\\n    ) external;\\n\\n    function disperse(\\n        uint256[] calldata _amounts,\\n        address[] calldata _fundees,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function lock(bytes32 _details) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWrappedInvoiceFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWrappedInvoiceFactory {\\n    function create(\\n        address _client,\\n        address[] calldata _providers,\\n        uint256 _splitFactor,\\n        uint8 _resolverType,\\n        address _resolver,\\n        address _token,\\n        uint256[] calldata _amounts,\\n        uint256 _terminationTime,\\n        bytes32 _details\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISmartInvoiceFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISmartInvoiceFactory {\\n    function create(\\n        address _client,\\n        address _provider,\\n        uint8 _resolverType,\\n        address _resolver,\\n        address _token,\\n        uint256[] calldata _amounts,\\n        uint256 _terminationTime,\\n        bytes32 _details\\n    ) external returns (address);\\n\\n    function createDeterministic(\\n        address _client,\\n        address _provider,\\n        uint8 _resolverType,\\n        address _resolver,\\n        address _token,\\n        uint256[] calldata _amounts,\\n        uint256 _terminationTime,\\n        bytes32 _details,\\n        bytes32 _salt\\n    ) external returns (address);\\n\\n    function predictDeterministicAddress(bytes32 _salt)\\n        external\\n        returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_smartInvoiceFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wrappedInvoice\",\"type\":\"address\"}],\"name\":\"LogNewWrappedInvoice\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_providers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_splitFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_resolverType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_terminationTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_details\",\"type\":\"bytes32\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getInvoiceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invoiceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartInvoiceFactory\",\"outputs\":[{\"internalType\":\"contract ISmartInvoiceFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WrappedInvoiceFactory","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000028642dc0e677f46032129e265f26e102ce27ee02000000000000000000000000b7019c3670f5d4dd99166727a7d29f8a16f4f20a","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}