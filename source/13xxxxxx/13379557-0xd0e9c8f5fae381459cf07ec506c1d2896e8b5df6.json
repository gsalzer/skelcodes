{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.4;\r\n\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IVestingToken {\r\n    function vestingBalance(address _userAddr) external view\r\n        returns (\r\n            uint256 timestamp,\r\n            uint256 totalBalance,\r\n            uint256 tgeAmount,\r\n            uint256 unlockedAmount,\r\n            uint256 lockedAmount);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function customTransfer(address to, uint256 totalAmount, uint256 tgeAmount, uint256 unlockedTickAmount) external;\r\n}\r\n\r\ncontract VestingTokenStaking is Initializable {\r\n    address public admin_;\r\n    bool public isPaused_;\r\n\r\n    IVestingToken public token_;\r\n    uint256 public maxStakeLimit_;  // may be zero here\r\n    uint256 public apy_;            // in basis points\r\n    uint256 public startDate_;      // may be zero here\r\n    uint256 public period_;         // seconds\r\n\r\n    uint256 public totalBalance_;   // total balance of all users\r\n    mapping (address => uint256) public balances_;\r\n    \r\n    string private constant ERR_ZERO_ADDRESS = \"Zero address provided\";\r\n    string private constant ERR_ALREADY_DONE = \"Already done\";\r\n    string private constant ERR_ADMIN_ONLY = \"Available for admin only\";\r\n    string private constant ERR_ZERO_APY = \"Zero APY is not allowed\";\r\n    string private constant ERR_PERIOD_TOO_SMALL = \"Period too small\";\r\n    string private constant ERR_ALREADY_STARTED = \"Already started\";\r\n    string private constant ERR_NOT_FINISHED = \"Not finished yet\";\r\n    string private constant ERR_START_DATE_INVALID = \"Start date invalid\";\r\n    string private constant ERR_MAX_STAKE_LIMIT_TOO_SMALL = \"Stake limit too small\";\r\n    string private constant ERR_TRYING_TO_DEPOSIT_ZERO = \"Trying to deposit zero amount\";\r\n    string private constant ERR_MAX_LIMIT_REACHED = \"Max limit reached\";\r\n    string private constant ERR_NOTHING_TO_WITHDRAW = \"Nothing to withdrawal\";\r\n    string private constant ERR_TRANSFER_FAILURE = \"Tokens transfer fails\";\r\n    string private constant ERR_NOT_PAUSED = \"Not paused\";\r\n    string private constant ERR_PAUSED = \"Paused\";\r\n\r\n    event Pause();\r\n    event Resume();\r\n\r\n    event SetStartDate(uint256 oldValue, uint256 newValue);\r\n    event SetMaxStakeLimit(uint256 oldValue, uint256 newValue);\r\n\r\n    event Deposit(address indexed user, uint256 amount);\r\n    event Withdrawal(address indexed user, uint256 totalAmount, uint256 tgeAmount, uint256 unlockedAmount, address indexed toAddress);\r\n\r\n    // constructor and initializer\r\n    \r\n    constructor() initializer {}\r\n\r\n    function initialize(\r\n        address _admin,\r\n        IVestingToken _token,\r\n        uint256 _maxStakeLimit, // may be zero here\r\n        uint256 _apy,           // % in basis points\r\n        uint256 _startDate,     // may be zero here\r\n        uint256 _period         // seconds\r\n        ) external initializer {\r\n\r\n        require(_admin != address(0), ERR_ZERO_ADDRESS);\r\n        require(address(_token) != address(0), ERR_ZERO_ADDRESS);\r\n        require(_apy != 0, ERR_ZERO_APY);\r\n        require(_period >= 60, ERR_PERIOD_TOO_SMALL);\r\n\r\n        admin_ = _admin;\r\n        token_ = _token;\r\n        period_ = _period;\r\n        apy_ = _apy;\r\n        \r\n        if (_startDate != 0) _setStartDate(_startDate);\r\n\r\n        if (_maxStakeLimit != 0) _setMaxStakeLimit(_maxStakeLimit);\r\n    }\r\n    \r\n    // modifiers\r\n\r\n    modifier onlyAdmin() {\r\n        require(admin_ == msg.sender, ERR_ADMIN_ONLY);\r\n        _;\r\n    }\r\n\r\n    // setters\r\n\r\n    function setStartDate(uint256 _newStartDate) external onlyAdmin {\r\n        _setStartDate(_newStartDate);\r\n    }\r\n    \r\n    function _setStartDate(uint256 _newStartDate) private {\r\n        require(startDate_ != _newStartDate, ERR_ALREADY_DONE);\r\n        require(startDate_ == 0 || block.timestamp < startDate_, ERR_ALREADY_STARTED);\r\n        require(block.timestamp < _newStartDate, ERR_START_DATE_INVALID);\r\n        \r\n        emit SetStartDate(startDate_, _newStartDate);\r\n        \r\n        startDate_ = _newStartDate;\r\n    }\r\n    \r\n    function setMaxStakeLimit(uint256 _newMaxStakeLimit) external onlyAdmin {\r\n        _setMaxStakeLimit(_newMaxStakeLimit);\r\n    }\r\n    \r\n    function _setMaxStakeLimit(uint256 _newMaxStakeLimit) private {\r\n        require(maxStakeLimit_ != _newMaxStakeLimit, ERR_ALREADY_DONE);\r\n        require(_newMaxStakeLimit >= totalBalance_, ERR_MAX_STAKE_LIMIT_TOO_SMALL);\r\n        \r\n        emit SetMaxStakeLimit(maxStakeLimit_, _newMaxStakeLimit);\r\n        \r\n        if (_newMaxStakeLimit < maxStakeLimit_) {\r\n            uint256 delta = maxStakeLimit_ - _newMaxStakeLimit;\r\n            maxStakeLimit_ = _newMaxStakeLimit;\r\n            require(token_.transfer(msg.sender, _earnedAmount(delta)), ERR_TRANSFER_FAILURE);\r\n        } else {\r\n            require(token_.transferFrom(msg.sender, address(this), _earnedAmount(_newMaxStakeLimit - maxStakeLimit_)), ERR_TRANSFER_FAILURE);\r\n            maxStakeLimit_ = _newMaxStakeLimit;\r\n        }\r\n    }\r\n\r\n    // staking\r\n\r\n    function depositToken(uint256 _amount) whenNotPaused external {\r\n        require(startDate_ == 0 || block.timestamp < startDate_, ERR_ALREADY_STARTED);\r\n        require(totalBalance_ + _amount <= maxStakeLimit_, ERR_MAX_LIMIT_REACHED); \r\n        require(_amount != 0, ERR_TRYING_TO_DEPOSIT_ZERO);\r\n\r\n        require(token_.transferFrom(msg.sender, address(this), _amount), ERR_TRANSFER_FAILURE);\r\n\r\n        totalBalance_ += _amount;\r\n        balances_[msg.sender] += _amount;\r\n        \r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n    \r\n    function canWithdrawToken(address _user) external view returns (bool) {\r\n        return !isPaused_\r\n            && startDate_ != 0\r\n            && block.timestamp >= startDate_ + period_\r\n            && balances_[_user] != 0;\r\n    }\r\n\r\n    function withdrawToken() external {\r\n        withdrawToken(msg.sender);\r\n    }\r\n\r\n    function withdrawToken(address _toAddress) whenNotPaused public {\r\n        require(_toAddress != address(0), ERR_ZERO_ADDRESS);\r\n        require(startDate_ != 0 && block.timestamp >= startDate_ + period_, ERR_NOT_FINISHED);\r\n        require(balances_[msg.sender] != 0, ERR_NOTHING_TO_WITHDRAW);\r\n\r\n        uint256 userTotalAmount = balances_[msg.sender];\r\n        balances_[msg.sender] = 0;\r\n        totalBalance_ -= userTotalAmount;\r\n        \r\n        userTotalAmount += _earnedAmount(userTotalAmount);\r\n        \r\n        (, uint256 stakingTotalAmount, uint256 stakingTgeAmount, uint256 stakingUnlockedAmount, ) = token_.vestingBalance(address(this));\r\n        \r\n        uint256 userTgeAmount = _min(userTotalAmount * stakingTgeAmount / stakingTotalAmount, stakingTgeAmount);\r\n        uint256 userUnlockedAmount = _min(userTotalAmount * stakingUnlockedAmount / stakingTotalAmount, stakingUnlockedAmount);\r\n        \r\n        token_.customTransfer(_toAddress, userTotalAmount, userTgeAmount, userUnlockedAmount);\r\n            \r\n        emit Withdrawal(msg.sender, userTotalAmount, userTgeAmount, userUnlockedAmount, _toAddress);\r\n    }\r\n\r\n    function balance(address _wallet) external view returns (uint256 depositAmount, uint256 currentAmount, uint256 finalAmount) {\r\n        require(_wallet != address(0), ERR_ZERO_ADDRESS);\r\n        \r\n        depositAmount = balances_[_wallet];\r\n        \r\n        if (depositAmount != 0) {\r\n            finalAmount = depositAmount + _earnedAmount(depositAmount);\r\n            \r\n            if (startDate_ == 0 || block.timestamp <= startDate_) {\r\n                currentAmount = depositAmount;\r\n            } else if (block.timestamp >= startDate_ + period_) {\r\n                currentAmount = finalAmount;\r\n            } else {\r\n                currentAmount = finalAmount * (block.timestamp - startDate_) / period_;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // pausable\r\n    \r\n    modifier whenPaused() {\r\n        require(isPaused_, ERR_NOT_PAUSED);\r\n        _;\r\n    }\r\n    \r\n    modifier whenNotPaused() {\r\n        require(!isPaused_, ERR_PAUSED);\r\n        _;\r\n    }\r\n\r\n    function pause() onlyAdmin whenNotPaused external {\r\n        isPaused_ = true;\r\n        emit Pause();\r\n    }\r\n    \r\n    function resume() onlyAdmin whenPaused external {\r\n        isPaused_ = false;\r\n        emit Resume();\r\n    }\r\n    \r\n    // heplers\r\n    \r\n    function earnedAmount(\r\n        uint256 _amount,\r\n        uint256 _apy,\r\n        uint256 _period) external pure returns (uint256) {\r\n\r\n        return _amount * _apy * _period / (10_000 * 365 days);\r\n    }\r\n    \r\n    function _earnedAmount(uint256 _amount) private view returns (uint256) {\r\n        return _amount * apy_ * period_ / (10_000 * 365 days);\r\n    }\r\n    \r\n    function _min(uint256 _a, uint256 _b) private pure returns (uint256) {\r\n        return _a <= _b ? _a : _b;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Resume\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SetMaxStakeLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SetStartDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tgeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apy_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canWithdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"earnedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"contract IVestingToken\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxStakeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakeLimit_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxStakeLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxStakeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStartDate\",\"type\":\"uint256\"}],\"name\":\"setStartDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_\",\"outputs\":[{\"internalType\":\"contract IVestingToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VestingTokenStaking","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d6dfebabe14a277cb23d91129c2c120c770e9ecf910f5fe6f0f21df3cb16e162"}]}