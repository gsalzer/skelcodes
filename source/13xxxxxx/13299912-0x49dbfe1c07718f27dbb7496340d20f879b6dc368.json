{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/0xerc1155/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport '../utils/EnumerableSet.sol';\\nimport '../utils/Address.sol';\\nimport '../utils/Context.sol';\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using Address for address;\\n\\n  struct RoleData {\\n    EnumerableSet.AddressSet members;\\n    bytes32 adminRole;\\n  }\\n\\n  mapping(bytes32 => RoleData) private _roles;\\n\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(\\n    bytes32 indexed role,\\n    bytes32 indexed previousAdminRole,\\n    bytes32 indexed newAdminRole\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {_setupRole}.\\n   */\\n  event RoleGranted(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) public view returns (bool) {\\n    return _roles[role].members.contains(account);\\n  }\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n    return _roles[role].members.length();\\n  }\\n\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    public\\n    view\\n    returns (address)\\n  {\\n    return _roles[role].members.at(index);\\n  }\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n    return _roles[role].adminRole;\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) public virtual {\\n    require(\\n      hasRole(_roles[role].adminRole, _msgSender()),\\n      'AccessControl: sender must be an admin to grant'\\n    );\\n\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) public virtual {\\n    require(\\n      hasRole(_roles[role].adminRole, _msgSender()),\\n      'AccessControl: sender must be an admin to revoke'\\n    );\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) public virtual {\\n    require(\\n      account == _msgSender(),\\n      'AccessControl: can only renounce roles for self'\\n    );\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\n   * checks on the calling account.\\n   *\\n   * [WARNING]\\n   * ====\\n   * This function should only be called from the constructor when setting\\n   * up the initial roles for the system.\\n   *\\n   * Using this function in any other way is effectively circumventing the admin\\n   * system imposed by {AccessControl}.\\n   * ====\\n   */\\n  function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\n   *\\n   * Emits a {RoleAdminChanged} event.\\n   */\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n    emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n    _roles[role].adminRole = adminRole;\\n  }\\n\\n  function _grantRole(bytes32 role, address account) private {\\n    if (_roles[role].members.add(account)) {\\n      emit RoleGranted(role, account, _msgSender());\\n    }\\n  }\\n\\n  function _revokeRole(bytes32 role, address account) private {\\n    if (_roles[role].members.remove(account)) {\\n      emit RoleRevoked(role, account, _msgSender());\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface IERC20 {\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address who) external view returns (uint256);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT AND Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * Utility library of inline functions on addresses\\n */\\nlibrary Address {\\n  // Default hash for EOA accounts returned by extcodehash\\n  bytes32 internal constant ACCOUNT_HASH =\\n    0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  /**\\n   * Returns whether the target address is a contract\\n   * @dev This function will return false if invoked during the constructor of a contract.\\n   * @param _address address of the account to check\\n   * @return Whether the target address is a contract\\n   */\\n  function isContract(address _address) internal view returns (bool) {\\n    bytes32 codehash;\\n\\n    // Currently there is no better way to check if there is a contract in an address\\n    // than to check the size of the code at that address or if it has a non-zero code hash or account hash\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(_address)\\n    }\\n    return (codehash != 0x0 && codehash != ACCOUNT_HASH);\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), 'Address: No contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.call(data);\\n    return _verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), 'Address: No contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return _verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  function _verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) private pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n      // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n      bytes32 lastvalue = set._values[lastIndex];\\n\\n      // Move the last value to the index where the value to delete is\\n      set._values[toDeleteIndex] = lastvalue;\\n      // Update the index for the moved value\\n      set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    require(set._values.length > index, 'EnumerableSet: index out of bounds');\\n    return set._values[index];\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index)\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return _at(set._inner, index);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return uint256(_at(set._inner, index));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT AND Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport '../interfaces/IERC20.sol';\\nimport '../utils/SafeMath.sol';\\nimport '../utils/Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transfer.selector, to, value)\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IERC20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    // solhint-disable-next-line max-line-length\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, value)\\n    );\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(\\n      data,\\n      'SafeERC20: low-level call failed'\\n    );\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(\\n        abi.decode(returndata, (bool)),\\n        'SafeERC20: ERC20 operation did not succeed'\\n      );\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/0xerc1155/utils/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Multiplies two unsigned integers, reverts on overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath#mul: OVERFLOW');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, 'SafeMath#div: DIVISION_BY_ZERO');\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, 'SafeMath#sub: UNDERFLOW');\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Adds two unsigned integers, reverts on overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath#add: OVERFLOW');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n   * reverts when dividing by zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'SafeMath#mod: DIVISION_BY_ZERO');\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/booster/interfaces/IBooster.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @dev Interface to C-folio item contracts\\n */\\ninterface IBooster {\\n  /**\\n   * @dev return current rewardHandler\\n   */\\n  function rewardHandler() external view returns (address);\\n\\n  /**\\n   * @dev return current sftHolder\\n   */\\n  function sftHolder() external view returns (address);\\n\\n  /**\\n   * @dev Return information about the reward state in Booster\\n   *\\n   * @param tokenIds The SFT or TF tokenId\\n   *\\n   * @return locked The total amounts locked\\n   * @return pending The pending amounts claimable\\n   * @return apr The APR of this lock pool\\n   * @return secsLeft Numbers of seconds until unlock, or -1 if unlocked\\n   */\\n  function getRewardInfo(uint256[] calldata tokenIds)\\n    external\\n    view\\n    returns (\\n      uint256[] memory locked,\\n      uint256[] memory pending,\\n      uint256[] memory apr,\\n      uint256[] memory secsLeft\\n    );\\n\\n  /**\\n   * @dev Create a booster pool from v1 specs\\n   *\\n   * @param tokenId The SFT tokenId\\n   * @param data list of uint256's: total, pending, provided, apr, end, fee\\n   */\\n  function migrateCreatePool(\\n    uint256 tokenId,\\n    bytes memory data,\\n    uint256 dataIndex\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Handles farm distribution, only callable from controller\\n   *\\n   * If recipient is booster contract, amount is temporarily stored and locked\\n   * in a second call.\\n   *\\n   * @param farm The reward farm that the call originates from\\n   * @param recipient The recipient of the rewards\\n   * @param amount The amount to distribute\\n   * @param fee The fee in 6 decimal notation\\n   */\\n  function distributeFromFarm(\\n    address farm,\\n    address recipient,\\n    uint256 amount,\\n    uint32 fee\\n  ) external;\\n\\n  /**\\n   * @dev Locks temporary tokens owned by recipient for a specific duration\\n   * of seconds.\\n   *\\n   * @param recipient The recipient of the rewards\\n   * @param lockPeriod The lock period in seconds\\n   */\\n  function lock(address recipient, uint256 lockPeriod) external;\\n\\n  /**\\n   * @dev Claim rewards either into wallet or re-lock them\\n   *\\n   * @param sftTokenId The tokenId that manages the rewards\\n   * @param reLock True to re-lock existing rewards to earn more\\n   */\\n  function claimRewards(uint256 sftTokenId, bool reLock) external;\\n\\n  /**\\n   * @dev Set sftHolder contract which is deployed after Booster\\n   */\\n  function setSftHolder(address sftHolder_) external;\\n\\n  /**\\n   * @dev Set reward handler in case it will be upgraded\\n   */\\n  function setRewardHandler(address rewardHandler_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/cfolio/interfaces/ICFolioItemHandler.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport '../../token/interfaces/ICFolioItemCallback.sol';\\n\\n/**\\n * @dev Interface to C-folio item contracts\\n */\\ninterface ICFolioItemHandler is ICFolioItemCallback {\\n  /**\\n   * @dev Called when a SFT tokens grade needs re-evaluation\\n   *\\n   * @param tokenId The ERC-1155 token ID. Rate is in 1E6 convention: 1E6 = 100%\\n   * @param newRate The new value rate\\n   */\\n  function sftUpgrade(uint256 tokenId, uint32 newRate) external;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Asset access\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Adds investments into a cFolioItem SFT\\n   *\\n   * Transfers amounts of assets from users wallet to the contract. In general,\\n   * an Approval call is required before the function is called.\\n   *\\n   * @param from must be msg.sender for calls not from sftMinter\\n   * @param baseTokenId cFolio tokenId, must be unlocked, or -1\\n   * @param tokenId cFolioItem tokenId, must be unlocked if not in unlocked cFolio\\n   * @param amounts Investment amounts, implementation specific\\n   */\\n  function deposit(\\n    address from,\\n    uint256 baseTokenId,\\n    uint256 tokenId,\\n    uint256[] calldata amounts\\n  ) external;\\n\\n  /**\\n   * @dev Removes investments from a cFolioItem SFT\\n   *\\n   * Withdrawn token are transfered back to msg.sender.\\n   *\\n   * @param baseTokenId cFolio tokenId, must be unlocked, or -1\\n   * @param tokenId cFolioItem tokenId, must be unlocked if not in unlocked cFolio\\n   * @param amounts Investment amounts, implementation specific\\n   */\\n  function withdraw(\\n    uint256 baseTokenId,\\n    uint256 tokenId,\\n    uint256[] calldata amounts\\n  ) external;\\n\\n  /**\\n   * @dev Update investment values from sidechain\\n   *\\n   * Must be called from a registered root tunnel\\n   *\\n   * @param tokenId cFolioItem tokenId\\n   * @param amounts Investment amounts, implementation specific\\n   */\\n  function update(uint256 tokenId, uint256[] calldata amounts) external;\\n\\n  /**\\n   * @dev Get the rewards collected by an SFT base card\\n   *\\n   * Calls only allowed from sftMinter.\\n   *\\n   * @param owner The owner of the NFT token\\n   * @param recipient Recipient of the rewards (- fees)\\n   * @param tokenId SFT base card tokenId, must be unlocked\\n   */\\n  function getRewards(\\n    address owner,\\n    address recipient,\\n    uint256 tokenId\\n  ) external;\\n\\n  /**\\n   * @dev Get amounts (handler specific) for a cfolioItem\\n   *\\n   * @param cfolioItem address of CFolioItem contract\\n   */\\n  function getAmounts(address cfolioItem)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Get information obout the rewardFarm\\n   *\\n   * @param tokenIds List of basecard tokenIds\\n   * @return bytes of uint256[]: total, rewardDur, rewardRateForDur, [share, earned]\\n   */\\n  function getRewardInfo(uint256[] calldata tokenIds)\\n    external\\n    view\\n    returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/src/cfolio/interfaces/ISFTEvaluator.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n// BOIS feature bitmask\\nuint256 constant LEVEL2BOIS = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000F;\\nuint256 constant LEVEL2WOLF = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000F0;\\n\\ninterface ISFTEvaluator {\\n  /**\\n   * @dev Returns the reward in 1e6 factor notation (1e6 = 100%)\\n   */\\n  function rewardRate(uint256 sftTokenId) external view returns (uint32);\\n\\n  /**\\n   * @dev Calculate the current reward rate, and notify TFC in case of change\\n   *\\n   * Optional revert on unchange to save gas on external calls.\\n   */\\n  function setRewardRate(uint256 tokenId, bool revertUnchanged) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/crowdsale/WOWSSftMinter.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport '../../0xerc1155/access/AccessControl.sol';\\nimport '../../0xerc1155/interfaces/IERC20.sol';\\nimport '../../0xerc1155/utils/SafeERC20.sol';\\nimport '../../0xerc1155/utils/Context.sol';\\n\\nimport './interfaces/IWOWSSftMinter.sol';\\n\\nimport '../booster/interfaces/IBooster.sol';\\nimport '../cfolio/interfaces/ICFolioItemHandler.sol';\\nimport '../cfolio/interfaces/ISFTEvaluator.sol';\\nimport '../investment/interfaces/IRewardHandler.sol';\\nimport '../token/interfaces/ITradeFloor.sol';\\nimport '../token/interfaces/IWOWSCryptofolio.sol';\\nimport '../token/interfaces/IWOWSERC1155.sol';\\nimport '../utils/AddressBook.sol';\\nimport '../utils/interfaces/IAddressRegistry.sol';\\nimport '../utils/TokenIds.sol';\\n\\ninterface IOldWOWSERC1155 {\\n  function getCardData(uint8 level, uint8 cardId)\\n    external\\n    view\\n    returns (uint16 cap, uint16 minted);\\n}\\n\\ncontract WOWSSftMinter is Context, AccessControl, IWOWSSftMinter {\\n  using TokenIds for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // CONSTANTS\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  bytes32 public constant CUSTOM_MINTER_ROLE = bytes32('CUSTOM_MINTER');\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // CFolio NFTs (baseCards)\\n\\n  // PricePerlevel, customLevel start at 0xFF\\n  struct BaseLevelData {\\n    uint16 cap;\\n    uint256 price;\\n  }\\n\\n  // BaseCard Info per level\\n  mapping(uint16 => BaseLevelData) private _baseLevelData;\\n  mapping(uint24 => uint16) private _baseCardsMinted;\\n  uint256 public nextCustomCardId;\\n\\n  // CFolioItem\\n  struct CFolioItemSft {\\n    uint256 handlerId;\\n    uint256 price;\\n    uint128 numMinted;\\n    uint128 maxMintable;\\n  }\\n  mapping(uint256 => CFolioItemSft) private cfolioItemSfts; // C-folio type to c-folio data\\n  ICFolioItemHandler[] private cfolioItemHandlers;\\n  uint256 public nextCFolioItemNft;\\n\\n  // The ERC1155 contract we are minting from\\n  IWOWSERC1155 private immutable _sftContract;\\n\\n  // WOWS token contract\\n  IERC20 private immutable _wowsToken;\\n\\n  // Booster\\n  IBooster private immutable _booster;\\n\\n  // Reward handler which distributes WOWS\\n  IRewardHandler public rewardHandler;\\n\\n  // TradeFloor Proxy contract\\n  address public tradeFloor;\\n\\n  // SFTEvaluator to store the cfolioItemType\\n  ISFTEvaluator public sftEvaluator;\\n\\n  // SFTEvaluator to store the cfolioItemType\\n  address public childTunnel;\\n\\n  // 1.0 of the rewards go to distribution\\n  uint32 private constant ALL = 1 * 1e6;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Events\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // Emitted when constructor is called\\n  event Constructed(address wowsToken, address sftHolder, address booster);\\n\\n  // Emitted if a new SFT is minted\\n  event Mint(\\n    address indexed recipient,\\n    uint256 tokenId,\\n    uint256 price,\\n    uint256 cfolioType\\n  );\\n\\n  // Emitted if base mint specifications (e.g. limits / price) have changed\\n  event BaseSpecChanged(uint256[] ids);\\n\\n  // Emitted if cFolio mint specifications (e.g. limits / price) have changed\\n  event CFolioSpecChanged(uint256[] ids);\\n\\n  // Emitted if the contract gets destroyed\\n  event Destruct();\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Modifier\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  modifier onlyAdmin() {\\n    require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), 'WM: Only admin');\\n    _;\\n  }\\n\\n  modifier onlyCustomMinter() {\\n    require(\\n      hasRole(CUSTOM_MINTER_ROLE, _msgSender()),\\n      'WM: Only custom minter'\\n    );\\n    _;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Constructor\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Contruct WOWSSftMinter\\n   *\\n   * @param addressRegistry provides all immutables\\n   */\\n  constructor(IAddressRegistry addressRegistry) {\\n    // Access control (need admin for selfDestruct)\\n    _setupRole(\\n      DEFAULT_ADMIN_ROLE,\\n      addressRegistry.getRegistryEntry(AddressBook.ADMIN_ACCOUNT)\\n    );\\n\\n    // Set immutable addresses\\n    address wowsToken = addressRegistry.getRegistryEntry(\\n      AddressBook.WOWS_TOKEN\\n    );\\n    _wowsToken = IERC20(wowsToken);\\n\\n    address sftHolder = addressRegistry.getRegistryEntry(\\n      AddressBook.SFT_HOLDER_PROXY\\n    );\\n    _sftContract = IWOWSERC1155(sftHolder);\\n\\n    address booster = addressRegistry.getRegistryEntry(\\n      AddressBook.WOWS_BOOSTER_PROXY\\n    );\\n    _booster = IBooster(booster);\\n\\n    emit Constructed(wowsToken, sftHolder, booster);\\n  }\\n\\n  function initialize(IAddressRegistry addressRegistry) external {\\n    // Check for single entry\\n    require(address(rewardHandler) == address(0), 'WM: Already initialized');\\n\\n    // Initialize state\\n    _setupRole(\\n      DEFAULT_ADMIN_ROLE,\\n      addressRegistry.getRegistryEntry(AddressBook.ADMIN_ACCOUNT)\\n    );\\n\\n    rewardHandler = IRewardHandler(\\n      addressRegistry.getRegistryEntry(AddressBook.REWARD_HANDLER)\\n    );\\n\\n    nextCustomCardId = (1 << 32);\\n    nextCFolioItemNft = (1 << 64);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State modifiers\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Set prices for the given levels\\n   */\\n  function setBaseSpec(\\n    uint16[] calldata levels,\\n    uint16[] calldata caps,\\n    uint256[] calldata prices,\\n    IOldWOWSERC1155 oldSftContract\\n  ) external onlyAdmin {\\n    // Validate parameters\\n    require(\\n      levels.length == prices.length && levels.length == caps.length,\\n      'WM: Length mismatch'\\n    );\\n\\n    // Update state\\n    for (uint256 i = 0; i < levels.length; ++i) {\\n      _baseLevelData[levels[i]].cap = caps[i];\\n      _baseLevelData[levels[i]].price = prices[i];\\n      if (address(oldSftContract) != address(0)) {\\n        // 4 cards per level in the v1 system\\n        for (uint24 j = 0; j < 4; ++j) {\\n          uint24 bcm = (uint24(levels[i]) << 8) | j;\\n          (, _baseCardsMinted[bcm]) = oldSftContract.getCardData(\\n            uint8(levels[i]),\\n            uint8(j)\\n          );\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Only needed during migration to fix possible burn leaks in v1\\n   */\\n  function setMinted(\\n    uint8 level,\\n    uint8 cardId,\\n    uint16 minted\\n  ) external onlyAdmin {\\n    uint24 bcm = (uint24(level) << 8) | cardId;\\n    _baseCardsMinted[bcm] = minted;\\n  }\\n\\n  /**\\n   * @dev Set new reward handler\\n   *\\n   * RewardHandler is by concept upgradeable / see investment::Controller.sol.\\n   */\\n  function setRewardHandler(IRewardHandler newRewardHandler)\\n    external\\n    onlyAdmin\\n  {\\n    // Validate parameters\\n    require(address(newRewardHandler) != address(0), 'WM: Invalid RH');\\n\\n    // Update state\\n    rewardHandler = newRewardHandler;\\n  }\\n\\n  /**\\n   * @dev Set Trade Floor\\n   */\\n  function setTradeFloor(address tradeFloor_) external onlyAdmin {\\n    // Validate parameters\\n    require(tradeFloor_ != address(0), 'WM: Invalid TF');\\n\\n    // Update state\\n    tradeFloor = tradeFloor_;\\n  }\\n\\n  /**\\n   * @dev Set SFT evaluator\\n   */\\n  function setSFTEvaluator(ISFTEvaluator sftEvaluator_) external onlyAdmin {\\n    // Validate parameters\\n    require(address(sftEvaluator_) != address(0), 'WM: Invalid SFTE');\\n\\n    // Update state\\n    sftEvaluator = sftEvaluator_;\\n  }\\n\\n  /**\\n   * @dev Set child tunnel\\n   */\\n  function setChildTunnel(address childTunnel_) external onlyAdmin {\\n    // Validate parameters\\n    require(childTunnel_ != address(0), 'WM: Invalid CT');\\n\\n    // Update state\\n    childTunnel = childTunnel_;\\n  }\\n\\n  /**\\n   * @dev Set the limitations, the price and the handlers for CFolioItem SFT's\\n   */\\n  function setCFolioSpec(\\n    uint256[] calldata cFolioTypes,\\n    address[] calldata handlers,\\n    uint128[] calldata maxMint,\\n    uint256[] calldata prices\\n  ) external onlyAdmin {\\n    // Validate parameters\\n    require(\\n      cFolioTypes.length == handlers.length &&\\n        handlers.length == maxMint.length &&\\n        maxMint.length == prices.length,\\n      'WM: Length mismatch'\\n    );\\n\\n    // Update state\\n    delete (cfolioItemHandlers);\\n\\n    for (uint256 i = 0; i < cFolioTypes.length; ++i) {\\n      uint256 j = 0;\\n      for (; j < cfolioItemHandlers.length; ++j) {\\n        if (address(cfolioItemHandlers[j]) == handlers[i]) break;\\n      }\\n\\n      if (j == cfolioItemHandlers.length) {\\n        cfolioItemHandlers.push(ICFolioItemHandler(handlers[i]));\\n      }\\n\\n      CFolioItemSft storage cfi = cfolioItemSfts[cFolioTypes[i]];\\n      cfi.handlerId = j;\\n      cfi.maxMintable = maxMint[i];\\n      cfi.price = prices[i];\\n    }\\n    emit CFolioSpecChanged(cFolioTypes);\\n  }\\n\\n  /**\\n   * @dev upgrades state from an existing WOWSSFTMinter\\n   */\\n  function destructContract() external onlyAdmin {\\n    emit Destruct();\\n\\n    // Disable high-impact Slither detector \\\"suicidal\\\" here. Slither explains\\n    // that \\\"WOWSSftMinter.destructContract() allows anyone to destruct the\\n    // contract\\\", which is not the case due to the {Ownable-onlyOwner} modifier.\\n    //\\n    // slither-disable-next-line suicidal\\n    selfdestruct(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Mint one of our stock card SFTs\\n   *\\n   * Approval of WOWS token required before the call.\\n   */\\n  function mintWowsSFT(\\n    address recipient,\\n    uint8 level,\\n    uint8 cardId\\n  ) external {\\n    // Validate parameters\\n    require(recipient != address(0), 'WM: Invalid recipient');\\n    require(childTunnel == address(0), 'WM: Only rootchain');\\n\\n    // Load state\\n    uint256 price = _baseLevelData[level].price;\\n    (uint24 bcmId, uint16 minted) = _getBaseCardsMinted(level, cardId);\\n\\n    // Validate state\\n    require(price > 0, 'WM: No price available');\\n    require(minted < _baseLevelData[level].cap, 'WM: Sold out');\\n\\n    // Calculate the tokenId\\n    uint256 baseTokenId = ((uint256(level) << 8) | cardId) << 16;\\n\\n    _baseCardsMinted[bcmId]++;\\n\\n    // Update state\\n    _mint(recipient, baseTokenId + minted, price, 0, '');\\n  }\\n\\n  /**\\n   * @dev Mint a custom token\\n   *\\n   * Approval of WOWS token required before the call.\\n   */\\n  function mintCustomSFT(address recipient, uint8 level)\\n    external\\n    onlyCustomMinter\\n  {\\n    // Validate parameters\\n    require(recipient != address(0), 'WM: Invalid recipient');\\n\\n    // Load state\\n    uint256 price = _baseLevelData[uint16(level) << 8].price;\\n\\n    // Validate state\\n    require(price > 0, 'WM: No price available');\\n\\n    // Get the next free mintable custom card Id\\n    uint256 tokenId = nextCustomCardId++;\\n\\n    // Custom baseToken only allowed < 64Bit\\n    require(tokenId.isBaseCard(), 'WM: Max tokenId reached');\\n\\n    // Set card level\\n    _sftContract.setCustomCardLevel(tokenId, level);\\n\\n    // Update state\\n    _mint(recipient, tokenId, price, 0, '');\\n  }\\n\\n  /**\\n   * @dev Mint a CFolioItem token\\n   *\\n   * Approval of WOWS token required before the call.\\n   *\\n   * @param cfolioItemType The item type of the SFT\\n   * @param sftTokenId If <> -1 recipient is the SFT c-folio / handler must be called\\n   * @param investAmounts Arguments needed for the handler (in general investments).\\n   * Investments may be zero if the user is just buying an SFT.\\n   */\\n  function mintCFolioItemSFT(\\n    address recipient,\\n    uint256 cfolioItemType,\\n    uint256 sftTokenId,\\n    uint256[] calldata investAmounts\\n  ) external override returns (uint256 tokenId) {\\n    // Load state\\n    CFolioItemSft storage sftData = cfolioItemSfts[cfolioItemType];\\n\\n    // Validate state\\n    require(sftData.numMinted < sftData.maxMintable, 'WM: Sold out (CFI)');\\n\\n    if (sftTokenId != uint256(-1)) {\\n      require(sftTokenId.isBaseCard(), 'WM: Invalid baseId');\\n\\n      // Get the CFolio contract address, it will be the final recipient\\n      recipient = _sftContract.tokenIdToAddress(sftTokenId);\\n      require(recipient != address(0), 'WM: Bad baseId');\\n    } else if (investAmounts.length > 0) {\\n      require(recipient == _msgSender(), 'WM: Invalid recipient');\\n    }\\n\\n    tokenId = nextCFolioItemNft++;\\n    require(tokenId.isCFolioCard(), 'WM: Invalid cfiId');\\n\\n    _sftContract.setCFolioItemType(tokenId, cfolioItemType);\\n\\n    ICFolioItemHandler handler = cfolioItemHandlers[sftData.handlerId];\\n\\n    // Update state, mint SFT token\\n    sftData.numMinted += 1;\\n    _mint(\\n      recipient,\\n      tokenId,\\n      msg.sender == childTunnel ? 0 : sftData.price,\\n      cfolioItemType,\\n      abi.encodePacked(handler)\\n    );\\n\\n    if (investAmounts.length > 0) {\\n      handler.deposit(_msgSender(), sftTokenId, tokenId, investAmounts);\\n    }\\n  }\\n\\n  /**\\n   * @dev Claim rewards from all c-folio farms\\n   *\\n   * If lockPeriod > 0, Booster locks the token on behalf of sftToken and\\n   * provides extra rewards. Otherwise rewards are distributed in\\n   * rewardHandler.\\n   *\\n   * @param sftTokenId Valid SFT tokenId, must not be locked in TF\\n   * @param lockPeriod Lock time in seconds\\n   */\\n  function claimSFTRewards(uint256 sftTokenId, uint256 lockPeriod) external {\\n    // If lockPeriod > 0 rewards are managed by booster\\n    address cfolio = _sftContract.tokenIdToAddress(sftTokenId);\\n    require(cfolio != address(0), 'WM: Invalid cfolio');\\n\\n    address receiver = lockPeriod > 0 ? cfolio : _msgSender();\\n\\n    bool[] memory lookup = new bool[](cfolioItemHandlers.length);\\n    uint256[] memory cfolioItems = _sftContract.getTokenIds(cfolio);\\n    uint256 cfolioLength = cfolioItems.length;\\n\\n    for (uint256 i = 0; i < cfolioLength; ++i) {\\n      // Get the handler of this type\\n      uint256 handlerId = cfolioItemSfts[\\n        _sftContract.getCFolioItemType(cfolioItems[i])\\n      ].handlerId;\\n      if (!lookup[handlerId]) {\\n        cfolioItemHandlers[handlerId].getRewards(\\n          _msgSender(),\\n          receiver,\\n          sftTokenId\\n        );\\n        lookup[handlerId] = true;\\n      }\\n    }\\n\\n    // In case lockPeriod is set, all rewards are temporarily parked in\\n    // booster. Lock the parked rewards for the current msg.sender.\\n    if (lockPeriod > 0) {\\n      _booster.lock(receiver, lockPeriod);\\n    }\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // ERC1155Holder\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev We are a temorary token holder during CFolioToken mint step\\n   *\\n   * Only accept ERC1155 tokens during this setup.\\n   */\\n  function onERC1155Received(\\n    address operator,\\n    address,\\n    uint256,\\n    uint256,\\n    bytes memory\\n  ) external view returns (bytes4) {\\n    // Validate state\\n    require(operator == address(this), 'WM: Not allowed');\\n\\n    // Call ancestor\\n    return this.onERC1155Received.selector;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Getters\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Query prices for given levels\\n   */\\n  function getBaseSpec(uint8[] calldata levels, uint8[] calldata cardIds)\\n    external\\n    view\\n    returns (\\n      uint256[] memory prices,\\n      uint16[] memory numMinted,\\n      uint16[] memory maxMintable\\n    )\\n  {\\n    require(levels.length == cardIds.length, 'WM: Length mismatch');\\n\\n    prices = new uint256[](levels.length);\\n    numMinted = new uint16[](levels.length);\\n    maxMintable = new uint16[](levels.length);\\n\\n    for (uint256 i = 0; i < levels.length; ++i) {\\n      prices[i] = _baseLevelData[levels[i]].price;\\n      maxMintable[i] = _baseLevelData[levels[i]].cap;\\n      (, numMinted[i]) = _getBaseCardsMinted(levels[i], cardIds[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev retrieve mint information about cfolioItem\\n   */\\n  function getCFolioSpec(uint256[] calldata cFolioTypes)\\n    external\\n    view\\n    returns (\\n      uint256[] memory prices,\\n      uint128[] memory numMinted,\\n      uint128[] memory maxMintable\\n    )\\n  {\\n    uint256 length = cFolioTypes.length;\\n    prices = new uint256[](length);\\n    numMinted = new uint128[](length);\\n    maxMintable = new uint128[](length);\\n\\n    for (uint256 i; i < length; ++i) {\\n      CFolioItemSft storage cfi = cfolioItemSfts[cFolioTypes[i]];\\n      prices[i] = cfi.price;\\n      numMinted[i] = cfi.numMinted;\\n      maxMintable[i] = cfi.maxMintable;\\n    }\\n  }\\n\\n  /**\\n   * @dev Get all tokenIds from SFT and TF contract owned by account.\\n   */\\n  function getTokenIds(address account)\\n    external\\n    view\\n    returns (uint256[] memory sftTokenIds, uint256[] memory tfTokenIds)\\n  {\\n    require(account != address(0), 'Null address');\\n    sftTokenIds = _sftContract.getTokenIds(account);\\n    tfTokenIds = ITradeFloor(tradeFloor).getTokenIds(account);\\n  }\\n\\n  /**\\n   * @dev Get underlying information (cFolioItems / value) for given tokenIds.\\n   *\\n   * @param tokenIds the tokenIds information should be queried\\n   * @return result [%,MintTime,NumItems,[tokenId,type,numAssetValues,[assetValue]]]...\\n   */\\n  function getTokenInformation(uint256[] calldata tokenIds)\\n    external\\n    view\\n    returns (bytes memory result)\\n  {\\n    uint256[] memory cfolioItems;\\n    uint256[] memory oneCfolioItem = new uint256[](1);\\n    uint256 cfolioLength;\\n    uint256 rewardRate;\\n    uint256 timestamp;\\n\\n    for (uint256 i = 0; i < tokenIds.length; ++i) {\\n      if (tokenIds[i].isBaseCard()) {\\n        // Only main TradeFloor supported\\n        uint256 sftTokenId = tokenIds[i].toSftTokenId();\\n        address cfolio = _sftContract.tokenIdToAddress(sftTokenId);\\n        require(cfolio != address(0), 'WM: Invalid cfi');\\n\\n        cfolioItems = _sftContract.getTokenIds(cfolio);\\n        cfolioLength = cfolioItems.length;\\n\\n        rewardRate = sftEvaluator.rewardRate(tokenIds[i]);\\n        (timestamp, ) = _sftContract.getTokenData(sftTokenId);\\n      } else {\\n        oneCfolioItem[0] = tokenIds[i];\\n        cfolioLength = 1;\\n        cfolioItems = oneCfolioItem; // Reference, no copy\\n        rewardRate = 0;\\n        timestamp = 0;\\n      }\\n\\n      result = abi.encodePacked(result, rewardRate, timestamp, cfolioLength);\\n\\n      for (uint256 j = 0; j < cfolioLength; ++j) {\\n        uint256 tokenId = cfolioItems[j];\\n        uint256 cfolioType = _sftContract.getCFolioItemType(tokenId);\\n        uint256[] memory amounts;\\n\\n        address cfolio = _sftContract.tokenIdToAddress(tokenId);\\n        require(address(cfolio) != address(0), 'WM: Invalid cfi');\\n\\n        address handler = IWOWSCryptofolio(cfolio).handler();\\n        amounts = ICFolioItemHandler(handler).getAmounts(cfolio);\\n\\n        result = abi.encodePacked(\\n          result,\\n          cfolioItems[j],\\n          cfolioType,\\n          amounts.length,\\n          amounts\\n        );\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Get CFIItemHandlerRewardInfo and Booster rewardInfo.\\n   */\\n  function getRewardInfo(address cfih, uint256[] calldata tokenIds)\\n    external\\n    view\\n    returns (\\n      bytes memory result,\\n      uint256[] memory boosterLocked,\\n      uint256[] memory boosterPending,\\n      uint256[] memory boosterApr,\\n      uint256[] memory boosterSecsLeft\\n    )\\n  {\\n    result = ICFolioItemHandler(cfih).getRewardInfo(tokenIds);\\n    (boosterLocked, boosterPending, boosterApr, boosterSecsLeft) = _booster\\n      .getRewardInfo(tokenIds);\\n  }\\n\\n  /**\\n   * @dev Get balances of given ERC20 addresses.\\n   */\\n  function getErc20Balances(address account, address[] calldata erc20)\\n    external\\n    view\\n    returns (uint256[] memory amounts)\\n  {\\n    amounts = new uint256[](erc20.length);\\n    for (uint256 i = 0; i < erc20.length; ++i)\\n      amounts[i] = erc20[i] == address(0)\\n        ? 0\\n        : IERC20(erc20[i]).balanceOf(account);\\n  }\\n\\n  /**\\n   * @dev Get allowances of given ERC20 addresses.\\n   */\\n  function getErc20Allowances(\\n    address account,\\n    address[] calldata spender,\\n    address[] calldata erc20\\n  ) external view returns (uint256[] memory amounts) {\\n    // Validate parameters\\n    require(spender.length == erc20.length, 'Length mismatch');\\n\\n    amounts = new uint256[](spender.length);\\n    for (uint256 i = 0; i < spender.length; ++i)\\n      amounts[i] = erc20[i] == address(0)\\n        ? 0\\n        : IERC20(erc20[i]).allowance(account, spender[i]);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Internal functionality\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  function _mint(\\n    address recipient,\\n    uint256 tokenId,\\n    uint256 price,\\n    uint256 cfolioType,\\n    bytes memory data\\n  ) internal {\\n    // Transfer WOWS from user to reward handler\\n    if (price > 0)\\n      _wowsToken.safeTransferFrom(_msgSender(), address(rewardHandler), price);\\n\\n    // Mint the token\\n    uint256[] memory tokenIds = new uint256[](1);\\n    tokenIds[0] = tokenId;\\n    _sftContract.mintBatch(recipient, tokenIds, data);\\n\\n    // Distribute the rewards\\n    if (price > 0) rewardHandler.distribute2(recipient, price, ALL);\\n\\n    // Log event\\n    emit Mint(recipient, tokenId, price, cfolioType);\\n  }\\n\\n  /**\\n   * @dev Get the number of cards that have been minted\\n   *\\n   * @param level The level of cards to check\\n   * @param cardId The ID of cards to check\\n   *\\n   * @return bcmLevelId the idx for direct access to _baseCardsMinted\\n   * @return cardsMinted The number of cards that have been minted\\n   */\\n  function _getBaseCardsMinted(uint16 level, uint8 cardId)\\n    private\\n    view\\n    returns (uint24 bcmLevelId, uint16 cardsMinted)\\n  {\\n    bcmLevelId = (uint24(level) << 8) | cardId;\\n    cardsMinted = _baseCardsMinted[bcmLevelId];\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/crowdsale/interfaces/IWOWSSftMinter.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @dev Interface to WOWS SFT minter item contracts\\n */\\ninterface IWOWSSftMinter {\\n  /**\\n   * @dev Mint a CFolioItem token\\n   *\\n   * Approval of WOWS token required before the call.\\n   *\\n   * @param cfolioItemType The item type of the SFT\\n   * @param sftTokenId If <> -1 recipient is the SFT c-folio / handler must be called\\n   * @param investAmounts Arguments needed for the handler (in general investments).\\n   * Investments may be zero if the user is just buying an SFT.\\n   */\\n  function mintCFolioItemSFT(\\n    address recipient,\\n    uint256 cfolioItemType,\\n    uint256 sftTokenId,\\n    uint256[] calldata investAmounts\\n  ) external returns (uint256 tokenId);\\n}\\n\"\r\n    },\r\n    \"contracts/src/investment/interfaces/IRewardHandler.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity 0.7.6;\\n\\ninterface IRewardHandler {\\n  /**\\n   * @dev Get the amount allocated for the Booster\\n   *\\n   * @return The amount which is allocated for the Booster (18 decimals)\\n   */\\n  function getBoosterRewards() external view returns (uint256);\\n\\n  /**\\n   * @dev Transfer reward and distribute the fee\\n   *\\n   * This is the new implementation of distribute() which uses internal fees\\n   * defined in the {RewardHandler} contract.\\n   *\\n   * @param recipient The recipient of the reward\\n   * @param amount The amount of WOWS to transfer to the recipient\\n   * @param fee The reward fee in 1e6 factor notation\\n   */\\n  function distribute2(\\n    address recipient,\\n    uint256 amount,\\n    uint32 fee\\n  ) external;\\n\\n  /**\\n   * @dev Transfer reward and distribute the fee\\n   *\\n   * This is the current implementation, needed for backward compatibility.\\n   *\\n   * Current ERC1155Minter and Controller call this function, later\\n   * reward handler clients should call the the new one with internal\\n   * fees specified in this contract.\\n   *\\n   * uint32 values are in 1e6 factor notation.\\n   */\\n  function distribute(\\n    address recipient,\\n    uint256 amount,\\n    uint32 fee,\\n    uint32 toTeam,\\n    uint32 toMarketing,\\n    uint32 toBooster,\\n    uint32 toRewardPool\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/ICFolioItemCallback.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @dev Interface to receive callbacks when minted tokens are burnt\\n */\\ninterface ICFolioItemCallback {\\n  /**\\n   * @dev Called when a TradeFloor CFolioItem is transfered\\n   *\\n   * In case of mint `from` is address(0).\\n   * In case of burn `to` is address(0).\\n   *\\n   * cfolioHandlers are passed to let each cfolioHandler filter for its own\\n   * token. This eliminates the need for creating separate lists.\\n   *\\n   * @param from The account sending the token\\n   * @param to The account receiving the token\\n   * @param tokenIds The ERC-1155 token IDs\\n   * @param cfolioHandlers cFolioItem handlers\\n   */\\n  function onCFolioItemsTransferedFrom(\\n    address from,\\n    address to,\\n    uint256[] calldata tokenIds,\\n    address[] calldata cfolioHandlers\\n  ) external;\\n\\n  /**\\n   * @dev Append data we use later for hashing\\n   *\\n   * @param cfolioItem The token ID of the c-folio item\\n   * @param current The current data being hashes\\n   *\\n   * @return The current data, with internal data appended\\n   */\\n  function appendHash(address cfolioItem, bytes calldata current)\\n    external\\n    view\\n    returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/ITradeFloor.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @notice Cryptofolio and tokenId interface\\n */\\ninterface ITradeFloor {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Getters\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Return all tokenIds owned by account\\n   */\\n  function getTokenIds(address account)\\n    external\\n    view\\n    returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/IWOWSCryptofolio.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @notice Cryptofolio interface\\n */\\ninterface IWOWSCryptofolio {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Getter\\n  //////////////////////////////////////////////////////////////////////////////\\n  /**\\n   * @dev Return the handler (CFIH) of the underlying NFT\\n   */\\n  function handler() external view returns (address);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State modifiers\\n  //////////////////////////////////////////////////////////////////////////////\\n  /**\\n   * @dev Set the handler of the underlying NFT\\n   *\\n   * This function is called during I-NFT setup\\n   *\\n   * @param newHandler The new handler of the underlying NFT,\\n   */\\n  function setHandler(address newHandler) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/IWOWSERC1155.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @notice Sft holder contract\\n */\\ninterface IWOWSERC1155 {\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Getters\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Get the token ID of a given address\\n   *\\n   * A cross check is required because token ID 0 is valid.\\n   *\\n   * @param tokenAddress The address to convert to a token ID\\n   *\\n   * @return The token ID on success, or uint256(-1) if `tokenAddress` does not\\n   * belong to a token ID\\n   */\\n  function addressToTokenId(address tokenAddress)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Get the address for a given token ID\\n   *\\n   * @param tokenId The token ID to convert\\n   *\\n   * @return The address, or address(0) in case the token ID does not belong\\n   * to an NFT\\n   */\\n  function tokenIdToAddress(uint256 tokenId) external view returns (address);\\n\\n  /**\\n   * @dev Return the level and the mint timestamp of tokenId\\n   *\\n   * @param tokenId The tokenId to query\\n   *\\n   * @return mintTimestamp The timestamp token was minted\\n   * @return level The level token belongs to\\n   */\\n  function getTokenData(uint256 tokenId)\\n    external\\n    view\\n    returns (uint64 mintTimestamp, uint8 level);\\n\\n  /**\\n   * @dev Return all tokenIds owned by account\\n   */\\n  function getTokenIds(address account)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the cFolioItemType of a given cFolioItem tokenId\\n   */\\n  function getCFolioItemType(uint256 tokenId) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the balance of an account's Tokens\\n   * @param owner  The address of the token holder\\n   * @param tokenId ID of the Token\\n   * @return The _owner's balance of the token type requested\\n   */\\n  function balanceOf(address owner, uint256 tokenId)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Get the balance of multiple account/token pairs\\n   * @param owners The addresses of the token holders\\n   * @param tokenIds ID of the Tokens\\n   * @return       The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n   */\\n  function balanceOfBatch(\\n    address[] calldata owners,\\n    uint256[] calldata tokenIds\\n  ) external view returns (uint256[] memory);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State modifiers\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @notice Mints tokenIds into 'to' account\\n   * @dev Emits SftTokenTransfer Event\\n   *\\n   * Throws if sender has no MINTER_ROLE\\n   * 'data' holds the CFolioItemHandler if CFI's are minted\\n   */\\n  function mintBatch(\\n    address to,\\n    uint256[] calldata tokenIds,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   * @notice Burns tokenIds owned by 'account'\\n   * @dev Emits SftTokenTransfer Event\\n   *\\n   * Burns all owned CFolioItems\\n   * Throws if CFolioItems have assets\\n   */\\n  function burnBatch(address account, uint256[] calldata tokenIds) external;\\n\\n  /**\\n   * @notice Transfers amount of an id from the from address to the 'to' address specified\\n   * @dev Emits SftTokenTransfer Event\\n   * Throws if 'to' is the zero address\\n   * Throws if 'from' is not the current owner\\n   * If 'to' is a smart contract, ERC1155TokenReceiver interface will checked\\n   * @param from    Source address\\n   * @param to      Target address\\n   * @param tokenId ID of the token type\\n   * @param amount  Transfered amount\\n   * @param data    Additional data with no specified format, sent in call to `_to`\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   * @dev Batch version of {safeTransferFrom}\\n   */\\n  function safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   * @dev Each custom card has its own level. Level will be used when\\n   * calculating rewards and raiding power.\\n   *\\n   * @param tokenId The ID of the token whose level is being set\\n   * @param cardLevel The new level of the specified token\\n   */\\n  function setCustomCardLevel(uint256 tokenId, uint8 cardLevel) external;\\n\\n  /**\\n   * @dev Sets the cfolioItemType of a cfolioItem tokenId, not yet used\\n   * sftHolder tokenId expected (without hash)\\n   */\\n  function setCFolioItemType(uint256 tokenId, uint256 cfolioItemType_) external;\\n\\n  /**\\n   * @dev Sets external NFT for display tokenId\\n   * By default NFT is rendered using our internal metadata\\n   *\\n   * Throws if not called from MINTER role\\n   */\\n  function setExternalNft(\\n    uint256 tokenId,\\n    address externalCollection,\\n    uint256 externalTokenId\\n  ) external;\\n\\n  /**\\n   * @dev Deletes external NFT settings\\n   *\\n   * Throws if not called from MINTER role\\n   */\\n  function deleteExternalNft(uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/utils/AddressBook.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nlibrary AddressBook {\\n  bytes32 public constant DEPLOYER = 'DEPLOYER';\\n  bytes32 public constant TEAM_WALLET = 'TEAM_WALLET';\\n  bytes32 public constant MARKETING_WALLET = 'MARKETING_WALLET';\\n  bytes32 public constant ADMIN_ACCOUNT = 'ADMIN_ACCOUNT';\\n  bytes32 public constant UNISWAP_V2_ROUTER02 = 'UNISWAP_V2_ROUTER02';\\n  bytes32 public constant WETH_WOWS_STAKE_FARM = 'WETH_WOWS_STAKE_FARM';\\n  bytes32 public constant WOWS_TOKEN = 'WOWS_TOKEN';\\n  bytes32 public constant UNISWAP_V2_PAIR = 'UNISWAP_V2_PAIR';\\n  bytes32 public constant WOWS_BOOSTER_PROXY = 'WOWS_BOOSTER_PROXY';\\n  bytes32 public constant REWARD_HANDLER = 'REWARD_HANDLER';\\n  bytes32 public constant SFT_MINTER_PROXY = 'SFT_MINTER_PROXY';\\n  bytes32 public constant SFT_HOLDER_PROXY = 'SFT_HOLDER_PROXY';\\n  bytes32 public constant SFT_EVALUATOR_PROXY = 'SFT_EVALUATOR_PROXY';\\n  bytes32 public constant TRADE_FLOOR_PROXY = 'TRADE_FLOOR_PROXY';\\n}\\n\"\r\n    },\r\n    \"contracts/src/utils/TokenIds.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See LICENSE.txt for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nlibrary TokenIds {\\n  // 128 bit underlying hash\\n  uint256 public constant HASH_MASK = (1 << 128) - 1;\\n\\n  function isBaseCard(uint256 tokenId) internal pure returns (bool) {\\n    return (tokenId & HASH_MASK) < (1 << 64);\\n  }\\n\\n  function isStockCard(uint256 tokenId) internal pure returns (bool) {\\n    return (tokenId & HASH_MASK) < (1 << 32);\\n  }\\n\\n  function isCustomCard(uint256 tokenId) internal pure returns (bool) {\\n    return\\n      (tokenId & HASH_MASK) >= (1 << 32) && (tokenId & HASH_MASK) < (1 << 64);\\n  }\\n\\n  function isCFolioCard(uint256 tokenId) internal pure returns (bool) {\\n    return\\n      (tokenId & HASH_MASK) >= (1 << 64) && (tokenId & HASH_MASK) < (1 << 128);\\n  }\\n\\n  function toSftTokenId(uint256 tokenId) internal pure returns (uint256) {\\n    return tokenId & HASH_MASK;\\n  }\\n\\n  function maskHash(uint256 tokenId) internal pure returns (uint256) {\\n    return tokenId & ~HASH_MASK;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/utils/interfaces/IAddressRegistry.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\ninterface IAddressRegistry {\\n  /**\\n   * @dev Set an abitrary key / address pair into the registry\\n   */\\n  function setRegistryEntry(bytes32 _key, address _location) external;\\n\\n  /**\\n   * @dev Get a registry enty with by key, returns 0 address if not existing\\n   */\\n  function getRegistryEntry(bytes32 _key) external view returns (address);\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"addressRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"BaseSpecChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"CFolioSpecChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wowsToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sftHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"booster\",\"type\":\"address\"}],\"name\":\"Constructed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Destruct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cfolioType\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CUSTOM_MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"childTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"name\":\"claimSFTRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destructContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"levels\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"cardIds\",\"type\":\"uint8[]\"}],\"name\":\"getBaseSpec\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"numMinted\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"maxMintable\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"cFolioTypes\",\"type\":\"uint256[]\"}],\"name\":\"getCFolioSpec\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint128[]\",\"name\":\"numMinted\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"maxMintable\",\"type\":\"uint128[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"spender\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"erc20\",\"type\":\"address[]\"}],\"name\":\"getErc20Allowances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"erc20\",\"type\":\"address[]\"}],\"name\":\"getErc20Balances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cfih\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getRewardInfo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"boosterLocked\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"boosterPending\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"boosterApr\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"boosterSecsLeft\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"sftTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tfTokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getTokenInformation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"addressRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cfolioItemType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"investAmounts\",\"type\":\"uint256[]\"}],\"name\":\"mintCFolioItemSFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"mintCustomSFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"cardId\",\"type\":\"uint8\"}],\"name\":\"mintWowsSFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCFolioItemNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCustomCardId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardHandler\",\"outputs\":[{\"internalType\":\"contract IRewardHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"levels\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"caps\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IOldWOWSERC1155\",\"name\":\"oldSftContract\",\"type\":\"address\"}],\"name\":\"setBaseSpec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"cFolioTypes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"handlers\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"maxMint\",\"type\":\"uint128[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"setCFolioSpec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childTunnel_\",\"type\":\"address\"}],\"name\":\"setChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"cardId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"minted\",\"type\":\"uint16\"}],\"name\":\"setMinted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardHandler\",\"name\":\"newRewardHandler\",\"type\":\"address\"}],\"name\":\"setRewardHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISFTEvaluator\",\"name\":\"sftEvaluator_\",\"type\":\"address\"}],\"name\":\"setSFTEvaluator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeFloor_\",\"type\":\"address\"}],\"name\":\"setTradeFloor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sftEvaluator\",\"outputs\":[{\"internalType\":\"contract ISFTEvaluator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeFloor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WOWSSftMinter","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000fef1f573121b4418012d144534506ad35ef4b81a","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":""}]}