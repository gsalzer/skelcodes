{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: SPDX-License-Identifier: AGPL-3.0\r\npragma solidity ^0.8.4;\r\n\r\n// Author: Osman Kuzucu\r\n// https://github.com/open-money\r\n// osman@openmoney.com.tr\r\n\r\n// Open Money Teknoloji ve Yatırım A.Ş.\r\n// Omlira Kurucu ve Ekip Payı Zaman Kilitli Akıllı Kontratı\r\n// 2021\r\n\r\ninterface Token {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract TimeLocked {\r\n\r\n    address private _tokenAddress;\r\n    address[] private _signers;\r\n    mapping (address => bool) _signersMap;\r\n    address private _transferTo;\r\n    uint256 private _amount;\r\n    uint8 private _sigCount;\r\n    mapping (address => bool) _hasSigned;\r\n\r\n    modifier onlySigner {\r\n        require(_signersMap[msg.sender],\"You are not a signer\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOnce {\r\n        require(!_hasSigned[msg.sender],\"You already signed\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAfter {\r\n        require(block.timestamp > 1704056400, \"Time hasn't arrived yet\");\r\n        _;\r\n    }\r\n    \r\n    constructor(address[] memory signers) {\r\n        for(uint i=0; i<signers.length; i++) {\r\n            _signers.push(signers[i]);\r\n            _signersMap[signers[i]] = true;\r\n        }\r\n    }\r\n\r\n    function getSigner (uint id) public view returns (address) {\r\n        return _signers[id];\r\n    }\r\n\r\n    function getSignersCount () public view returns (uint) {\r\n        return _signers.length;\r\n    }\r\n\r\n    function initializeTransfer (address transferTo, address tokenAddress, uint256 amount) public onlySigner {\r\n        _transferTo = transferTo;\r\n        _tokenAddress = tokenAddress;\r\n        _amount = amount;\r\n        _sigCount = 0;\r\n        for(uint i=0; i<_signers.length; i++) {\r\n            _hasSigned[_signers[i]] = false;\r\n        }\r\n    }\r\n\r\n    function approveTransfer () public onlySigner onlyOnce {\r\n        _sigCount++;\r\n        _hasSigned[msg.sender] = true;\r\n    }\r\n\r\n    function finalizeTransfer () public onlySigner onlyAfter {\r\n        require(2*_sigCount > _signers.length, \"Not enough signers\");\r\n        Token(_tokenAddress).transfer(_transferTo, _amount);\r\n    }\r\n    \r\n    function recoverEth () public {\r\n        require(_signers[0] == msg.sender);\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"approveTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSignersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"initializeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TimeLocked","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000b414a55ec374d16b256489115bb0bd1952393350000000000000000000000009a99459d68e2d691bb9cd4e214c16415ef470bd2000000000000000000000000531e7d1f0b30b1f8cc1a11f36c1c7ae4a11a0011000000000000000000000000fbd713b3aca965ce347b19c5c4190e83a423d3a9000000000000000000000000cd9ab879382e5bde7796f851734e350b60874be0000000000000000000000000e8d1a70212e4a84d2b5176c069c36b76848a7503","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1513bd5585b08a0ea21d3ba894fba4b33a5c3b9b74da6d9f200353c1d3571a2c"}]}