{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Traits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./interfaces/ITraits.sol\\\";\\nimport \\\"./interfaces/ISharks.sol\\\";\\n\\ncontract Traits is Ownable, ITraits {\\n  using Strings for uint256;\\n\\n  // struct to store each trait's data for metadata and rendering\\n  struct Trait {\\n    string name;\\n    string png;\\n  }\\n\\n  // mapping from trait type (index) to its name\\n  string[2] private _traitTypes = [\\n    \\\"Base\\\",\\n    \\\"Accessory\\\"\\n  ];\\n  // storage of each traits name and base64 PNG data\\n  mapping(uint8 => mapping(uint8 => Trait)) public traitData;\\n\\n  ISharks public sharksNft;\\n\\n  constructor() {}\\n\\n  /** ADMIN */\\n\\n  function setSharks(address _sharksNft) external onlyOwner {\\n    sharksNft = ISharks(_sharksNft);\\n  }\\n\\n  /**\\n   * administrative to upload the names and images associated with each trait\\n   * @param traitType the trait type to upload the traits for (see traitTypes for a mapping)\\n   * @param traits the names and base64 encoded PNGs for each trait\\n   */\\n  function uploadTraits(uint8 traitType, uint8[] calldata traitIds, Trait[] calldata traits) external onlyOwner {\\n    require(traitIds.length == traits.length, \\\"Mismatched inputs\\\");\\n    for (uint i = 0; i < traits.length; i++) {\\n      traitData[traitType][traitIds[i]] = Trait(\\n        traits[i].name,\\n        traits[i].png\\n      );\\n    }\\n  }\\n\\n  /** RENDER */\\n\\n  /**\\n   * generates an <image> element using base64 encoded PNGs\\n   * @param trait the trait storing the PNG data\\n   * @return the <image> element\\n   */\\n  function drawTrait(Trait memory trait) internal pure returns (string memory) {\\n    return string(abi.encodePacked(\\n      '<image x=\\\"0\\\" y=\\\"0\\\" width=\\\"400\\\" height=\\\"400\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"',\\n      trait.png,\\n      '\\\"/>'\\n    ));\\n  }\\n\\n  /**\\n   * generates an entire SVG by composing multiple <image> elements of PNGs\\n   * @param tokenId the ID of the token to generate an SVG for\\n   * @return a valid SVG of the Wizard / Dragon\\n   */\\n  function drawSVG(uint256 tokenId) internal view returns (string memory) {\\n    ISharks.SGToken memory s = sharksNft.getTokenTraits(tokenId);\\n    uint8 shift = uint8(s.tokenType) * 2;\\n\\n    string memory svgString = string(abi.encodePacked(\\n      drawTrait(traitData[0 + shift][s.base]),\\n      drawTrait(traitData[1 + shift][s.accessory])\\n    ));\\n\\n    return string(abi.encodePacked(\\n      '<svg id=\\\"sharksNft\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 400 400\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">',\\n      '<image x=\\\"0\\\" y=\\\"0\\\" width=\\\"400\\\" height=\\\"400\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"https://cdn.sharkgame.app/shark/bg/underwater.png\\\"/>',\\n      svgString,\\n      \\\"</svg>\\\"\\n    ));\\n  }\\n\\n  /**\\n   * generates an attribute for the attributes array in the ERC721 metadata standard\\n   * @param traitType the trait type to reference as the metadata key\\n   * @param value the token's trait associated with the key\\n   * @return a JSON dictionary for the single attribute\\n   */\\n  function attributeForTypeAndValue(string memory traitType, string memory value) internal pure returns (string memory) {\\n    return string(abi.encodePacked(\\n      '{\\\"trait_type\\\":\\\"',\\n      traitType,\\n      '\\\",\\\"value\\\":\\\"',\\n      value,\\n      '\\\"}'\\n    ));\\n  }\\n\\n  function typeToString(ISharks.SGTokenType tokenType) internal pure returns (string memory) {\\n    return tokenType == ISharks.SGTokenType.MINNOW ? \\\"Minnow\\\" : (tokenType == ISharks.SGTokenType.SHARK ? \\\"Shark\\\" : \\\"Orca\\\");\\n  }\\n\\n  /**\\n   * generates an array composed of all the individual traits and values\\n   * @param tokenId the ID of the token to compose the metadata for\\n   * @return a JSON array of all of the attributes for given token ID\\n   */\\n  function compileAttributes(uint256 tokenId) internal view returns (string memory) {\\n    ISharks.SGToken memory s = sharksNft.getTokenTraits(tokenId);\\n    uint8 shift = uint8(s.tokenType) * 2;\\n    string memory traits;\\n    traits = string(abi.encodePacked(\\n      attributeForTypeAndValue(_traitTypes[0], traitData[0 + shift][s.base].name),',',\\n      attributeForTypeAndValue(_traitTypes[1], traitData[1 + shift][s.accessory].name),','\\n    ));\\n    uint256 gen = tokenId <= 5000 ? 0 : (tokenId <= 10000 ? 1 : (tokenId <= 20000 ? 2 : 3));\\n    return string(abi.encodePacked(\\n      '[',\\n      traits,\\n      '{\\\"trait_type\\\":\\\"Generation\\\",\\\"value\\\":\\\"Gen ',gen.toString(),\\n      '\\\"},{\\\"trait_type\\\":\\\"Type\\\",\\\"value\\\":\\\"',\\n      typeToString(s.tokenType),\\n      '\\\"}]'\\n    ));\\n  }\\n\\n  /**\\n   * generates a base64 encoded metadata response without referencing off-chain content\\n   * @param tokenId the ID of the token to generate the metadata for\\n   * @return a base64 encoded JSON dictionary of the token's metadata and SVG\\n   */\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    require(_msgSender() == address(sharksNft), \\\"hmmmm what doing?\\\");\\n    ISharks.SGToken memory s = sharksNft.getTokenTraits(tokenId);\\n\\n    string memory metadata = string(abi.encodePacked(\\n      '{\\\"name\\\": \\\"',\\n      typeToString(s.tokenType),\\\" #\\\",\\n      tokenId.toString(),\\n      '\\\", \\\"description\\\": \\\"Shark Game is a gamified NFT protocol with next-level tokenomics, featuring first-class security measures, truly random game mechanics, and a robust user interface.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n      base64(bytes(drawSVG(tokenId))),\\n      '\\\", \\\"attributes\\\":',\\n      compileAttributes(tokenId),\\n      \\\"}\\\"\\n    ));\\n\\n    return string(abi.encodePacked(\\n      \\\"data:application/json;base64,\\\",\\n      base64(bytes(metadata))\\n    ));\\n  }\\n\\n  /** BASE 64 - Written by Brech Devos */\\n\\n  string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n  function base64(bytes memory data) internal pure returns (string memory) {\\n    if (data.length == 0) return '';\\n\\n    // load the table into memory\\n    string memory table = TABLE;\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n    // add some extra buffer at the end required for the writing\\n    string memory result = new string(encodedLen + 32);\\n\\n    assembly {\\n      // set the actual output length\\n      mstore(result, encodedLen)\\n\\n      // prepare the lookup table\\n      let tablePtr := add(table, 1)\\n\\n      // input ptr\\n      let dataPtr := data\\n      let endPtr := add(dataPtr, mload(data))\\n\\n      // result ptr, jump over length\\n      let resultPtr := add(result, 32)\\n\\n      // run over the input, 3 bytes at a time\\n      for {} lt(dataPtr, endPtr) {}\\n      {\\n          dataPtr := add(dataPtr, 3)\\n\\n          // read 3 bytes\\n          let input := mload(dataPtr)\\n\\n          // write 4 characters\\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n          resultPtr := add(resultPtr, 1)\\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n          resultPtr := add(resultPtr, 1)\\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n          resultPtr := add(resultPtr, 1)\\n          mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n          resultPtr := add(resultPtr, 1)\\n      }\\n\\n      // padding with '='\\n      switch mod(mload(data), 3)\\n      case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n      case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n    }\\n\\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISharks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface ISharks is IERC721Enumerable {\\n    // game data storage\\n    enum SGTokenType {\\n        MINNOW,\\n        SHARK,\\n        ORCA\\n    }\\n\\n    struct SGToken {\\n        SGTokenType tokenType;\\n        uint8 base;\\n        uint8 accessory;\\n    }\\n\\n    function minted() external returns (uint16);\\n    function updateOriginAccess(uint16[] memory tokenIds) external;\\n    function mint(address recipient, uint256 seed) external;\\n    function burn(uint256 tokenId) external;\\n    function getMaxTokens() external view returns (uint16);\\n    function getPaidTokens() external view returns (uint16);\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n    function getTokenTraits(uint256 tokenId) external view returns (SGToken memory);\\n    function getTokenWriteBlock(uint256 tokenId) external view returns(uint64);\\n    function getTokenType(uint256 tokenId) external view returns(SGTokenType);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITraits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE \\n\\npragma solidity ^0.8.0;\\n\\ninterface ITraits {\\n  function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sharksNft\",\"type\":\"address\"}],\"name\":\"setSharks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharksNft\",\"outputs\":[{\"internalType\":\"contract ISharks\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"traitData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"png\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"traitType\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"traitIds\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"png\",\"type\":\"string\"}],\"internalType\":\"struct Traits.Trait[]\",\"name\":\"traits\",\"type\":\"tuple[]\"}],\"name\":\"uploadTraits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Traits","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"50","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}