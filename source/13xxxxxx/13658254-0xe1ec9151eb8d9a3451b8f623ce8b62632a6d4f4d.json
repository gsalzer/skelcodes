{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/base/factory/MegaFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\nimport \\\"./interface/IStrategyFactory.sol\\\";\\nimport \\\"./interface/IVaultFactory.sol\\\";\\nimport \\\"./interface/IPoolFactory.sol\\\";\\nimport \\\"./interface/IUniV3VaultFactory.sol\\\";\\n\\nimport \\\"../interface/IVault.sol\\\";\\nimport \\\"../inheritance/Governable.sol\\\";\\n\\ncontract MegaFactory is Ownable {\\n\\n  enum VaultType {\\n    None,\\n    Regular,\\n    UniV3\\n  }\\n\\n  enum StrategyType {\\n    None,\\n    Upgradable\\n  }\\n\\n  address public potPoolFactory;\\n  mapping(uint256 => address) public vaultFactories;\\n  mapping(uint256 => address) public strategyFactories;\\n\\n  struct CompletedDeployment {\\n    VaultType vaultType;\\n    address Underlying;\\n    address NewVault;\\n    address NewStrategy;\\n    address NewPool;\\n  }\\n\\n  event DeploymentCompleted(string id);\\n\\n  mapping (string => CompletedDeployment) public completedDeployments;\\n  mapping (address => bool) public authorizedDeployers;\\n\\n  address public multisig;\\n  address public actualStorage;\\n\\n  /* methods to make compatible with Storage */\\n  function governance() external view returns (address) {\\n    return address(this); // fake governance\\n  }\\n\\n  function isGovernance(address addr) external view returns (bool) {\\n    return addr == address(this); // fake governance\\n  }\\n\\n  function isController(address addr) external view returns (bool) {\\n    return addr == address(this); // fake controller\\n  }\\n\\n  modifier onlyAuthorizedDeployer(string memory id) {\\n    require(completedDeployments[id].vaultType == VaultType.None, \\\"cannot reuse id\\\");\\n    require(authorizedDeployers[msg.sender], \\\"unauthorized deployer\\\");\\n    _;\\n    emit DeploymentCompleted(id);\\n  }\\n\\n  constructor(address _storage, address _multisig) public {\\n    multisig = _multisig;\\n    actualStorage = _storage;\\n    setAuthorization(owner(), true);\\n    setAuthorization(multisig, true);\\n  }\\n\\n  function setAuthorization(address userAddress, bool isDeployer) public onlyOwner {\\n    authorizedDeployers[userAddress] = isDeployer;\\n  }\\n\\n  function setVaultFactory(uint256 vaultType, address factoryAddress) external onlyOwner {\\n    vaultFactories[vaultType] = factoryAddress;\\n  }\\n\\n  function setStrategyFactory(uint256 strategyType, address factoryAddress) external onlyOwner {\\n    strategyFactories[strategyType] = factoryAddress;\\n  }\\n\\n  function setPotPoolFactory(address factoryAddress) external onlyOwner {\\n    potPoolFactory = factoryAddress;\\n  }\\n\\n  function createRegularVault(string calldata id, address underlying) external onlyAuthorizedDeployer(id) {\\n    address vault = IVaultFactory(vaultFactories[uint256(VaultType.Regular)]).deploy(\\n     actualStorage,\\n     underlying\\n    );\\n\\n    completedDeployments[id] = CompletedDeployment(\\n      VaultType.Regular,\\n      underlying,\\n      vault,\\n      address(0),\\n      IPoolFactory(potPoolFactory).deploy(actualStorage, vault)\\n    );\\n  }\\n\\n  function createRegularVaultUsingUpgradableStrategy(string calldata id, address underlying, address strategyImplementation) external onlyAuthorizedDeployer(id) {\\n    address vault = IVaultFactory(vaultFactories[uint256(VaultType.Regular)]).deploy(\\n     address(this), // using this as initial storage, then switching to actualStorage\\n     underlying\\n    );\\n\\n    address strategy = IStrategyFactory(strategyFactories[uint256(StrategyType.Upgradable)]).deploy(actualStorage, vault, strategyImplementation);\\n    IVault(vault).setStrategy(strategy);\\n    Governable(vault).setStorage(actualStorage);\\n\\n    completedDeployments[id] = CompletedDeployment(\\n      VaultType.Regular,\\n      underlying,\\n      vault,\\n      strategy,\\n      IPoolFactory(potPoolFactory).deploy(actualStorage, vault)\\n    );\\n  }\\n\\n  function createUniV3Vault(string calldata id, uint256 uniV3PoolId) external onlyAuthorizedDeployer(id) {\\n    address vault = IUniV3VaultFactory(vaultFactories[uint256(VaultType.UniV3)]).deploy(\\n      actualStorage,\\n      uniV3PoolId\\n    );\\n\\n    completedDeployments[id] = CompletedDeployment(\\n      VaultType.UniV3,\\n      address(0),\\n      vault,\\n      address(0),\\n      IPoolFactory(potPoolFactory).deploy(actualStorage, vault)\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/factory/interface/IStrategyFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IStrategyFactory {\\n  function deploy(address _storage, address _vault, address _providedStrategyAddress) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/base/factory/interface/IVaultFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IVaultFactory {\\n  function deploy(address _storage, address _underlying) external returns (address);\\n  function info(address vault) external view returns(address Underlying, address NewVault);\\n}\\n\"\r\n    },\r\n    \"contracts/base/factory/interface/IPoolFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IPoolFactory {\\n  function deploy(address _storage, address _vault) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/base/factory/interface/IUniV3VaultFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IUniV3VaultFactory {\\n  function deploy(address _storage, uint256 univ3PoolId) external returns (address vault);\\n  function info(address vault) external view returns(address[] memory Underlying, address NewVault, address DataContract, uint256 FeeAmount, uint256 PosId);\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IVault.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface IVault {\\n\\n    function initializeVault(\\n      address _storage,\\n      address _underlying,\\n      uint256 _toInvestNumerator,\\n      uint256 _toInvestDenominator\\n    ) external ;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function underlyingBalanceInVault() external view returns (uint256);\\n    function underlyingBalanceWithInvestment() external view returns (uint256);\\n\\n    // function store() external view returns (address);\\n    function governance() external view returns (address);\\n    function controller() external view returns (address);\\n    function underlying() external view returns (address);\\n    function strategy() external view returns (address);\\n\\n    function setStrategy(address _strategy) external;\\n    function announceStrategyUpdate(address _strategy) external;\\n    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external;\\n\\n    function deposit(uint256 amountWei) external;\\n    function depositFor(uint256 amountWei, address holder) external;\\n\\n    function withdrawAll() external;\\n    function withdraw(uint256 numberOfShares) external;\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\\n\\n    // hard work should be callable only by the controller (by the hard worker) or by governance\\n    function doHardWork() external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/Governable.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\nimport \\\"./Storage.sol\\\";\\n\\ncontract Governable {\\n\\n  Storage public store;\\n\\n  constructor(address _store) public {\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\n    store = Storage(_store);\\n  }\\n\\n  modifier onlyGovernance() {\\n    require(store.isGovernance(msg.sender), \\\"Not governance\\\");\\n    _;\\n  }\\n\\n  function setStorage(address _store) public onlyGovernance {\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\n    store = Storage(_store);\\n  }\\n\\n  function governance() public view returns (address) {\\n    return store.governance();\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/Storage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ncontract Storage {\\n\\n  address public governance;\\n  address public controller;\\n\\n  constructor() public {\\n    governance = msg.sender;\\n  }\\n\\n  modifier onlyGovernance() {\\n    require(isGovernance(msg.sender), \\\"Not governance\\\");\\n    _;\\n  }\\n\\n  function setGovernance(address _governance) public onlyGovernance {\\n    require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\n    governance = _governance;\\n  }\\n\\n  function setController(address _controller) public onlyGovernance {\\n    require(_controller != address(0), \\\"new controller shouldn't be empty\\\");\\n    controller = _controller;\\n  }\\n\\n  function isGovernance(address account) public view returns (bool) {\\n    return account == governance;\\n  }\\n\\n  function isController(address account) public view returns (bool) {\\n    return account == controller;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multisig\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"DeploymentCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"actualStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedDeployers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"completedDeployments\",\"outputs\":[{\"internalType\":\"enum MegaFactory.VaultType\",\"name\":\"vaultType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"Underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"NewVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"NewStrategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"NewPool\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"createRegularVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategyImplementation\",\"type\":\"address\"}],\"name\":\"createRegularVaultUsingUpgradableStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"uniV3PoolId\",\"type\":\"uint256\"}],\"name\":\"createUniV3Vault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isGovernance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDeployer\",\"type\":\"bool\"}],\"name\":\"setAuthorization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"}],\"name\":\"setPotPoolFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"}],\"name\":\"setStrategyFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"}],\"name\":\"setVaultFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategyFactories\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultFactories\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MegaFactory","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c95cbe4ca30055c787cb784be99d6a8494d0d197000000000000000000000000f49440c1f012d041802b25a73e5b0b9166a75c02","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}