{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"CrocodileGame.sol\": {\r\n      \"content\": \"/*\\n ██████╗██████╗  ██████╗  ██████╗ ██████╗ ██████╗ ██╗██╗     ███████╗     ██████╗  █████╗ ███╗   ███╗███████╗\\n██╔════╝██╔══██╗██╔═══██╗██╔════╝██╔═══██╗██╔══██╗██║██║     ██╔════╝    ██╔════╝ ██╔══██╗████╗ ████║██╔════╝\\n██║     ██████╔╝██║   ██║██║     ██║   ██║██║  ██║██║██║     █████╗      ██║  ███╗███████║██╔████╔██║█████╗  \\n██║     ██╔══██╗██║   ██║██║     ██║   ██║██║  ██║██║██║     ██╔══╝      ██║   ██║██╔══██║██║╚██╔╝██║██╔══╝  \\n╚██████╗██║  ██║╚██████╔╝╚██████╗╚██████╔╝██████╔╝██║███████╗███████╗    ╚██████╔╝██║  ██║██║ ╚═╝ ██║███████╗\\n ╚═════╝╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═════╝ ╚═════╝ ╚═╝╚══════╝╚══════╝     ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"OwnableUpgradeable.sol\\\";\\nimport \\\"PausableUpgradeable.sol\\\";\\nimport \\\"ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"ECDSAUpgradeable.sol\\\";\\nimport \\\"EnumerableSetUpgradeable.sol\\\";\\n\\nimport \\\"ICrocodileGame.sol\\\";\\nimport \\\"ICrocodileGamePiranha.sol\\\";\\nimport \\\"ICrocodileGameNFT.sol\\\";\\nimport \\\"ICrocodileGameWARDER.sol\\\";\\n\\ncontract CrocodileGame is ICrocodileGame, OwnableUpgradeable, IERC721ReceiverUpgradeable,\\n                    PausableUpgradeable, ReentrancyGuardUpgradeable {\\n  using ECDSAUpgradeable for bytes32;\\n  using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n\\n  /**\\n   * First of all, thanks for checking out our contracts.\\n   * We implemented the following concepts:\\n   * (1) Semi-Onchain Concept (predefined traits distribution then injects the randomness when minting),\\n   * (2) Dilemma game implementation.\\n   * (3) O(1) space complexity implementation for efficiency.\\n\\n   * Feel free to contract us if there are any concerns or reports.\\n   * We used the fox.game code as the baseline.\\n   \\n   * We hope our concept & implementation shed a light on NFT game society.\\n   **/\\n\\n  uint32 public totalCrocodilesStaked;\\n\\n  uint32 public totalCrocodilebirdsStaked;\\n\\n  uint16 public totalStakedCooperate;\\n  uint16 public totalStakedBetray;\\n\\n  uint48 public lastClaimTimestamp;\\n\\n  uint48 public constant MINIMUM_TO_EXIT = 1 days;\\n\\n  uint128 public constant MAXIMUM_GLOBAL_PIRANHA = 900000000 ether;\\n\\n  uint128 public totalPiranhaEarned;\\n\\n  uint128 public constant CROCODILE_EARNING_RATE = 115740740740740740; // 10000 ether / 1 days;\\n  uint128 public constant CROCODILEBIRD_EARNING_RATE = 115740740740740740; // 10000 ether / 1 days;\\n\\n  struct TimeStake { uint16 tokenId; uint48 time; address owner; }\\n  struct KarmaStake { uint16 tokenId; address owner; uint8 karmaP; uint8 karmaM; }\\n\\n  event TokenStaked(string kind, uint16 tokenId, address owner);\\n  event TokenUnstaked(string kind, uint16 tokenId, address owner, uint128 earnings);\\n\\n  ICrocodileGameNFT private crocodileNFT;\\n  ICrocodileGamePiranha private crocodilePiranha;\\n  ICrocodileGameWARDER private crocodileWARDER;\\n  bool isWARDER = false;\\n\\n  KarmaStake[] public karmaStake;\\n  mapping(uint16 => uint16[]) public karmaHierarchy;\\n  uint8 karmaStakeLength;\\n\\n  TimeStake[] public crocodileStakeByToken; // crocodile storage\\n  mapping(uint16 => uint16) public crocodileHierarchy; // crocodile location within group\\n\\n  TimeStake[] public crocodilebirdStakeByToken; // crocodile bird storage\\n  mapping(uint16 => uint16) public crocodilebirdHierarchy; // bird location within group\\n\\n  mapping(address => EnumerableSetUpgradeable.UintSet) private _stakedTokens;\\n\\n\\n  function initialize() public initializer {\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n    __Pausable_init();\\n    //_pause();\\n  }\\n\\n\\n  function stakeTokens(address account, uint16[] calldata tokenIds, uint8[] calldata dilemmas) external whenNotPaused nonReentrant _updateEarnings {\\n    require((account == msg.sender && tx.origin == msg.sender) || msg.sender == address(crocodileNFT), \\\"not approved\\\");\\n    \\n    for (uint16 i = 0; i < tokenIds.length; i++) {\\n      if (msg.sender != address(crocodileNFT)) { \\n        require(crocodileNFT.ownerOf(tokenIds[i]) == msg.sender, \\\"only token owners can stake\\\");\\n      }\\n      require((crocodileNFT.getTraits(tokenIds[i]).kind == 0) || (crocodileNFT.getTraits(tokenIds[i]).kind == 1), \\\"traits overlaps\\\");\\n      \\n      if (crocodileNFT.getTraits(tokenIds[i]).kind==0)\\n      { // CROCODILE\\n        _addCrocodileToSwamp(account, tokenIds[i], dilemmas[i]);\\n      } \\n      else { // CROCODILEBIRD\\n        _addCrocodilebirdToNest(account, tokenIds[i], dilemmas[i]);\\n      }\\n\\n      if (msg.sender != address(crocodileNFT)) {\\n        require(crocodileNFT.ownerOf(tokenIds[i]) == msg.sender, \\\"only token owners can stake\\\");\\n        crocodileNFT.transferFrom(msg.sender, address(this), tokenIds[i]);\\n      }\\n    }\\n  }\\n\\n\\n  function _addCrocodileToSwamp(address account, uint16 tokenId, uint8 dilemma) internal {\\n\\n    if(dilemma==1){ // for COOPERATE\\n      if (crocodileNFT.getTraits(tokenId).karmaM>0){\\n        crocodileNFT.setKarmaM(tokenId, crocodileNFT.getTraits(tokenId).karmaM-1);\\n      }\\n      else{\\n        karmaHierarchy[tokenId].push(karmaStakeLength);\\n        karmaStakeLength++;\\n        karmaStake.push(KarmaStake({\\n          tokenId: tokenId,\\n          owner: account,\\n          karmaP: crocodileNFT.getTraits(tokenId).karmaP,\\n          karmaM: 0\\n        }));\\n\\n        crocodileNFT.setKarmaP(tokenId, crocodileNFT.getTraits(tokenId).karmaP+1);\\n      }\\n    } \\n    else{ // for BETRAY\\n      if(crocodileNFT.getTraits(tokenId).karmaP>0){\\n        KarmaStake memory KlastStake = karmaStake[karmaStakeLength-1];\\n        karmaStake[karmaHierarchy[tokenId][crocodileNFT.getTraits(tokenId).karmaP-1]] = KlastStake;\\n        karmaHierarchy[KlastStake.tokenId][KlastStake.karmaP] = karmaHierarchy[tokenId][crocodileNFT.getTraits(tokenId).karmaP-1];\\n        karmaStake.pop();\\n        karmaStakeLength--;\\n        karmaHierarchy[tokenId].pop();\\n        crocodileNFT.setKarmaP(tokenId, crocodileNFT.getTraits(tokenId).karmaP-1);\\n      }\\n      else{\\n        crocodileNFT.setKarmaM(tokenId, crocodileNFT.getTraits(tokenId).karmaM+1);\\n      }\\n    }\\n    crocodileHierarchy[tokenId] = uint16(crocodileStakeByToken.length);\\n    crocodileStakeByToken.push(TimeStake({\\n        owner: account,\\n        tokenId: tokenId,\\n        time: uint48(block.timestamp)\\n    }));\\n    \\n    totalCrocodilesStaked += 1;\\n    _stakedTokens[account].add(tokenId); \\n\\n    if (dilemma==1)\\n    {totalStakedCooperate += 1;}\\n    else if (dilemma==2)\\n    {totalStakedBetray += 1;}\\n\\n    emit TokenStaked(\\\"CROCODILE\\\", tokenId, account);\\n  }\\n\\n\\n  function _addCrocodilebirdToNest(address account, uint16 tokenId, uint8 dilemma) internal {\\n\\n    if(dilemma==1){ // for Cooperating\\n      if(crocodileNFT.getTraits(tokenId).karmaM>0){\\n        crocodileNFT.setKarmaM(tokenId, crocodileNFT.getTraits(tokenId).karmaM-1);\\n      }\\n      else{\\n        karmaHierarchy[tokenId].push(karmaStakeLength);\\n        karmaStakeLength++;\\n        karmaStake.push(KarmaStake({\\n          tokenId: tokenId,\\n          owner: account,\\n          karmaP: crocodileNFT.getTraits(tokenId).karmaP,\\n          karmaM: 0\\n        }));\\n        crocodileNFT.setKarmaP(tokenId, crocodileNFT.getTraits(tokenId).karmaP+1);\\n      }\\n    }\\n    else{ // for Betraying\\n      if(crocodileNFT.getTraits(tokenId).karmaP>0){\\n        KarmaStake memory KlastStake = karmaStake[karmaStakeLength-1];\\n        karmaStake[karmaHierarchy[tokenId][crocodileNFT.getTraits(tokenId).karmaP-1]] = KlastStake;\\n        karmaHierarchy[KlastStake.tokenId][KlastStake.karmaP] = karmaHierarchy[tokenId][crocodileNFT.getTraits(tokenId).karmaP-1];\\n        karmaStake.pop();\\n        karmaStakeLength--;\\n        karmaHierarchy[tokenId].pop();\\n        crocodileNFT.setKarmaP(tokenId, crocodileNFT.getTraits(tokenId).karmaP-1);\\n      }\\n      else{\\n        crocodileNFT.setKarmaM(tokenId, crocodileNFT.getTraits(tokenId).karmaM+1);\\n      }\\n    }\\n\\n    crocodilebirdHierarchy[tokenId] = uint16(crocodilebirdStakeByToken.length);\\n    crocodilebirdStakeByToken.push(TimeStake({\\n        owner: account,\\n        tokenId: tokenId,\\n        time: uint48(block.timestamp)\\n    }));\\n\\n    totalCrocodilebirdsStaked += 1;\\n    _stakedTokens[account].add(tokenId);\\n\\n    if (dilemma==1)\\n    {totalStakedCooperate += 1;}\\n    else if (dilemma==2)\\n    {totalStakedBetray += 1;}\\n\\n    emit TokenStaked(\\\"CROCODILEBIRD\\\", tokenId, account);\\n  }\\n  \\n  function claimRewardsAndUnstake(uint16[] calldata tokenIds, bool unstake, uint256 seed) external whenNotPaused nonReentrant _updateEarnings {\\n    require(tx.origin == msg.sender, \\\"eos only\\\");\\n\\n    uint128 reward;\\n    uint48 time = uint48(block.timestamp);\\n    for (uint8 i = 0; i < tokenIds.length; i++) {\\n      if (crocodileNFT.getTraits(tokenIds[i]).kind==0) {\\n        reward += _claimCrocodilesFromSwamp(tokenIds[i], unstake, time, seed);\\n      } else { \\n        reward += _claimCrocodilebirdsFromNest(tokenIds[i], unstake, time, seed);\\n      }\\n    }\\n    if (reward != 0) {\\n      if(!isWARDER){\\n        crocodilePiranha.mint(msg.sender, reward);\\n      }else{\\n        if(crocodileWARDER.isOwner(msg.sender)){\\n          crocodilePiranha.mint(msg.sender, reward*2);\\n        }else{\\n          crocodilePiranha.mint(msg.sender, reward);\\n        }\\n      }\\n    }\\n  }\\n\\n\\n  function _claimCrocodilesFromSwamp(uint16 tokenId, bool unstake, uint48 time, uint256 seed) internal returns (uint128 reward) {\\n    TimeStake memory stake = crocodileStakeByToken[crocodileHierarchy[tokenId]];\\n    require(stake.owner == msg.sender, \\\"only token owners can unstake\\\");\\n    require(!(unstake && block.timestamp - stake.time < MINIMUM_TO_EXIT), \\\"crocodiles need 1 days of piranha\\\");\\n\\n    if (totalPiranhaEarned < MAXIMUM_GLOBAL_PIRANHA) {\\n      reward = (time - stake.time) * CROCODILE_EARNING_RATE;\\n    } \\n    else if (stake.time <= lastClaimTimestamp) {\\n      reward = (lastClaimTimestamp - stake.time) * CROCODILE_EARNING_RATE;\\n    }\\n    bool burn = false;\\n    if (unstake) {\\n      \\n      uint8 dilemma = crocodileNFT.getTraits(tokenId).dilemma;\\n      uint16 randToken = _randomCrocodilebirdToken(seed);\\n      if(dilemma==1){ // for Cooperate\\n        totalStakedCooperate -= 1;\\n        crocodileNFT.setDilemma(tokenId, 0);\\n        if(randToken>0){\\n          if(crocodileNFT.getTraits(randToken).dilemma==2){\\n            reward = 0;\\n          }\\n        }\\n        \\n      }\\n      else if(dilemma==2){ // for Betray\\n        totalStakedBetray -= 1;\\n        crocodileNFT.setDilemma(tokenId, 0);\\n        if(randToken>0){\\n          if(crocodileNFT.getTraits(randToken).dilemma==1){\\n            reward *= 2;\\n          }\\n          else if(crocodileNFT.getTraits(randToken).dilemma==2){\\n            reward = 0;\\n\\n            if(crocodileNFT.getTraits(tokenId).karmaM == 2){\\n              seed >>= 64;\\n              if( seed%1001 < 309){\\n                burn=true;\\n              } \\n            }else if(crocodileNFT.getTraits(tokenId).karmaM == 3){\\n              seed >>= 64;\\n              if( seed%1001 < 500){\\n                burn=true;\\n              } \\n            }else if(crocodileNFT.getTraits(tokenId).karmaM == 4){\\n              seed >>= 64;\\n              if( seed%1001 < 691){\\n                burn=true;\\n              } \\n            }else if(crocodileNFT.getTraits(tokenId).karmaM == 5){\\n              seed >>= 64;\\n              if( seed%1001 < 841){\\n                burn=true;\\n              } \\n            }else if(crocodileNFT.getTraits(tokenId).karmaM == 6){\\n              seed >>= 64;\\n              if( seed%1001 < 933){\\n                burn=true;\\n              } \\n            }else if(crocodileNFT.getTraits(tokenId).karmaM == 7){\\n              seed >>= 64;\\n              if( seed%1001 < 977){\\n                burn=true;\\n              } \\n            }else if(crocodileNFT.getTraits(tokenId).karmaM == 8){\\n              seed >>= 64;\\n              if( seed%1001 < 993){\\n                burn=true;\\n              } \\n            }else if(crocodileNFT.getTraits(tokenId).karmaM == 9){\\n              seed >>= 64;\\n              if( seed%1001 < 997){\\n                burn=true;\\n              } \\n            }else if(crocodileNFT.getTraits(tokenId).karmaM >= 10){ \\n              burn = true;\\n            }\\n          }\\n          if(burn) {crocodileNFT.burn(tokenId);}\\n        }\\n      }\\n      TimeStake memory lastStake = crocodileStakeByToken[crocodileStakeByToken.length - 1];\\n      crocodileStakeByToken[crocodileHierarchy[tokenId]] = lastStake; \\n      crocodileHierarchy[lastStake.tokenId] = crocodileHierarchy[tokenId];\\n      crocodileStakeByToken.pop(); \\n      delete crocodileHierarchy[tokenId]; \\n\\n      totalCrocodilesStaked -= 1;\\n      _stakedTokens[stake.owner].remove(tokenId); \\n\\n\\n      if(!burn) crocodileNFT.safeTransferFrom(address(this), msg.sender, tokenId, \\\"\\\");\\n    } \\n    else {\\n      reward = reward / 2;      \\n      crocodileStakeByToken[crocodileHierarchy[tokenId]] = TimeStake({\\n        owner: msg.sender,\\n        tokenId: tokenId,\\n        time: time\\n      });\\n    }\\n    emit TokenUnstaked(\\\"CROCODILE\\\", tokenId, stake.owner, reward);\\n  }\\n\\n\\n  function _claimCrocodilebirdsFromNest(uint16 tokenId, bool unstake, uint48 time, uint256 seed) internal returns (uint128 reward) {\\n\\n    TimeStake memory stake = crocodilebirdStakeByToken[crocodileHierarchy[tokenId]];\\n    require(stake.owner == msg.sender, \\\"only token owners can unstake\\\");\\n    require(!(unstake && block.timestamp - stake.time < MINIMUM_TO_EXIT), \\\"crocodile birds need 1 days of piranha\\\");\\n\\n    if (totalPiranhaEarned < MAXIMUM_GLOBAL_PIRANHA) {\\n      reward = (time - stake.time) * CROCODILEBIRD_EARNING_RATE;\\n    } \\n    else if (stake.time <= lastClaimTimestamp) {\\n      reward = (lastClaimTimestamp - stake.time) * CROCODILEBIRD_EARNING_RATE;\\n    }\\n    bool burn = false;\\n    if (unstake) {\\n      uint8 dilemma = crocodileNFT.getTraits(tokenId).dilemma;\\n      uint16 randToken = _randomCrocodileToken(seed);\\n      if(dilemma==1){ // for COOPERATE\\n        totalStakedCooperate -= 1;\\n        crocodileNFT.setDilemma(tokenId, 0);\\n        if(randToken>0){\\n          if(crocodileNFT.getTraits(randToken).dilemma==2){\\n            reward = 0;\\n          }\\n        }\\n        \\n      }\\n      else if(dilemma==2){ // for BETRAY\\n        totalStakedBetray -= 1;\\n        crocodileNFT.setDilemma(tokenId, 0);\\n        if(randToken>0){\\n          if(crocodileNFT.getTraits(randToken).dilemma==1){\\n            reward *= 2;\\n          }\\n          else if(crocodileNFT.getTraits(randToken).dilemma==2){\\n            reward = 0;\\n\\n          /* karma ++ */\\n            if(crocodileNFT.getTraits(tokenId).karmaM == 2){\\n              seed >>= 64;\\n              if( seed%1001 < 309){\\n                burn=true;\\n              } \\n            }else if(crocodileNFT.getTraits(tokenId).karmaM == 3){\\n              seed >>= 64;\\n              if( seed%1001 < 500){\\n                burn=true;\\n              } \\n            }else if(crocodileNFT.getTraits(tokenId).karmaM == 4){\\n              seed >>= 64;\\n              if( seed%1001 < 691){\\n                burn=true;\\n              } \\n            }else if(crocodileNFT.getTraits(tokenId).karmaM == 5){\\n              seed >>= 64;\\n              if( seed%1001 < 841){\\n                burn=true;\\n              } \\n            }else if(crocodileNFT.getTraits(tokenId).karmaM == 6){\\n              seed >>= 64;\\n              if( seed%1001 < 933){\\n                burn=true;\\n              } \\n            }else if(crocodileNFT.getTraits(tokenId).karmaM == 7){\\n              seed >>= 64;\\n              if( seed%1001 < 977){\\n                burn=true;\\n              } \\n            }else if(crocodileNFT.getTraits(tokenId).karmaM == 8){\\n              seed >>= 64;\\n              if( seed%1001 < 993){\\n                burn=true;\\n              } \\n            }else if(crocodileNFT.getTraits(tokenId).karmaM == 9){\\n              seed >>= 64;\\n              if( seed%1001 < 997){\\n                burn=true;\\n              } \\n            }else if(crocodileNFT.getTraits(tokenId).karmaM >= 10){ \\n              burn = true;\\n            }\\n          }\\n          if(burn) {crocodileNFT.burn(tokenId);}\\n        }\\n      }\\n      TimeStake memory lastStake = crocodilebirdStakeByToken[crocodilebirdStakeByToken.length - 1];\\n      crocodilebirdStakeByToken[crocodilebirdHierarchy[tokenId]] = lastStake; \\n      crocodilebirdHierarchy[lastStake.tokenId] = crocodilebirdHierarchy[tokenId];\\n      crocodilebirdStakeByToken.pop();\\n      delete crocodilebirdHierarchy[tokenId]; \\n\\n      totalCrocodilebirdsStaked -= 1;\\n      _stakedTokens[stake.owner].remove(tokenId);\\n\\n\\n      if(!burn) crocodileNFT.safeTransferFrom(address(this), msg.sender, tokenId, \\\"\\\");\\n    } else {\\n      reward = reward / 2;\\n      crocodilebirdStakeByToken[crocodilebirdHierarchy[tokenId]] = TimeStake({\\n        owner: msg.sender,\\n        tokenId: tokenId,\\n        time: time\\n      });\\n    }\\n\\n    emit TokenUnstaked(\\\"CROCODILEBIRD\\\", tokenId, stake.owner, reward);\\n  }\\n\\n\\n  modifier _updateEarnings() {\\n    if (totalPiranhaEarned < MAXIMUM_GLOBAL_PIRANHA) {\\n      uint48 time = uint48(block.timestamp);\\n      uint48 elapsed = time - lastClaimTimestamp;\\n      totalPiranhaEarned +=\\n        (elapsed * totalCrocodilesStaked * CROCODILE_EARNING_RATE) +\\n        (elapsed * totalCrocodilebirdsStaked * CROCODILEBIRD_EARNING_RATE);\\n      lastClaimTimestamp = time;\\n    }\\n    _;\\n  }\\n\\n  function randomKarmaOwner(uint256 seed) external view returns (address) {\\n    if (karmaStakeLength == 0) {\\n      return address(0x0); // use 0x0 to return to msg.sender\\n    }\\n    seed >>= 32;\\n    return karmaStake[seed % karmaStakeLength].owner;\\n  }\\n\\n  function _randomCrocodileToken(uint256 seed) internal view returns (uint16) {\\n    if (totalCrocodilesStaked == 0) {\\n      return 0; \\n    }\\n    seed >>= 32;\\n    return crocodileStakeByToken[seed % crocodileStakeByToken.length].tokenId;\\n  }\\n\\n  function _randomCrocodilebirdToken(uint256 seed) internal view returns (uint16) {\\n    if (totalCrocodilebirdsStaked == 0) {\\n      return 0; \\n    }\\n    seed >>= 32;\\n    return crocodilebirdStakeByToken[seed % crocodilebirdStakeByToken.length].tokenId;\\n  }\\n\\n  function depositsOf(address account) external view returns (uint16[] memory) {\\n    EnumerableSetUpgradeable.UintSet storage depositSet = _stakedTokens[account];\\n    uint16[] memory tokenIds = new uint16[] (depositSet.length());\\n\\n    for (uint16 i; i < depositSet.length(); i++) {\\n      tokenIds[i] = uint16(depositSet.at(i));\\n    }\\n\\n    return tokenIds;\\n  }\\n\\n  function togglePaused() external onlyOwner {\\n    if (paused()) {\\n      _unpause();\\n    } else {\\n      _pause();\\n    }\\n  }\\n\\n  function setNFTContract(address _address) external onlyOwner {\\n    crocodileNFT = ICrocodileGameNFT(_address);\\n  }\\n\\n\\n  function setPiranhaContract(address _address) external onlyOwner {\\n    crocodilePiranha = ICrocodileGamePiranha(_address);\\n  }\\n\\n  function setWARDERContract(address _address) external onlyOwner {\\n    crocodileWARDER = ICrocodileGameWARDER(_address);\\n    isWARDER = true;\\n  }\\n\\n  function onERC721Received(address, address from, uint256, bytes calldata) external pure override returns (bytes4) {    \\n    require(from == address(0x0), \\\"only allow directly from mint\\\");\\n    return IERC721ReceiverUpgradeable.onERC721Received.selector;\\n  }\\n}\"\r\n    },\r\n    \"OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"ContextUpgradeable.sol\\\";\\nimport \\\"Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\"\r\n    },\r\n    \"ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\"\r\n    },\r\n    \"Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"ContextUpgradeable.sol\\\";\\nimport \\\"Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\"\r\n    },\r\n    \"ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\"\r\n    },\r\n    \"IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\"\r\n    },\r\n    \"ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\"\r\n    },\r\n    \"EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\"\r\n    },\r\n    \"ICrocodileGame.sol\": {\r\n      \"content\": \"/*\\n ██████╗██████╗  ██████╗  ██████╗ ██████╗ ██████╗ ██╗██╗     ███████╗     ██████╗  █████╗ ███╗   ███╗███████╗\\n██╔════╝██╔══██╗██╔═══██╗██╔════╝██╔═══██╗██╔══██╗██║██║     ██╔════╝    ██╔════╝ ██╔══██╗████╗ ████║██╔════╝\\n██║     ██████╔╝██║   ██║██║     ██║   ██║██║  ██║██║██║     █████╗      ██║  ███╗███████║██╔████╔██║█████╗  \\n██║     ██╔══██╗██║   ██║██║     ██║   ██║██║  ██║██║██║     ██╔══╝      ██║   ██║██╔══██║██║╚██╔╝██║██╔══╝  \\n╚██████╗██║  ██║╚██████╔╝╚██████╗╚██████╔╝██████╔╝██║███████╗███████╗    ╚██████╔╝██║  ██║██║ ╚═╝ ██║███████╗\\n ╚═════╝╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═════╝ ╚═════╝ ╚═╝╚══════╝╚══════╝     ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface ICrocodileGame {\\n  function stakeTokens(address, uint16[] calldata, uint8[] calldata) external;\\n  //function randomFoxOwner(uint256) external view returns (address);\\n  function randomKarmaOwner(uint256) external view returns (address);\\n  //function isValidSignature(address, bool, uint48, uint256, bytes memory) external view returns (bool);\\n}\"\r\n    },\r\n    \"ICrocodileGamePiranha.sol\": {\r\n      \"content\": \"/*\\n ██████╗██████╗  ██████╗  ██████╗ ██████╗ ██████╗ ██╗██╗     ███████╗     ██████╗  █████╗ ███╗   ███╗███████╗\\n██╔════╝██╔══██╗██╔═══██╗██╔════╝██╔═══██╗██╔══██╗██║██║     ██╔════╝    ██╔════╝ ██╔══██╗████╗ ████║██╔════╝\\n██║     ██████╔╝██║   ██║██║     ██║   ██║██║  ██║██║██║     █████╗      ██║  ███╗███████║██╔████╔██║█████╗  \\n██║     ██╔══██╗██║   ██║██║     ██║   ██║██║  ██║██║██║     ██╔══╝      ██║   ██║██╔══██║██║╚██╔╝██║██╔══╝  \\n╚██████╗██║  ██║╚██████╔╝╚██████╗╚██████╔╝██████╔╝██║███████╗███████╗    ╚██████╔╝██║  ██║██║ ╚═╝ ██║███████╗\\n ╚═════╝╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═════╝ ╚═════╝ ╚═╝╚══════╝╚══════╝     ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface ICrocodileGamePiranha {\\n  function mint(address to, uint256 amount) external;\\n  function burn(address from, uint256 amount) external;\\n}\"\r\n    },\r\n    \"ICrocodileGameNFT.sol\": {\r\n      \"content\": \"/*\\n ██████╗██████╗  ██████╗  ██████╗ ██████╗ ██████╗ ██╗██╗     ███████╗     ██████╗  █████╗ ███╗   ███╗███████╗\\n██╔════╝██╔══██╗██╔═══██╗██╔════╝██╔═══██╗██╔══██╗██║██║     ██╔════╝    ██╔════╝ ██╔══██╗████╗ ████║██╔════╝\\n██║     ██████╔╝██║   ██║██║     ██║   ██║██║  ██║██║██║     █████╗      ██║  ███╗███████║██╔████╔██║█████╗  \\n██║     ██╔══██╗██║   ██║██║     ██║   ██║██║  ██║██║██║     ██╔══╝      ██║   ██║██╔══██║██║╚██╔╝██║██╔══╝  \\n╚██████╗██║  ██║╚██████╔╝╚██████╗╚██████╔╝██████╔╝██║███████╗███████╗    ╚██████╔╝██║  ██║██║ ╚═╝ ██║███████╗\\n ╚═════╝╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═════╝ ╚═════╝ ╚═╝╚══════╝╚══════╝     ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface ICrocodileGameNFT {\\n  struct Traits {uint8 kind; uint8 dilemma; uint8 karmaP; uint8 karmaM; string traits;}\\n  function getMaxGEN0Players() external pure returns (uint16);\\n  function getTraits(uint16) external view returns (Traits memory);\\n  function setDilemma(uint16, uint8) external;\\n  function setKarmaP(uint16, uint8) external;\\n  function setKarmaM(uint16, uint8) external;\\n  function ownerOf(uint256) external view returns (address owner);\\n  function transferFrom(address, address, uint256) external;\\n  function safeTransferFrom(address, address, uint256, bytes memory) external;\\n  function burn(uint16) external;\\n}\"\r\n    },\r\n    \"ICrocodileGameWARDER.sol\": {\r\n      \"content\": \"/*\\n ██████╗██████╗  ██████╗  ██████╗ ██████╗ ██████╗ ██╗██╗     ███████╗     ██████╗  █████╗ ███╗   ███╗███████╗\\n██╔════╝██╔══██╗██╔═══██╗██╔════╝██╔═══██╗██╔══██╗██║██║     ██╔════╝    ██╔════╝ ██╔══██╗████╗ ████║██╔════╝\\n██║     ██████╔╝██║   ██║██║     ██║   ██║██║  ██║██║██║     █████╗      ██║  ███╗███████║██╔████╔██║█████╗  \\n██║     ██╔══██╗██║   ██║██║     ██║   ██║██║  ██║██║██║     ██╔══╝      ██║   ██║██╔══██║██║╚██╔╝██║██╔══╝  \\n╚██████╗██║  ██║╚██████╔╝╚██████╗╚██████╔╝██████╔╝██║███████╗███████╗    ╚██████╔╝██║  ██║██║ ╚═╝ ██║███████╗\\n ╚═════╝╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═════╝ ╚═════╝ ╚═╝╚══════╝╚══════╝     ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface ICrocodileGameWARDER {\\n  struct Traits {uint8 kind; uint8 dilemma; uint8 karmaP; uint8 karmaM; string traits;}\\n  function getMaxGEN0Players() external pure returns (uint16);\\n  function getTraits(uint16) external view returns (Traits memory);\\n  function setDilemma(uint16, uint8) external;\\n  function setKarmaP(uint16, uint8) external;\\n  function setKarmaM(uint16, uint8) external;\\n  function ownerOf(uint256) external view returns (address owner);\\n  function isOwner(address) external view returns (bool isOwner);\\n  function transferFrom(address, address, uint256) external;\\n  function safeTransferFrom(address, address, uint256, bytes memory) external;\\n  function burn(uint16) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"kind\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"kind\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"earnings\",\"type\":\"uint128\"}],\"name\":\"TokenUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CROCODILEBIRD_EARNING_RATE\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CROCODILE_EARNING_RATE\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_GLOBAL_PIRANHA\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_TO_EXIT\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"claimRewardsAndUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"crocodileHierarchy\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crocodileStakeByToken\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"time\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"crocodilebirdHierarchy\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crocodilebirdStakeByToken\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"time\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositsOf\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"karmaHierarchy\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"karmaStake\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"karmaP\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"karmaM\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimTimestamp\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"randomKarmaOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPiranhaContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setWARDERContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint8[]\",\"name\":\"dilemmas\",\"type\":\"uint8[]\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCrocodilebirdsStaked\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCrocodilesStaked\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPiranhaEarned\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedBetray\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedCooperate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CrocodileGame","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}