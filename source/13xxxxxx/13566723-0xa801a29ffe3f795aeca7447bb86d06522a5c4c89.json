{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TAMAGOTCHI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.8.4;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nimport \\\"../scriptsV2/ERC20Ownable.sol\\\";\\nimport \\\"../scriptsV2/IUniswapV2Router02.sol\\\";\\nimport \\\"../scriptsV2/IERC20.sol\\\";\\nimport \\\"../scriptsV2/IUniswapV2Factory.sol\\\";\\nimport \\\"../scriptsV2/contextHelper.sol\\\";\\nimport \\\"../scriptsV2/SafeMath.sol\\\";\\n\\n\\ncontract TAMAGOTCHI is IERC20,Context,ERC20Ownable {\\n    using SafeMath for uint256;\\n    IUniswapV2Router02 private uniswapV2Router;\\n    \\n    \\n    mapping (address => uint256) private _ownAmt;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping (address => bool) private _isBlackListed;\\n    mapping (address => uint) private _setCoolDown;\\n    mapping (address => bool) private _noFeeList;\\n\\n    address payable private _taxWallet;\\n    address private uniswapV2Pair;\\n    \\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private constant _tTotal = 1e13 * 10**9;\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n    uint256 private _maxTxAmount = _tTotal;\\n    uint256 private _tFeeTotal;\\n    uint256 private _taxFee1;\\n    uint256 private _taxFee2;\\n    \\n    \\n    bool private OpenTrades;\\n    bool private inSwap = false;\\n    bool private enableSwap = false;\\n    bool private coolDownEnabled = false;\\n\\n    \\n    event MaxTxAmountUpdated(uint _maxTxAmount);\\n    \\n    modifier swapLock {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n    \\n    \\n    \\n    \\n    /*\\n        TOKENS BASIC INFORMATION\\n        -------------------------\\n    **/\\n    \\n    /*\\n        TOKENS BASIC INFORMATION\\n        -------------------------\\n    **/\\n    string private constant _name = \\\"TAMAGOTCHI\\\";\\n    string private constant _symbol = \\\"TAMAGOTCHI\\\";\\n    uint8 private constant _decimal = 9;\\n    \\n    /*\\n        TOKENS CONSTRUCTOR\\n        ------------------\\n    **/\\n    \\n    //--------------------------------------------\\n    \\n    constructor () {\\n        _taxWallet = payable(0xeCDf73112EEDa071f330235309A58F7b54144313);\\n        _ownAmt[_msgSender()] = _rTotal;\\n        _noFeeList[owner()] = true;\\n        _noFeeList[address(this)] = true;\\n        _noFeeList[_taxWallet] = true;\\n        \\n        \\n\\n        \\n        \\n        \\n        \\n        \\n        /*\\n            BLACK LIST OF BOTS\\n            ------------------\\n        **/\\n        \\n        blackList(0x91B305F0890Fd0534B66D8d479da6529C35A3eeC);\\n        \\n    \\n    \\n    \\n    \\n    \\n    \\n        /*\\n            BLACK LIST OF BOTS\\n            ------------------\\n        **/\\n        \\n        \\n        \\n        \\n        /*IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        uniswapV2Router = _uniswapV2Router;\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\n        //uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\\n        enableSwap = true;\\n        coolDownEnabled = true;\\n        _maxTxAmount = 5e15 * 10**9;\\n        OpenTrades = true;\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\n        */\\n        \\n        \\n        /*\\n            BLACK LIST OF BOTS\\n            ------------------\\n        **/\\n    \\n        /*\\n            BLACK LIST OF BOTS\\n            ------------------\\n        **/\\n        openTrading();\\n        emit Transfer(address(0), address(this), _tTotal);\\n    }\\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    receive() external payable {}\\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    function decimals() public pure returns (uint8) {\\n        return _decimal;\\n    }\\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    function totalSupply() public pure override returns (uint256) {\\n        return _tTotal;\\n    }\\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    function balanceOf(address account) public view override returns (uint256) {\\n        return tokenReflection(_ownAmt[account]);\\n    }\\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    function setCooldownEnabled(bool onoff) external onlyOwner() {\\n        coolDownEnabled = onoff;\\n    }\\n    \\n\\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n   function blackList(address _user) public onlyOwner {\\n        require(!_isBlackListed[_user], \\\"user already blacklisted\\\");\\n        _isBlackListed[_user] = true;\\n    }\\n\\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    function removeFromBlacklist(address _user) public onlyOwner {\\n        require(_isBlackListed[_user], \\\"user already whitelisted\\\");\\n        _isBlackListed[_user] = false;\\n    }\\n    \\n    \\n\\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    function tokenReflection(uint256 rAmount) private view returns(uint256) {\\n        require(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\n        uint256 currentRate =  _getRate();\\n        return rAmount.div(currentRate);\\n    }\\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n    \\n    \\n    \\n    \\n    \\n    \\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        _taxFee1 = 2;\\n        _taxFee2 = 8;\\n        if (from != owner() && to != owner()) {\\n            require(!_isBlackListed[to] && !_isBlackListed[from]);\\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _noFeeList[to] && coolDownEnabled) {\\n                // Cooldown\\n                require(amount <= _maxTxAmount);\\n                require(_setCoolDown[to] < block.timestamp);\\n                _setCoolDown[to] = block.timestamp + (30 seconds);\\n            }\\n            if (to == uniswapV2Pair && from != address(uniswapV2Router) && ! _noFeeList[from]) {\\n                _taxFee1 = 2;\\n                _taxFee2 = 8;\\n            }\\n            uint256 contractTokenBalance = balanceOf(address(this));\\n            if (!inSwap && from != uniswapV2Pair && enableSwap) {\\n                swapTokensForETH(contractTokenBalance);\\n                uint256 contractETHBalance = address(this).balance;\\n                if(contractETHBalance > 0) {\\n                    sendTax(address(this).balance);\\n                }\\n            }\\n        }\\n        _tokenTransfer(from,to,amount);\\n    }\\n    \\n \\n    \\n    \\n    \\n    \\n    function openTrading() public onlyOwner() {\\n        require(!OpenTrades,\\\"trading is already open\\\");\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        uniswapV2Router = _uniswapV2Router;\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\n        //uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\\n        enableSwap = true;\\n        coolDownEnabled = true;\\n        _maxTxAmount = 1e13 * 10**9;\\n        OpenTrades = true;\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\n    }\\n    \\n    \\n    \\n    \\n    \\n    function _tokenTransfer(address sender, address recipient, uint256 amount) private {\\n        _transferStandard(sender, recipient, amount);\\n    }\\n    \\n    \\n    \\n    \\n    \\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTax) = _getValues(tAmount);\\n        _ownAmt[sender] = _ownAmt[sender].sub(rAmount);\\n        _ownAmt[recipient] = _ownAmt[recipient].add(rTransferAmount); \\n        _takeTax(tTax);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n    \\n    \\n    \\n    \\n    \\n    function sendTax(uint256 amount) private {\\n        _taxWallet.transfer(amount.div(2));\\n        _taxWallet.transfer(amount.div(2));\\n    }\\n\\n    \\n    \\n    \\n    function swapTokensForETH(uint256 tokenAmount) private swapLock {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n    \\n    \\n    \\n    \\n    \\n    function _takeTax(uint256 tTax) private {\\n        uint256 currentRate =  _getRate();\\n        uint256 rTax = tTax.mul(currentRate);\\n        _ownAmt[address(this)] = _ownAmt[address(this)].add(rTax);\\n    }\\n    \\n    \\n    \\n    \\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal.sub(rFee);\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\n    }\\n    \\n\\n    \\n    \\n    \\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTax) = _getTValues(tAmount, _taxFee1, _taxFee2);\\n        uint256 currentRate =  _getRate();\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTax, currentRate);\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTax);\\n    }\\n    \\n    \\n    \\n    \\n    \\n    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 liqTax) private pure returns (uint256, uint256, uint256) {\\n        uint256 tFee = tAmount.mul(taxFee).div(100);\\n        uint256 tTax = tAmount.mul(liqTax).div(100);\\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTax);\\n        return (tTransferAmount, tFee, tTax);\\n    }\\n    \\n    \\n    \\n    \\n    \\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTax, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\\n        uint256 rAmount = tAmount.mul(currentRate);\\n        uint256 rFee = tFee.mul(currentRate);\\n        uint256 rTax = tTax.mul(currentRate);\\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTax);\\n        return (rAmount, rTransferAmount, rFee);\\n    }\\n    \\n\\n    \\n    \\n    \\n    \\n\\tfunction _getRate() private view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n    \\n   \\n    \\n    \\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;      \\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n}\"\r\n    },\r\n    \"scriptsV2/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.8.4;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n}\"\r\n    },\r\n    \"scriptsV2/contextHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.8.4;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\"\r\n    },\r\n    \"scriptsV2/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\"\r\n    },\r\n    \"scriptsV2/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.8.4;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"scriptsV2/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\"\r\n    },\r\n    \"scriptsV2/ERC20Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../scriptsV2/contextHelper.sol\\\";\\n\\ncontract ERC20Ownable is Context {\\n    address private _owner;\\n    address private _previousOwner;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n}  \"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TAMAGOTCHI","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}