{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/YoloAlpha.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"./YoloInterfaces.sol\\\";\\n\\n/**\\n  Manages the state of the Yolo Games Universe.\\n */\\n\\ncontract YoloAlpha is Ownable, Pausable {\\n\\n    event YoloGamertagUpdate(address indexed account, string gamertag);\\n    event YoloClantagUpdate(address indexed account, string clantag);\\n    event YoloProfilePicUpdate(address indexed account, string pfp);\\n\\n    struct Player {\\n      string gamertag;\\n      string clantag;\\n      string pfp;\\n    }\\n\\n    mapping (address => string) public gamertags;\\n    mapping (address => string) public clantags;\\n    mapping (address => string) public pfps;\\n\\n    mapping (string => address) public gamertagToPlayer;\\n\\n    uint public gamertagFee = 10 ether;\\n    uint public clantagFee = 10 ether;\\n    uint public pfpFee = 20 ether;\\n\\n    uint16 public gamertagMaxLength = 80;\\n    uint16 public clantagMaxLength = 32;\\n\\n    IYoloDice public diceV1;\\n    IYoloChips public chips;\\n\\n    constructor(address _diceV1, address _chips) {\\n        diceV1 = IYoloDice(_diceV1);\\n        chips = IYoloChips(_chips);\\n    }\\n\\n    // Pausable.\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    // Setters.\\n\\n    function setDiceV1(address _diceV1) external onlyOwner {\\n        diceV1 = IYoloDice(_diceV1);\\n    }\\n\\n    function setChips(address _chips) external onlyOwner {\\n        chips = IYoloChips(_chips);\\n    }\\n\\n    function setGamertagFee(uint256 _fee) external onlyOwner {\\n        gamertagFee = _fee;\\n    }\\n\\n    function setClantagFee(uint256 _fee) external onlyOwner {\\n        clantagFee = _fee;\\n    }\\n\\n    function setPfpFee(uint256 _fee) external onlyOwner {\\n        pfpFee = _fee;\\n    }\\n\\n    function setGamertagMaxLength(uint16 _length) external onlyOwner {\\n        gamertagMaxLength = _length;\\n    }\\n\\n    function setClantagMaxLength(uint16 _length) external onlyOwner {\\n        clantagMaxLength = _length;\\n    }\\n\\n    // Dashboard functionality.\\n\\n    /// @notice Returns token IDs of V1 Dice owned by the address.\\n    function getV1Dice(address _address) public view returns (uint256[] memory) {\\n        uint balance = diceV1.balanceOf(_address);\\n\\n        uint256[] memory diceIds = new uint256[](balance);\\n        for (uint256 idx = 0; idx < balance; idx++) {\\n            diceIds[idx] = diceV1.tokenOfOwnerByIndex(_address, idx);\\n        }\\n\\n        return diceIds;\\n    }\\n\\n    /// @notice Returns the profile of the given address.\\n    function getProfile(address _address) public view returns (Player memory) {\\n        return Player(getGamertag(_address), getClantag(_address), getPfp(_address));\\n    }\\n\\n    /// @notice Returns the full profile for the player with the given gamertag.\\n    function getProfileForTag(string memory _gamertag) public view returns (Player memory) {\\n        address playerAddress = gamertagToPlayer[_gamertag];\\n        if (playerAddress == address(0x0)) {\\n            return Player(\\\"\\\", \\\"\\\", \\\"\\\");\\n        }\\n\\n        return Player(\\n            getGamertag(playerAddress),\\n            getClantag(playerAddress),\\n            getPfp(playerAddress)\\n        );\\n    }\\n\\n    function getGamertag(address _address) public view returns (string memory) {\\n        return gamertags[_address];\\n    }\\n\\n    function setGamertag(string memory _gamertag) public whenNotPaused {\\n        // Max length.\\n        require(bytes(_gamertag).length <= gamertagMaxLength, \\\"Yolo Alpha: Gamertag too long\\\");\\n        \\n        // Ensure unique.\\n        require(!_isGamertagTaken(_gamertag), \\\"Yolo Alpha: Gamertag is taken\\\");\\n\\n        chips.spend(msg.sender, gamertagFee);\\n        gamertags[msg.sender] = _gamertag;\\n\\n        emit YoloGamertagUpdate(msg.sender, _gamertag);\\n    }\\n\\n    function getClantag(address _address) public view returns (string memory) {\\n        return clantags[_address];\\n    }\\n\\n    function setClantag(string memory _clantag) public whenNotPaused {\\n        // Max length.\\n        require(bytes(_clantag).length <= clantagMaxLength, \\\"Yolo Alpha: Clantag too long\\\");\\n\\n        chips.spend(msg.sender, clantagFee);\\n        clantags[msg.sender] = _clantag;\\n\\n        emit YoloClantagUpdate(msg.sender, _clantag);\\n    }\\n\\n    function getPfp(address _address) public view returns (string memory) {\\n        return pfps[_address];\\n    }\\n\\n    function setPfp(string memory _pfp) public whenNotPaused {\\n        chips.spend(msg.sender, pfpFee);\\n        pfps[msg.sender] = _pfp;\\n\\n        emit YoloProfilePicUpdate(msg.sender, _pfp);\\n    }\\n\\n    // Helpers.\\n\\n    function _isGamertagTaken(string memory _gamertag) internal view returns (bool) {\\n        return gamertagToPlayer[_gamertag] != address(0x0);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/YoloInterfaces.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IYoloDice {\\n    /// @notice IERC721, returns owner of token.\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n    /// @notice IERC721, returns number of tokens owned.\\n    function balanceOf(address owner) external view returns (uint256);\\n    /// @notice IERC721, returns total number of tokens created.\\n    function totalSupply() external view returns (uint256);\\n    /// @notice IERC721Enumerable, returns token ID.\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n}\\n\\ninterface IYoloChips {\\n    /// @notice IERC20, returns number of tokens owned.\\n    function balanceOf(address account) external view returns (uint256);\\n    /// @notice Burns chips from whitelisted contracts.\\n    function spend(address account, uint256 amount) external;\\n    /// @notice Performs accounting before properties are transferred.\\n    function updateOwnership(address _from, address _to) external;\\n}\\n\\ninterface IYoloBoardDeed {\\n    /// @notice IERC721, returns number of tokens owned.\\n    function balanceOf(address owner) external view returns (uint256);\\n    /// @notice IERC721Enumerable, returns token ID.\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n    /// @notice Returns yield of the given token.\\n    function yieldRate(uint256 tokenId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_diceV1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chips\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"clantag\",\"type\":\"string\"}],\"name\":\"YoloClantagUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gamertag\",\"type\":\"string\"}],\"name\":\"YoloGamertagUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pfp\",\"type\":\"string\"}],\"name\":\"YoloProfilePicUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chips\",\"outputs\":[{\"internalType\":\"contract IYoloChips\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clantagFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clantagMaxLength\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"clantags\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diceV1\",\"outputs\":[{\"internalType\":\"contract IYoloDice\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamertagFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamertagMaxLength\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"gamertagToPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gamertags\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getClantag\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getGamertag\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPfp\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getProfile\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"gamertag\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"clantag\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pfp\",\"type\":\"string\"}],\"internalType\":\"struct YoloAlpha.Player\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_gamertag\",\"type\":\"string\"}],\"name\":\"getProfileForTag\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"gamertag\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"clantag\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pfp\",\"type\":\"string\"}],\"internalType\":\"struct YoloAlpha.Player\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getV1Dice\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pfpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pfps\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chips\",\"type\":\"address\"}],\"name\":\"setChips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_clantag\",\"type\":\"string\"}],\"name\":\"setClantag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setClantagFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_length\",\"type\":\"uint16\"}],\"name\":\"setClantagMaxLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_diceV1\",\"type\":\"address\"}],\"name\":\"setDiceV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_gamertag\",\"type\":\"string\"}],\"name\":\"setGamertag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setGamertagFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_length\",\"type\":\"uint16\"}],\"name\":\"setGamertagMaxLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pfp\",\"type\":\"string\"}],\"name\":\"setPfp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setPfpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"YoloAlpha","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000061e6494d934b594d0634f292e13846639b6f1927000000000000000000000000ee85b038f1a690fdb56d6efa359d6231ff88a230","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}