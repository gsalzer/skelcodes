{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NFTFloorMarket.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\n//Written by Cybourgeoisie\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IRoyaltyEngineV1.sol\\\";\\n\\ncontract NFTFloorMarket is ReentrancyGuard, Ownable {\\n\\n    // Events\\n    event OfferPlaced(\\n        uint256 _offerId,\\n        address indexed _contract,\\n        address _offerer,\\n        uint256 _value\\n    );\\n\\n    event OfferWithdrawn(\\n        uint256 _offerId,\\n        address indexed _contract,\\n        address _offerer,\\n        uint256 _value\\n    );\\n\\n    event OfferAccepted(\\n        uint256 _offerId,\\n        address indexed _contract,\\n        address _offerer,\\n        address _seller,\\n        uint256 _tokenId,\\n        uint256 _value\\n    );\\n\\n\\n    // Offer Structure\\n    struct Offer {\\n        address _contract;\\n        address _offerer;\\n        uint256 _value;\\n        uint128 _contractListIndex; // This and the following are 128 to make use of bitpacking on the struct\\n        uint128 _offererListIndex;\\n    }\\n\\n    // Offer Details Structure\\n    struct OfferDetails {\\n        uint256 _offerId;\\n        address _contract;\\n        address _offerer;\\n        uint256 _value;\\n    }\\n\\n\\n    // Keep track of latest offer ID\\n    uint256 public lastOfferId = 0;\\n\\n    // Keep track of all offers\\n    mapping(uint256 => Offer) public offers;\\n\\n    // Keep track of offer IDs per contract\\n    mapping(address => uint128[]) public offersByContract;\\n\\n    // Keep track of offer per offerer address\\n    mapping(address => uint128[]) public offersByOfferer;\\n\\n\\n    // Royalty Fee Address\\n    address public MANIFOLD_ROYALTY_ENGINE;\\n\\n\\n    // Anti-Griefing\\n    uint256 public MINIMUM_BUY_OFFER = 10000000000000000; // 0.01 ETH\\n\\n\\n    /**\\n     * Royalties - lookup for all royalty addresses\\n     **/\\n    function setRoyaltyEngineAddress(address _addr) public onlyOwner {\\n        MANIFOLD_ROYALTY_ENGINE = _addr;\\n    }\\n\\n    /**\\n     * Set the minimum buy order amount - anti-griefing mechanic\\n     **/\\n    function setMinimumBuyOffer(uint256 _minValue) public onlyOwner {\\n        MINIMUM_BUY_OFFER = _minValue;\\n    }\\n\\n\\n    /**\\n     * Constructor\\n     **/\\n    constructor(\\n        address _MANIFOLD_ROYALTY_ENGINE,\\n        uint256 _MINIMUM_BUY_OFFER\\n    ) {\\n        setRoyaltyEngineAddress(_MANIFOLD_ROYALTY_ENGINE);\\n        setMinimumBuyOffer(_MINIMUM_BUY_OFFER);\\n    }\\n\\n\\n    /**\\n     * Wrapper to get all royalties for a given contract + tokenId at a given value\\n     **/\\n    function getRoyalties(\\n        address _contract,\\n        uint256 _tokenId,\\n        uint256 _value\\n    )\\n        public\\n        view\\n        returns (\\n            address payable[] memory recipients,\\n            uint256[] memory amounts\\n        )\\n    {\\n        if (MANIFOLD_ROYALTY_ENGINE != address(0)) {\\n            try IRoyaltyEngineV1(MANIFOLD_ROYALTY_ENGINE).getRoyaltyView(_contract, _tokenId, _value) returns(address payable[] memory _recipients, uint256[] memory _amounts) {\\n                return (_recipients, _amounts);\\n            } catch {}\\n        }\\n    }\\n\\n\\n    /**\\n     * Make an offer on any NFT within a contract\\n     **/\\n    function makeOffer(\\n        address _contract\\n    )\\n        public\\n        payable\\n        nonReentrant\\n    {\\n        // Require that the contract is a valid ERC721 token\\n        require(IERC721(_contract).supportsInterface(0x80ac58cd), \\\"Not a valid ERC-721 Contract\\\");\\n        require(msg.value >= MINIMUM_BUY_OFFER, \\\"Buy order too low\\\");\\n\\n        // Store the records\\n        offers[lastOfferId] = Offer(\\n            _contract,\\n            msg.sender,\\n            msg.value,\\n            uint128(offersByContract[_contract].length),\\n            uint128(offersByOfferer[msg.sender].length)\\n        );\\n        offersByContract[_contract].push(uint128(lastOfferId));\\n        offersByOfferer[msg.sender].push(uint128(lastOfferId));\\n\\n        // On to the next offer ID\\n        lastOfferId += 1;\\n\\n        // Announce offer placed\\n        emit OfferPlaced(lastOfferId, _contract, msg.sender, msg.value);\\n    }\\n\\n\\n    /**\\n     * Withdraw an offer on any NFT within a contract\\n     **/\\n    function withdrawOffer(\\n        uint256 _offerId\\n    )\\n        public\\n        nonReentrant\\n    {\\n        // Get the offer\\n        Offer memory _offer = offers[_offerId];\\n\\n        // Make sure that the sender is the owner of the offer ID\\n        require(_offer._offerer == msg.sender, \\\"Sender does not own offer\\\");\\n\\n        // Remove the offer\\n        _removeOffer(_offer, _offerId);\\n\\n        // Send the value back to the offerer\\n        msg.sender.call{value: _offer._value}('');\\n\\n        // Announce offer withdrawn\\n        emit OfferWithdrawn(_offerId, _offer._contract, msg.sender, _offer._value);\\n    }\\n\\n\\n    /**\\n     * Take an offer on any NFT within a contract\\n     **/\\n    function takeOffer(\\n        uint256 _offerId,\\n        uint256 _tokenId\\n    )\\n        public\\n        nonReentrant\\n    {\\n        // Get the offer\\n        Offer memory _offer = offers[_offerId];\\n\\n        // Make sure the offer exists\\n        require(_offer._contract != address(0), \\\"Offer does not exist\\\");\\n\\n        // Remove the offer\\n        _removeOffer(_offer, _offerId);\\n\\n        // Transfer NFT to the buyer\\n        IERC721(_offer._contract).safeTransferFrom(msg.sender, _offer._offerer, _tokenId, \\\"\\\");\\n\\n        // Retrieve the royalties here\\n        uint256 totalRoyaltyFee;\\n        (address payable[] memory _recipients, uint256[] memory _amounts) = getRoyalties(_offer._contract, _tokenId, _offer._value);\\n        if (_recipients.length > 0 && _amounts.length > 0 && _amounts.length == _recipients.length) {\\n            for (uint256 idx; idx < _recipients.length; idx++) {\\n                totalRoyaltyFee += _amounts[idx];\\n                _recipients[idx].call{value: _amounts[idx]}('');\\n            }\\n        }\\n\\n        // Split the value among royalties, seller, and market\\n        uint256 sellerValue = _offer._value - totalRoyaltyFee;\\n\\n        // Send the value to the seller\\n        msg.sender.call{value: sellerValue}('');\\n\\n        // Announce offer accepted\\n        emit OfferAccepted(_offerId, _offer._contract, _offer._offerer, msg.sender, _tokenId, _offer._value);\\n    }\\n\\n\\n    /**\\n     * Getters\\n     **/\\n    function getOffersByContractCount(\\n        address _contract\\n    )\\n        public\\n        view\\n        returns (uint256 _length)\\n    {\\n        return offersByContract[_contract].length;\\n    }\\n\\n    function getOffersByContract(\\n        address _contract,\\n        uint256 _limit,\\n        uint256 _offset\\n    )\\n        public\\n        view\\n        returns (OfferDetails[] memory _offers)\\n    {\\n        // Limits & Offers\\n        if (_limit == 0) {\\n            _limit = 1;\\n        }\\n\\n        // Keep track of all offers\\n        _offers = new OfferDetails[](_limit);\\n\\n        // Iterate through offers by contract\\n        uint256 offerIdx;\\n        for (uint256 idx = _offset * _limit; idx < offersByContract[_contract].length && offerIdx < _limit; idx++) {\\n            _offers[offerIdx++] = OfferDetails(\\n                offersByContract[_contract][idx],\\n                offers[offersByContract[_contract][idx]]._contract,\\n                offers[offersByContract[_contract][idx]]._offerer,\\n                offers[offersByContract[_contract][idx]]._value\\n            );\\n        }\\n\\n        return _offers;\\n    }\\n\\n    function getOffersByOffererCount(\\n        address _offerer\\n    )\\n        public\\n        view\\n        returns (uint256 _length)\\n    {\\n        return offersByOfferer[_offerer].length;\\n    }\\n\\n    function getOffersByOfferer(\\n        address _offerer,\\n        uint256 _limit,\\n        uint256 _offset\\n    )\\n        public\\n        view\\n        returns (OfferDetails[] memory _offers)\\n    {\\n        // Limits & Offers\\n        if (_limit == 0) {\\n            _limit = 1;\\n        }\\n\\n        // Keep track of all offers\\n        _offers = new OfferDetails[](_limit);\\n\\n        // Iterate through offers by contract\\n        uint256 offerIdx;\\n        for (uint256 idx = _offset * _limit; idx < offersByOfferer[_offerer].length && offerIdx < _limit; idx++) {\\n            _offers[offerIdx++] = OfferDetails(\\n                offersByOfferer[_offerer][idx],\\n                offers[offersByOfferer[_offerer][idx]]._contract,\\n                offers[offersByOfferer[_offerer][idx]]._offerer,\\n                offers[offersByOfferer[_offerer][idx]]._value\\n            );\\n        }\\n\\n        return _offers;\\n    }\\n\\n\\n    /**\\n     * Internal Helper Functions \\n     **/\\n    function _removeOffer(Offer memory _offer, uint256 _offerId) private {\\n        // Find and remove from the contract list and offerer list\\n        _removeFromContractList(_offer._contract, _offer._contractListIndex);\\n        _removeFromOffererList(_offer._offerer, _offer._offererListIndex);\\n\\n        // Remove the offer\\n        delete offers[_offerId];\\n    }\\n\\n\\n    function _removeFromContractList(address _contract, uint128 index) private {\\n        uint256 _length = offersByContract[_contract].length;\\n\\n        // If this index is less than the last element, then replace this element with the last element\\n        if (index < _length - 1) {\\n            // Get the last offer ID in the list\\n            uint128 otherOfferId = offersByContract[_contract][_length - 1];\\n\\n            // Replace with the last element\\n            offersByContract[_contract][index] = otherOfferId;\\n\\n            // Update the position within offers\\n            offers[otherOfferId]._contractListIndex = index;\\n        }\\n\\n        // Remove the last index\\n        offersByContract[_contract].pop();\\n    }\\n\\n    function _removeFromOffererList(address offerer, uint128 index) private {\\n        uint256 _length = offersByOfferer[offerer].length;\\n\\n        // If this index is less than the last element, then replace this element with the last element\\n        if (index < _length - 1) {\\n            // Get the last offer ID in the list\\n            uint128 otherOfferId = offersByOfferer[offerer][_length - 1];\\n\\n            // Replace with the last element\\n            offersByOfferer[offerer][index] = otherOfferId;\\n\\n            // Update the position within offers\\n            offers[otherOfferId]._offererListIndex = index;\\n        }\\n\\n        // Remove the last index\\n        offersByOfferer[offerer].pop();\\n    }\\n\\n\\n    /**\\n     * Do not accept value sent directly to contract\\n     **/\\n    receive() external payable {\\n        revert(\\\"No value accepted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IRoyaltyEngineV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Lookup engine interface\\n */\\ninterface IRoyaltyEngineV1 is IERC165 {\\n\\n    /**\\n     * Get the royalty for a given token (address, id) and value amount.  Does not cache the bps/amounts.  Caches the spec for a given token address\\n     * \\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyalty(address tokenAddress, uint256 tokenId, uint256 value) external returns(address payable[] memory recipients, uint256[] memory amounts);\\n\\n    /**\\n     * View only version of getRoyalty\\n     * \\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyaltyView(address tokenAddress, uint256 tokenId, uint256 value) external view returns(address payable[] memory recipients, uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_MANIFOLD_ROYALTY_ENGINE\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MINIMUM_BUY_OFFER\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_offerer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"OfferAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_offerer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"OfferPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_offerer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"OfferWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MANIFOLD_ROYALTY_ENGINE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_BUY_OFFER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"getOffersByContract\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_offerer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTFloorMarket.OfferDetails[]\",\"name\":\"_offers\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"getOffersByContractCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offerer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"getOffersByOfferer\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_offerer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTFloorMarket.OfferDetails[]\",\"name\":\"_offers\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offerer\",\"type\":\"address\"}],\"name\":\"getOffersByOffererCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getRoyalties\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastOfferId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"makeOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_offerer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_contractListIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_offererListIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offersByContract\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offersByOfferer\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumBuyOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRoyaltyEngineAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"withdrawOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NFTFloorMarket","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000385603ab55642cb4dd5de3ae9e306809991804f000000000000000000000000000000000000000000000000002386f26fc10000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}