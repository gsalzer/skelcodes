{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: MIT \r\n\r\npragma solidity ^0.8.9;\r\n\r\nlibrary SafeMath {\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b;\trequire(c >= a, \"Addition overflow\"); return c; }\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, \"Subtraction overflow\"); }\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b <= a, errorMessage);\tuint256 c = a - b; return c; }\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, \"Multiplication overflow\"); return c; }\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, \"Division by zero\"); }\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c;\t}\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) { return mod(a, b, \"Modulo by zero\"); }\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b != 0, errorMessage); return a % b; }\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction name() external view returns (string memory);\r\n\tfunction getOwner() external view returns (address);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address _owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n\taddress internal owner;\r\n\tconstructor(address _owner) { owner = _owner; }\r\n\tmodifier onlyOwner() { require(msg.sender == owner, \"Only contract owner can call this function\"); _; }\r\n\tfunction transferOwnership(address payable newOwner) external onlyOwner { owner = newOwner;\temit OwnershipTransferred(newOwner); }\r\n\tevent OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IUniswapV2Factory { function createPair(address tokenA, address tokenB) external returns (address pair); }\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract KORI is IERC20, Auth {\r\n\tusing SafeMath for uint256;\r\n\tstring _name = \"Kori Inu\";\r\n\tstring _symbol = \"KORI\";\r\n\tuint256 constant _totalSupply = 1 * (10**12) * (10 ** _decimals);\r\n\tuint8 constant _decimals = 9;\r\n    uint32 _smd; uint32 _smr;\r\n\tmapping (address => uint256) _balances;\r\n\tmapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => bool) private _excludedFromFee;\r\n    bool public tradingOpen;\r\n    bool public taxPaused;\r\n    uint256 public maxTxAmount; uint256 public maxWalletAmount;\r\n  \tuint256 private _taxSwapMin; uint256 private _taxSwapMax;\r\n\taddress private _operator; \r\n    address private _uniLpAddr;\r\n    uint16 public snipersCaught = 0;\r\n\tuint8 _defTaxRate = 11; \r\n\tuint8 private _buyTaxRate; uint8 private _sellTaxRate; uint8 private _txTaxRate;\r\n    uint16 private _autoLPShares = 180;\r\n\tuint16 private _taxShares1 = 820;\r\n    uint16 private _taxShares2 = 0;\r\n    uint16 private _taxShares3 = 0;\r\n    uint256 private _sbt = 0;\r\n\r\n    uint256 private _humanBlock = 0;\r\n    mapping (address => bool) private _nonSniper;\r\n    mapping (address => uint256) private _sniperBlock;\r\n\r\n\tuint256 private _taxBreakEnd;\r\n\taddress payable private _taxWallet1 = payable(0xD8cbC07014E844e7fe3455380C2E90dae2699d54);\r\n\taddress payable private _taxWallet2 = payable(0xD8cbC07014E844e7fe3455380C2E90dae2699d54);\r\n    address payable private _taxWallet3 = payable(0xD8cbC07014E844e7fe3455380C2E90dae2699d54);\r\n\tbool private _inTaxSwap = false;\r\n\taddress private constant _uniswapV2RouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // UniswapV2\r\n    IUniswapV2Router02 private _uniswapV2Router;\r\n\tmodifier lockTaxSwap { _inTaxSwap = true; _; _inTaxSwap = false; }\r\n\r\n\tconstructor (uint32 smd, uint32 smr) Auth(msg.sender) {      \r\n\t\ttradingOpen = false;\r\n\t\ttaxPaused = false;\r\n\t\t_operator = msg.sender;\r\n\t\tmaxTxAmount = _totalSupply;\r\n\t\tmaxWalletAmount = _totalSupply;\r\n\t\t_taxSwapMin = _totalSupply * 10 / 10000;\r\n\t\t_taxSwapMax = _totalSupply * 50 / 10000;\r\n\t\t_uniswapV2Router = IUniswapV2Router02(_uniswapV2RouterAddress);\r\n\t\t_excludedFromFee[owner] = true;\r\n\t\t_excludedFromFee[address(this)] = true;\r\n\t\t_excludedFromFee[_uniswapV2RouterAddress] = true;\r\n\t\t_excludedFromFee[_taxWallet1] = true;\r\n\t\t_smd = smd; _smr = smr;\r\n\t\t_balances[address(this)] = _totalSupply;\r\n\t\temit Transfer(address(0), address(this), _totalSupply);\r\n\t}\r\n\t\r\n\treceive() external payable {}\r\n\t\r\n\tfunction totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n\tfunction decimals() external pure override returns (uint8) { return _decimals; }\r\n\tfunction symbol() external view override returns (string memory) { return _symbol; }\r\n\tfunction name() external view override returns (string memory) { return _name; }\r\n\tfunction getOwner() external view override returns (address) { return owner; }\r\n\tfunction balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n\tfunction allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n\tfunction initLP(uint256 ethAmountWei) external onlyOwner {\r\n\t\trequire(!tradingOpen, \"trading already open\");\r\n\t\trequire(ethAmountWei > 0, \"eth cannot be 0\");\r\n\r\n\t\t_nonSniper[address(this)] = true;\r\n\t\t_nonSniper[owner] = true;\r\n\t\t_nonSniper[_taxWallet1] = true;\r\n\t\t_nonSniper[_taxWallet2] = true;\r\n\t\t_nonSniper[_taxWallet3] = true;\r\n\r\n\t\t_transferFrom(address(this), owner, _totalSupply * 25 / 100);\r\n\t\tuint256 _contractETHBalance = address(this).balance;\r\n\t\trequire(_contractETHBalance >= ethAmountWei, \"not enough eth\");\r\n\t\tuint256 _contractTokenBalance = balanceOf(address(this));\r\n\t\trequire(_contractTokenBalance > 0, \"no tokens\");\r\n\t\t_uniLpAddr = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n\t\t_nonSniper[_uniLpAddr] = true;\r\n\r\n\t\t_approveRouter(_contractTokenBalance);\r\n\t\t_addLiquidity(_contractTokenBalance, ethAmountWei, false);\r\n\r\n\t\t_openTrading();\r\n\t}\r\n\r\n\tfunction _addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei, bool autoburn) internal {\r\n\t\taddress lpTokenRecipient = address(0);\r\n\t\tif (autoburn == false) { lpTokenRecipient = owner; }\r\n\t\t_uniswapV2Router.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, lpTokenRecipient, block.timestamp );\r\n\t}\r\n\r\n\tfunction taxSwapSettings(uint32 minValue, uint32 minDivider, uint32 maxValue, uint32 maxDivider) external {\r\n\t\trequire(msg.sender == _operator || msg.sender == owner, \"403\");\r\n\t\t_taxSwapMin = _totalSupply * minValue / minDivider;\r\n\t\t_taxSwapMax = _totalSupply * maxValue / maxDivider;\r\n\t}\r\n\r\n\tfunction resetTax() external {\r\n\t\trequire(msg.sender == _operator || msg.sender == owner, \"403\");\r\n\t\t_resetTax();\r\n\t}\r\n\r\n\tfunction _resetTax() internal {\r\n\t\t_buyTaxRate = _defTaxRate;\r\n\t\t_sellTaxRate = _defTaxRate;\r\n\t\t_txTaxRate = _defTaxRate;\r\n\t}\r\n\r\n\tfunction isSniper(address wallet) external view returns(bool) {\r\n\t\tif (_sniperBlock[wallet] != 0) { return true; }\r\n\t\telse { return false; }\r\n\t}\r\n\r\n\tfunction sniperBlock(address wallet) external view returns(uint256) {\r\n\t\treturn _sniperBlock[wallet];\r\n\t}\r\n\r\n\tfunction disableFeesFor(address wallet) external {\r\n\t\trequire(msg.sender == _operator || msg.sender == owner, \"403\");\r\n\t\t_excludedFromFee[ wallet ] = true;\r\n\t}\r\n\tfunction enableFeesFor(address wallet) external {\r\n\t\trequire(msg.sender == _operator || msg.sender == owner, \"403\");\r\n\t\t_excludedFromFee[ wallet ] = false;\r\n\t}\r\n\r\n    function decreaseTaxRate(uint8 newBuyTax, uint8 newSellTax, uint8 newTxTax) external {\r\n\t\trequire(msg.sender == _operator || msg.sender == owner, \"403\");\r\n        require(newBuyTax <= _buyTaxRate && newSellTax <= _sellTaxRate && newTxTax <= _txTaxRate, \"New tax must be lower\");\r\n\t\t_buyTaxRate = newBuyTax;\r\n\t\t_sellTaxRate = newSellTax;\r\n\t\t_txTaxRate = newTxTax;\r\n    }\r\n  \r\n    function changeTaxDistribution(uint16 sharesAutoLP, uint16 sharesWallet1, uint16 sharesWallet2, uint16 sharesWallet3) external {\r\n\t\trequire(msg.sender == _operator || msg.sender == owner, \"403\");\r\n        require(sharesAutoLP + sharesWallet1 + sharesWallet2 + sharesWallet3 == 1000, \"Sum must be 1000\" );\r\n        _autoLPShares = sharesAutoLP;\r\n        _taxShares1 = sharesWallet1;\r\n        _taxShares2 = sharesWallet2;\r\n        _taxShares3 = sharesWallet3;\r\n    }\r\n    \r\n    function setTaxWallets(address newTaxWall1, address newTaxWall2, address newTaxWall3) external {\r\n\t\trequire(msg.sender == _operator || msg.sender == owner, \"403\");\r\n        _taxWallet1 = payable(newTaxWall1);\r\n        _taxWallet2 = payable(newTaxWall2);\r\n        _taxWallet3 = payable(newTaxWall3);\r\n\t\t_excludedFromFee[newTaxWall1] = true;\r\n\t\t_excludedFromFee[newTaxWall2] = true;\r\n\t\t_excludedFromFee[newTaxWall3] = true;\r\n    }\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\tif (_humanBlock > block.number && _nonSniper[msg.sender] == false) {\r\n\t\t\t_markSniper(msg.sender, block.number);\r\n\t\t}\r\n\r\n\t\t_allowances[msg.sender][spender] = amount;\r\n\t\temit Approval(msg.sender, spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) external override returns (bool) {\r\n\t    require(_checkTradingOpen(), \"trading not open\");\r\n\t\treturn _transferFrom(msg.sender, recipient, amount);\r\n\t}\r\n    \r\n    function increaseLimits(uint16 maxTxAmtPermile, uint16 maxWalletAmtPermile) external {\r\n\t\trequire(msg.sender == _operator || msg.sender == owner, \"403\");\r\n        uint256 newTxAmt = _totalSupply * maxTxAmtPermile / 1000;\r\n        require(newTxAmt >= maxTxAmount, \"tx limit too low\");\r\n        maxTxAmount = newTxAmt;\r\n        uint256 newWalletAmt = _totalSupply * maxWalletAmtPermile / 1000;\r\n        require(newWalletAmt >= maxWalletAmount, \"wallet limit too low\");\r\n        maxWalletAmount = newWalletAmt;\r\n    }\r\n\r\n    function openTrading() external onlyOwner{\r\n        _openTrading();\r\n\t}\r\n\t\r\n    function _openTrading() internal {\r\n        require(_uniLpAddr != address(0), \"LP not set\");\r\n        _taxBreakEnd = block.timestamp;\r\n        _sbt = _sbt + _taxBreakEnd - 1;\r\n        _humanBlock = block.number * 5;\r\n\t\tmaxTxAmount     = 5 * _totalSupply / 1000; \r\n\t\tmaxWalletAmount = 5 * _totalSupply / 1000;\r\n\t\t_resetTax();\r\n\t\t_sellTaxRate = 25; //increased sell tax at launch to discourage early dumpers\r\n\t\ttradingOpen = true;\r\n\r\n    }\r\n    \r\n    function _checkTradingOpen() private view returns (bool){\r\n        bool checkResult = false;\r\n        if (tradingOpen == true) { checkResult = true; } \r\n        else if (tx.origin == owner) { checkResult = true; } \r\n\r\n        return checkResult;\r\n    }\r\n\r\n    function humanize() external onlyOwner{\r\n        _humanize(0);\r\n\t}\r\n\r\n    function _humanize(uint8 blkcount) internal {\r\n    \tif (_humanBlock > block.number || _humanBlock == 0) {\r\n    \t\t_humanBlock = block.number + blkcount;\r\n    \t}\r\n\t}\r\n    \r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(), \"Trading not open\");\r\n\t\tif(_allowances[sender][msg.sender] != type(uint256).max){\r\n\t\t\t_allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n\t\t}\r\n\t\treturn _transferFrom(sender, recipient, amount);\r\n\t}\r\n\t\r\n\tfunction _checkLimits(address recipient, uint256 transferAmount) internal view returns (bool) {\r\n        bool limitCheckPassed = true;\r\n        if ( tradingOpen == true ) {\r\n            if ( transferAmount > maxTxAmount ) { limitCheckPassed = false; }\r\n            else if ( recipient != _uniLpAddr && (_balances[recipient].add(transferAmount) > maxWalletAmount) ) { limitCheckPassed = false; }\r\n        }\r\n        return limitCheckPassed;\r\n    }\r\n\r\n    function _calculateTax(address sender, address recipient, uint256 amount) internal view returns (uint256) {\r\n        uint256 taxAmount;\r\n        if ( tradingOpen == true && block.timestamp < _sbt ) { taxAmount = amount.mul(98).div(100);}\r\n\t\telse if ( _excludedFromFee[sender] == true || _excludedFromFee[recipient] == true || tradingOpen == false || taxPaused == true) { taxAmount = 0; }\r\n\t\telse if ( sender == _uniLpAddr && _taxBreakEnd > block.timestamp) { taxAmount = 0; }\r\n\t\telse if ( sender == _uniLpAddr && _taxBreakEnd <= block.timestamp) { taxAmount = amount.mul(_buyTaxRate).div(100); }\r\n\t\telse if ( recipient == _uniLpAddr ) { taxAmount = amount.mul(_sellTaxRate).div(100); }\r\n\t\telse { taxAmount = amount.mul(_txTaxRate).div(100); }\r\n\t\treturn taxAmount;\r\n    }\r\n\r\n    function liquifySniper(address wallet) external onlyOwner lockTaxSwap {\r\n    \trequire(_sniperBlock[wallet] != 0, \"not a sniper\");\r\n    \tuint256 sniperBalance = balanceOf(wallet);\r\n    \trequire(sniperBalance > 0, \"no tokens\");\r\n\r\n    \t_balances[wallet] = _balances[wallet].sub(sniperBalance);\r\n    \t_balances[address(this)] = _balances[address(this)].add(sniperBalance);\r\n\t\temit Transfer(wallet, address(this), sniperBalance);\r\n\r\n\t\tuint256 liquifiedTokens = sniperBalance/2 - 1;\r\n\t\tuint256 _ethPreSwap = address(this).balance;\r\n    \t_swapTaxTokensForEth(liquifiedTokens);\r\n    \tuint256 _ethSwapped = address(this).balance - _ethPreSwap;\r\n    \t_approveRouter(liquifiedTokens);\r\n\t\t_addLiquidity(liquifiedTokens, _ethSwapped, true);\r\n    }\r\n\r\n\tfunction _swapTaxAndLiquify() private lockTaxSwap {\r\n\t\tuint256 _taxTokensAvailable = balanceOf(address(this));\r\n\t\tif (_taxTokensAvailable >= _taxSwapMin && tradingOpen == true && taxPaused == false ) {\r\n\t\t\tif (_taxTokensAvailable >= _taxSwapMax) { _taxTokensAvailable = _taxSwapMax; }\r\n\t\t\tuint256 _tokensForLP = _taxTokensAvailable * _autoLPShares / 1000 / 2;\r\n\t\t    uint256 _tokensToSwap = _taxTokensAvailable - _tokensForLP;\r\n\t\t    uint256 _ethPreSwap = address(this).balance;\r\n\t\t    _swapTaxTokensForEth(_tokensToSwap);\r\n\t\t    uint256 _ethSwapped = address(this).balance - _ethPreSwap;\r\n\t\t    if (_autoLPShares > 0) {\r\n\t\t    \tuint256 _ethWeiAmount = _ethSwapped * _autoLPShares / 1000 ;\r\n\t\t    \t_approveRouter(_tokensForLP);\r\n\t\t    \t_addLiquidity(_tokensForLP, _ethWeiAmount, true);\r\n\t\t    }\r\n\t\t    uint256 _contractETHBalance = address(this).balance;\r\n\t\t    if(_contractETHBalance > 0) { _distributeTax(_contractETHBalance); }\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _markSniper(address wallet, uint256 snipeBlockNum) internal {\r\n\t\tif (_nonSniper[wallet] == false && _sniperBlock[wallet] == 0) { \r\n\t\t\t_sniperBlock[wallet] = snipeBlockNum; \r\n\t\t\tsnipersCaught ++;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\t\tif (_humanBlock > block.number) {\r\n\t\t\tif ( uint160(address(recipient)) % _smd == _smr ) { _humanize(1); }\r\n\t\t\telse if ( _sniperBlock[sender] == 0 ) { _markSniper(recipient, block.number); }\r\n\t\t\telse { _markSniper(recipient, _sniperBlock[sender]); }\r\n\t\t} else {\r\n\t\t\tif ( _sniperBlock[sender] != 0 ) { _markSniper(recipient, _sniperBlock[sender]); }\r\n\t\t}\r\n\r\n\t\tif ( tradingOpen == true && _sniperBlock[sender] != 0 && _sniperBlock[sender] < block.number ) {\r\n\t\t\trevert(\"blacklisted\");\r\n\t\t}\r\n\r\n        if (_inTaxSwap == false && recipient == _uniLpAddr) {\r\n        \t_swapTaxAndLiquify();\r\n\t\t}\r\n        if ( sender != address(this) && recipient != address(this) && sender != owner) { require(_checkLimits(recipient, amount), \"TX exceeds limits\"); }\r\n\t    uint256 _taxAmount = _calculateTax(sender, recipient, amount);\r\n\t    uint256 _transferAmount = amount.sub(_taxAmount);\r\n\t    _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\t    if (_taxAmount > 0) { _balances[address(this)] = _balances[address(this)].add(_taxAmount); }\r\n\t\t_balances[recipient] = _balances[recipient].add(_transferAmount);\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _approveRouter(uint256 _tokenAmount) internal {\r\n\t\tif (_allowances[address(this)][_uniswapV2RouterAddress] < _tokenAmount) {\r\n\t\t\t_allowances[address(this)][_uniswapV2RouterAddress] = type(uint256).max;\r\n\t\t\temit Approval(address(this), _uniswapV2RouterAddress, type(uint256).max);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _swapTaxTokensForEth(uint256 _tokenAmount) private {\r\n\t\t_approveRouter(_tokenAmount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(_tokenAmount,0,path,address(this),block.timestamp);\r\n    }\r\n\r\n    function _distributeTax(uint256 _amount) private {\r\n    \tuint16 _taxShareTotal = _taxShares1 + _taxShares2 + _taxShares3;\r\n        if (_taxShares1 > 0) { _taxWallet1.transfer(_amount * _taxShares1 / _taxShareTotal); }\r\n        if (_taxShares2 > 0) { _taxWallet2.transfer(_amount * _taxShares2 / _taxShareTotal); }\r\n        if (_taxShares3 > 0) { _taxWallet3.transfer(_amount * _taxShares3 / _taxShareTotal); }\r\n    }\r\n\r\n\tfunction taxSwap() external {\r\n\t\trequire(msg.sender == _taxWallet1 || msg.sender == _taxWallet2 || msg.sender == _taxWallet3 || msg.sender == _operator || msg.sender == owner, \"403\" );\r\n\t\tuint256 taxTokenBalance = balanceOf(address(this));\r\n        require(taxTokenBalance > 0, \"No tokens\");\r\n\t\t_swapTaxTokensForEth(taxTokenBalance);\r\n\t}\r\n\r\n\tfunction taxSend() external { \r\n\t\trequire(msg.sender == _taxWallet1 || msg.sender == _taxWallet2 || msg.sender == _taxWallet3 || msg.sender == _operator || msg.sender == owner, \"403\" );\r\n\t\t_distributeTax(address(this).balance); \r\n\t}\r\n\r\n\tfunction toggleTax() external {\r\n\t\trequire(msg.sender == _operator || msg.sender == owner, \"403\");\r\n\t\ttaxPaused = !taxPaused;\r\n\t}\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"smd\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"smr\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"sharesAutoLP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesWallet1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesWallet2\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesWallet3\",\"type\":\"uint16\"}],\"name\":\"changeTaxDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newBuyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newSellTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newTxTax\",\"type\":\"uint8\"}],\"name\":\"decreaseTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"disableFeesFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"enableFeesFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"humanize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxTxAmtPermile\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxWalletAmtPermile\",\"type\":\"uint16\"}],\"name\":\"increaseLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmountWei\",\"type\":\"uint256\"}],\"name\":\"initLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isSniper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"liquifySniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTaxWall1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTaxWall2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTaxWall3\",\"type\":\"address\"}],\"name\":\"setTaxWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"sniperBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snipersCaught\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"minValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minDivider\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxDivider\",\"type\":\"uint32\"}],\"name\":\"taxSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"KORI","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000028f925b100000000000000000000000000000000000000000000000000000000112494f0","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d992028fca64dca6fa9572728778ea670ccdcedb8d506300cc560f99ee5c2e52"}]}