{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AffirmationVerifier.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./UseAccessControl.sol\\\";\\nimport \\\"./DerivedMetadataRegistry.sol\\\";\\nimport \\\"./mixin/MixinSignature.sol\\\";\\nimport \\\"./mixin/MixinPausable.sol\\\";\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./mixin/MixinOwnable.sol\\\";\\n\\ncontract AffirmationWriter is Ownable, MixinSignature, MixinPausable, UseAccessControl {\\n\\n  DerivedMetadataRegistry public derivedMetadataRegistry;\\n\\n  bytes32 public immutable organizerRole;\\n  bytes32 public immutable historianRole;\\n\\n  IERC20 public immutable tipToken;\\n\\n  uint256 public minimumQuorumAffirmations;\\n  \\n  uint256 public constant VERSION = 2;\\n\\n  address payable public historianTipJar;\\n\\n  mapping(bytes32 => bool) public affirmationHashRegistry;\\n  mapping(bytes32 => bool) public tipHashRegistry;\\n  \\n\\n  constructor(\\n    address _accessControl,\\n    address _derivedMetadataRegistry,\\n    address payable _historianTipJar,\\n    address _tipToken,\\n    bytes32 _organizerRole,\\n    bytes32 _historianRole\\n  ) UseAccessControl(_accessControl) {\\n    derivedMetadataRegistry = DerivedMetadataRegistry(_derivedMetadataRegistry);\\n    organizerRole = _organizerRole;\\n    historianRole = _historianRole;\\n    historianTipJar = _historianTipJar;\\n    tipToken = IERC20(_tipToken);\\n  }\\n\\n\\tstruct Affirmation {\\n\\t\\tuint256 salt;\\n    address signer;\\n    bytes signature;\\n\\t}\\n\\n\\tstruct Tip {\\n    uint256 version;\\n\\t\\tbytes32 writeHash;\\n    address tipper;\\n    uint256 value;\\n    bytes signature;\\n\\t}\\n\\n\\tstruct Write {\\n    uint256 tokenId;\\n    string key;\\n\\t\\tstring text;\\n    uint256 salt;\\n\\t}\\n\\n  event Affirmed(\\n      uint256 indexed tokenId,\\n      address indexed signer,\\n      string indexed key,\\n      bytes32 affirmationHash,\\n      uint256 salt,\\n      bytes signature\\n  );\\n\\n  event Tipped(\\n      bytes32 indexed writeHash,\\n      address indexed tipper,\\n      uint256 value,\\n      bytes signature\\n  );\\n\\n  function getWriteHash(Write calldata _write) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_write.tokenId, _write.key, _write.text, _write.salt));\\n  }\\n\\n  function getAffirmationHash(bytes32 _writeHash, Affirmation calldata _affirmation) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_writeHash, _affirmation.signer, _affirmation.salt));\\n  }\\n\\n  function getTipHash(Tip calldata _tip) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_tip.version, _tip.writeHash, _tip.tipper, _tip.value));\\n  }\\n\\n  function verifyAffirmation(\\n    bytes32 writeHash, Affirmation calldata _affirmation \\n  ) public pure returns (bool) {\\n    bytes32 signedHash = getAffirmationHash(writeHash, _affirmation);\\n    (bytes32 r, bytes32 s, uint8 v) = splitSignature(_affirmation.signature);\\n    return isSigned(_affirmation.signer, signedHash, v, r, s);\\n  }\\n\\n  function verifyTip(\\n    Tip calldata _tip \\n  ) public pure returns (bool) {\\n    bytes32 signedHash = getTipHash(_tip);\\n    (bytes32 r, bytes32 s, uint8 v) = splitSignature(_tip.signature);\\n    return _tip.version == VERSION && isSigned(_tip.tipper, signedHash, v, r, s);\\n  }\\n\\n  function updateMinimumQuorumAffirmations(uint256 _minimumQuorumAffirmations) public onlyRole(organizerRole) {\\n    minimumQuorumAffirmations = _minimumQuorumAffirmations;\\n  }\\n\\n  function updateHistorianTipJar(address payable _historianTipJar) public onlyRole(organizerRole) {\\n    historianTipJar = _historianTipJar;\\n  }\\n\\n  function pause() public onlyRole(organizerRole) {\\n    _pause();\\n  }\\n\\n  function unpause() public onlyRole(organizerRole) {\\n    _unpause();\\n  } \\n\\n  function write(Write calldata _write, Affirmation[] calldata _affirmations, Tip calldata _tip) public whenNotPaused {\\n    bytes32 writeHash = getWriteHash(_write);\\n\\n    uint256 numValidAffirmations = 0;\\n    for (uint256 i = 0; i < _affirmations.length; ++i) {\\n      Affirmation calldata affirmation = _affirmations[i];\\n      // once an affirmation is created and used on-chain it can't be used again\\n      bytes32 affirmationHash = getAffirmationHash(writeHash, affirmation);\\n      require(affirmationHashRegistry[affirmationHash] == false, \\\"Affirmation has already been received\\\");\\n      affirmationHashRegistry[affirmationHash] = true;\\n      require(verifyAffirmation(writeHash, affirmation) == true, \\\"Affirmation doesn't have valid signature\\\");\\n      _checkRole(historianRole, affirmation.signer);\\n      numValidAffirmations++;\\n      emit Affirmed(_write.tokenId, affirmation.signer, _write.key, affirmationHash, affirmation.salt, affirmation.signature ); \\n    }\\n\\n    require(numValidAffirmations >= minimumQuorumAffirmations, \\\"Minimum affirmations not met\\\");\\n    _writeDocument(_write);\\n    _settleTip(writeHash, _tip);\\n  }\\n\\n  function _writeDocument(Write calldata _write) internal {\\n    string[] memory keys = new string[](1);\\n    string[] memory texts = new string[](1);\\n    address[] memory writers = new address[](1);\\n    keys[0] = _write.key;\\n    texts[0] = _write.text;\\n    writers[0] = address(this);\\n    derivedMetadataRegistry.writeDocuments(_write.tokenId, keys, texts, writers); \\n  }\\n\\n  function settleTip(bytes32 writeHash, Tip calldata _tip) public onlyRole(historianRole) {\\n    _settleTip(writeHash, _tip);\\n  }\\n\\n  function _settleTip(bytes32 writeHash, Tip calldata _tip) internal {\\n    if (_tip.value != 0) {\\n      require (writeHash == _tip.writeHash, 'Tip is not for write');\\n      bytes32 tipHash = getTipHash(_tip);\\n      require(tipHashRegistry[tipHash] == false, \\\"Tip has already been used\\\");\\n      tipHashRegistry[tipHash] = true;\\n      require(verifyTip(_tip) == true, \\\"Tip doesn't have valid signature\\\");\\n      tipToken.transferFrom(_tip.tipper, historianTipJar, _tip.value);\\n      emit Tipped(_tip.writeHash, _tip.tipper, _tip.value, _tip.signature);\\n    }\\n  }\\n\\n}\"\r\n    },\r\n    \"contracts/UseAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./interface/IAccessControl.sol\\\";\\nimport \\\"./utils/Strings.sol\\\";\\n\\ncontract UseAccessControl {\\n  IAccessControl public accessControl;\\n\\n  constructor(address _accessControl) {\\n    accessControl = IAccessControl(_accessControl);\\n  }\\n\\n  modifier onlyRole(bytes32 role) {\\n      _checkRole(role, msg.sender);\\n      _;\\n  }\\n\\n  function _checkRole(bytes32 role, address account) internal view {\\n    if (!accessControl.hasRole(role, account)) {\\n        revert(\\n            string(\\n                abi.encodePacked(\\n                    \\\"AccessControl: account \\\",\\n                    Strings.toHexString(uint160(account), 20),\\n                    \\\" is missing role \\\",\\n                    Strings.toHexString(uint256(role), 32)\\n                )\\n            )\\n        );\\n    }\\n  }\\n}\"\r\n    },\r\n    \"contracts/DerivedMetadataRegistry.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./mixin/MixinOwnable.sol\\\";\\nimport \\\"./library/LibString.sol\\\";\\nimport \\\"./interface/IMetadataRegistry.sol\\\";\\n\\ncontract DerivedMetadataRegistry is Ownable, IMetadataRegistry {\\n  IMetadataRegistry public immutable sourceRegistry;\\n\\n  mapping(uint256 => mapping(string => IMetadataRegistry.Document)) public tokenIdToDocumentMap;\\n  mapping(address => bool) public permissedWriters;\\n\\n  constructor(address sourceRegistry_) {\\n    sourceRegistry = IMetadataRegistry(sourceRegistry_);\\n  }\\n\\n  event UpdatedDocument(\\n      uint256 indexed tokenId,\\n      address indexed writer,\\n      string indexed key,\\n      string text\\n  );\\n\\n  function updatePermissedWriterStatus(address _writer, bool status) public onlyOwner {\\n    permissedWriters[_writer] = status;\\n  }\\n\\n  modifier onlyIfPermissed(address writer) {\\n    require(permissedWriters[writer] == true, \\\"writer can't write to registry\\\");\\n    _;\\n  }\\n\\n  function writeDocuments(uint256 tokenId, string[] memory keys, string[] memory texts, address[] memory writers) public onlyIfPermissed(msg.sender) {\\n    require(keys.length == texts.length, \\\"keys and txHashes size mismatch\\\");\\n    require(writers.length == texts.length, \\\"writers and texts size mismatch\\\");\\n    for (uint256 i = 0; i < keys.length; ++i) {\\n      string memory key = keys[i];\\n      string memory text = texts[i];\\n      address writer = writers[i];\\n      tokenIdToDocumentMap[tokenId][key] = IMetadataRegistry.Document(writer, text, block.timestamp);\\n      emit UpdatedDocument(tokenId, writer, key, text); \\n    }\\n  }\\n\\n  function tokenIdToDocument(uint256 tokenId, string memory key) override external view returns (IMetadataRegistry.Document memory) {\\n    IMetadataRegistry.Document memory sourceDoc = sourceRegistry.tokenIdToDocument(tokenId, key);\\n    if (bytes(sourceDoc.text).length == 0) {\\n      return IMetadataRegistry.Document(address(0), \\\"\\\", 0);\\n    }\\n    IMetadataRegistry.Document memory doc = tokenIdToDocumentMap[tokenId][sourceDoc.text];\\n    return doc; \\n  }\\n}\"\r\n    },\r\n    \"contracts/mixin/MixinSignature.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\n\\ncontract MixinSignature {\\n  function splitSignature(bytes memory sig)\\n      public pure returns (bytes32 r, bytes32 s, uint8 v)\\n  {\\n      require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n      assembly {\\n          r := mload(add(sig, 32))\\n          s := mload(add(sig, 64))\\n          v := byte(0, mload(add(sig, 96)))\\n      }\\n\\n      if (v < 27) v += 27;\\n  }\\n\\n  function isSigned(address _address, bytes32 messageHash, uint8 v, bytes32 r, bytes32 s) public pure returns (bool) {\\n      return _isSigned(_address, messageHash, v, r, s) || _isSignedPrefixed(_address, messageHash, v, r, s);\\n  }\\n\\n  function _isSigned(address _address, bytes32 messageHash, uint8 v, bytes32 r, bytes32 s)\\n      internal pure returns (bool)\\n  {\\n      return ecrecover(messageHash, v, r, s) == _address;\\n  }\\n\\n  function _isSignedPrefixed(address _address, bytes32 messageHash, uint8 v, bytes32 r, bytes32 s)\\n      internal pure returns (bool)\\n  {\\n      bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n      return _isSigned(_address, keccak256(abi.encodePacked(prefix, messageHash)), v, r, s);\\n  }\\n  \\n}\"\r\n    },\r\n    \"contracts/mixin/MixinPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract MixinPausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/mixin/MixinOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interface/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n}\"\r\n    },\r\n    \"contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\"\r\n    },\r\n    \"contracts/library/LibString.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nlibrary LibString {\\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\\n  function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory) {\\n      bytes memory _ba = bytes(_a);\\n      bytes memory _bb = bytes(_b);\\n      bytes memory _bc = bytes(_c);\\n      bytes memory _bd = bytes(_d);\\n      bytes memory _be = bytes(_e);\\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\\n      bytes memory babcde = bytes(abcde);\\n      uint k = 0;\\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\\n      for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\\n      for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\\n      for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\\n      for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\\n      return string(babcde);\\n    }\\n\\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, _d, \\\"\\\");\\n    }\\n\\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, \\\"\\\", \\\"\\\");\\n    }\\n\\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\\n        return strConcat(_a, _b, \\\"\\\", \\\"\\\", \\\"\\\");\\n    }\\n\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = byte(uint8(48 + _i % 10));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function uint2hexstr(uint i) internal pure returns (string memory) {\\n        if (i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j = j >> 4;\\n        }\\n        uint mask = 15;\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (i != 0){\\n            uint curr = (i & mask);\\n            bstr[k--] = curr > 9 ? byte(uint8(55 + curr)) : byte(uint8(48 + curr));\\n            i = i >> 4;\\n        }\\n        return string(bstr);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interface/IMetadataRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IMetadataRegistry {\\n  struct Document {\\n\\t\\taddress writer;\\n\\t\\tstring text;\\n\\t\\tuint256 creationTime;\\n\\t}\\n\\n  function tokenIdToDocument(uint256 tokenId, string memory key) external view returns (Document memory);\\n}\"\r\n    },\r\n    \"contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _txOrigin() internal view virtual returns (address) {\\n        return tx.origin;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_derivedMetadataRegistry\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_historianTipJar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tipToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_organizerRole\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_historianRole\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"affirmationHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"Affirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"writeHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tipper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"Tipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControl\",\"outputs\":[{\"internalType\":\"contract IAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"affirmationHashRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivedMetadataRegistry\",\"outputs\":[{\"internalType\":\"contract DerivedMetadataRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_writeHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct AffirmationWriter.Affirmation\",\"name\":\"_affirmation\",\"type\":\"tuple\"}],\"name\":\"getAffirmationHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"writeHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tipper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct AffirmationWriter.Tip\",\"name\":\"_tip\",\"type\":\"tuple\"}],\"name\":\"getTipHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct AffirmationWriter.Write\",\"name\":\"_write\",\"type\":\"tuple\"}],\"name\":\"getWriteHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"historianRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"historianTipJar\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"isSigned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumQuorumAffirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"organizerRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"writeHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"writeHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tipper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct AffirmationWriter.Tip\",\"name\":\"_tip\",\"type\":\"tuple\"}],\"name\":\"settleTip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tipHashRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tipToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_historianTipJar\",\"type\":\"address\"}],\"name\":\"updateHistorianTipJar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumQuorumAffirmations\",\"type\":\"uint256\"}],\"name\":\"updateMinimumQuorumAffirmations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"writeHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct AffirmationWriter.Affirmation\",\"name\":\"_affirmation\",\"type\":\"tuple\"}],\"name\":\"verifyAffirmation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"writeHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tipper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct AffirmationWriter.Tip\",\"name\":\"_tip\",\"type\":\"tuple\"}],\"name\":\"verifyTip\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct AffirmationWriter.Write\",\"name\":\"_write\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct AffirmationWriter.Affirmation[]\",\"name\":\"_affirmations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"writeHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tipper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct AffirmationWriter.Tip\",\"name\":\"_tip\",\"type\":\"tuple\"}],\"name\":\"write\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AffirmationWriter","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007229883a69a333055b191132d2118c8a676014dd0000000000000000000000006d4377f2373a80d20d3d1f606b43a387391a1b890000000000000000000000009cb3dc1615a82595e3e4b2f9705879ffcb180386000000000000000000000000491d6b7d6822d5d4bc88a1264e1b47791fd8e90410000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}