{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: NONE\n\npragma solidity 0.8.3;\n\n\n\n// Part: ERC20\n\ninterface ERC20 {\n    function transfer(address _to, uint256 _value) external;\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n    function approve(address _spender, uint256 _value) external returns (bool);\n}\n\n// Part: L1GatewayRouter\n\ninterface L1GatewayRouter {\n    function outboundTransfer(address _token, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes memory _data) external payable;\n}\n\n// File: Arbitrum.sol\n\ncontract ArbitrumBridgeTester {\n\n    L1GatewayRouter constant gateway = L1GatewayRouter(0x72Ce9c846789fdB6fC1f34aC4AD25Dd9ef7031ef);\n    ERC20 constant crv = ERC20(0xD533a949740bb3306d119CC777fa900bA034cd52);\n\n    constructor() {\n        crv.approve(0xa3A7B6F88361F48403514059F1F16C8E78d60EeC, type(uint256).max);\n    }\n\n    function bridgeCRV(\n        uint _amount\n    ) external payable {\n        require(msg.value == 1000000000000000); // 0.001 ether\n        crv.transferFrom(msg.sender, address(this), _amount);\n        gateway.outboundTransfer{value: msg.value}(\n            address(crv),\n            address(this),\n            _amount,\n            1000000,\n            990000000,\n            abi.encode(10000000000000, bytes(\"\"))\n        );\n    }\n}\n","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bridgeCRV\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ArbitrumBridgeTester","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}