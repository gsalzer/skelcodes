{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/MonsterSatoshible.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/**\\r\\n *      __  __                 _\\r\\n *     |  \\\\/  | ___  _ __  ___| |_ ___ _ __\\r\\n *     | |\\\\/| |/ _ \\\\| '_ \\\\/ __| __/ _ \\\\ '__|\\r\\n *     | |  | | (_) | | | \\\\__ \\\\ ||  __/ |\\r\\n *     |_|__|_|\\\\___/|_| |_|___/\\\\__\\\\___|_|_     _\\r\\n *     / ___|  __ _| |_ ___  ___| |__ (_) |__ | | ___  ___\\r\\n *     \\\\___ \\\\ / _` | __/ _ \\\\/ __| '_ \\\\| | '_ \\\\| |/ _ \\\\/ __|\\r\\n *      ___) | (_| | || (_) \\\\__ \\\\ | | | | |_) | |  __/\\\\__ \\\\\\r\\n *     |____/ \\\\__,_|\\\\__\\\\___/|___/_| |_|_|_.__/|_|\\\\___||___/\\r\\n *\\r\\n */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\nimport \\\"./ERC2981ContractWideRoyalties.sol\\\";\\r\\nimport \\\"./MerkleProof.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Original Satoshibles contract interface\\r\\n */\\r\\ninterface ISatoshible {\\r\\n    function ownerOf(\\r\\n        uint256 _tokenId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (address owner);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Monster Satoshibles\\r\\n * @notice NFT of monsters that can be burned and combined into prime monsters!\\r\\n * @author Aaron Hanson\\r\\n */\\r\\ncontract MonsterSatoshible is ERC721, ERC2981ContractWideRoyalties, Ownable {\\r\\n\\r\\n    /// The max token supply\\r\\n    uint256 public constant MAX_SUPPLY = 6666;\\r\\n\\r\\n    /// The presale portion of the max supply\\r\\n    uint256 public constant MAX_PRESALE_SUPPLY = 3333;\\r\\n\\r\\n    /// Mysterious constants ðŸ’€\\r\\n    uint256 constant DEATH = 0xDEAD;\\r\\n    uint256 constant LIFE = 0x024350AC;\\r\\n    uint256 constant ALPHA = LIFE % DEATH * 1000;\\r\\n    uint256 constant OMEGA = LIFE % DEATH + ALPHA;\\r\\n\\r\\n    /// Prime types\\r\\n    uint256 constant FRANKENSTEIN = 0;\\r\\n    uint256 constant WEREWOLF = 1;\\r\\n    uint256 constant VAMPIRE = 2;\\r\\n    uint256 constant ZOMBIE = 3;\\r\\n    uint256 constant INVALID = 4;\\r\\n\\r\\n    /// Number of prime parts\\r\\n    uint256 constant NUM_PARTS = 4;\\r\\n\\r\\n    /// Bitfield mask for prime part detection during prime minting\\r\\n    uint256 constant HAS_ALL_PARTS = 2 ** NUM_PARTS - 1;\\r\\n\\r\\n    /// Merkle root summarizing the presale whitelist\\r\\n    bytes32 public constant WHITELIST_MERKLE_ROOT =\\r\\n        0xdb6eea27a6a35a02d1928e9582f75c1e0a518ad5992b5cfee9cc0d86fb387b8d;\\r\\n\\r\\n    /// Additional team wallets (can withdraw)\\r\\n    address public constant TEAM_WALLET_A =\\r\\n        0xF746362D8162Eeb3624c17654FFAa6EB8bD71820;\\r\\n    address public constant TEAM_WALLET_B =\\r\\n        0x16659F9D2ab9565B0c07199687DE3634c0965391;\\r\\n    address public constant TEAM_WALLET_C =\\r\\n        0x7a73f770873761054ab7757E909ae48f771379D4;\\r\\n    address public constant TEAM_WALLET_D =\\r\\n        0xB7c7e3809591F720f3a75Fb3efa05E76E6B7B92A;\\r\\n\\r\\n    /// The maximum ERC-2981 royalties percentage\\r\\n    uint256 public constant MAX_ROYALTIES_PCT = 600;\\r\\n\\r\\n    /// Original Satoshibles contract instance\\r\\n    ISatoshible public immutable SATOSHIBLE_CONTRACT;\\r\\n\\r\\n    /// The max presale token ID\\r\\n    uint256 public immutable MAX_PRESALE_TOKEN_ID;\\r\\n\\r\\n    /// The current token supply\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    /// The current state of the sale\\r\\n    bool public saleIsActive;\\r\\n\\r\\n    /// Indicates if the public sale was opened manually\\r\\n    bool public publicSaleOpenedEarly;\\r\\n\\r\\n    /// The default and discount token prices in wei\\r\\n    uint256 public tokenPrice    = 99900000000000000; // 0.0999 ether\\r\\n    uint256 public discountPrice = 66600000000000000; // 0.0666 ether\\r\\n\\r\\n    /// Tracks number of presale mints already used per address\\r\\n    mapping(address => uint256) public whitelistMintsUsed;\\r\\n\\r\\n    /// The current state of the laboratory\\r\\n    bool public laboratoryHasElectricity;\\r\\n\\r\\n    /// Merkle root summarizing all monster IDs and their prime parts\\r\\n    bytes32 public primePartsMerkleRoot;\\r\\n\\r\\n    /// The provenance URI\\r\\n    string public provenanceURI = \\\"Not Yet Set\\\";\\r\\n\\r\\n    /// When true, the provenanceURI can no longer be changed\\r\\n    bool public provenanceUriLocked;\\r\\n\\r\\n    /// The base URI\\r\\n    string public baseURI = \\\"https://api.satoshibles.com/monsters/token/\\\";\\r\\n\\r\\n    /// When true, the baseURI can no longer be changed\\r\\n    bool public baseUriLocked;\\r\\n\\r\\n    /// Use Counters for token IDs\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    /// Monster token ID counter\\r\\n    Counters.Counter monsterIds;\\r\\n\\r\\n    /// Prime token ID counter for each prime type\\r\\n    mapping(uint256 => Counters.Counter) primeIds;\\r\\n\\r\\n    /// Prime ID offsets for each prime type\\r\\n    mapping(uint256 => uint256) primeIdOffset;\\r\\n\\r\\n    /// Bitfields that track original Satoshibles already used for discounts\\r\\n    mapping(uint256 => uint256) satDiscountBitfields;\\r\\n\\r\\n    /// Bitfields that track original Satoshibles already used in lab\\r\\n    mapping(uint256 => uint256) satLabBitfields;\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the saleIsActive flag changes\\r\\n     * @param isActive Indicates whether or not the sale is now active\\r\\n     */\\r\\n    event SaleStateChanged(\\r\\n        bool indexed isActive\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the public sale is opened early\\r\\n     */\\r\\n    event PublicSaleOpenedEarly();\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the laboratoryHasElectricity flag changes\\r\\n     * @param hasElectricity Indicates whether or not the laboratory is open\\r\\n     */\\r\\n    event LaboratoryStateChanged(\\r\\n        bool indexed hasElectricity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a prime is created in the lab\\r\\n     * @param creator The account that created the prime\\r\\n     * @param primeId The ID of the prime created\\r\\n     * @param satId The Satoshible used as the 'key' to the lab\\r\\n     * @param monsterIdsBurned The IDs of the monsters burned\\r\\n     */\\r\\n    event PrimeCreated(\\r\\n        address indexed creator,\\r\\n        uint256 indexed primeId,\\r\\n        uint256 indexed satId,\\r\\n        uint256[4] monsterIdsBurned\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Requires the specified Satoshible to be owned by msg.sender\\r\\n     * @param _satId Original Satoshible token ID\\r\\n     */\\r\\n    modifier onlySatHolder(\\r\\n        uint256 _satId\\r\\n    ) {\\r\\n        require(\\r\\n            SATOSHIBLE_CONTRACT.ownerOf(_satId) == _msgSender(),\\r\\n            \\\"Sat not owned\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Requires msg.sender to be the owner or a team wallet\\r\\n     */\\r\\n    modifier onlyTeam() {\\r\\n        require(\\r\\n            _msgSender() == TEAM_WALLET_A\\r\\n                || _msgSender() == TEAM_WALLET_B\\r\\n                || _msgSender() == TEAM_WALLET_C\\r\\n                || _msgSender() == TEAM_WALLET_D\\r\\n                || _msgSender() == owner(),\\r\\n            \\\"Not owner or team address\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Boom... Let's go!\\r\\n     * @param _initialBatchCount Number of tokens to mint to msg.sender\\r\\n     * @param _immutableSatoshible Original Satoshible contract address\\r\\n     * @param _royaltiesPercentage Initial royalties percentage for ERC-2981\\r\\n     */\\r\\n    constructor(\\r\\n        uint256 _initialBatchCount,\\r\\n        address _immutableSatoshible,\\r\\n        uint256 _royaltiesPercentage\\r\\n    )\\r\\n        ERC721(\\\"Monster Satoshibles\\\", \\\"MSBLS\\\")\\r\\n    {\\r\\n        SATOSHIBLE_CONTRACT = ISatoshible(\\r\\n            _immutableSatoshible\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _royaltiesPercentage <= MAX_ROYALTIES_PCT,\\r\\n            \\\"Royalties too high\\\"\\r\\n        );\\r\\n\\r\\n        _setRoyalties(\\r\\n            _msgSender(),\\r\\n            _royaltiesPercentage\\r\\n        );\\r\\n\\r\\n        _initializePrimeIdOffsets();\\r\\n        _initializeSatDiscountAvailability();\\r\\n        _initializeSatLabAvailability();\\r\\n        _mintTokens(_initialBatchCount);\\r\\n\\r\\n        require(\\r\\n            belowMaximum(_initialBatchCount, MAX_PRESALE_SUPPLY,\\r\\n                MAX_SUPPLY\\r\\n            ) == true,\\r\\n            \\\"Would exceed max supply\\\"\\r\\n        );\\r\\n\\r\\n        unchecked {\\r\\n            MAX_PRESALE_TOKEN_ID = _initialBatchCount + MAX_PRESALE_SUPPLY;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mints monster tokens during presale, optionally with discounts\\r\\n     * @param _numberOfTokens Number of tokens to mint\\r\\n     * @param _satsForDiscount Array of Satoshible IDs for discounted mints\\r\\n     * @param _whitelistedTokens Account's total number of whitelisted tokens\\r\\n     * @param _proof Merkle proof to be verified\\r\\n     */\\r\\n    function mintTokensPresale(\\r\\n        uint256 _numberOfTokens,\\r\\n        uint256[] calldata _satsForDiscount,\\r\\n        uint256 _whitelistedTokens,\\r\\n        bytes32[] calldata _proof\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n    {\\r\\n        require(\\r\\n            publicSaleOpenedEarly == false,\\r\\n            \\\"Presale has ended\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            belowMaximum(monsterIds.current(), _numberOfTokens,\\r\\n                MAX_PRESALE_TOKEN_ID\\r\\n            ) == true,\\r\\n            \\\"Would exceed presale size\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            belowMaximum(whitelistMintsUsed[_msgSender()], _numberOfTokens,\\r\\n                _whitelistedTokens\\r\\n            ) == true,\\r\\n            \\\"Would exceed whitelisted count\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            verifyWhitelisted(_msgSender(), _whitelistedTokens,\\r\\n                _proof\\r\\n            ) == true,\\r\\n            \\\"Invalid whitelist proof\\\"\\r\\n        );\\r\\n\\r\\n        whitelistMintsUsed[_msgSender()] += _numberOfTokens;\\r\\n\\r\\n        _doMintTokens(\\r\\n            _numberOfTokens,\\r\\n            _satsForDiscount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mints monsters during public sale, optionally with discounts\\r\\n     * @param _numberOfTokens Number of monster tokens to mint\\r\\n     * @param _satsForDiscount Array of Satoshible IDs for discounted mints\\r\\n     */\\r\\n    function mintTokensPublicSale(\\r\\n        uint256 _numberOfTokens,\\r\\n        uint256[] calldata _satsForDiscount\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n    {\\r\\n        require(\\r\\n            publicSaleOpened() == true,\\r\\n            \\\"Public sale has not started\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            belowMaximum(monsterIds.current(), _numberOfTokens,\\r\\n                MAX_SUPPLY\\r\\n            ) == true,\\r\\n            \\\"Not enough tokens left\\\"\\r\\n        );\\r\\n\\r\\n        _doMintTokens(\\r\\n            _numberOfTokens,\\r\\n            _satsForDiscount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mints a prime token by burning two or more monster tokens\\r\\n     * @param _primeType Prime type to mint\\r\\n     * @param _satId Original Satoshible token ID to use as 'key' to the lab\\r\\n     * @param _monsterIds Array of monster token IDs to potentially be burned\\r\\n     * @param _monsterPrimeParts Array of bitfields of monsters' prime parts\\r\\n     * @param _proofs Array of merkle proofs to be verified\\r\\n     */\\r\\n    function mintPrimeToken(\\r\\n        uint256 _primeType,\\r\\n        uint256 _satId,\\r\\n        uint256[] calldata _monsterIds,\\r\\n        uint256[] calldata _monsterPrimeParts,\\r\\n        bytes32[][] calldata _proofs\\r\\n    )\\r\\n        external\\r\\n        onlySatHolder(_satId)\\r\\n    {\\r\\n        require(\\r\\n            laboratoryHasElectricity == true,\\r\\n            \\\"Prime laboratory not yet open\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _primeType < INVALID,\\r\\n            \\\"Invalid prime type\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            belowMaximum(\\r\\n                primeIdOffset[_primeType],\\r\\n                primeIds[_primeType].current() + 1,\\r\\n                primeIdOffset[_primeType + 1]\\r\\n            ) == true,\\r\\n            \\\"No more primes left of this type\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            satIsAvailableForLab(_satId) == true,\\r\\n            \\\"Sat has already been used in lab\\\"\\r\\n        );\\r\\n\\r\\n        // bitfield tracking aggregate parts across monsters\\r\\n        // (head = 1, eyes = 2, mouth = 4, body = 8)\\r\\n        uint256 combinedParts;\\r\\n\\r\\n        uint256[4] memory burnedIds;\\r\\n\\r\\n        unchecked {\\r\\n            uint256 burnedIndex;\\r\\n            for (uint256 i = 0; i < _monsterIds.length; i++) {\\r\\n                require(\\r\\n                    verifyMonsterPrimeParts(\\r\\n                        _monsterIds[i],\\r\\n                        _monsterPrimeParts[i],\\r\\n                        _proofs[i]\\r\\n                    ) == true,\\r\\n                    \\\"Invalid monster traits proof\\\"\\r\\n                );\\r\\n\\r\\n                uint256 theseParts = _monsterPrimeParts[i]\\r\\n                    >> (_primeType * NUM_PARTS) & HAS_ALL_PARTS;\\r\\n\\r\\n                if (combinedParts | theseParts != combinedParts) {\\r\\n                    _burn(\\r\\n                        _monsterIds[i]\\r\\n                    );\\r\\n                    burnedIds[burnedIndex++] = _monsterIds[i];\\r\\n                    combinedParts |= theseParts;\\r\\n                    if (combinedParts == HAS_ALL_PARTS) {\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            combinedParts == HAS_ALL_PARTS,\\r\\n            \\\"Not enough parts for this prime\\\"\\r\\n        );\\r\\n\\r\\n        _retireSatFromLab(_satId);\\r\\n        primeIds[_primeType].increment();\\r\\n\\r\\n        unchecked {\\r\\n            uint256 primeId = primeIdOffset[_primeType]\\r\\n                + primeIds[_primeType].current();\\r\\n\\r\\n            totalSupply++;\\r\\n\\r\\n            _safeMint(\\r\\n                _msgSender(),\\r\\n                primeId\\r\\n            );\\r\\n\\r\\n            emit PrimeCreated(\\r\\n                _msgSender(),\\r\\n                primeId,\\r\\n                _satId,\\r\\n                burnedIds\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Activates or deactivates the sale\\r\\n     * @param _isActive Whether to activate or deactivate the sale\\r\\n     */\\r\\n    function activateSale(\\r\\n        bool _isActive\\r\\n    )\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        saleIsActive = _isActive;\\r\\n\\r\\n        emit SaleStateChanged(\\r\\n            _isActive\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Starts the public sale before MAX_PRESALE_TOKEN_ID is minted\\r\\n     */\\r\\n    function openPublicSaleEarly()\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        publicSaleOpenedEarly = true;\\r\\n\\r\\n        emit PublicSaleOpenedEarly();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Modifies the prices in case of major ETH price changes\\r\\n     * @param _tokenPrice The new default token price\\r\\n     * @param _discountPrice The new discount token price\\r\\n     */\\r\\n    function updateTokenPrices(\\r\\n        uint256 _tokenPrice,\\r\\n        uint256 _discountPrice\\r\\n    )\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            _tokenPrice >= _discountPrice,\\r\\n            \\\"discountPrice cannot be larger\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            saleIsActive == false,\\r\\n            \\\"Sale is active\\\"\\r\\n        );\\r\\n\\r\\n        tokenPrice = _tokenPrice;\\r\\n        discountPrice = _discountPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets primePartsMerkleRoot summarizing all monster prime parts\\r\\n     * @param _merkleRoot The new merkle root\\r\\n     */\\r\\n    function setPrimePartsMerkleRoot(\\r\\n        bytes32 _merkleRoot\\r\\n    )\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        primePartsMerkleRoot = _merkleRoot;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Turns the laboratory on or off\\r\\n     * @param _hasElectricity Whether to turn the laboratory on or off\\r\\n     */\\r\\n    function electrifyLaboratory(\\r\\n        bool _hasElectricity\\r\\n    )\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        laboratoryHasElectricity = _hasElectricity;\\r\\n\\r\\n        emit LaboratoryStateChanged(\\r\\n            _hasElectricity\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mints the final prime token\\r\\n     */\\r\\n    function mintFinalPrime()\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            _exists(OMEGA) == false,\\r\\n            \\\"Final prime already exists\\\"\\r\\n        );\\r\\n\\r\\n        unchecked {\\r\\n            totalSupply++;\\r\\n        }\\r\\n\\r\\n        _safeMint(\\r\\n            _msgSender(),\\r\\n            OMEGA\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the provenance URI\\r\\n     * @param _newProvenanceURI The new provenance URI\\r\\n     */\\r\\n    function setProvenanceURI(\\r\\n        string calldata _newProvenanceURI\\r\\n    )\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            provenanceUriLocked == false,\\r\\n            \\\"Provenance URI has been locked\\\"\\r\\n        );\\r\\n\\r\\n        provenanceURI = _newProvenanceURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Prevents further changes to the provenance URI\\r\\n     */\\r\\n    function lockProvenanceURI()\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        provenanceUriLocked = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets a new base URI\\r\\n     * @param _newBaseURI The new base URI\\r\\n     */\\r\\n    function setBaseURI(\\r\\n        string calldata _newBaseURI\\r\\n    )\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            baseUriLocked == false,\\r\\n            \\\"Base URI has been locked\\\"\\r\\n        );\\r\\n\\r\\n        baseURI = _newBaseURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Prevents further changes to the base URI\\r\\n     */\\r\\n    function lockBaseURI()\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        baseUriLocked = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws sale proceeds\\r\\n     * @param _amount Amount to withdraw in wei\\r\\n     */\\r\\n    function withdraw(\\r\\n        uint256 _amount\\r\\n    )\\r\\n        external\\r\\n        onlyTeam\\r\\n    {\\r\\n        payable(_msgSender()).transfer(\\r\\n            _amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws any other tokens\\r\\n     * @dev WARNING: Double check token is legit before calling this\\r\\n     * @param _token Contract address of token\\r\\n     * @param _to Address to which to withdraw\\r\\n     * @param _amount Amount to withdraw\\r\\n     * @param _hasVerifiedToken Must be true (sanity check)\\r\\n     */\\r\\n    function withdrawOther(\\r\\n        address _token,\\r\\n        address _to,\\r\\n        uint256 _amount,\\r\\n        bool _hasVerifiedToken\\r\\n    )\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            _hasVerifiedToken == true,\\r\\n            \\\"Need to verify token\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(_token).transfer(\\r\\n            _to,\\r\\n            _amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets token royalties (ERC-2981)\\r\\n     * @param _recipient Recipient of the royalties\\r\\n     * @param _value Royalty percentage (using 2 decimals - 10000 = 100, 0 = 0)\\r\\n     */\\r\\n    function setRoyalties(\\r\\n        address _recipient,\\r\\n        uint256 _value\\r\\n    )\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            _value <= MAX_ROYALTIES_PCT,\\r\\n            \\\"Royalties too high\\\"\\r\\n        );\\r\\n\\r\\n        _setRoyalties(\\r\\n            _recipient,\\r\\n            _value\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks which Satoshibles can still be used for a discounted mint\\r\\n     * @dev Uses bitwise operators to find the bit representing each Satoshible\\r\\n     * @param _satIds Array of original Satoshible token IDs\\r\\n     * @return Token ID for each of the available _satIds, zero otherwise\\r\\n     */\\r\\n    function satsAvailableForDiscountMint(\\r\\n        uint256[] calldata _satIds\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256[] memory satsAvailable = new uint256[](_satIds.length);\\r\\n\\r\\n        unchecked {\\r\\n            for (uint256 i = 0; i < _satIds.length; i++) {\\r\\n                if (satIsAvailableForDiscountMint(_satIds[i])) {\\r\\n                    satsAvailable[i] = _satIds[i];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return satsAvailable;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks which Satoshibles can still be used to mint a prime\\r\\n     * @dev Uses bitwise operators to find the bit representing each Satoshible\\r\\n     * @param _satIds Array of original Satoshible token IDs\\r\\n     * @return Token ID for each of the available _satIds, zero otherwise\\r\\n     */\\r\\n    function satsAvailableForLab(\\r\\n        uint256[] calldata _satIds\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256[] memory satsAvailable = new uint256[](_satIds.length);\\r\\n\\r\\n        unchecked {\\r\\n            for (uint256 i = 0; i < _satIds.length; i++) {\\r\\n                if (satIsAvailableForLab(_satIds[i])) {\\r\\n                    satsAvailable[i] = _satIds[i];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return satsAvailable;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a Satoshible can still be used for a discounted mint\\r\\n     * @dev Uses bitwise operators to find the bit representing the Satoshible\\r\\n     * @param _satId Original Satoshible token ID\\r\\n     * @return isAvailable True if _satId can be used for a discounted mint\\r\\n     */\\r\\n    function satIsAvailableForDiscountMint(\\r\\n        uint256 _satId\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (bool isAvailable)\\r\\n    {\\r\\n        unchecked {\\r\\n            uint256 page = _satId / 256;\\r\\n            uint256 shift = _satId % 256;\\r\\n            isAvailable = satDiscountBitfields[page] >> shift & 1 == 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a Satoshible can still be used to mint a prime\\r\\n     * @dev Uses bitwise operators to find the bit representing the Satoshible\\r\\n     * @param _satId Original Satoshible token ID\\r\\n     * @return isAvailable True if _satId can still be used to mint a prime\\r\\n     */\\r\\n    function satIsAvailableForLab(\\r\\n        uint256 _satId\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (bool isAvailable)\\r\\n    {\\r\\n        unchecked {\\r\\n            uint256 page = _satId / 256;\\r\\n            uint256 shift = _satId % 256;\\r\\n            isAvailable = satLabBitfields[page] >> shift & 1 == 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Verifies a merkle proof for a monster ID and its prime parts\\r\\n     * @param _monsterId Monster token ID\\r\\n     * @param _monsterPrimeParts Bitfield of the monster's prime parts\\r\\n     * @param _proof Merkle proof be verified\\r\\n     * @return isVerified True if the merkle proof is verified\\r\\n     */\\r\\n    function verifyMonsterPrimeParts(\\r\\n        uint256 _monsterId,\\r\\n        uint256 _monsterPrimeParts,\\r\\n        bytes32[] calldata _proof\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (bool isVerified)\\r\\n    {\\r\\n        bytes32 node = keccak256(\\r\\n            abi.encodePacked(\\r\\n                _monsterId,\\r\\n                _monsterPrimeParts\\r\\n            )\\r\\n        );\\r\\n\\r\\n        isVerified = MerkleProof.verify(\\r\\n            _proof,\\r\\n            primePartsMerkleRoot,\\r\\n            node\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets total count of existing prime tokens for a prime type\\r\\n     * @param _primeType Prime type\\r\\n     * @return supply Count of existing prime tokens for this prime type\\r\\n     */\\r\\n    function primeSupply(\\r\\n        uint256 _primeType\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 supply)\\r\\n    {\\r\\n        supply = primeIds[_primeType].current();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets total count of existing prime tokens\\r\\n     * @return supply Count of existing prime tokens\\r\\n     */\\r\\n    function totalPrimeSupply()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 supply)\\r\\n    {\\r\\n        unchecked {\\r\\n            supply = primeSupply(FRANKENSTEIN)\\r\\n                + primeSupply(WEREWOLF)\\r\\n                + primeSupply(VAMPIRE)\\r\\n                + primeSupply(ZOMBIE)\\r\\n                + (_exists(OMEGA) ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets total count of monsters burned\\r\\n     * @return burned Count of monsters burned\\r\\n     */\\r\\n    function monstersBurned()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 burned)\\r\\n    {\\r\\n        unchecked {\\r\\n            burned = monsterIds.current() + totalPrimeSupply() - totalSupply;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets state of public sale\\r\\n     * @return publicSaleIsOpen True if public sale phase has begun\\r\\n     */\\r\\n    function publicSaleOpened()\\r\\n        public\\r\\n        view\\r\\n        returns (bool publicSaleIsOpen)\\r\\n    {\\r\\n        publicSaleIsOpen =\\r\\n            publicSaleOpenedEarly == true ||\\r\\n            monsterIds.current() >= MAX_PRESALE_TOKEN_ID;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc\\tERC165\\r\\n    function supportsInterface(\\r\\n        bytes4 _interfaceId\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override (ERC721, ERC2981Base)\\r\\n        returns (bool doesSupportInterface)\\r\\n    {\\r\\n        doesSupportInterface = super.supportsInterface(_interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Verifies a merkle proof for an account's whitelisted tokens\\r\\n     * @param _account Account to verify\\r\\n     * @param _whitelistedTokens Number of whitelisted tokens for _account\\r\\n     * @param _proof Merkle proof to be verified\\r\\n     * @return isVerified True if the merkle proof is verified\\r\\n     */\\r\\n    function verifyWhitelisted(\\r\\n        address _account,\\r\\n        uint256 _whitelistedTokens,\\r\\n        bytes32[] calldata _proof\\r\\n    )\\r\\n        public\\r\\n        pure\\r\\n        returns (bool isVerified)\\r\\n    {\\r\\n        bytes32 node = keccak256(\\r\\n            abi.encodePacked(\\r\\n                _account,\\r\\n                _whitelistedTokens\\r\\n            )\\r\\n        );\\r\\n\\r\\n        isVerified = MerkleProof.verify(\\r\\n            _proof,\\r\\n            WHITELIST_MERKLE_ROOT,\\r\\n            node\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base monster burning function\\r\\n     * @param _tokenId Monster token ID to burn\\r\\n     */\\r\\n    function _burn(\\r\\n        uint256 _tokenId\\r\\n    )\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        require(\\r\\n            _isApprovedOrOwner(_msgSender(), _tokenId) == true,\\r\\n            \\\"not owner nor approved\\\"\\r\\n        );\\r\\n\\r\\n        unchecked {\\r\\n            totalSupply -= 1;\\r\\n        }\\r\\n\\r\\n        super._burn(\\r\\n            _tokenId\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing tokenURI\\r\\n     * @return Base URI string\\r\\n     */\\r\\n    function _baseURI()\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base monster minting function, calculates price with discounts\\r\\n     * @param _numberOfTokens Number of monster tokens to mint\\r\\n     * @param _satsForDiscount Array of Satoshible IDs for discounted mints\\r\\n     */\\r\\n    function _doMintTokens(\\r\\n        uint256 _numberOfTokens,\\r\\n        uint256[] calldata _satsForDiscount\\r\\n    )\\r\\n        private\\r\\n    {\\r\\n        require(\\r\\n            saleIsActive == true,\\r\\n            \\\"Sale must be active\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _numberOfTokens >= 1,\\r\\n            \\\"Need at least 1 token\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _numberOfTokens <= 50,\\r\\n            \\\"Max 50 at a time\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _satsForDiscount.length <= _numberOfTokens,\\r\\n            \\\"Too many sats for discount\\\"\\r\\n        );\\r\\n\\r\\n        unchecked {\\r\\n            uint256 discountIndex;\\r\\n\\r\\n            for (; discountIndex < _satsForDiscount.length; discountIndex++) {\\r\\n                _useSatForDiscountMint(_satsForDiscount[discountIndex]);\\r\\n            }\\r\\n\\r\\n            uint256 totalPrice = tokenPrice * (_numberOfTokens - discountIndex)\\r\\n                + discountPrice * discountIndex;\\r\\n\\r\\n            require(\\r\\n                totalPrice == msg.value,\\r\\n                \\\"Ether amount not correct\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _mintTokens(\\r\\n            _numberOfTokens\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base monster minting function.\\r\\n     * @param _numberOfTokens Number of monster tokens to mint\\r\\n     */\\r\\n    function _mintTokens(\\r\\n        uint256 _numberOfTokens\\r\\n    )\\r\\n        private\\r\\n    {\\r\\n        unchecked {\\r\\n            totalSupply += _numberOfTokens;\\r\\n\\r\\n            for (uint256 i = 0; i < _numberOfTokens; i++) {\\r\\n                monsterIds.increment();\\r\\n                _safeMint(\\r\\n                    _msgSender(),\\r\\n                    monsterIds.current()\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Marks a Satoshible ID as having been used for a discounted mint\\r\\n     * @param _satId Satoshible ID that was used for a discounted mint\\r\\n     */\\r\\n    function _useSatForDiscountMint(\\r\\n        uint256 _satId\\r\\n    )\\r\\n        private\\r\\n        onlySatHolder(_satId)\\r\\n    {\\r\\n        require(\\r\\n            satIsAvailableForDiscountMint(_satId) == true,\\r\\n            \\\"Sat for discount already used\\\"\\r\\n        );\\r\\n\\r\\n        unchecked {\\r\\n            uint256 page = _satId / 256;\\r\\n            uint256 shift = _satId % 256;\\r\\n            satDiscountBitfields[page] &= ~(1 << shift);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Marks a Satoshible ID as having been used to mint a prime\\r\\n     * @param _satId Satoshible ID that was used to mint a prime\\r\\n     */\\r\\n    function _retireSatFromLab(\\r\\n        uint256 _satId\\r\\n    )\\r\\n        private\\r\\n    {\\r\\n        unchecked {\\r\\n            uint256 page = _satId / 256;\\r\\n            uint256 shift = _satId % 256;\\r\\n            satLabBitfields[page] &= ~(1 << shift);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes prime token ID offsets\\r\\n     */\\r\\n    function _initializePrimeIdOffsets()\\r\\n        private\\r\\n    {\\r\\n        unchecked {\\r\\n            primeIdOffset[FRANKENSTEIN] = ALPHA;\\r\\n            primeIdOffset[WEREWOLF] = ALPHA + 166;\\r\\n            primeIdOffset[VAMPIRE] = ALPHA + 332;\\r\\n            primeIdOffset[ZOMBIE] = ALPHA + 498;\\r\\n            primeIdOffset[INVALID] = ALPHA + 665;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes bitfields of Satoshibles available for discounted mints\\r\\n     */\\r\\n    function _initializeSatDiscountAvailability()\\r\\n        private\\r\\n    {\\r\\n        unchecked {\\r\\n            for (uint256 i = 0; i < 20; i++) {\\r\\n                satDiscountBitfields[i] = type(uint256).max;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes bitfields of Satoshibles available to mint primes\\r\\n     */\\r\\n    function _initializeSatLabAvailability()\\r\\n        private\\r\\n    {\\r\\n        unchecked {\\r\\n            for (uint256 i = 0; i < 20; i++) {\\r\\n                satLabBitfields[i] = type(uint256).max;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Helper function used for token ID range checks when minting\\r\\n     * @param _currentValue Current token ID counter value\\r\\n     * @param _incrementValue Number of tokens to increment by\\r\\n     * @param _maximumValue Maximum token ID value allowed\\r\\n     * @return isBelowMaximum True if _maximumValue is not exceeded\\r\\n     */\\r\\n    function belowMaximum(\\r\\n        uint256 _currentValue,\\r\\n        uint256 _incrementValue,\\r\\n        uint256 _maximumValue\\r\\n    )\\r\\n        private\\r\\n        pure\\r\\n        returns (bool isBelowMaximum)\\r\\n    {\\r\\n        unchecked {\\r\\n            isBelowMaximum = _currentValue + _incrementValue <= _maximumValue;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nlibrary MerkleProof {\\r\\n    function verify(\\r\\n        bytes32[] memory proof,\\r\\n        bytes32 root,\\r\\n        bytes32 leaf\\r\\n    )\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        bytes32 computedHash = leaf;\\r\\n\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            bytes32 proofElement = proof[i];\\r\\n\\r\\n            if (computedHash <= proofElement) {\\r\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\r\\n            } else {\\r\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return computedHash == root;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/IERC2981Royalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/// @title IERC2981Royalties\\r\\n/// @dev Interface for the ERC2981 - Token Royalty standard\\r\\ninterface IERC2981Royalties {\\r\\n\\t/// @notice Called with the sale price to determine how much royalty\\r\\n\\t//          is owed and to whom.\\r\\n\\t/// @param _tokenId - the NFT asset queried for royalty information\\r\\n\\t/// @param _value - the sale price of the NFT asset specified by _tokenId\\r\\n\\t/// @return _receiver - address of who should be sent the royalty payment\\r\\n\\t/// @return _royaltyAmount - the royalty payment amount for value sale price\\r\\n\\tfunction royaltyInfo(uint256 _tokenId, uint256 _value)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (address _receiver, uint256 _royaltyAmount);\\r\\n}\"\r\n    },\r\n    \"/contracts/ERC2981ContractWideRoyalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\nimport \\\"./ERC2981Base.sol\\\";\\r\\n\\r\\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\\r\\n/// @dev This implementation has the same royalties for each and every tokens\\r\\nabstract contract ERC2981ContractWideRoyalties is ERC2981Base {\\r\\n\\tRoyaltyInfo private _royalties;\\r\\n\\r\\n\\t/// @dev Sets token royalties\\r\\n\\t/// @param _recipient recipient of the royalties\\r\\n\\t/// @param _value percentage (using 2 decimals - 10000 = 100, 0 = 0)\\r\\n\\tfunction _setRoyalties(\\r\\n\\t\\taddress _recipient,\\r\\n\\t\\tuint256 _value\\r\\n\\t)\\r\\n\\t\\tinternal\\r\\n\\t{\\r\\n\\t\\trequire(_value <= 10000, \\\"ERC2981Royalties: Too high\\\");\\r\\n\\t\\t_royalties = RoyaltyInfo(_recipient, uint24(_value));\\r\\n\\t}\\r\\n\\r\\n\\t/// @inheritdoc\\tIERC2981Royalties\\r\\n\\tfunction royaltyInfo(\\r\\n\\t\\tuint256,\\r\\n\\t\\tuint256 _value\\r\\n\\t)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\toverride\\r\\n\\t\\treturns (address receiver, uint256 royaltyAmount)\\r\\n\\t{\\r\\n\\t\\tRoyaltyInfo memory royalties = _royalties;\\r\\n\\t\\treceiver = royalties.recipient;\\r\\n\\t\\troyaltyAmount = (_value * royalties.amount) / 10000;\\r\\n\\t}\\r\\n}\"\r\n    },\r\n    \"/contracts/ERC2981Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"./IERC2981Royalties.sol\\\";\\r\\n\\r\\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\\r\\nabstract contract ERC2981Base is ERC165, IERC2981Royalties {\\r\\n\\tstruct RoyaltyInfo {\\r\\n\\t\\taddress recipient;\\r\\n\\t\\tuint24 amount;\\r\\n\\t}\\r\\n\\r\\n\\t/// @inheritdoc\\tERC165\\r\\n\\tfunction supportsInterface(bytes4 interfaceId)\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\tvirtual\\r\\n\\t\\toverride\\r\\n\\t\\treturns (bool)\\r\\n\\t{\\r\\n\\t\\treturn\\r\\n\\t\\t\\tinterfaceId == type(IERC2981Royalties).interfaceId ||\\r\\n\\t\\t\\tsuper.supportsInterface(interfaceId);\\r\\n\\t}\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 6666\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialBatchCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_immutableSatoshible\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltiesPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"hasElectricity\",\"type\":\"bool\"}],\"name\":\"LaboratoryStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"primeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"satId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"monsterIdsBurned\",\"type\":\"uint256[4]\"}],\"name\":\"PrimeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PublicSaleOpenedEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"SaleStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PRESALE_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PRESALE_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ROYALTIES_PCT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SATOSHIBLE_CONTRACT\",\"outputs\":[{\"internalType\":\"contract ISatoshible\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_WALLET_A\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_WALLET_B\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_WALLET_C\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_WALLET_D\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_MERKLE_ROOT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"activateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseUriLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasElectricity\",\"type\":\"bool\"}],\"name\":\"electrifyLaboratory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"laboratoryHasElectricity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockProvenanceURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFinalPrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_primeType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_satId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_monsterIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_monsterPrimeParts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"_proofs\",\"type\":\"bytes32[][]\"}],\"name\":\"mintPrimeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_satsForDiscount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_whitelistedTokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"mintTokensPresale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_satsForDiscount\",\"type\":\"uint256[]\"}],\"name\":\"mintTokensPublicSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"monstersBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openPublicSaleEarly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primePartsMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_primeType\",\"type\":\"uint256\"}],\"name\":\"primeSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provenanceURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provenanceUriLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"publicSaleIsOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleOpenedEarly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_satId\",\"type\":\"uint256\"}],\"name\":\"satIsAvailableForDiscountMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAvailable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_satId\",\"type\":\"uint256\"}],\"name\":\"satIsAvailableForLab\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAvailable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_satIds\",\"type\":\"uint256[]\"}],\"name\":\"satsAvailableForDiscountMint\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_satIds\",\"type\":\"uint256[]\"}],\"name\":\"satsAvailableForLab\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setPrimePartsMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newProvenanceURI\",\"type\":\"string\"}],\"name\":\"setProvenanceURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"doesSupportInterface\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPrimeSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discountPrice\",\"type\":\"uint256\"}],\"name\":\"updateTokenPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_monsterId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_monsterPrimeParts\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyMonsterPrimeParts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_whitelistedTokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistMintsUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasVerifiedToken\",\"type\":\"bool\"}],\"name\":\"withdrawOther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MonsterSatoshible","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"6666","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000b0b186841c55d8a09d53db48dc8cab9dbf4dbd60000000000000000000000000000000000000000000000000000000000000258","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}