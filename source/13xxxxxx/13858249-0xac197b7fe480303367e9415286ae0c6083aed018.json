{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/YieldFarmExtended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// import \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Staking.sol\\\";\\n\\ncontract YieldFarmExtended {\\n    // lib\\n    using SafeMath for uint256;\\n    using SafeMath for uint128;\\n\\n    // constants\\n    uint256 public constant TOTAL_DISTRIBUTED_AMOUNT = 70_000_000;\\n    uint256 public constant NR_OF_EPOCHS = 40;\\n    uint128 public constant EPOCHS_DELAYED_FROM_STAKING_CONTRACT = 25;\\n\\n    // addreses\\n    address private _lpTokenAddress;\\n    address private _communityVault;\\n\\n    // contracts\\n    IERC20 private _sylo;\\n    Staking private _staking;\\n\\n    uint256[] private epochs = new uint256[](NR_OF_EPOCHS + 1);\\n    uint256 private _totalAmountPerEpoch;\\n    uint128 public lastInitializedEpoch;\\n    mapping(address => uint128) private lastEpochIdHarvested;\\n    uint256 public epochDuration;\\n    uint256 public epochStart;\\n\\n    // events\\n    event MassHarvest(\\n        address indexed user,\\n        uint256 epochsHarvested,\\n        uint256 totalValue\\n    );\\n    event Harvest(\\n        address indexed user,\\n        uint128 indexed epochId,\\n        uint256 amount\\n    );\\n\\n    // constructor\\n    constructor(\\n        address syloTokenAddress,\\n        address lpTokenAddress,\\n        Staking stakeContract,\\n        address communityVault\\n    ) {\\n        require(syloTokenAddress != address(0), \\\"Sylo token address is required\\\");\\n        require(lpTokenAddress != address(0), \\\"LP token address is required\\\");\\n        require(communityVault != address(0), \\\"Community Vault address is required\\\");\\n\\n        _sylo = IERC20(syloTokenAddress);\\n        _lpTokenAddress = lpTokenAddress;\\n        _staking = stakeContract;\\n        _communityVault = communityVault;\\n        epochDuration = _staking.epochDuration();\\n        epochStart =\\n            _staking.epoch1Start() +\\n            epochDuration.mul(EPOCHS_DELAYED_FROM_STAKING_CONTRACT);\\n        _totalAmountPerEpoch =\\n            TOTAL_DISTRIBUTED_AMOUNT\\n                .mul(10**18)\\n                .div(NR_OF_EPOCHS);\\n    }\\n\\n    // public methods\\n    // public method to harvest all the unharvested epochs until current epoch - 1\\n    function massHarvest() external returns (uint256) {\\n        uint256 totalDistributedValue;\\n        uint256 epochId = _getEpochId().sub(1); // fails in epoch 0\\n        // force max number of epochs\\n        if (epochId > NR_OF_EPOCHS) {\\n            epochId = NR_OF_EPOCHS;\\n        }\\n\\n        for (\\n            uint128 i = lastEpochIdHarvested[msg.sender] + 1;\\n            i <= epochId;\\n            i++\\n        ) {\\n            // i = epochId\\n            // compute distributed Value and do one single transfer at the end\\n            totalDistributedValue += _harvest(i);\\n        }\\n\\n        emit MassHarvest(\\n            msg.sender,\\n            epochId - lastEpochIdHarvested[msg.sender],\\n            totalDistributedValue\\n        );\\n\\n        if (totalDistributedValue > 0) {\\n            bool success = _sylo.transferFrom(\\n                _communityVault,\\n                msg.sender,\\n                totalDistributedValue\\n            );\\n            require(success, \\\"Failed to transfer mass harvest reward\\\");\\n        }\\n\\n        return totalDistributedValue;\\n    }\\n\\n    function harvest(uint128 epochId) external returns (uint256) {\\n        // checks for requested epoch\\n        require(_getEpochId() > epochId, \\\"This epoch is in the future\\\");\\n        require(epochId <= NR_OF_EPOCHS, \\\"Maximum number of epochs is 12\\\");\\n        require(\\n            lastEpochIdHarvested[msg.sender].add(1) == epochId,\\n            \\\"Harvest in order\\\"\\n        );\\n        uint256 userReward = _harvest(epochId);\\n        if (userReward > 0) {\\n            bool success = _sylo.transferFrom(_communityVault, msg.sender, userReward);\\n            require(success, \\\"Failed to transfer harvest reward\\\");\\n        }\\n        emit Harvest(msg.sender, epochId, userReward);\\n        return userReward;\\n    }\\n\\n    // views\\n    // calls to the staking smart contract to retrieve the epoch total pool size\\n    function getPoolSize(uint128 epochId) external view returns (uint256) {\\n        return _getPoolSize(epochId);\\n    }\\n\\n    function getCurrentEpoch() external view returns (uint256) {\\n        return _getEpochId();\\n    }\\n\\n    // calls to the staking smart contract to retrieve user balance for an epoch\\n    function getEpochStake(address userAddress, uint128 epochId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _getUserBalancePerEpoch(userAddress, epochId);\\n    }\\n\\n    function userLastEpochIdHarvested() external view returns (uint256) {\\n        return lastEpochIdHarvested[msg.sender];\\n    }\\n\\n    // internal methods\\n\\n    function _initEpoch(uint128 epochId) internal {\\n        require(\\n            lastInitializedEpoch.add(1) == epochId,\\n            \\\"Epoch can be init only in order\\\"\\n        );\\n        lastInitializedEpoch = epochId;\\n        // call the staking smart contract to init the epoch\\n        epochs[epochId] = _getPoolSize(epochId);\\n    }\\n\\n    function _harvest(uint128 epochId) internal returns (uint256) {\\n        // try to initialize an epoch. if it can't it fails\\n        // if it fails either user either a Plug account will init not init epochs\\n        if (lastInitializedEpoch < epochId) {\\n            _initEpoch(epochId);\\n        }\\n        // Set user state for last harvested\\n        lastEpochIdHarvested[msg.sender] = epochId;\\n        // compute and return user total reward. For optimization reasons the transfer have been moved to an upper layer (i.e. massHarvest needs to do a single transfer)\\n\\n        // exit if there is no stake on the epoch\\n        if (epochs[epochId] == 0) {\\n            return 0;\\n        }\\n        return\\n            _totalAmountPerEpoch\\n                .mul(_getUserBalancePerEpoch(msg.sender, epochId))\\n                .div(epochs[epochId]);\\n    }\\n\\n    // retrieve _lpTokenAddress token balance\\n    function _getPoolSize(uint128 epochId) internal view returns (uint256) {\\n        return\\n            _staking.getEpochPoolSize(\\n                _lpTokenAddress,\\n                _stakingEpochId(epochId)\\n            );\\n    }\\n\\n    // retrieve _lpTokenAddress token balance per user per epoch\\n    function _getUserBalancePerEpoch(address userAddress, uint128 epochId)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            _staking.getEpochUserBalance(\\n                userAddress,\\n                _lpTokenAddress,\\n                _stakingEpochId(epochId)\\n            );\\n    }\\n\\n    // compute epoch id from block.timestamp and epochStart date\\n    function _getEpochId() internal view returns (uint128 epochId) {\\n        if (block.timestamp < epochStart) {\\n            return 0;\\n        }\\n        epochId = uint128(\\n            block.timestamp.sub(epochStart).div(epochDuration).add(1)\\n        );\\n    }\\n\\n    // get the staking epoch\\n    function _stakingEpochId(uint128 epochId) internal pure returns (uint128) {\\n        return epochId + EPOCHS_DELAYED_FROM_STAKING_CONTRACT;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract Staking is ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    uint128 constant private BASE_MULTIPLIER = uint128(1 * 10 ** 18);\\n\\n    // timestamp for the epoch 1\\n    // everything before that is considered epoch 0 which won't have a reward but allows for the initial stake\\n    uint256 public epoch1Start;\\n\\n    // duration of each epoch\\n    uint256 public epochDuration;\\n\\n    // holds the current balance of the user for each token\\n    mapping(address => mapping(address => uint256)) private balances;\\n\\n    struct Pool {\\n        uint256 size;\\n        bool set;\\n    }\\n\\n    // for each token, we store the total pool size\\n    mapping(address => mapping(uint256 => Pool)) private poolSize;\\n\\n    // a checkpoint of the valid balance of a user for an epoch\\n    struct Checkpoint {\\n        uint128 epochId;\\n        uint128 multiplier;\\n        uint256 startBalance;\\n        uint256 newDeposits;\\n    }\\n\\n    // balanceCheckpoints[user][token][]\\n    mapping(address => mapping(address => Checkpoint[])) private balanceCheckpoints;\\n\\n    mapping(address => uint128) private lastWithdrawEpochId;\\n\\n    event Deposit(address indexed user, address indexed tokenAddress, uint256 amount);\\n    event Withdraw(address indexed user, address indexed tokenAddress, uint256 amount);\\n    event ManualEpochInit(address indexed caller, uint128 indexed epochId, address[] tokens);\\n    event EmergencyWithdraw(address indexed user, address indexed tokenAddress, uint256 amount);\\n\\n    constructor (uint256 _epoch1Start, uint256 _epochDuration) {\\n        epoch1Start = _epoch1Start;\\n        epochDuration = _epochDuration;\\n    }\\n\\n    /*\\n     * Stores `amount` of `tokenAddress` tokens for the `user` into the vault\\n     */\\n    function deposit(address tokenAddress, uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"Staking: Amount must be > 0\\\");\\n\\n        IERC20 token = IERC20(tokenAddress);\\n        uint256 allowance = token.allowance(msg.sender, address(this));\\n        require(allowance >= amount, \\\"Staking: Token allowance too small\\\");\\n\\n        balances[msg.sender][tokenAddress] = balances[msg.sender][tokenAddress].add(amount);\\n\\n        bool success = token.transferFrom(msg.sender, address(this), amount);\\n        require(success, \\\"Failed to transfer deposit\\\");\\n\\n        // epoch logic\\n        uint128 currentEpoch = getCurrentEpoch();\\n        uint128 currentMultiplier = currentEpochMultiplier();\\n\\n        if (!epochIsInitialized(tokenAddress, currentEpoch)) {\\n            address[] memory tokens = new address[](1);\\n            tokens[0] = tokenAddress;\\n            manualEpochInit(tokens, currentEpoch);\\n        }\\n\\n        // update the next epoch pool size\\n        Pool storage pNextEpoch = poolSize[tokenAddress][currentEpoch + 1];\\n        pNextEpoch.size = token.balanceOf(address(this));\\n        pNextEpoch.set = true;\\n\\n        Checkpoint[] storage checkpoints = balanceCheckpoints[msg.sender][tokenAddress];\\n\\n        uint256 balanceBefore = getEpochUserBalance(msg.sender, tokenAddress, currentEpoch);\\n\\n        // if there's no checkpoint yet, it means the user didn't have any activity\\n        // we want to store checkpoints both for the current epoch and next epoch because\\n        // if a user does a withdraw, the current epoch can also be modified and\\n        // we don't want to insert another checkpoint in the middle of the array as that could be expensive\\n        if (checkpoints.length == 0) {\\n            checkpoints.push(Checkpoint(currentEpoch, currentMultiplier, 0, amount));\\n\\n            // next epoch => multiplier is 1, epoch deposits is 0\\n            checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, amount, 0));\\n        } else {\\n            uint256 last = checkpoints.length - 1;\\n\\n            // the last action happened in an older epoch (e.g. a deposit in epoch 3, current epoch is >=5)\\n            if (checkpoints[last].epochId < currentEpoch) {\\n                uint128 multiplier = computeNewMultiplier(\\n                    getCheckpointBalance(checkpoints[last]),\\n                    BASE_MULTIPLIER,\\n                    amount,\\n                    currentMultiplier\\n                );\\n                checkpoints.push(Checkpoint(currentEpoch, multiplier, getCheckpointBalance(checkpoints[last]), amount));\\n\\n                uint256 balance = balances[msg.sender][tokenAddress];\\n                checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, balance, 0));\\n            }\\n            // the last action happened in the previous epoch\\n            else if (checkpoints[last].epochId == currentEpoch) {\\n                checkpoints[last].multiplier = computeNewMultiplier(\\n                    getCheckpointBalance(checkpoints[last]),\\n                    checkpoints[last].multiplier,\\n                    amount,\\n                    currentMultiplier\\n                );\\n                checkpoints[last].newDeposits = checkpoints[last].newDeposits.add(amount);\\n\\n                checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, balances[msg.sender][tokenAddress], 0));\\n            }\\n            // the last action happened in the current epoch\\n            else {\\n                if (last >= 1 && checkpoints[last - 1].epochId == currentEpoch) {\\n                    checkpoints[last - 1].multiplier = computeNewMultiplier(\\n                        getCheckpointBalance(checkpoints[last - 1]),\\n                        checkpoints[last - 1].multiplier,\\n                        amount,\\n                        currentMultiplier\\n                    );\\n                    checkpoints[last - 1].newDeposits = checkpoints[last - 1].newDeposits.add(amount);\\n                }\\n\\n                checkpoints[last].startBalance = balances[msg.sender][tokenAddress];\\n            }\\n        }\\n\\n        uint256 balanceAfter = getEpochUserBalance(msg.sender, tokenAddress, currentEpoch);\\n\\n        poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.add(balanceAfter.sub(balanceBefore));\\n\\n        emit Deposit(msg.sender, tokenAddress, amount);\\n    }\\n\\n    /*\\n     * Removes the deposit of the user and sends the amount of `tokenAddress` back to the `user`\\n     */\\n    function withdraw(address tokenAddress, uint256 amount) external nonReentrant {\\n        require(balances[msg.sender][tokenAddress] >= amount, \\\"Staking: balance too small\\\");\\n\\n        balances[msg.sender][tokenAddress] = balances[msg.sender][tokenAddress].sub(amount);\\n\\n        IERC20 token = IERC20(tokenAddress);\\n        bool success = token.transfer(msg.sender, amount);\\n        require(success, \\\"Failed to transfer withdrawl\\\");\\n\\n        // epoch logic\\n        uint128 currentEpoch = getCurrentEpoch();\\n\\n        lastWithdrawEpochId[tokenAddress] = currentEpoch;\\n\\n        if (!epochIsInitialized(tokenAddress, currentEpoch)) {\\n            address[] memory tokens = new address[](1);\\n            tokens[0] = tokenAddress;\\n            manualEpochInit(tokens, currentEpoch);\\n        }\\n\\n        // update the pool size of the next epoch to its current balance\\n        Pool storage pNextEpoch = poolSize[tokenAddress][currentEpoch + 1];\\n        pNextEpoch.size = token.balanceOf(address(this));\\n        pNextEpoch.set = true;\\n\\n        Checkpoint[] storage checkpoints = balanceCheckpoints[msg.sender][tokenAddress];\\n        uint256 last = checkpoints.length - 1;\\n\\n        // note: it's impossible to have a withdraw and no checkpoints because the balance would be 0 and revert\\n\\n        // there was a deposit in an older epoch (more than 1 behind [eg: previous 0, now 5]) but no other action since then\\n        if (checkpoints[last].epochId < currentEpoch) {\\n            checkpoints.push(Checkpoint(currentEpoch, BASE_MULTIPLIER, balances[msg.sender][tokenAddress], 0));\\n\\n            poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.sub(amount);\\n        }\\n        // there was a deposit in the `epochId - 1` epoch => we have a checkpoint for the current epoch\\n        else if (checkpoints[last].epochId == currentEpoch) {\\n            checkpoints[last].startBalance = balances[msg.sender][tokenAddress];\\n            checkpoints[last].newDeposits = 0;\\n            checkpoints[last].multiplier = BASE_MULTIPLIER;\\n\\n            poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.sub(amount);\\n        }\\n        // there was a deposit in the current epoch\\n        else {\\n            Checkpoint storage currentEpochCheckpoint = checkpoints[last - 1];\\n\\n            uint256 balanceBefore = getCheckpointEffectiveBalance(currentEpochCheckpoint);\\n\\n            // in case of withdraw, we have 2 branches:\\n            // 1. the user withdraws less than he added in the current epoch\\n            // 2. the user withdraws more than he added in the current epoch (including 0)\\n            if (amount < currentEpochCheckpoint.newDeposits) {\\n                uint128 avgDepositMultiplier = uint128(\\n                    balanceBefore.sub(currentEpochCheckpoint.startBalance).mul(BASE_MULTIPLIER).div(currentEpochCheckpoint.newDeposits)\\n                );\\n\\n                currentEpochCheckpoint.newDeposits = currentEpochCheckpoint.newDeposits.sub(amount);\\n\\n                currentEpochCheckpoint.multiplier = computeNewMultiplier(\\n                    currentEpochCheckpoint.startBalance,\\n                    BASE_MULTIPLIER,\\n                    currentEpochCheckpoint.newDeposits,\\n                    avgDepositMultiplier\\n                );\\n            } else {\\n                currentEpochCheckpoint.startBalance = currentEpochCheckpoint.startBalance.sub(\\n                    amount.sub(currentEpochCheckpoint.newDeposits)\\n                );\\n                currentEpochCheckpoint.newDeposits = 0;\\n                currentEpochCheckpoint.multiplier = BASE_MULTIPLIER;\\n            }\\n\\n            uint256 balanceAfter = getCheckpointEffectiveBalance(currentEpochCheckpoint);\\n\\n            poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.sub(balanceBefore.sub(balanceAfter));\\n\\n            checkpoints[last].startBalance = balances[msg.sender][tokenAddress];\\n        }\\n\\n        emit Withdraw(msg.sender, tokenAddress, amount);\\n    }\\n\\n    /*\\n     * manualEpochInit can be used by anyone to initialize an epoch based on the previous one\\n     * This is only applicable if there was no action (deposit/withdraw) in the current epoch.\\n     * Any deposit and withdraw will automatically initialize the current and next epoch.\\n     */\\n    function manualEpochInit(address[] memory tokens, uint128 epochId) public {\\n        require(epochId <= getCurrentEpoch(), \\\"can't init a future epoch\\\");\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            Pool storage p = poolSize[tokens[i]][epochId];\\n\\n            if (epochId == 0) {\\n                p.size = uint256(0);\\n                p.set = true;\\n            } else {\\n                require(!epochIsInitialized(tokens[i], epochId), \\\"Staking: epoch already initialized\\\");\\n                require(epochIsInitialized(tokens[i], epochId - 1), \\\"Staking: previous epoch not initialized\\\");\\n\\n                p.size = poolSize[tokens[i]][epochId - 1].size;\\n                p.set = true;\\n            }\\n        }\\n\\n        emit ManualEpochInit(msg.sender, epochId, tokens);\\n    }\\n\\n    function emergencyWithdraw(address tokenAddress) external {\\n        require((getCurrentEpoch() - lastWithdrawEpochId[tokenAddress]) >= 10, \\\"At least 10 epochs must pass without success\\\");\\n\\n        uint256 totalUserBalance = balances[msg.sender][tokenAddress];\\n        require(totalUserBalance > 0, \\\"Amount must be > 0\\\");\\n\\n        balances[msg.sender][tokenAddress] = 0;\\n\\n        IERC20 token = IERC20(tokenAddress);\\n        bool success = token.transfer(msg.sender, totalUserBalance);\\n        require(success, \\\"Emergency withdraw transfer failed\\\");\\n\\n        emit EmergencyWithdraw(msg.sender, tokenAddress, totalUserBalance);\\n    }\\n\\n    /*\\n     * Returns the valid balance of a user that was taken into consideration in the total pool size for the epoch\\n     * A deposit will only change the next epoch balance.\\n     * A withdraw will decrease the current epoch (and subsequent) balance.\\n     */\\n    function getEpochUserBalance(address user, address token, uint128 epochId) public view returns (uint256) {\\n        Checkpoint[] storage checkpoints = balanceCheckpoints[user][token];\\n\\n        // if there are no checkpoints, it means the user never deposited any tokens, so the balance is 0\\n        if (checkpoints.length == 0 || epochId < checkpoints[0].epochId) {\\n            return 0;\\n        }\\n\\n        uint min = 0;\\n        uint max = checkpoints.length - 1;\\n\\n        // shortcut for blocks newer than the latest checkpoint == current balance\\n        if (epochId >= checkpoints[max].epochId) {\\n            return getCheckpointEffectiveBalance(checkpoints[max]);\\n        }\\n\\n        // binary search of the value in the array\\n        while (max > min) {\\n            uint mid = (max + min + 1) / 2;\\n            if (checkpoints[mid].epochId <= epochId) {\\n                min = mid;\\n            } else {\\n                max = mid - 1;\\n            }\\n        }\\n\\n        return getCheckpointEffectiveBalance(checkpoints[min]);\\n    }\\n\\n    /*\\n     * Returns the amount of `token` that the `user` has currently staked\\n     */\\n    function balanceOf(address user, address token) external view returns (uint256) {\\n        return balances[user][token];\\n    }\\n\\n    /*\\n     * Returns the id of the current epoch derived from block.timestamp\\n     */\\n    function getCurrentEpoch() public view returns (uint128) {\\n        if (block.timestamp < epoch1Start) {\\n            return 0;\\n        }\\n\\n        return uint128((block.timestamp - epoch1Start) / epochDuration + 1);\\n    }\\n\\n    /*\\n     * Returns the total amount of `tokenAddress` that was locked from beginning to end of epoch identified by `epochId`\\n     */\\n    function getEpochPoolSize(address tokenAddress, uint128 epochId) external view returns (uint256) {\\n        // Premises:\\n        // 1. it's impossible to have gaps of uninitialized epochs\\n        // - any deposit or withdraw initialize the current epoch which requires the previous one to be initialized\\n        if (epochIsInitialized(tokenAddress, epochId)) {\\n            return poolSize[tokenAddress][epochId].size;\\n        }\\n\\n        // epochId not initialized and epoch 0 not initialized => there was never any action on this pool\\n        if (!epochIsInitialized(tokenAddress, 0)) {\\n            return 0;\\n        }\\n\\n        // epoch 0 is initialized => there was an action at some point but none that initialized the epochId\\n        // which means the current pool size is equal to the current balance of token held by the staking contract\\n        IERC20 token = IERC20(tokenAddress);\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /*\\n     * Returns the percentage of time left in the current epoch\\n     */\\n    function currentEpochMultiplier() public view returns (uint128) {\\n        uint128 currentEpoch = getCurrentEpoch();\\n        uint256 currentEpochEnd = epoch1Start + currentEpoch * epochDuration;\\n        uint256 timeLeft = currentEpochEnd - block.timestamp;\\n        uint128 multiplier = uint128(timeLeft * BASE_MULTIPLIER / epochDuration);\\n\\n        return multiplier;\\n    }\\n\\n    function computeNewMultiplier(uint256 prevBalance, uint128 prevMultiplier, uint256 amount, uint128 currentMultiplier) public pure returns (uint128) {\\n        uint256 prevAmount = prevBalance.mul(prevMultiplier).div(BASE_MULTIPLIER);\\n        uint256 addAmount = amount.mul(currentMultiplier).div(BASE_MULTIPLIER);\\n        uint128 newMultiplier = uint128(prevAmount.add(addAmount).mul(BASE_MULTIPLIER).div(prevBalance.add(amount)));\\n\\n        return newMultiplier;\\n    }\\n\\n    /*\\n     * Checks if an epoch is initialized, meaning we have a pool size set for it\\n     */\\n    function epochIsInitialized(address token, uint128 epochId) public view returns (bool) {\\n        return poolSize[token][epochId].set;\\n    }\\n\\n    function getCheckpointBalance(Checkpoint memory c) internal pure returns (uint256) {\\n        return c.startBalance.add(c.newDeposits);\\n    }\\n\\n    function getCheckpointEffectiveBalance(Checkpoint memory c) internal pure returns (uint256) {\\n        return getCheckpointBalance(c).mul(c.multiplier).div(BASE_MULTIPLIER);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"syloTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpTokenAddress\",\"type\":\"address\"},{\"internalType\":\"contract Staking\",\"name\":\"stakeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"communityVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochsHarvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"}],\"name\":\"MassHarvest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EPOCHS_DELAYED_FROM_STAKING_CONTRACT\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NR_OF_EPOCHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_DISTRIBUTED_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"getEpochStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"getPoolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastInitializedEpoch\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userLastEpochIdHarvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"YieldFarmExtended","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f293d23bf2cdc05411ca0eddd588eb1977e8dcd40000000000000000000000002a66392317698c5818df7a72a58556049f0ae6f2000000000000000000000000f52ca8c3812ba6b0d820deba852ae781a39fefe700000000000000000000000087eb64e695f1a40a8e86a0cc605a263475221960","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}