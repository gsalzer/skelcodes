{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Plug.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n * Plug.sol\\n *\\n * Author: Jack Kasbeer\\n * Created: August 3, 2021\\n *\\n * Price: 0.0888 ETH\\n * Rinkeby: 0xf9d798514eb5eA645C90D8633FcC3DA17da8288e\\n *\\n * Description: An ERC-721 token that will change based on (1) time held by a single owner and\\n * \\t\\t\\t\\t(2) trades between owners; the different versions give you access to airdrops.\\n *\\n *  - As long as the owner remains the same, every 60 days, the asset will acquire more \\\"juice\\\" \\n * \\t  not only updating the asset, but allowing the owner to receive more airdrops from other \\n *    artists.  This means after a year, the final asset (and most valuable) will now be in the \\n *    owner's wallet (naturally each time, the previous asset is replaced).\\n *  - If the NFT changes owners, the initial/day 0 asset is now what will be seen by the owner,\\n *    and they'll have to wait a full cycle \\\"final asset status\\\" (gold)\\n *  - If a Plug is a Alchemist (final state), it means that it will never lose juice again,\\n *    even if it is transferred.\\n */\\n\\npragma solidity >=0.5.16 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./Kasbeer721.sol\\\";\\n\\n//@title The Plug\\n//@author Jack Kasbeer (gh:@jcksber, tw:@satoshigoat)\\ncontract Plug is Kasbeer721 {\\n\\n\\tusing Counters for Counters.Counter;\\n\\tusing SafeMath for uint256;\\n\\n\\t//@dev Emitted when token is transferred\\n\\tevent PlugTransferred(address indexed from, address indexed to);\\n\\n\\t//@dev How we keep track of how many days a person has held a Plug\\n\\tmapping(uint256 => uint) internal _birthdays; //tokenID -> UTCTime\\n\\n\\tconstructor() Kasbeer721(\\\"the Plug\\\", \\\"PLUG\\\") {\\n\\t\\twhitelistActive = true;\\n\\t\\tcontractUri = \\\"ipfs://QmYUDei8kuEHrPTyEMrWDQSLEtQwzDS16bpFwZab6RZN5j\\\";\\n\\t\\tpayoutAddress = 0x6b8C6E15818C74895c31A1C91390b3d42B336799;//logik\\n\\t\\t_squad[payoutAddress] = true;\\n\\t\\taddToWhitelist(payoutAddress);\\n\\t}\\n\\n\\t// -----------\\n\\t// RESTRICTORS\\n\\t// -----------\\n\\n\\tmodifier batchLimit(uint256 numToMint)\\n\\t{\\n\\t\\trequire(1 <= numToMint && numToMint <= 8, \\\"Plug: mint between 1 and 8\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier plugsAvailable(uint256 numToMint)\\n\\t{\\n\\t\\trequire(_tokenIds.current() + numToMint <= MAX_NUM_TOKENS, \\n\\t\\t\\t\\\"Plug: not enough Plugs remaining to mint\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier tokenExists(uint256 tokenId)\\n\\t{\\n\\t\\trequire(_exists(tokenId), \\\"Plug: nonexistent token\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t// ----------\\n\\t// PLUG MAGIC\\n\\t// ----------\\n\\n\\t//@dev Override 'tokenURI' to account for asset/hash cycling\\n\\tfunction tokenURI(uint256 tokenId) \\n\\t\\ttokenExists(tokenId) public view virtual override returns (string memory) \\n\\t{\\t\\n\\t\\tstring memory baseURI = _baseURI();\\n\\t\\tstring memory hash = _tokenHash(tokenId);\\n\\t\\t\\n\\t\\treturn string(abi.encodePacked(baseURI, hash));\\n\\t}\\n\\n\\t//@dev Based on the number of days that have passed since the last transfer of\\n\\t// ownership, this function returns the appropriate IPFS hash\\n\\tfunction _tokenHash(uint256 tokenId) \\n\\t\\tinternal virtual view \\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\tif (!_exists(tokenId)) {\\n\\t\\t\\treturn \\\"\\\";//not a require statement to avoid errors being thrown\\n\\t\\t}\\n\\n\\t\\t// Calculate days gone by for this particular token \\n\\t\\tuint daysPassed = countDaysPassed(tokenId);\\n\\n\\t\\t// Based on the number of days that have gone by, return the appropriate state of the Plug\\n\\t\\tif (daysPassed >= 557) {\\n\\t\\t\\tif (tokenId <= 176) {\\n\\t\\t\\t\\treturn chiHashes[7];\\n\\t\\t\\t} else if (tokenId % 88 == 0) {\\n\\t\\t\\t\\treturn stlHashes[7];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn normHashes[7];\\n\\t\\t\\t}\\n\\t\\t} else if (daysPassed >= 360) {\\n\\t\\t\\tif (tokenId <= 176) {\\n\\t\\t\\t\\treturn chiHashes[6];\\n\\t\\t\\t} else if (tokenId % 88 == 0) {\\n\\t\\t\\t\\treturn stlHashes[6];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn normHashes[6];\\n\\t\\t\\t}\\n\\t\\t} else if (daysPassed >= 300) {\\n\\t\\t\\tif (tokenId <= 176) {\\n\\t\\t\\t\\treturn chiHashes[5];\\n\\t\\t\\t} else if (tokenId % 88 == 0) {\\n\\t\\t\\t\\treturn stlHashes[5];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn normHashes[5];\\n\\t\\t\\t}\\n\\t\\t} else if (daysPassed >= 240) {\\n\\t\\t\\tif (tokenId <= 176) {\\n\\t\\t\\t\\treturn chiHashes[4];\\n\\t\\t\\t} else if (tokenId % 88 == 0) {\\n\\t\\t\\t\\treturn stlHashes[4];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn normHashes[4];\\n\\t\\t\\t}\\n\\t\\t} else if (daysPassed >= 180) {\\n\\t\\t\\tif (tokenId <= 176) {\\n\\t\\t\\t\\treturn chiHashes[3];\\n\\t\\t\\t} else if (tokenId % 88 == 0) {\\n\\t\\t\\t\\treturn stlHashes[3];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn normHashes[3];\\n\\t\\t\\t}\\n\\t\\t} else if (daysPassed >= 120) {\\n\\t\\t\\tif (tokenId <= 176) {\\n\\t\\t\\t\\treturn chiHashes[2];\\n\\t\\t\\t} else if (tokenId % 88 == 0) {\\n\\t\\t\\t\\treturn stlHashes[2];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn normHashes[2];\\n\\t\\t\\t}\\n\\t\\t} else if (daysPassed >= 60) {\\n\\t\\t\\tif (tokenId <= 176) {\\n\\t\\t\\t\\treturn chiHashes[1];\\n\\t\\t\\t} else if (tokenId % 88 == 0) {\\n\\t\\t\\t\\treturn stlHashes[1];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn normHashes[1];\\n\\t\\t\\t}\\n\\t\\t} else { //if 60 days haven't passed, the initial asset/Plug is returned\\n\\t\\t\\tif (tokenId <= 176) {\\n\\t\\t\\t\\treturn chiHashes[0];\\n\\t\\t\\t} else if (tokenId % 88 == 0) {\\n\\t\\t\\t\\treturn stlHashes[0];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn normHashes[0];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t//@dev Any Plug transfer this will be called beforehand (updating the transfer time)\\n\\t// If a Plug is now an Alchemist, it's timestamp won't be updated so that it never loses juice\\n\\tfunction _beforeTokenTransfer(address from, address to, uint256 tokenId) \\n\\t\\tinternal virtual override\\n    {\\n    \\t// If the \\\"1.5 years\\\" have passed, don't change birthday\\n    \\tif (_exists(tokenId) && countDaysPassed(tokenId) < 557) {\\n    \\t\\t_setBirthday(tokenId);\\n    \\t}\\n    \\temit PlugTransferred(from, to);\\n    }\\n\\n    //@dev Set the last transfer time for a tokenId\\n\\tfunction _setBirthday(uint256 tokenId) \\n\\t\\tprivate\\n\\t{\\n\\t\\t_birthdays[tokenId] = block.timestamp;\\n\\t}\\n\\n\\t//@dev List the owners for a certain level (determined by _assetHash)\\n\\t// We'll need this for airdrops and benefits\\n\\tfunction listPlugOwnersForHash(string memory assetHash) \\n\\t\\tpublic view returns (address[] memory)\\n\\t{\\n\\t\\trequire(_hashExists(assetHash), \\\"Plug: nonexistent hash\\\");\\n\\n\\t\\taddress[] memory levelOwners = new address[](MAX_NUM_TOKENS);\\n\\n\\t\\tuint16 tokenId;\\n\\t\\tuint16 counter;\\n\\t\\tfor (tokenId = 1; tokenId <= _tokenIds.current(); tokenId++) {\\n\\t\\t\\tif (_stringsEqual(_tokenHash(tokenId), assetHash)) {\\n\\t\\t\\t\\tlevelOwners[counter] = ownerOf(tokenId);\\n\\t\\t\\t\\tcounter++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn levelOwners;\\n\\t}\\n\\n\\t//@dev List the owners of a category of the Plug (Nomad, Chicago, or St. Louis)\\n\\tfunction listPlugOwnersForType(uint8 group)\\n\\t\\tgroupInRange(group) public view returns (address[] memory)\\n\\t{\\n\\t\\taddress[] memory typeOwners = new address[](MAX_NUM_TOKENS);\\n\\n\\t\\tuint16 tokenId;\\n\\t\\tuint16 counter;\\n\\t\\tif (group == 0) {\\n\\t\\t\\t//nomad\\n\\t\\t\\tfor (tokenId = 177; tokenId <= MAX_NUM_TOKENS; tokenId++) {\\n\\t\\t\\t\\tif (tokenId % 88 != 0 && _exists(tokenId)) {\\n\\t\\t\\t\\t\\ttypeOwners[counter] = ownerOf(tokenId);\\n\\t\\t\\t\\t\\tcounter++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else if (group == 1) {\\n\\t\\t\\t//chicago\\n\\t\\t\\tfor (tokenId = 1; tokenId <= 176; tokenId++) {\\n\\t\\t\\t\\tif (_exists(tokenId)) {\\n\\t\\t\\t\\t\\ttypeOwners[counter] = ownerOf(tokenId);\\n\\t\\t\\t\\t\\tcounter++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t//st. louis\\n\\t\\t\\tfor (tokenId = 177; tokenId <= MAX_NUM_TOKENS; tokenId++) {\\n\\t\\t\\t\\tif (tokenId % 88 == 0 && _exists(tokenId)) {\\n\\t\\t\\t\\t\\ttypeOwners[counter] = ownerOf(tokenId);\\n\\t\\t\\t\\t\\tcounter++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn typeOwners;\\n\\t}\\n\\n    // --------------------\\n    // MINTING & PURCHASING\\n    // --------------------\\n\\n    //@dev Allows owners to mint for free\\n    function mint(address to) \\n    \\tisSquad public virtual override returns (uint256)\\n    {\\n    \\treturn _mintInternal(to);\\n    }\\n\\n\\t//@dev Purchase & mint multiple Plugs\\n    function purchase(\\n    \\taddress payable to, \\n    \\tuint256 numToMint\\n    ) whitelistDisabled batchLimit(numToMint) plugsAvailable(numToMint) \\n      public payable \\n      returns (bool)\\n    {\\n    \\trequire(msg.value >= numToMint * TOKEN_WEI_PRICE, \\\"Plug: not enough ether\\\");\\n    \\t//send change if too much was sent\\n        if (msg.value > 0) {\\n\\t    \\tuint256 diff = msg.value.sub(TOKEN_WEI_PRICE * numToMint);\\n    \\t\\tif (diff > 0) {\\n    \\t    \\tto.transfer(diff);\\n    \\t\\t}\\n      \\t}\\n    \\tuint8 i;//mint `numToMint` Plugs to address `to`\\n    \\tfor (i = 0; i < numToMint; i++) {\\n    \\t\\t_mintInternal(to);\\n    \\t}\\n    \\treturn true;\\n    }\\n\\n    //@dev A whitelist controlled version of `purchaseMultiple`\\n    function whitelistPurchase(\\n    \\taddress payable to, \\n    \\tuint256 numToMint\\n    ) whitelistEnabled onlyWhitelist(to) batchLimit(numToMint) plugsAvailable(numToMint)\\n      public payable \\n      returns (bool)\\n    {\\n    \\trequire(msg.value >= numToMint * TOKEN_WEI_PRICE, \\\"Plug: not enough ether\\\");\\n    \\t//send change if too much was sent\\n        if (msg.value > 0) {\\n\\t    \\tuint256 diff = msg.value.sub(TOKEN_WEI_PRICE * numToMint);\\n    \\t\\tif (diff > 0) {\\n    \\t    \\tto.transfer(diff);\\n    \\t\\t}\\n      \\t}\\n    \\tuint8 i;//mint `_num` Plugs to address `_to`\\n    \\tfor (i = 0; i < numToMint; i++) {\\n    \\t\\t_mintInternal(to);\\n    \\t}\\n    \\treturn true;\\n    }\\n\\n\\t//@dev Mints a single Plug & sets up the initial birthday \\n\\tfunction _mintInternal(address to) \\n\\t\\tplugsAvailable(1) internal virtual returns (uint256)\\n\\t{\\n\\t\\t_tokenIds.increment();\\n\\t\\tuint256 newId = _tokenIds.current();\\n\\t\\t_safeMint(to, newId);\\n\\t\\t_setBirthday(newId);\\n\\t\\temit ERC721Minted(newId);\\n\\n\\t\\treturn newId;\\n\\t}\\n\\t\\n\\t// ----\\n\\t// TIME\\n\\t// ----\\n\\n\\t//@dev Returns number of days that have passed since transfer/mint\\n\\tfunction countDaysPassed(uint256 tokenId) \\n\\t\\ttokenExists(tokenId) public view returns (uint256) \\n\\t{\\n\\t\\treturn uint256((block.timestamp - _birthdays[tokenId]) / 1 days);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Kasbeer721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n * Kasbeer721.sol\\n *\\n * Author: Jack Kasbeer\\n * Created: August 21, 2021\\n */\\n\\npragma solidity >=0.5.16 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./KasbeerStorage.sol\\\";\\nimport \\\"./KasbeerAccessControl.sol\\\";\\nimport \\\"./LibPart.sol\\\";\\n\\n\\n//@title Kasbeer Made Contract for an ERC721\\n//@author Jack Kasbeer (git:@jcksber, tw:@satoshigoat)\\ncontract Kasbeer721 is ERC721, KasbeerAccessControl, KasbeerStorage {\\n\\n\\tusing Counters for Counters.Counter;\\n\\tusing SafeMath for uint256;\\n\\n\\tevent ERC721Minted(uint256 indexed tokenId);\\n\\tevent ERC721Burned(uint256 indexed tokenId);\\n\\t\\n\\tconstructor(string memory temp_name, string memory temp_symbol) \\n\\t\\tERC721(temp_name, temp_symbol)\\n\\t{\\n\\t\\t// Add my personal address & sender\\n\\t\\t_squad[msg.sender] = true;\\n\\t\\t_squad[0xB9699469c0b4dD7B1Dda11dA7678Fa4eFD51211b] = true;\\n\\t\\taddToWhitelist(0xB9699469c0b4dD7B1Dda11dA7678Fa4eFD51211b);\\n\\t}\\n\\n\\t// -----------\\n\\t// RESTRICTORS\\n\\t// -----------\\n\\n\\tmodifier hashIndexInRange(uint8 idx)\\n\\t{\\n\\t\\trequire(0 <= idx && idx < NUM_ASSETS, \\\"Kasbeer721: index OOB\\\");\\n\\t\\t_;\\n\\t}\\n\\t\\n\\tmodifier groupInRange(uint8 group)\\n\\t{\\n\\t\\trequire(0 <= group && group <= 2, \\\"Kasbeer721: group OOB\\\");\\n\\t\\t_;// 0:nomad, 1:chicago, 2:st.louis\\n\\t}\\n\\n\\tmodifier onlyValidTokenId(uint256 tokenId)\\n\\t{\\n\\t\\trequire(1 <= tokenId && tokenId <= MAX_NUM_TOKENS, \\\"KasbeerMade721: tokenId OOB\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t// ------\\n\\t// ERC721 \\n\\t// ------\\n\\n\\t//@dev All of the asset's will be pinned to IPFS\\n\\tfunction _baseURI() \\n\\t\\tinternal view virtual override returns (string memory)\\n\\t{\\n\\t\\treturn \\\"ipfs://\\\";//NOTE: per OpenSea recommendations\\n\\t}\\n\\n\\t//@dev This is here as a reminder to override for custom transfer functionality\\n\\tfunction _beforeTokenTransfer(address from, address to, uint256 tokenId) \\n\\t\\tinternal virtual override \\n\\t{ \\n\\t\\tsuper._beforeTokenTransfer(from, to, tokenId); \\n\\t}\\n\\n\\t//@dev Allows owners to mint for free\\n    function mint(address to) \\n    \\tisSquad public virtual returns (uint256)\\n    {\\n    \\t_tokenIds.increment();\\n\\n\\t\\tuint256 newId = _tokenIds.current();\\n\\t\\t_safeMint(to, newId);\\n\\t\\temit ERC721Minted(newId);\\n\\n\\t\\treturn newId;\\n    }\\n\\n\\t//@dev Custom burn function - nothing special\\n\\tfunction burn(uint256 tokenId) \\n\\t\\tpublic virtual\\n\\t{\\n\\t\\trequire(isInSquad(msg.sender) || msg.sender == ownerOf(tokenId), \\n\\t\\t\\t\\\"Kasbeer721: not owner or in squad.\\\");\\n\\t\\t_burn(tokenId);\\n\\t\\temit ERC721Burned(tokenId);\\n\\t}\\n\\n\\tfunction supportsInterface(bytes4 interfaceId) \\n\\t\\tpublic view virtual override returns (bool)\\n\\t{\\n\\t\\treturn interfaceId == _INTERFACE_ID_ERC165\\n        || interfaceId == _INTERFACE_ID_ROYALTIES\\n        || interfaceId == _INTERFACE_ID_ERC721\\n        || interfaceId == _INTERFACE_ID_ERC721_METADATA\\n        || interfaceId == _INTERFACE_ID_ERC721_ENUMERABLE\\n        || interfaceId == _INTERFACE_ID_EIP2981\\n        || super.supportsInterface(interfaceId);\\n\\t}\\n\\n    // ----------------------\\n    // IPFS HASH MANIPULATION\\n    // ----------------------\\n\\n    //@dev Get the hash stored at `idx` for `group` \\n\\tfunction getHashByIndex(\\n\\t\\tuint8 group, \\n\\t\\tuint8 idx\\n\\t) groupInRange(group) hashIndexInRange(idx) public view \\n\\t  returns (string memory)\\n\\t{\\n\\t\\tif (group == 0) {\\n\\t\\t\\treturn normHashes[idx];\\n\\t\\t} else if (group == 1) {\\n\\t\\t\\treturn chiHashes[idx];\\n\\t\\t} else {\\n\\t\\t\\treturn stlHashes[idx];\\n\\t\\t}\\n\\t}\\n\\n\\t//@dev Allows us to update the IPFS hash values (one at a time)\\n\\tfunction updateHash(\\n\\t\\tuint8 group, \\n\\t\\tuint8 hashNum, \\n\\t\\tstring memory str\\n\\t) isSquad groupInRange(group) hashIndexInRange(hashNum) public\\n\\t{\\n\\t\\tif (group == 0) {\\n\\t\\t\\tnormHashes[hashNum] = str;\\n\\t\\t} else if (group == 1) {\\n\\t\\t\\tchiHashes[hashNum] = str;\\n\\t\\t} else {\\n\\t\\t\\tstlHashes[hashNum] = str;\\n\\t\\t}\\n\\t}\\n\\n\\t//@dev Determine if '_assetHash' is one of the IPFS hashes in asset hashes\\n\\tfunction _hashExists(string memory assetHash) \\n\\t\\tinternal view returns (bool) \\n\\t{\\n\\t\\tuint8 i;\\n\\t\\tfor (i = 0; i < NUM_ASSETS; i++) {\\n\\t\\t\\tif (_stringsEqual(assetHash, normHashes[i]) || \\n\\t\\t\\t\\t_stringsEqual(assetHash, chiHashes[i]) ||\\n\\t\\t\\t\\t_stringsEqual(assetHash, stlHashes[i])) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// ------\\n\\t// USEFUL\\n\\t// ------\\n\\n\\t//@dev Returns the current token id (number minted so far)\\n\\tfunction getCurrentId() \\n\\t\\tpublic view returns (uint256)\\n\\t{\\n\\t\\treturn _tokenIds.current();\\n\\t}\\n\\n\\t//@dev Allows us to withdraw funds collected\\n\\tfunction withdraw(address payable wallet, uint256 amount)\\n\\t\\tisSquad public\\n\\t{\\n\\t\\trequire(amount <= address(this).balance,\\n\\t\\t\\t\\\"Kasbeer721: Insufficient funds to withdraw\\\");\\n\\t\\twallet.transfer(amount);\\n\\t}\\n\\n\\t//@dev Destroy contract and reclaim leftover funds\\n    function kill() \\n    \\tonlyOwner public \\n    {\\n        selfdestruct(payable(msg.sender));\\n    }\\n\\n    // ------------\\n\\t// CONTRACT URI\\n\\t// ------------\\n\\n\\t//@dev Controls the contract-level metadata to include things like royalties\\n\\tfunction contractURI()\\n\\t\\tpublic view returns(string memory)\\n\\t{\\n\\t\\treturn contractUri;\\n\\t}\\n\\n\\t//@dev Ability to change the contract URI\\n\\tfunction updateContractUri(string memory updatedContractUri) \\n\\t\\tisSquad public\\n\\t{\\n        contractUri = updatedContractUri;\\n    }\\n\\t\\n    // -----------------\\n    // SECONDARY MARKETS\\n\\t// -----------------\\n\\n\\t//@dev Rarible Royalties V2\\n    function getRaribleV2Royalties(uint256 id) \\n    \\tonlyValidTokenId(id) external view returns (LibPart.Part[] memory) \\n    {\\n        LibPart.Part[] memory royalties = new LibPart.Part[](1);\\n        royalties[0] = LibPart.Part({\\n            account: payable(payoutAddress),\\n            value: uint96(royaltyFeeBps)\\n        });\\n\\n        return royalties;\\n    }\\n\\n    //@dev EIP-2981\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) external view onlyValidTokenId(tokenId) returns (address receiver, uint256 amount) {\\n        uint256 ourCut = SafeMath.div(SafeMath.mul(salePrice, royaltyFeeBps), 10000);\\n        return (payoutAddress, ourCut);\\n    }\\n\\n    // -------\\n    // HELPERS\\n    // -------\\n\\n\\t//@dev Determine if two strings are equal using the length + hash method\\n\\tfunction _stringsEqual(string memory a, string memory b) \\n\\t\\tinternal pure returns (bool)\\n\\t{\\n\\t\\tbytes memory A = bytes(a);\\n\\t\\tbytes memory B = bytes(b);\\n\\n\\t\\tif (A.length != B.length) {\\n\\t\\t\\treturn false;\\n\\t\\t} else {\\n\\t\\t\\treturn keccak256(A) == keccak256(B);\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/KasbeerStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n * KasbeerStorage.sol\\n *\\n * Author: Jack Kasbeer\\n * Created: August 21, 2021\\n */\\n\\npragma solidity >=0.5.16 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n//@title A storage contract for relevant data\\n//@author Jack Kasbeer (@jcksber, @satoshigoat)\\ncontract KasbeerStorage {\\n\\n\\t//@dev These take care of token id incrementing\\n\\tusing Counters for Counters.Counter;\\n\\tCounters.Counter internal _tokenIds;\\n\\n\\tuint256 constant public royaltyFeeBps = 1500; // 15%\\n    bytes4 internal constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n    bytes4 internal constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    bytes4 internal constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n    bytes4 internal constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n    bytes4 internal constant _INTERFACE_ID_EIP2981 = 0x2a55205a;\\n    bytes4 internal constant _INTERFACE_ID_ROYALTIES = 0xcad96cca;\\n\\n\\t//@dev Important numbers\\n\\tuint constant NUM_ASSETS = 8;\\n\\tuint constant MAX_NUM_TOKENS = 888;\\n\\tuint constant TOKEN_WEI_PRICE = 88800000000000000;//0.0888 ETH\\n\\n\\t//@dev Properties\\n\\tstring internal contractUri;\\n\\taddress public payoutAddress;\\n\\n\\t//@dev Initial production hashes\\n\\t//Our list of IPFS hashes for each of the \\\"Nomad\\\" 8 Plugs (varying juice levels)\\n\\tstring [NUM_ASSETS] normHashes = [\\\"QmZzB15bPgTqyHzULMFK1jNdbbDGVGCX4PJNbyGGMqLCjL\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t  \\\"QmeXZGeywxRRDK5mSBHNVnUzGv7Kv2ATfLHydPfT5LpbZr\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t  \\\"QmYTf2HE8XycQD9uXshiVtXqNedS83WycJvS2SpWAPfx5b\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t  \\\"QmYXjEkeio2nbMqy3DA7z2LwYFDyq1itbzdujGSoCsFwpN\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t  \\\"QmWmvRqpT59QU9rDT28fiKgK6g8vUjRD2TSSeeBPr9aBNm\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t  \\\"QmWtMb73QgSgkL7mY8PQEt6tgufMovXWF8ecurp2RD7X6R\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t  \\\"Qmbd4uEwtPBfw1XASkgPijqhZDL2nZcRwPbueYaETuAfGt\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t  \\\"QmayAeQafrWUHV3xb8DnXTGLn97xnh7X2Z957Ss9AtfkAD\\\"];\\n\\t//Our list of IPFS hashes for each of the \\\"Chicago\\\" 8 Plugs (varying juice levels)\\n\\tstring [NUM_ASSETS] chiHashes = [\\\"QmNsSUji2wX4E8xmv8vynmSUCACPdCh7NznVSGMQ3hwLC3\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\\"QmYPq4zFLyREaZsPwZzXB3w94JVYdgFHGgRAuM6CK6PMes\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\\"QmbrATHXTkiyNijkfQcEMGT7ujpunsoLNTaupMYW922jp3\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\\"QmWaj5VHcBXgAQnct88tbthVmv1ecX7ft2aGGqMAt4N52p\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\\"QmTyFgbJXX2vUCZSjraKubXfE4NVr4nVrKtg3GK4ysscDX\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\\"QmQxQoAe47CUXtGY9NTA6dRgTJuDtM4HDqz9kW2UK1VHtU\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\\"QmaXYexRBrbr6Uv89cGyWXWCbyaoQDhy3hHJuktSTWFXtJ\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\\"QmeSQdMYLECcSfCSkMenPYuNL2v42YQEEA4HJiP36Zn7Z6\\\"];\\n\\t//Our list of IPFS hashes for each of the \\\"Chicago\\\" 8 Plugs (varying juice levels)\\n\\tstring [NUM_ASSETS] stlHashes = [\\\"QmcB5AqhpNA8o5RT3VTeDsqNBn6VGEaXzeTKuomakTNueM\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\\"QmcjP9d54RcmPXgGt6XxNavr7dtQDAhAnatKjJ5a1Bqbmc\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\\"QmV3uFvGgGQdN4Ub81LWVnp3qjwMpKDvVwQmBzBNzAjWxB\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\\"Qmc3fWuQTxAgsBYK2g4z5VrK47nvfCrWHFNa5zA8DDoUbs\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\\"QmWRPStH4RRMrFzAJcTs2znP7hbVctbLHPUvEn9vXWSTfk\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\\"QmVobnLvtSvgrWssFyWAPCUQFvKsonRMYMYRQPsPSaQHTK\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\\"QmQvGuuRgKxqTcAA7xhGdZ5u2EzDKvWGYb1dMXz2ECwyZi\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\\"QmdurJn1GYVz1DcNgqbMTqnCKKFxpjsFuhoS7bnfBp2YGk\\\"];\\n}\\n\"\r\n    },\r\n    \"contracts/KasbeerAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n * KasbeerAccessControl.sol\\n *\\n * Author: Jack Kasbeer\\n * Created: October 14, 2021\\n *\\n * This is an extension of `Ownable` to allow a larger set of addresses to have\\n * certain control in the inheriting contracts.\\n */\\n\\npragma solidity >=0.5.16 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract KasbeerAccessControl is Ownable {\\n\\t\\n\\t// -----\\n\\t// SQUAD\\n\\t// -----\\n\\n\\t//@dev Ownership - list of squad members (owners)\\n\\tmapping (address => bool) internal _squad;\\n\\n\\t//@dev Custom \\\"approved\\\" modifier because I don't like that language\\n\\tmodifier isSquad()\\n\\t{\\n\\t\\trequire(isInSquad(msg.sender), \\\"KasbeerAccessControl: Caller not part of squad.\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t//@dev Determine if address `a` is an approved owner\\n\\tfunction isInSquad(address a) \\n\\t\\tpublic view returns (bool) \\n\\t{\\n\\t\\treturn _squad[a];\\n\\t}\\n\\n\\t//@dev Add `a` to the squad\\n\\tfunction addToSquad(address a)\\n\\t\\tonlyOwner public\\n\\t{\\n\\t\\trequire(!isInSquad(a), \\\"KasbeerAccessControl: Address already in squad.\\\");\\n\\t\\t_squad[a] = true;\\n\\t}\\n\\n\\t//@dev Remove `a` from the squad\\n\\tfunction removeFromSquad(address a)\\n\\t\\tonlyOwner public\\n\\t{\\n\\t\\trequire(isInSquad(a), \\\"KasbeerAccessControl: Address already not in squad.\\\");\\n\\t\\t_squad[a] = false;\\n\\t}\\n\\n\\t// ---------\\n\\t// WHITELIST\\n\\t// ---------\\n\\n\\t//@dev Whitelist mapping for client addresses\\n\\tmapping (address => bool) internal _whitelist;\\n\\n\\t//@dev Whitelist flag for active/inactive states\\n\\tbool whitelistActive;\\n\\n\\t//@dev Determine if someone is in the whitelsit\\n\\tmodifier onlyWhitelist(address a)\\n\\t{\\n\\t\\trequire(isInWhitelist(a));\\n\\t\\t_;\\n\\t}\\n\\n\\t//@dev Prevent non-whitelist minting functions from being used \\n\\t// if `whitelistActive` == 1\\n\\tmodifier whitelistDisabled()\\n\\t{\\n\\t\\trequire(whitelistActive == false, \\\"KasbeerAccessControl: whitelist still active\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t//@dev Require that the whitelist is currently enabled\\n\\tmodifier whitelistEnabled() \\n\\t{\\n\\t\\trequire(whitelistActive == true, \\\"KasbeerAccessControl: whitelist not active\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t//@dev Turn the whitelist on\\n\\tfunction activateWhitelist()\\n\\t\\tisSquad whitelistDisabled public\\n\\t{\\n\\t\\twhitelistActive = true;\\n\\t}\\n\\n\\t//@dev Turn the whitelist off\\n\\tfunction deactivateWhitelist()\\n\\t\\tisSquad whitelistEnabled public\\n\\t{\\n\\t\\twhitelistActive = false;\\n\\t}\\n\\n\\t//@dev Prove that one of our whitelist address owners has been approved\\n\\tfunction isInWhitelist(address a) \\n\\t\\tpublic view returns (bool)\\n\\t{\\n\\t\\treturn _whitelist[a];\\n\\t}\\n\\n\\t//@dev Add a single address to whitelist\\n\\tfunction addToWhitelist(address a) \\n\\t\\tisSquad public\\n\\t{\\n\\t\\trequire(!isInWhitelist(a), \\\"KasbeerAccessControl: already whitelisted\\\"); \\n\\t\\t//here we care if address already whitelisted to save on gas fees\\n\\t\\t_whitelist[a] = true;\\n\\t}\\n\\n\\t//@dev Remove a single address from the whitelist\\n\\tfunction removeFromWhitelist(address a)\\n\\t\\tisSquad public\\n\\t{\\n\\t\\trequire(isInWhitelist(a), \\\"KasbeerAccessControl: not in whitelist\\\");\\n\\t\\t_whitelist[a] = false;\\n\\t}\\n\\n\\t//@dev Add a list of addresses to the whitelist\\n\\tfunction bulkAddToWhitelist(address[] memory addys) \\n\\t\\tisSquad public\\n\\t{\\n\\t\\trequire(addys.length > 1, \\\"KasbeerAccessControl: use `addToWhitelist` instead\\\");\\n\\t\\tuint8 i;\\n\\t\\tfor (i = 0; i < addys.length; i++) {\\n\\t\\t\\tif (!_whitelist[addys[i]]) {\\n\\t\\t\\t\\t_whitelist[addys[i]] = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/LibPart.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n * LibPart.sol\\n *\\n * Author: Jack Kasbeer (token from 'dot')\\n * Created: October 20, 2021\\n */\\n\\npragma solidity >=0.5.16 <0.9.0;\\n\\n//@dev We need this libary for Rarible\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"PlugTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"addToSquad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addys\",\"type\":\"address[]\"}],\"name\":\"bulkAddToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"countDaysPassed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"group\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"idx\",\"type\":\"uint8\"}],\"name\":\"getHashByIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRaribleV2Royalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isInSquad\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isInWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"assetHash\",\"type\":\"string\"}],\"name\":\"listPlugOwnersForHash\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"group\",\"type\":\"uint8\"}],\"name\":\"listPlugOwnersForType\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numToMint\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"removeFromSquad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"updatedContractUri\",\"type\":\"string\"}],\"name\":\"updateContractUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"group\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hashNum\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"updateHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numToMint\",\"type\":\"uint256\"}],\"name\":\"whitelistPurchase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Plug","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}