{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Fliquidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./abstracts/claimable/Claimable.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IVaultControl.sol\\\";\\nimport \\\"./interfaces/IFujiAdmin.sol\\\";\\nimport \\\"./interfaces/IFujiOracle.sol\\\";\\nimport \\\"./interfaces/IFujiERC1155.sol\\\";\\nimport \\\"./interfaces/IERC20Extended.sol\\\";\\nimport \\\"./flashloans/Flasher.sol\\\";\\nimport \\\"./libraries/LibUniversalERC20.sol\\\";\\nimport \\\"./libraries/FlashLoans.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\n\\ncontract Fliquidator is Claimable, ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n  using LibUniversalERC20 for IERC20;\\n\\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  // slippage limit to 2%\\n  uint256 public constant SLIPPAGE_LIMIT_NUMERATOR = 2;\\n  uint256 public constant SLIPPAGE_LIMIT_DENOMINATOR = 100;\\n\\n  struct Factor {\\n    uint64 a;\\n    uint64 b;\\n  }\\n\\n  // Flash Close Fee Factor\\n  Factor public flashCloseF;\\n\\n  IFujiAdmin private _fujiAdmin;\\n  IFujiOracle private _oracle;\\n  IUniswapV2Router02 public swapper;\\n\\n  // Log Liquidation\\n  event Liquidate(\\n    address indexed userAddr,\\n    address indexed vault,\\n    uint256 amount,\\n    address liquidator\\n  );\\n  // Log FlashClose\\n  event FlashClose(address indexed userAddr, address indexed vault, uint256 amount);\\n\\n  modifier isAuthorized() {\\n    require(msg.sender == owner(), Errors.VL_NOT_AUTHORIZED);\\n    _;\\n  }\\n\\n  modifier onlyFlash() {\\n    require(msg.sender == _fujiAdmin.getFlasher(), Errors.VL_NOT_AUTHORIZED);\\n    _;\\n  }\\n\\n  modifier isValidVault(address _vaultAddr) {\\n    require(_fujiAdmin.validVault(_vaultAddr), \\\"Invalid vault!\\\");\\n    _;\\n  }\\n\\n  constructor() {\\n    // 0.01\\n    flashCloseF.a = 1;\\n    flashCloseF.b = 100;\\n  }\\n\\n  receive() external payable {}\\n\\n  // FLiquidator Core Functions\\n\\n  /**\\n   * @dev Liquidate an undercollaterized debt and get bonus (bonusL in Vault)\\n   * @param _addrs: Address array of users whose position is liquidatable\\n   * @param _vault: Address of the vault in where liquidation will occur\\n   * Emits a {Liquidate} event.\\n   */\\n  function batchLiquidate(address[] calldata _addrs, address _vault)\\n    external\\n    payable\\n    nonReentrant\\n    isValidVault(_vault)\\n  {\\n    IVaultControl.VaultAssets memory vAssets = IVaultControl(_vault).vAssets();\\n    address f1155 = IVault(_vault).fujiERC1155();\\n\\n    IVault(_vault).updateF1155Balances();\\n\\n    (address[] memory addrs, uint256[] memory borrowBals, uint256 debtTotal) = _constructParams(\\n      _addrs,\\n      vAssets,\\n      _vault,\\n      f1155\\n    );\\n\\n    // Check there is at least one user liquidatable\\n    require(debtTotal > 0, Errors.VL_USER_NOT_LIQUIDATABLE);\\n\\n    if (vAssets.borrowAsset == ETH) {\\n      require(msg.value >= debtTotal, Errors.VL_AMOUNT_ERROR);\\n    } else {\\n      // Check Liquidator Allowance\\n      require(\\n        IERC20(vAssets.borrowAsset).allowance(msg.sender, address(this)) >= debtTotal,\\n        Errors.VL_MISSING_ERC20_ALLOWANCE\\n      );\\n\\n      // Transfer borrowAsset funds from the Liquidator to Vault\\n      IERC20(vAssets.borrowAsset).safeTransferFrom(msg.sender, _vault, debtTotal);\\n    }\\n\\n    // Repay BaseProtocol debt\\n    uint256 _value = vAssets.borrowAsset == ETH ? debtTotal : 0;\\n    IVault(_vault).paybackLiq{ value: _value }(int256(debtTotal));\\n\\n    // Compute liquidator's bonus: bonusL\\n    uint256 bonus = IVault(_vault).getLiquidationBonusFor(debtTotal);\\n    // Compute how much collateral needs to be swapt\\n    uint256 collateralInPlay = _getCollateralInPlay(\\n      vAssets.collateralAsset,\\n      vAssets.borrowAsset,\\n      debtTotal + bonus\\n    );\\n\\n    // Burn f1155\\n    _burnMulti(addrs, borrowBals, vAssets, _vault, f1155);\\n\\n    // Withdraw collateral\\n    IVault(_vault).withdrawLiq(int256(collateralInPlay));\\n\\n    // Swap Collateral\\n    _swap(vAssets.collateralAsset, vAssets.borrowAsset, debtTotal + bonus, collateralInPlay, true);\\n\\n    // Transfer to Liquidator the debtBalance + bonus\\n    IERC20(vAssets.borrowAsset).univTransfer(payable(msg.sender), debtTotal + bonus);\\n\\n    // Emit liquidation event for each liquidated user\\n    for (uint256 i = 0; i < addrs.length; i += 1) {\\n      if (addrs[i] != address(0)) {\\n        emit Liquidate(addrs[i], _vault, borrowBals[i], msg.sender);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Initiates a flashloan to liquidate array of undercollaterized debt positions,\\n   * gets bonus (bonusFlashL in Vault)\\n   * @param _addrs: Array of Address whose position is liquidatable\\n   * @param _vault: The vault address where the debt position exist.\\n   * @param _flashnum: integer identifier of flashloan provider\\n   * Emits a {Liquidate} event.\\n   */\\n  function flashBatchLiquidate(\\n    address[] calldata _addrs,\\n    address _vault,\\n    uint8 _flashnum\\n  ) external isValidVault(_vault) nonReentrant {\\n    IVaultControl.VaultAssets memory vAssets = IVaultControl(_vault).vAssets();\\n    address f1155 = IVault(_vault).fujiERC1155();\\n\\n    IVault(_vault).updateF1155Balances();\\n\\n    (address[] memory addrs, uint256[] memory borrowBals, uint256 debtTotal) = _constructParams(\\n      _addrs,\\n      vAssets,\\n      _vault,\\n      f1155\\n    );\\n\\n    // Check there is at least one user liquidatable\\n    require(debtTotal > 0, Errors.VL_USER_NOT_LIQUIDATABLE);\\n\\n    FlashLoan.Info memory info = FlashLoan.Info({\\n      callType: FlashLoan.CallType.BatchLiquidate,\\n      asset: vAssets.borrowAsset,\\n      amount: debtTotal,\\n      vault: _vault,\\n      newProvider: address(0),\\n      userAddrs: addrs,\\n      userBalances: borrowBals,\\n      userliquidator: msg.sender,\\n      fliquidator: address(this)\\n    });\\n\\n    Flasher(payable(_fujiAdmin.getFlasher())).initiateFlashloan(info, _flashnum);\\n  }\\n\\n  /**\\n   * @dev Liquidate a debt position by using a flashloan\\n   * @param _addrs: array **See addrs construction in 'function flashBatchLiquidate'\\n   * @param _borrowBals: array **See construction in 'function flashBatchLiquidate'\\n   * @param _liquidator: liquidator address\\n   * @param _vault: Vault address\\n   * @param _amount: amount of debt to be repaid\\n   * @param _flashloanFee: amount extra charged by flashloan provider\\n   * Emits a {Liquidate} event.\\n   */\\n  function executeFlashBatchLiquidation(\\n    address[] calldata _addrs,\\n    uint256[] calldata _borrowBals,\\n    address _liquidator,\\n    address _vault,\\n    uint256 _amount,\\n    uint256 _flashloanFee\\n  ) external payable onlyFlash {\\n    address f1155 = IVault(_vault).fujiERC1155();\\n    IVaultControl.VaultAssets memory vAssets = IVaultControl(_vault).vAssets();\\n\\n    // Repay BaseProtocol debt to release collateral\\n    uint256 _value = vAssets.borrowAsset == ETH ? _amount : 0;\\n    IVault(_vault).paybackLiq{ value: _value }(int256(_amount));\\n\\n    // Compute liquidator's bonus\\n    uint256 bonus = IVault(_vault).getLiquidationBonusFor(_amount);\\n\\n    // Compute how much collateral needs to be swapt for all liquidated users\\n    uint256 collateralInPlay = _getCollateralInPlay(\\n      vAssets.collateralAsset,\\n      vAssets.borrowAsset,\\n      _amount + _flashloanFee + bonus\\n    );\\n\\n    // Burn f1155\\n    _burnMulti(_addrs, _borrowBals, vAssets, _vault, f1155);\\n\\n    // Withdraw collateral\\n    IVault(_vault).withdrawLiq(int256(collateralInPlay));\\n\\n    _swap(\\n      vAssets.collateralAsset,\\n      vAssets.borrowAsset,\\n      _amount + _flashloanFee + bonus,\\n      collateralInPlay,\\n      true\\n    );\\n\\n    // Send flasher the underlying to repay Flashloan\\n    IERC20(vAssets.borrowAsset).univTransfer(\\n      payable(_fujiAdmin.getFlasher()),\\n      _amount + _flashloanFee\\n    );\\n\\n    // Liquidator's bonus gets reduced by 20% as a protocol fee\\n    uint256 fujiFee = bonus / 5;\\n\\n    // Transfer liquidator's bonus, minus fujiFee\\n    IERC20(vAssets.borrowAsset).univTransfer(payable(_liquidator), bonus - fujiFee);\\n\\n    // Transfer fee to Fuji Treasury\\n    IERC20(vAssets.borrowAsset).univTransfer(_fujiAdmin.getTreasury(), fujiFee);\\n\\n    // Emit liquidation event for each liquidated user\\n    for (uint256 i = 0; i < _addrs.length; i += 1) {\\n      if (_addrs[i] != address(0)) {\\n        emit Liquidate(_addrs[i], _vault, _borrowBals[i], _liquidator);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Initiates a flashloan used to repay partially or fully the debt position of msg.sender\\n   * @param _amount: Pass -1 to fully close debt position, otherwise Amount to be repaid with a flashloan\\n   * @param _vault: The vault address where the debt position exist.\\n   * @param _flashnum: integer identifier of flashloan provider\\n   */\\n  function flashClose(\\n    int256 _amount,\\n    address _vault,\\n    uint8 _flashnum\\n  ) external nonReentrant isValidVault(_vault) {\\n    // Update Balances at FujiERC1155\\n    IVault(_vault).updateF1155Balances();\\n\\n    // Create Instance of FujiERC1155\\n    IFujiERC1155 f1155 = IFujiERC1155(IVault(_vault).fujiERC1155());\\n\\n    // Struct Instance to get Vault Asset IDs in f1155\\n    IVaultControl.VaultAssets memory vAssets = IVaultControl(_vault).vAssets();\\n\\n    // Get user  Balances\\n    uint256 userCollateral = f1155.balanceOf(msg.sender, vAssets.collateralID);\\n    uint256 userDebt = f1155.balanceOf(msg.sender, vAssets.borrowID);\\n\\n    require(userDebt > 0, Errors.VL_NO_DEBT_TO_PAYBACK);\\n\\n    uint256 amount = _amount < 0 ? userDebt : uint256(_amount);\\n\\n    uint256 neededCollateral = IVault(_vault).getNeededCollateralFor(amount, false);\\n    require(userCollateral >= neededCollateral, Errors.VL_UNDERCOLLATERIZED_ERROR);\\n\\n    address[] memory userAddressArray = new address[](1);\\n    userAddressArray[0] = msg.sender;\\n\\n    FlashLoan.Info memory info = FlashLoan.Info({\\n      callType: FlashLoan.CallType.Close,\\n      asset: vAssets.borrowAsset,\\n      amount: amount,\\n      vault: _vault,\\n      newProvider: address(0),\\n      userAddrs: userAddressArray,\\n      userBalances: new uint256[](0),\\n      userliquidator: address(0),\\n      fliquidator: address(this)\\n    });\\n\\n    Flasher(payable(_fujiAdmin.getFlasher())).initiateFlashloan(info, _flashnum);\\n  }\\n\\n  /**\\n   * @dev Close user's debt position by using a flashloan\\n   * @param _userAddr: user addr to be liquidated\\n   * @param _vault: Vault address\\n   * @param _amount: amount received by Flashloan\\n   * @param _flashloanFee: amount extra charged by flashloan provider\\n   * Emits a {FlashClose} event.\\n   */\\n  function executeFlashClose(\\n    address payable _userAddr,\\n    address _vault,\\n    uint256 _amount,\\n    uint256 _flashloanFee\\n  ) external payable onlyFlash {\\n    // Create Instance of FujiERC1155\\n    IFujiERC1155 f1155 = IFujiERC1155(IVault(_vault).fujiERC1155());\\n\\n    // Struct Instance to get Vault Asset IDs in f1155\\n    IVaultControl.VaultAssets memory vAssets = IVaultControl(_vault).vAssets();\\n\\n    uint256 fujiFee = (_amount * flashCloseF.a) / flashCloseF.b;\\n\\n    uint256 collateralInPlay = _getCollateralInPlay(\\n      vAssets.collateralAsset,\\n      vAssets.borrowAsset,\\n      _amount + _flashloanFee + fujiFee\\n    );\\n\\n    // Repay BaseProtocol debt\\n    uint256 _value = vAssets.borrowAsset == ETH ? _amount : 0;\\n    IVault(_vault).paybackLiq{ value: _value }(int256(_amount));\\n\\n    // Full close\\n    if (_amount == f1155.balanceOf(_userAddr, vAssets.borrowID)) {\\n      uint256 userCollateral = f1155.balanceOf(_userAddr, vAssets.collateralID);\\n\\n      f1155.burn(_userAddr, vAssets.collateralID, userCollateral);\\n\\n      // Withdraw full collateral\\n      IVault(_vault).withdrawLiq(int256(userCollateral));\\n\\n      // Send remaining collateral to user\\n      IERC20(vAssets.collateralAsset).univTransfer(_userAddr, userCollateral - collateralInPlay);\\n    } else {\\n      f1155.burn(_userAddr, vAssets.collateralID, collateralInPlay);\\n\\n      // Withdraw collateral in play only\\n      IVault(_vault).withdrawLiq(int256(collateralInPlay));\\n    }\\n\\n    // Swap collateral for underlying to repay flashloan\\n    _swap(\\n      vAssets.collateralAsset,\\n      vAssets.borrowAsset,\\n      _amount + _flashloanFee + fujiFee,\\n      collateralInPlay,\\n      false\\n    );\\n\\n    // Send flashClose fee to Fuji Treasury\\n    IERC20(vAssets.borrowAsset).univTransfer(_fujiAdmin.getTreasury(), fujiFee);\\n\\n    // Send flasher the underlying to repay flashloan\\n    IERC20(vAssets.borrowAsset).univTransfer(\\n      payable(_fujiAdmin.getFlasher()),\\n      _amount + _flashloanFee\\n    );\\n\\n    // Burn Debt f1155 tokens\\n    f1155.burn(_userAddr, vAssets.borrowID, _amount);\\n\\n    emit FlashClose(_userAddr, _vault, _amount);\\n  }\\n\\n  /**\\n   * @dev Swap an amount of underlying\\n   * @param _collateralAsset: Address of vault collateralAsset\\n   * @param _borrowAsset: Address of vault borrowAsset\\n   * @param _amountToReceive: amount of underlying to receive\\n   * @param _collateralAmount: collateral Amount sent for swap\\n   */\\n  function _swap(\\n    address _collateralAsset,\\n    address _borrowAsset,\\n    uint256 _amountToReceive,\\n    uint256 _collateralAmount,\\n    bool _checkSlippage\\n  ) internal returns (uint256) {\\n    if (_checkSlippage) {\\n      uint8 _collateralAssetDecimals;\\n      uint8 _borrowAssetDecimals;\\n      if (_collateralAsset == ETH) {\\n        _collateralAssetDecimals = 18;\\n      } else {\\n        _collateralAssetDecimals = IERC20Extended(_collateralAsset).decimals();\\n      }\\n      if (_borrowAsset == ETH) {\\n        _borrowAssetDecimals = 18;\\n      } else {\\n        _borrowAssetDecimals = IERC20Extended(_borrowAsset).decimals();\\n      }\\n\\n      uint256 priceFromSwapper = (_collateralAmount * (10**uint256(_borrowAssetDecimals))) /\\n        _amountToReceive;\\n      uint256 priceFromOracle = _oracle.getPriceOf(\\n        _collateralAsset,\\n        _borrowAsset,\\n        _collateralAssetDecimals\\n      );\\n      uint256 priceDelta = priceFromSwapper > priceFromOracle\\n        ? priceFromSwapper - priceFromOracle\\n        : priceFromOracle - priceFromSwapper;\\n\\n      require(\\n        (priceDelta * SLIPPAGE_LIMIT_DENOMINATOR) / priceFromOracle < SLIPPAGE_LIMIT_NUMERATOR,\\n        Errors.VL_SWAP_SLIPPAGE_LIMIT_EXCEED\\n      );\\n    }\\n\\n    // Swap Collateral Asset to Borrow Asset\\n    address weth = swapper.WETH();\\n    address[] memory path;\\n    uint256[] memory swapperAmounts;\\n\\n    if (_collateralAsset == ETH) {\\n      path = new address[](2);\\n      path[0] = weth;\\n      path[1] = _borrowAsset;\\n\\n      swapperAmounts = swapper.swapETHForExactTokens{ value: _collateralAmount }(\\n        _amountToReceive,\\n        path,\\n        address(this),\\n        // solhint-disable-next-line\\n        block.timestamp\\n      );\\n    } else if (_borrowAsset == ETH) {\\n      path = new address[](2);\\n      path[0] = _collateralAsset;\\n      path[1] = weth;\\n\\n      IERC20(_collateralAsset).univApprove(address(swapper), _collateralAmount);\\n      swapperAmounts = swapper.swapTokensForExactETH(\\n        _amountToReceive,\\n        _collateralAmount,\\n        path,\\n        address(this),\\n        // solhint-disable-next-line\\n        block.timestamp\\n      );\\n    } else {\\n      if (_collateralAsset == weth || _borrowAsset == weth) {\\n        path = new address[](2);\\n        path[0] = _collateralAsset;\\n        path[1] = _borrowAsset;\\n      } else {\\n        path = new address[](3);\\n        path[0] = _collateralAsset;\\n        path[1] = weth;\\n        path[2] = _borrowAsset;\\n      }\\n\\n      IERC20(_collateralAsset).univApprove(address(swapper), _collateralAmount);\\n      swapperAmounts = swapper.swapTokensForExactTokens(\\n        _amountToReceive,\\n        _collateralAmount,\\n        path,\\n        address(this),\\n        // solhint-disable-next-line\\n        block.timestamp\\n      );\\n    }\\n\\n    return _collateralAmount - swapperAmounts[0];\\n  }\\n\\n  /**\\n   * @dev Get exact amount of collateral to be swapt\\n   * @param _collateralAsset: Address of vault collateralAsset\\n   * @param _borrowAsset: Address of vault borrowAsset\\n   * @param _amountToReceive: amount of underlying to receive\\n   */\\n  function _getCollateralInPlay(\\n    address _collateralAsset,\\n    address _borrowAsset,\\n    uint256 _amountToReceive\\n  ) internal view returns (uint256) {\\n    address weth = swapper.WETH();\\n    address[] memory path;\\n    if (_collateralAsset == ETH || _collateralAsset == weth) {\\n      path = new address[](2);\\n      path[0] = weth;\\n      path[1] = _borrowAsset;\\n    } else if (_borrowAsset == ETH || _borrowAsset == weth) {\\n      path = new address[](2);\\n      path[0] = _collateralAsset;\\n      path[1] = weth;\\n    } else {\\n      path = new address[](3);\\n      path[0] = _collateralAsset;\\n      path[1] = weth;\\n      path[2] = _borrowAsset;\\n    }\\n\\n    uint256[] memory amounts = swapper.getAmountsIn(_amountToReceive, path);\\n\\n    return amounts[0];\\n  }\\n\\n  function _constructParams(\\n    address[] memory _userAddrs,\\n    IVaultControl.VaultAssets memory _vAssets,\\n    address _vault,\\n    address _f1155\\n  )\\n    internal\\n    view\\n    returns (\\n      address[] memory addrs,\\n      uint256[] memory borrowBals,\\n      uint256 debtTotal\\n    )\\n  {\\n    addrs = new address[](_userAddrs.length);\\n\\n    uint256[] memory borrowIds = new uint256[](_userAddrs.length);\\n    uint256[] memory collateralIds = new uint256[](_userAddrs.length);\\n\\n    // Build the required Arrays to query balanceOfBatch from f1155\\n    for (uint256 i = 0; i < _userAddrs.length; i += 1) {\\n      collateralIds[i] = _vAssets.collateralID;\\n      borrowIds[i] = _vAssets.borrowID;\\n    }\\n\\n    // Get user collateral and debt balances\\n    borrowBals = IERC1155(_f1155).balanceOfBatch(_userAddrs, borrowIds);\\n    uint256[] memory collateralBals = IERC1155(_f1155).balanceOfBatch(_userAddrs, collateralIds);\\n\\n    uint256 neededCollateral;\\n\\n    for (uint256 i = 0; i < _userAddrs.length; i += 1) {\\n      // Compute amount of min collateral required including factors\\n      neededCollateral = IVault(_vault).getNeededCollateralFor(borrowBals[i], true);\\n\\n      // Check if User is liquidatable\\n      if (collateralBals[i] < neededCollateral) {\\n        // If true, add User debt balance to the total balance to be liquidated\\n        debtTotal += borrowBals[i];\\n        addrs[i] = _userAddrs[i];\\n      } else {\\n        // set user that is not liquidatable to Zero Address\\n        addrs[i] = address(0);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Perform multi-batch burn of collateral\\n   * checking bonus paid to liquidator by each\\n   */\\n  function _burnMulti(\\n    address[] memory _addrs,\\n    uint256[] memory _borrowBals,\\n    IVaultControl.VaultAssets memory _vAssets,\\n    address _vault,\\n    address _f1155\\n  ) internal {\\n    uint256 bonusPerUser;\\n    uint256 collateralInPlayPerUser;\\n\\n    for (uint256 i = 0; i < _addrs.length; i += 1) {\\n      if (_addrs[i] != address(0)) {\\n        bonusPerUser = IVault(_vault).getLiquidationBonusFor(_borrowBals[i]);\\n\\n        collateralInPlayPerUser = _getCollateralInPlay(\\n          _vAssets.collateralAsset,\\n          _vAssets.borrowAsset,\\n          _borrowBals[i] + bonusPerUser\\n        );\\n\\n        IFujiERC1155(_f1155).burn(_addrs[i], _vAssets.borrowID, _borrowBals[i]);\\n        IFujiERC1155(_f1155).burn(_addrs[i], _vAssets.collateralID, collateralInPlayPerUser);\\n      }\\n    }\\n  }\\n\\n  // Administrative functions\\n\\n  /**\\n   * @dev Set Factors \\\"a\\\" and \\\"b\\\" for a Struct Factor flashcloseF\\n   * @param _newFactorA: Nominator\\n   * @param _newFactorB: Denominator\\n   */\\n  function setFlashCloseFee(uint64 _newFactorA, uint64 _newFactorB) external isAuthorized {\\n    flashCloseF.a = _newFactorA;\\n    flashCloseF.b = _newFactorB;\\n  }\\n\\n  /**\\n   * @dev Sets the fujiAdmin Address\\n   * @param _newFujiAdmin: FujiAdmin Contract Address\\n   */\\n  function setFujiAdmin(address _newFujiAdmin) external isAuthorized {\\n    require(_newFujiAdmin != address(0), Errors.VL_ZERO_ADDR);\\n    _fujiAdmin = IFujiAdmin(_newFujiAdmin);\\n  }\\n\\n  /**\\n   * @dev Changes the Swapper contract address\\n   * @param _newSwapper: address of new swapper contract\\n   */\\n  function setSwapper(address _newSwapper) external isAuthorized {\\n    require(_newSwapper != address(0), Errors.VL_ZERO_ADDR);\\n    swapper = IUniswapV2Router02(_newSwapper);\\n  }\\n\\n  /**\\n   * @dev Changes the Oracle contract address\\n   * @param _newFujiOracle: address of new oracle contract\\n   */\\n  function setFujiOracle(address _newFujiOracle) external isAuthorized {\\n    require(_newFujiOracle != address(0), Errors.VL_ZERO_ADDR);\\n    _oracle = IFujiOracle(_newFujiOracle);\\n  }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/abstracts/claimable/Claimable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nabstract contract Claimable is Context {\\n  address private _owner;\\n  address public pendingOwner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n  event NewPendingOwner(address indexed owner);\\n\\n  constructor() {\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  modifier onlyOwner() {\\n    require(_msgSender() == owner(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  modifier onlyPendingOwner() {\\n    require(_msgSender() == pendingOwner);\\n    _;\\n  }\\n\\n  function renounceOwnership() public virtual onlyOwner {\\n    emit OwnershipTransferred(owner(), address(0));\\n    _owner = address(0);\\n  }\\n\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(pendingOwner == address(0));\\n    pendingOwner = newOwner;\\n    emit NewPendingOwner(newOwner);\\n  }\\n\\n  function cancelTransferOwnership() public onlyOwner {\\n    require(pendingOwner != address(0));\\n    delete pendingOwner;\\n    emit NewPendingOwner(address(0));\\n  }\\n\\n  function claimOwnership() public onlyPendingOwner {\\n    emit OwnershipTransferred(owner(), pendingOwner);\\n    _owner = pendingOwner;\\n    delete pendingOwner;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n  // Events\\n\\n  // Log Users Deposit\\n  event Deposit(address indexed userAddrs, address indexed asset, uint256 amount);\\n  // Log Users withdraw\\n  event Withdraw(address indexed userAddrs, address indexed asset, uint256 amount);\\n  // Log Users borrow\\n  event Borrow(address indexed userAddrs, address indexed asset, uint256 amount);\\n  // Log Users debt repay\\n  event Payback(address indexed userAddrs, address indexed asset, uint256 amount);\\n\\n  // Log New active provider\\n  event SetActiveProvider(address providerAddr);\\n  // Log Switch providers\\n  event Switch(\\n    address fromProviderAddrs,\\n    address toProviderAddr,\\n    uint256 debtamount,\\n    uint256 collattamount\\n  );\\n\\n  // Core Vault Functions\\n\\n  function deposit(uint256 _collateralAmount) external payable;\\n\\n  function withdraw(int256 _withdrawAmount) external;\\n\\n  function withdrawLiq(int256 _withdrawAmount) external;\\n\\n  function borrow(uint256 _borrowAmount) external;\\n\\n  function payback(int256 _repayAmount) external payable;\\n\\n  function paybackLiq(int256 _repayAmount) external payable;\\n\\n  function executeSwitch(\\n    address _newProvider,\\n    uint256 _flashLoanDebt,\\n    uint256 _fee\\n  ) external payable;\\n\\n  //Getter Functions\\n\\n  function activeProvider() external view returns (address);\\n\\n  function borrowBalance(address _provider) external view returns (uint256);\\n\\n  function depositBalance(address _provider) external view returns (uint256);\\n\\n  function getNeededCollateralFor(uint256 _amount, bool _withFactors)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function getLiquidationBonusFor(uint256 _amount) external view returns (uint256);\\n\\n  function getProviders() external view returns (address[] memory);\\n\\n  function fujiERC1155() external view returns (address);\\n\\n  //Setter Functions\\n\\n  function setActiveProvider(address _provider) external;\\n\\n  function updateF1155Balances() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVaultControl {\\n  struct VaultAssets {\\n    address collateralAsset;\\n    address borrowAsset;\\n    uint64 collateralID;\\n    uint64 borrowID;\\n  }\\n\\n  function vAssets() external view returns (VaultAssets memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFujiAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFujiAdmin {\\n  function validVault(address _vaultAddr) external view returns (bool);\\n\\n  function getFlasher() external view returns (address);\\n\\n  function getFliquidator() external view returns (address);\\n\\n  function getController() external view returns (address);\\n\\n  function getTreasury() external view returns (address payable);\\n\\n  function getVaultHarvester() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFujiOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFujiOracle {\\n  function getPriceOf(\\n    address _collateralAsset,\\n    address _borrowAsset,\\n    uint8 _decimals\\n  ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFujiERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFujiERC1155 {\\n  //Asset Types\\n  enum AssetType {\\n    //uint8 = 0\\n    collateralToken,\\n    //uint8 = 1\\n    debtToken\\n  }\\n\\n  //General Getter Functions\\n\\n  function getAssetID(AssetType _type, address _assetAddr) external view returns (uint256);\\n\\n  function qtyOfManagedAssets() external view returns (uint64);\\n\\n  function balanceOf(address _account, uint256 _id) external view returns (uint256);\\n\\n  // function splitBalanceOf(address account,uint256 _AssetID) external view  returns (uint256,uint256);\\n\\n  // function balanceOfBatchType(address account, AssetType _Type) external view returns (uint256);\\n\\n  //Permit Controlled  Functions\\n  function mint(\\n    address _account,\\n    uint256 _id,\\n    uint256 _amount,\\n    bytes memory _data\\n  ) external;\\n\\n  function burn(\\n    address _account,\\n    uint256 _id,\\n    uint256 _amount\\n  ) external;\\n\\n  function updateState(uint256 _assetID, uint256 _newBalance) external;\\n\\n  function addInitializeAsset(AssetType _type, address _addr) external returns (uint64);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Extended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20Extended {\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/flashloans/Flasher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./DyDxFlashLoans.sol\\\";\\nimport \\\"../abstracts/claimable/Claimable.sol\\\";\\nimport \\\"../interfaces/IFujiAdmin.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IFliquidator.sol\\\";\\nimport \\\"../interfaces/IFujiMappings.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../interfaces/aave/IFlashLoanReceiver.sol\\\";\\nimport \\\"../interfaces/aave/IAaveLendingPool.sol\\\";\\nimport \\\"../interfaces/cream/ICTokenFlashloan.sol\\\";\\nimport \\\"../interfaces/cream/ICFlashloanReceiver.sol\\\";\\nimport \\\"../libraries/LibUniversalERC20.sol\\\";\\nimport \\\"../libraries/FlashLoans.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\ncontract Flasher is DyDxFlashloanBase, IFlashLoanReceiver, ICFlashloanReceiver, ICallee, Claimable {\\n  using LibUniversalERC20 for IERC20;\\n\\n  IFujiAdmin private _fujiAdmin;\\n\\n  address private constant _ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  address private constant _WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  address private immutable _aaveLendingPool = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;\\n  address private immutable _dydxSoloMargin = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\\n  IFujiMappings private immutable _crMappings =\\n    IFujiMappings(0x03BD587Fe413D59A20F32Fc75f31bDE1dD1CD6c9);\\n\\n  // need to be payable because of the conversion ETH <> WETH\\n  receive() external payable {}\\n\\n  modifier isAuthorized() {\\n    require(\\n      msg.sender == _fujiAdmin.getController() ||\\n        msg.sender == _fujiAdmin.getFliquidator() ||\\n        msg.sender == owner(),\\n      Errors.VL_NOT_AUTHORIZED\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @dev Sets the fujiAdmin Address\\n   * @param _newFujiAdmin: FujiAdmin Contract Address\\n   */\\n  function setFujiAdmin(address _newFujiAdmin) public onlyOwner {\\n    _fujiAdmin = IFujiAdmin(_newFujiAdmin);\\n  }\\n\\n  /**\\n   * @dev Routing Function for Flashloan Provider\\n   * @param info: struct information for flashLoan\\n   * @param _flashnum: integer identifier of flashloan provider\\n   */\\n  function initiateFlashloan(FlashLoan.Info calldata info, uint8 _flashnum) external isAuthorized {\\n    if (_flashnum == 0) {\\n      _initiateAaveFlashLoan(info);\\n    } else if (_flashnum == 1) {\\n      _initiateDyDxFlashLoan(info);\\n    } else if (_flashnum == 2) {\\n      _initiateCreamFlashLoan(info);\\n    }\\n  }\\n\\n  // ===================== DyDx FlashLoan ===================================\\n\\n  /**\\n   * @dev Initiates a DyDx flashloan.\\n   * @param info: data to be passed between functions executing flashloan logic\\n   */\\n  function _initiateDyDxFlashLoan(FlashLoan.Info calldata info) internal {\\n    ISoloMargin solo = ISoloMargin(_dydxSoloMargin);\\n\\n    // Get marketId from token address\\n    uint256 marketId = _getMarketIdFromTokenAddress(solo, info.asset == _ETH ? _WETH : info.asset);\\n\\n    // 1. Withdraw $\\n    // 2. Call callFunction(...)\\n    // 3. Deposit back $\\n    Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\\n\\n    operations[0] = _getWithdrawAction(marketId, info.amount);\\n    // Encode FlashLoan.Info for callFunction\\n    operations[1] = _getCallAction(abi.encode(info));\\n    // add fee of 2 wei\\n    operations[2] = _getDepositAction(marketId, info.amount + 2);\\n\\n    Account.Info[] memory accountInfos = new Account.Info[](1);\\n    accountInfos[0] = _getAccountInfo(address(this));\\n\\n    solo.operate(accountInfos, operations);\\n  }\\n\\n  /**\\n   * @dev Executes DyDx Flashloan, this operation is required\\n   * and called by Solo when sending loaned amount\\n   * @param sender: Not used\\n   * @param account: Not used\\n   */\\n  function callFunction(\\n    address sender,\\n    Account.Info calldata account,\\n    bytes calldata data\\n  ) external override {\\n    require(msg.sender == _dydxSoloMargin && sender == address(this), Errors.VL_NOT_AUTHORIZED);\\n    account;\\n\\n    FlashLoan.Info memory info = abi.decode(data, (FlashLoan.Info));\\n\\n    uint256 _value;\\n    if (info.asset == _ETH) {\\n      // Convert WETH to ETH and assign amount to be set as msg.value\\n      _convertWethToEth(info.amount);\\n      _value = info.amount;\\n    } else {\\n      // Transfer to Vault the flashloan Amount\\n      // _value is 0\\n      IERC20(info.asset).univTransfer(payable(info.vault), info.amount);\\n    }\\n\\n    _executeAction(info, info.amount, 2, _value);\\n\\n    _approveBeforeRepay(info.asset == _ETH, info.asset, info.amount + 2, _dydxSoloMargin);\\n  }\\n\\n  // ===================== Aave FlashLoan ===================================\\n\\n  /**\\n   * @dev Initiates an Aave flashloan.\\n   * @param info: data to be passed between functions executing flashloan logic\\n   */\\n  function _initiateAaveFlashLoan(FlashLoan.Info calldata info) internal {\\n    //Initialize Instance of Aave Lending Pool\\n    IAaveLendingPool aaveLp = IAaveLendingPool(_aaveLendingPool);\\n\\n    //Passing arguments to construct Aave flashloan -limited to 1 asset type for now.\\n    address receiverAddress = address(this);\\n    address[] memory assets = new address[](1);\\n    assets[0] = address(info.asset == _ETH ? _WETH : info.asset);\\n    uint256[] memory amounts = new uint256[](1);\\n    amounts[0] = info.amount;\\n\\n    // 0 = no debt, 1 = stable, 2 = variable\\n    uint256[] memory modes = new uint256[](1);\\n    //modes[0] = 0;\\n\\n    //address onBehalfOf = address(this);\\n    //bytes memory params = abi.encode(info);\\n    //uint16 referralCode = 0;\\n\\n    //Aave Flashloan initiated.\\n    aaveLp.flashLoan(receiverAddress, assets, amounts, modes, address(this), abi.encode(info), 0);\\n  }\\n\\n  /**\\n   * @dev Executes Aave Flashloan, this operation is required\\n   * and called by Aaveflashloan when sending loaned amount\\n   */\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external override returns (bool) {\\n    require(msg.sender == _aaveLendingPool && initiator == address(this), Errors.VL_NOT_AUTHORIZED);\\n\\n    FlashLoan.Info memory info = abi.decode(params, (FlashLoan.Info));\\n\\n    uint256 _value;\\n    if (info.asset == _ETH) {\\n      // Convert WETH to ETH and assign amount to be set as msg.value\\n      _convertWethToEth(amounts[0]);\\n      _value = info.amount;\\n    } else {\\n      // Transfer to Vault the flashloan Amount\\n      // _value is 0\\n      IERC20(assets[0]).univTransfer(payable(info.vault), amounts[0]);\\n    }\\n\\n    _executeAction(info, amounts[0], premiums[0], _value);\\n\\n    //Approve aaveLP to spend to repay flashloan\\n    _approveBeforeRepay(info.asset == _ETH, assets[0], amounts[0] + premiums[0], _aaveLendingPool);\\n\\n    return true;\\n  }\\n\\n  // ===================== CreamFinance FlashLoan ===================================\\n\\n  /**\\n   * @dev Initiates an CreamFinance flashloan.\\n   * @param info: data to be passed between functions executing flashloan logic\\n   */\\n  function _initiateCreamFlashLoan(FlashLoan.Info calldata info) internal {\\n    // Get crToken Address for Flashloan Call\\n    // from IronBank because ETH on Cream cannot perform a flashloan\\n    address crToken = info.asset == _ETH\\n      ? 0x41c84c0e2EE0b740Cf0d31F63f3B6F627DC6b393\\n      : _crMappings.addressMapping(info.asset);\\n\\n    // Prepara data for flashloan execution\\n    bytes memory params = abi.encode(info);\\n\\n    // Initialize Instance of Cream crLendingContract\\n    ICTokenFlashloan(crToken).flashLoan(address(this), info.amount, params);\\n  }\\n\\n  /**\\n   * @dev Executes CreamFinance Flashloan, this operation is required\\n   * and called by CreamFinanceflashloan when sending loaned amount\\n   */\\n  function executeOperation(\\n    address sender,\\n    address underlying,\\n    uint256 amount,\\n    uint256 fee,\\n    bytes calldata params\\n  ) external override {\\n    // Check Msg. Sender is crToken Lending Contract\\n    // from IronBank because ETH on Cream cannot perform a flashloan\\n    address crToken = underlying == _WETH\\n      ? 0x41c84c0e2EE0b740Cf0d31F63f3B6F627DC6b393\\n      : _crMappings.addressMapping(underlying);\\n\\n    require(msg.sender == crToken && address(this) == sender, Errors.VL_NOT_AUTHORIZED);\\n    require(IERC20(underlying).balanceOf(address(this)) >= amount, Errors.VL_FLASHLOAN_FAILED);\\n\\n    FlashLoan.Info memory info = abi.decode(params, (FlashLoan.Info));\\n\\n    uint256 _value;\\n    if (info.asset == _ETH) {\\n      // Convert WETH to _ETH and assign amount to be set as msg.value\\n      _convertWethToEth(amount);\\n      _value = amount;\\n    } else {\\n      // Transfer to Vault the flashloan Amount\\n      // _value is 0\\n      IERC20(underlying).univTransfer(payable(info.vault), amount);\\n    }\\n\\n    // Do task according to CallType\\n    _executeAction(info, amount, fee, _value);\\n\\n    if (info.asset == _ETH) _convertEthToWeth(amount + fee);\\n    // Transfer flashloan + fee back to crToken Lending Contract\\n    IERC20(underlying).univTransfer(payable(crToken), amount + fee);\\n  }\\n\\n  function _executeAction(\\n    FlashLoan.Info memory _info,\\n    uint256 _amount,\\n    uint256 _fee,\\n    uint256 _value\\n  ) internal {\\n    if (_info.callType == FlashLoan.CallType.Switch) {\\n      IVault(_info.vault).executeSwitch{ value: _value }(_info.newProvider, _amount, _fee);\\n    } else if (_info.callType == FlashLoan.CallType.Close) {\\n      IFliquidator(_info.fliquidator).executeFlashClose{ value: _value }(\\n        _info.userAddrs[0],\\n        _info.vault,\\n        _amount,\\n        _fee\\n      );\\n    } else {\\n      IFliquidator(_info.fliquidator).executeFlashBatchLiquidation{ value: _value }(\\n        _info.userAddrs,\\n        _info.userBalances,\\n        _info.userliquidator,\\n        _info.vault,\\n        _amount,\\n        _fee\\n      );\\n    }\\n  }\\n\\n  function _approveBeforeRepay(\\n    bool _isETH,\\n    address _asset,\\n    uint256 _amount,\\n    address _spender\\n  ) internal {\\n    if (_isETH) {\\n      _convertEthToWeth(_amount);\\n      IERC20(_WETH).univApprove(payable(_spender), _amount);\\n    } else {\\n      IERC20(_asset).univApprove(payable(_spender), _amount);\\n    }\\n  }\\n\\n  function _convertEthToWeth(uint256 _amount) internal {\\n    IWETH(_WETH).deposit{ value: _amount }();\\n  }\\n\\n  function _convertWethToEth(uint256 _amount) internal {\\n    IWETH token = IWETH(_WETH);\\n    token.withdraw(_amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibUniversalERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary LibUniversalERC20 {\\n  using SafeERC20 for IERC20;\\n\\n  IERC20 private constant _ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n  IERC20 private constant _ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\\n\\n  function isETH(IERC20 token) internal pure returns (bool) {\\n    return (token == _ZERO_ADDRESS || token == _ETH_ADDRESS);\\n  }\\n\\n  function univBalanceOf(IERC20 token, address account) internal view returns (uint256) {\\n    if (isETH(token)) {\\n      return account.balance;\\n    } else {\\n      return token.balanceOf(account);\\n    }\\n  }\\n\\n  function univTransfer(\\n    IERC20 token,\\n    address payable to,\\n    uint256 amount\\n  ) internal {\\n    if (amount > 0) {\\n      if (isETH(token)) {\\n        (bool sent, ) = to.call{ value: amount }(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n      } else {\\n        token.safeTransfer(to, amount);\\n      }\\n    }\\n  }\\n\\n  function univApprove(\\n    IERC20 token,\\n    address to,\\n    uint256 amount\\n  ) internal {\\n    require(!isETH(token), \\\"Approve called on ETH\\\");\\n\\n    if (amount == 0) {\\n      token.safeApprove(to, 0);\\n    } else {\\n      uint256 allowance = token.allowance(address(this), to);\\n      if (allowance < amount) {\\n        if (allowance > 0) {\\n          token.safeApprove(to, 0);\\n        }\\n        token.safeApprove(to, amount);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FlashLoans.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Account {\\n  enum Status {\\n    Normal,\\n    Liquid,\\n    Vapor\\n  }\\n  struct Info {\\n    address owner; // The address that owns the account\\n    uint256 number; // A nonce that allows a single address to control many accounts\\n  }\\n}\\n\\nlibrary Actions {\\n  enum ActionType {\\n    Deposit, // supply tokens\\n    Withdraw, // borrow tokens\\n    Transfer, // transfer balance between accounts\\n    Buy, // buy an amount of some token (publicly)\\n    Sell, // sell an amount of some token (publicly)\\n    Trade, // trade tokens against another account\\n    Liquidate, // liquidate an undercollateralized or expiring account\\n    Vaporize, // use excess tokens to zero-out a completely negative account\\n    Call // send arbitrary data to an address\\n  }\\n\\n  struct ActionArgs {\\n    ActionType actionType;\\n    uint256 accountId;\\n    Types.AssetAmount amount;\\n    uint256 primaryMarketId;\\n    uint256 secondaryMarketId;\\n    address otherAddress;\\n    uint256 otherAccountId;\\n    bytes data;\\n  }\\n}\\n\\nlibrary Types {\\n  enum AssetDenomination {\\n    Wei, // the amount is denominated in wei\\n    Par // the amount is denominated in par\\n  }\\n\\n  enum AssetReference {\\n    Delta, // the amount is given as a delta from the current value\\n    Target // the amount is given as an exact number to end up at\\n  }\\n\\n  struct AssetAmount {\\n    bool sign; // true if positive\\n    AssetDenomination denomination;\\n    AssetReference ref;\\n    uint256 value;\\n  }\\n}\\n\\nlibrary FlashLoan {\\n  /**\\n   * @dev Used to determine which vault's function to call post-flashloan:\\n   * - Switch for executeSwitch(...)\\n   * - Close for executeFlashClose(...)\\n   * - Liquidate for executeFlashLiquidation(...)\\n   * - BatchLiquidate for executeFlashBatchLiquidation(...)\\n   */\\n  enum CallType {\\n    Switch,\\n    Close,\\n    BatchLiquidate\\n  }\\n\\n  /**\\n   * @dev Struct of params to be passed between functions executing flashloan logic\\n   * @param asset: Address of asset to be borrowed with flashloan\\n   * @param amount: Amount of asset to be borrowed with flashloan\\n   * @param vault: Vault's address on which the flashloan logic to be executed\\n   * @param newProvider: New provider's address. Used when callType is Switch\\n   * @param userAddrs: User's address array Used when callType is BatchLiquidate\\n   * @param userBals:  Array of user's balances, Used when callType is BatchLiquidate\\n   * @param userliquidator: The user's address who is  performing liquidation. Used when callType is Liquidate\\n   * @param fliquidator: Fujis Liquidator's address.\\n   */\\n  struct Info {\\n    CallType callType;\\n    address asset;\\n    uint256 amount;\\n    address vault;\\n    address newProvider;\\n    address[] userAddrs;\\n    uint256[] userBalances;\\n    address userliquidator;\\n    address fliquidator;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author Fuji\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = Validation Logic 100 series\\n *  - MATH = Math libraries 200 series\\n *  - RF = Refinancing 300 series\\n *  - VLT = vault 400 series\\n *  - SP = Special 900 series\\n */\\nlibrary Errors {\\n  //Errors\\n  string public constant VL_INDEX_OVERFLOW = \\\"100\\\"; // index overflows uint128\\n  string public constant VL_INVALID_MINT_AMOUNT = \\\"101\\\"; //invalid amount to mint\\n  string public constant VL_INVALID_BURN_AMOUNT = \\\"102\\\"; //invalid amount to burn\\n  string public constant VL_AMOUNT_ERROR = \\\"103\\\"; //Input value >0, and for ETH msg.value and amount shall match\\n  string public constant VL_INVALID_WITHDRAW_AMOUNT = \\\"104\\\"; //Withdraw amount exceeds provided collateral, or falls undercollaterized\\n  string public constant VL_INVALID_BORROW_AMOUNT = \\\"105\\\"; //Borrow amount does not meet collaterization\\n  string public constant VL_NO_DEBT_TO_PAYBACK = \\\"106\\\"; //Msg sender has no debt amount to be payback\\n  string public constant VL_MISSING_ERC20_ALLOWANCE = \\\"107\\\"; //Msg sender has not approved ERC20 full amount to transfer\\n  string public constant VL_USER_NOT_LIQUIDATABLE = \\\"108\\\"; //User debt position is not liquidatable\\n  string public constant VL_DEBT_LESS_THAN_AMOUNT = \\\"109\\\"; //User debt is less than amount to partial close\\n  string public constant VL_PROVIDER_ALREADY_ADDED = \\\"110\\\"; // Provider is already added in Provider Array\\n  string public constant VL_NOT_AUTHORIZED = \\\"111\\\"; //Not authorized\\n  string public constant VL_INVALID_COLLATERAL = \\\"112\\\"; //There is no Collateral, or Collateral is not in active in vault\\n  string public constant VL_NO_ERC20_BALANCE = \\\"113\\\"; //User does not have ERC20 balance\\n  string public constant VL_INPUT_ERROR = \\\"114\\\"; //Check inputs. For ERC1155 batch functions, array sizes should match.\\n  string public constant VL_ASSET_EXISTS = \\\"115\\\"; //Asset intended to be added already exists in FujiERC1155\\n  string public constant VL_ZERO_ADDR_1155 = \\\"116\\\"; //ERC1155: balance/transfer for zero address\\n  string public constant VL_NOT_A_CONTRACT = \\\"117\\\"; //Address is not a contract.\\n  string public constant VL_INVALID_ASSETID_1155 = \\\"118\\\"; //ERC1155 Asset ID is invalid.\\n  string public constant VL_NO_ERC1155_BALANCE = \\\"119\\\"; //ERC1155: insufficient balance for transfer.\\n  string public constant VL_MISSING_ERC1155_APPROVAL = \\\"120\\\"; //ERC1155: transfer caller is not owner nor approved.\\n  string public constant VL_RECEIVER_REJECT_1155 = \\\"121\\\"; //ERC1155Receiver rejected tokens\\n  string public constant VL_RECEIVER_CONTRACT_NON_1155 = \\\"122\\\"; //ERC1155: transfer to non ERC1155Receiver implementer\\n  string public constant VL_OPTIMIZER_FEE_SMALL = \\\"123\\\"; //Fuji OptimizerFee has to be > 1 RAY (1e27)\\n  string public constant VL_UNDERCOLLATERIZED_ERROR = \\\"124\\\"; // Flashloan-Flashclose cannot be used when User's collateral is worth less than intended debt position to close.\\n  string public constant VL_MINIMUM_PAYBACK_ERROR = \\\"125\\\"; // Minimum Amount payback should be at least Fuji Optimizerfee accrued interest.\\n  string public constant VL_HARVESTING_FAILED = \\\"126\\\"; // Harvesting Function failed, check provided _farmProtocolNum or no claimable balance.\\n  string public constant VL_FLASHLOAN_FAILED = \\\"127\\\"; // Flashloan failed\\n  string public constant VL_ERC1155_NOT_TRANSFERABLE = \\\"128\\\"; // ERC1155: Not Transferable\\n  string public constant VL_SWAP_SLIPPAGE_LIMIT_EXCEED = \\\"129\\\"; // ERC1155: Not Transferable\\n  string public constant VL_ZERO_ADDR = \\\"130\\\"; // Zero Address\\n\\n  string public constant MATH_DIVISION_BY_ZERO = \\\"201\\\";\\n  string public constant MATH_ADDITION_OVERFLOW = \\\"202\\\";\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = \\\"203\\\";\\n\\n  string public constant RF_INVALID_RATIO_VALUES = \\\"301\\\"; // Ratio Value provided is invalid, _ratioA/_ratioB <= 1, and > 0, or activeProvider borrowBalance = 0\\n\\n  string public constant VLT_CALLER_MUST_BE_VAULT = \\\"401\\\"; // The caller of this function must be a vault\\n\\n  string public constant ORACLE_INVALID_LENGTH = \\\"501\\\"; // The assets length and price feeds length doesn't match\\n  string public constant ORACLE_NONE_PRICE_FEED = \\\"502\\\"; // The price feed is not found\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/flashloans/DyDxFlashLoans.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/dydx/ICallee.sol\\\";\\nimport \\\"../interfaces/dydx/ISoloMargin.sol\\\";\\nimport \\\"../libraries/FlashLoans.sol\\\";\\n\\ncontract DyDxFlashloanBase {\\n  // -- Internal Helper functions -- //\\n\\n  function _getMarketIdFromTokenAddress(ISoloMargin solo, address token)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 numMarkets = solo.getNumMarkets();\\n\\n    address curToken;\\n    for (uint256 i = 0; i < numMarkets; i++) {\\n      curToken = solo.getMarketTokenAddress(i);\\n\\n      if (curToken == token) {\\n        return i;\\n      }\\n    }\\n\\n    revert(\\\"No marketId found\\\");\\n  }\\n\\n  function _getAccountInfo(address receiver) internal pure returns (Account.Info memory) {\\n    return Account.Info({ owner: receiver, number: 1 });\\n  }\\n\\n  function _getWithdrawAction(uint256 marketId, uint256 amount)\\n    internal\\n    view\\n    returns (Actions.ActionArgs memory)\\n  {\\n    return\\n      Actions.ActionArgs({\\n        actionType: Actions.ActionType.Withdraw,\\n        accountId: 0,\\n        amount: Types.AssetAmount({\\n          sign: false,\\n          denomination: Types.AssetDenomination.Wei,\\n          ref: Types.AssetReference.Delta,\\n          value: amount\\n        }),\\n        primaryMarketId: marketId,\\n        secondaryMarketId: 0,\\n        otherAddress: address(this),\\n        otherAccountId: 0,\\n        data: \\\"\\\"\\n      });\\n  }\\n\\n  function _getCallAction(bytes memory data) internal view returns (Actions.ActionArgs memory) {\\n    return\\n      Actions.ActionArgs({\\n        actionType: Actions.ActionType.Call,\\n        accountId: 0,\\n        amount: Types.AssetAmount({\\n          sign: false,\\n          denomination: Types.AssetDenomination.Wei,\\n          ref: Types.AssetReference.Delta,\\n          value: 0\\n        }),\\n        primaryMarketId: 0,\\n        secondaryMarketId: 0,\\n        otherAddress: address(this),\\n        otherAccountId: 0,\\n        data: data\\n      });\\n  }\\n\\n  function _getDepositAction(uint256 marketId, uint256 amount)\\n    internal\\n    view\\n    returns (Actions.ActionArgs memory)\\n  {\\n    return\\n      Actions.ActionArgs({\\n        actionType: Actions.ActionType.Deposit,\\n        accountId: 0,\\n        amount: Types.AssetAmount({\\n          sign: true,\\n          denomination: Types.AssetDenomination.Wei,\\n          ref: Types.AssetReference.Delta,\\n          value: amount\\n        }),\\n        primaryMarketId: marketId,\\n        secondaryMarketId: 0,\\n        otherAddress: address(this),\\n        otherAccountId: 0,\\n        data: \\\"\\\"\\n      });\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFliquidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFliquidator {\\n  function executeFlashClose(\\n    address _userAddr,\\n    address _vault,\\n    uint256 _amount,\\n    uint256 _flashloanfee\\n  ) external payable;\\n\\n  function executeFlashBatchLiquidation(\\n    address[] calldata _userAddrs,\\n    uint256[] calldata _usrsBals,\\n    address _liquidatorAddr,\\n    address _vault,\\n    uint256 _amount,\\n    uint256 _flashloanFee\\n  ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFujiMappings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFujiMappings {\\n  function addressMapping(address) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n  function approve(address, uint256) external;\\n\\n  function deposit() external payable;\\n\\n  function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/aave/IFlashLoanReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFlashLoanReceiver {\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/aave/IAaveLendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAaveLendingPool {\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  function deposit(\\n    address _asset,\\n    uint256 _amount,\\n    address _onBehalfOf,\\n    uint16 _referralCode\\n  ) external;\\n\\n  function withdraw(\\n    address _asset,\\n    uint256 _amount,\\n    address _to\\n  ) external;\\n\\n  function borrow(\\n    address _asset,\\n    uint256 _amount,\\n    uint256 _interestRateMode,\\n    uint16 _referralCode,\\n    address _onBehalfOf\\n  ) external;\\n\\n  function repay(\\n    address _asset,\\n    uint256 _amount,\\n    uint256 _rateMode,\\n    address _onBehalfOf\\n  ) external;\\n\\n  function setUserUseReserveAsCollateral(address _asset, bool _useAsCollateral) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/cream/ICTokenFlashloan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICTokenFlashloan {\\n  function flashLoan(\\n    address receiver,\\n    uint256 amount,\\n    bytes calldata params\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/cream/ICFlashloanReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICFlashloanReceiver {\\n  function executeOperation(\\n    address sender,\\n    address underlying,\\n    uint256 amount,\\n    uint256 fee,\\n    bytes calldata params\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/dydx/ICallee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../libraries/FlashLoans.sol\\\";\\n\\n/**\\n * @title ICallee\\n * @author dYdX\\n *\\n * Interface that Callees for Solo must implement in order to ingest data.\\n */\\ninterface ICallee {\\n  /**\\n   * Allows users to send this contract arbitrary data.\\n   *\\n   * @param  sender       The msg.sender to Solo\\n   * @param  accountInfo  The account from which the data is being sent\\n   * @param  data         Arbitrary data given by the sender\\n   */\\n  function callFunction(\\n    address sender,\\n    Account.Info memory accountInfo,\\n    bytes memory data\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/dydx/ISoloMargin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../libraries/FlashLoans.sol\\\";\\n\\ninterface ISoloMargin {\\n  struct Price {\\n    uint256 value;\\n  }\\n\\n  struct Value {\\n    uint256 value;\\n  }\\n\\n  struct Rate {\\n    uint256 value;\\n  }\\n\\n  struct Wei {\\n    bool sign;\\n    uint256 value;\\n  }\\n\\n  function operate(Account.Info[] calldata _accounts, Actions.ActionArgs[] calldata _actions) external;\\n\\n  function getAccountWei(Account.Info calldata _account, uint256 _marketId)\\n    external\\n    view\\n    returns (Wei memory);\\n\\n  function getNumMarkets() external view returns (uint256);\\n\\n  function getMarketTokenAddress(uint256 _marketId) external view returns (address);\\n\\n  function getAccountValues(Account.Info memory _account)\\n    external\\n    view\\n    returns (Value memory, Value memory);\\n\\n  function getMarketInterestRate(uint256 _marketId) external view returns (Rate memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FlashClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLIPPAGE_LIMIT_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLIPPAGE_LIMIT_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"batchLiquidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_borrowBals\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_flashloanFee\",\"type\":\"uint256\"}],\"name\":\"executeFlashBatchLiquidation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_flashloanFee\",\"type\":\"uint256\"}],\"name\":\"executeFlashClose\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_flashnum\",\"type\":\"uint8\"}],\"name\":\"flashBatchLiquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_flashnum\",\"type\":\"uint8\"}],\"name\":\"flashClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashCloseF\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"a\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"b\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_newFactorA\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_newFactorB\",\"type\":\"uint64\"}],\"name\":\"setFlashCloseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFujiAdmin\",\"type\":\"address\"}],\"name\":\"setFujiAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFujiOracle\",\"type\":\"address\"}],\"name\":\"setFujiOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSwapper\",\"type\":\"address\"}],\"name\":\"setSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Fliquidator","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}