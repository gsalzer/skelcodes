{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/silos/OlympusStakingSilo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/ISilo.sol\\\";\\n\\ninterface IOlympusStaking {\\n    function claim(address _recipient) external;\\n\\n    function stake(uint256 _amount, address _recipient) external returns (bool);\\n\\n    function unstake(uint256 _amount, bool _trigger) external;\\n\\n    function OHM() external view returns (address);\\n\\n    function sOHM() external view returns (address);\\n}\\n\\ncontract OlympusStakingSilo is ISilo {\\n    IOlympusStaking public immutable olympusStaking;\\n\\n    IERC20 public immutable OHM;\\n\\n    IERC20 public immutable sOHM;\\n\\n    constructor(IOlympusStaking _olympusStaking) {\\n        olympusStaking = _olympusStaking;\\n        OHM = IERC20(_olympusStaking.OHM());\\n        sOHM = IERC20(_olympusStaking.sOHM());\\n    }\\n\\n    function poke() external override {}\\n\\n    function deposit(uint256 amount) external override {\\n        if (amount == 0) return;\\n\\n        _approve(address(OHM), address(olympusStaking), type(uint256).max);\\n        olympusStaking.stake(amount, address(this));\\n        olympusStaking.claim(address(this));\\n    }\\n\\n    function withdraw(uint256 amount) external override {\\n        if (amount == 0) return;\\n        \\n        _approve(address(sOHM), address(olympusStaking), type(uint256).max);\\n        olympusStaking.unstake(amount, false);\\n    }\\n\\n    function balanceOf(address account) external view override returns (uint256 balance) {\\n        return sOHM.balanceOf(account);\\n    }\\n\\n    function shouldAllowEmergencySweepOf(address token) external view override returns (bool shouldAllow) {\\n        shouldAllow = token != address(sOHM);\\n    }\\n\\n    function _approve(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        // 200 gas to read uint256\\n        if (IERC20(token).allowance(address(this), spender) < amount) {\\n            // 20000 gas to write uint256 if changing from zero to non-zero\\n            // 5000  gas to write uint256 if changing from non-zero to non-zero\\n            IERC20(token).approve(spender, type(uint256).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISilo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISilo {\\n    function poke() external;\\n    \\n    function deposit(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function balanceOf(address account) external view returns (uint256 balance);\\n\\n    function shouldAllowEmergencySweepOf(address token) external view returns (bool shouldAllow);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IOlympusStaking\",\"name\":\"_olympusStaking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OHM\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"olympusStaking\",\"outputs\":[{\"internalType\":\"contract IOlympusStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sOHM\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"shouldAllowEmergencySweepOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"shouldAllow\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OlympusStakingSilo","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"000000000000000000000000fd31c7d00ca47653c6ce64af53c1571f9c36566a","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}