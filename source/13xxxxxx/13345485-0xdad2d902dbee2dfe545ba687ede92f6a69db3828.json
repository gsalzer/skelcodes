{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity ^0.7.6;\r\n\r\n\r\n// File: contracts/interfaces/multiOwned/IMultiOwnedEvents.sol\r\n/// @title MultiOwned 事件接口定义\r\ninterface IMultiOwnedEvents {\r\n    /// @notice 签名时，触发该事件\r\n    event Confirmation(address owner, uint txId);\r\n\r\n    /// @notice 撤销签名时触发该事件\r\n    event Revoke(address owner, uint txId);\r\n\r\n    /// @notice owner移交时，触发该事件\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n\r\n    /// @notice 添加新的owner时，触发该事件\r\n    event OwnerAdded(address newOwner);\r\n\r\n    /// @notice 移除owner时，触发该事件\r\n    event OwnerRemoved(address oldOwner);\r\n\r\n    /// @notice 最小签名数量发生改变时，触发该事件\r\n    event RequirementChanged(uint newRequirement);\r\n}\r\n\r\n// File: contracts/interfaces/multiOwned/IMultiOwnedState.sol\r\n/// @title MultiOwned 状态变量及只读函数\r\ninterface IMultiOwnedState {\r\n    /// @notice 最小需要的签名数量\r\n    function requiredNum() external view returns(uint);\r\n\r\n    /// @notice 所有owner个数\r\n    function ownerNums() external view returns(uint);\r\n\r\n    /// @notice 查询某个pending交易的状态\r\n    /// @param txId 交易索引号\r\n    /// @return yetNeeded 还需要签名的数量, ownersDone 已经签名的owners;\r\n    function pendingOf(uint txId) external view returns(uint yetNeeded, uint ownersDone);\r\n\r\n    /// @notice 下一个pending队列交易号\r\n    function nextPendingTxId() external view returns(uint);\r\n\r\n    /// @notice 查询某个owner地址\r\n    /// @dev Gets an owner by 0-indexed position (using numOwners as the count)\r\n    function getOwner(uint ownerIndex) external view returns (address);\r\n\r\n    /// @notice 地址是否为owner\r\n    function isOwner(address addr) external view returns (bool);\r\n    \r\n    /// @notice owner是否已经签名交易\r\n    /// @param txId 交易索引号\r\n    /// @param owner owner地址\r\n    function hasConfirmed(uint txId, address owner) external view returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/multiOwned/IMultiOwnedActions.sol\r\n/// @title MultiOwned 操作接口定义\r\ninterface IMultiOwnedActions {\r\n    /// @notice 撤销某笔pending交易的签名\r\n    /// @dev This function can only be called by owner\r\n    /// @param txId 交易号\r\n    function revoke(uint txId) external;\r\n\r\n    /// @notice 修改owner为其它地址\r\n    /// @dev This function can only be called by self\r\n    /// @param from 源地址\r\n    /// @param to 目标地址\r\n    function changeOwner(address from, address to) external;\r\n\r\n    /// @notice 添加新的owner\r\n    /// @dev This function can only be called by self\r\n    /// @param newOwner 新的owner地址\r\n    function addOwner(address newOwner) external;\r\n\r\n    /// @notice 移除owner\r\n    /// @dev This function can only be called by self\r\n    /// @param owner owner地址\r\n    function removeOwner(address owner) external;\r\n\r\n    /// @notice 修改最小签名数\r\n    /// @dev This function can only be called by self\r\n    /// @param newRequired 新的最小签名数\r\n    function changeRequirement(uint newRequired) external;\r\n}\r\n\r\n// File: contracts/interfaces/IMultiOwned.sol\r\n/// @title MultiOwned接口\r\n/// @notice 接口定义分散在多个接口文件\r\ninterface IMultiOwned is \r\n    IMultiOwnedEvents, \r\n    IMultiOwnedState, \r\n    IMultiOwnedActions\r\n{    \r\n}\r\n\r\n// File: contracts/base/MultiOwned.sol\r\ncontract MultiOwned is IMultiOwned {\r\n    /// @inheritdoc IMultiOwnedState\r\n    uint public override requiredNum;\r\n    /// @inheritdoc IMultiOwnedState\r\n    uint public override ownerNums;\r\n    \r\n    // list of owners\r\n    uint public constant MAX_OWNERS = 16;\r\n    address[MAX_OWNERS + 1] owners;\r\n    mapping(address => uint) ownerIndexOf;\r\n\r\n    /// @inheritdoc IMultiOwnedState\r\n    mapping(uint => PendingState) public override pendingOf;\r\n    /// @inheritdoc IMultiOwnedState\r\n    uint public override nextPendingTxId = 1;\r\n\r\n    struct PendingState {\r\n        uint yetNeeded;\r\n        uint ownersDone;\r\n    }\r\n\r\n    // self call function modifier.\r\n    modifier onlySelfCall() {\r\n        require(msg.sender == address(this), \"OSC\");\r\n        _;\r\n    }\r\n\r\n    constructor(address[] memory _owners, uint _required) {\r\n        uint nums = _owners.length + 1;\r\n        require(MAX_OWNERS >= nums, \"MAX\");\r\n        require(_required <= nums && _required > 0, \"REQ\");\r\n        \r\n        ownerNums = nums;\r\n        owners[1] = msg.sender;\r\n        ownerIndexOf[msg.sender] = 1;\r\n        for (uint i = 0; i < _owners.length; ++i) {\r\n            require(_owners[i] != address(0), \"ZA\");\r\n            require(!isOwner(_owners[i]), \"ISO\");\r\n            owners[2 + i] = _owners[i];\r\n            ownerIndexOf[_owners[i]] = 2 + i;\r\n        }\r\n        requiredNum = _required;\r\n    }\r\n    \r\n    /// @inheritdoc IMultiOwnedActions\r\n    function revoke(uint txId) external override {\r\n        uint ownerIndex = ownerIndexOf[msg.sender];\r\n        require(ownerIndex != 0, \"OC\");\r\n\r\n        uint ownerIndexBit = 2**ownerIndex;\r\n        PendingState storage pending = pendingOf[txId];\r\n        require(pending.ownersDone & ownerIndexBit > 0, \"OD\");\r\n\r\n        pending.yetNeeded++;\r\n        pending.ownersDone -= ownerIndexBit;\r\n        emit Revoke(msg.sender, txId);\r\n    }\r\n    \r\n\r\n    /// @inheritdoc IMultiOwnedActions\r\n    function changeOwner(address from, address to) onlySelfCall external override {\r\n        uint ownerIndex = ownerIndexOf[from];\r\n        require(ownerIndex > 0, \"COF\");\r\n        require(!isOwner(to) && to != address(0), \"COT\");\r\n\r\n        clearPending();\r\n        owners[ownerIndex] = to;\r\n        ownerIndexOf[from] = 0;\r\n        ownerIndexOf[to] = ownerIndex;\r\n        emit OwnerChanged(from, to);\r\n    }\r\n    \r\n    /// @inheritdoc IMultiOwnedActions\r\n    function addOwner(address newOwner) onlySelfCall external override {\r\n        require(!isOwner(newOwner), \"AON\");\r\n        require(ownerNums < MAX_OWNERS, \"AOM\");\r\n        \r\n        clearPending();\r\n        ownerNums++;\r\n        owners[ownerNums] = newOwner;\r\n        ownerIndexOf[newOwner] = ownerNums;\r\n        emit OwnerAdded(newOwner);\r\n    }\r\n    \r\n    /// @inheritdoc IMultiOwnedActions\r\n    function removeOwner(address owner) onlySelfCall external override {\r\n        uint ownerIndex = ownerIndexOf[owner];\r\n        require(ownerIndex > 0, \"ROI\");\r\n        require(requiredNum <= ownerNums - 1, \"RON\");\r\n\r\n        owners[ownerIndex] = address(0);\r\n        ownerIndexOf[owner] = 0;\r\n        clearPending();\r\n        reorganizeOwners(); \r\n        emit OwnerRemoved(owner);\r\n    }\r\n    \r\n    /// @inheritdoc IMultiOwnedActions\r\n    function changeRequirement(uint newRequired) onlySelfCall external override {\r\n        require(newRequired <= ownerNums && newRequired > 0, \"CR\");\r\n\r\n        requiredNum = newRequired;\r\n        clearPending();\r\n        emit RequirementChanged(newRequired);\r\n    }\r\n\r\n    /// @inheritdoc IMultiOwnedState\r\n    function getOwner(uint ownerIndex) external override view returns (address) {\r\n        return address(owners[ownerIndex + 1]);\r\n    }\r\n\r\n    /// @inheritdoc IMultiOwnedState\r\n    function isOwner(address addr) public override view returns (bool) {\r\n        return ownerIndexOf[addr] > 0;\r\n    }\r\n    \r\n    /// @inheritdoc IMultiOwnedState\r\n    function hasConfirmed(uint txId, address owner) external override view returns (bool) {\r\n        PendingState storage pending = pendingOf[txId];\r\n        uint ownerIndex = ownerIndexOf[owner];\r\n        if (ownerIndex == 0) return false;\r\n        \r\n        // determine the bit to set for this owner.\r\n        uint ownerIndexBit = 2**ownerIndex;\r\n        return (pending.ownersDone & ownerIndexBit > 0);\r\n    }\r\n    \r\n\r\n    function confirmAndCheck(uint txId, uint ownerIndex) internal returns (bool) {\r\n        PendingState storage pending = pendingOf[txId];\r\n        // if we're not yet working on this operation, switch over and reset the confirmation status.\r\n        if (pending.yetNeeded == 0) {\r\n            // reset count of confirmations needed.\r\n            pending.yetNeeded = requiredNum;\r\n            // reset which owners have confirmed (none) - set our bitmap to 0.\r\n            pending.ownersDone = 0;\r\n            nextPendingTxId = txId + 1;\r\n        }\r\n        // determine the bit to set for this owner.\r\n        uint ownerIndexBit = 2**ownerIndex;\r\n        // make sure we (the message sender) haven't confirmed this operation previously.\r\n        if (pending.ownersDone & ownerIndexBit == 0) {\r\n            emit Confirmation(msg.sender, txId);\r\n            // ok - check if count is enough to go ahead.\r\n            if (pending.yetNeeded <= 1) {\r\n                // enough confirmations: reset and run interior.\r\n                delete pendingOf[txId];\r\n                return true;\r\n            } else {\r\n                // not enough: record that this owner in particular confirmed.\r\n                pending.yetNeeded--;\r\n                pending.ownersDone |= ownerIndexBit;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function reorganizeOwners() private {\r\n        uint free = 1;\r\n        while (free < ownerNums) {\r\n            while (free < ownerNums && owners[free] != address(0)) free++;\r\n            while (ownerNums > 1 && owners[ownerNums] == address(0)) ownerNums--;\r\n            if (free < ownerNums && owners[ownerNums] != address(0) && owners[free] == address(0)) {\r\n                owners[free] = owners[ownerNums];\r\n                ownerIndexOf[owners[free]] = free;\r\n                owners[ownerNums] = address(0);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function clearPending() virtual internal {\r\n        uint length = nextPendingTxId;\r\n        for (uint i = 1; i < length; ++i)\r\n            if (pendingOf[i].yetNeeded != 0) delete pendingOf[i];\r\n        nextPendingTxId = 1;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IMultiSigWallet.sol\r\n/// @title MultiSigWallet 接口\r\ninterface IMultiSigWallet {    \r\n    /// @notice 执行一笔多签交易时，触发该事件\r\n    event MultiTransact(address owner, uint txId, uint value, address to, bytes data);\r\n    \r\n     /// @notice 创建完一笔还需要签名的交易时，触发该事件\r\n    event ConfirmationNeeded(uint txId, address initiator, uint value, address to, bytes data);\r\n\r\n\r\n    /// @notice 查询某个pending交易的数据\r\n    /// @param txId 交易索引号\r\n     function txsOf(uint txId) external view returns(\r\n        address to,\r\n        uint value,\r\n        bytes memory data\r\n    );\r\n\r\n\r\n    /// @notice 创建待签名的交易\r\n    /// @dev This function can only be called by owner\r\n    /// @param to 目标地址\r\n    /// @param value eth数量\r\n    /// @param data 调用目标方法的msg.data\r\n    /// @return txId 交易号\r\n    function execute(address to, uint value, bytes memory data) external returns (uint txId);\r\n\r\n    /// @notice 签名pending交易\r\n    /// @dev This function can only be called by owner\r\n    /// @param txId 交易号\r\n    /// @return success 是否执行成功\r\n    function confirm(uint txId) external returns (bool success);\r\n}\r\n\r\n// File: contracts/MultiSigWallet.sol\r\ncontract MultiSigWallet is IMultiSigWallet, MultiOwned {\r\n    /// @inheritdoc IMultiSigWallet\r\n    mapping (uint => Transaction) public override txsOf;\r\n\r\n    struct Transaction {\r\n        address to;\r\n        uint value;\r\n        bytes data;\r\n    }\r\n\r\n    constructor(address[] memory _owners, uint _required)\r\n            MultiOwned(_owners, _required) {\r\n    }\r\n    \r\n    function kill(address payable to) onlySelfCall external {\r\n        selfdestruct(to);\r\n    }\r\n\r\n    receive() external payable {\r\n\r\n    }\r\n    \r\n    /// @inheritdoc IMultiSigWallet\r\n    function execute(address to, uint value, bytes memory data) override external returns (uint txId) {\r\n        uint ownerIndex = ownerIndexOf[msg.sender];\r\n        require(ownerIndex != 0, \"OC\");\r\n        require(to != address(0), \"EXT\");\r\n\r\n        if(requiredNum <= 1){\r\n            (bool success, ) = to.call{value:value}(data);\r\n            require(success, \"EXC\");\r\n            emit MultiTransact(msg.sender, txId, value, to, data);\r\n            return 0;\r\n        }\r\n        \r\n        txId = nextPendingTxId;\r\n        confirmAndCheck(txId, ownerIndex);\r\n        txsOf[txId].to = to;\r\n        txsOf[txId].value = value;\r\n        txsOf[txId].data = data;\r\n        emit ConfirmationNeeded(txId, msg.sender, value, to, data);\r\n    }\r\n    \r\n    /// @inheritdoc IMultiSigWallet\r\n    function confirm(uint txId) override external returns (bool success) {\r\n        uint ownerIndex = ownerIndexOf[msg.sender];\r\n        require(ownerIndex != 0, \"OC\");\r\n\r\n        address to = txsOf[txId].to;\r\n        uint value = txsOf[txId].value;\r\n        bytes memory data = txsOf[txId].data;\r\n        require(to != address(0), \"TXI\"); \r\n        if(!confirmAndCheck(txId, ownerIndex)) return true;\r\n\r\n        (success, ) = to.call{value:value}(data);\r\n        emit MultiTransact(msg.sender, txId, value, to, data);\r\n        \r\n        if (to != address(this)) delete txsOf[txId];\r\n    }\r\n    \r\n    function clearPending() override internal {\r\n        uint length = nextPendingTxId;\r\n        for (uint i = 1; i < length; ++i)\r\n            if (txsOf[i].to != address(0)) delete txsOf[i];\r\n        super.clearPending();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ConfirmationNeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"MultiTransact\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRequirement\",\"type\":\"uint256\"}],\"name\":\"RequirementChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_OWNERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRequired\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"}],\"name\":\"confirm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ownerIndex\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"hasConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPendingTxId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerNums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yetNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownersDone\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"txsOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MultiSigWallet","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000b5cda0f1781eb8f5d8cf37d287d1fb0271c0f43","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://73a99dafe5b604e5ad196f21b522b3aafa28ef9807504923e3807a85423102de"}]}