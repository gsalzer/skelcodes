{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StrongNFTBonusV8.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicensed\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/ServiceInterface.sol\\\";\\nimport \\\"./interfaces/IServiceV18.sol\\\";\\nimport \\\"./interfaces/IMultiNode.sol\\\";\\nimport \\\"./interfaces/IERC1155Preset.sol\\\";\\nimport \\\"./interfaces/StrongNFTBonusLegacyInterface.sol\\\";\\nimport \\\"./interfaces/IStrongPool.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/ERC1155Receiver.sol\\\";\\n\\ncontract StrongNFTBonusV8 {\\n\\n  using SafeMath for uint256;\\n\\n  event Staked(address indexed sender, uint256 tokenId, uint128 nodeId, uint256 block);\\n  event Unstaked(address indexed sender, uint256 tokenId, uint128 nodeId, uint256 block);\\n\\n  ServiceInterface public CService;\\n  IERC1155Preset public CERC1155;\\n  StrongNFTBonusLegacyInterface public CStrongNFTBonus;\\n\\n  bool public initDone;\\n\\n  address public serviceAdmin;\\n  address public superAdmin;\\n\\n  string[] public nftBonusNames;\\n  mapping(string => uint256) public nftBonusLowerBound;\\n  mapping(string => uint256) public nftBonusUpperBound;\\n  mapping(string => uint256) public nftBonusValue;\\n  mapping(string => uint256) public nftBonusEffectiveBlock;\\n\\n  mapping(uint256 => address) public nftIdStakedToEntity;\\n  mapping(uint256 => uint128) public nftIdStakedToNodeId;\\n  mapping(uint256 => uint256) public nftIdStakedAtBlock;\\n  mapping(address => mapping(uint128 => uint256)) public entityNodeStakedNftId;\\n\\n  mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n  mapping(string => uint8) public nftBonusNodesLimit;\\n  mapping(uint256 => uint8) public nftIdStakedToNodesCount;\\n  mapping(uint128 => uint256) public nodeIdStakedAtBlock;\\n  mapping(address => uint256[]) public entityStakedNftIds;\\n\\n  mapping(address => mapping(uint128 => uint256)) public entityNodeStakedAtBlock;\\n\\n  mapping(address => bool) private serviceContracts;\\n  mapping(address => mapping(address => mapping(uint128 => uint256))) public entityServiceNodeStakedNftId;\\n  mapping(address => mapping(address => mapping(uint128 => uint256))) public entityServiceNodeStakedAtBlock;\\n\\n  event StakedToNode(address indexed sender, uint256 tokenId, uint128 nodeId, uint256 block, address serviceContract);\\n  event UnstakedFromNode(address indexed sender, uint256 tokenId, uint128 nodeId, uint256 block, address serviceContract);\\n\\n  mapping(address => bool) private serviceUsesTime;\\n  mapping(address => mapping(string => uint256)) public serviceNftBonusEffectiveAt;\\n  mapping(address => mapping(string => uint256)) public serviceNftBonusValue;\\n  mapping(address => mapping(address => mapping(uint128 => uint256))) public entityServiceNodeStakedAtTimestamp;\\n\\n  function init(address serviceContract, address nftContract, address strongNFTBonusContract, address serviceAdminAddress, address superAdminAddress) external {\\n    require(initDone == false, \\\"init done\\\");\\n\\n    _registerInterface(0x01ffc9a7);\\n    _registerInterface(\\n      ERC1155Receiver(0).onERC1155Received.selector ^\\n      ERC1155Receiver(0).onERC1155BatchReceived.selector\\n    );\\n\\n    serviceAdmin = serviceAdminAddress;\\n    superAdmin = superAdminAddress;\\n    CService = ServiceInterface(serviceContract);\\n    CERC1155 = IERC1155Preset(nftContract);\\n    CStrongNFTBonus = StrongNFTBonusLegacyInterface(strongNFTBonusContract);\\n    initDone = true;\\n  }\\n\\n  //\\n  // Getters\\n  // -------------------------------------------------------------------------------------------------------------------\\n\\n  function isNftStaked(uint256 _nftId) external view returns (bool) {\\n    return nftIdStakedToNodeId[_nftId] != 0 || nftIdStakedToNodesCount[_nftId] > 0;\\n  }\\n\\n  function isNftStakedLegacy(uint256 _nftId) external view returns (bool) {\\n    return CStrongNFTBonus.isNftStaked(_nftId);\\n  }\\n\\n  function getStakedNftId(address _entity, uint128 _nodeId, address _serviceContract) public view returns (uint256) {\\n    bool isEthNode = isEthereumNode(_serviceContract);\\n    uint256 stakedNftIdNew = entityServiceNodeStakedNftId[_entity][_serviceContract][_nodeId];\\n    uint256 stakedNftId = isEthNode ? entityNodeStakedNftId[_entity][_nodeId] : 0;\\n    uint256 stakedNftIdLegacy = isEthNode ? CStrongNFTBonus.getStakedNftId(_entity, _nodeId) : 0;\\n\\n    return stakedNftIdNew != 0 ? stakedNftIdNew : (stakedNftId != 0 ? stakedNftId : stakedNftIdLegacy);\\n  }\\n\\n  function getStakedNftIds(address _entity) external view returns (uint256[] memory) {\\n    return entityStakedNftIds[_entity];\\n  }\\n\\n  function getStakedNftBonusName(address _entity, uint128 _nodeId, address _serviceContract) external view returns (string memory) {\\n    uint256 nftId = getStakedNftId(_entity, _nodeId, _serviceContract);\\n    return getNftBonusName(nftId);\\n  }\\n\\n  function getNftBonusNames() external view returns (string[] memory) {\\n    return nftBonusNames;\\n  }\\n\\n  function getNftNodesLeft(uint256 _nftId) external view returns (uint256) {\\n    return nftBonusNodesLimit[getNftBonusName(_nftId)] - nftIdStakedToNodesCount[_nftId];\\n  }\\n\\n  function getNftBonusName(uint256 _nftId) public view returns (string memory) {\\n    for (uint8 i = 0; i < nftBonusNames.length; i++) {\\n      if (_nftId >= nftBonusLowerBound[nftBonusNames[i]] && _nftId <= nftBonusUpperBound[nftBonusNames[i]]) {\\n        return nftBonusNames[i];\\n      }\\n    }\\n\\n    return \\\"\\\";\\n  }\\n\\n  function getBonus(address _entity, uint128 _nodeId, uint256 _from, uint256 _to) external view returns (uint256) {\\n    return getBonusValue(_entity, _nodeId, _from, _to, 0);\\n  }\\n\\n  function getBonusValue(address _entity, uint128 _nodeId, uint256 _from, uint256 _to, uint256 _bonusValue) public view returns (uint256) {\\n    address serviceContract = msg.sender;\\n    require(serviceContracts[serviceContract], \\\"service doesnt exist\\\");\\n\\n    uint256 nftId = getStakedNftId(_entity, _nodeId, serviceContract);\\n    string memory bonusName = getNftBonusName(nftId);\\n    if (keccak256(abi.encode(bonusName)) == keccak256(abi.encode(\\\"\\\"))) return 0;\\n\\n    uint256 stakedAt = 0;\\n    if (serviceUsesTime[serviceContract]) {\\n      stakedAt = entityServiceNodeStakedAtTimestamp[_entity][serviceContract][_nodeId];\\n    }\\n    else {\\n      stakedAt = entityServiceNodeStakedAtBlock[_entity][serviceContract][_nodeId] > 0\\n      ? entityServiceNodeStakedAtBlock[_entity][serviceContract][_nodeId]\\n      : (entityNodeStakedAtBlock[_entity][_nodeId] > 0 ? entityNodeStakedAtBlock[_entity][_nodeId] : nftIdStakedAtBlock[nftId]);\\n    }\\n\\n    uint256 bonusValue = _bonusValue != 0 ? _bonusValue : serviceNftBonusValue[serviceContract][bonusName] > 0\\n    ? serviceNftBonusValue[serviceContract][bonusName] : nftBonusValue[bonusName];\\n\\n    uint256 effectiveAt = serviceNftBonusEffectiveAt[serviceContract][bonusName] > 0\\n    ? serviceNftBonusEffectiveAt[serviceContract][bonusName] : nftBonusEffectiveBlock[bonusName];\\n\\n    uint256 startFrom = stakedAt > _from ? stakedAt : _from;\\n    if (startFrom < effectiveAt) {\\n      startFrom = effectiveAt;\\n    }\\n\\n    if (stakedAt == 0 && keccak256(abi.encode(bonusName)) == keccak256(abi.encode(\\\"BRONZE\\\"))) {\\n      return CStrongNFTBonus.getBonus(_entity, _nodeId, startFrom, _to);\\n    }\\n\\n    if (nftId == 0) return 0;\\n    if (stakedAt == 0) return 0;\\n    if (effectiveAt == 0) return 0;\\n    if (startFrom >= _to) return 0;\\n    if (CERC1155.balanceOf(address(this), nftId) == 0) return 0;\\n\\n    return _to.sub(startFrom).mul(bonusValue);\\n  }\\n\\n  function isNftStaked(address _entity, uint256 _nftId, uint128 _nodeId, address _serviceContract) public view returns (bool) {\\n    return (isEthereumNode(_serviceContract) && entityNodeStakedNftId[_entity][_nodeId] == _nftId)\\n    || entityServiceNodeStakedNftId[_entity][_serviceContract][_nodeId] == _nftId;\\n  }\\n\\n  function isEthereumNode(address _serviceContract) public view returns (bool) {\\n    return _serviceContract == address(CService);\\n  }\\n\\n  //\\n  // Staking\\n  // -------------------------------------------------------------------------------------------------------------------\\n\\n  function stakeNFT(uint256 _nftId, uint128 _nodeId, address _serviceContract) external payable {\\n    string memory bonusName = getNftBonusName(_nftId);\\n    require(keccak256(abi.encode(bonusName)) != keccak256(abi.encode(\\\"\\\")), \\\"not eligible\\\");\\n    require(CERC1155.balanceOf(msg.sender, _nftId) != 0\\n      || (CERC1155.balanceOf(address(this), _nftId) != 0 && nftIdStakedToEntity[_nftId] == msg.sender), \\\"not enough\\\");\\n    require(nftIdStakedToNodesCount[_nftId] < nftBonusNodesLimit[bonusName], \\\"over limit\\\");\\n    require(serviceContracts[_serviceContract], \\\"service doesnt exist\\\");\\n    require(getStakedNftId(msg.sender, _nodeId, _serviceContract) == 0, \\\"already staked\\\");\\n    if (serviceUsesTime[_serviceContract]) require(IMultiNode(_serviceContract).doesNodeExist(msg.sender, uint(_nodeId)), \\\"node doesnt exist\\\");\\n    else require(IServiceV18(_serviceContract).doesNodeExist(msg.sender, _nodeId), \\\"node doesnt exist\\\");\\n\\n    entityServiceNodeStakedNftId[msg.sender][_serviceContract][_nodeId] = _nftId;\\n    nftIdStakedToEntity[_nftId] = msg.sender;\\n    nftIdStakedToNodesCount[_nftId] += 1;\\n\\n    if (serviceUsesTime[_serviceContract]) {\\n      entityServiceNodeStakedAtTimestamp[msg.sender][_serviceContract][_nodeId] = block.timestamp;\\n    }\\n    else {\\n      entityServiceNodeStakedAtBlock[msg.sender][_serviceContract][_nodeId] = block.number;\\n    }\\n\\n    bool alreadyExists = false;\\n    for (uint8 i = 0; i < entityStakedNftIds[msg.sender].length; i++) {\\n      if (entityStakedNftIds[msg.sender][i] == _nftId) {\\n        alreadyExists = true;\\n        break;\\n      }\\n    }\\n    if (!alreadyExists) {\\n      entityStakedNftIds[msg.sender].push(_nftId);\\n    }\\n\\n    if (CERC1155.balanceOf(address(this), _nftId) == 0) {\\n      CERC1155.safeTransferFrom(msg.sender, address(this), _nftId, 1, bytes(\\\"\\\"));\\n    }\\n\\n    emit StakedToNode(msg.sender, _nftId, _nodeId, serviceUsesTime[_serviceContract] ? block.timestamp : block.number, _serviceContract);\\n  }\\n\\n  function migrateNFT(address _entity, uint128 _fromNodeId, uint128 _toNodeId, address _toServiceContract) external {\\n    address fromServiceContract = address(CService);\\n    uint256 nftId = getStakedNftId(_entity, _fromNodeId, fromServiceContract);\\n\\n    require(msg.sender == fromServiceContract);\\n    require(serviceContracts[_toServiceContract], \\\"service doesnt exist\\\");\\n    require(IServiceV18(_toServiceContract).doesNodeExist(_entity, _toNodeId), \\\"node doesnt exist\\\");\\n    require(getStakedNftId(_entity, _toNodeId, _toServiceContract) == 0, \\\"already staked\\\");\\n\\n    bool alreadyExists = false;\\n    for (uint8 i = 0; i < entityStakedNftIds[_entity].length; i++) {\\n      if (entityStakedNftIds[_entity][i] == nftId) {\\n        alreadyExists = true;\\n        break;\\n      }\\n    }\\n\\n    if (nftId == 0 || !alreadyExists) {\\n      return;\\n    }\\n\\n    entityServiceNodeStakedNftId[_entity][fromServiceContract][_fromNodeId] = 0;\\n    entityNodeStakedNftId[_entity][_fromNodeId] = 0;\\n\\n    entityServiceNodeStakedNftId[_entity][_toServiceContract][_toNodeId] = nftId;\\n    nftIdStakedToEntity[nftId] = _entity;\\n\\n    entityServiceNodeStakedAtTimestamp[_entity][_toServiceContract][_toNodeId] = block.timestamp;\\n\\n    emit UnstakedFromNode(_entity, nftId, _fromNodeId, block.number, fromServiceContract);\\n    emit StakedToNode(_entity, nftId, _toNodeId, serviceUsesTime[_toServiceContract] ? block.timestamp : block.number, _toServiceContract);\\n  }\\n\\n  function unStakeNFT(uint256 _nftId, uint128 _nodeId, uint256 _blockNumber, address _serviceContract) external payable {\\n    require(isNftStaked(msg.sender, _nftId, _nodeId, _serviceContract), \\\"wrong node\\\");\\n    require(nftIdStakedToEntity[_nftId] != address(0), \\\"not staked\\\");\\n    require(nftIdStakedToEntity[_nftId] == msg.sender, \\\"not staker\\\");\\n    require(serviceContracts[_serviceContract], \\\"service doesnt exist\\\");\\n\\n    bool hasNodeExpired = serviceUsesTime[_serviceContract]\\n      ? IMultiNode(_serviceContract).hasNodeExpired(msg.sender, uint(_nodeId))\\n      : IServiceV18(_serviceContract).hasNodeExpired(msg.sender, _nodeId);\\n\\n    if (!hasNodeExpired) {\\n      if (serviceUsesTime[_serviceContract]) IMultiNode(_serviceContract).claim{value : msg.value}(_nodeId, _blockNumber, address(0));\\n      else IServiceV18(_serviceContract).claim{value : msg.value}(_nodeId, _blockNumber, false);\\n    }\\n\\n    entityServiceNodeStakedNftId[msg.sender][_serviceContract][_nodeId] = 0;\\n    nftIdStakedToNodeId[_nftId] = 0;\\n\\n    if (isEthereumNode(_serviceContract)) {\\n      entityNodeStakedNftId[msg.sender][_nodeId] = 0;\\n    }\\n\\n    if (nftIdStakedToNodesCount[_nftId] > 0) {\\n      nftIdStakedToNodesCount[_nftId] -= 1;\\n    }\\n\\n    if (nftIdStakedToNodesCount[_nftId] == 0) {\\n      nftIdStakedToEntity[_nftId] = address(0);\\n\\n      for (uint8 i = 0; i < entityStakedNftIds[msg.sender].length; i++) {\\n        if (entityStakedNftIds[msg.sender][i] == _nftId) {\\n          _deleteIndex(entityStakedNftIds[msg.sender], i);\\n          break;\\n        }\\n      }\\n\\n      CERC1155.safeTransferFrom(address(this), msg.sender, _nftId, 1, bytes(\\\"\\\"));\\n    }\\n\\n    emit UnstakedFromNode(msg.sender, _nftId, _nodeId, _blockNumber, _serviceContract);\\n  }\\n\\n  //\\n  // Admin\\n  // -------------------------------------------------------------------------------------------------------------------\\n\\n  function updateServiceBonus(string memory _name, uint256 _value, uint256 _effectiveAt, address _serviceContract) external {\\n    require(msg.sender == serviceAdmin || msg.sender == superAdmin, \\\"not admin\\\");\\n\\n    serviceNftBonusValue[_serviceContract][_name] = _value;\\n    serviceNftBonusEffectiveAt[_serviceContract][_name] = _effectiveAt;\\n  }\\n\\n  function updateBonusLimits(string memory _name, uint256 _lowerBound, uint256 _upperBound, uint8 _nodesLimit) external {\\n    require(msg.sender == serviceAdmin || msg.sender == superAdmin, \\\"not admin\\\");\\n\\n    bool alreadyExists = false;\\n    for (uint8 i = 0; i < nftBonusNames.length; i++) {\\n      if (keccak256(abi.encode(nftBonusNames[i])) == keccak256(abi.encode(_name))) {\\n        alreadyExists = true;\\n      }\\n    }\\n\\n    if (!alreadyExists) {\\n      nftBonusNames.push(_name);\\n    }\\n\\n    nftBonusLowerBound[_name] = _lowerBound;\\n    nftBonusUpperBound[_name] = _upperBound;\\n    nftBonusNodesLimit[_name] = _nodesLimit;\\n  }\\n\\n  function updateBonus(string memory _name, uint256 _lowerBound, uint256 _upperBound, uint256 _value, uint256 _block, uint8 _nodesLimit) external {\\n    require(msg.sender == serviceAdmin || msg.sender == superAdmin, \\\"not admin\\\");\\n\\n    bool alreadyExists = false;\\n    for (uint8 i = 0; i < nftBonusNames.length; i++) {\\n      if (keccak256(abi.encode(nftBonusNames[i])) == keccak256(abi.encode(_name))) {\\n        alreadyExists = true;\\n      }\\n    }\\n\\n    if (!alreadyExists) {\\n      nftBonusNames.push(_name);\\n    }\\n\\n    nftBonusLowerBound[_name] = _lowerBound;\\n    nftBonusUpperBound[_name] = _upperBound;\\n    nftBonusValue[_name] = _value;\\n    nftBonusEffectiveBlock[_name] = _block != 0 ? _block : block.number;\\n    nftBonusNodesLimit[_name] = _nodesLimit;\\n  }\\n\\n  function updateContracts(address _nftContract) external {\\n    require(msg.sender == superAdmin, \\\"not admin\\\");\\n    CERC1155 = IERC1155Preset(_nftContract);\\n  }\\n\\n  function addServiceContract(address _contract, bool _useTime) external {\\n    require(msg.sender == superAdmin, \\\"not admin\\\");\\n    serviceContracts[_contract] = true;\\n    serviceUsesTime[_contract] = _useTime;\\n  }\\n\\n  function removeServiceContract(address _contract) external {\\n    require(msg.sender == superAdmin, \\\"not admin\\\");\\n    serviceContracts[_contract] = false;\\n    serviceUsesTime[_contract] = false;\\n  }\\n\\n  function updateServiceAdmin(address newServiceAdmin) external {\\n    require(msg.sender == superAdmin, \\\"not admin\\\");\\n    serviceAdmin = newServiceAdmin;\\n  }\\n\\n  //\\n  // ERC1155 support\\n  // -------------------------------------------------------------------------------------------------------------------\\n\\n  function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual returns (bytes4) {\\n    return this.onERC1155Received.selector;\\n  }\\n\\n  function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual returns (bytes4) {\\n    return this.onERC1155BatchReceived.selector;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n    return _supportedInterfaces[interfaceId];\\n  }\\n\\n  function _registerInterface(bytes4 interfaceId) internal virtual {\\n    require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n    _supportedInterfaces[interfaceId] = true;\\n  }\\n\\n  function _deleteIndex(uint256[] storage array, uint256 index) internal {\\n    uint256 lastIndex = array.length.sub(1);\\n    uint256 lastEntry = array[lastIndex];\\n    if (index == lastIndex) {\\n      array.pop();\\n    } else {\\n      array[index] = lastEntry;\\n      array.pop();\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ServiceInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface ServiceInterface {\\n  function claimingFeeNumerator() external view returns(uint256);\\n\\n  function claimingFeeDenominator() external view returns(uint256);\\n\\n  function doesNodeExist(address entity, uint128 nodeId) external view returns (bool);\\n\\n  function getNodeId(address entity, uint128 nodeId) external view returns (bytes memory);\\n\\n  function getReward(address entity, uint128 nodeId) external view returns (uint256);\\n\\n  function getRewardByBlock(address entity, uint128 nodeId, uint256 blockNumber) external view returns (uint256);\\n\\n  function hasNodeExpired(address _entity, uint _nodeId) external view returns (bool);\\n\\n  function isEntityActive(address entity) external view returns (bool);\\n\\n  function claim(uint128 nodeId, uint256 blockNumber, bool toStrongPool) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IServiceV18.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface IServiceV18 {\\n  function doesNodeExist(address entity, uint128 nodeId) external view returns (bool);\\n\\n  function hasNodeExpired(address entity, uint128 nodeId) external view returns (bool);\\n\\n  function claim(uint128 nodeId, uint blockNumber, bool toStrongPool) external payable returns (uint);\\n\\n  // @deprecated\\n  function isEntityActive(address entity) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMultiNode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface IMultiNode {\\n  function doesNodeExist(address entity, uint nodeId) external view returns (bool);\\n\\n  function hasNodeExpired(address entity, uint nodeId) external view returns (bool);\\n\\n  function claim(uint nodeId, uint timestamp, address toStrongPool) external payable returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC1155Preset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Preset {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\\n     *\\n     * See {ERC1155-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 id, uint256 amount, bytes memory data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}.\\n     */\\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) external;\\n\\n    function getOwnerIdByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    function getOwnerIdIndex(address owner, uint256 id) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/StrongNFTBonusLegacyInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface StrongNFTBonusLegacyInterface {\\n  function getBonus(address _entity, uint128 _nodeId, uint256 _fromBlock, uint256 _toBlock) external view returns (uint256);\\n\\n  function getStakedNftId(address _entity, uint128 _nodeId) external view returns (uint256);\\n\\n  function isNftStaked(uint256 _nftId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrongPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface IStrongPool {\\n  function mineFor(address miner, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    uint256 c = a + b;\\n    if (c < a) return (false, 0);\\n    return (true, c);\\n  }\\n\\n  /**\\n   * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    if (b > a) return (false, 0);\\n    return (true, a - b);\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) return (true, 0);\\n    uint256 c = a * b;\\n    if (c / a != b) return (false, 0);\\n    return (true, c);\\n  }\\n\\n  /**\\n   * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    if (b == 0) return (false, 0);\\n    return (true, a / b);\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    if (b == 0) return (false, 0);\\n    return (true, a % b);\\n  }\\n\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    return a - b;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) return 0;\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers, reverting on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    return a / b;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * reverting when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\n   * message unnecessarily. For custom revert reasons use {trySub}.\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    return a - b;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\n   * message unnecessarily. For custom revert reasons use {tryDiv}.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    return a / b;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * reverting with custom message when dividing by zero.\\n   *\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\n   * message unnecessarily. For custom revert reasons use {tryMod}.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../interfaces/IERC1155Receiver.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    constructor() internal {\\n        _registerInterface(\\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\\n            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"nodeId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"nodeId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"serviceContract\",\"type\":\"address\"}],\"name\":\"StakedToNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"nodeId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"nodeId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"serviceContract\",\"type\":\"address\"}],\"name\":\"UnstakedFromNode\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CERC1155\",\"outputs\":[{\"internalType\":\"contract IERC1155Preset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CService\",\"outputs\":[{\"internalType\":\"contract ServiceInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CStrongNFTBonus\",\"outputs\":[{\"internalType\":\"contract StrongNFTBonusLegacyInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_useTime\",\"type\":\"bool\"}],\"name\":\"addServiceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"entityNodeStakedAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"entityNodeStakedNftId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"entityServiceNodeStakedAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"entityServiceNodeStakedAtTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"entityServiceNodeStakedNftId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"entityStakedNftIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_nodeId\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_nodeId\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusValue\",\"type\":\"uint256\"}],\"name\":\"getBonusValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"getNftBonusName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNftBonusNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"getNftNodesLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_nodeId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_serviceContract\",\"type\":\"address\"}],\"name\":\"getStakedNftBonusName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_nodeId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_serviceContract\",\"type\":\"address\"}],\"name\":\"getStakedNftId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"}],\"name\":\"getStakedNftIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"serviceContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strongNFTBonusContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"serviceAdminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"superAdminAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_serviceContract\",\"type\":\"address\"}],\"name\":\"isEthereumNode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"isNftStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_nodeId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_serviceContract\",\"type\":\"address\"}],\"name\":\"isNftStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"isNftStakedLegacy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_fromNodeId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_toNodeId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_toServiceContract\",\"type\":\"address\"}],\"name\":\"migrateNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nftBonusEffectiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nftBonusLowerBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftBonusNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nftBonusNodesLimit\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nftBonusUpperBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nftBonusValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftIdStakedAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftIdStakedToEntity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftIdStakedToNodeId\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftIdStakedToNodesCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"nodeIdStakedAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"removeServiceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"serviceNftBonusEffectiveAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"serviceNftBonusValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_nodeId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_serviceContract\",\"type\":\"address\"}],\"name\":\"stakeNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_nodeId\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_serviceContract\",\"type\":\"address\"}],\"name\":\"unStakeNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_nodesLimit\",\"type\":\"uint8\"}],\"name\":\"updateBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_nodesLimit\",\"type\":\"uint8\"}],\"name\":\"updateBonusLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"name\":\"updateContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newServiceAdmin\",\"type\":\"address\"}],\"name\":\"updateServiceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_effectiveAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_serviceContract\",\"type\":\"address\"}],\"name\":\"updateServiceBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrongNFTBonusV8","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}