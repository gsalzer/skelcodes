{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/permittedLists/PermittedPartners.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/INftTypeRegistry.sol\\\";\\nimport \\\"../interfaces/IPermittedPartners.sol\\\";\\n\\nimport \\\"../utils/Ownable.sol\\\";\\n\\n/**\\n * @title  PermittedPartners\\n * @author NFTfi\\n * @dev Registry for partners permitted for reciving a revenue share.\\n * Each partner's address is associated with the percent of the admin fee shared.\\n */\\ncontract PermittedPartners is Ownable, IPermittedPartners {\\n    /* ******* */\\n    /* STORAGE */\\n    /* ******* */\\n\\n    uint256 public constant HUNDRED_PERCENT = 10000;\\n\\n    /**\\n     * @notice A mapping from a partner's address to the percent of the admin fee shared with them. A zero indicates\\n     * non-permitted.\\n     */\\n    mapping(address => uint16) private partnerRevenueShare;\\n\\n    /* ****** */\\n    /* EVENTS */\\n    /* ****** */\\n\\n    /**\\n     * @notice This event is fired whenever the admin sets a partner's revenue share.\\n     *\\n     * @param partner - The address of the partner.\\n     * @param revenueShareInBasisPoints - The percent (measured in basis points) of the admin fee amount that will be\\n     * taken as a revenue share for a the partner.\\n     */\\n    event PartnerRevenueShare(address indexed partner, uint16 revenueShareInBasisPoints);\\n\\n    /* *********** */\\n    /* CONSTRUCTOR */\\n    /* *********** */\\n\\n    /**\\n     * @notice Sets the admin of the contract.\\n     *\\n     * @param _admin - Initial admin of this contract.\\n     */\\n    constructor(address _admin) Ownable(_admin) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /* ********* */\\n    /* FUNCTIONS */\\n    /* ********* */\\n\\n    /**\\n     * @notice This function can be called by admins to change the revenue share status of a partner. This includes\\n     * adding an partner to the revenue share list, removing it and updating the revenue share percent.\\n     *\\n     * @param _partner - The address of the partner.\\n     * @param _revenueShareInBasisPoints - The percent (measured in basis points) of the admin fee amount that will be\\n     * taken as a revenue share for a the partner.\\n     */\\n    function setPartnerRevenueShare(address _partner, uint16 _revenueShareInBasisPoints) external onlyOwner {\\n        require(_partner != address(0), \\\"Partner is address zero\\\");\\n        require(_revenueShareInBasisPoints <= HUNDRED_PERCENT, \\\"Revenue share too big\\\");\\n        partnerRevenueShare[_partner] = _revenueShareInBasisPoints;\\n        emit PartnerRevenueShare(_partner, _revenueShareInBasisPoints);\\n    }\\n\\n    /**\\n     * @notice This function can be called by anyone to get the revenue share parcent associated with the partner.\\n     *\\n     * @param _partner - The address of the partner.\\n     *\\n     * @return Returns the partner's revenue share\\n     */\\n    function getPartnerPermit(address _partner) external view override returns (uint16) {\\n        return partnerRevenueShare[_partner];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INftTypeRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title INftTypeRegistry\\n * @author NFTfi\\n * @dev Interface for NFT Types Registry supported by NFTfi.\\n */\\ninterface INftTypeRegistry {\\n    function setNftType(bytes32 _nftType, address _nftWrapper) external;\\n\\n    function getNftTypeWrapper(bytes32 _nftType) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPermittedPartners.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IPermittedPartners {\\n    function getPartnerPermit(address _partner) external view returns (uint16);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * Modified version from openzeppelin/contracts/access/Ownable.sol that allows to\\n * initialize the owner using a parameter in the constructor\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address _newOwner) public virtual onlyOwner {\\n        require(_newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(_newOwner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Sets the owner.\\n     */\\n    function _setOwner(address _newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(oldOwner, _newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"revenueShareInBasisPoints\",\"type\":\"uint16\"}],\"name\":\"PartnerRevenueShare\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"getPartnerPermit\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_revenueShareInBasisPoints\",\"type\":\"uint16\"}],\"name\":\"setPartnerRevenueShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PermittedPartners","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"000000000000000000000000dca17eedc1aa3dbb14361678566b2da5a1bb4c31","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}