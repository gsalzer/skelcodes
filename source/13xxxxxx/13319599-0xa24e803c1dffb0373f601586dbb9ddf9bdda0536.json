{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n        interfaceId == type(IERC721).interfaceId ||\r\n        interfaceId == type(IERC721Metadata).interfaceId ||\r\n        super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\ninterface LootInterface {\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\ninterface ToolInterface {\r\n    function checkExistWhitelist(address addr) external view returns(bool);\r\n\r\n    function updateWhitelist(address addr) external;\r\n\r\n    function getTokenURIBase() external pure returns (string memory);\r\n}\r\n\r\ncontract Badge is ERC721Enumerable, ReentrancyGuard, Ownable {\r\n\r\n    uint256 public baseMintPrice = 10000000000000000;//0.01 ETH\r\n\r\n    uint256 public baseLootUserMintPrice = 7000000000000000;//0.007 ETH\r\n\r\n    uint256 public mintPrice = 10000000000000000;//0.01 ETH\r\n\r\n    uint256 public lootUserMintPrice = 7000000000000000;//0.007 ETH\r\n\r\n    uint256 private ladderUnit = 1000;\r\n\r\n    uint256 public costUserTotalSupply = 0;\r\n\r\n    uint256 public maxTotalSupply = 7999;\r\n\r\n    uint256 public addZeroTotalSupply = 0;\r\n\r\n    uint256 public addOneTotalSupply = 0;\r\n\r\n    uint256 public addTwoTotalSupply = 0;\r\n\r\n    uint256 public addThreeTotalSupply = 0;\r\n\r\n    uint256 public addFourTotalSupply = 0;\r\n\r\n    uint[] usedTokenIdArr;\r\n\r\n    //Loot Contract 0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7\r\n    address public lootAddress = 0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7;\r\n    LootInterface lootContract = LootInterface(lootAddress);\r\n\r\n    //Tool Contract 0x3CF98F80194A273cf36658e60861e8bcC82d25f8\r\n    address public toolAddress = 0x3CF98F80194A273cf36658e60861e8bcC82d25f8;\r\n    ToolInterface toolContract = ToolInterface(toolAddress);\r\n\r\n    address payable private _royaltyRecipient;\r\n\r\n    struct SelfDecidedAttribute {\r\n        uint8 gender;\r\n        uint8 strength;\r\n        uint8 stamina;\r\n        uint8 agility;\r\n        uint8 charisma;\r\n        uint8 intelligence;\r\n        uint8 shield;\r\n        uint8 race;\r\n        uint8 element;\r\n\r\n        uint8 addOne1;\r\n        uint8 addOne2;\r\n        uint8 addOne3;\r\n        uint8 addOne4;\r\n    }\r\n\r\n    mapping(uint256 => SelfDecidedAttribute) private attrsIndex;\r\n\r\n    mapping(uint256 => mapping(uint256 => string[])) private mapList;\r\n\r\n    string[] private genders = [\r\n    \"Male\",\r\n    \"Female\",\r\n    \"Unknown\"\r\n    ];\r\n\r\n    string[] private races = [\r\n    \"Dwarf\",\r\n    \"Human\",\r\n    \"Night Elf\",\r\n    \"Giant\",\r\n    \"Goblin\"\r\n    ];\r\n\r\n    string[] private elements = [\r\n    \"Fire\",\r\n    \"Water\",\r\n    \"Earth\",\r\n    \"Air\"\r\n    ];\r\n\r\n    string[] private cike_golden = [\"Justiciar of Metaverse\",\"Metaverse Planeshifter\"];\r\n    string[] private cike_white = [\"Rogue\",\"Assassin\",\"Shadowdancer\",\"Guild Thief\",\"Kishi Charger Kishi\",\"Ninja Spy\",\"Yakuza\",\"Slaad Brooder\",\"Orc Scout\",\"Wild Scout\",\"Nentyar Hunter\"];\r\n    string[] private cike_green = [\"Hunter of the Dead\",\"Perfect Wight\",\"Sword Dancer\",\"Windwalker\",\"Foe Hunter\",\"Dungeon Delver\",\"Spymaster\",\"Thief-Acrobat\",\"Ghostwalker\"];\r\n    string[] private cike_blue = [\"Lifedrinker\",\"Shadow Adept\",\"Mage-Killer\",\"Bloodhound\",\"Master of Flies\",\"Red Avenger\",\"Arachnemancer\"];\r\n    string[] private cike_orange = [\"Disciple of Baalzebul\",\"Disciple of Dispater\",\"Forsaker\",\"Bayushi Deceiver Bayushi\",\"Darkmask\",\"Void Incarnate\",\"Mage Hunter\"];\r\n    string[] private cike_red = [\"Shadowdance Assassin\",\"Shadow Scout\",\"Shapeshifter\",\"Soulblade\",\"Shadow Mind\"];\r\n    string[] private fs_golden = [\"Red Wizard\",\"Meta Nightcloak\",\"Mystic Meta Wanderer\",\"Metamind\",\"Pale Master\",\"Truth Seeker\"];\r\n    string[] private fs_white = [\"Bard\",\"Druid\",\"Sorcerer\",\"Wizard\",\"Loremaster\",\"Thrall of Demogorgon\",\"Thrall of Grazt\",\"Thrall of Jubilex\",\"Thrall of Orcus\",\"Ur-Priest\",\"Vermin Lord\",\"Horned Harbinger\",\"Ocular Adept\",\"Silverstar\",\"Wear of Purple\",\"Arcane Devotee\",\"Spelldancer\",\"Spellfire Channeler\",\"War Wizard of Cormyr\",\"Bane of Infidels\",\"Blighter\",\"Void Disciple\",\"Witch Hunter\",\"ElvenHigh Mage\",\"Emancipated Spawn\",\"Illithid Savant\",\"Sybil\",\"Yuan-Ti Cultist\",\"BlackFlame Zealot\",\"Raumathari Battlemage\",\"Talontar Blightlord\",\"Beholder Mage\",\"Runecaster\",\"Zhentarim Skymage\",\"Incantatrix\",\"Master Harper\"];\r\n    string[] private fs_green = [\"Arcane Trickster\",\"Archmage\",\"Dragon Disciple\",\"Horizon Walker\",\"Loremaster\",\"Divine Oracle\",\"Sacred Exorcist\",\"Warpriest\",\"Wizard of High Sorcery\",\"Heartwarder\",\"Divine Disciple\",\"Harper Scout\",\"Hathran\",\"Red Wizard\",\"Runecaster\",\"Harper Mage\",\"Geomancer\",\"Hexer\",\"Oozemaster\",\"Shifter\",\"Fangof Lolth\",\"Arcane Trickster\",\"Bladesinger\",\"Blood Magus\",\"Entropist \",\"Fiend of Blasphemy\",\"Fiend of Corruption \",\"Fiend of Possession\",\"Zhentarim Skymage\"];\r\n    string[] private fs_blue = [\"Hierophant\",\"Mystic Theurge\",\"Thaumaturgist\",\"Demonologist\",\"Cosmic Descryer\",\"Divine Emissary\",\"Doomguide\",\"Archmage\",\"Bone Collector\",\"Deathwarden Chanter\",\"Eidoloncer core class\",\"Henshin Mystic Henshin\",\"Iaijutsu Master Iaijutsu\",\"Moto Avenger Moto\",\"Siren\",\"Candle Caster\",\"Dragon Disciple\",\"Elemental Savant\",\"Mage of the Arcane Order\",\"Doomdreamer\",\"Mystic Theurge\",\"Raumathari Battlemage\",\"Ruby Disciple\"];\r\n    string[] private fs_orange = [\"Diabolist\",\"Disciple of Asmodeus\",\"Disciple of Mammon\",\"Dweomerkeeper\",\"Elemental Archon\",\"Goldeye\",\"Ghost Slayer\",\"Gnome Artificer\",\"Incantatrix\",\"Pyrokineticist\",\"Spellsinger\",\"Durthan\",\"Nar Demonbinder\",\"Telflammar Shadolord\",\"Warpriest\",\"Grim Psion\",\"Lord of the Dead\"];\r\n    string[] private fs_red = [\"Church Inquisitor\",\"Master of Shrouds\",\"Dreadmaster\",\"Stormlord\",\"Eye of Gruumsh\",\"Queen of the Wild\",\"Elven Bladesinger\",\"Alienist\",\"Mindbender\",\"True Necromancer\",\"Divine Agent\",\"Sangehirn\",\"Spellfire Hierophant\"];\r\n    string[] private ms_golden = [\"Fatespinner\"];\r\n    string[] private ms_white = [\"Harper\",\"Cleric\",\"Contemplative\",\"ShintaoMonk\",\"Warrior Skald\"];\r\n    string[] private ms_green = [\"Hierophant\",\"Virtuoso\",\"Harper Priest\",\"Hospitaler\"];\r\n    string[] private ms_blue = [\"Virtuoso\",\"Cancer Mage\",\"Master Alchemist\"];\r\n    string[] private ms_orange = [\"Acolyteof the Skin\",\"Knight Protector\"];\r\n    string[] private ms_red = [\"High Proselytizer\",\"Forest Master\"];\r\n    string[] private ss_golden = [\"God Eater\"];\r\n    string[] private ss_white = [\"Ranger\",\"Arcane Archer\",\"Mortal Hunter\",\"PeerlessArcher\"];\r\n    string[] private ss_green = [\"Orderof the Bow Initiate\",\"Consecrated Harrier\"];\r\n    string[] private ss_blue = [\"Arboreal Guardian\",\"Deepwood Sniper\"];\r\n    string[] private ss_orange = [\"HalflingWarsling Sniper\"];\r\n    string[] private ss_red = [\"Exotic Weapon Master\"];\r\n    string[] private tk_golden = [\"Master of the Metaverse\"];\r\n    string[] private tk_white = [\"Dwarven Defender\",\"Carven Defender\",\"Guardian of the Road\"];\r\n    string[] private tk_green = [\"Giant-Killer\",\"Tribal Protector\"];\r\n    string[] private tk_blue = [\"Orc Warlord\",\"Techsmith\"];\r\n    string[] private tk_orange = [\"Scaled Horror\",\"People Champion\"];\r\n    string[] private tk_red = [\"Master Arcane Artisan\"];\r\n    string[] private zs_golden = [\"Auspician\",\"Keshen Blademaster \",\"Warlord of Metaverse\"];\r\n    string[] private zs_red = [\"Paladin\",\"Holy Liberator\",\"Divine Champion\",\"Verdant Lord\",\"EunuchWarlock\",\"Gatecrasher\",\"Planar Champion \",\"Spur the Lord \",\"Psychic Weapon Master\"];\r\n    string[] private zs_orange = [\"Eldritch Knight\",\"Templar\",\"Knight of Neraka\",\"Knight of Solamnia\",\"Animal Lord\",\"Bear Warrior\",\"Maho-Bujin\",\"Maho-Tsukai\",\"Royal Explorer\",\"Shou Disciple\",\"Thayan Slaver\",\"Berserk\",\"Soldier of Light \",\"Life Eater\"];\r\n    string[] private zs_blue = [\"Knight of the Chalice\",\"Sacred Fist\",\"Agent Retriever\",\"Divine Seeker\",\"Eidolon core class\",\"Watch Detective\",\"Windrider\",\"Battle Maiden\",\"Blade Dancer\",\"Survivor\",\"Waverider\",\"Horde Breaker\",\"Dread Pirate\",\"Spellsword\",\"Wayferer Guide\",\"Aglarondan Griffonrider\",\"Runescarred Berserker\"];\r\n    string[] private zs_green = [\"Warrior of Darkness\",\"Legionnaire of Steel\",\"Guardian Paramount\",\"Union Sentinel\",\"Frenzied Berserker\",\"Tamer of Beasts\",\"Tempest\",\"DaidojiBodyguard Daidoji\",\"TattooedMonk\",\"Breachgnome\",\"DwarvenBattlerager\",\"GreatRift Skyguard\",\"OrcWarlord\",\"Masterof Chains\",\"MasterSamurai\",\"Ravager\",\"Warmaster\",\"WeaponMaster\",\"Mindknight\"];\r\n    string[] private zs_white = [\"Barbarian\",\"Fighter\",\"Monk\",\"Blackguard\",\"Duelist\",\"Arachne\",\"Strifeleader\",\"Waveservant\",\"Purple Dragon Knight\",\"Hida DefenderHida\",\"Mantis Mercenary\",\"Shiba Protector\",\"Weapon Master \",\"Slayer\",\"Vigilante\",\"Cavalier\",\"Devoted Defender\",\"Drunken Master\",\"Duelist\",\"Fist of Hextor\",\"Gladiator\",\"Halfling Outrider\",\"Lasher\",\"Thyan Knight\"];\r\n    string[] private traits = [\"Administrator\",\"Elusive Shadow\",\"Gamer\",\"Genius\",\"Grey Eminence\",\"Immortal\",\"Midas Touched\",\"Mystic\",\"Brilliant Strategist\",\"Charismatic Negotiator\",\"Fortune Builder\",\"Mastermind Theologian\",\"Naive Appeaser\",\"Naive Enthusiast\",\"Nudist\",\"Possessed\",\"Righteous\",\"Skilled Tactician\",\"Tolerant\",\"Amateurish Plotter\",\"Ambitious\",\"Architect\",\"Architectural Visionary\",\"Benevolent\",\"Body Purist\",\"Graceful\",\"Misguided Warrior\",\"Physician\",\"Scholarly Theologian\",\"Speed Demon\",\"Theologian\",\"Too Smart\",\"Tough Soldier\",\"Zealous\",\"Arbitrary\",\"Ascetic\",\"Asexual\",\"Babbling Buffoon\",\"Bisexual\",\"Bloodlust\",\"Body Modder\",\"Born Inthe Purple\",\"Fertile\",\"Fierce Negotiator\",\"Gay\",\"Giant\",\"Gregarious\",\"Hedonist\",\"Idolizer\",\"Iron Gut\",\"Keen Hearing\",\"Lefthanded\",\"Light Eater\",\"Low Thirst\",\"Martial Cleric\",\"Out Of Shape\",\"Outdoorsman\",\"Playful\",\"Robust\",\"Schemer\",\"Scholar\",\"Secretive\",\"Seducer\",\"Seductress\",\"Shy\",\"Slow Reader\",\"Strategist\",\"Sturdy\",\"Tortured Artist\",\"Underhanded Rogue\",\"Wakeful\",\"Well Advised\",\"Well Connected\",\"Zealot\",\"Pyromaniac\",\"Quick Sleeper\",\"Restless Sleeper\",\"Scarred High\",\"Severely Injured\",\"Short Sighted\",\"Silver Tongue\",\"Sleepyhead\",\"Smoker\",\"Socializer\",\"Tactical Genius\",\"Troubled Pregnancy\",\"Trusting\",\"Twin\",\"Undergrounder\",\"Underweight\",\"Very Underweight\",\"Weak Stomach\",\"Willful\",\"Wroth\",\"Bastard\",\"Child Ofconsort\",\"Dwarf\",\"Feeble\",\"Fever\",\"Food Poisoning\",\"Hard Pregnancy\",\"Harelip\",\"Has Measles\",\"Has Small Pox\",\"Has Tuberculosis\",\"Has Typhoid Fever\",\"Impaler\",\"Indolent\",\"Indulgent\",\"Infection\",\"Infirm\",\"Lisp\",\"Loose Lips\",\"Obese\",\"One Eyed\",\"One Handed\",\"One Legged\",\"Stout\",\"Stressed\",\"Syphilitic\"];\r\n    string[] private preffixes = [\"Able\",\"Alert\",\"Candid\",\"Frank\",\"Frugal\",\"Happy\",\"Lazy\",\"Modest\",\"Smart\",\"Steady\",\"Strict\",\"Active\",\"Adroit\",\"Bossy\",\"Brave\",\"Caring\",\"Funny\",\"Hearty\"];\r\n\r\n\r\n    uint256[] private roleScoreMatch = [\r\n    0,\r\n    4,\r\n    15,\r\n    41,\r\n    82,\r\n    99\r\n    ];\r\n\r\n    uint256[] private roleColorMatch = [\r\n    4,\r\n    14,\r\n    29,\r\n    48,\r\n    71,\r\n    99\r\n    ];\r\n\r\n\r\n    uint256[] private traitColorMatch = [\r\n    7,\r\n    18,\r\n    33,\r\n    73,\r\n    93,\r\n    129\r\n    ];\r\n\r\n\r\n    function getCostUserTotalSupply() public view returns (uint256)\r\n    {\r\n        return costUserTotalSupply;\r\n    }\r\n\r\n    function getUsedTokenIdArr() public view returns (uint[] memory)\r\n    {\r\n        return usedTokenIdArr;\r\n    }\r\n\r\n    function getRealMintPrice(uint256 tokenId) public view returns (uint256) {\r\n        if(tokenId<7799)\r\n        {\r\n            return baseMintPrice*(1+costUserTotalSupply/ladderUnit);\r\n        }\r\n        return mintPrice;\r\n    }\r\n\r\n    function getRealLootUserMintPrice(uint256 tokenId) public view returns (uint256) {\r\n        if(tokenId<7799)\r\n        {\r\n            return baseLootUserMintPrice*(1+costUserTotalSupply/ladderUnit);\r\n        }\r\n        return lootUserMintPrice;\r\n    }\r\n\r\n    function setMintPrice(uint256 newMintPrice) public onlyOwner {\r\n        mintPrice = newMintPrice;\r\n    }\r\n\r\n    function setLootUserMintPrice(uint256 newLootUserMintPrice) public onlyOwner {\r\n        lootUserMintPrice = newLootUserMintPrice;\r\n    }\r\n\r\n    function setMaxTotalSupply(uint256 newMaxTotalSupply) public onlyOwner {\r\n        maxTotalSupply = newMaxTotalSupply;\r\n    }\r\n\r\n    function updateRoyalties(address payable recipient) public onlyOwner {\r\n        _royaltyRecipient = recipient;\r\n    }\r\n\r\n    function withdraw(uint256 amount) public onlyOwner {\r\n        require(_royaltyRecipient != address(0x0), \"Must set royalty recipient\");\r\n        _royaltyRecipient.transfer(amount);\r\n    }\r\n\r\n    function deposit() public payable onlyOwner {}\r\n\r\n    function random(string memory input) internal pure returns (uint256) {\r\n        return uint256(keccak256(abi.encodePacked(input)));\r\n    }\r\n\r\n    function getGender(uint256 tokenId) public view returns (string memory) {\r\n        return genders[attrsIndex[tokenId].gender];\r\n    }\r\n\r\n    function getStrength(uint256 tokenId) public view returns (string memory) {\r\n        return toString(attrsIndex[tokenId].strength);\r\n    }\r\n\r\n    function getStamina(uint256 tokenId) public view returns (string memory) {\r\n        return toString(attrsIndex[tokenId].stamina);\r\n    }\r\n\r\n    function getAgility(uint256 tokenId) public view returns (string memory) {\r\n        return toString(attrsIndex[tokenId].agility);\r\n    }\r\n\r\n    function getCharisma(uint256 tokenId) public view returns (string memory) {\r\n        return toString(attrsIndex[tokenId].charisma);\r\n    }\r\n\r\n    function getIntelligence(uint256 tokenId) public view returns (string memory) {\r\n        return toString(attrsIndex[tokenId].intelligence);\r\n    }\r\n\r\n    function getShield(uint256 tokenId) public view returns (string memory) {\r\n        return toString(attrsIndex[tokenId].shield);\r\n    }\r\n\r\n    function getRace(uint256 tokenId) public view returns (string memory) {\r\n        return races[attrsIndex[tokenId].race];\r\n    }\r\n\r\n    function getElement(uint256 tokenId) public view returns (string memory) {\r\n        return elements[attrsIndex[tokenId].element];\r\n    }\r\n\r\n    function getOccupation(uint256 tokenId) public view returns (string memory) {\r\n        return pluck1(tokenId);\r\n    }\r\n\r\n    //@return 1~6\r\n    function getOccupationType(uint256 tokenId) public view returns (uint256) {\r\n        uint256 rand = random(string(abi.encodePacked(\"Occupation\", toString(tokenId))));\r\n        uint256 score = rand % 100;\r\n\r\n        uint i = 0;\r\n        for(; i < roleScoreMatch.length; i++){\r\n            if(score <= roleScoreMatch[i]){\r\n                break;\r\n            }\r\n        }\r\n        return i+1;\r\n    }\r\n\r\n    //@return 1~6\r\n    function getOccupationColor(uint256 tokenId) public view returns (uint256) {\r\n        uint256 rand2 = random(string(abi.encodePacked(\"color\", toString(tokenId))));\r\n        uint256 colorScore = rand2 % 100;\r\n        uint j = 0;\r\n        for(; j < roleColorMatch.length; j++){\r\n            if(colorScore <= roleColorMatch[j]){\r\n                break;\r\n            }\r\n        }\r\n        return j+1;\r\n    }\r\n\r\n    function getTrait1(uint256 tokenId) public view returns (string memory) {\r\n        return pluck2(tokenId, \"Trait1\");\r\n    }\r\n\r\n    function getTrait2(uint256 tokenId) public view returns (string memory) {\r\n        return pluck2(tokenId, \"Trait2\");\r\n    }\r\n\r\n    function getTrait3(uint256 tokenId) public view returns (string memory) {\r\n        return pluck2(tokenId, \"Trait3\");\r\n    }\r\n\r\n    function getTraitColor(uint256 tokenId, uint256 index) public view returns (string memory) {\r\n        uint256 rand = random(string(abi.encodePacked(\"Trait\", toString(index), toString(tokenId))));\r\n        uint256 score = rand % traits.length;\r\n\r\n        uint j = 0;\r\n        for(; j < traitColorMatch.length; j++){\r\n            if(score <= traitColorMatch[j]){\r\n                break;\r\n            }\r\n        }\r\n        return getColorFull(j+1);\r\n    }\r\n\r\n    function getColorFull(uint256 index) private pure returns  (string memory) {\r\n        if(index == 1){\r\n            return \"#ffc000\";\r\n        }else if(index == 2){\r\n            return \"#c00000\";\r\n        }else if(index == 3){\r\n            return \"#ed7d31\";\r\n        }else if(index == 4){\r\n            return \"#5b9bd5\";\r\n        }else if(index == 5){\r\n            return \"#70ad47\";\r\n        }else{\r\n            return \"#ffffff\";\r\n        }\r\n    }\r\n\r\n    function pluck1(uint256 tokenId) internal view returns (string memory) {\r\n        uint256 roleType = getOccupationType(tokenId);\r\n        uint256 colorType = getOccupationColor(tokenId);\r\n        string[] memory sourceArray = mapList[roleType][colorType];\r\n\r\n        uint256 rand = random(string(abi.encodePacked(\"item\", toString(tokenId))));\r\n        string memory output = sourceArray[rand % sourceArray.length];\r\n\r\n        string memory prefix = preffixes[rand % preffixes.length];\r\n        output = string(abi.encodePacked(prefix, ' ', output));\r\n        return output;\r\n    }\r\n\r\n    function pluck2(uint256 tokenId, string memory keyPrefix) internal view returns (string memory) {\r\n        uint256 rand = random(string(abi.encodePacked(keyPrefix, toString(tokenId))));\r\n        uint256 index = rand % traits.length;\r\n        string memory output = string(abi.encodePacked('\"', traits[index], '\"'));\r\n        return output;\r\n    }\r\n\r\n    function getIcon(uint256 tokenId) internal view returns (string memory) {\r\n        string memory Assassin = '&#x25B2;';\r\n        string memory Mage = '&#x203B;';\r\n        string memory Hunter = '&#x2191;';\r\n        string memory Priest = '&#x25CB;';\r\n        string memory Tank = '&#x25C6;';\r\n        string memory Warior = '&#x25A0;';\r\n\r\n        string memory output=\"\";\r\n        uint256 typeIndex = getOccupationType(tokenId);\r\n\r\n        if(typeIndex == 1){\r\n            output = Tank;\r\n        }else if (typeIndex == 2){\r\n            output = Assassin;\r\n        }else if (typeIndex == 3){\r\n            output = Hunter;\r\n        }else if (typeIndex == 4){\r\n            output = Priest;\r\n        }else if (typeIndex == 5){\r\n            output = Mage;\r\n        }else{\r\n            output = Warior;\r\n        }\r\n        return output;\r\n    }\r\n\r\n    function getIconName(uint256 tokenId) internal view returns (string memory) {\r\n        string memory Assassin = 'Assassin';\r\n        string memory Mage = 'Mage';\r\n        string memory Hunter = 'Hunter';\r\n        string memory Priest = 'Priest';\r\n        string memory Tank = 'Tank';\r\n        string memory Warior = 'Warior';\r\n\r\n        uint256 typeIndex = getOccupationType(tokenId);\r\n        string memory output = \"\";\r\n        if(typeIndex == 1){\r\n            output = Tank;\r\n        }else if (typeIndex == 2){\r\n            output = Assassin;\r\n        }else if (typeIndex == 3){\r\n            output = Hunter;\r\n        }else if (typeIndex == 4){\r\n            output = Priest;\r\n        }else if (typeIndex == 5){\r\n            output = Mage;\r\n        }else{\r\n            output = Warior;\r\n        }\r\n        return output;\r\n    }\r\n\r\n    function getColorName(uint256 tokenId) internal view returns (string memory) {\r\n        uint256 typeIndex = getOccupationColor(tokenId);\r\n        if(typeIndex == 1){\r\n            return \"gold\";\r\n        }else if (typeIndex == 2){\r\n            return \"red\";\r\n        }else if (typeIndex == 3){\r\n            return \"orange\";\r\n        }else if (typeIndex == 4){\r\n            return \"blue\";\r\n        }else if (typeIndex == 5){\r\n            return \"green\";\r\n        }else{\r\n            return \"white\";\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) override public view returns (string memory) {\r\n        string[46] memory parts;\r\n\r\n        parts[0]=toolContract.getTokenURIBase();\r\n//        parts[0] = '<?xml version=\"1.0\" encoding=\"utf-8\"?><svg version=\"1.1\" id=\"1\"    xmlns=\"http://www.w3.org/2000/svg\"    xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"750px\" height=\"750px\" viewBox=\"0 0 750 750\" style=\"enable-background:new 0 0 750 750;\" xml:space=\"preserve\">    <style type=\"text/css\">.st0{fill:#023E6B;}.st1{fill:#05517F;stroke:#05517F;stroke-width:3;stroke-miterlimit:10;}.st2{fill:#FFFFFF;}</style>    <title>image</title>    <rect class=\"st0\" width=\"750\" height=\"750\"/>    <path class=\"st1\" d=\"M84.7,100.35H64.12V58.28h20.12c11.58-0.15,17.3,3.36,17.15,10.52c-0.13,3.81-2.2,7.28-5.49,9.2c4.57,1.37,6.93,4.57,7.09,9.6C103.14,96.11,97.05,100.36,84.7,100.35z M82.87,68.11h-4.81V75h5.72c3.2,0,4.8-1.22,4.8-3.66C88.73,68.89,86.83,67.81,82.87,68.11z M82.41,82.75h-4.35v7.77h6c4.11,0.15,6.09-1.14,5.94-3.89C90.28,83.74,87.75,82.44,82.41,82.75z\"/>    <path class=\"st1\" d=\"M142.54,100.35H130l-0.46-3.2c-2.74,2.6-6.63,3.81-11.66,3.66c-7.01-0.31-10.67-3.29-11-8.92c0-5.63,4.88-9.06,14.63-10.29c4.88-0.45,7.32-1.45,7.32-3c0-1.67-1.38-2.51-4.12-2.51c-2.59,0-4,1-4.12,3h-11.66c-0.15-6.86,5.41-10.29,16.69-10.29c11.28-0.46,16.39,3.81,15.32,12.8v14.18c-0.15,1.83,0.38,3.13,1.6,3.89L142.54,100.35z M123.34,94.41c3.81,0,5.64-2.52,5.49-7.55c-1.39,0.58-2.85,0.97-4.35,1.14c-3.51,0.45-5.18,1.68-5,3.65C119.61,93.34,120.89,94.26,123.34,94.41z\"/>    <path class=\"st1\" d=\"M180.5,100.35h-10.75v-4.11c-2.24,3.03-5.84,4.74-9.6,4.57c-8.84-0.31-13.51-5.42-14-15.32c0.46-10.36,4.79-15.92,13-16.69c3.96-0.15,7.01,1.15,9.14,3.89V58.28h12.21V100.35z M163.35,92.35c3.51,0,5.34-2.36,5.49-7.09c-0.15-4.72-1.9-7.08-5.26-7.09c-3.2,0.16-4.87,2.6-5,7.32C158.56,90.06,160.15,92.35,163.35,92.35z\"/>    <path class=\"st1\" d=\"M186.9,101.5H199c0.17,0.49,0.4,0.95,0.69,1.37c0.83,0.48,1.78,0.71,2.74,0.68c3.35,0.15,5-1.67,4.8-5.48v-2.52c-2,2.29-4.89,3.44-8.68,3.43c-8.24-0.46-12.66-5.34-13.27-14.63c0.48-10.06,5.05-15.24,13.72-15.55c3.7,0.01,7.15,1.89,9.15,5v-4.09h10.75v24.7c1.06,11.12-4.27,16.45-16,16C193.15,110.26,187.81,107.29,186.9,101.5z M202.22,77.5c-3.2,0-4.8,2.36-4.8,7.09c0.15,3.65,1.75,5.64,4.8,5.94c3.21,0,4.88-2.13,5-6.4c0.03-4.43-1.64-6.64-5-6.64V77.5z\"/>    <path class=\"st1\" d=\"M259.39,87.78h-23.33c0.31,3.66,2.37,5.64,6.18,5.94c1.87,0.06,3.62-0.9,4.57-2.51h11.43c-1.82,6.25-7.46,9.45-16.92,9.6c-11.13-0.31-16.92-5.5-17.37-15.55c0.6-10.36,6.39-15.85,17.37-16.46C253.06,69.41,259.08,75.74,259.39,87.78z M236.06,81.6h11.21c-0.31-3.2-2.14-4.95-5.49-5.26C238.12,76.34,236.21,78.1,236.06,81.6z\"/>    <path class=\"st2\" d=\"M84.7,100.35H64.12V58.28h20.12c11.58-0.15,17.3,3.36,17.15,10.52c-0.13,3.81-2.2,7.28-5.49,9.2c4.57,1.37,6.93,4.57,7.09,9.6C103.14,96.11,97.05,100.36,84.7,100.35z M82.87,68.11h-4.81V75h5.72c3.2,0,4.8-1.22,4.8-3.66C88.73,68.89,86.83,67.81,82.87,68.11z M82.41,82.75h-4.35v7.77h6c4.11,0.15,6.09-1.14,5.94-3.89C90.28,83.74,87.75,82.44,82.41,82.75z\"/>    <path class=\"st2\" d=\"M142.54,100.35H130l-0.46-3.2c-2.74,2.6-6.63,3.81-11.66,3.66c-7.01-0.31-10.67-3.29-11-8.92c0-5.63,4.88-9.06,14.63-10.29c4.88-0.45,7.32-1.45,7.32-3c0-1.67-1.38-2.51-4.12-2.51c-2.59,0-4,1-4.12,3h-11.66c-0.15-6.86,5.41-10.29,16.69-10.29c11.28-0.46,16.39,3.81,15.32,12.8v14.18c-0.15,1.83,0.38,3.13,1.6,3.89L142.54,100.35z M123.34,94.41c3.81,0,5.64-2.52,5.49-7.55c-1.39,0.58-2.85,0.97-4.35,1.14c-3.51,0.45-5.18,1.68-5,3.65C119.61,93.34,120.89,94.26,123.34,94.41z\"/>    <path class=\"st2\" d=\"M180.5,100.35h-10.75v-4.11c-2.24,3.03-5.84,4.74-9.6,4.57c-8.84-0.31-13.51-5.42-14-15.32c0.46-10.36,4.79-15.92,13-16.69c3.96-0.15,7.01,1.15,9.14,3.89V58.28h12.21V100.35z M163.35,92.35c3.51,0,5.34-2.36,5.49-7.09c-0.15-4.72-1.9-7.08-5.26-7.09c-3.2,0.16-4.87,2.6-5,7.32C158.56,90.06,160.15,92.35,163.35,92.35z\"/>    <path class=\"st2\" d=\"M186.9,101.5H199c0.17,0.49,0.4,0.95,0.69,1.37c0.83,0.48,1.78,0.71,2.74,0.68c3.35,0.15,5-1.67,4.8-5.48v-2.52c-2,2.29-4.89,3.44-8.68,3.43c-8.24-0.46-12.66-5.34-13.27-14.63c0.48-10.06,5.05-15.24,13.72-15.55c3.7,0.01,7.15,1.89,9.15,5v-4.09h10.75v24.7c1.06,11.12-4.27,16.45-16,16C193.15,110.26,187.81,107.29,186.9,101.5z M202.22,77.5c-3.2,0-4.8,2.36-4.8,7.09c0.15,3.65,1.75,5.64,4.8,5.94c3.21,0,4.88-2.13,5-6.4c0.03-4.43-1.64-6.64-5-6.64V77.5z\"/>    <path class=\"st2\" d=\"M259.39,87.78h-23.33c0.31,3.66,2.37,5.64,6.18,5.94c1.87,0.06,3.62-0.9,4.57-2.51h11.43c-1.82,6.25-7.46,9.45-16.92,9.6c-11.13-0.31-16.92-5.5-17.37-15.55c0.6-10.36,6.39-15.85,17.37-16.46C253.06,69.41,259.08,75.74,259.39,87.78z M236.06,81.6h11.21c-0.31-3.2-2.14-4.95-5.49-5.26C238.12,76.34,236.21,78.1,236.06,81.6z\"/><text id=\"Male-Demons-Chaotic\" font-family=\"Georgia\" font-size=\"28\" font-weight=\"normal\" line-spacing=\"44\" fill=\"#FFFFFF\"><tspan x=\"60\" y=\"212\">';\r\n        parts[1] = getGender(tokenId);\r\n        parts[2] = '</tspan><tspan x=\"60\" y=\"256\">';\r\n        parts[3] = getRace(tokenId);\r\n        parts[4] = '</tspan><tspan x=\"60\" y=\"300\">';\r\n        parts[5] = getElement(tokenId);\r\n\r\n        parts[6] = '  ';\r\n\r\n        parts[7] = attrsIndex[tokenId].addOne1 == 1 ? '+1' : '';\r\n\r\n        parts[8] = '</tspan><tspan x=\"60\" y=\"344\" fill=\"';\r\n        parts[9] = getColorFull(getOccupationColor(tokenId));\r\n        parts[10] = '\">';\r\n        parts[11] = getOccupation(tokenId);\r\n        parts[12] = '  ';\r\n        parts[13] = getIcon(tokenId);\r\n        parts[14] = '</tspan><tspan x=\"60\" y=\"388\" fill=\"';\r\n        parts[15] = getTraitColor(tokenId, 1);\r\n        parts[16] = '\">';\r\n        parts[17] = getTrait1(tokenId);\r\n\r\n        parts[18] = '  ';\r\n\r\n        parts[19] = attrsIndex[tokenId].addOne2 == 1 ? '+1' : '';\r\n\r\n        parts[20] = '</tspan><tspan x=\"60\" y=\"432\" fill=\"';\r\n        parts[21] = getTraitColor(tokenId, 2);\r\n        parts[22] = '\">';\r\n        parts[23] = getTrait2(tokenId);\r\n\r\n        parts[24] = '  ';\r\n\r\n        parts[25] = attrsIndex[tokenId].addOne3 == 1 ? '+1' : '';\r\n\r\n        parts[26] = '</tspan><tspan x=\"60\" y=\"476\" fill=\"';\r\n        parts[27] = getTraitColor(tokenId, 3);\r\n        parts[28] = '\">';\r\n        parts[29] = getTrait3(tokenId);\r\n\r\n        parts[30] = '  ';\r\n\r\n        parts[31] = attrsIndex[tokenId].addOne4 == 1 ? '+1' : '';\r\n\r\n        parts[32] = '</tspan></text><text id=\"Str-Sta-Agi-Cha-Int-Shi\" font-family=\"Georgia\" font-size=\"28\" font-weight=\"normal\" line-spacing=\"44\" fill=\"#FFFFFF\"><tspan x=\"522\" y=\"216\">Str</tspan><tspan x=\"522\" y=\"260\">Sta</tspan><tspan x=\"522\" y=\"304\">Agi</tspan><tspan x=\"522\" y=\"348\">Cha</tspan><tspan x=\"522\" y=\"392\">Int</tspan><tspan x=\"522\" y=\"436\">Shi</tspan></text><text id=\"2-3-6-7-1-1\" font-family=\"Georgia\" font-size=\"28\" font-weight=\"normal\" line-spacing=\"44\" fill=\"#FFFFFF\"><tspan x=\"618\" y=\"216\">';\r\n        parts[33] = getStrength(tokenId);\r\n        parts[34] = '</tspan><tspan x=\"618\" y=\"260\">';\r\n        parts[35] = getStamina(tokenId);\r\n        parts[36] = '</tspan><tspan x=\"618\" y=\"304\">';\r\n        parts[37] = getAgility(tokenId);\r\n        parts[38] = '</tspan><tspan x=\"618\" y=\"348\">';\r\n        parts[39] = getCharisma(tokenId);\r\n        parts[40] = '</tspan><tspan x=\"618\" y=\"392\">';\r\n        parts[41] = getIntelligence(tokenId);\r\n        parts[42] = '</tspan><tspan x=\"618\" y=\"436\">';\r\n        parts[43] = getShield(tokenId);\r\n        parts[44] = '</tspan></text><line x1=\"490.5\" y1=\"192.5\" x2=\"490.5\" y2=\"475.5\" stroke=\"#979797\" stroke-linecap=\"square\"></line>';\r\n        parts[45] = '</svg>';\r\n\r\n        string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6]));\r\n        output = string(abi.encodePacked(output, parts[7], parts[8],parts[9], parts[10], parts[11], parts[12], parts[13], parts[14]));\r\n        output = string(abi.encodePacked(output, parts[15], parts[16],parts[17], parts[18], parts[19], parts[20], parts[21]));\r\n        output = string(abi.encodePacked(output, parts[22], parts[23], parts[24],parts[25], parts[26], parts[27], parts[28]));\r\n        output = string(abi.encodePacked(output, parts[29], parts[30], parts[31],parts[32], parts[33], parts[34]));\r\n        output = string(abi.encodePacked(output, parts[35], parts[36], parts[37], parts[38]));\r\n        output = string(abi.encodePacked(output, parts[39], parts[40], parts[41], parts[42], parts[43], parts[44], parts[45]));\r\n\r\n        string memory atrrOutput = makeAttributeParts(getGender(tokenId), getRace(tokenId), getElement(tokenId), getIconName(tokenId), getColorName(tokenId));\r\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\"name\": \"Badge #', toString(tokenId), '\", \"description\": \"Badge is a seed, a seed account for a PVP Metaverse Game.\", \"image\": \"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\"', ',\"attributes\":', atrrOutput, '}'))));\r\n        output = string(abi.encodePacked('data:application/json;base64,', json));\r\n\r\n        return output;\r\n    }\r\n\r\n    function makeAttributeParts(string memory gender, string memory race, string memory ele, string memory flag, string memory color) internal pure returns (string memory){\r\n        string[11] memory attrParts;\r\n        attrParts[0] = '[{ \"trait_type\": \"Gender\", \"value\": \"';\r\n        attrParts[1] = gender;\r\n        attrParts[2] = '\" }, { \"trait_type\": \"OccupatColor\", \"value\": \"';\r\n        attrParts[3] = color;\r\n        attrParts[4] = '\" }, { \"trait_type\": \"Race\", \"value\": \"';\r\n        attrParts[5] = race;\r\n        attrParts[6] = '\" }, { \"trait_type\": \"Element\", \"value\": \"';\r\n        attrParts[7] = ele;\r\n        attrParts[8] = '\" }, { \"trait_type\": \"OccupatFlag\", \"value\": \"';\r\n        attrParts[9] = flag;\r\n        attrParts[10] = '\" }]';\r\n\r\n        string memory atrrOutput = string(abi.encodePacked(attrParts[0], attrParts[1], attrParts[2], attrParts[3], attrParts[4], attrParts[5], attrParts[6], attrParts[7]));\r\n        atrrOutput = string(abi.encodePacked(atrrOutput, attrParts[8], attrParts[9], attrParts[10]));\r\n        return atrrOutput;\r\n    }\r\n\r\n\r\n    function randomNum(uint8 length) private view returns (uint8) {\r\n        return uint8(uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty)))) % length;\r\n    }\r\n\r\n    function randLevel(uint8 num) private returns (uint8) {\r\n        uint8 maxNum = 0;\r\n        if (num <= maxNum && addFourTotalSupply < maxTotalSupply / 100 *  1)\r\n        {\r\n            addFourTotalSupply++;\r\n            return 4;\r\n        }\r\n        maxNum += 3;\r\n        if (num <= maxNum && addThreeTotalSupply < maxTotalSupply / 100 * 3)\r\n        {\r\n            addThreeTotalSupply++;\r\n            return 3;\r\n        }\r\n        maxNum += 5;\r\n        if (num <= maxNum && addTwoTotalSupply < maxTotalSupply / 100 * 5)\r\n        {\r\n            addTwoTotalSupply++;\r\n            return 2;\r\n        }\r\n        maxNum += 10;\r\n        if (num <= maxNum && addOneTotalSupply < maxTotalSupply / 100 * 10)\r\n        {\r\n            addOneTotalSupply++;\r\n            return 1;\r\n        }\r\n        addZeroTotalSupply++;\r\n        return 0;\r\n    }\r\n\r\n    function randAddOneArr() private returns (uint8[] memory){\r\n        uint8 level = randLevel(randomNum(100));\r\n        uint8[] memory addOneArr = new uint8[](4);\r\n        uint8 addOneCount =0;\r\n        for (uint8 i = 1; i <= 4; i++)\r\n        {\r\n            bool isAddOne = randomNum(2) == 1;\r\n            uint8 overAddOne = level - addOneCount;\r\n\r\n            if (isAddOne && overAddOne == 0)\r\n            {\r\n                isAddOne = false;\r\n            }\r\n            if (false == isAddOne && overAddOne > 4 - i)\r\n            {\r\n                isAddOne = true;\r\n            }\r\n            if(isAddOne)\r\n            {\r\n                addOneCount++;\r\n            }\r\n\r\n            addOneArr[i - 1] = isAddOne ? 1 : 0;\r\n        }\r\n        return addOneArr;\r\n    }\r\n\r\n\r\n    function common(uint256 tokenId,uint256 genderId, uint256 raceId, uint256 elementId, uint256 strNum, uint256 staNum, uint256 agiNum, uint256 chaNum, uint256 intNum, uint256 shiNum) private\r\n    {\r\n        require(!_exists(tokenId), \"Token ID invalid\");\r\n        require(genderId < genders.length, \"genderId invalid\");\r\n        require(strNum + staNum+ agiNum+ chaNum+ intNum+ shiNum <= 30, \"attributes num invalid\");\r\n        require(raceId < races.length, \"raceId invalid\");\r\n        require(elementId < elements.length, \"elementId invalid\");\r\n\r\n        attrsIndex[tokenId].gender = uint8(genderId);\r\n        attrsIndex[tokenId].strength = uint8(strNum);\r\n        attrsIndex[tokenId].stamina = uint8(staNum);\r\n        attrsIndex[tokenId].agility = uint8(agiNum);\r\n        attrsIndex[tokenId].charisma = uint8(chaNum);\r\n        attrsIndex[tokenId].intelligence = uint8(intNum);\r\n        attrsIndex[tokenId].shield = uint8(shiNum);\r\n        attrsIndex[tokenId].race = uint8(raceId);\r\n        attrsIndex[tokenId].element = uint8(elementId);\r\n\r\n        uint8[] memory addOneArr = randAddOneArr();\r\n        attrsIndex[tokenId].addOne1=addOneArr[0];\r\n        attrsIndex[tokenId].addOne2=addOneArr[1];\r\n        attrsIndex[tokenId].addOne3=addOneArr[2];\r\n        attrsIndex[tokenId].addOne4=addOneArr[3];\r\n\r\n        usedTokenIdArr.push(tokenId);\r\n        _safeMint(_msgSender(), tokenId);\r\n    }\r\n\r\n    function checkExistWhitelist(address addr) public view returns (bool)\r\n    {\r\n        return toolContract.checkExistWhitelist(addr);\r\n    }\r\n\r\n    function checkTokenIdAvailable(uint256 tokenId,address addr) public view returns (bool)\r\n    {\r\n        bool result=!_exists(tokenId);\r\n        if(result)\r\n        {\r\n            if(tokenId>=1 && tokenId<=999 && !toolContract.checkExistWhitelist(addr))//whitelist\r\n            {\r\n                result=false;\r\n            }\r\n            else if(tokenId >= 7800 && tokenId <= 7999 && addr!=owner())//team\r\n            {\r\n                result=false;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function claim(uint256 tokenId, uint256 genderId, uint256 raceId, uint256 elementId, uint256 strNum, uint256 staNum, uint256 agiNum, uint256 chaNum, uint256 intNum, uint256 shiNum) public payable nonReentrant {\r\n        require((tokenId >= 1000 && tokenId <= 7799) || (tokenId >= 8000 && tokenId <= maxTotalSupply), \"Token ID invalid\");\r\n        require(getRealMintPrice(tokenId) <= msg.value, \"Please pay mint fee\");\r\n\r\n        costUserTotalSupply++;\r\n        common(tokenId, genderId, raceId, elementId, strNum, staNum, agiNum, chaNum, intNum, shiNum);\r\n    }\r\n\r\n    function claimWithLoot(uint256 tokenId, uint256 genderId, uint256 raceId, uint256 elementId, uint256 strNum, uint256 staNum, uint256 agiNum, uint256 chaNum, uint256 intNum, uint256 shiNum,uint256 lootId) public payable nonReentrant {\r\n        require((tokenId >= 1000 && tokenId <= 7799) || (tokenId >= 8000 && tokenId <= maxTotalSupply), \"Token ID invalid\");\r\n        require(lootContract.ownerOf(lootId) == msg.sender, \"Not the owner of this loot\");\r\n        require(getRealLootUserMintPrice(tokenId) <= msg.value, \"Please pay mint fee\");\r\n\r\n        costUserTotalSupply++;\r\n        common(tokenId, genderId, raceId, elementId, strNum, staNum, agiNum, chaNum, intNum, shiNum);\r\n    }\r\n\r\n    function claimWithWhitelist(uint256 tokenId, uint256 genderId, uint256 raceId, uint256 elementId, uint256 strNum, uint256 staNum, uint256 agiNum, uint256 chaNum, uint256 intNum, uint256 shiNum) public nonReentrant {\r\n        require(tokenId >= 1 && tokenId <= 999 , \"Token ID invalid\");\r\n\r\n        require(toolContract.checkExistWhitelist(_msgSender()), \"Not in whitelist\");\r\n        toolContract.updateWhitelist(_msgSender());\r\n\r\n        common(tokenId, genderId, raceId, elementId, strNum, staNum, agiNum, chaNum, intNum, shiNum);\r\n    }\r\n\r\n    function ownerClaim(uint256 tokenId, uint256 genderId, uint256 raceId, uint256 elementId, uint256 strNum, uint256 staNum, uint256 agiNum, uint256 chaNum, uint256 intNum, uint256 shiNum) public nonReentrant onlyOwner {\r\n\r\n        require(tokenId >= 7800 && tokenId <= 7999, \"Token ID invalid\");\r\n\r\n        common(tokenId, genderId, raceId, elementId, strNum, staNum, agiNum, chaNum, intNum, shiNum);\r\n\r\n        //        _safeMint(owner(), tokenId);\r\n    }\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT license\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    constructor() ERC721(\"Badge\", \"Badge\") Ownable() {\r\n        mapList[1][1] = tk_golden;\r\n        mapList[1][2] = tk_red;\r\n        mapList[1][3] = tk_orange;\r\n        mapList[1][4] = tk_blue;\r\n        mapList[1][5] = tk_green;\r\n        mapList[1][6] = tk_white;\r\n\r\n        mapList[2][1] = cike_golden;\r\n        mapList[2][2] = cike_red;\r\n        mapList[2][3] = cike_orange;\r\n        mapList[2][4] = cike_blue;\r\n        mapList[2][5] = cike_green;\r\n        mapList[2][6] = cike_white;\r\n\r\n        mapList[3][1] = ss_golden;\r\n        mapList[3][2] = ss_red;\r\n        mapList[3][3] = ss_orange;\r\n        mapList[3][4] = ss_blue;\r\n        mapList[3][5] = ss_green;\r\n        mapList[3][6] = ss_white;\r\n\r\n        mapList[4][1] = ms_golden;\r\n        mapList[4][2] = ms_red;\r\n        mapList[4][3] = ms_orange;\r\n        mapList[4][4] = ms_blue;\r\n        mapList[4][5] = ms_green;\r\n        mapList[4][6] = ms_white;\r\n\r\n        mapList[5][1] = fs_golden;\r\n        mapList[5][2] = fs_red;\r\n        mapList[5][3] = fs_orange;\r\n        mapList[5][4] = fs_blue;\r\n        mapList[5][5] = fs_green;\r\n        mapList[5][6] = fs_white;\r\n\r\n        mapList[6][1] = zs_golden;\r\n        mapList[6][2] = zs_red;\r\n        mapList[6][3] = zs_orange;\r\n        mapList[6][4] = zs_blue;\r\n        mapList[6][5] = zs_green;\r\n        mapList[6][6] = zs_white;\r\n    }\r\n}\r\n\r\n\r\nlibrary Base64 {\r\n    bytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    /// @notice Encodes some bytes to the base64 representation\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        uint256 len = data.length;\r\n        if (len == 0) return \"\";\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((len + 2) / 3);\r\n\r\n        // Add some extra buffer at the end\r\n        bytes memory result = new bytes(encodedLen + 32);\r\n\r\n        bytes memory table = TABLE;\r\n\r\n        assembly {\r\n            let tablePtr := add(table, 1)\r\n            let resultPtr := add(result, 32)\r\n\r\n            for {\r\n                let i := 0\r\n            } lt(i, len) {\r\n\r\n            } {\r\n                i := add(i, 3)\r\n                let input := and(mload(add(data, i)), 0xffffff)\r\n\r\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\r\n                out := shl(224, out)\r\n\r\n                mstore(resultPtr, out)\r\n\r\n                resultPtr := add(resultPtr, 4)\r\n            }\r\n\r\n            switch mod(len, 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n\r\n            mstore(result, encodedLen)\r\n        }\r\n\r\n        return string(result);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addFourTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addOneTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addThreeTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addTwoTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addZeroTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseLootUserMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkExistWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkTokenIdAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"genderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"elementId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agiNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chaNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shiNum\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"genderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"elementId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agiNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chaNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shiNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lootId\",\"type\":\"uint256\"}],\"name\":\"claimWithLoot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"genderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"elementId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agiNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chaNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shiNum\",\"type\":\"uint256\"}],\"name\":\"claimWithWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"costUserTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAgility\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCharisma\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCostUserTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getElement\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getGender\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getIntelligence\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOccupation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOccupationColor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOccupationType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRace\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRealLootUserMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRealMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getShield\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getStamina\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getStrength\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTrait1\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTrait2\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTrait3\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTraitColor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsedTokenIdArr\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lootAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lootUserMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"genderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"elementId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agiNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chaNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shiNum\",\"type\":\"uint256\"}],\"name\":\"ownerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLootUserMintPrice\",\"type\":\"uint256\"}],\"name\":\"setLootUserMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMintPrice\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"updateRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Badge","CompilerVersion":"v0.8.8+commit.dddeac2f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b3d52f34e554e47386999178ee74f47e3acac0367d111d8c743aa16f9ae9bfcb"}]}