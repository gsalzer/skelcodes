{"status":"1","message":"OK","result":[{"SourceCode":"// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/spell.sol\n\npragma solidity >=0.6.12;\n\n////// src/spell.sol\n/**\n *Submitted for verification at Etherscan.io on 2021-09-24\n*/\n\n// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/spell.sol\n\n/* pragma solidity >=0.6.12; */\n\n////// src/spell.sol\n// Copyright (C) 2020 Centrifuge\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n/* pragma solidity >=0.6.12; */\n\ninterface AuthLike {\n    function rely(address) external;\n    function deny(address) external;\n    function wards(address) external returns(uint);\n}\n\ninterface TinlakeRootLike {\n    function relyContract(address, address) external;\n    function denyContract(address, address) external;\n}\n\ninterface FileLike {\n    function file(bytes32, uint) external;\n    function file(bytes32, address) external;\n}\n\ninterface NAVFeedLike {\n    function file(bytes32 name, uint value) external;\n    function file(bytes32 name, uint risk_, uint thresholdRatio_, uint ceilingRatio_, uint rate_, uint recoveryRatePD_) external;\n    function discountRate() external returns(uint);\n    function update(bytes32 nftID, uint value, uint risk) external;\n    function nftID(uint loan) external returns (bytes32);\n    function nftValues(bytes32 nftID) external returns(uint);\n}\n\ninterface PileLike {\n    function changeRate(uint loan, uint newRate) external;\n}\n\n// This spell makes changes to the tinlake mainnet HTC2 deployment:\n// adds new risk groups \ncontract TinlakeSpell {\n\n    bool public done;\n    string constant public description = \"Tinlake GigPool spell\";\n\n    // MAINNET ADDRESSES\n    // The contracts in this list should correspond to a tinlake deployment\n    // https://github.com/centrifuge/tinlake-pool-config/blob/master/mainnet-production.json\n\n    address constant public ROOT = 0x3d167bd08f762FD391694c67B5e6aF0868c45538;\n    address constant public NAV_FEED = 0x468eb2408c6F24662a291892550952eb0d70b707;\n    address constant public PILE = 0x9E39e0130558cd9A01C1e3c7b2c3803baCb59616;\n                                                             \n    uint256 constant ONE = 10**27;\n    address self;\n    \n    function cast() public {\n        require(!done, \"spell-already-cast\");\n        done = true;\n        execute();\n    }\n\n    function execute() internal {\n       TinlakeRootLike root = TinlakeRootLike(address(ROOT));\n       NAVFeedLike navFeed = NAVFeedLike(address(NAV_FEED));\n       PileLike pile = PileLike(PILE);\n       self = address(this);\n       // permissions \n       root.relyContract(NAV_FEED, self); // required to file riskGroups & change discountRate\n       root.relyContract(PILE, self); // required to change the interestRates for loans according to new riskGroups\n        \n        // update Scorecard\n        // risk group: 3 - M, APR: 13.00%\n        navFeed.file(\"riskGroup\", 3, ONE, ONE, uint256(1000000004122272957889396245), 99.9*10**25);\n        // risk group: 4 - W, APR: 11.00%\n        navFeed.file(\"riskGroup\", 4, ONE, ONE, uint256(1000000003488077118214104515), 99.9*10**25);\n        // risk group: 5 - PC, APR: 10.00%\n        navFeed.file(\"riskGroup\", 5, ONE, ONE, uint256(1000000003170979198376458650), 99.9*10**25);\n        \n        // move all assets from riskGroup 0 to riskGroup 3 & riskGroup 1 to riskGroup 4\n        // => move loan 2 & 3 to group 3 & loan 4 to group 4\n        uint newRiskGroup3 = 3;\n        uint newRiskGroup4 = 4;\n        uint loanID2 = 2;\n        bytes32 nftIDLoan2 = navFeed.nftID(loanID2);\n        uint nftValueLoan2 = navFeed.nftValues(nftIDLoan2);\n        navFeed.update(nftIDLoan2, nftValueLoan2, newRiskGroup3);\n        pile.changeRate(loanID2, newRiskGroup3);\n        \n        uint loanID3 = 3;\n        bytes32 nftIDLoan3 = navFeed.nftID(loanID3);\n        uint nftValueLoan3 = navFeed.nftValues(nftIDLoan3);\n        navFeed.update(nftIDLoan3, nftValueLoan3, newRiskGroup3);\n        pile.changeRate(loanID3, newRiskGroup3);\n\n        uint loanID4 = 4;\n        bytes32 nftIDLoan4 = navFeed.nftID(loanID4);\n        uint nftValueLoan4 = navFeed.nftValues(nftIDLoan4);\n        navFeed.update(nftIDLoan4, nftValueLoan4, newRiskGroup4);\n        pile.changeRate(loanID4, newRiskGroup4);\n     }  \n}\n","ABI":"[{\"inputs\":[],\"name\":\"NAV_FEED\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PILE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TinlakeSpell","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}