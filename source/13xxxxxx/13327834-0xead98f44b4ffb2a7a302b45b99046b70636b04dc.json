{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/peak/ProtectionStaking.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\nimport \\\"../lib/ReentrancyGuard.sol\\\";\\nimport \\\"../lib/Utils.sol\\\";\\nimport \\\"../lib/SafePeakToken.sol\\\";\\nimport \\\"../interfaces/IPeakToken.sol\\\";\\nimport \\\"../interfaces/IPeakDeFiFund.sol\\\";\\nimport \\\"../interfaces/IUniswapOracle.sol\\\";\\nimport \\\"../interfaces/IProtectionStaking.sol\\\";\\n\\n\\ncontract ProtectionStaking is IProtectionStaking, Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafePeakToken for IPeakToken;\\n\\n    address public sharesToken;\\n\\n    IPeakDeFiFund public fund;\\n    IPeakToken public peakToken;\\n    IUniswapOracle public uniswapOracle;\\n\\n    uint256 public mintedPeakTokens;\\n    uint256 public peakMintCap = 5000000 * PEAK_PRECISION; // default 300 million PEAK\\n    uint256 internal constant PEAK_PRECISION = 10**8;\\n    uint256 internal constant USDC_PRECISION = 10**6;\\n    uint256 internal constant PERCENTS_DECIMALS = 10**20;\\n\\n    mapping(address => uint256) public peaks;\\n    mapping(address => uint256) public shares;\\n    mapping(address => uint256) public startProtectTimestamp;\\n    mapping(address => uint256) internal _lastClaimTimestamp;\\n    mapping(address => uint256) public lastClaimAmount;\\n\\n    event ClaimCompensation(\\n        address investor,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n    event RequestProtection(\\n        address investor,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n    event Withdraw(address investor, uint256 amount, uint256 timestamp);\\n    event ProtectShares(address investor, uint256 amount, uint256 timestamp);\\n    event WithdrawShares(address investor, uint256 amount, uint256 timestamp);\\n    event ChangePeakMintCap(uint256 newAmmount);\\n\\n    modifier during(IPeakDeFiFund.CyclePhase phase) {\\n        require(fund.cyclePhase() == phase, \\\"wrong phase\\\");\\n        if (fund.cyclePhase() == IPeakDeFiFund.CyclePhase.Intermission) {\\n            require(fund.isInitialized(), \\\"fund not initialized\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier ifNoCompensation() {\\n        uint256 peakPriceInUsdc = _getPeakPriceInUsdc();\\n        uint256 compensationAmount = _calculateCompensating(\\n            msg.sender,\\n            peakPriceInUsdc\\n        );\\n        require(compensationAmount == 0, \\\"have compensation\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address payable _fundAddr,\\n        address _peakTokenAddr,\\n        address _sharesTokenAddr,\\n        address _uniswapOracle\\n    ) public {\\n        __initReentrancyGuard();\\n        require(_fundAddr != address(0));\\n        require(_peakTokenAddr != address(0));\\n\\n        fund = IPeakDeFiFund(_fundAddr);\\n        peakToken = IPeakToken(_peakTokenAddr);\\n        uniswapOracle = IUniswapOracle(_uniswapOracle);\\n        sharesToken = _sharesTokenAddr;\\n    }\\n\\n    function() external {}\\n\\n    function _lostFundAmount(address _investor)\\n        internal\\n        view\\n        returns (uint256 lostFundAmount)\\n    {\\n        uint256 totalLostFundAmount = fund.totalLostFundAmount();\\n        uint256 investorLostFundAmount = lastClaimAmount[_investor];\\n        lostFundAmount = totalLostFundAmount.sub(investorLostFundAmount);\\n    }\\n\\n    function _calculateCompensating(address _investor, uint256 _peakPriceInUsdc)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalFundsAtManagePhaseStart = fund\\n        .totalFundsAtManagePhaseStart();\\n        uint256 totalShares = fund.totalSharesAtLastManagePhaseStart();\\n        uint256 managePhaseStartTime = fund.startTimeOfLastManagementPhase();\\n        uint256 lostFundAmount = _lostFundAmount(_investor);\\n        uint256 sharesAmount = shares[_investor];\\n        if (\\n            fund.cyclePhase() != IPeakDeFiFund.CyclePhase.Intermission ||\\n            managePhaseStartTime < _lastClaimTimestamp[_investor] ||\\n            managePhaseStartTime < startProtectTimestamp[_investor] ||\\n            mintedPeakTokens >= peakMintCap ||\\n            peaks[_investor] == 0 ||\\n            lostFundAmount == 0 ||\\n            totalShares == 0 ||\\n            _peakPriceInUsdc == 0 ||\\n            sharesAmount == 0\\n        ) {\\n            return 0;\\n        }\\n        uint256 sharesInUsdcAmount = sharesAmount\\n        .mul(totalFundsAtManagePhaseStart)\\n        .div(totalShares);\\n        uint256 peaksInUsdcAmount = peaks[_investor].mul(_peakPriceInUsdc).div(\\n            PEAK_PRECISION\\n        );\\n        uint256 protectedPercent = PERCENTS_DECIMALS;\\n        if (peaksInUsdcAmount < sharesInUsdcAmount) {\\n            protectedPercent = peaksInUsdcAmount.mul(PERCENTS_DECIMALS).div(\\n                sharesInUsdcAmount\\n            );\\n        }\\n        uint256 ownLostFundInUsd = lostFundAmount.mul(sharesAmount).div(\\n            totalShares\\n        );\\n        uint256 compensationInUSDC = ownLostFundInUsd.mul(protectedPercent).div(\\n            PERCENTS_DECIMALS\\n        );\\n        uint256 compensationInPeak = compensationInUSDC.mul(PEAK_PRECISION).div(\\n            _peakPriceInUsdc\\n        );\\n        if (peakMintCap - mintedPeakTokens < compensationInPeak) {\\n            compensationInPeak = peakMintCap - mintedPeakTokens;\\n        }\\n        return compensationInPeak;\\n    }\\n\\n    function calculateCompensating(address _investor, uint256 _peakPriceInUsdc)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _calculateCompensating(_investor, _peakPriceInUsdc);\\n    }\\n\\n    function updateLastClaimAmount() internal {\\n        lastClaimAmount[msg.sender] = fund.totalLostFundAmount();\\n    }\\n\\n    function claimCompensation()\\n        external\\n        during(IPeakDeFiFund.CyclePhase.Intermission)\\n        nonReentrant\\n    {\\n        uint256 peakPriceInUsdc = _getPeakPriceInUsdc();\\n        uint256 compensationAmount = _calculateCompensating(\\n            msg.sender,\\n            peakPriceInUsdc\\n        );\\n        require(compensationAmount > 0, \\\"not have compensation\\\");\\n        _lastClaimTimestamp[msg.sender] = block.timestamp;\\n        peakToken.mint(msg.sender, compensationAmount);\\n        mintedPeakTokens = mintedPeakTokens.add(compensationAmount);\\n        require(\\n            mintedPeakTokens <= peakMintCap,\\n            \\\"ProtectionStaking: reached cap\\\"\\n        );\\n        updateLastClaimAmount();\\n        emit ClaimCompensation(msg.sender, compensationAmount, block.timestamp);\\n    }\\n\\n    function requestProtection(uint256 _amount)\\n        external\\n        during(IPeakDeFiFund.CyclePhase.Intermission)\\n        nonReentrant\\n        ifNoCompensation\\n    {\\n        require(_amount > 0, \\\"amount is 0\\\");\\n        peakToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        peaks[msg.sender] = peaks[msg.sender].add(_amount);\\n        startProtectTimestamp[msg.sender] = block.timestamp;\\n        updateLastClaimAmount();\\n        emit RequestProtection(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    function withdraw(uint256 _amount) external ifNoCompensation {\\n        require(\\n            peaks[msg.sender] >= _amount,\\n            \\\"insufficient fund in Peak Token\\\"\\n        );\\n        require(_amount > 0, \\\"amount is 0\\\");\\n        peaks[msg.sender] = peaks[msg.sender].sub(_amount);\\n        peakToken.safeTransfer(msg.sender, _amount);\\n        updateLastClaimAmount();\\n        emit Withdraw(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    function protectShares(uint256 _amount)\\n        external\\n        nonReentrant\\n        during(IPeakDeFiFund.CyclePhase.Intermission)\\n        ifNoCompensation\\n    {\\n        require(_amount > 0, \\\"amount is 0\\\");\\n        IERC20(sharesToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        startProtectTimestamp[msg.sender] = block.timestamp;\\n        shares[msg.sender] = shares[msg.sender].add(_amount);\\n        updateLastClaimAmount();\\n        emit ProtectShares(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    function withdrawShares(uint256 _amount)\\n        external\\n        nonReentrant\\n        ifNoCompensation\\n    {\\n        require(\\n            shares[msg.sender] >= _amount,\\n            \\\"insufficient fund in Share Token\\\"\\n        );\\n        require(_amount > 0, \\\"amount is 0\\\");\\n        shares[msg.sender] = shares[msg.sender].sub(_amount);\\n        IERC20(sharesToken).safeTransfer(msg.sender, _amount);\\n        emit WithdrawShares(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    function setPeakMintCap(uint256 _amount) external onlyOwner {\\n        peakMintCap = _amount;\\n        emit ChangePeakMintCap(_amount);\\n    }\\n\\n    function _getPeakPriceInUsdc() internal returns (uint256) {\\n        uniswapOracle.update();\\n        uint256 priceInUSDC = uniswapOracle.consult(\\n            address(peakToken),\\n            PEAK_PRECISION\\n        );\\n        if (priceInUSDC == 0) {\\n            return USDC_PRECISION.mul(3).div(10);\\n        }\\n        return priceInUSDC;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\\n * metering changes introduced in the Istanbul hardfork.\\n */\\ncontract ReentrancyGuard {\\n    bool private _notEntered;\\n\\n    function __initReentrancyGuard() internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Utils.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/IKyberNetwork.sol\\\";\\n\\n/**\\n * @title The smart contract for useful utility functions and constants.\\n * @author Zefram Lou (Zebang Liu)\\n */\\ncontract Utils {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20Detailed;\\n\\n    /**\\n     * @notice Checks if `_token` is a valid token.\\n     * @param _token the token's address\\n     */\\n    modifier isValidToken(address _token) {\\n        require(_token != address(0));\\n        if (_token != address(ETH_TOKEN_ADDRESS)) {\\n            require(isContract(_token));\\n        }\\n        _;\\n    }\\n\\n    address public USDC_ADDR;\\n    address payable public KYBER_ADDR;\\n    address payable public ONEINCH_ADDR;\\n\\n    bytes public constant PERM_HINT = \\\"PERM\\\";\\n\\n    // The address Kyber Network uses to represent Ether\\n    ERC20Detailed internal constant ETH_TOKEN_ADDRESS =\\n        ERC20Detailed(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\\n    ERC20Detailed internal usdc;\\n    IKyberNetwork internal kyber;\\n\\n    uint256 internal constant PRECISION = (10**18);\\n    uint256 internal constant MAX_QTY = (10**28); // 10B tokens\\n    uint256 internal constant ETH_DECIMALS = 18;\\n    uint256 internal constant MAX_DECIMALS = 18;\\n\\n    constructor(\\n        address _usdcAddr,\\n        address payable _kyberAddr,\\n        address payable _oneInchAddr\\n    ) public {\\n        USDC_ADDR = _usdcAddr;\\n        KYBER_ADDR = _kyberAddr;\\n        ONEINCH_ADDR = _oneInchAddr;\\n\\n        usdc = ERC20Detailed(_usdcAddr);\\n        kyber = IKyberNetwork(_kyberAddr);\\n    }\\n\\n    /**\\n     * @notice Get the number of decimals of a token\\n     * @param _token the token to be queried\\n     * @return number of decimals\\n     */\\n    function getDecimals(ERC20Detailed _token) internal view returns (uint256) {\\n        if (address(_token) == address(ETH_TOKEN_ADDRESS)) {\\n            return uint256(ETH_DECIMALS);\\n        }\\n        return uint256(_token.decimals());\\n    }\\n\\n    /**\\n     * @notice Get the token balance of an account\\n     * @param _token the token to be queried\\n     * @param _addr the account whose balance will be returned\\n     * @return token balance of the account\\n     */\\n    function getBalance(ERC20Detailed _token, address _addr)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (address(_token) == address(ETH_TOKEN_ADDRESS)) {\\n            return uint256(_addr.balance);\\n        }\\n        return uint256(_token.balanceOf(_addr));\\n    }\\n\\n    /**\\n     * @notice Calculates the rate of a trade. The rate is the price of the source token in the dest token, in 18 decimals.\\n     *         Note: the rate is on the token level, not the wei level, so for example if 1 Atoken = 10 Btoken, then the rate\\n     *         from A to B is 10 * 10**18, regardless of how many decimals each token uses.\\n     * @param srcAmount amount of source token\\n     * @param destAmount amount of dest token\\n     * @param srcDecimals decimals used by source token\\n     * @param dstDecimals decimals used by dest token\\n     */\\n    function calcRateFromQty(\\n        uint256 srcAmount,\\n        uint256 destAmount,\\n        uint256 srcDecimals,\\n        uint256 dstDecimals\\n    ) internal pure returns (uint256) {\\n        require(srcAmount <= MAX_QTY);\\n        require(destAmount <= MAX_QTY);\\n\\n        if (dstDecimals >= srcDecimals) {\\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\\n            return ((destAmount * PRECISION) /\\n                ((10**(dstDecimals - srcDecimals)) * srcAmount));\\n        } else {\\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\\n            return ((destAmount *\\n                PRECISION *\\n                (10**(srcDecimals - dstDecimals))) / srcAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Wrapper function for doing token conversion on Kyber Network\\n     * @param _srcToken the token to convert from\\n     * @param _srcAmount the amount of tokens to be converted\\n     * @param _destToken the destination token\\n     * @return _destPriceInSrc the price of the dest token, in terms of source tokens\\n     *         _srcPriceInDest the price of the source token, in terms of dest tokens\\n     *         _actualDestAmount actual amount of dest token traded\\n     *         _actualSrcAmount actual amount of src token traded\\n     */\\n    function __kyberTrade(\\n        ERC20Detailed _srcToken,\\n        uint256 _srcAmount,\\n        ERC20Detailed _destToken\\n    )\\n        internal\\n        returns (\\n            uint256 _destPriceInSrc,\\n            uint256 _srcPriceInDest,\\n            uint256 _actualDestAmount,\\n            uint256 _actualSrcAmount\\n        )\\n    {\\n        require(_srcToken != _destToken);\\n\\n        uint256 beforeSrcBalance = getBalance(_srcToken, address(this));\\n        uint256 msgValue;\\n        if (_srcToken != ETH_TOKEN_ADDRESS) {\\n            msgValue = 0;\\n            _srcToken.safeApprove(KYBER_ADDR, 0);\\n            _srcToken.safeApprove(KYBER_ADDR, _srcAmount);\\n        } else {\\n            msgValue = _srcAmount;\\n        }\\n        _actualDestAmount = kyber.tradeWithHint.value(msgValue)(\\n            _srcToken,\\n            _srcAmount,\\n            _destToken,\\n            toPayableAddr(address(this)),\\n            MAX_QTY,\\n            1,\\n            address(0),\\n            PERM_HINT\\n        );\\n        _actualSrcAmount = beforeSrcBalance.sub(\\n            getBalance(_srcToken, address(this))\\n        );\\n        require(_actualDestAmount > 0 && _actualSrcAmount > 0);\\n        _destPriceInSrc = calcRateFromQty(\\n            _actualDestAmount,\\n            _actualSrcAmount,\\n            getDecimals(_destToken),\\n            getDecimals(_srcToken)\\n        );\\n        _srcPriceInDest = calcRateFromQty(\\n            _actualSrcAmount,\\n            _actualDestAmount,\\n            getDecimals(_srcToken),\\n            getDecimals(_destToken)\\n        );\\n    }\\n\\n    /**\\n     * @notice Wrapper function for doing token conversion on 1inch\\n     * @param _srcToken the token to convert from\\n     * @param _srcAmount the amount of tokens to be converted\\n     * @param _destToken the destination token\\n     * @return _destPriceInSrc the price of the dest token, in terms of source tokens\\n     *         _srcPriceInDest the price of the source token, in terms of dest tokens\\n     *         _actualDestAmount actual amount of dest token traded\\n     *         _actualSrcAmount actual amount of src token traded\\n     */\\n    function __oneInchTrade(\\n        ERC20Detailed _srcToken,\\n        uint256 _srcAmount,\\n        ERC20Detailed _destToken,\\n        bytes memory _calldata\\n    )\\n        internal\\n        returns (\\n            uint256 _destPriceInSrc,\\n            uint256 _srcPriceInDest,\\n            uint256 _actualDestAmount,\\n            uint256 _actualSrcAmount\\n        )\\n    {\\n        require(_srcToken != _destToken);\\n\\n        uint256 beforeSrcBalance = getBalance(_srcToken, address(this));\\n        uint256 beforeDestBalance = getBalance(_destToken, address(this));\\n        // Note: _actualSrcAmount is being used as msgValue here, because otherwise we'd run into the stack too deep error\\n        if (_srcToken != ETH_TOKEN_ADDRESS) {\\n            _actualSrcAmount = 0;\\n            _srcToken.safeApprove(ONEINCH_ADDR, 0);\\n            _srcToken.safeApprove(ONEINCH_ADDR, _srcAmount);\\n        } else {\\n            _actualSrcAmount = _srcAmount;\\n        }\\n\\n        // trade through 1inch proxy\\n        (bool success, ) = ONEINCH_ADDR.call.value(_actualSrcAmount)(_calldata);\\n        require(success);\\n\\n        // calculate trade amounts and price\\n        _actualDestAmount = getBalance(_destToken, address(this)).sub(\\n            beforeDestBalance\\n        );\\n        _actualSrcAmount = beforeSrcBalance.sub(\\n            getBalance(_srcToken, address(this))\\n        );\\n        require(_actualDestAmount > 0 && _actualSrcAmount > 0);\\n        _destPriceInSrc = calcRateFromQty(\\n            _actualDestAmount,\\n            _actualSrcAmount,\\n            getDecimals(_destToken),\\n            getDecimals(_srcToken)\\n        );\\n        _srcPriceInDest = calcRateFromQty(\\n            _actualSrcAmount,\\n            _actualDestAmount,\\n            getDecimals(_srcToken),\\n            getDecimals(_destToken)\\n        );\\n    }\\n\\n    /**\\n     * @notice Checks if an Ethereum account is a smart contract\\n     * @param _addr the account to be checked\\n     * @return True if the account is a smart contract, false otherwise\\n     */\\n    function isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        if (_addr == address(0)) return false;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n\\n    function toPayableAddr(address _addr)\\n        internal\\n        pure\\n        returns (address payable)\\n    {\\n        return address(uint160(_addr));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SafePeakToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IPeakToken.sol\\\";\\n\\n/**\\n * @title SafePeakToken\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafePeakToken {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IPeakToken token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IPeakToken token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IPeakToken token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IPeakToken token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IPeakToken token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IPeakToken token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPeakToken.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\n\\ninterface IPeakToken {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    function mint(address recipient, uint256 amount) external returns (bool);\\n\\n    function burn(uint256 amount) external;\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPeakDeFiFund.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\ninterface IPeakDeFiFund {\\n    enum CyclePhase {\\n        Intermission,\\n        Manage\\n    }\\n\\n    enum VoteDirection {\\n        Empty,\\n        For,\\n        Against\\n    }\\n\\n    enum Subchunk {\\n        Propose,\\n        Vote\\n    }\\n\\n    function initParams(\\n        address payable _devFundingAccount,\\n        uint256[2] calldata _phaseLengths,\\n        uint256 _devFundingRate,\\n        address payable _previousVersion,\\n        address _usdcAddr,\\n        address payable _kyberAddr,\\n        address _compoundFactoryAddr,\\n        address _peakdefiLogic,\\n        address _peakdefiLogic2,\\n        address _peakdefiLogic3,\\n        uint256 _startCycleNumber,\\n        address payable _oneInchAddr,\\n        address _peakRewardAddr,\\n        address _peakStakingAddr\\n    ) external;\\n\\n    function initOwner() external;\\n\\n    function cyclePhase() external view returns (CyclePhase phase);\\n\\n    function isInitialized() external view returns (bool);\\n\\n    function devFundingAccount() external view returns (uint256);\\n\\n    function previousVersion() external view returns (uint256);\\n\\n    function cycleNumber() external view returns (uint256);\\n\\n    function totalFundsInUSDC() external view returns (uint256);\\n\\n    function totalFundsAtManagePhaseStart() external view returns (uint256);\\n\\n    function totalLostFundAmount() external view returns (uint256);\\n\\n    function totalFundsAtManagePhaseEnd() external view returns (uint256);\\n\\n    function startTimeOfCyclePhase() external view returns (uint256);\\n\\n    function startTimeOfLastManagementPhase() external view returns (uint256);\\n\\n    function devFundingRate() external view returns (uint256);\\n\\n    function totalCommissionLeft() external view returns (uint256);\\n\\n    function totalSharesAtLastManagePhaseStart() external view returns (uint256);\\n\\n    function peakReferralTotalCommissionLeft() external view returns (uint256);\\n\\n    function peakManagerStakeRequired() external view returns (uint256);\\n\\n    function peakReferralToken() external view returns (uint256);\\n\\n    function peakReward() external view returns (address);\\n\\n    function peakStaking() external view returns (address);\\n\\n    function isPermissioned() external view returns (bool);\\n\\n    function initInternalTokens(\\n        address _repAddr,\\n        address _sTokenAddr,\\n        address _peakReferralTokenAddr\\n    ) external;\\n\\n    function initRegistration(\\n        uint256 _newManagerRepToken,\\n        uint256 _maxNewManagersPerCycle,\\n        uint256 _reptokenPrice,\\n        uint256 _peakManagerStakeRequired,\\n        bool _isPermissioned\\n    ) external;\\n\\n    function initTokenListings(\\n        address[] calldata _kyberTokens,\\n        address[] calldata _compoundTokens\\n    ) external;\\n\\n    function setProxy(address payable proxyAddr) external;\\n\\n    function developerInitiateUpgrade(address payable _candidate) external returns (bool _success);\\n\\n    function migrateOwnedContractsToNextVersion() external;\\n\\n    function transferAssetToNextVersion(address _assetAddress) external;\\n\\n    function investmentsCount(address _userAddr)\\n        external\\n        view\\n        returns (uint256 _count);\\n\\n    function nextVersion()\\n        external\\n        view\\n        returns (address payable);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function compoundOrdersCount(address _userAddr)\\n        external\\n        view\\n        returns (uint256 _count);\\n\\n    function getPhaseLengths()\\n        external\\n        view\\n        returns (uint256[2] memory _phaseLengths);\\n\\n    function commissionBalanceOf(address _manager)\\n        external\\n        returns (uint256 _commission, uint256 _penalty);\\n\\n    function commissionOfAt(address _manager, uint256 _cycle)\\n        external\\n        returns (uint256 _commission, uint256 _penalty);\\n\\n    function changeDeveloperFeeAccount(address payable _newAddr) external;\\n\\n    function changeDeveloperFeeRate(uint256 _newProp) external;\\n\\n    function listKyberToken(address _token) external;\\n\\n    function listCompoundToken(address _token) external;\\n\\n    function nextPhase() external;\\n\\n    function registerWithUSDC() external;\\n\\n    function registerWithETH() external payable;\\n\\n    function registerWithToken(address _token, uint256 _donationInTokens) external;\\n\\n    function depositEther(address _referrer) external payable;\\n\\n    function depositEtherAdvanced(\\n        bool _useKyber,\\n        bytes calldata _calldata,\\n        address _referrer\\n    ) external payable;\\n\\n    function depositUSDC(uint256 _usdcAmount, address _referrer) external;\\n\\n    function depositToken(\\n        address _tokenAddr,\\n        uint256 _tokenAmount,\\n        address _referrer\\n    ) external;\\n\\n    function depositTokenAdvanced(\\n        address _tokenAddr,\\n        uint256 _tokenAmount,\\n        bool _useKyber,\\n        bytes calldata _calldata,\\n        address _referrer\\n    ) external;\\n\\n    function withdrawEther(uint256 _amountInUSDC) external;\\n\\n    function withdrawEtherAdvanced(\\n        uint256 _amountInUSDC,\\n        bool _useKyber,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    function withdrawUSDC(uint256 _amountInUSDC) external;\\n\\n    function withdrawToken(address _tokenAddr, uint256 _amountInUSDC) external;\\n\\n    function withdrawTokenAdvanced(\\n        address _tokenAddr,\\n        uint256 _amountInUSDC,\\n        bool _useKyber,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    function redeemCommission(bool _inShares) external;\\n\\n    function redeemCommissionForCycle(bool _inShares, uint256 _cycle) external;\\n\\n    function sellLeftoverToken(address _tokenAddr, bytes calldata _calldata)\\n        external;\\n\\n    function sellLeftoverCompoundOrder(address payable _orderAddress) external;\\n\\n    function burnDeadman(address _deadman) external;\\n\\n    function createInvestment(\\n        address _tokenAddress,\\n        uint256 _stake,\\n        uint256 _maxPrice\\n    ) external;\\n\\n    function createInvestmentV2(\\n        address _sender,\\n        address _tokenAddress,\\n        uint256 _stake,\\n        uint256 _maxPrice,\\n        bytes calldata _calldata,\\n        bool _useKyber\\n    ) external;\\n\\n    function sellInvestmentAsset(\\n        uint256 _investmentId,\\n        uint256 _tokenAmount,\\n        uint256 _minPrice\\n    ) external;\\n\\n    function sellInvestmentAssetV2(\\n        address _sender,\\n        uint256 _investmentId,\\n        uint256 _tokenAmount,\\n        uint256 _minPrice,\\n        bytes calldata _calldata,\\n        bool _useKyber\\n    ) external;\\n\\n    function createCompoundOrder(\\n        address _sender,\\n        bool _orderType,\\n        address _tokenAddress,\\n        uint256 _stake,\\n        uint256 _minPrice,\\n        uint256 _maxPrice\\n    ) external;\\n\\n    function sellCompoundOrder(\\n        address _sender,\\n        uint256 _orderId,\\n        uint256 _minPrice,\\n        uint256 _maxPrice\\n    ) external;\\n\\n    function repayCompoundOrder(\\n        address _sender,\\n        uint256 _orderId,\\n        uint256 _repayAmountInUSDC\\n    ) external;\\n\\n    function emergencyExitCompoundTokens(\\n        address _sender,\\n        uint256 _orderId,\\n        address _tokenAddr,\\n        address _receiver\\n    ) external;\\n\\n    function peakReferralCommissionBalanceOf(address _referrer) external returns (uint256 _commission);\\n\\n    function peakReferralCommissionOfAt(address _referrer, uint256 _cycle) external returns (uint256 _commission);\\n\\n    function peakReferralRedeemCommission() external;\\n\\n    function peakReferralRedeemCommissionForCycle(uint256 _cycle) external;\\n\\n    function peakChangeManagerStakeRequired(uint256 _newValue) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapOracle.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\n// interface for contract_v6/UniswapOracle.sol\\ninterface IUniswapOracle {\\n    function update() external returns (bool success);\\n\\n    function consult(address token, uint256 amountIn)\\n        external\\n        view\\n        returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProtectionStaking.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\n\\ninterface IProtectionStaking {\\n    function calculateCompensating(address _investor, uint256 _peakPriceInUsdc) external view returns (uint256);\\n\\n    function claimCompensation() external;\\n\\n    function requestProtection(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function protectShares(uint256 _amount) external;\\n\\n    function withdrawShares(uint256 _amount) external;\\n\\n    function setPeakMintCap(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKyberNetwork.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\\";\\n\\n/**\\n * @title The interface for the Kyber Network smart contract\\n * @author Zefram Lou (Zebang Liu)\\n */\\ninterface IKyberNetwork {\\n    function getExpectedRate(\\n        ERC20Detailed src,\\n        ERC20Detailed dest,\\n        uint256 srcQty\\n    ) external view returns (uint256 expectedRate, uint256 slippageRate);\\n\\n    function tradeWithHint(\\n        ERC20Detailed src,\\n        uint256 srcAmount,\\n        ERC20Detailed dest,\\n        address payable destAddress,\\n        uint256 maxDestAmount,\\n        uint256 minConversionRate,\\n        address walletId,\\n        bytes calldata hint\\n    ) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_fundAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_peakTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sharesTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapOracle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmmount\",\"type\":\"uint256\"}],\"name\":\"ChangePeakMintCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ClaimCompensation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProtectShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RequestProtection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawShares\",\"type\":\"event\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_peakPriceInUsdc\",\"type\":\"uint256\"}],\"name\":\"calculateCompensating\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimCompensation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"internalType\":\"contract IPeakDeFiFund\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintedPeakTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"peakMintCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"peakToken\",\"outputs\":[{\"internalType\":\"contract IPeakToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"peaks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"protectShares\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestProtection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setPeakMintCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sharesToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"startProtectTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapOracle\",\"outputs\":[{\"internalType\":\"contract IUniswapOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawShares\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ProtectionStaking","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"00000000000000000000000007cdb44fa1e7eceb638c12a3451a3dc9ce1400e4000000000000000000000000630d98424efe0ea27fb1b3ab7741907dffeaad780000000000000000000000004d1f4532fe81d0b28df0fe9ef14093f37eecc3390000000000000000000000008fb8b62ad979d833f450e3ede2cebabdeb9ddd85","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}