{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Habitat.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./interfaces/ICnMGame.sol\\\";\\nimport \\\"./interfaces/ICnM.sol\\\";\\nimport \\\"./interfaces/ICHEDDAR.sol\\\";\\nimport \\\"./interfaces/IHabitat.sol\\\";\\nimport \\\"./interfaces/IRandomizer.sol\\\";\\nimport \\\"./interfaces/IHouse.sol\\\";\\nimport \\\"./interfaces/IHouseGame.sol\\\";\\n\\ncontract Habitat is IHabitat, Ownable, ReentrancyGuard, IERC721Receiver, Pausable {\\n\\n    // maximum rank for a Cat/Mouse\\n    uint8 public constant MAX_RANK = 8;\\n\\n    // struct to store a stake's token, owner, and earning values\\n    struct Stake {\\n        uint16 tokenId;\\n        uint80 value;\\n        address owner;\\n    }\\n\\n    // number of Mice stacked\\n    uint256 private numMiceStaked;\\n    // number of Cat stacked\\n    uint256 private numCatStaked;\\n    // number of CrazyCat stacked\\n    uint256 private numCrazyCatStaked;\\n    // number of Shack stacked\\n    uint256 private numShackStaked;\\n    // number of Ranch stacked\\n    uint256 private numRanchStaked;\\n    // number of Mansion stacked\\n    uint256 private numMansionStaked;\\n\\n    uint256 public PERIOD = 1 days;\\n\\n    event TokenStaked(address indexed owner, uint256 indexed tokenId, uint8 tokenType, uint256 value);\\n    event CatClaimed(uint256 indexed tokenId, bool indexed unstaked, uint256 earned);\\n    event CrazyCatLadyClaimed(uint256 indexed tokenId, bool indexed unstaked, uint256 earned);\\n    event MouseClaimed(uint256 indexed tokenId, bool indexed unstaked, uint256 earned);\\n    event HouseClaimed(uint256 indexed tokenId, bool indexed unstaked, uint256 earned);\\n\\n    // reference to the CnM NFT contract\\n    ICnM public cnmNFT;\\n\\n    // reference to the House NFT contract\\n    IHouse public houseNFT;\\n\\n    // reference to the CnM game contract\\n    ICnMGame public cnmGame;\\n\\n    // reference to the CnM game contract\\n    IHouseGame public houseGame;\\n\\n    // reference to the $CHEDDAR contract for minting $CHEDDAR earnings\\n    ICHEDDAR public cheddarToken;\\n\\n    // reference to Randomizer\\n    IRandomizer public randomizer;\\n\\n    // maps Mouse tokenId to stake\\n    mapping(uint256 => Stake) private habitat;\\n    // maps House tokenId to stake\\n    mapping(uint256 => Stake) private houseYield;\\n\\n    // maps Cat tokenId to stake\\n    mapping(uint256 => Stake) private yield;\\n    // array of Cat token ids;\\n    uint256[] private yieldIds;\\n    // maps Crazy Lady Cat tokenId to stake\\n    mapping(uint256 => Stake) private crazyYield;\\n    // array of CrazyCat token ids;\\n    uint256[] private crazyYieldIds;\\n\\n\\n    // maps houseTokenId to stake\\n\\n    // any rewards distributed when no Cats are staked\\n    uint256 private unaccountedRewards = 0;\\n    // any rewards distributed from House NFTs when no Crazy Cats are staked\\n    uint256 private unaccountedCrazyRewards = 0;\\n    // amount of $CHEDDAR due for each cat staked\\n    uint256 private cheddarPerCat = 0;\\n    // amount of $CHEDDAR due for each crazy cat staked\\n    uint256 private cheddarPerCrazy = 0;\\n\\n    // Mice earn 10,000 $CHEDDAR per day\\n    uint256 public constant DAILY_CHEDDAR_RATE = 10000 ether;\\n    // Shack: 17,850 Tokens Per Day\\n    uint256 public constant DAILY_SHACK_CHEDDAR_RATE = 17850 ether;\\n    // Ranch: 30,000 Tokens Per Day\\n    uint256 public constant DAILY_RANCH_CHEDDAR_RATE = 30000 ether;\\n    // Mansion: 100,000 Tokens Per Day\\n    uint256 public constant DAILY_MANSION_CHEDDAR_RATE = 100000 ether;\\n\\n    // Mice must have 2 days worth of $CHEDDAR to un-stake or else they're still remaining the habitat\\n    uint256 public MINIMUM = 200000 ether;\\n    // there will only ever  6,000,000,000 $CHEDDAR earned through staking\\n    uint256 public constant MAXIMUM_GLOBAL_CHEDDAR = 6000000000 ether;\\n\\n\\n\\n    // // Cats take a 20% tax on all $CHEDDAR claimed\\n    // uint256 public constant GP_CLAIM_TAX_PERCENTAGE = 20;\\n\\n\\n\\n    // amount of $CHEDDAR earned so far\\n    uint256 public totalCHEDDAREarned;\\n    // the last time $CHEDDAR was claimed\\n    uint256 private lastClaimTimestamp;\\n\\n    // emergency rescue to allow un-staking without any checks but without $CHEDDAR\\n    bool public rescueEnabled = false;\\n\\n    /**\\n     */\\n    constructor() {\\n        _pause();\\n    }\\n\\n    /** CRITICAL TO SETUP */\\n\\n    modifier requireContractsSet() {\\n        require(address(cnmNFT) != address(0) && address(cheddarToken) != address(0)\\n        && address(cnmGame) != address(0) && address(randomizer) != address(0) && address(houseGame) != address(0) && address(houseNFT) != address(0), \\\"Contracts not set\\\");\\n        _;\\n    }\\n\\n    function setContracts(address _cnmNFT, address _cheddar, address _cnmGame, address _houseGame, address _rand, address _houseNFT) external onlyOwner {\\n        cnmNFT = ICnM(_cnmNFT);\\n        houseNFT = IHouse(_houseNFT);\\n        cheddarToken = ICHEDDAR(_cheddar);\\n        cnmGame = ICnMGame(_cnmGame);\\n        randomizer = IRandomizer(_rand);\\n        houseGame = IHouseGame(_houseGame);\\n    }\\n\\n\\n    /** STAKING */\\n\\n    /**\\n     * adds Cats and Mouse\\n     * @param account the address of the staker\\n   * @param tokenIds the IDs of the Cats and Mouse to stake\\n   */\\n    function addManyToStakingPool(address account, uint16[] calldata tokenIds) external override nonReentrant {\\n        require(tx.origin == _msgSender() || _msgSender() == address(cnmGame), \\\"Only EOA\\\");\\n        require(account == tx.origin, \\\"account to send mismatch\\\");\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            if (_msgSender() != address(cnmGame)) {// dont do this step if its a mint + stake\\n                require(cnmNFT.ownerOf(tokenIds[i]) == _msgSender(), \\\"You don't own this token\\\");\\n                cnmNFT.transferFrom(_msgSender(), address(this), tokenIds[i]);\\n            } else if (tokenIds[i] == 0) {\\n                continue;\\n                // there may be gaps in the array for stolen tokens\\n            }\\n\\n            if (cnmNFT.isCat(tokenIds[i])) {\\n                if (cnmNFT.isCrazyCatLady(tokenIds[i])) {\\n                    _addCrazyCatToStakingPool(account, tokenIds[i]);\\n                } else {\\n                    _addCatToStakingPool(account, tokenIds[i]);\\n                }\\n            }\\n            else\\n                _addMouseToStakingPool(account, tokenIds[i]);\\n        }\\n    }\\n\\n\\n\\n    /**\\n     * adds Houses\\n     * @param account the address of the staker\\n   * @param tokenIds the IDs of the House token to stake\\n   */\\n    function addManyHouseToStakingPool(address account, uint16[] calldata tokenIds) external override nonReentrant {\\n        require(tx.origin == _msgSender() || _msgSender() == address(houseGame), \\\"Only EOA\\\");\\n        require(account == tx.origin, \\\"account to send mismatch\\\");\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            if (_msgSender() != address(houseGame)) {// dont do this step if its a mint + stake\\n                require(houseNFT.ownerOf(tokenIds[i]) == _msgSender(), \\\"You don't own this token\\\");\\n                houseNFT.transferFrom(_msgSender(), address(this), tokenIds[i]);\\n            } else if (tokenIds[i] == 0) {\\n                continue;\\n                // there may be gaps in the array for stolen tokens\\n            }\\n\\n            _addHouseToStakingPool(account, tokenIds[i]);\\n\\n        }\\n    }\\n\\n\\n\\n\\n    /**\\n     * adds a single Cat to the Habitat\\n     * @param account the address of the staker\\n   * @param tokenId the ID of the Cat/CrazyCat to add to the Staking Pool\\n   */\\n    function _addCatToStakingPool(address account, uint256 tokenId) internal whenNotPaused _updateEarnings {\\n        yield[tokenId] = Stake({\\n        owner : account,\\n        tokenId : uint16(tokenId),\\n        value : uint80(cheddarPerCat)\\n        });\\n        yieldIds.push(tokenId);\\n        numCatStaked += 1;\\n        cnmNFT.emitCatStakedEvent(account, tokenId);\\n        emit TokenStaked(account, tokenId, 1, cheddarPerCat);\\n    }\\n\\n\\n    /**\\n     * adds a single CrazyCat to the Habitat\\n     * @param account the address of the staker\\n   * @param tokenId the ID of the Cat/CrazyCat to add to the Staking Pool\\n   */\\n    function _addCrazyCatToStakingPool(address account, uint256 tokenId) internal whenNotPaused _updateEarnings {\\n        crazyYield[tokenId] = Stake({\\n        owner : account,\\n        tokenId : uint16(tokenId),\\n        value : uint80(cheddarPerCrazy)\\n        });\\n        crazyYieldIds.push(tokenId);\\n        numCrazyCatStaked += 1;\\n        cnmNFT.emitCrazyCatStakedEvent(account, tokenId);\\n        emit TokenStaked(account, tokenId, 2, cheddarPerCrazy);\\n    }\\n\\n\\n    /**\\n     * adds a single Mouse to the habitat\\n     * @param account the address of the staker\\n   * @param tokenId the ID of the Mouse to add to the Staking Pool\\n   */\\n    function _addMouseToStakingPool(address account, uint256 tokenId) internal {\\n        habitat[tokenId] = Stake({\\n        owner : account,\\n        tokenId : uint16(tokenId),\\n        value : uint80(block.timestamp)\\n        });\\n        // Add the mouse to the habitat\\n        numMiceStaked += 1;\\n        cnmNFT.emitMouseStakedEvent(account, tokenId);\\n        emit TokenStaked(account, tokenId, 0, block.timestamp);\\n    }\\n\\n\\n    /**\\n     * adds a single House to the Habitat\\n     * @param account the address of the staker\\n   * @param tokenId the ID of the Shack to add to the Staking Pool\\n   */\\n    function _addHouseToStakingPool(address account, uint256 tokenId) internal whenNotPaused _updateEarnings {\\n        houseYield[tokenId] = Stake({\\n        owner : account,\\n        tokenId : uint16(tokenId),\\n        value : uint80(block.timestamp)\\n        });\\n        if (houseNFT.isShack(tokenId)) {\\n            numShackStaked += 1;\\n            houseNFT.emitShackStakedEvent(account, tokenId);\\n        } else if (houseNFT.isRanch(tokenId)) {\\n            numRanchStaked += 1;\\n            houseNFT.emitRanchStakedEvent(account, tokenId);\\n        } else {\\n            numMansionStaked += 1;\\n            houseNFT.emitMansionStakedEvent(account, tokenId);\\n        }\\n        emit TokenStaked(account, tokenId, 3, block.timestamp);\\n    }\\n    /** CLAIMING / UNSTAKING */\\n\\n    /**\\n     * realize $CHEDDAR earnings and optionally unstake tokens from the Habitat / Yield\\n     * to unstake a Mouse it will require it has 2 days worth of $CHEDDAR unclaimed\\n     * @param tokenIds the IDs of the tokens to claim earnings from\\n   * @param unstake whether or not to unstake ALL of the tokens listed in tokenIds\\n   */\\n    function claimManyFromHabitatAndYield(uint16[] calldata tokenIds, bool unstake) external whenNotPaused _updateEarnings nonReentrant {\\n        require(tx.origin == _msgSender() || _msgSender() == address(cnmGame), \\\"Only EOA\\\");\\n        require(cnmNFT.isClaimable(), \\\"Not all genesis tokens are minted\\\");\\n        uint256 owed = 0;\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            if (cnmNFT.isCat(tokenIds[i])) {\\n                if (cnmNFT.isCrazyCatLady(tokenIds[i])) {\\n                    owed += _claimCrazyCatFromYield(tokenIds[i], unstake);\\n                } else {\\n                    owed += _claimCatFromYield(tokenIds[i], unstake);\\n                }\\n            }\\n            else {\\n                owed += _claimMouseFromHabitat(tokenIds[i], unstake);\\n            }\\n        }\\n        cheddarToken.updateOriginAccess();\\n        if (owed == 0) {\\n            return;\\n        }\\n        cheddarToken.mint(_msgSender(), owed);\\n    }\\n\\n\\n\\n    /**\\n     * realize $CHEDDAR earnings and optionally unstake tokens from the Habitat\\n     * @param tokenIds the IDs of the tokens to claim earnings from\\n   * @param unstake whether or not to unstake ALL of the tokens listed in tokenIds\\n   */\\n    function claimManyHouseFromHabitat(uint16[] calldata tokenIds, bool unstake) external whenNotPaused _updateEarnings nonReentrant {\\n        require(tx.origin == _msgSender() || _msgSender() == address(houseGame), \\\"Only EOA\\\");\\n        if (!unstake) {\\n            require(cnmNFT.isClaimable(), \\\"Not all genesis tokens are minted\\\");\\n        }\\n        uint256 owed = 0;\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            owed += _claimHouseFromHabitat(tokenIds[i], unstake);\\n        }\\n        cheddarToken.updateOriginAccess();\\n        if (owed == 0) {\\n            return;\\n        }\\n        cheddarToken.mint(_msgSender(), owed);\\n    }\\n\\n\\n    /**\\n     * realize $CHEDDAR earnings for a single Mouse and optionally unstake it\\n     * if not unstaking, lose x% chance * y% percent of accumulated $CHEDDAR to the staked Cats based on it's roll\\n     * if unstaking, there is a % chanc of losing Mouse NFT\\n     * @param tokenId the ID of the Mouse to claim earnings from\\n   * @param unstake whether or not to unstake the Mouse\\n   * @return owed - the amount of $CHEDDAR earned\\n   */\\n    function _claimMouseFromHabitat(uint256 tokenId, bool unstake) internal returns (uint256 owed) {\\n        Stake memory stake = habitat[tokenId];          \\n        require(stake.owner == _msgSender(), \\\"Don't own the given token\\\");\\n        owed = getOwedForCnM(tokenId);\\n        require(!(unstake && owed < MINIMUM), \\\"You can't unstake mice until they have 20k $CHEDDAR.\\\");\\n        uint256 seed = randomizer.random();\\n        uint256 seedChance = seed >> 16;\\n        uint8 mouseRoll = cnmNFT.getTokenRoll(tokenId);\\n        if (unstake) {\\n            // Chance to lose mouse:\\n            // Trashcan: 30%\\n            // Cupboard: 20%\\n            // Pantry: 10%\\n            // Vault: 5%\\n            if (mouseRoll == 0) {\\n                if ((seed & 0xFFFF) % 100 < 30) {\\n                    cnmNFT.burn(tokenId);\\n                } else {\\n                    // lose accumulated tokens 50% chance and 60 percent of all token\\n                    if ((seedChance & 0xFFFF) % 100 < 50) {\\n                        _payCatTax(owed * 60 / 100);\\n                        owed = owed * 40 / 100;\\n                    }\\n                }\\n            } else if (mouseRoll == 1) {\\n                if ((seed & 0xFFFF) % 100 < 20) {\\n                    cnmNFT.burn(tokenId);\\n                } else {\\n                    // lose accumulated tokens 80% chance and 25 percent of all token\\n                    if ((seedChance & 0xFFFF) % 100 < 80) {\\n                        _payCatTax(owed * 25 / 100);\\n                        owed = owed * 75 / 100;\\n                    }\\n                }\\n            } else if (mouseRoll == 2) {\\n                if ((seed & 0xFFFF) % 100 < 10) {\\n                    cnmNFT.burn(tokenId);\\n                } else {\\n                    // lose accumulated tokens 25% chance and 40 percent of all token\\n                    if ((seedChance & 0xFFFF) % 100 < 25) {\\n                        _payCatTax(owed * 40 / 100);\\n                        owed = owed * 60 / 100;\\n                    }\\n                }\\n            } else if (mouseRoll == 3) {\\n                if ((seed & 0xFFFF) % 100 < 5) {\\n                    cnmNFT.burn(tokenId);\\n                } else {\\n                    // lose accumulated tokens 20% chance and 25 percent of all token\\n                    if ((seedChance & 0xFFFF) % 100 < 20) {\\n                        _payCatTax(owed * 25 / 100);\\n                        owed = owed * 75 / 100;\\n                    }\\n                }\\n            }\\n\\n            delete habitat[tokenId];\\n            numMiceStaked -= 1;\\n            // reset mouse to trash\\n            cnmNFT.setRoll(tokenId, 0);\\n            // Always transfer last to guard against reentrance\\n            cnmNFT.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\");\\n            // send back Mouse\\n            cnmNFT.emitMouseUnStakedEvent(_msgSender(), tokenId);\\n        } else {// Claiming\\n            if (mouseRoll == 0) {\\n                // lose accumulated tokens 50% chance and 60 percent of all token\\n                if ((seedChance & 0xFFFF) % 100 < 50) {\\n                    _payCatTax(owed * 60 / 100);\\n                    owed = owed * 40 / 100;\\n                }\\n            } else if (mouseRoll == 1) {\\n                // lose accumulated tokens 80% chance and 25 percent of all token\\n                if ((seedChance & 0xFFFF) % 100 < 80) {\\n                    _payCatTax(owed * 25 / 100);\\n                    owed = owed * 75 / 100;\\n                }\\n            } else if (mouseRoll == 2) {\\n                // lose accumulated tokens 25% chance and 40 percent of all token\\n                if ((seedChance & 0xFFFF) % 100 < 25) {\\n                    _payCatTax(owed * 40 / 100);\\n                    owed = owed * 60 / 100;\\n                }\\n            } else if (mouseRoll == 3) {\\n                // lose accumulated tokens 20% chance and 25 percent of all token\\n                if ((seedChance & 0xFFFF) % 100 < 20) {\\n                    _payCatTax(owed * 25 / 100);\\n                    owed = owed * 75 / 100;\\n                }\\n            }\\n            habitat[tokenId] = Stake({\\n            owner : _msgSender(),\\n            tokenId : uint16(tokenId),\\n            value : uint80(block.timestamp)\\n            });\\n            // reset stake\\n        }\\n        emit MouseClaimed(tokenId, unstake, owed);\\n    }\\n\\n    /**\\n     * realize $CHEDDAR earnings for a single Cat and optionally unstake it\\n     * Cats earn $CHEDDAR\\n     * @param tokenId the ID of the Cat to claim earnings from\\n   * @param unstake whether or not to unstake the Cat\\n   */\\n    function _claimCatFromYield(uint256 tokenId, bool unstake) internal returns (uint256 owed) {\\n        Stake memory stake = yield[tokenId];\\n        require(stake.owner == _msgSender(), \\\"Doesn't own given token\\\");\\n        owed = cheddarPerCat - stake.value;\\n        if (unstake) {\\n            delete yield[tokenId];\\n            uint256 index = 0;\\n            for (uint256 i = 0; i < yieldIds.length; i++) {\\n                if (yieldIds[i] == tokenId) {\\n                    index = i;\\n                    break;\\n                }\\n            }\\n            delete yieldIds[index];\\n            numCatStaked -= 1;\\n            // Always remove last to guard against reentrance\\n            cnmNFT.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\");\\n            // Send back Cat\\n            cnmNFT.emitCatUnStakedEvent(_msgSender(), tokenId);\\n        } else {\\n            yield[tokenId] = Stake({\\n            owner : _msgSender(),\\n            tokenId : uint16(tokenId),\\n            value : uint80(cheddarPerCat)\\n            });\\n            // reset stake\\n\\n        }\\n        emit CatClaimed(tokenId, unstake, owed);\\n    }\\n\\n    /**\\n     * realize $CHEDDAR earnings for a Crazy Cat and optionally unstake it\\n     * Cats earn $CHEDDAR\\n     * @param tokenId the ID of the Cat to claim earnings from\\n   * @param unstake whether or not to unstake the Crazy Cat\\n   */\\n    function _claimCrazyCatFromYield(uint256 tokenId, bool unstake) internal returns (uint256 owed) {\\n        Stake memory stake = crazyYield[tokenId];\\n        require(stake.owner == _msgSender(), \\\"Doesn't own given token\\\");\\n        owed = cheddarPerCrazy - stake.value;\\n        if (unstake) {\\n            delete crazyYield[tokenId];\\n            uint256 index = 0;\\n            for (uint256 i = 0; i < crazyYieldIds.length; i++) {\\n                if (crazyYieldIds[i] == tokenId) {\\n                    index = i;\\n                    break;\\n                }\\n            }\\n            delete crazyYieldIds[index];\\n            numCrazyCatStaked -= 1;\\n            // Always remove last to guard against reentrance\\n            cnmNFT.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\");\\n            // Send back Cat\\n            cnmNFT.emitCrazyCatUnStakedEvent(_msgSender(), tokenId);\\n        } else {\\n            crazyYield[tokenId] = Stake({\\n            owner : _msgSender(),\\n            tokenId : uint16(tokenId),\\n            value : uint80(cheddarPerCrazy)\\n            });\\n            // reset stake\\n\\n        }\\n        emit CrazyCatLadyClaimed(tokenId, unstake, owed);\\n    }\\n\\n    /**\\n     * realize $CHEDDAR earnings for a single Shack and optionally unstake it\\n     * @param tokenId the ID of the Shack to claim earnings from\\n   * @param unstake whether or not to unstake the Shack\\n   * @return owed - the amount of $CHEDDAR earned\\n   */\\n    function _claimHouseFromHabitat(uint256 tokenId, bool unstake) internal returns (uint256 owed) {\\n        Stake memory stake = houseYield[tokenId];\\n        require(stake.owner == _msgSender(), \\\"Don't own the given token\\\");\\n        owed = getOwedForHouse(tokenId);\\n        if (unstake) {\\n            _payCrazyCatTax(owed * 10 / 100);\\n            owed = owed * 90 / 100;\\n            delete houseYield[tokenId];\\n            if (houseNFT.isShack(tokenId)) {\\n                numShackStaked -= 1;\\n                houseNFT.emitShackUnStakedEvent(_msgSender(), tokenId);\\n            } else if (houseNFT.isRanch(tokenId)) {\\n                numRanchStaked -= 1;\\n                houseNFT.emitRanchUnStakedEvent(_msgSender(), tokenId);\\n            } else {\\n                numMansionStaked -= 1;\\n                houseNFT.emitMansionUnStakedEvent(_msgSender(), tokenId);\\n            }\\n            // Always transfer last to guard against reentrance\\n            houseNFT.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\");\\n            // send back House\\n        } else {// Claiming\\n            _payCrazyCatTax(owed * 10 / 100);\\n            owed = owed * 90 / 100;\\n            houseYield[tokenId] = Stake({\\n            owner : _msgSender(),\\n            tokenId : uint16(tokenId),\\n            value : uint80(block.timestamp)\\n            });\\n            // reset stake\\n        }\\n        emit HouseClaimed(tokenId, unstake, owed);\\n    }\\n\\n\\n    /**\\n     * emergency unstake tokens\\n     * @param tokenIds the IDs of the tokens to claim earnings from\\n   */\\n    function rescue(uint256[] calldata tokenIds) external nonReentrant {\\n        require(rescueEnabled, \\\"RESCUE DISABLED\\\");\\n        uint256 tokenId;\\n        Stake memory stake;\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            tokenId = tokenIds[i];\\n            if (cnmNFT.isCat(tokenId)) {\\n                if (cnmNFT.isCrazyCatLady(tokenId)) {\\n                    stake = crazyYield[tokenId];\\n                    require(stake.owner == _msgSender(), \\\"SWIPER, NO SWIPING\\\");\\n                    delete crazyYield[tokenId];\\n                    uint256 index = 0;\\n                    for (uint256 j = 0; j < crazyYieldIds.length; j++) {\\n                        if (crazyYieldIds[j] == tokenId) {\\n                            index = j;\\n                            break;\\n                        }\\n                    }\\n                    delete crazyYieldIds[index];\\n                    numCrazyCatStaked -= 1;\\n                    cnmNFT.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\");\\n                    emit CrazyCatLadyClaimed(tokenId, true, 0);\\n                } else {\\n                    stake = yield[tokenId];\\n                    require(stake.owner == _msgSender(), \\\"SWIPER, NO SWIPING\\\");\\n                    delete yield[tokenId];\\n                    uint256 index = 0;\\n                    for (uint256 j = 0; j < yieldIds.length; j++) {\\n                        if (yieldIds[j] == tokenId) {\\n                            index = j;\\n                            break;\\n                        }\\n                    }\\n                    delete yieldIds[index];\\n                    numCatStaked -= 1;\\n                    cnmNFT.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\");\\n                    emit CatClaimed(tokenId, true, 0);\\n                }\\n            } else {\\n                stake = habitat[tokenId];\\n                require(stake.owner == _msgSender(), \\\"SWIPER, NO SWIPING\\\");\\n                delete habitat[tokenId];\\n                numMiceStaked -= 1;\\n                cnmNFT.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\");\\n                emit MouseClaimed(tokenId, true, 0);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * emergency unstake House tokens\\n     * @param tokenIds the IDs of the tokens to claim earnings from\\n   */\\n    function rescueHouse(uint256[] calldata tokenIds) external nonReentrant {\\n        require(rescueEnabled, \\\"RESCUE DISABLED\\\");\\n        uint256 tokenId;\\n        Stake memory stake;\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            tokenId = tokenIds[i];\\n            stake = houseYield[tokenId];\\n            require(stake.owner == _msgSender(), \\\"SWIPER, NO SWIPING\\\");\\n            delete houseYield[tokenId];\\n            if (houseNFT.isShack(tokenId)) {\\n                numShackStaked -= 1;\\n            } else if (houseNFT.isRanch(tokenId)) {\\n                numRanchStaked -= 1;\\n            } else {\\n                numMansionStaked -= 1;\\n            }\\n            houseNFT.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\");\\n            emit HouseClaimed(tokenId, true, 0);\\n        }\\n    }\\n    /** ACCOUNTING */\\n\\n    /**\\n     * add $CHEDDAR to claimable pot for the Yield\\n     * @param amount $CHEDDAR to add to the pot\\n   */\\n    function _payCatTax(uint256 amount) internal {\\n        if (numCatStaked == 0) {// if there's no staked dragons\\n            unaccountedRewards += amount;\\n            // keep track of $CHEDDAR due to cats\\n            return;\\n        }\\n        // makes sure to include any unaccounted $GP\\n        cheddarPerCat += (amount + unaccountedRewards) / numCatStaked;\\n        unaccountedRewards = 0;\\n    }\\n\\n    /**\\n     * add $CHEDDAR to claimable pot for the Crazy Yield\\n     * @param amount $CHEDDAR to add to the pot\\n   */\\n    function _payCrazyCatTax(uint256 amount) internal {\\n        if (numCrazyCatStaked == 0) {// if there's no staked dragons\\n            unaccountedCrazyRewards += amount;\\n            // keep track of $CHEDDAR due to cats\\n            return;\\n        }\\n        // makes sure to include any unaccounted $GP\\n        cheddarPerCrazy += (amount + unaccountedCrazyRewards) / numCrazyCatStaked;\\n        unaccountedCrazyRewards = 0;\\n    }\\n\\n    /**\\n     * tracks $CHEDDAR earnings to ensure it stops once 6,000,000,000‌ is eclipsed\\n     */\\n    modifier _updateEarnings() {\\n        if (totalCHEDDAREarned < MAXIMUM_GLOBAL_CHEDDAR) {\\n            totalCHEDDAREarned +=\\n            (block.timestamp - lastClaimTimestamp)\\n            * (numMiceStaked * DAILY_CHEDDAR_RATE\\n            + numShackStaked * DAILY_SHACK_CHEDDAR_RATE\\n            + numRanchStaked * DAILY_RANCH_CHEDDAR_RATE\\n            + numMansionStaked * DAILY_MANSION_CHEDDAR_RATE)\\n            / PERIOD;\\n            lastClaimTimestamp = block.timestamp;\\n        }\\n        _;\\n    }\\n\\n    /** ADMIN */\\n\\n    /**\\n     * allows owner to enable \\\"rescue mode\\\"\\n     * simplifies accounting, prioritizes tokens out in emergency\\n     */\\n    function setRescueEnabled(bool _enabled) external onlyOwner {\\n        rescueEnabled = _enabled;\\n    }\\n\\n    function isOwner(uint256 tokenId, address owner) external view override returns (bool) {\\n        if (cnmNFT.isCat(tokenId)) {\\n            if (cnmNFT.isCrazyCatLady(tokenId)) {\\n                return crazyYield[tokenId].owner == owner;\\n            } else {\\n                return yield[tokenId].owner == owner;\\n            }\\n        } else {\\n            return habitat[tokenId].owner == owner;\\n        }\\n    }\\n\\n    /**\\n     * enables owner to pause / unpause contract\\n     */\\n    function setPaused(bool _paused) external requireContractsSet onlyOwner {\\n        if (_paused) _pause();\\n        else _unpause();\\n    }\\n\\n    /** READ ONLY */\\n\\n    function getOwedForCnM(uint256 tokenId) public view returns (uint256) {\\n        uint256 owed = 0;\\n        if(cnmNFT.isCat(tokenId)) {\\n            if(cnmNFT.isCrazyCatLady(tokenId)) {\\n                return cheddarPerCrazy - crazyYield[tokenId].value;\\n            } else {\\n                return cheddarPerCat - yield[tokenId].value;\\n            }         \\n        } else {\\n            Stake memory stake = habitat[tokenId];\\n            if (totalCHEDDAREarned < MAXIMUM_GLOBAL_CHEDDAR) {\\n                owed = (block.timestamp - stake.value) * DAILY_CHEDDAR_RATE / PERIOD;\\n            } else if (stake.value > lastClaimTimestamp) {\\n                owed = 0;\\n            } else {\\n                owed = (lastClaimTimestamp - stake.value) * DAILY_CHEDDAR_RATE / PERIOD;\\n            }\\n            return owed;\\n        }\\n    }\\n\\n    function getOwedForHouse(uint256 tokenId) public view returns (uint256) {\\n        Stake memory stake = houseYield[tokenId];\\n        if(stake.value == 0) return 0;\\n        uint256 dailyHouseCheddarRate = 0;\\n        if (houseNFT.isShack(tokenId)) {\\n            dailyHouseCheddarRate = DAILY_SHACK_CHEDDAR_RATE;\\n        } else if (houseNFT.isRanch(tokenId)) {\\n            dailyHouseCheddarRate = DAILY_RANCH_CHEDDAR_RATE;\\n        } else {\\n            dailyHouseCheddarRate = DAILY_MANSION_CHEDDAR_RATE;\\n        }\\n        uint256 owed;\\n        if (totalCHEDDAREarned < MAXIMUM_GLOBAL_CHEDDAR) {\\n            owed = (block.timestamp - stake.value) * dailyHouseCheddarRate / PERIOD;\\n        } else if (stake.value > lastClaimTimestamp) {\\n            owed = 0;\\n            // $CHEDDAR production stopped already\\n        } else {\\n            owed = (lastClaimTimestamp - stake.value) * dailyHouseCheddarRate / PERIOD;\\n            // stop earning additional $CHEDDAR if it's all been earned\\n        }\\n        return owed;\\n    }\\n\\n    /**\\n     * chooses a random Cat thief when a newly minted token is stolen\\n     * @param seed a random value to choose a Cat from\\n   * @return the owner of the randomly selected Dragon thief\\n   */\\n    function randomCatOwner(uint256 seed) external view override returns (address) {\\n        if (numCatStaked == 0) {\\n            return address(0x0);\\n        }\\n        uint256 bucket = (seed & 0xFFFFFFFF) % numCatStaked;\\n        // choose a value from 0 to total number of cat stacked\\n        uint256 cumulative = 0;\\n        seed >>= 32;\\n        // loop through each bucket of Cats with\\n        for (uint i = 0; i < yieldIds.length; i++) {\\n            if (yieldIds[i] == 0) {\\n                continue;\\n            } else {\\n                if (cumulative == bucket) {\\n                    return yield[yieldIds[i]].owner;\\n                } else {\\n                    cumulative += 1;\\n                }\\n            }\\n        }\\n        return address(0x0);\\n    }\\n\\n    /**\\n     * chooses a random Crazy Cat thief when a newly minted token is stolen\\n     * @param seed a random value to choose a Dragon from\\n   * @return the owner of the randomly selected Dragon thief\\n   */\\n    function randomCrazyCatOwner(uint256 seed) external view override returns (address) {\\n        if (numCrazyCatStaked == 0) {\\n            return address(0x0);\\n        }\\n        uint256 bucket = (seed & 0xFFFFFFFF) % numCrazyCatStaked;\\n        // choose a value from 0 to total number of crazy cat stacked\\n        uint256 cumulative = 0;\\n        seed >>= 32;\\n        // loop through each bucket of Cats with\\n        for (uint i = 0; i < crazyYieldIds.length; i++) {\\n            if (crazyYieldIds[i] == 0) {\\n                continue;\\n            } else {\\n                if (cumulative == bucket) {\\n                    return crazyYield[crazyYieldIds[i]].owner;\\n                } else {\\n                    cumulative += 1;\\n                }\\n            }\\n        }\\n        return address(0x0);\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address from,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        require(from == address(0x0), \\\"Cannot send to Habitat directly\\\");\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    function updateMinimumExit(uint256 _minimum) external onlyOwner {\\n        MINIMUM = _minimum;\\n    }\\n    \\n    function updatePeriod(uint256 _period) external onlyOwner {\\n        PERIOD = _period;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICnMGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICnMGame {\\n  \\n}\"\r\n    },\r\n    \"contracts/interfaces/ICnM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface ICnM is IERC721Enumerable {\\n    \\n    // Character NFT struct\\n    struct CatMouse {\\n        bool isCat; // true if cat\\n        bool isCrazy; // true if cat is CrazyCatLady, only check if isCat equals to true\\n        uint8 roll; //0 - habitatless, 1 - Shack, 2 - Ranch, 3 - Mansion\\n\\n        uint8 body;\\n        uint8 color;\\n        uint8 eyes;\\n        uint8 eyebrows;\\n        uint8 neck;\\n        uint8 glasses;\\n        uint8 hair;\\n        uint8 head;\\n        uint8 markings;\\n        uint8 mouth;\\n        uint8 nose;\\n        uint8 props;\\n        uint8 shirts;\\n    }\\n\\n    function getTokenWriteBlock(uint256 tokenId) external view returns(uint64);\\n    function mint(address recipient, uint256 seed) external;\\n    // function setRoll(uint256 seed, uint256 tokenId, address addr) external;\\n    function setRoll(uint256 tokenId, uint8 habitatType) external;\\n\\n    function emitCatStakedEvent(address owner,uint256 tokenId) external;\\n    function emitCrazyCatStakedEvent(address owner, uint256 tokenId) external;\\n    function emitMouseStakedEvent(address owner, uint256 tokenId) external;\\n    \\n    function emitCatUnStakedEvent(address owner, uint256 tokenId) external;\\n    function emitCrazyCatUnStakedEvent(address owner, uint256 tokenId) external;\\n    function emitMouseUnStakedEvent(address owner, uint256 tokenId) external;\\n    \\n    function burn(uint256 tokenId) external;\\n    function getPaidTokens() external view returns (uint256);\\n    function updateOriginAccess(uint16[] memory tokenIds) external;\\n    function isCat(uint256 tokenId) external view returns(bool);\\n    function isClaimable() external view returns(bool);\\n    function isCrazyCatLady(uint256 tokenId) external view returns(bool);\\n    function getTokenRoll(uint256 tokenId) external view returns(uint8);\\n    function getMaxTokens() external view returns (uint256);\\n    function getTokenTraits(uint256 tokenId) external view returns (CatMouse memory);\\n    function minted() external view returns (uint16);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICHEDDAR.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICHEDDAR {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n    function updateOriginAccess() external;\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IHabitat.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE \\n\\npragma solidity ^0.8.0;\\n\\ninterface IHabitat {\\n  function addManyToStakingPool(address account, uint16[] calldata tokenIds) external;\\n  function addManyHouseToStakingPool(address account, uint16[] calldata tokenIds) external;\\n  function randomCatOwner(uint256 seed) external view returns (address);\\n  function randomCrazyCatOwner(uint256 seed) external view returns (address);\\n  function isOwner(uint256 tokenId, address owner) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRandomizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRandomizer {\\n    function commitId() external view returns (uint16);\\n    function getCommitRandom(uint16 id) external view returns (uint256);\\n    function random() external returns (uint256);\\n    function sRandom(uint256 tokenId) external returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IHouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IHouse is IERC721Enumerable {\\n    \\n    // House NFT struct\\n    struct HouseStruct {\\n        uint8 roll; //0 - Shack, 1 - Ranch, 2 - Mansion\\n        uint8 body;\\n    }\\n\\n    function getTokenWriteBlock(uint256 tokenId) external view returns(uint64);\\n    function mint(address recipient, uint256 seed) external;\\n    function burn(uint256 tokenId) external;\\n    function updateOriginAccess(uint16[] memory tokenIds) external;\\n    function isShack(uint256 tokenId) external view returns(bool);\\n    function isRanch(uint256 tokenId) external view returns(bool);\\n    function isMansion(uint256 tokenId) external view returns(bool);\\n    function getMaxTokens() external view returns (uint256);\\n    function getTokenTraits(uint256 tokenId) external view returns (HouseStruct memory);\\n    function minted() external view returns (uint16);\\n\\n    function emitShackStakedEvent(address owner, uint256 tokenId) external;\\n    function emitRanchStakedEvent(address owner, uint256 tokenId) external;\\n    function emitMansionStakedEvent(address owner, uint256 tokenId) external;\\n\\n    function emitShackUnStakedEvent(address owner, uint256 tokenId) external;\\n    function emitRanchUnStakedEvent(address owner, uint256 tokenId) external;\\n    function emitMansionUnStakedEvent(address owner, uint256 tokenId) external;\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IHouseGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface IHouseGame {\\n  \\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"name\":\"CatClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"name\":\"CrazyCatLadyClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"name\":\"HouseClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"name\":\"MouseClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAILY_CHEDDAR_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAILY_MANSION_CHEDDAR_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAILY_RANCH_CHEDDAR_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAILY_SHACK_CHEDDAR_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_GLOBAL_CHEDDAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RANK\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"addManyHouseToStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"addManyToStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheddarToken\",\"outputs\":[{\"internalType\":\"contract ICHEDDAR\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"}],\"name\":\"claimManyFromHabitatAndYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"}],\"name\":\"claimManyHouseFromHabitat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cnmGame\",\"outputs\":[{\"internalType\":\"contract ICnMGame\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cnmNFT\",\"outputs\":[{\"internalType\":\"contract ICnM\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwedForCnM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwedForHouse\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseGame\",\"outputs\":[{\"internalType\":\"contract IHouseGame\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseNFT\",\"outputs\":[{\"internalType\":\"contract IHouse\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"randomCatOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"randomCrazyCatOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizer\",\"outputs\":[{\"internalType\":\"contract IRandomizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"rescueHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cnmNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cheddar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cnmGame\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_houseGame\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rand\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_houseNFT\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setRescueEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCHEDDAREarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"updateMinimumExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"updatePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Habitat","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}