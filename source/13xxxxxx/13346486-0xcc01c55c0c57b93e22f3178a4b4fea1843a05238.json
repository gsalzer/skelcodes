{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n// interface as defined at https://eips.ethereum.org/EIPS/eip-20\\r\\ninterface ERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address _owner) external view returns (uint256);\\r\\n    function transfer(address _to, uint256 _value) external returns (bool);\\r\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\r\\n    function approve(address _spender, uint256 _value) external returns (bool);\\r\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\r\\n}\"},\"Tontoken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n// https://github.com/ModernExodus/tontoken\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./VotingSystem.sol\\\";\\r\\n\\r\\ncontract Tontoken is ERC20, VotingSystem {\\r\\n    // fields to help the contract operate\\r\\n    uint256 private _totalSupply;\\r\\n    uint256 private allTimeMatchAmount;\\r\\n    uint8 private borkMatchRateShift; // percent of each transaction to be held by contract for eventual donation\\r\\n    mapping(address =\\u003e uint256) private balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private allowed;\\r\\n\\r\\n    // fields to help with voting\\r\\n    // struct with information about candidate\\r\\n    struct BorkPoolRecipient {\\r\\n        address addr;\\r\\n        string name; // optional\\r\\n        string description; // optional\\r\\n        string website; // optional\\r\\n    }\\r\\n    mapping(bytes32 =\\u003e BorkPoolRecipient) private potentialRecipients;\\r\\n    uint256 numPotentialRecipients;\\r\\n\\r\\n    uint256 private minVoterThreshold;\\r\\n    uint256 private minProposalThreshold;\\r\\n    mapping(bytes32 =\\u003e uint256) private lockedBorks;\\r\\n    mapping(address =\\u003e address) private delegatedVoters;\\r\\n    uint256 private lastVotingBlock; // block number of recent voting events\\r\\n    uint256 private numBlocks7Days;\\r\\n    uint256 private numBlocks1Day;\\r\\n\\r\\n    event BorksMatched(address indexed from, address indexed to, uint256 amount, uint256 matched);\\r\\n    event VotingRightsDelegated(address indexed delegate, address indexed voter);\\r\\n    event DelegatedRightsRemoved(address indexed delegate, address indexed voter);\\r\\n    \\r\\n    // constants\\r\\n    string constant insufficientFundsMsg = \\\"Insufficient funds to complete the transfer. Perhaps some are locked?\\\";\\r\\n    string constant cannotSendToZeroMsg = \\\"Funds cannot be burned (sent to the zero address)\\\";\\r\\n    string constant insufficientAllowanceMsg = \\\"The allowance of the transaction sender is insufficient to complete the transfer\\\";\\r\\n    string constant zeroDonationMsg = \\\"Donations must be greater than or equal to 1 Bork\\\";\\r\\n    string constant voterMinimumMsg = \\\"10000 TONT minimum balance required to vote\\\";\\r\\n    string constant proposalMinimumMsg = \\\"50000 TONT minimum balance required to add potential recipients\\\";\\r\\n    string constant zeroSpenderMsg = \\\"The zero address cannot be designated as a spender\\\";\\r\\n    string constant balanceNotApprovedMsg = \\\"A spender cannot be approved a balance higher than the approver\\u0027s balance\\\";\\r\\n\\r\\n    constructor(bool publicNet) {\\r\\n        _totalSupply = 1000000000000; // initial supply of 1,000,000 Tontokens\\r\\n        borkMatchRateShift = 6; // ~1.5% (+- 64 borks)\\r\\n        balances[msg.sender] = _totalSupply;\\r\\n        minVoterThreshold = 10000000000; // at least 10,000 Tontokens to vote\\r\\n        minProposalThreshold = 50000000000; // at least 50,000 Tontokens to propose\\r\\n        lastVotingBlock = block.number;\\r\\n        if (publicNet) {\\r\\n            numBlocks7Days = 40320;\\r\\n            numBlocks1Day = 5760;\\r\\n        } else {\\r\\n            numBlocks7Days = 7;\\r\\n            numBlocks1Day = 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function name() override public pure returns (string memory) {\\r\\n        return \\\"Tontoken\\\";\\r\\n    }\\r\\n\\r\\n    function symbol() override public pure returns (string memory) {\\r\\n        return \\\"TONT\\\";\\r\\n    }\\r\\n\\r\\n    function decimals() override public pure returns (uint8) {\\r\\n        return 6;\\r\\n    }\\r\\n\\r\\n    function totalSupply() override public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address _owner) override public view returns (uint256) {\\r\\n        return balances[_owner];\\r\\n    }\\r\\n\\r\\n    function transfer(address _to, uint256 _value) override public returns (bool) {\\r\\n        validateTransfer(msg.sender, _to, _value);\\r\\n        executeTransfer(msg.sender, _to, _value);\\r\\n        orchestrateVoting();\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function transferFrom(address _from, address _to, uint256 _value) override public returns (bool) {\\r\\n        require(allowed[msg.sender][_from] \\u003e= _value, insufficientAllowanceMsg);\\r\\n        validateTransfer(_from, _to, _value);\\r\\n        allowed[msg.sender][_from] -= _value;\\r\\n        executeTransfer(_from, _to, _value);\\r\\n        orchestrateVoting();\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function approve(address _spender, uint256 _value) override public returns (bool) {\\r\\n        require(_spender != address(0), zeroSpenderMsg);\\r\\n        require(balances[msg.sender] \\u003e= _value, balanceNotApprovedMsg);\\r\\n        if (allowed[_spender][msg.sender] != 0) {\\r\\n            allowed[_spender][msg.sender] = 0;\\r\\n        }\\r\\n        allowed[_spender][msg.sender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function allowance(address _owner, address _spender) override public view returns (uint256) {\\r\\n        return allowed[_spender][_owner];\\r\\n    }\\r\\n\\r\\n    function executeTransfer(address from, address to, uint256 value) private {\\r\\n        uint256 matched;\\r\\n        if (from != address(this)) {\\r\\n            // don\\u0027t apply bork match on bork pool withdrawals\\r\\n            matched = applyBorkMatch(value, from, to);\\r\\n        }\\r\\n        balances[from] -= value;\\r\\n        balances[to] += value;\\r\\n        emit Transfer(from, to, value);\\r\\n        mintBorks(matched);\\r\\n    }\\r\\n\\r\\n    function validateTransfer(address from, address to, uint256 value) private view {\\r\\n        require(getSendableBalance(from) \\u003e= value, insufficientFundsMsg);\\r\\n        require(to != address(0), cannotSendToZeroMsg);\\r\\n    }\\r\\n\\r\\n    function applyBorkMatch(uint256 value, address from, address to) private returns (uint256 matchAmt) {\\r\\n        uint256 matched;\\r\\n        if (value \\u003c 64) {\\r\\n            matched = 1;\\r\\n        } else {\\r\\n            matched = value \\u003e\\u003e borkMatchRateShift;\\r\\n        }\\r\\n        balances[address(this)] += matched;\\r\\n        allTimeMatchAmount += matched;\\r\\n        emit BorksMatched(from, to, value, matched);\\r\\n        return matched;\\r\\n    }\\r\\n\\r\\n    function mintBorks(uint256 numBorks) private {\\r\\n        _totalSupply += numBorks;\\r\\n    }\\r\\n\\r\\n    function enterVote(address vote) public {\\r\\n        require(balanceOf(msg.sender) \\u003e= minVoterThreshold, voterMinimumMsg);\\r\\n        lockBorks(msg.sender, minVoterThreshold);\\r\\n        super.voteForCandidate(vote, msg.sender);\\r\\n    }\\r\\n\\r\\n    function enterDelegatedVote(address voter, address vote) public {\\r\\n        require(delegatedVoters[voter] == msg.sender);\\r\\n        require(balanceOf(voter) \\u003e= minVoterThreshold, voterMinimumMsg);\\r\\n        lockBorks(voter, minVoterThreshold);\\r\\n        super.voteForCandidate(vote, voter);\\r\\n    }\\r\\n\\r\\n    function delegateVoter(address delegate) public {\\r\\n        delegatedVoters[msg.sender] = delegate;\\r\\n        emit VotingRightsDelegated(delegate, msg.sender);\\r\\n    }\\r\\n\\r\\n    function dischargeDelegatedVoter() public {\\r\\n        emit DelegatedRightsRemoved(delegatedVoters[msg.sender], msg.sender);\\r\\n        delete delegatedVoters[msg.sender];\\r\\n    }\\r\\n\\r\\n    function addBorkPoolRecipient(address recipient) private {\\r\\n        require(balanceOf(msg.sender) \\u003e= minProposalThreshold, proposalMinimumMsg);\\r\\n        require(recipient != address(0));\\r\\n        lockBorks(msg.sender, minProposalThreshold);\\r\\n        super.addCandidate(recipient, msg.sender);\\r\\n    }\\r\\n\\r\\n    function proposeBorkPoolRecipient(address recipient) public {\\r\\n        addBorkPoolRecipient(recipient);\\r\\n        appendBorkPoolRecipient(BorkPoolRecipient(recipient, \\\"\\\", \\\"\\\", \\\"\\\"));\\r\\n    }\\r\\n\\r\\n    function proposeBorkPoolRecipient(address recipient, string memory _name, string memory description, string memory website) public {\\r\\n        addBorkPoolRecipient(recipient);\\r\\n        appendBorkPoolRecipient(BorkPoolRecipient(recipient, _name, description, website));\\r\\n    }\\r\\n\\r\\n    function appendBorkPoolRecipient(BorkPoolRecipient memory recipient) private {\\r\\n        potentialRecipients[generateKey(numPotentialRecipients)] = recipient;\\r\\n        numPotentialRecipients++;\\r\\n    }\\r\\n\\r\\n    function lockBorks(address owner, uint256 toLock) private {\\r\\n        lockedBorks[generateKey(owner)] += toLock;\\r\\n    }\\r\\n\\r\\n    function getSendableBalance(address owner) public view returns (uint256) {\\r\\n        bytes32 generatedOwnerKey = generateKey(owner);\\r\\n        if (lockedBorks[generatedOwnerKey] \\u003e= balances[owner]) {\\r\\n            return 0;\\r\\n        }\\r\\n        return balances[owner] - lockedBorks[generatedOwnerKey];\\r\\n    }\\r\\n\\r\\n    // 1 block every ~15 seconds -\\u003e 40320 blocks -\\u003e ~ 7 days\\r\\n    function shouldStartVoting() private view returns (bool) {\\r\\n        return currentStatus == VotingStatus.INACTIVE \\u0026\\u0026 block.number - lastVotingBlock \\u003e= numBlocks7Days;\\r\\n    }\\r\\n\\r\\n    // 5760 blocks -\\u003e ~ 1 day\\r\\n    function shouldEndVoting() private view returns (bool) {\\r\\n        return currentStatus == VotingStatus.ACTIVE \\u0026\\u0026 block.number - lastVotingBlock \\u003e= numBlocks1Day;\\r\\n    }\\r\\n\\r\\n    // handles starting and stopping of voting sessions\\r\\n    function orchestrateVoting() private {\\r\\n        if (shouldStartVoting()) {\\r\\n            (StartVotingOutcome outcome, address winner) = super.startVoting();\\r\\n            if (outcome == StartVotingOutcome.UNCONTESTED) {\\r\\n                distributeBorkPool(winner);\\r\\n            }\\r\\n            lastVotingBlock = block.number;\\r\\n        } else if (shouldEndVoting()) {\\r\\n            (StopVotingOutcome outcome, address winner) = super.stopVoting();\\r\\n            if (outcome == StopVotingOutcome.STOPPED) {\\r\\n                distributeBorkPool(winner);\\r\\n            }\\r\\n            lastVotingBlock = block.number;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function distributeBorkPool(address recipient) private {\\r\\n        executeTransfer(address(this), recipient, balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function postVoteCleanUp() override internal {\\r\\n        delete numPotentialRecipients;\\r\\n    }\\r\\n\\r\\n    function donate(uint256 value) public {\\r\\n        require(value != 0, zeroDonationMsg);\\r\\n        validateTransfer(msg.sender, address(this), value);\\r\\n        executeTransfer(msg.sender, address(this), value);\\r\\n    }\\r\\n\\r\\n    // useful getters to help interaction with Tontoken\\r\\n\\r\\n    function getLockedBorks(address owner) public view returns (uint256) {\\r\\n        return lockedBorks[generateKey(owner)];\\r\\n    }\\r\\n\\r\\n    function getBorkPoolCandidateAddresses() public view returns (address[] memory) {\\r\\n        return currentVotingCycle.candidates;\\r\\n    }\\r\\n\\r\\n    function getBorkPoolCandidates() public view returns (BorkPoolRecipient[] memory) {\\r\\n        BorkPoolRecipient[] memory allRecipients = new BorkPoolRecipient[](numPotentialRecipients);\\r\\n        for (uint256 i; i \\u003c numPotentialRecipients; i++) {\\r\\n            allRecipients[i] = potentialRecipients[generateKey(i)];\\r\\n        }\\r\\n        return allRecipients;\\r\\n    }\\r\\n\\r\\n    function borkPool() public view returns (uint256) {\\r\\n        return balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getVotingMinimum() public view returns (uint256) {\\r\\n        return minVoterThreshold;\\r\\n    }\\r\\n\\r\\n    function getProposalMinimum() public view returns (uint256) {\\r\\n        return minProposalThreshold;\\r\\n    }\\r\\n\\r\\n    function totalBorksMatched() public view returns (uint256) {\\r\\n        return allTimeMatchAmount;\\r\\n    }\\r\\n\\r\\n    function getLastVotingBlock() public view returns (uint256) {\\r\\n        return lastVotingBlock;\\r\\n    }\\r\\n\\r\\n    function getActiveVotingLength() public view returns (uint256) {\\r\\n        return numBlocks1Day;\\r\\n    }\\r\\n\\r\\n    function getInactiveVotingLength() public view returns (uint256) {\\r\\n        return numBlocks7Days;\\r\\n    }\\r\\n}\"},\"UniqueKeyGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ncontract UniqueKeyGenerator {\\r\\n    uint256 private salt;\\r\\n\\r\\n    function generateKey(address a) internal view returns (bytes32) {\\r\\n        return keccak256(abi.encode(uint256(uint160(a)) + salt));\\r\\n    }\\r\\n\\r\\n    function generateKey(uint256 u) internal view returns (bytes32) {\\r\\n        return keccak256(abi.encode(u + salt));\\r\\n    }\\r\\n\\r\\n    // adds more salt -\\u003e makes duplicating keys near impossible\\r\\n    function addSalt() internal {\\r\\n        salt += 100000000;\\r\\n    }\\r\\n}\"},\"VotingSystem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./UniqueKeyGenerator.sol\\\";\\r\\n\\r\\nabstract contract VotingSystem is UniqueKeyGenerator {\\r\\n    // fields to help with voting\\r\\n    mapping(bytes32 =\\u003e bool) internal isCandidate;\\r\\n    \\r\\n    // candidates\\r\\n    mapping(bytes32 =\\u003e uint256) internal votes;\\r\\n    struct VotingCycle {\\r\\n        uint256 id;\\r\\n        address[] candidates;\\r\\n        address leader;\\r\\n        uint256 leaderVotes;\\r\\n        bool tied;\\r\\n    }\\r\\n    VotingCycle internal currentVotingCycle;\\r\\n\\r\\n    // voters\\r\\n    mapping(bytes32 =\\u003e bool) internal voted;\\r\\n\\r\\n    // proposers\\r\\n    mapping(bytes32 =\\u003e bool) internal addedProposal;\\r\\n\\r\\n    VotingStatus internal currentStatus;\\r\\n    enum VotingStatus { INACTIVE, ACTIVE }\\r\\n    enum StartVotingOutcome { STARTED, UNCONTESTED, NO_CANDIDATES }\\r\\n    enum StopVotingOutcome { STOPPED, NO_VOTES, TIE }\\r\\n    address internal latestWinner;\\r\\n    uint256 internal numVotesHeld;\\r\\n\\r\\n    event VotingActive(uint256 votingSessionNumber);\\r\\n    event VotingInactive(address winner, uint256 numVotes);\\r\\n    event VotingExtended();\\r\\n    event VotingPostponed(string reason);\\r\\n    event VoteUncontested(address winner);\\r\\n    event VoteCounted(address indexed voter, address indexed vote);\\r\\n    event CandidateAdded(address indexed candidate, address indexed addedBy);\\r\\n\\r\\n    // constants\\r\\n    string constant duplicateCandidateMsg = \\\"The proposed candidate has already been added.\\\";\\r\\n    string constant alreadyAddedCandidateMsg = \\\"The sender\\u0027s address has already proposed a candidate\\\";\\r\\n    string constant alreadyVotedMsg = \\\"The sender\\u0027s address has already voted this cycle\\\";\\r\\n    string constant noMatchingCandidateMsg = \\\"No matching candidate exists this voting cycle\\\";\\r\\n    string constant votingInactiveMsg = \\\"Votes cannot be cast while voting state is INACTIVE (0)\\\";\\r\\n    string constant votingActiveMsg = \\\"Candidates cannot be proposed while voting state is ACTIVE (2)\\\";\\r\\n\\r\\n    // START -\\u003e voting is active\\r\\n    function startVoting() internal returns (StartVotingOutcome outcome, address winner) {\\r\\n        assert(currentStatus == VotingStatus.INACTIVE);\\r\\n        if (currentVotingCycle.candidates.length != 0 \\u0026\\u0026 currentVotingCycle.candidates.length \\u003e 1) {\\r\\n            currentStatus = VotingStatus.ACTIVE;\\r\\n            numVotesHeld++;\\r\\n            emit VotingActive(numVotesHeld);\\r\\n            return (StartVotingOutcome.STARTED, address(0));\\r\\n        }\\r\\n        if (currentVotingCycle.candidates.length == 1) {\\r\\n            numVotesHeld++;\\r\\n            latestWinner = currentVotingCycle.candidates[0];\\r\\n            emit VoteUncontested(latestWinner);\\r\\n            resetVotingState();\\r\\n            return (StartVotingOutcome.UNCONTESTED, latestWinner);\\r\\n        }\\r\\n        emit VotingPostponed(\\\"No candidates\\\");\\r\\n        return (StartVotingOutcome.NO_CANDIDATES, address(0));\\r\\n    }\\r\\n\\r\\n    // INACTIVE -\\u003e voting is over, winner is determined, and options are reset\\r\\n    function stopVoting() internal returns (StopVotingOutcome outcome, address winner) {\\r\\n        assert(currentStatus == VotingStatus.ACTIVE);\\r\\n        if (currentVotingCycle.leader == address(0)) {\\r\\n            currentStatus = VotingStatus.INACTIVE;\\r\\n            emit VotingPostponed(\\\"No votes cast\\\");\\r\\n            return (StopVotingOutcome.NO_VOTES, address(0));\\r\\n        }\\r\\n        if (currentVotingCycle.tied) {\\r\\n            emit VotingExtended();\\r\\n            return (StopVotingOutcome.TIE, address(0));\\r\\n        }\\r\\n        currentStatus = VotingStatus.INACTIVE;\\r\\n        emit VotingInactive(currentVotingCycle.leader, currentVotingCycle.leaderVotes);\\r\\n        latestWinner = currentVotingCycle.leader;\\r\\n        resetVotingState();\\r\\n        return (StopVotingOutcome.STOPPED, latestWinner);\\r\\n    }\\r\\n\\r\\n    function addCandidate(address candidate, address proposer) internal {\\r\\n        require(currentStatus == VotingStatus.INACTIVE, votingActiveMsg);\\r\\n        bytes32 proposerKey = generateKey(proposer);\\r\\n        bytes32 candidateKey = generateKey(candidate);\\r\\n        require(!addedProposal[proposerKey], alreadyAddedCandidateMsg);\\r\\n        require(!isCandidate[candidateKey], duplicateCandidateMsg);\\r\\n        isCandidate[candidateKey] = true;\\r\\n        addedProposal[proposerKey] = true;\\r\\n        currentVotingCycle.candidates.push(candidate);\\r\\n        emit CandidateAdded(candidate, proposer);\\r\\n    }\\r\\n\\r\\n    function voteForCandidate(address vote, address voter) internal {\\r\\n        require(currentStatus == VotingStatus.ACTIVE, votingInactiveMsg);\\r\\n        bytes32 voteKey = generateKey(vote);\\r\\n        bytes32 voterKey = generateKey(voter);\\r\\n        require(!voted[voterKey], alreadyVotedMsg);\\r\\n        require(isCandidate[voteKey], noMatchingCandidateMsg);\\r\\n        votes[voteKey]++;\\r\\n        voted[voterKey] = true;\\r\\n        adjustLeader(vote, votes[voteKey]);\\r\\n        emit VoteCounted(voter, vote);\\r\\n    }\\r\\n\\r\\n    function adjustLeader(address vote, uint256 numVotes) private {\\r\\n        if (numVotes == currentVotingCycle.leaderVotes) {\\r\\n            currentVotingCycle.tied = true;\\r\\n        } else if (numVotes \\u003e currentVotingCycle.leaderVotes) {\\r\\n            currentVotingCycle.leaderVotes = numVotes;\\r\\n            currentVotingCycle.leader = vote;\\r\\n            currentVotingCycle.tied = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function resetVotingState() private {\\r\\n        VotingCycle memory vc;\\r\\n        vc.id = currentVotingCycle.id + 1;\\r\\n        currentVotingCycle = vc;\\r\\n        addSalt();\\r\\n        postVoteCleanUp();\\r\\n    }\\r\\n\\r\\n    function postVoteCleanUp() internal virtual;\\r\\n\\r\\n    // getters to check voting data\\r\\n\\r\\n    function getVotingStatus() public view returns (VotingStatus) {\\r\\n        return currentStatus;\\r\\n    }\\r\\n\\r\\n    function isVotingActive() public view returns (bool) {\\r\\n        return currentStatus == VotingStatus.ACTIVE;\\r\\n    }\\r\\n\\r\\n    function getIsCandidate(address a) public view returns (bool) {\\r\\n        return isCandidate[generateKey(a)];\\r\\n    }\\r\\n\\r\\n    function getNumberOfVotes(address a) public view returns (uint256) {\\r\\n        return votes[generateKey(a)];\\r\\n    }\\r\\n\\r\\n    function getCurrentLeader() public view returns (address) {\\r\\n        return currentVotingCycle.leader;\\r\\n    }\\r\\n\\r\\n    function getCurrentLeaderVoteCount() public view returns (uint256) {\\r\\n        return currentVotingCycle.leaderVotes;\\r\\n    }\\r\\n\\r\\n    function getCurrentVotingCycleId() public view returns (uint256) {\\r\\n        return currentVotingCycle.id;\\r\\n    }\\r\\n\\r\\n    function isCurrentlyTied() public view returns (bool) {\\r\\n        return currentVotingCycle.tied;\\r\\n    }\\r\\n\\r\\n    function hasAlreadyVoted(address a) public view returns (bool) {\\r\\n        return voted[generateKey(a)];\\r\\n    }\\r\\n\\r\\n    function hasAlreadyAddedCandidate(address a) public view returns (bool) {\\r\\n        return addedProposal[generateKey(a)];\\r\\n    }\\r\\n\\r\\n    function mostRecentWinner() public view returns (address) {\\r\\n        return latestWinner;\\r\\n    }\\r\\n\\r\\n    function totalVoteSessionsHeld() public view returns (uint256) {\\r\\n        return numVotesHeld;\\r\\n    }\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"publicNet\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"matched\",\"type\":\"uint256\"}],\"name\":\"BorksMatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"CandidateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"DelegatedRightsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vote\",\"type\":\"address\"}],\"name\":\"VoteCounted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"VoteUncontested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingSessionNumber\",\"type\":\"uint256\"}],\"name\":\"VotingActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VotingExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numVotes\",\"type\":\"uint256\"}],\"name\":\"VotingInactive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"VotingPostponed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"VotingRightsDelegated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borkPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"delegateVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dischargeDelegatedVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vote\",\"type\":\"address\"}],\"name\":\"enterDelegatedVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vote\",\"type\":\"address\"}],\"name\":\"enterVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveVotingLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorkPoolCandidateAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorkPoolCandidates\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"}],\"internalType\":\"struct Tontoken.BorkPoolRecipient[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLeader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLeaderVoteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentVotingCycleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInactiveVotingLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getIsCandidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastVotingBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLockedBorks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getNumberOfVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposalMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getSendableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotingMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotingStatus\",\"outputs\":[{\"internalType\":\"enum VotingSystem.VotingStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"hasAlreadyAddedCandidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"hasAlreadyVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCurrentlyTied\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVotingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mostRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"proposeBorkPoolRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"}],\"name\":\"proposeBorkPoolRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorksMatched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVoteSessionsHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Tontoken","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"10000000","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ecee2cc2e4cdecf47c84634e9603af4a169145e22934f43d38cc2a990cf63778"}]}