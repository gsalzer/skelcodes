{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/JeffFromAccounting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ncontract JeffFromAccounting is Context {\\n    mapping(address => Project) internal projects;\\n    mapping(address => uint256) public balanceOf;\\n\\n    struct Project {\\n        address[] team;\\n        uint256[] splits;\\n    }\\n\\n    function getProjectTeam(address _projectAddress) public view returns (address[] memory _team) {\\n        return projects[_projectAddress].team;\\n    }\\n    \\n    function getProjectSplits(address _projectAddress) public view returns (uint256[] memory _team) {\\n        return projects[_projectAddress].splits;\\n    }\\n    \\n    function newProject(address _contract, address[] calldata _team, uint[] calldata _splits) external {\\n        projects[_contract] = Project(_team, _splits);\\n    }\\n\\n    function withdrawBalance(uint256 _amount) external {\\n        require(\\n            balanceOf[_msgSender()] >= _amount,\\n            \\\"This value is more than available to withdraw.\\\"\\n        );\\n\\n        balanceOf[_msgSender()] -= _amount;\\n        (bool success, ) = payable(_msgSender()).call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Withdraw failed.\\\");\\n    }\\n\\n    function tallySplits(Project memory _project) internal {\\n        uint256 each;\\n         for (uint256 i; i < _project.splits.length; i++) {\\n             each = (((msg.value * _project.splits[i]) / 100));\\n             balanceOf[_project.team[i]] += each;\\n         }\\n    }\\n\\n    receive() external payable {\\n        Project memory _project = projects[_msgSender()];\\n        require(_project.splits.length != 0, \\\"Project must exist.\\\");\\n        tallySplits(_project);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_projectAddress\",\"type\":\"address\"}],\"name\":\"getProjectSplits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_team\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_projectAddress\",\"type\":\"address\"}],\"name\":\"getProjectTeam\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_team\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_team\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_splits\",\"type\":\"uint256[]\"}],\"name\":\"newProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"JeffFromAccounting","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}