{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.5.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.2.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.2.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v4.2.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol@v4.2.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.2.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.2.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/ERC721.sol@v4.2.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC165, IERC165)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            owner != address(0),\r\n            \"ERC721: balance query for the zero address\"\r\n        );\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        address owner = _owners[tokenId];\r\n        require(\r\n            owner != address(0),\r\n            \"ERC721: owner query for nonexistent token\"\r\n        );\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        string memory baseURI = _baseURI();\r\n        return\r\n            bytes(baseURI).length > 0\r\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n                : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721: approved query for nonexistent token\"\r\n        );\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved)\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(from, to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721: operator query for nonexistent token\"\r\n        );\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner ||\r\n            getApproved(tokenId) == spender ||\r\n            isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(\r\n            ERC721.ownerOf(tokenId) == from,\r\n            \"ERC721: transfer of token that is not own\"\r\n        );\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try\r\n                IERC721Receiver(to).onERC721Received(\r\n                    _msgSender(),\r\n                    from,\r\n                    tokenId,\r\n                    _data\r\n                )\r\n            returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\r\n                        \"ERC721: transfer to non ERC721Receiver implementer\"\r\n                    );\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File contracts/core/NFTeacket.sol\r\npragma solidity ^0.8.4;\r\n\r\ncontract NFTeacket is ERC721 {\r\n    enum TicketType {\r\n        Maker,\r\n        Taker\r\n    }\r\n\r\n    enum OptionType {\r\n        CallBuy,\r\n        CallSale,\r\n        PutBuy,\r\n        PutSale\r\n    }\r\n\r\n    struct OptionDataMaker {\r\n        uint256 price; // The price of the option\r\n        uint256 strike; // The strike price of the option\r\n        uint256 settlementTimestamp; // The maturity timestamp of the option\r\n        uint256 takerTicketId; // The taker ticket ID of this order\r\n        uint256 nftId; // The nft token ID of the option\r\n        address nftContract; // The smart contract address of the nft\r\n        OptionType optionType; // Type of the option\r\n    }\r\n\r\n    struct OptionDataTaker {\r\n        uint256 makerTicketId;\r\n    }\r\n\r\n    /// @dev The NFTea contract\r\n    address public nftea;\r\n\r\n    /// @dev Token ids to ticket type\r\n    mapping(uint256 => TicketType) _ticketIdToType;\r\n\r\n    /// @dev Token ids to OptionDataMaker\r\n    mapping(uint256 => OptionDataMaker) private _ticketIdToOptionDataMaker;\r\n\r\n    /// @dev Token ids to OptionDataTaker\r\n    mapping(uint256 => OptionDataTaker) private _ticketIdToOptionDataTaker;\r\n\r\n    /// @dev The current nft counter to get next available id\r\n    uint256 private _counter;\r\n\r\n    modifier onylyFromNFTea() {\r\n        require(msg.sender == nftea, \"NFTeacket: not called from nftea\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _nftea) ERC721(\"NFTeacket\", \"NBOT\") {\r\n        nftea = _nftea;\r\n    }\r\n\r\n    /// @notice Mint a maker ticket NFT associated with the given option offer\r\n    /// @param to adress to mint a ticket to\r\n    /// @param data option data to store in the ticket\r\n    function mintMakerTicket(address to, OptionDataMaker memory data)\r\n        external\r\n        onylyFromNFTea\r\n        returns (uint256 ticketId)\r\n    {\r\n        ticketId = _counter++;\r\n        _safeMint(to, ticketId);\r\n        _ticketIdToOptionDataMaker[ticketId] = data;\r\n        _ticketIdToType[ticketId] = TicketType.Maker;\r\n    }\r\n\r\n    /// @notice Mint a taker ticket NFT associated with the given option offer\r\n    /// @param to adress to mint a ticket to\r\n    /// @param data option data to store in the ticket\r\n    /// @dev No need to check that the maker icket referenced in the data params\r\n    /// actually exists since it's already ensure in the NFTea caller contract\r\n    function mintTakerTicket(address to, OptionDataTaker memory data)\r\n        public\r\n        onylyFromNFTea\r\n        returns (uint256 ticketId)\r\n    {\r\n        ticketId = _counter++;\r\n        _safeMint(to, ticketId);\r\n        _ticketIdToOptionDataTaker[ticketId] = data;\r\n        _ticketIdToType[ticketId] = TicketType.Taker;\r\n    }\r\n\r\n    /// @notice Return if the ticker is a Maker or a Taker\r\n    /// @param ticketId the ticket id\r\n    function ticketIdToType(uint256 ticketId) public view returns (TicketType) {\r\n        require(_exists(ticketId), \"NFTeacket: ticket does not exist\");\r\n        return _ticketIdToType[ticketId];\r\n    }\r\n\r\n    /// @notice return the maker option data associated with the ticket\r\n    /// @param ticketId the ticket id\r\n    function ticketIdToOptionDataMaker(uint256 ticketId)\r\n        external\r\n        view\r\n        returns (OptionDataMaker memory)\r\n    {\r\n        require(\r\n            ticketIdToType(ticketId) == TicketType.Maker,\r\n            \"NFTeacket: Not a maker ticket\"\r\n        );\r\n        return _ticketIdToOptionDataMaker[ticketId];\r\n    }\r\n\r\n    /// @notice return the taker option data associated with the ticket\r\n    /// @param ticketId the ticket id\r\n    function ticketIdToOptionDataTaker(uint256 ticketId)\r\n        external\r\n        view\r\n        returns (OptionDataTaker memory)\r\n    {\r\n        require(\r\n            ticketIdToType(ticketId) == TicketType.Taker,\r\n            \"NFTeacket: Not a taker ticket\"\r\n        );\r\n        return _ticketIdToOptionDataTaker[ticketId];\r\n    }\r\n\r\n    /// @notice Link the maker ticket with the tacker ticket\r\n    /// @param makerTicketId the maker ticket id\r\n    /// @param takerTicketId the taker ticket id\r\n    /// @dev No need to check that the maker and taker tickets exists since it's already ensure\r\n    /// on the NFTea caller contract\r\n    function linkMakerToTakerTicket(\r\n        uint256 makerTicketId,\r\n        uint256 takerTicketId\r\n    ) external onylyFromNFTea {\r\n        _ticketIdToOptionDataMaker[makerTicketId].takerTicketId = takerTicketId;\r\n    }\r\n\r\n    /// @notice Burn the ticket\r\n    /// @param ticketId the ticket id\r\n    function burnTicket(uint256 ticketId) external onylyFromNFTea {\r\n        this.ticketIdToType(ticketId) == TicketType.Maker\r\n            ? delete _ticketIdToOptionDataMaker[ticketId]\r\n            : delete _ticketIdToOptionDataTaker[ticketId];\r\n\r\n        delete _ticketIdToType[ticketId];\r\n\r\n        _burn(ticketId);\r\n    }\r\n}\r\n\r\n// File contracts/core/NFTea.sol\r\npragma solidity ^0.8.4;\r\n\r\ncontract NFTea {\r\n    event OrderCreated(uint256 makerTicketId, NFTeacket.OptionDataMaker data);\r\n    event OrderCancelled(uint256 makerTicketId);\r\n    event OrderFilled(uint256 takerTicketId, NFTeacket.OptionDataTaker data);\r\n    event OptionUsed(uint256 makerTicketId, bool value);\r\n\r\n    address public admin;\r\n    address public nfteacket;\r\n\r\n    uint256 public maxDelayToClaim;\r\n    uint256 public optionFees;\r\n    uint256 public saleFees;\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"NFTea: not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhenNFTeacketSet() {\r\n        require(nfteacket != address(0), \"NFTea: nfteacket not set\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n        optionFees = 3;\r\n        saleFees = 1;\r\n        maxDelayToClaim = 1 days;\r\n    }\r\n\r\n    function changeAdmin(address _admin) external onlyAdmin {\r\n        admin = _admin;\r\n    }\r\n\r\n    function setMaxDelayToClaim(uint256 delay) external onlyAdmin {\r\n        maxDelayToClaim = delay;\r\n    }\r\n\r\n    function setOptionFees(uint256 fee) external onlyAdmin {\r\n        require(fee < 100, \"NFTea: incorret fee value\");\r\n        optionFees = fee;\r\n    }\r\n\r\n    function setSaleFees(uint256 fee) external onlyAdmin {\r\n        require(fee < 100, \"NFTea: incorret fee value\");\r\n        saleFees = fee;\r\n    }\r\n\r\n    function collectFees() external onlyAdmin {\r\n        _transferEth(msg.sender, address(this).balance);\r\n    }\r\n\r\n    function setNFTeacket(address _nfteacket) external onlyAdmin {\r\n        nfteacket = _nfteacket;\r\n    }\r\n\r\n    /// @notice Create an option order for a given NFT\r\n    /// @param optionPrice the price of the option\r\n    /// @param strikePrice the strike price of the option\r\n    /// @param settlementTimestamp the option maturity timestamp\r\n    /// @param nftId the token ID of the NFT relevant of this order\r\n    /// @param nftContract the address of the NFT contract\r\n    /// @param optionType the type of the option (CallBuy, CallSale, PutBuy or PutSale)\r\n    function makeOrder(\r\n        uint256 optionPrice,\r\n        uint256 strikePrice,\r\n        uint256 settlementTimestamp,\r\n        uint256 nftId,\r\n        address nftContract,\r\n        NFTeacket.OptionType optionType\r\n    ) external payable onlyWhenNFTeacketSet {\r\n        require(\r\n            settlementTimestamp > block.timestamp,\r\n            \"NFTea: Incorrect timestamp\"\r\n        );\r\n\r\n        if (optionType == NFTeacket.OptionType.CallBuy) {\r\n            _requireEthSent(optionPrice);\r\n        } else if (optionType == NFTeacket.OptionType.CallSale) {\r\n            _requireEthSent(0);\r\n            _lockNft(nftId, nftContract);\r\n        } else if (optionType == NFTeacket.OptionType.PutBuy) {\r\n            _requireEthSent(optionPrice);\r\n        } else {\r\n            // OptionType.Putsale\r\n            _requireEthSent(strikePrice);\r\n        }\r\n\r\n        NFTeacket.OptionDataMaker memory data = NFTeacket.OptionDataMaker({\r\n            price: optionPrice,\r\n            strike: strikePrice,\r\n            settlementTimestamp: settlementTimestamp,\r\n            nftId: nftId,\r\n            nftContract: nftContract,\r\n            takerTicketId: 0,\r\n            optionType: optionType\r\n        });\r\n\r\n        uint256 makerTicketId = NFTeacket(nfteacket).mintMakerTicket(\r\n            msg.sender,\r\n            data\r\n        );\r\n\r\n        emit OrderCreated(makerTicketId, data);\r\n    }\r\n\r\n    /// @notice Cancel a non filled order\r\n    /// @param makerTicketId the ticket ID associated with the order\r\n    function cancelOrder(uint256 makerTicketId) external onlyWhenNFTeacketSet {\r\n        NFTeacket _nfteacket = NFTeacket(nfteacket);\r\n\r\n        // Check the seender is the maker\r\n        _requireTicketOwner(msg.sender, makerTicketId);\r\n\r\n        NFTeacket.OptionDataMaker memory optionData = _nfteacket\r\n            .ticketIdToOptionDataMaker(makerTicketId);\r\n\r\n        require(optionData.takerTicketId == 0, \"NFTea: Order already filled\");\r\n\r\n        if (optionData.optionType == NFTeacket.OptionType.CallBuy) {\r\n            _transferEth(msg.sender, optionData.price);\r\n        } else if (optionData.optionType == NFTeacket.OptionType.CallSale) {\r\n            _transferNft(\r\n                address(this),\r\n                msg.sender,\r\n                optionData.nftId,\r\n                optionData.nftContract\r\n            );\r\n        } else if (optionData.optionType == NFTeacket.OptionType.PutBuy) {\r\n            _transferEth(msg.sender, optionData.price);\r\n        } else {\r\n            // OptionType.Putsale\r\n            _transferEth(msg.sender, optionData.strike);\r\n        }\r\n\r\n        _nfteacket.burnTicket(makerTicketId);\r\n\r\n        emit OrderCancelled(makerTicketId);\r\n    }\r\n\r\n    /// @notice Fill a given option order\r\n    /// @param makerTicketId the corresponding order identified by its ticket ID\r\n    function fillOrder(uint256 makerTicketId)\r\n        external\r\n        payable\r\n        onlyWhenNFTeacketSet\r\n    {\r\n        NFTeacket _nfteacket = NFTeacket(nfteacket);\r\n\r\n        NFTeacket.OptionDataMaker memory optionData = _nfteacket\r\n            .ticketIdToOptionDataMaker(makerTicketId);\r\n\r\n        uint256 optionPriceSubFees = (optionData.price * (100 - optionFees)) /\r\n            100;\r\n\r\n        require(\r\n            block.timestamp < optionData.settlementTimestamp,\r\n            \"NFTea: Obsolete order\"\r\n        );\r\n\r\n        require(optionData.takerTicketId == 0, \"NFTea: Order already filled\");\r\n\r\n        if (optionData.optionType == NFTeacket.OptionType.CallBuy) {\r\n            _requireEthSent(0);\r\n            _lockNft(optionData.nftId, optionData.nftContract);\r\n\r\n            // Pay the taker for selling the call to the maker\r\n            _transferEth(msg.sender, optionPriceSubFees);\r\n        } else if (optionData.optionType == NFTeacket.OptionType.CallSale) {\r\n            _requireEthSent(optionData.price);\r\n\r\n            // Pay the maker for selling the call to the taker\r\n            address maker = _nfteacket.ownerOf(makerTicketId);\r\n            _transferEth(maker, optionPriceSubFees);\r\n        } else if (optionData.optionType == NFTeacket.OptionType.PutBuy) {\r\n            _requireEthSent(optionData.strike);\r\n\r\n            // Pay the taker for selling the put to the maker\r\n            _transferEth(msg.sender, optionPriceSubFees);\r\n        } else {\r\n            // OptionType.Putsale\r\n            _requireEthSent(optionData.price);\r\n\r\n            // Pay the maker for selling the put to the taker\r\n            address maker = _nfteacket.ownerOf(makerTicketId);\r\n            _transferEth(maker, optionPriceSubFees);\r\n        }\r\n\r\n        NFTeacket.OptionDataTaker memory data = NFTeacket.OptionDataTaker({\r\n            makerTicketId: makerTicketId\r\n        });\r\n\r\n        uint256 takerTicketId = _nfteacket.mintTakerTicket(msg.sender, data);\r\n\r\n        _nfteacket.linkMakerToTakerTicket(makerTicketId, takerTicketId);\r\n\r\n        emit OrderFilled(takerTicketId, data);\r\n    }\r\n\r\n    /// @notice Allow a buyer to use his right to either buy or sale at the registered strike price\r\n    /// @param ticketId The buyer ticket\r\n    function useBuyerRightAtMaturity(uint256 ticketId)\r\n        external\r\n        payable\r\n        onlyWhenNFTeacketSet\r\n    {\r\n        NFTeacket _nfteacket = NFTeacket(nfteacket);\r\n\r\n        _requireTicketOwner(msg.sender, ticketId);\r\n\r\n        NFTeacket.OptionDataMaker memory makerOptionData;\r\n        uint256 makerTicketId;\r\n        address ethReceiver;\r\n        address nftReceiver;\r\n        address nftSender;\r\n\r\n        // Get the ticket type\r\n        NFTeacket.TicketType ticketType = _nfteacket.ticketIdToType(ticketId);\r\n\r\n        // If buyer is the maker\r\n        if (ticketType == NFTeacket.TicketType.Maker) {\r\n            makerOptionData = _nfteacket.ticketIdToOptionDataMaker(ticketId);\r\n\r\n            makerTicketId = ticketId;\r\n\r\n            address taker = _nfteacket.ownerOf(makerOptionData.takerTicketId);\r\n\r\n            if (makerOptionData.optionType == NFTeacket.OptionType.CallBuy) {\r\n                // When using call buy right, msg.value must be the strike price\r\n                _requireEthSent(makerOptionData.strike);\r\n\r\n                ethReceiver = taker;\r\n                nftSender = address(this);\r\n                nftReceiver = msg.sender;\r\n            } else if (\r\n                makerOptionData.optionType == NFTeacket.OptionType.PutBuy\r\n            ) {\r\n                // When using put buy right, msg.value must be 0\r\n                _requireEthSent(0);\r\n\r\n                ethReceiver = msg.sender;\r\n                nftSender = msg.sender;\r\n                nftReceiver = taker;\r\n            } else {\r\n                revert(\"NFTea: Not a buyer\");\r\n            }\r\n        } else {\r\n            // If buyer is the taker\r\n            NFTeacket.OptionDataTaker memory takerOptionData = _nfteacket\r\n                .ticketIdToOptionDataTaker(ticketId);\r\n\r\n            makerOptionData = _nfteacket.ticketIdToOptionDataMaker(\r\n                takerOptionData.makerTicketId\r\n            );\r\n\r\n            makerTicketId = takerOptionData.makerTicketId;\r\n\r\n            address maker = _nfteacket.ownerOf(takerOptionData.makerTicketId);\r\n\r\n            if (makerOptionData.optionType == NFTeacket.OptionType.CallSale) {\r\n                // When using call buy right, msg.value must be the strike price\r\n                _requireEthSent(makerOptionData.strike);\r\n\r\n                ethReceiver = maker;\r\n                nftSender = address(this);\r\n                nftReceiver = msg.sender;\r\n            } else if (\r\n                makerOptionData.optionType == NFTeacket.OptionType.PutSale\r\n            ) {\r\n                // When using put buy right, msg.value must be 0\r\n                _requireEthSent(0);\r\n\r\n                ethReceiver = msg.sender;\r\n                nftSender = msg.sender;\r\n                nftReceiver = maker;\r\n            } else {\r\n                revert(\"NFTea: Not a buyer\");\r\n            }\r\n        }\r\n\r\n        // Ensure we are at timestamp such that settlement <= timestamp < settlement + maxDelayToClaim\r\n        require(\r\n            block.timestamp >= makerOptionData.settlementTimestamp &&\r\n                block.timestamp <\r\n                makerOptionData.settlementTimestamp + maxDelayToClaim,\r\n            \"NFTea: Can't use buyer right\"\r\n        );\r\n\r\n        uint256 strikePriceSubFees = (makerOptionData.strike *\r\n            (100 - saleFees)) / 100;\r\n\r\n        // Swap NFT with ETH\r\n        _transferEth(ethReceiver, strikePriceSubFees);\r\n        _transferNft(\r\n            nftSender,\r\n            nftReceiver,\r\n            makerOptionData.nftId,\r\n            makerOptionData.nftContract\r\n        );\r\n\r\n        // Burn maker and taker tickets\r\n        _nfteacket.burnTicket(makerTicketId);\r\n        _nfteacket.burnTicket(makerOptionData.takerTicketId);\r\n\r\n        emit OptionUsed(makerTicketId, true);\r\n    }\r\n\r\n    /// @notice Allow a seller to withdraw his locked collateral at maturity\r\n    /// @param ticketId The seller ticket\r\n    function withdrawLockedCollateralAtMaturity(uint256 ticketId)\r\n        external\r\n        onlyWhenNFTeacketSet\r\n    {\r\n        NFTeacket _nfteacket = NFTeacket(nfteacket);\r\n\r\n        _requireTicketOwner(msg.sender, ticketId);\r\n\r\n        NFTeacket.TicketType ticketType = _nfteacket.ticketIdToType(ticketId);\r\n\r\n        NFTeacket.OptionDataMaker memory makerOptionData;\r\n        uint256 makerTicketId;\r\n        bool withdrawSucceed;\r\n\r\n        // If seller is the maker\r\n        if (ticketType == NFTeacket.TicketType.Maker) {\r\n            makerOptionData = _nfteacket.ticketIdToOptionDataMaker(ticketId);\r\n            makerTicketId = ticketId;\r\n\r\n            // Ensure we are at timestamp >= settlement + maxDelayToClaim\r\n            require(\r\n                block.timestamp >=\r\n                    makerOptionData.settlementTimestamp + maxDelayToClaim,\r\n                \"NFTea: Can't withdraw collateral now\"\r\n            );\r\n\r\n            if (makerOptionData.optionType == NFTeacket.OptionType.CallSale) {\r\n                _transferNft(\r\n                    address(this),\r\n                    msg.sender,\r\n                    makerOptionData.nftId,\r\n                    makerOptionData.nftContract\r\n                );\r\n                withdrawSucceed = true;\r\n            } else if (\r\n                makerOptionData.optionType == NFTeacket.OptionType.PutSale\r\n            ) {\r\n                _transferEth(msg.sender, makerOptionData.strike);\r\n                withdrawSucceed = true;\r\n            } else {\r\n                withdrawSucceed = false;\r\n            }\r\n        } else {\r\n            // If seller is the taker\r\n            NFTeacket.OptionDataTaker memory takerOptionData = _nfteacket\r\n                .ticketIdToOptionDataTaker(ticketId);\r\n\r\n            makerOptionData = _nfteacket.ticketIdToOptionDataMaker(\r\n                takerOptionData.makerTicketId\r\n            );\r\n\r\n            makerTicketId = takerOptionData.makerTicketId;\r\n\r\n            // Ensure we are at timestamp >= settlement + maxDelayToClaim\r\n            require(\r\n                block.timestamp >=\r\n                    makerOptionData.settlementTimestamp + maxDelayToClaim,\r\n                \"NFTea: Can't withdraw collateral now\"\r\n            );\r\n\r\n            if (makerOptionData.optionType == NFTeacket.OptionType.CallBuy) {\r\n                _transferNft(\r\n                    address(this),\r\n                    msg.sender,\r\n                    makerOptionData.nftId,\r\n                    makerOptionData.nftContract\r\n                );\r\n                withdrawSucceed = true;\r\n            } else if (\r\n                makerOptionData.optionType == NFTeacket.OptionType.PutBuy\r\n            ) {\r\n                _transferEth(msg.sender, makerOptionData.strike);\r\n                withdrawSucceed = true;\r\n            } else {\r\n                withdrawSucceed = false;\r\n            }\r\n        }\r\n\r\n        if (withdrawSucceed) {\r\n            // Burn maker and taker tickets\r\n            _nfteacket.burnTicket(makerTicketId);\r\n            _nfteacket.burnTicket(makerOptionData.takerTicketId);\r\n\r\n            emit OptionUsed(makerTicketId, false);\r\n        } else {\r\n            revert(\"NFTea: Not a seller\");\r\n        }\r\n    }\r\n\r\n    /// @param spender the address that claims to be the ticket owner\r\n    /// @param ticketId the option ticket id\r\n    function _requireTicketOwner(address spender, uint256 ticketId)\r\n        private\r\n        view\r\n    {\r\n        address owner = NFTeacket(nfteacket).ownerOf(ticketId);\r\n        require(owner == spender, \"NFTea: Not ticket owner\");\r\n    }\r\n\r\n    /// @dev ETH needs to be sent if the maker is\r\n    ///  - buying a call : he needs to send the option price\r\n    ///  - buying a put : he needs to send the option price\r\n    ///  - selling a call : he needs to send the strike price\r\n    /// @param amount the amount required to be sent by the trader\r\n    function _requireEthSent(uint256 amount) private view {\r\n        require(msg.value == amount, \"NFTea: Incorrect sent ETH amount\");\r\n    }\r\n\r\n    /// @dev When a trader wants to sell a call, he has to lock his NFT\r\n    /// until maturity\r\n    /// @param nftId the token ID of the NFT to lock\r\n    /// @param nftContractAddress address of the NFT contract\r\n    function _lockNft(uint256 nftId, address nftContractAddress) private {\r\n        IERC721 nftContract = IERC721(nftContractAddress);\r\n        address owner = nftContract.ownerOf(nftId);\r\n\r\n        require(owner == msg.sender, \"NFTea : Not nft owner\");\r\n\r\n        require(\r\n            address(this) == owner ||\r\n                nftContract.getApproved(nftId) == address(this) ||\r\n                nftContract.isApprovedForAll(owner, address(this)),\r\n            \"NFTea : Contract not approved, can't lock nft\"\r\n        );\r\n\r\n        // Lock the nft by transfering it to the contract\r\n        nftContract.transferFrom(msg.sender, address(this), nftId);\r\n    }\r\n\r\n    function _transferNft(\r\n        address from,\r\n        address to,\r\n        uint256 nftId,\r\n        address nft\r\n    ) private {\r\n        IERC721 nftContract = IERC721(nft);\r\n        nftContract.transferFrom(from, to, nftId);\r\n    }\r\n\r\n    /// @dev    Safely transfer amount ethereum to the target\r\n    /// @param to the target wallet to send eth to\r\n    /// @param amount the amount of eth to send\r\n    function _transferEth(address to, uint256 amount) private {\r\n        (bool success, ) = to.call{value: amount}(\"\");\r\n        require(success, \"NFTea: Eth transfer failed\");\r\n    }\r\n}\r\n\r\n// File contracts/test/CustomErc721.sol\r\n\r\n//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.4;\r\n\r\ncontract CustomERC721 is ERC721 {\r\n    uint256 private _counter;\r\n\r\n    constructor() ERC721(\"CustomERC721\", \"NFK\") {}\r\n\r\n    function mint(address to) public {\r\n        uint256 tokenId = _counter++;\r\n        _safeMint(to, tokenId);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"makerTicketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"OptionUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"makerTicketId\",\"type\":\"uint256\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"makerTicketId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settlementTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerTicketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"enum NFTeacket.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct NFTeacket.OptionDataMaker\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"takerTicketId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"makerTicketId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct NFTeacket.OptionDataTaker\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"makerTicketId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"makerTicketId\",\"type\":\"uint256\"}],\"name\":\"fillOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"optionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settlementTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"enum NFTeacket.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"}],\"name\":\"makeOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDelayToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nfteacket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"setMaxDelayToClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nfteacket\",\"type\":\"address\"}],\"name\":\"setNFTeacket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setOptionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setSaleFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"useBuyerRightAtMaturity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"withdrawLockedCollateralAtMaturity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFTea","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6a5b0f75efb6d173934e852ef6f7786c1954ce342bee52bff8e0720dc09fa416"}]}