{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\ninterface IOwnable {\r\n  function policy() external view returns (address);\r\n\r\n  function renounceManagement() external;\r\n\r\n  function pushManagement(address newOwner_) external;\r\n\r\n  function pullManagement() external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n  address internal _owner;\r\n  address internal _newOwner;\r\n\r\n  event OwnershipPushed(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n  event OwnershipPulled(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  constructor() {\r\n    _owner = msg.sender;\r\n    emit OwnershipPushed(address(0), _owner);\r\n  }\r\n\r\n  function policy() public view override returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyPolicy() {\r\n    require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function renounceManagement() public virtual override onlyPolicy {\r\n    emit OwnershipPushed(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function pushManagement(address newOwner_)\r\n    public\r\n    virtual\r\n    override\r\n    onlyPolicy\r\n  {\r\n    require(newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipPushed(_owner, newOwner_);\r\n    _newOwner = newOwner_;\r\n  }\r\n\r\n  function pullManagement() public virtual override {\r\n    require(msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\r\n    emit OwnershipPulled(_owner, _newOwner);\r\n    _owner = _newOwner;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n\r\n  function sqrrt(uint256 a) internal pure returns (uint256 c) {\r\n    if (a > 3) {\r\n      c = a;\r\n      uint256 b = add(div(a, 2), 1);\r\n      while (b < c) {\r\n        c = b;\r\n        b = div(add(div(a, b), b), 2);\r\n      }\r\n    } else if (a != 0) {\r\n      c = 1;\r\n    }\r\n  }\r\n}\r\n\r\nlibrary Address {\r\n  function isContract(address account) internal view returns (bool) {\r\n    uint256 size;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      size := extcodesize(account)\r\n    }\r\n    return size > 0;\r\n  }\r\n\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    (bool success, ) = recipient.call{value: amount}(\"\");\r\n    require(\r\n      success,\r\n      \"Address: unable to send value, recipient may have reverted\"\r\n    );\r\n  }\r\n\r\n  function functionCall(address target, bytes memory data)\r\n    internal\r\n    returns (bytes memory)\r\n  {\r\n    return functionCall(target, data, \"Address: low-level call failed\");\r\n  }\r\n\r\n  function functionCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    return _functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value\r\n  ) internal returns (bytes memory) {\r\n    return\r\n      functionCallWithValue(\r\n        target,\r\n        data,\r\n        value,\r\n        \"Address: low-level call with value failed\"\r\n      );\r\n  }\r\n\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(\r\n      address(this).balance >= value,\r\n      \"Address: insufficient balance for call\"\r\n    );\r\n    require(isContract(target), \"Address: call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  function _functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 weiValue,\r\n    string memory errorMessage\r\n  ) private returns (bytes memory) {\r\n    require(isContract(target), \"Address: call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n      data\r\n    );\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      // Look for revert reason and bubble it up if present\r\n      if (returndata.length > 0) {\r\n        // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n\r\n  function functionStaticCall(address target, bytes memory data)\r\n    internal\r\n    view\r\n    returns (bytes memory)\r\n  {\r\n    return\r\n      functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n  }\r\n\r\n  function functionStaticCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal view returns (bytes memory) {\r\n    require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.staticcall(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  function functionDelegateCall(address target, bytes memory data)\r\n    internal\r\n    returns (bytes memory)\r\n  {\r\n    return\r\n      functionDelegateCall(\r\n        target,\r\n        data,\r\n        \"Address: low-level delegate call failed\"\r\n      );\r\n  }\r\n\r\n  function functionDelegateCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = target.delegatecall(data);\r\n    return _verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  function _verifyCallResult(\r\n    bool success,\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) private pure returns (bytes memory) {\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      if (returndata.length > 0) {\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n\r\n  function addressToString(address _address)\r\n    internal\r\n    pure\r\n    returns (string memory)\r\n  {\r\n    bytes32 _bytes = bytes32(uint256(_address));\r\n    bytes memory HEX = \"0123456789abcdef\";\r\n    bytes memory _addr = new bytes(42);\r\n\r\n    _addr[0] = \"0\";\r\n    _addr[1] = \"x\";\r\n\r\n    for (uint256 i = 0; i < 20; i++) {\r\n      _addr[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n      _addr[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n    }\r\n\r\n    return string(_addr);\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  // TODO comment actual hash value.\r\n  bytes32 private constant ERC20TOKEN_ERC1820_INTERFACE_ID =\r\n    keccak256(\"ERC20Token\");\r\n\r\n  mapping(address => uint256) internal _balances;\r\n\r\n  mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n  uint256 internal _totalSupply;\r\n\r\n  string internal _name;\r\n\r\n  string internal _symbol;\r\n\r\n  uint8 internal _decimals;\r\n\r\n  constructor(\r\n    string memory name_,\r\n    string memory symbol_,\r\n    uint8 decimals_\r\n  ) {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n    _decimals = decimals_;\r\n  }\r\n\r\n  function name() public view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view override returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  function totalSupply() public view override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address account)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return _balances[account];\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount)\r\n    public\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    _transfer(msg.sender, recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount)\r\n    public\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    _approve(msg.sender, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(\r\n      sender,\r\n      msg.sender,\r\n      _allowances[sender][msg.sender].sub(\r\n        amount,\r\n        \"ERC20: transfer amount exceeds allowance\"\r\n      )\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    _approve(\r\n      msg.sender,\r\n      spender,\r\n      _allowances[msg.sender][spender].add(addedValue)\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    _approve(\r\n      msg.sender,\r\n      spender,\r\n      _allowances[msg.sender][spender].sub(\r\n        subtractedValue,\r\n        \"ERC20: decreased allowance below zero\"\r\n      )\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function _transfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n    _balances[sender] = _balances[sender].sub(\r\n      amount,\r\n      \"ERC20: transfer amount exceeds balance\"\r\n    );\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  function _mint(address account_, uint256 ammount_) internal virtual {\r\n    require(account_ != address(0), \"ERC20: mint to the zero address\");\r\n    _beforeTokenTransfer(address(this), account_, ammount_);\r\n    _totalSupply = _totalSupply.add(ammount_);\r\n    _balances[account_] = _balances[account_].add(ammount_);\r\n    emit Transfer(address(this), account_, ammount_);\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n    _beforeTokenTransfer(account, address(0), amount);\r\n\r\n    _balances[account] = _balances[account].sub(\r\n      amount,\r\n      \"ERC20: burn amount exceeds balance\"\r\n    );\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function _beforeTokenTransfer(\r\n    address from_,\r\n    address to_,\r\n    uint256 amount_\r\n  ) internal virtual {}\r\n}\r\n\r\ninterface IERC2612Permit {\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n\r\n  function nonces(address owner) external view returns (uint256);\r\n}\r\n\r\nlibrary Counters {\r\n  using SafeMath for uint256;\r\n\r\n  struct Counter {\r\n    uint256 _value; // default: 0\r\n  }\r\n\r\n  function current(Counter storage counter) internal view returns (uint256) {\r\n    return counter._value;\r\n  }\r\n\r\n  function increment(Counter storage counter) internal {\r\n    counter._value += 1;\r\n  }\r\n\r\n  function decrement(Counter storage counter) internal {\r\n    counter._value = counter._value.sub(1);\r\n  }\r\n}\r\n\r\nabstract contract ERC20Permit is ERC20, IERC2612Permit {\r\n  using Counters for Counters.Counter;\r\n\r\n  mapping(address => Counters.Counter) private _nonces;\r\n\r\n  // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n  bytes32 public constant PERMIT_TYPEHASH =\r\n    0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\r\n  bytes32 public DOMAIN_SEPARATOR;\r\n\r\n  constructor() {\r\n    uint256 chainID;\r\n    assembly {\r\n      chainID := chainid()\r\n    }\r\n\r\n    DOMAIN_SEPARATOR = keccak256(\r\n      abi.encode(\r\n        keccak256(\r\n          \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n        ),\r\n        keccak256(bytes(name())),\r\n        keccak256(bytes(\"1\")), // Version\r\n        chainID,\r\n        address(this)\r\n      )\r\n    );\r\n  }\r\n\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) public virtual override {\r\n    require(block.timestamp <= deadline, \"Permit: expired deadline\");\r\n\r\n    bytes32 hashStruct = keccak256(\r\n      abi.encode(\r\n        PERMIT_TYPEHASH,\r\n        owner,\r\n        spender,\r\n        amount,\r\n        _nonces[owner].current(),\r\n        deadline\r\n      )\r\n    );\r\n\r\n    bytes32 _hash = keccak256(\r\n      abi.encodePacked(uint16(0x1901), DOMAIN_SEPARATOR, hashStruct)\r\n    );\r\n\r\n    address signer = ecrecover(_hash, v, r, s);\r\n    require(\r\n      signer != address(0) && signer == owner,\r\n      \"ZeroSwapPermit: Invalid signature\"\r\n    );\r\n\r\n    _nonces[owner].increment();\r\n    _approve(owner, spender, amount);\r\n  }\r\n\r\n  function nonces(address owner) public view override returns (uint256) {\r\n    return _nonces[owner].current();\r\n  }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(\r\n      token,\r\n      abi.encodeWithSelector(token.transfer.selector, to, value)\r\n    );\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(\r\n      token,\r\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n    );\r\n  }\r\n\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    require(\r\n      (value == 0) || (token.allowance(address(this), spender) == 0),\r\n      \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n    );\r\n    _callOptionalReturn(\r\n      token,\r\n      abi.encodeWithSelector(token.approve.selector, spender, value)\r\n    );\r\n  }\r\n\r\n  function safeIncreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n    _callOptionalReturn(\r\n      token,\r\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n    );\r\n  }\r\n\r\n  function safeDecreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n      value,\r\n      \"SafeERC20: decreased allowance below zero\"\r\n    );\r\n    _callOptionalReturn(\r\n      token,\r\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n    );\r\n  }\r\n\r\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n    bytes memory returndata = address(token).functionCall(\r\n      data,\r\n      \"SafeERC20: low-level call failed\"\r\n    );\r\n    if (returndata.length > 0) {\r\n      // Return data is optional\r\n      // solhint-disable-next-line max-line-length\r\n      require(\r\n        abi.decode(returndata, (bool)),\r\n        \"SafeERC20: ERC20 operation did not succeed\"\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nlibrary FullMath {\r\n  function fullMul(uint256 x, uint256 y)\r\n    private\r\n    pure\r\n    returns (uint256 l, uint256 h)\r\n  {\r\n    uint256 mm = mulmod(x, y, uint256(-1));\r\n    l = x * y;\r\n    h = mm - l;\r\n    if (mm < l) h -= 1;\r\n  }\r\n\r\n  function fullDiv(\r\n    uint256 l,\r\n    uint256 h,\r\n    uint256 d\r\n  ) private pure returns (uint256) {\r\n    uint256 pow2 = d & -d;\r\n    d /= pow2;\r\n    l /= pow2;\r\n    l += h * ((-pow2) / pow2 + 1);\r\n    uint256 r = 1;\r\n    r *= 2 - d * r;\r\n    r *= 2 - d * r;\r\n    r *= 2 - d * r;\r\n    r *= 2 - d * r;\r\n    r *= 2 - d * r;\r\n    r *= 2 - d * r;\r\n    r *= 2 - d * r;\r\n    r *= 2 - d * r;\r\n    return l * r;\r\n  }\r\n\r\n  function mulDiv(\r\n    uint256 x,\r\n    uint256 y,\r\n    uint256 d\r\n  ) internal pure returns (uint256) {\r\n    (uint256 l, uint256 h) = fullMul(x, y);\r\n    uint256 mm = mulmod(x, y, d);\r\n    if (mm > l) h -= 1;\r\n    l -= mm;\r\n    require(h < d, \"FullMath::mulDiv: overflow\");\r\n    return fullDiv(l, h, d);\r\n  }\r\n}\r\n\r\nlibrary FixedPoint {\r\n  struct uq112x112 {\r\n    uint224 _x;\r\n  }\r\n\r\n  struct uq144x112 {\r\n    uint256 _x;\r\n  }\r\n\r\n  uint8 private constant RESOLUTION = 112;\r\n  uint256 private constant Q112 = 0x10000000000000000000000000000;\r\n  uint256 private constant Q224 =\r\n    0x100000000000000000000000000000000000000000000000000000000;\r\n  uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\r\n\r\n  function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n    return uint112(self._x >> RESOLUTION);\r\n  }\r\n\r\n  function decode112with18(uq112x112 memory self)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    return uint256(self._x) / 5192296858534827;\r\n  }\r\n\r\n  function fraction(uint256 numerator, uint256 denominator)\r\n    internal\r\n    pure\r\n    returns (uq112x112 memory)\r\n  {\r\n    require(denominator > 0, \"FixedPoint::fraction: division by zero\");\r\n    if (numerator == 0) return FixedPoint.uq112x112(0);\r\n\r\n    if (numerator <= uint144(-1)) {\r\n      uint256 result = (numerator << RESOLUTION) / denominator;\r\n      require(result <= uint224(-1), \"FixedPoint::fraction: overflow\");\r\n      return uq112x112(uint224(result));\r\n    } else {\r\n      uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\r\n      require(result <= uint224(-1), \"FixedPoint::fraction: overflow\");\r\n      return uq112x112(uint224(result));\r\n    }\r\n  }\r\n}\r\n\r\ninterface ITreasury {\r\n  function deposit(\r\n    uint256 _amount,\r\n    address _token,\r\n    uint256 _profit\r\n  ) external returns (bool);\r\n\r\n  function updateReserve(address _token, uint256 _amount) external;\r\n\r\n  function valueOfToken(address _token, uint256 _amount)\r\n    external\r\n    view\r\n    returns (uint256 value_);\r\n\r\n  function mintRewards(address _recipient, uint256 _amount) external;\r\n}\r\n\r\ninterface IStaking {\r\n  function stake(uint256 _amount, address _recipient) external returns (bool);\r\n}\r\n\r\ninterface IStakingHelper {\r\n  function stake(uint256 _amount, address _recipient) external;\r\n}\r\n\r\ncontract LpBondDepositoryOlympus is Ownable {\r\n  using FixedPoint for *;\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n  /* ======== EVENTS ======== */\r\n\r\n  event BondCreated(\r\n    uint256 deposit,\r\n    uint256 indexed payout,\r\n    uint256 indexed expires,\r\n    uint256 indexed priceInUSD\r\n  );\r\n  event BondRedeemed(\r\n    address indexed recipient,\r\n    uint256 payout,\r\n    uint256 remaining\r\n  );\r\n  event BondPriceChanged(\r\n    uint256 indexed priceInUSD,\r\n    uint256 indexed internalPrice,\r\n    uint256 indexed debtRatio\r\n  );\r\n  event ControlVariableAdjustment(\r\n    uint256 initialBCV,\r\n    uint256 newBCV,\r\n    uint256 adjustment,\r\n    bool addition\r\n  );\r\n\r\n  /* ======== STATE VARIABLES ======== */\r\n\r\n  address public immutable LOBI; // token given as payment for bond\r\n  address public immutable principle; // token used to create bond\r\n  address public immutable treasury; // mints LOBI when receives principle\r\n  address public DAO; // receives profit share from bond\r\n  address public partnerDAO; // receives profit share from bond\r\n\r\n  address public staking; // to auto-stake payout\r\n  address public stakingHelper; // to stake and claim if no staking warmup\r\n  bool public useHelper;\r\n\r\n  Terms public terms; // stores terms for new bonds\r\n  Adjust public adjustment; // stores adjustment to BCV data\r\n\r\n  mapping(address => Bond) public bondInfo; // stores bond information for depositors\r\n\r\n  uint256 public totalDebt; // total value of outstanding bonds; used for pricing\r\n  uint256 public lastDecay; // reference block for debt decay\r\n\r\n  /* ======== STRUCTS ======== */\r\n\r\n  // Info for creating new bonds\r\n  struct Terms {\r\n    uint256 controlVariable; // scaling variable for price\r\n    uint256 vestingTerm; // in blocks\r\n    uint256 minimumPrice; // vs principle value. 4 decimals (1500 = 0.15)\r\n    uint256 maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\r\n    uint256 maxDebt; // 9 decimal debt ratio, max % total supply created as debt\r\n    uint256 fee; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\r\n    uint256 feePartner; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\r\n  }\r\n\r\n  // Info for bond holder\r\n  struct Bond {\r\n    uint256 payout; // LOBI remaining to be paid\r\n    uint256 vesting; // Blocks left to vest\r\n    uint256 lastBlock; // Last interaction\r\n    uint256 pricePaid; // In DAI, for front end viewing\r\n  }\r\n\r\n  // Info for incremental adjustments to control variable\r\n  struct Adjust {\r\n    bool add; // addition or subtraction\r\n    uint256 rate; // increment\r\n    uint256 target; // BCV when adjustment finished\r\n    uint256 buffer; // minimum length (in blocks) between adjustments\r\n    uint256 lastBlock; // block when last adjustment made\r\n  }\r\n\r\n  /* ======== INITIALIZATION ======== */\r\n\r\n  constructor(\r\n    address _LOBI,\r\n    address _principle,\r\n    address _treasury,\r\n    address _DAO,\r\n    address _partnerDAO\r\n  ) {\r\n    require(_LOBI != address(0));\r\n    LOBI = _LOBI;\r\n    require(_principle != address(0));\r\n    principle = _principle;\r\n    require(_treasury != address(0));\r\n    treasury = _treasury;\r\n    require(_DAO != address(0));\r\n    DAO = _DAO;\r\n    require(_partnerDAO != address(0));\r\n    partnerDAO = _partnerDAO;\r\n  }\r\n\r\n  /**\r\n   *  @notice initializes bond parameters\r\n   *  @param _controlVariable uint\r\n   *  @param _vestingTerm uint\r\n   *  @param _minimumPrice uint\r\n   *  @param _maxPayout uint\r\n   *  @param _maxDebt uint\r\n   *  @param _initialDebt uint\r\n   */\r\n  function initializeBondTerms(\r\n    uint256 _controlVariable,\r\n    uint256 _vestingTerm,\r\n    uint256 _minimumPrice,\r\n    uint256 _maxPayout,\r\n    uint256 _maxDebt,\r\n    uint256 _initialDebt,\r\n    uint256 _fee,\r\n    uint256 _feePartner\r\n  ) external onlyPolicy {\r\n    terms = Terms({\r\n      controlVariable: _controlVariable,\r\n      vestingTerm: _vestingTerm,\r\n      minimumPrice: _minimumPrice,\r\n      maxPayout: _maxPayout,\r\n      maxDebt: _maxDebt,\r\n      fee: _fee,\r\n      feePartner: _feePartner\r\n    });\r\n    totalDebt = _initialDebt;\r\n    lastDecay = block.number;\r\n  }\r\n\r\n  /* ======== POLICY FUNCTIONS ======== */\r\n\r\n  enum PARAMETER {\r\n    VESTING,\r\n    PAYOUT,\r\n    DEBT,\r\n    FEE,\r\n    FEEPARTNER\r\n  }\r\n\r\n  /**\r\n   *  @notice set parameters for new bonds\r\n   *  @param _parameter PARAMETER\r\n   *  @param _input uint\r\n   */\r\n  function setBondTerms(PARAMETER _parameter, uint256 _input)\r\n    external\r\n    onlyPolicy\r\n  {\r\n    if (_parameter == PARAMETER.VESTING) {\r\n      // 0\r\n      require(_input >= 10000, \"Vesting must be longer than 36 hours\");\r\n      terms.vestingTerm = _input;\r\n    } else if (_parameter == PARAMETER.PAYOUT) {\r\n      // 1\r\n      require(_input <= 1000, \"Payout cannot be above 1 percent\");\r\n      terms.maxPayout = _input;\r\n    } else if (_parameter == PARAMETER.DEBT) {\r\n      // 2\r\n      terms.maxDebt = _input;\r\n    } else if (_parameter == PARAMETER.FEE) {\r\n      // 3\r\n      terms.fee = _input;\r\n    } else if (_parameter == PARAMETER.FEEPARTNER) {\r\n      // 3\r\n      terms.feePartner = _input;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  @notice set control variable adjustment\r\n   *  @param _addition bool\r\n   *  @param _increment uint\r\n   *  @param _target uint\r\n   *  @param _buffer uint\r\n   */\r\n  function setAdjustment(\r\n    bool _addition,\r\n    uint256 _increment,\r\n    uint256 _target,\r\n    uint256 _buffer\r\n  ) external onlyPolicy {\r\n    require(\r\n      _increment <= terms.controlVariable.mul(25).div(1000),\r\n      \"Increment too large\"\r\n    );\r\n\r\n    adjustment = Adjust({\r\n      add: _addition,\r\n      rate: _increment,\r\n      target: _target,\r\n      buffer: _buffer,\r\n      lastBlock: block.number\r\n    });\r\n  }\r\n\r\n  /**\r\n   *  @notice set contract for auto stake\r\n   *  @param _staking address\r\n   *  @param _helper bool\r\n   */\r\n  function setStaking(address _staking, bool _helper) external onlyPolicy {\r\n    require(_staking != address(0));\r\n    if (_helper) {\r\n      useHelper = true;\r\n      stakingHelper = _staking;\r\n    } else {\r\n      useHelper = false;\r\n      staking = _staking;\r\n    }\r\n  }\r\n\r\n  /* ======== USER FUNCTIONS ======== */\r\n\r\n  /**\r\n   *  @notice deposit bond\r\n   *  @param _amount uint\r\n   *  @param _maxPrice uint\r\n   *  @param _depositor address\r\n   *  @return uint\r\n   */\r\n  function deposit(\r\n    uint256 _amount,\r\n    uint256 _maxPrice,\r\n    address _depositor\r\n  ) external returns (uint256) {\r\n    require(_depositor != address(0), \"Invalid address\");\r\n\r\n    decayDebt();\r\n    require(totalDebt <= terms.maxDebt, \"Max capacity reached\");\r\n\r\n    uint256 priceInUSD = _bondPrice();\r\n    uint256 nativePrice = _bondPrice();\r\n\r\n    require(_maxPrice >= nativePrice, \"Slippage limit: more than max price\"); // slippage protection\r\n\r\n    uint256 value = ITreasury(treasury).valueOfToken(principle, _amount);\r\n    uint256 payout = payoutFor(value); // payout to bonder is computed\r\n\r\n    //require(payout >= 10000000, \"Bond too small\"); // must be > 0.01 LOBI ( underflow protection )\r\n    require(payout >= 3000000000000, \"Bond too small\"); // must be > 0.01 LOBI ( underflow protection )\r\n    require(payout <= maxPayout(), \"Bond too large\"); // size protection because there is no slippage\r\n\r\n    // profits are calculated\r\n    uint256 fee = payout.mul(terms.fee).div(10000);\r\n\r\n    /**\r\n            asset carries risk and is not minted against\r\n            asset transfered to treasury and rewards minted as payout\r\n         */\r\n    IERC20(principle).safeTransferFrom(msg.sender, treasury, _amount);\r\n\r\n    ITreasury(treasury).updateReserve(principle, value);\r\n    ITreasury(treasury).mintRewards(address(this), payout.add(fee));\r\n\r\n    if (fee != 0) {\r\n      IERC20(LOBI).safeTransfer(DAO, fee);\r\n    }\r\n\r\n    // total debt is increased\r\n    totalDebt = totalDebt.add(value);\r\n\r\n    // depositor info is stored\r\n    bondInfo[_depositor] = Bond({\r\n      payout: bondInfo[_depositor].payout.add(payout),\r\n      vesting: terms.vestingTerm,\r\n      lastBlock: block.number,\r\n      pricePaid: priceInUSD\r\n    });\r\n\r\n    // indexed events are emitted\r\n    emit BondCreated(\r\n      _amount,\r\n      payout,\r\n      block.number.add(terms.vestingTerm),\r\n      priceInUSD\r\n    );\r\n    emit BondPriceChanged(_bondPrice(), _bondPrice(), debtRatio());\r\n\r\n    adjust(); // control variable is adjusted\r\n    return payout;\r\n  }\r\n\r\n  /**\r\n   *  @notice redeem bond for user\r\n   *  @param _recipient address\r\n   *  @param _stake bool\r\n   *  @return uint\r\n   */\r\n  function redeem(address _recipient, bool _stake) external returns (uint256) {\r\n    Bond memory info = bondInfo[_recipient];\r\n    uint256 percentVested = percentVestedFor(_recipient); // (blocks since last interaction / vesting term remaining)\r\n\r\n    if (percentVested >= 10000) {\r\n      // if fully vested\r\n      delete bondInfo[_recipient]; // delete user info\r\n      emit BondRedeemed(_recipient, info.payout, 0); // emit bond data\r\n      return stakeOrSend(_recipient, _stake, info.payout); // pay user everything due\r\n    } else {\r\n      // if unfinished\r\n      // calculate payout vested\r\n      uint256 payout = info.payout.mul(percentVested).div(10000);\r\n\r\n      // store updated deposit info\r\n      bondInfo[_recipient] = Bond({\r\n        payout: info.payout.sub(payout),\r\n        vesting: info.vesting.sub(block.number.sub(info.lastBlock)),\r\n        lastBlock: block.number,\r\n        pricePaid: info.pricePaid\r\n      });\r\n\r\n      emit BondRedeemed(_recipient, payout, bondInfo[_recipient].payout);\r\n      return stakeOrSend(_recipient, _stake, payout);\r\n    }\r\n  }\r\n\r\n  /* ======== INTERNAL HELPER FUNCTIONS ======== */\r\n\r\n  /**\r\n   *  @notice allow user to stake payout automatically\r\n   *  @param _stake bool\r\n   *  @param _amount uint\r\n   *  @return uint\r\n   */\r\n  function stakeOrSend(\r\n    address _recipient,\r\n    bool _stake,\r\n    uint256 _amount\r\n  ) internal returns (uint256) {\r\n    if (!_stake) {\r\n      // if user does not want to stake\r\n      IERC20(LOBI).transfer(_recipient, _amount); // send payout\r\n    } else {\r\n      // if user wants to stake\r\n      if (useHelper) {\r\n        // use if staking warmup is 0\r\n        IERC20(LOBI).approve(stakingHelper, _amount);\r\n        IStakingHelper(stakingHelper).stake(_amount, _recipient);\r\n      } else {\r\n        IERC20(LOBI).approve(staking, _amount);\r\n        IStaking(staking).stake(_amount, _recipient);\r\n      }\r\n    }\r\n    return _amount;\r\n  }\r\n\r\n  /**\r\n   *  @notice makes incremental adjustment to control variable\r\n   */\r\n  function adjust() internal {\r\n    uint256 blockCanAdjust = adjustment.lastBlock.add(adjustment.buffer);\r\n    if (adjustment.rate != 0 && block.number >= blockCanAdjust) {\r\n      uint256 initial = terms.controlVariable;\r\n      if (adjustment.add) {\r\n        terms.controlVariable = terms.controlVariable.add(adjustment.rate);\r\n        if (terms.controlVariable >= adjustment.target) {\r\n          adjustment.rate = 0;\r\n        }\r\n      } else {\r\n        terms.controlVariable = terms.controlVariable.sub(adjustment.rate);\r\n        if (terms.controlVariable <= adjustment.target) {\r\n          adjustment.rate = 0;\r\n        }\r\n      }\r\n      adjustment.lastBlock = block.number;\r\n      emit ControlVariableAdjustment(\r\n        initial,\r\n        terms.controlVariable,\r\n        adjustment.rate,\r\n        adjustment.add\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  @notice reduce total debt\r\n   */\r\n  function decayDebt() internal {\r\n    totalDebt = totalDebt.sub(debtDecay());\r\n    lastDecay = block.number;\r\n  }\r\n\r\n  /* ======== VIEW FUNCTIONS ======== */\r\n\r\n  /**\r\n   *  @notice determine maximum bond size\r\n   *  @return uint\r\n   */\r\n  function maxPayout() public view returns (uint256) {\r\n    return IERC20(LOBI).totalSupply().mul(terms.maxPayout).div(100000);\r\n  }\r\n\r\n  /**\r\n   *  @notice calculate interest due for new bond\r\n   *  @param _value uint\r\n   *  @return uint\r\n   */\r\n  function payoutFor(uint256 _value) public view returns (uint256) {\r\n    return FixedPoint.fraction(_value, bondPrice()).decode112with18().div(1e14);\r\n  }\r\n\r\n  /**\r\n   *  @notice calculate current bond premium\r\n   *  @return price_ uint\r\n   */\r\n  function bondPrice() public view returns (uint256 price_) {\r\n    price_ = terms.controlVariable.mul(debtRatio()).div(1e5);\r\n    if (price_ < terms.minimumPrice) {\r\n      price_ = terms.minimumPrice;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  @notice calculate current bond price and remove floor if above\r\n   *  @return price_ uint\r\n   */\r\n  function _bondPrice() internal returns (uint256 price_) {\r\n    price_ = terms.controlVariable.mul(debtRatio()).div(1e5);\r\n    if (price_ < terms.minimumPrice) {\r\n      price_ = terms.minimumPrice;\r\n    } else if (terms.minimumPrice != 0) {\r\n      terms.minimumPrice = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  @notice calculate current ratio of debt to LOBI supply\r\n   *  @return debtRatio_ uint\r\n   */\r\n  function debtRatio() public view returns (uint256 debtRatio_) {\r\n    uint256 supply = IERC20(LOBI).totalSupply();\r\n    debtRatio_ = FixedPoint\r\n      .fraction(currentDebt().mul(1e9), supply)\r\n      .decode112with18()\r\n      .div(1e18);\r\n  }\r\n\r\n  /**\r\n   *  @notice calculate debt factoring in decay\r\n   *  @return uint\r\n   */\r\n  function currentDebt() public view returns (uint256) {\r\n    return totalDebt.sub(debtDecay());\r\n  }\r\n\r\n  /**\r\n   *  @notice amount to decay total debt by\r\n   *  @return decay_ uint\r\n   */\r\n  function debtDecay() public view returns (uint256 decay_) {\r\n    uint256 blocksSinceLast = block.number.sub(lastDecay);\r\n    decay_ = totalDebt.mul(blocksSinceLast).div(terms.vestingTerm);\r\n    if (decay_ > totalDebt) {\r\n      decay_ = totalDebt;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  @notice calculate how far into vesting a depositor is\r\n   *  @param _depositor address\r\n   *  @return percentVested_ uint\r\n   */\r\n  function percentVestedFor(address _depositor)\r\n    public\r\n    view\r\n    returns (uint256 percentVested_)\r\n  {\r\n    Bond memory bond = bondInfo[_depositor];\r\n    uint256 blocksSinceLast = block.number.sub(bond.lastBlock);\r\n    uint256 vesting = bond.vesting;\r\n\r\n    if (vesting > 0) {\r\n      percentVested_ = blocksSinceLast.mul(10000).div(vesting);\r\n    } else {\r\n      percentVested_ = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  @notice calculate amount of LOBI available for claim by depositor\r\n   *  @param _depositor address\r\n   *  @return pendingPayout_ uint\r\n   */\r\n  function pendingPayoutFor(address _depositor)\r\n    external\r\n    view\r\n    returns (uint256 pendingPayout_)\r\n  {\r\n    uint256 percentVested = percentVestedFor(_depositor);\r\n    uint256 payout = bondInfo[_depositor].payout;\r\n\r\n    if (percentVested >= 10000) {\r\n      pendingPayout_ = payout;\r\n    } else {\r\n      pendingPayout_ = payout.mul(percentVested).div(10000);\r\n    }\r\n  }\r\n\r\n  function setDAOs(address _DAO, address _partnerDAO) external onlyPolicy {\r\n    DAO = _DAO;\r\n    partnerDAO = _partnerDAO;\r\n  }\r\n\r\n  /* ======= AUXILLIARY ======= */\r\n\r\n  /**\r\n   *  @notice allow anyone to send lost tokens (excluding principle or LOBI) to the DAO\r\n   *  @return bool\r\n   */\r\n  function recoverLostToken(address _token) external returns (bool) {\r\n    require(_token != LOBI);\r\n    require(_token != principle);\r\n    IERC20(_token).safeTransfer(DAO, IERC20(_token).balanceOf(address(this)));\r\n    return true;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LOBI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_partnerDAO\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"}],\"name\":\"BondCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"internalPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"name\":\"BondPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"BondRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adjustment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"addition\",\"type\":\"bool\"}],\"name\":\"ControlVariableAdjustment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOBI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adjustment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decay_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtRatio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feePartner\",\"type\":\"uint256\"}],\"name\":\"initializeBondTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"pendingPayoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingPayout_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"percentVestedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentVested_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"principle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverLostToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_addition\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_increment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buffer\",\"type\":\"uint256\"}],\"name\":\"setAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LpBondDepositoryOlympus.PARAMETER\",\"name\":\"_parameter\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"setBondTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_partnerDAO\",\"type\":\"address\"}],\"name\":\"setDAOs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_helper\",\"type\":\"bool\"}],\"name\":\"setStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePartner\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useHelper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LpBondDepositoryOlympus","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000dec41db0c33f3f6f3cb615449c311ba22d418a8d000000000000000000000000193008eaade86658df8237a436261e23e3bcbbaa000000000000000000000000873ad91fa4f2aa0d557c0919ec3f6c9d240cdd05000000000000000000000000de50fb295549eda934d222e7a24d5a8dd132444f000000000000000000000000245cc372c84b3645bf0ffe6538620b04a217988b","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e28590f49414baf62a8d52e0abd57bf522443a19ea2bf12ddd66bc57bebd1451"}]}