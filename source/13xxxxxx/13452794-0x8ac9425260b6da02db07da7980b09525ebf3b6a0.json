{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Borrower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { IwETH } from \\\"./IwETH.sol\\\";\\r\\nimport { IAddressesProvider, ILendingPool, IPriceOracle, DataTypes, IRewardsController } from \\\"./IAave.sol\\\";\\r\\n\\r\\ninterface ILender {\\r\\n\\tfunction wETH() external view returns(address);\\r\\n\\tfunction borrowCoefficient() external view returns (uint256);\\r\\n\\tfunction liquidationCoefficient() external view returns (uint256);\\r\\n\\tfunction liquidationBonusCoefficient() external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract Borrower is Ownable, ReentrancyGuard {\\r\\n\\tusing SafeERC20 for IERC20;\\r\\n\\r\\n\\tuint256 constant public PCT_PRECISION = 1e6;\\r\\n\\r\\n\\tIwETH public wETH;\\r\\n\\tILender public lender;\\r\\n\\tIERC20 public reserve; \\r\\n\\tuint256 public reserveDecimals;\\r\\n\\tIERC20 public aToken;\\r\\n\\r\\n\\tIAddressesProvider public addressProvider;\\r\\n\\tILendingPool public lendingPool;\\r\\n\\tIPriceOracle public priceOracle;\\r\\n\\tuint16 private referralCode;\\r\\n\\tIRewardsController public rewardsController;\\r\\n\\taddress rewardsBeneficiary;\\r\\n\\r\\n\\tuint256 public totalBalance;\\r\\n\\tstruct UserData {\\r\\n\\t\\tuint256 balance; // amount in reserve decimals\\r\\n\\t\\tuint256 debt;\\t// amount in ETH decimals (18)\\r\\n\\t}\\r\\n\\tmapping(address => UserData) private userData;\\r\\n\\r\\n\\tmapping (address => uint256) public feePaid;\\r\\n\\r\\n\\tevent Deposit(address borrower, uint256 amount);\\r\\n\\tevent Withdraw(address borrower, uint256 amount);\\r\\n\\tevent Borrow(address borrower, uint256 amount);\\r\\n\\tevent Repay(address borrower, uint256 amount);\\r\\n\\tevent Liquidate(address borrower, uint256 amountLiqidated, address liquidator);\\r\\n\\r\\n\\tmodifier onlyAmountGreaterThanZero(uint256 amount_) {\\r\\n\\t\\trequire(amount_ != 0, \\\"amount must be greater than 0\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tconstructor(\\r\\n\\t\\taddress lender_,\\r\\n\\t\\taddress reserve_,\\r\\n\\t\\tuint256 reserveDecimals_,\\r\\n\\t\\taddress addressProvider_,\\r\\n\\t\\tuint16 referralCode_, \\r\\n\\t\\taddress rewardsController_,\\r\\n\\t\\taddress rewardsBeneficiary_) \\r\\n\\t{\\r\\n\\t\\tlender = ILender(lender_);\\r\\n\\t\\twETH = IwETH(lender.wETH());\\r\\n\\t\\treserve = IERC20(reserve_);\\r\\n\\t\\treserveDecimals = reserveDecimals_;\\r\\n\\t\\taddressProvider = IAddressesProvider(addressProvider_);\\r\\n\\t\\treferralCode = referralCode_;\\r\\n\\t\\trewardsController = IRewardsController(rewardsController_);\\r\\n\\t\\tupdateLendingPoolAddress();\\r\\n\\t\\tupdateaTokenAddress();\\r\\n\\t\\tupdatePriceOracle();\\r\\n\\t\\tupdateRewardsBeneficiary(rewardsBeneficiary_);\\r\\n\\t}\\r\\n\\r\\n\\t// for wETH withdraw\\r\\n\\treceive() external payable {\\r\\n\\t}\\r\\n\\r\\n\\t/***************************************\\r\\n\\t\\t\\t\\t\\tADMIN\\r\\n\\t****************************************/\\r\\n\\r\\n\\tfunction updateLendingPoolAddress()\\r\\n\\t\\tpublic\\r\\n\\t{\\r\\n\\t\\taddress _lendingPool =addressProvider.getLendingPool();\\r\\n\\t\\trequire(address(lendingPool) != _lendingPool);\\r\\n\\t\\tlendingPool = ILendingPool(_lendingPool);\\r\\n\\t\\treserve.safeApprove(_lendingPool, 0);\\r\\n\\t\\treserve.safeApprove(_lendingPool, type(uint256).max);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateaTokenAddress()\\r\\n\\t\\tpublic\\r\\n\\t{\\r\\n\\t\\tDataTypes.ReserveData memory _reserveData;\\r\\n\\t\\t_reserveData = lendingPool.getReserveData(address(reserve));\\r\\n\\t\\trequire(address(aToken) != _reserveData.aTokenAddress);\\r\\n\\t\\taToken = IERC20(_reserveData.aTokenAddress);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updatePriceOracle()\\r\\n\\t\\tpublic\\r\\n\\t{\\r\\n\\t\\taddress _priceOracle = addressProvider.getPriceOracle();\\r\\n\\t\\trequire(address(priceOracle) != _priceOracle);\\r\\n\\t\\tpriceOracle =  IPriceOracle(_priceOracle);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateRewardsBeneficiary(address rewardsBeneficiary_)\\r\\n\\t\\tpublic\\r\\n\\t\\tonlyOwner\\r\\n\\t{\\r\\n\\t\\trequire(rewardsBeneficiary != rewardsBeneficiary_);\\r\\n\\t\\trewardsBeneficiary = rewardsBeneficiary_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getFee(address lender_, uint256 amount_)\\r\\n\\t\\texternal\\r\\n\\t\\treturns(uint256 feePaid_)\\r\\n\\t{\\r\\n\\t\\trequire(msg.sender == address(lender), \\\"wrong caller\\\");\\r\\n\\t\\trequire(amount_ > feePaid[lender_], \\\"no fee available\\\");\\r\\n\\t\\tfeePaid_ = amount_ - feePaid[lender_];\\t\\t\\r\\n\\t\\trequire(feePaid_ <= aToken.balanceOf(address(this)) - totalBalance, \\\"bad fee amount\\\");\\r\\n\\t\\tfeePaid[lender_] += feePaid_;\\r\\n\\t\\tlendingPool.withdraw(address(reserve), feePaid_, lender_);\\r\\n\\t}\\r\\n\\r\\n\\t/***************************************\\r\\n\\t\\t\\t\\t\\tPRIVATE\\r\\n\\t****************************************/\\r\\n\\r\\n\\tfunction _deposit(uint256 amount_)\\r\\n\\t\\tprivate\\r\\n\\t\\tonlyAmountGreaterThanZero(amount_)\\r\\n\\t{\\r\\n\\t\\treserve.safeTransferFrom(msg.sender, address(this), amount_);\\r\\n\\t\\tlendingPool.deposit(address(reserve), amount_, address(this), referralCode);\\r\\n\\t\\tuserData[msg.sender].balance += amount_;\\r\\n\\t\\ttotalBalance += amount_;\\r\\n\\t\\temit Deposit(msg.sender, amount_);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _withdraw(uint256 amount_)\\r\\n\\t\\tprivate\\r\\n\\t\\tonlyAmountGreaterThanZero(amount_)\\r\\n\\t{\\r\\n\\t\\tUserData storage _user = userData[msg.sender];\\r\\n\\t\\tif(_user.debt != 0){\\r\\n\\t\\t\\trequire(amount_ <= _getAvailableWithdraw(\\r\\n\\t\\t\\t\\t_user.balance, _user.debt, _getPrice(), lender.borrowCoefficient()),\\r\\n\\t\\t\\t\\t\\\"amount greater than available to withdraw\\\");\\r\\n\\t\\t}else{\\r\\n\\t\\t\\trequire(_user.balance >= amount_, \\\"amount greater than balance\\\");\\r\\n\\t\\t}\\r\\n\\t\\t_user.balance -= amount_;\\r\\n\\t\\ttotalBalance -= amount_;\\r\\n\\t\\tlendingPool.withdraw(address(reserve), amount_, msg.sender);\\r\\n\\t\\temit Withdraw(msg.sender, amount_);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _borrow(uint256 amount_, bool unwrap_)\\r\\n\\t\\tprivate\\r\\n\\t\\tonlyAmountGreaterThanZero(amount_)\\r\\n\\t\\treturns(uint256)\\r\\n\\t{\\r\\n\\t\\tUserData storage _user = userData[msg.sender];\\r\\n\\t\\tuint256 _availableBorrow = _getAvailableBorrow(\\r\\n\\t\\t\\t_user.balance, _user.debt, _getPrice(), lender.borrowCoefficient());\\r\\n\\t\\trequire(_availableBorrow != 0,  \\\"no borrow available\\\");\\r\\n\\t\\tif(amount_ == type(uint256).max)\\r\\n\\t\\t\\tamount_ = _availableBorrow;\\r\\n\\t\\telse\\r\\n\\t\\t\\trequire(amount_ <= _availableBorrow, \\\"not ehough collateral\\\");\\r\\n\\t\\trequire(wETH.balanceOf(address(lender)) >= amount_, \\\"not enough weth balance on lender contract\\\");\\r\\n\\t\\t_user.debt += amount_;\\r\\n\\t\\tif(unwrap_){\\r\\n\\t\\t\\twETH.transferFrom(address(lender), address(this), amount_);\\r\\n\\t\\t\\twETH.withdraw(amount_);\\r\\n\\t\\t\\t(bool _success, ) = msg.sender.call{value: amount_}(\\\"\\\");\\r\\n\\t\\t\\trequire(_success, \\\"transfer failed\\\");\\r\\n\\t\\t}else{\\r\\n\\t\\t\\twETH.transferFrom(address(lender), msg.sender, amount_);\\r\\n\\t\\t}\\t\\t\\r\\n\\t\\temit Borrow(msg.sender, amount_);\\r\\n\\t\\treturn amount_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _repay(uint256 amount_, bool wrap_)\\r\\n\\t\\tprivate\\r\\n\\t\\tonlyAmountGreaterThanZero(amount_)\\r\\n\\t{\\r\\n\\t\\tUserData storage _user = userData[msg.sender];\\r\\n\\t\\trequire(_user.debt >= amount_, \\\"amount is greater than debt\\\");\\r\\n\\t\\tif(wrap_){\\r\\n\\t\\t\\trequire(amount_ == msg.value, \\\"wrong msg.value\\\");\\r\\n\\t\\t\\twETH.deposit{value: amount_}();\\r\\n\\t\\t\\twETH.transfer(address(lender), amount_);\\r\\n\\t\\t}else{\\r\\n\\t\\t\\trequire(msg.value == 0, \\\"non-zero msg.value\\\");\\r\\n\\t\\t\\twETH.transferFrom(msg.sender, address(lender), amount_);\\r\\n\\t\\t}\\t\\t\\r\\n\\t\\t_user.debt -= amount_;\\r\\n\\t\\temit Repay(msg.sender, amount_);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getAvailableBorrow(uint256 balance_, uint256 debt_, uint256 price_, uint256 borrowCoefficient_)\\r\\n\\t\\tprivate\\r\\n\\t\\tview\\r\\n\\t\\treturns(uint256)\\r\\n\\t{\\r\\n\\t\\tuint256 _maxAvailableBorrow = balance_ * price_ * borrowCoefficient_ / (10**reserveDecimals) / PCT_PRECISION;\\r\\n\\t\\tif(_maxAvailableBorrow > debt_)\\r\\n\\t\\t\\treturn _maxAvailableBorrow - debt_;\\r\\n\\t\\telse\\r\\n\\t\\t\\treturn 0;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getAvailableWithdraw(uint256 balance_, uint256 debt_, uint256 price_, uint256 borrowCoefficient_)\\r\\n\\t\\tprivate\\r\\n\\t\\tview\\r\\n\\t\\treturns(uint256)\\r\\n\\t{ \\r\\n\\t\\tuint256 _debtCost = debt_ * (10**reserveDecimals) / price_;\\r\\n\\t\\tuint256 _collaterizedBalance =  _debtCost * PCT_PRECISION / borrowCoefficient_;\\r\\n\\t\\tif( balance_ > _collaterizedBalance)\\r\\n\\t\\t\\treturn balance_ - _collaterizedBalance;\\r\\n\\t\\telse\\r\\n\\t\\t\\treturn 0;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getHealthFactor(uint256 balance_, uint256 debt_, uint256 price_, uint256 liquidationCoefficient_)\\r\\n\\t\\tprivate\\r\\n\\t\\tview\\r\\n\\t\\treturns(uint256)\\r\\n\\t{\\r\\n\\t\\tuint256 _debtCost = debt_ * (10**reserveDecimals) / price_;\\r\\n\\t\\treturn balance_ * liquidationCoefficient_ / _debtCost;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getLiquidationAmount(uint256 balance_, uint256 debt_, uint256 price_)\\r\\n\\t\\tprivate\\r\\n\\t\\tview\\r\\n\\t\\treturns(uint256 liquidationAmount_)\\r\\n\\t{\\r\\n\\t\\tuint256 _debtCost = debt_ * (10**reserveDecimals) / price_;\\r\\n\\t\\tif(balance_ > _debtCost) {\\r\\n\\t\\t\\tliquidationAmount_ = _debtCost + (balance_ - _debtCost) * lender.liquidationBonusCoefficient() / PCT_PRECISION;\\r\\n\\t\\t}else{\\r\\n\\t\\t\\tliquidationAmount_ = balance_;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getPrice()\\r\\n\\t\\tprivate\\r\\n\\t\\tview\\r\\n\\t\\treturns(uint256 price_)\\r\\n\\t{\\r\\n\\t\\tprice_ = priceOracle.getAssetPrice(address(reserve));\\r\\n\\t\\trequire(price_ != 0, \\\"oracle price error\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/***************************************\\r\\n\\t\\t\\t\\t\\tACTIONS\\r\\n\\t****************************************/\\r\\n\\r\\n\\tfunction deposit(uint256 amount_)\\r\\n\\t\\texternal\\r\\n\\t\\tnonReentrant\\r\\n\\t{\\r\\n\\t\\t_deposit(amount_);\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdraw(uint256 amount_)\\r\\n\\t\\texternal\\r\\n\\t\\tnonReentrant\\r\\n\\t{\\r\\n\\t\\t_withdraw(amount_);\\r\\n\\t}\\r\\n\\r\\n\\tfunction borrow(uint256 amount_, bool unwrap_)\\r\\n\\t\\texternal\\r\\n\\t\\tnonReentrant\\r\\n\\t\\treturns(uint256)\\r\\n\\t{\\r\\n\\t\\treturn _borrow(amount_, unwrap_);\\r\\n\\t}\\r\\n\\r\\n\\tfunction repay(uint256 amount_, bool wrap_)\\r\\n\\t\\texternal\\r\\n\\t\\tpayable\\r\\n\\t\\tnonReentrant\\r\\n\\t{\\r\\n\\t\\t_repay(amount_, wrap_);\\r\\n\\t}\\r\\n\\r\\n\\tfunction depositAndBorrow(uint256 amountDeposit_, uint256 amountBorrow_, bool unwrap_)\\r\\n\\t\\texternal\\r\\n\\t\\tnonReentrant\\r\\n\\t\\treturns(uint256)\\r\\n\\t{\\r\\n\\t\\t_deposit(amountDeposit_);\\r\\n\\t\\treturn _borrow(amountBorrow_, unwrap_);\\r\\n\\t}\\r\\n\\r\\n\\tfunction repayAndWithdraw(uint256 amountRepay_, uint256 amontWithdraw_, bool wrap_)\\r\\n\\t\\texternal\\r\\n\\t\\tpayable\\r\\n\\t\\tnonReentrant\\r\\n\\t{\\r\\n\\t\\t_repay(amountRepay_, wrap_);\\r\\n\\t\\t_withdraw(amontWithdraw_);\\r\\n\\t}\\r\\n\\r\\n\\tfunction liquidate(address borrower_, bool wrap_)\\r\\n\\t\\texternal\\r\\n\\t\\tpayable\\r\\n\\t\\tnonReentrant\\r\\n\\t\\treturns(uint256 liquidationAmount_)\\r\\n\\t{\\r\\n\\t\\tUserData storage _user = userData[borrower_];\\r\\n\\t\\trequire(_user.debt != 0, \\\"user has no debt\\\");\\r\\n\\t\\tuint256 _price = _getPrice();\\r\\n\\t\\tuint256 _liquidationCoefficient = lender.liquidationCoefficient();\\r\\n\\t\\trequire(_getHealthFactor(_user.balance, _user.debt, _price, _liquidationCoefficient) <= PCT_PRECISION,\\r\\n\\t\\t\\t\\\"attempt to liquidate healthy position\\\");\\r\\n\\t\\tif(wrap_){\\r\\n\\t\\t\\trequire(_user.debt == msg.value, \\\"wrong msg.value\\\");\\r\\n\\t\\t\\twETH.deposit{value: _user.debt}();\\r\\n\\t\\t\\twETH.transfer(address(lender), _user.debt);\\r\\n\\t\\t}else{\\r\\n\\t\\t\\trequire(msg.value == 0, \\\"non-zero msg.value\\\");\\r\\n\\t\\t\\twETH.transferFrom(msg.sender, address(lender), _user.debt);\\r\\n\\t\\t}\\r\\n\\t\\tliquidationAmount_ = _getLiquidationAmount(_user.balance, _user.debt, _price);\\r\\n\\t\\tlendingPool.withdraw(address(reserve), liquidationAmount_, msg.sender);\\r\\n\\t\\t_user.balance -= liquidationAmount_; \\r\\n\\t\\t_user.debt = 0;\\r\\n\\t\\ttotalBalance -= liquidationAmount_;\\r\\n\\t\\temit Liquidate(borrower_, liquidationAmount_, msg.sender);\\r\\n\\t}\\t\\r\\n\\r\\n\\tfunction claimRewards()\\r\\n\\t\\texternal\\r\\n\\t\\treturns(uint256)\\r\\n\\t{\\r\\n\\t\\taddress[] memory assets_ = new address[](1);\\r\\n\\t\\tassets_[0] = address(aToken);\\r\\n\\t\\treturn rewardsController.claimRewards(assets_, type(uint256).max, rewardsBeneficiary);\\r\\n\\t}\\r\\n\\r\\n\\t/***************************************\\r\\n\\t\\t\\t\\t\\tGETTERS\\r\\n\\t****************************************/\\r\\n\\t\\r\\n\\tfunction getUserData(address borrower_)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (\\r\\n\\t\\t\\tuint256 balance_,\\r\\n\\t\\t\\tuint256 debt_,\\r\\n\\t\\t\\tuint256 availableWithdraw_,\\r\\n\\t\\t\\tuint256 availableBorrow_,\\r\\n\\t\\t\\tuint256 healthFactor_\\r\\n\\t\\t)\\r\\n\\t{\\r\\n\\t\\tUserData memory _user = userData[borrower_];\\r\\n\\t\\tuint256 _price = _getPrice();\\r\\n\\t\\tbalance_ = _user.balance;\\r\\n\\t\\tdebt_ = _user.debt;\\r\\n\\t\\thealthFactor_ = PCT_PRECISION;\\r\\n\\t\\tif(_user.balance != 0){\\r\\n\\t\\t\\tuint256 _borrowCoefficient = lender.borrowCoefficient();\\r\\n\\t\\t\\tif(_user.debt != 0){\\r\\n\\t\\t\\t\\tavailableWithdraw_ = _getAvailableWithdraw(_user.balance, _user.debt, _price, _borrowCoefficient);\\r\\n\\t\\t\\t\\thealthFactor_ = _getHealthFactor(_user.balance, _user.debt, _price, lender.liquidationCoefficient());\\r\\n\\t\\t\\t}else{\\r\\n\\t\\t\\t\\tavailableWithdraw_ = _user.balance;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tavailableBorrow_ =  _getAvailableBorrow(_user.balance, _user.debt, _price, _borrowCoefficient);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction getAvailableBorrow(address borrower_, uint256 amountDeposit_)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns(uint256 availableBorrow_)\\r\\n\\t{\\r\\n\\t\\tUserData memory _user = userData[borrower_];\\r\\n\\t\\tif(_user.balance + amountDeposit_ != 0){\\r\\n\\t\\t\\tavailableBorrow_ = _getAvailableBorrow(\\r\\n\\t\\t\\t\\t_user.balance + amountDeposit_, _user.debt, _getPrice(), lender.borrowCoefficient());\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction getAvailableWithdraw(address borrower_, uint256 amountRepay_)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns(uint256 availableWithdraw_)\\r\\n\\t{\\r\\n\\t\\tUserData memory _user = userData[borrower_];\\r\\n\\t\\trequire(_user.debt >= amountRepay_, \\\"repay amount greater than debt\\\");\\r\\n\\t\\tif(_user.debt != 0){\\r\\n\\t\\t\\tavailableWithdraw_ =  _getAvailableWithdraw(\\r\\n\\t\\t\\t\\t_user.balance, _user.debt - amountRepay_, _getPrice(), lender.borrowCoefficient());\\r\\n\\t\\t}else{\\r\\n\\t\\t\\tavailableWithdraw_ =  _user.balance;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction getLiquidationAmount(address borrower_)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns(uint256 liquidationAmount_)\\r\\n\\t{\\r\\n\\t\\tUserData memory _user = userData[borrower_];\\r\\n\\t\\tif(_user.debt != 0){\\r\\n\\t\\t\\tuint256 _price = _getPrice();\\r\\n\\t\\t\\tif(_getHealthFactor(_user.balance, _user.debt, _price, lender.liquidationCoefficient()) <= PCT_PRECISION) {\\r\\n\\t\\t\\t\\tliquidationAmount_ = _getLiquidationAmount(_user.balance, _user.debt, _price);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPrice() external view returns(uint256)\\r\\n\\t{\\r\\n\\t\\treturn _getPrice();\\r\\n\\t}\\r\\n\\r\\n\\tfunction getRewardsBalance() external view returns(uint256)\\r\\n\\t{\\r\\n\\t\\taddress[] memory assets_ = new address[](1);\\r\\n\\t\\tassets_[0] = address(aToken);\\r\\n\\t\\treturn rewardsController.getRewardsBalance(assets_, address(this));\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/IAave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IAddressesProvider {\\r\\n\\tfunction getLendingPool() external returns (address);\\r\\n\\tfunction getPriceOracle() external view returns (address);\\r\\n}\\r\\n\\r\\ninterface ILendingPool {\\r\\n\\tfunction deposit(\\r\\n\\t\\taddress asset,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\taddress onBehalfOf,\\r\\n\\t\\tuint16 referralCode\\r\\n\\t) external;\\t\\r\\n\\t function withdraw(\\r\\n\\t\\taddress asset,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\taddress to\\r\\n\\t) external returns (uint256);\\r\\n\\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\r\\n}\\r\\n\\r\\ninterface IPriceOracle {\\r\\n\\tfunction getAssetPrice(address _asset) external view returns (uint256);\\r\\n}\\r\\n\\r\\nlibrary DataTypes {\\r\\n\\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\r\\n\\tstruct ReserveData {\\r\\n\\t\\t//stores the reserve configuration\\r\\n\\t\\tReserveConfigurationMap configuration;\\r\\n\\t\\t//the liquidity index. Expressed in ray\\r\\n\\t\\tuint128 liquidityIndex;\\r\\n\\t\\t//variable borrow index. Expressed in ray\\r\\n\\t\\tuint128 variableBorrowIndex;\\r\\n\\t\\t//the current supply rate. Expressed in ray\\r\\n\\t\\tuint128 currentLiquidityRate;\\r\\n\\t\\t//the current variable borrow rate. Expressed in ray\\r\\n\\t\\tuint128 currentVariableBorrowRate;\\r\\n\\t\\t//the current stable borrow rate. Expressed in ray\\r\\n\\t\\tuint128 currentStableBorrowRate;\\r\\n\\t\\tuint40 lastUpdateTimestamp;\\r\\n\\t\\t//tokens addresses\\r\\n\\t\\taddress aTokenAddress;\\r\\n\\t\\taddress stableDebtTokenAddress;\\r\\n\\t\\taddress variableDebtTokenAddress;\\r\\n\\t\\t//address of the interest rate strategy\\r\\n\\t\\taddress interestRateStrategyAddress;\\r\\n\\t\\t//the id of the reserve. Represents the position in the list of the active reserves\\r\\n\\t\\tuint8 id;\\r\\n\\t}\\r\\n\\tstruct ReserveConfigurationMap {\\r\\n\\t\\t//bit 0-15: LTV\\r\\n\\t\\t//bit 16-31: Liq. threshold\\r\\n\\t\\t//bit 32-47: Liq. bonus\\r\\n\\t\\t//bit 48-55: Decimals\\r\\n\\t\\t//bit 56: Reserve is active\\r\\n\\t\\t//bit 57: reserve is frozen\\r\\n\\t\\t//bit 58: borrowing is enabled\\r\\n\\t\\t//bit 59: stable rate borrowing enabled\\r\\n\\t\\t//bit 60-63: reserved\\r\\n\\t\\t//bit 64-79: reserve factor\\r\\n\\t\\tuint256 data;\\r\\n\\t}\\r\\n}\\r\\n\\r\\ninterface IRewardsController {\\r\\n\\tfunction getRewardsBalance(address[] calldata assets, address user) external view returns(uint256);\\r\\n\\tfunction claimRewards(address[] calldata assets, uint256 amount, address to) external returns (uint256);\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/IwETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IwETH {\\r\\n\\tfunction balanceOf(address) external view returns (uint256);\\r\\n\\tfunction deposit() external payable;\\r\\n\\tfunction withdraw(uint256 wad) external;\\r\\n\\tfunction approve(address guy, uint wad) external returns (bool);\\r\\n\\tfunction transferFrom(address src, address dst, uint256 wad) external returns (bool);\\r\\n\\tfunction transfer(address dst, uint wad) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reserve_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveDecimals_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressProvider_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode_\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"rewardsController_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsBeneficiary_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLiqidated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PCT_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unwrap_\",\"type\":\"bool\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDeposit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBorrow_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unwrap_\",\"type\":\"bool\"}],\"name\":\"depositAndBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feePaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountDeposit_\",\"type\":\"uint256\"}],\"name\":\"getAvailableBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableBorrow_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountRepay_\",\"type\":\"uint256\"}],\"name\":\"getAvailableWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableWithdraw_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feePaid_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower_\",\"type\":\"address\"}],\"name\":\"getLiquidationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower_\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableWithdraw_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableBorrow_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lender\",\"outputs\":[{\"internalType\":\"contract ILender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"wrap_\",\"type\":\"bool\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"wrap_\",\"type\":\"bool\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountRepay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amontWithdraw_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"wrap_\",\"type\":\"bool\"}],\"name\":\"repayAndWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsController\",\"outputs\":[{\"internalType\":\"contract IRewardsController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateLendingPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardsBeneficiary_\",\"type\":\"address\"}],\"name\":\"updateRewardsBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateaTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"internalType\":\"contract IwETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Borrower","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b3e1912fa5d9d219da8c65cda407cc998849428b000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000006000000000000000000000000b53c1a33016b2dc2ff3653530bff1848a515c8c50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d784927ff2f95ba542bfc824c8a8a98f3495f6b50000000000000000000000002cadaa8deaeb13ee93064ccde2d6360dab42122a","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}