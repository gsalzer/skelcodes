{"status":"1","message":"OK","result":[{"SourceCode":"// File: iface/IERC20.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: ParassetERC20.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ParassetERC20 is Context, IERC20 {\r\n\r\n\tmapping(address => uint256) _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) _allowances;\r\n\r\n    uint256 _totalSupply;\r\n\r\n    string _name;\r\n    string _symbol;\r\n\r\n    constructor() { }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\n// File: iface/IParassetGovernance.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/// @dev This interface defines the governance methods\r\ninterface IParassetGovernance {\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) external;\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) external view returns (uint);\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this weight to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) external view returns (bool);\r\n}\r\n// File: ParassetBase.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract ParassetBase {\r\n\r\n    // Lock flag\r\n    uint256 _locked;\r\n\r\n\t/// @dev To support open-zeppelin/upgrades\r\n    /// @param governance IParassetGovernance implementation contract address\r\n    function initialize(address governance) public virtual {\r\n        require(_governance == address(0), \"Log:ParassetBase!initialize\");\r\n        _governance = governance;\r\n        _locked = 0;\r\n    }\r\n\r\n    /// @dev IParassetGovernance implementation contract address\r\n    address public _governance;\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(newGovernance) when overriding, and override method without onlyGovernance\r\n    /// @param newGovernance IParassetGovernance implementation contract address\r\n    function update(address newGovernance) public virtual {\r\n\r\n        address governance = _governance;\r\n        require(governance == msg.sender || IParassetGovernance(governance).checkGovernance(msg.sender, 0), \"Log:ParassetBase:!gov\");\r\n        _governance = newGovernance;\r\n    }\r\n\r\n    /// @dev Uniform accuracy\r\n    /// @param inputToken Initial token\r\n    /// @param inputTokenAmount Amount of token\r\n    /// @param outputToken Converted token\r\n    /// @return stability Amount of outputToken\r\n    function getDecimalConversion(\r\n        address inputToken, \r\n        uint256 inputTokenAmount, \r\n        address outputToken\r\n    ) public view returns(uint256) {\r\n    \tuint256 inputTokenDec = 18;\r\n    \tuint256 outputTokenDec = 18;\r\n    \tif (inputToken != address(0x0)) {\r\n    \t\tinputTokenDec = IERC20(inputToken).decimals();\r\n    \t}\r\n    \tif (outputToken != address(0x0)) {\r\n    \t\toutputTokenDec = IERC20(outputToken).decimals();\r\n    \t}\r\n    \treturn inputTokenAmount * (10**outputTokenDec) / (10**inputTokenDec);\r\n    }\r\n\r\n    //---------modifier------------\r\n\r\n    modifier onlyGovernance() {\r\n        require(IParassetGovernance(_governance).checkGovernance(msg.sender, 0), \"Log:ParassetBase:!gov\");\r\n        _;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_locked == 0, \"Log:ParassetBase:!_locked\");\r\n        _locked = 1;\r\n        _;\r\n        _locked = 0;\r\n    }\r\n}\r\n// File: lib/TransferHelper.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n// File: iface/ILPStakingMiningPool.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface ILPStakingMiningPool {\r\n\tfunction getBlock(uint256 endBlock) external view returns(uint256);\r\n\tfunction getBalance(address stakingToken, address account) external view returns(uint256);\r\n\tfunction getChannelInfo(address stakingToken) external view returns(uint256 lastUpdateBlock, uint256 endBlock, uint256 rewardRate, uint256 rewardPerTokenStored, uint256 totalSupply);\r\n\tfunction getAccountReward(address stakingToken, address account) external view returns(uint256);\r\n\tfunction stake(uint256 amount, address stakingToken) external;\r\n\tfunction withdraw(uint256 amount, address stakingToken) external;\r\n\tfunction getReward(address stakingToken) external;\r\n}\r\n// File: iface/IParasset.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IParasset {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function destroy(uint256 amount, address account) external;\r\n    function issuance(uint256 amount, address account) external;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: iface/IInsurancePool.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IInsurancePool {\r\n    \r\n    /// @dev Destroy ptoken, update negative ledger\r\n    /// @param amount quantity destroyed\r\n    function destroyPToken(uint256 amount) external;\r\n\r\n    /// @dev Clear negative books\r\n    function eliminate() external;\r\n}\r\n// File: InsurancePool.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract InsurancePool is ParassetBase, IInsurancePool, ParassetERC20 {\r\n\r\n    // negative account funds\r\n    uint256 public _insNegative;\r\n    // latest redemption time\r\n    uint256 public _latestTime;\r\n    // status\r\n    uint8 public _flag;      // = 0: pause\r\n                             // = 1: active\r\n                             // = 2: redemption only\r\n    // user address => freeze LP data\r\n    mapping(address => Frozen) _frozenIns;\r\n    struct Frozen {\r\n        // frozen quantity\r\n        uint256 amount;\r\n        // freezing time                      \r\n        uint256 time;                       \r\n    }\r\n    // pToken address\r\n    address public _pTokenAddress;\r\n    // redemption cycle, 2 days\r\n\tuint96 public _redemptionCycle;\r\n    // underlyingToken address\r\n    address public _underlyingTokenAddress;\r\n    // redemption duration, 7 days\r\n\tuint96 public _waitCycle;\r\n    // mortgagePool address\r\n    address public _mortgagePool;\r\n    // rate(2/1000)\r\n    uint96 public _feeRate;\r\n\r\n    uint constant MINIMUM_LIQUIDITY = 1e9; \r\n\r\n    // staking address\r\n    ILPStakingMiningPool _lpStakingMiningPool;\r\n\r\n    event SubNegative(uint256 amount, uint256 allValue);\r\n    event AddNegative(uint256 amount, uint256 allValue);\r\n\r\n    function initialize(address governance) public override {\r\n        super.initialize(governance);\r\n        _redemptionCycle = 15 minutes;\r\n        _waitCycle = 30 minutes;\r\n        _feeRate = 2;\r\n        _totalSupply = 0;\r\n    }\r\n\r\n\t//---------modifier---------\r\n\r\n    modifier onlyMortgagePool() {\r\n        require(msg.sender == address(_mortgagePool), \"Log:InsurancePool:!mortgagePool\");\r\n        _;\r\n    }\r\n\r\n    modifier whenActive() {\r\n        require(_flag == 1, \"Log:InsurancePool:!active\");\r\n        _;\r\n    }\r\n\r\n    modifier redemptionOnly() {\r\n        require(_flag != 0, \"Log:InsurancePool:!0\");\r\n        _;\r\n    }\r\n\r\n    //---------view---------\r\n\r\n    /// @dev View the lpStakingMiningPool address\r\n    /// @return lpStakingMiningPool address\r\n    function getLPStakingMiningPool() external view returns(address) {\r\n        return address(_lpStakingMiningPool);\r\n    }\r\n\r\n    /// @dev View the all lp \r\n    /// @return all lp \r\n    function getAllLP(address user) public view returns(uint256) {\r\n        return _balances[user] + _lpStakingMiningPool.getBalance(address(this), user);\r\n    }\r\n\r\n    /// @dev View redemption period, next time\r\n    /// @return startTime start time\r\n    /// @return endTime end time\r\n    function getRedemptionTime() external view returns(uint256 startTime, uint256 endTime) {\r\n        uint256 time = _latestTime;\r\n        if (block.timestamp > time) {\r\n            uint256 subTime = (block.timestamp - time) / uint256(_waitCycle);\r\n            endTime = time + (uint256(_waitCycle) * (1 + subTime));\r\n        } else {\r\n            endTime = time;\r\n        }\r\n        startTime = endTime - uint256(_redemptionCycle);\r\n    }\r\n\r\n    /// @dev View frozen LP and unfreeze time\r\n    /// @param add user address\r\n    /// @return frozen LP\r\n    /// @return unfreeze time\r\n    function getFrozenIns(address add) external view returns(uint256, uint256) {\r\n        Frozen memory frozenInfo = _frozenIns[add];\r\n        return (frozenInfo.amount, frozenInfo.time);\r\n    }\r\n\r\n    /// @dev View frozen LP and unfreeze time, real time\r\n    /// @param add user address\r\n    /// @return frozen LP\r\n    function getFrozenInsInTime(address add) external view returns(uint256) {\r\n        Frozen memory frozenInfo = _frozenIns[add];\r\n        if (block.timestamp > frozenInfo.time) {\r\n            return 0;\r\n        }\r\n        return frozenInfo.amount;\r\n    }\r\n\r\n    /// @dev View redeemable LP, real time\r\n    /// @param add user address\r\n    /// @return redeemable LP\r\n    function getRedemptionAmount(address add) external view returns (uint256) {\r\n        Frozen memory frozenInfo = _frozenIns[add];\r\n        uint256 balanceSelf = _balances[add];\r\n        if (block.timestamp > frozenInfo.time) {\r\n            return balanceSelf;\r\n        } else {\r\n            return balanceSelf - frozenInfo.amount;\r\n        }\r\n    }\r\n\r\n    //---------governance----------\r\n\r\n    /// @dev Set token name\r\n    /// @param name token name\r\n    /// @param symbol token symbol\r\n    function setTokenInfo(string memory name, string memory symbol) external onlyGovernance {\r\n        _name = name;\r\n        _symbol = symbol;\r\n    }\r\n\r\n    /// @dev Set contract status\r\n    /// @param num 0: pause, 1: active, 2: redemption only\r\n    function setFlag(uint8 num) external onlyGovernance {\r\n        _flag = num;\r\n    }\r\n\r\n    /// @dev Set mortgage pool address\r\n    function setMortgagePool(address add) external onlyGovernance {\r\n    \t_mortgagePool = add;\r\n    }\r\n\r\n    /// @dev Set the staking contract address\r\n    function setLPStakingMiningPool(address add) external onlyGovernance {\r\n        _lpStakingMiningPool = ILPStakingMiningPool(add);\r\n    }\r\n\r\n    /// @dev Set the latest redemption time\r\n    function setLatestTime(uint256 num) external onlyGovernance {\r\n        _latestTime = num;\r\n    }\r\n\r\n    /// @dev Set the rate\r\n    function setFeeRate(uint96 num) external onlyGovernance {\r\n        _feeRate = num;\r\n    }\r\n\r\n    /// @dev Set redemption cycle\r\n    function setRedemptionCycle(uint256 num) external onlyGovernance {\r\n        require(num > 0, \"Log:InsurancePool:!zero\");\r\n        _redemptionCycle = uint96(num * 1 days);\r\n    }\r\n\r\n    /// @dev Set redemption duration\r\n    function setWaitCycle(uint256 num) external onlyGovernance {\r\n        require(num > 0, \"Log:InsurancePool:!zero\");\r\n        _waitCycle = uint96(num * 1 days);\r\n    }\r\n\r\n    /// @dev Set the underlying asset and PToken mapping and\r\n    /// @param uToken underlying asset address\r\n    /// @param pToken PToken address\r\n    function setInfo(address uToken, address pToken) external onlyGovernance {\r\n        _underlyingTokenAddress = uToken;\r\n        _pTokenAddress = pToken;\r\n    }\r\n\r\n    function test_insNegative(uint256 amount) external onlyGovernance {\r\n        _insNegative = amount;\r\n    }\r\n\r\n    //---------transaction---------\r\n\r\n    /// @dev Exchange: PToken exchanges the underlying asset\r\n    /// @param amount amount of PToken\r\n    function exchangePTokenToUnderlying(uint256 amount) public redemptionOnly nonReentrant {\r\n        // amount > 0\r\n        require(amount > 0, \"Log:InsurancePool:!amount\");\r\n\r\n        // Calculate the fee\r\n    \tuint256 fee = amount * _feeRate / 1000;\r\n\r\n        // Transfer to the PToken\r\n        address pTokenAddress = _pTokenAddress;\r\n        TransferHelper.safeTransferFrom(pTokenAddress, msg.sender, address(this), amount);\r\n\r\n        // Calculate the amount of transferred underlying asset\r\n        uint256 uTokenAmount = getDecimalConversion(pTokenAddress, amount - fee, _underlyingTokenAddress);\r\n        require(uTokenAmount > 0, \"Log:InsurancePool:!uTokenAmount\");\r\n\r\n        // Transfer out underlying asset\r\n    \tif (_underlyingTokenAddress == address(0x0)) {\r\n            TransferHelper.safeTransferETH(msg.sender, uTokenAmount);\r\n    \t} else {\r\n            TransferHelper.safeTransfer(_underlyingTokenAddress, msg.sender, uTokenAmount);\r\n    \t}\r\n\r\n    \t// Eliminate negative ledger\r\n        eliminate();\r\n    }\r\n\r\n    /// @dev Exchange: underlying asset exchanges the PToken\r\n    /// @param amount amount of underlying asset\r\n    function exchangeUnderlyingToPToken(uint256 amount) public payable redemptionOnly nonReentrant {\r\n        // amount > 0\r\n        require(amount > 0, \"Log:InsurancePool:!amount\");\r\n\r\n        // Calculate the fee\r\n    \tuint256 fee = amount * _feeRate / 1000;\r\n\r\n        // Transfer to the underlying asset\r\n    \tif (_underlyingTokenAddress == address(0x0)) {\r\n            // The underlying asset is ETH\r\n            require(msg.value == amount, \"Log:InsurancePool:!msg.value\");\r\n    \t} else {\r\n            // The underlying asset is ERC20\r\n            require(msg.value == 0, \"Log:InsurancePool:msg.value!=0\");\r\n            TransferHelper.safeTransferFrom(_underlyingTokenAddress, msg.sender, address(this), amount);\r\n    \t}\r\n\r\n        // Calculate the amount of transferred PTokens\r\n        uint256 pTokenAmount = getDecimalConversion(_underlyingTokenAddress, amount - fee, address(0x0));\r\n        require(pTokenAmount > 0, \"Log:InsurancePool:!pTokenAmount\");\r\n\r\n        // Transfer out PToken\r\n        address pTokenAddress = _pTokenAddress;\r\n        uint256 pTokenBalance = IERC20(pTokenAddress).balanceOf(address(this));\r\n        if (pTokenBalance < pTokenAmount) {\r\n            // Insufficient PToken balance,\r\n            uint256 subNum = pTokenAmount - pTokenBalance;\r\n            _issuancePToken(subNum);\r\n        }\r\n        TransferHelper.safeTransfer(pTokenAddress, msg.sender, pTokenAmount);\r\n    }\r\n\r\n    /// @dev Subscribe for insurance\r\n    /// @param amount amount of underlying asset\r\n    function subscribeIns(uint256 amount) public payable whenActive nonReentrant {\r\n        // amount > 0\r\n        require(amount > 0, \"Log:InsurancePool:!amount\");\r\n\r\n        // Update redemption time\r\n    \tupdateLatestTime();\r\n\r\n        // Thaw LP\r\n    \tFrozen storage frozenInfo = _frozenIns[msg.sender];\r\n    \tif (block.timestamp > frozenInfo.time) {\r\n    \t\tfrozenInfo.amount = 0;\r\n    \t}\r\n\r\n        // PToken balance \r\n    \tuint256 pTokenBalance = IERC20(_pTokenAddress).balanceOf(address(this));\r\n        // underlying asset balance\r\n        uint256 tokenBalance;\r\n    \tif (_underlyingTokenAddress == address(0x0)) {\r\n            // The amount of ETH involved in the calculation does not include the transfer in this time\r\n            require(msg.value == amount, \"Log:InsurancePool:!msg.value\");\r\n            tokenBalance = address(this).balance - amount;\r\n    \t} else {\r\n            require(msg.value == 0, \"Log:InsurancePool:msg.value!=0\");\r\n            // Underlying asset conversion 18 decimals\r\n            tokenBalance = getDecimalConversion(_underlyingTokenAddress, IERC20(_underlyingTokenAddress).balanceOf(address(this)), address(0x0));\r\n    \t}\r\n\r\n        // Calculate LP\r\n    \tuint256 insAmount = 0;\r\n    \tuint256 insTotal = _totalSupply;\r\n        uint256 allBalance = tokenBalance + pTokenBalance;\r\n    \tif (insTotal != 0) {\r\n            // Insurance pool assets must be greater than 0\r\n            require(allBalance > _insNegative, \"Log:InsurancePool:allBalanceNotEnough\");\r\n            uint256 allValue = allBalance - _insNegative;\r\n    \t\tinsAmount = getDecimalConversion(_underlyingTokenAddress, amount, address(0x0)) * insTotal / allValue;\r\n    \t} else {\r\n            // The initial net value is 1\r\n            insAmount = getDecimalConversion(_underlyingTokenAddress, amount, address(0x0)) - MINIMUM_LIQUIDITY;\r\n            _issuance(MINIMUM_LIQUIDITY, address(0x0));\r\n        }\r\n\r\n    \t// Transfer to the underlying asset(ERC20)\r\n    \tif (_underlyingTokenAddress != address(0x0)) {\r\n    \t\trequire(msg.value == 0, \"Log:InsurancePool:msg.value!=0\");\r\n            TransferHelper.safeTransferFrom(_underlyingTokenAddress, msg.sender, address(this), amount);\r\n    \t}\r\n\r\n    \t// Additional LP issuance\r\n    \t_issuance(insAmount, msg.sender);\r\n\r\n    \t// Freeze insurance LP\r\n    \tfrozenInfo.amount = frozenInfo.amount + insAmount;\r\n    \tfrozenInfo.time = _latestTime;\r\n    }\r\n\r\n    /// @dev Redemption insurance\r\n    /// @param amount redemption LP\r\n    function redemptionIns(uint256 amount) public redemptionOnly nonReentrant {\r\n        // amount > 0\r\n        require(amount > 0, \"Log:InsurancePool:!amount\");\r\n\r\n        // Update redemption time\r\n    \tupdateLatestTime();\r\n\r\n        // Judging the redemption time\r\n        uint256 tokenTime = _latestTime;\r\n    \trequire(block.timestamp < tokenTime && block.timestamp > tokenTime - uint256(_redemptionCycle), \"Log:InsurancePool:!time\");\r\n\r\n        // Thaw LP\r\n    \tFrozen storage frozenInfo = _frozenIns[msg.sender];\r\n    \tif (block.timestamp > frozenInfo.time) {\r\n    \t\tfrozenInfo.amount = 0;\r\n    \t}\r\n    \t\r\n        // PToken balance\r\n    \tuint256 pTokenBalance = IERC20(_pTokenAddress).balanceOf(address(this));\r\n        // underlying asset balance\r\n        uint256 tokenBalance;\r\n    \tif (_underlyingTokenAddress == address(0x0)) {\r\n            tokenBalance = address(this).balance;\r\n    \t} else {\r\n    \t\ttokenBalance = getDecimalConversion(_underlyingTokenAddress, IERC20(_underlyingTokenAddress).balanceOf(address(this)), address(0x0));\r\n    \t}\r\n\r\n        // Insurance pool assets must be greater than 0\r\n        uint256 allBalance = tokenBalance + pTokenBalance;\r\n        require(allBalance > _insNegative, \"Log:InsurancePool:allBalanceNotEnough\");\r\n        // Calculated amount of assets\r\n    \tuint256 allValue = allBalance - _insNegative;\r\n    \tuint256 insTotal = _totalSupply;\r\n    \tuint256 underlyingAmount = amount * allValue / insTotal;\r\n\r\n        // Destroy LP\r\n        _destroy(amount, msg.sender);\r\n        // Judgment to freeze LP\r\n        require(getAllLP(msg.sender) >= frozenInfo.amount, \"Log:InsurancePool:frozen\");\r\n    \t\r\n    \t// Transfer out assets, priority transfer of the underlying assets, if the underlying assets are insufficient, transfer ptoken\r\n    \tif (_underlyingTokenAddress == address(0x0)) {\r\n            // ETH\r\n            if (tokenBalance >= underlyingAmount) {\r\n                TransferHelper.safeTransferETH(msg.sender, underlyingAmount);\r\n            } else {\r\n                TransferHelper.safeTransferETH(msg.sender, tokenBalance);\r\n                TransferHelper.safeTransfer(_pTokenAddress, msg.sender, underlyingAmount - tokenBalance);\r\n            }\r\n    \t} else {\r\n            // ERC20\r\n            if (tokenBalance >= underlyingAmount) {\r\n                TransferHelper.safeTransfer(_underlyingTokenAddress, msg.sender, getDecimalConversion(_pTokenAddress, underlyingAmount, _underlyingTokenAddress));\r\n            } else {\r\n                TransferHelper.safeTransfer(_underlyingTokenAddress, msg.sender, getDecimalConversion(_pTokenAddress, tokenBalance, _underlyingTokenAddress));\r\n                TransferHelper.safeTransfer(_pTokenAddress, msg.sender, underlyingAmount - tokenBalance);\r\n            }\r\n    \t}\r\n    }\r\n\r\n    /// @dev Destroy PToken, update negative ledger\r\n    /// @param amount quantity destroyed\r\n    function destroyPToken(uint256 amount) public override onlyMortgagePool {\r\n        _insNegative = _insNegative + amount;\r\n        emit AddNegative(amount, _insNegative);\r\n\r\n        eliminate();\r\n    }\r\n\r\n    /// @dev Issuance PToken, update negative ledger\r\n    /// @param amount Additional issuance quantity\r\n    function _issuancePToken(uint256 amount) private {\r\n        IParasset(_pTokenAddress).issuance(amount, address(this));\r\n        _insNegative = _insNegative + amount;\r\n        emit AddNegative(amount, _insNegative);\r\n    }\r\n\r\n    /// @dev Clear negative books\r\n    function eliminate() override public {\r\n    \tIParasset pErc20 = IParasset(_pTokenAddress);\r\n        // negative ledger\r\n    \tuint256 negative = _insNegative;\r\n        // PToken balance\r\n    \tuint256 pTokenBalance = pErc20.balanceOf(address(this)); \r\n    \tif (negative > 0 && pTokenBalance > 0) {\r\n    \t\tif (negative >= pTokenBalance) {\r\n                // Increase negative ledger\r\n                pErc20.destroy(pTokenBalance, address(this));\r\n    \t\t\t_insNegative = _insNegative - pTokenBalance;\r\n                emit SubNegative(pTokenBalance, _insNegative);\r\n    \t\t} else {\r\n                // negative ledger = 0\r\n                pErc20.destroy(negative, address(this));\r\n    \t\t\t_insNegative = 0;\r\n                emit SubNegative(negative, _insNegative);\r\n    \t\t}\r\n    \t}\r\n    }\r\n\r\n    /// @dev Update redemption time\r\n    function updateLatestTime() public {\r\n        uint256 time = _latestTime;\r\n    \tif (block.timestamp > time) {\r\n    \t\tuint256 subTime = (block.timestamp - time) / uint256(_waitCycle);\r\n    \t\t_latestTime = time + (uint256(_waitCycle) * (1 + subTime));\r\n    \t}\r\n    }\r\n\r\n    /// @dev Destroy LP\r\n    /// @param amount quantity destroyed\r\n    /// @param account destroy address\r\n    function _destroy(\r\n        uint256 amount, \r\n        address account\r\n    ) private {\r\n        require(_balances[account] >= amount, \"Log:InsurancePool:!destroy\");\r\n        _balances[account] = _balances[account] - amount;\r\n        _totalSupply = _totalSupply - amount;\r\n        // emit Destroy(amount, account);\r\n        emit Transfer(account, address(0x0), amount);\r\n    }\r\n\r\n    /// @dev Additional LP issuance\r\n    /// @param amount additional issuance quantity\r\n    /// @param account additional issuance address\r\n    function _issuance(\r\n        uint256 amount, \r\n        address account\r\n    ) private {\r\n        _balances[account] = _balances[account] + amount;\r\n        _totalSupply = _totalSupply + amount;\r\n        // emit Issuance(amount, account);\r\n        emit Transfer(address(0x0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal override {\r\n        // Update redemption time\r\n        updateLatestTime();\r\n\r\n        // Thaw LP\r\n        Frozen storage frozenInfo = _frozenIns[sender];\r\n        if (block.timestamp > frozenInfo.time) {\r\n            frozenInfo.amount = 0;\r\n        }\r\n\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        if (recipient != address(_lpStakingMiningPool)) {\r\n            require(getAllLP(sender) >= frozenInfo.amount, \"Log:InsurancePool:frozen\");\r\n        }\r\n    }\r\n\r\n    /// The insurance pool penetrates the warehouse, and external assets are added to the insurance pool.\r\n    function addETH() external payable {}\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allValue\",\"type\":\"uint256\"}],\"name\":\"AddNegative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allValue\",\"type\":\"uint256\"}],\"name\":\"SubNegative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_feeRate\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_flag\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_insNegative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_latestTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mortgagePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_redemptionCycle\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_underlyingTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_waitCycle\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"destroyPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eliminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exchangePTokenToUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exchangeUnderlyingToPToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"}],\"name\":\"getDecimalConversion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"getFrozenIns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"getFrozenInsInTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPStakingMiningPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"getRedemptionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redemptionIns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"num\",\"type\":\"uint96\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"setFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"}],\"name\":\"setInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setLPStakingMiningPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setLatestTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setMortgagePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setRedemptionCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"setTokenInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setWaitCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"subscribeIns\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"test_insNegative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateLatestTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"InsurancePool","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"6666","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://caf0451e618713ef1e9ead28c5e82f8168cb5bc48eba92ece12263fec29ec47e"}]}