{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/external/SmartWalletChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n/// @notice Interface of the `SmartWalletChecker` contracts of the protocol\\ninterface SmartWalletChecker {\\n    function check(address) external view returns (bool);\\n}\\n\\n/// @title SmartWalletWhitelist\\n/// @author Curve Finance and adapted by Angle Core Team (https://etherscan.io/address/0xca719728ef172d0961768581fdf35cb116e0b7a4#code)\\n/// @notice Provides functions to check whether a wallet has been verified or not to own veANGLE\\ncontract SmartWalletWhitelist {\\n    /// @notice Mapping between addresses and whether they are whitelisted or not\\n    mapping(address => bool) public wallets;\\n    /// @notice Admin address of the contract\\n    address public admin;\\n    /// @notice Future admin address of the contract\\n    //solhint-disable-next-line\\n    address public future_admin;\\n    /// @notice Contract which works as this contract and that can whitelist addresses\\n    address public checker;\\n    /// @notice Future address to become checker\\n    //solhint-disable-next-line\\n    address public future_checker;\\n\\n    event ApproveWallet(address indexed _wallet);\\n    event RevokeWallet(address indexed _wallet);\\n\\n    /// @notice Constructor of the contract\\n    /// @param _admin Admin address of the contract\\n    constructor(address _admin) {\\n        require(_admin != address(0), \\\"0\\\");\\n        admin = _admin;\\n    }\\n\\n    /// @notice Commits to change the admin\\n    /// @param _admin New admin of the contract\\n    function commitAdmin(address _admin) external {\\n        require(msg.sender == admin, \\\"!admin\\\");\\n        future_admin = _admin;\\n    }\\n\\n    /// @notice Changes the admin to the admin that has been committed\\n    function applyAdmin() external {\\n        require(msg.sender == admin, \\\"!admin\\\");\\n        require(future_admin != address(0), \\\"admin not set\\\");\\n        admin = future_admin;\\n    }\\n\\n    /// @notice Commits to change the checker address\\n    /// @param _checker New checker address\\n    /// @dev This address can be the zero address in which case there will be no checker\\n    function commitSetChecker(address _checker) external {\\n        require(msg.sender == admin, \\\"!admin\\\");\\n        future_checker = _checker;\\n    }\\n\\n    /// @notice Applies the checker previously committed\\n    function applySetChecker() external {\\n        require(msg.sender == admin, \\\"!admin\\\");\\n        checker = future_checker;\\n    }\\n\\n    /// @notice Approves a wallet\\n    /// @param _wallet Wallet to approve\\n    function approveWallet(address _wallet) public {\\n        require(msg.sender == admin, \\\"!admin\\\");\\n        wallets[_wallet] = true;\\n\\n        emit ApproveWallet(_wallet);\\n    }\\n\\n    /// @notice Revokes a wallet\\n    /// @param _wallet Wallet to revoke\\n    function revokeWallet(address _wallet) external {\\n        require(msg.sender == admin, \\\"!admin\\\");\\n        wallets[_wallet] = false;\\n\\n        emit RevokeWallet(_wallet);\\n    }\\n\\n    /// @notice Checks whether a wallet is whitelisted\\n    /// @param _wallet Wallet address to check\\n    /// @dev This function can also rely on another SmartWalletChecker (a `checker` to see whether the wallet is whitelisted or not)\\n    function check(address _wallet) external view returns (bool) {\\n        bool _check = wallets[_wallet];\\n        if (_check) {\\n            return _check;\\n        } else {\\n            if (checker != address(0)) {\\n                return SmartWalletChecker(checker).check(_wallet);\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"ApproveWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"RevokeWallet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applySetChecker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"approveWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"commitAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checker\",\"type\":\"address\"}],\"name\":\"commitSetChecker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"future_admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"future_checker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"revokeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SmartWalletWhitelist","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"000000000000000000000000dc4e6dfe07efca50a197df15d9200883ef4eb1c8","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}