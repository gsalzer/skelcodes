{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/oracle/VolatilitySurfaceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// For further clarification please see https://license.premia.legal\\n\\npragma solidity ^0.8.0;\\n\\nimport {OwnableInternal, OwnableStorage} from \\\"@solidstate/contracts/access/OwnableInternal.sol\\\";\\nimport {EnumerableSet} from \\\"@solidstate/contracts/utils/EnumerableSet.sol\\\";\\nimport {ABDKMath64x64} from \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\n\\nimport {OptionMath} from \\\"../libraries/OptionMath.sol\\\";\\nimport {VolatilitySurfaceOracleStorage} from \\\"./VolatilitySurfaceOracleStorage.sol\\\";\\nimport {IVolatilitySurfaceOracle} from \\\"./IVolatilitySurfaceOracle.sol\\\";\\n\\n/**\\n * @title Premia volatility surface oracle contract\\n */\\ncontract VolatilitySurfaceOracle is IVolatilitySurfaceOracle, OwnableInternal {\\n    using VolatilitySurfaceOracleStorage for VolatilitySurfaceOracleStorage.Layout;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using ABDKMath64x64 for int128;\\n\\n    uint256 internal constant DECIMALS = 12;\\n\\n    event UpdateCoefficients(\\n        address indexed baseToken,\\n        address indexed underlyingToken,\\n        bytes32 callCoefficients, // Coefficients must be packed using formatVolatilitySurfaceCoefficients\\n        bytes32 putCoefficients // Coefficients must be packed using formatVolatilitySurfaceCoefficients\\n    );\\n\\n    /**\\n     * @notice Add relayer to the whitelist so that they can add oracle surfaces.\\n     * @param _addr The addresses to add to the whitelist\\n     */\\n    function addWhitelistedRelayer(address[] memory _addr) external onlyOwner {\\n        VolatilitySurfaceOracleStorage.Layout\\n            storage l = VolatilitySurfaceOracleStorage.layout();\\n\\n        for (uint256 i = 0; i < _addr.length; i++) {\\n            l.whitelistedRelayers.add(_addr[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove relayer from the whitelist so that they cannot add oracle surfaces.\\n     * @param _addr The addresses to remove the whitelist\\n     */\\n    function removeWhitelistedRelayer(address[] memory _addr)\\n        external\\n        onlyOwner\\n    {\\n        VolatilitySurfaceOracleStorage.Layout\\n            storage l = VolatilitySurfaceOracleStorage.layout();\\n\\n        for (uint256 i = 0; i < _addr.length; i++) {\\n            l.whitelistedRelayers.remove(_addr[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the list of whitelisted relayers\\n     * @return The list of whitelisted relayers\\n     */\\n    function getWhitelistedRelayers()\\n        external\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        VolatilitySurfaceOracleStorage.Layout\\n            storage l = VolatilitySurfaceOracleStorage.layout();\\n\\n        uint256 length = l.whitelistedRelayers.length();\\n        address[] memory result = new address[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            result[i] = l.whitelistedRelayers.at(i);\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get the volatility surface data of a token pair\\n     * @param baseToken The base token of the pair\\n     * @param underlyingToken The underlying token of the pair\\n     * @return The volatility surface data\\n     */\\n    function getVolatilitySurface(address baseToken, address underlyingToken)\\n        external\\n        view\\n        override\\n        returns (VolatilitySurfaceOracleStorage.Update memory)\\n    {\\n        VolatilitySurfaceOracleStorage.Layout\\n            storage l = VolatilitySurfaceOracleStorage.layout();\\n        return l.volatilitySurfaces[baseToken][underlyingToken];\\n    }\\n\\n    /**\\n     * @notice Get unpacked volatility surface coefficients\\n     * @param baseToken The base token of the pair\\n     * @param underlyingToken The underlying token of the pair\\n     * @param isCall whether it is for call or put\\n     * @return The unpacked coefficients of the volatility surface\\n     */\\n    function getVolatilitySurfaceCoefficientsUnpacked(\\n        address baseToken,\\n        address underlyingToken,\\n        bool isCall\\n    ) external view override returns (int256[] memory) {\\n        VolatilitySurfaceOracleStorage.Layout\\n            storage l = VolatilitySurfaceOracleStorage.layout();\\n\\n        bytes32 valuePacked = l.getCoefficients(\\n            baseToken,\\n            underlyingToken,\\n            isCall\\n        );\\n\\n        return\\n            VolatilitySurfaceOracleStorage.parseVolatilitySurfaceCoefficients(\\n                valuePacked\\n            );\\n    }\\n\\n    /**\\n     * @notice Get time to maturity in years, as a 64x64 fixed point representation\\n     * @param maturity Maturity timestamp\\n     * @return Time to maturity (in years), as a 64x64 fixed point representation\\n     */\\n    function getTimeToMaturity64x64(uint64 maturity)\\n        external\\n        view\\n        override\\n        returns (int128)\\n    {\\n        return ABDKMath64x64.divu(maturity - block.timestamp, 365 days);\\n    }\\n\\n    /**\\n     * @notice Get annualized volatility as a 64x64 fixed point representation\\n     * @param baseToken The base token of the pair\\n     * @param underlyingToken The underlying token of the pair\\n     * @param spot64x64 The spot, as a 64x64 fixed point representation\\n     * @param strike64x64 The strike, as a 64x64 fixed point representation\\n     * @param timeToMaturity64x64 Time to maturity (in years), as a 64x64 fixed point representation\\n     * @param isCall whether it is for call or put\\n     * @return Annualized volatility, as a 64x64 fixed point representation. 1 = 100%\\n     */\\n    function getAnnualizedVolatility64x64(\\n        address baseToken,\\n        address underlyingToken,\\n        int128 spot64x64,\\n        int128 strike64x64,\\n        int128 timeToMaturity64x64,\\n        bool isCall\\n    ) public view override returns (int128) {\\n        VolatilitySurfaceOracleStorage.Layout\\n            storage l = VolatilitySurfaceOracleStorage.layout();\\n        int256[] memory volatilitySurface = VolatilitySurfaceOracleStorage\\n            .parseVolatilitySurfaceCoefficients(\\n                l.getCoefficients(baseToken, underlyingToken, isCall)\\n            );\\n\\n        return\\n            _getAnnualizedVolatility64x64(\\n                spot64x64,\\n                strike64x64,\\n                timeToMaturity64x64,\\n                volatilitySurface\\n            );\\n    }\\n\\n    function _getAnnualizedVolatility64x64(\\n        int128 spot64x64,\\n        int128 strike64x64,\\n        int128 timeToMaturity64x64,\\n        int256[] memory volatilitySurface\\n    ) internal pure returns (int128) {\\n        require(volatilitySurface.length == 5, \\\"Invalid vol surface\\\");\\n\\n        // Time adjusted log moneyness\\n        int128 adjustedLogMoneyness64x64 = spot64x64.div(strike64x64).ln().div(\\n            timeToMaturity64x64.sqrt()\\n        );\\n\\n        return\\n            _toCoefficient64x64(volatilitySurface[0]) +\\n            _toCoefficient64x64(volatilitySurface[1]).mul(\\n                adjustedLogMoneyness64x64\\n            ) +\\n            _toCoefficient64x64(volatilitySurface[2]).mul(\\n                adjustedLogMoneyness64x64.mul(adjustedLogMoneyness64x64)\\n            ) +\\n            _toCoefficient64x64(volatilitySurface[3]).mul(timeToMaturity64x64) +\\n            _toCoefficient64x64(volatilitySurface[4])\\n                .mul(adjustedLogMoneyness64x64)\\n                .mul(timeToMaturity64x64);\\n    }\\n\\n    function _toCoefficient64x64(int256 value) internal pure returns (int128) {\\n        return ABDKMath64x64.divi(value, int256(10**DECIMALS));\\n    }\\n\\n    function _getBlackScholesPrice64x64(\\n        address baseToken,\\n        address underlyingToken,\\n        int128 strike64x64,\\n        int128 spot64x64,\\n        int128 timeToMaturity64x64,\\n        bool isCall\\n    ) internal view returns (int128) {\\n        int128 annualizedVolatility = getAnnualizedVolatility64x64(\\n            baseToken,\\n            underlyingToken,\\n            strike64x64,\\n            spot64x64,\\n            timeToMaturity64x64,\\n            isCall\\n        );\\n        int128 annualizedVariance = annualizedVolatility.mul(\\n            annualizedVolatility\\n        );\\n\\n        return\\n            OptionMath._blackScholesPrice(\\n                annualizedVariance,\\n                strike64x64,\\n                spot64x64,\\n                timeToMaturity64x64,\\n                isCall\\n            );\\n    }\\n\\n    /**\\n     * @notice Get Black Scholes price as a 64x64 fixed point representation\\n     * @param baseToken The base token of the pair\\n     * @param underlyingToken The underlying token of the pair\\n     * @param strike64x64 Strike, as a64x64 fixed point representation\\n     * @param spot64x64 Spot price, as a 64x64 fixed point representation\\n     * @param timeToMaturity64x64 Time to maturity (in years), as a 64x64 fixed point representation\\n     * @param isCall Whether it is for call or put\\n     * @return Black scholes price, as a 64x64 fixed point representation\\n     */\\n    function getBlackScholesPrice64x64(\\n        address baseToken,\\n        address underlyingToken,\\n        int128 strike64x64,\\n        int128 spot64x64,\\n        int128 timeToMaturity64x64,\\n        bool isCall\\n    ) external view override returns (int128) {\\n        return\\n            _getBlackScholesPrice64x64(\\n                baseToken,\\n                underlyingToken,\\n                strike64x64,\\n                spot64x64,\\n                timeToMaturity64x64,\\n                isCall\\n            );\\n    }\\n\\n    /**\\n     * @notice Get Black Scholes price as an uint256 with 18 decimals\\n     * @param baseToken The base token of the pair\\n     * @param underlyingToken The underlying token of the pair\\n     * @param strike64x64 Strike, as a64x64 fixed point representation\\n     * @param spot64x64 Spot price, as a 64x64 fixed point representation\\n     * @param timeToMaturity64x64 Time to maturity (in years), as a 64x64 fixed point representation\\n     * @param isCall Whether it is for call or put\\n     * @return Black scholes price, as an uint256 with 18 decimals\\n     */\\n    function getBlackScholesPrice(\\n        address baseToken,\\n        address underlyingToken,\\n        int128 strike64x64,\\n        int128 spot64x64,\\n        int128 timeToMaturity64x64,\\n        bool isCall\\n    ) external view override returns (uint256) {\\n        return\\n            _getBlackScholesPrice64x64(\\n                baseToken,\\n                underlyingToken,\\n                strike64x64,\\n                spot64x64,\\n                timeToMaturity64x64,\\n                isCall\\n            ).mulu(10**18);\\n    }\\n\\n    /**\\n     * @notice Update a list of volatility surfaces\\n     * @param baseTokens List of base tokens\\n     * @param underlyingTokens List of underlying tokens\\n     * @param callCoefficients List of call coefficients\\n     * @param putCoefficients List of put coefficients\\n     */\\n    function updateVolatilitySurfaces(\\n        address[] memory baseTokens,\\n        address[] memory underlyingTokens,\\n        bytes32[] memory callCoefficients,\\n        bytes32[] memory putCoefficients\\n    ) external {\\n        uint256 length = baseTokens.length;\\n        require(\\n            length == underlyingTokens.length &&\\n                length == callCoefficients.length &&\\n                length == putCoefficients.length,\\n            \\\"Wrong array length\\\"\\n        );\\n\\n        VolatilitySurfaceOracleStorage.Layout\\n            storage l = VolatilitySurfaceOracleStorage.layout();\\n\\n        require(\\n            l.whitelistedRelayers.contains(msg.sender),\\n            \\\"Relayer not whitelisted\\\"\\n        );\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            l.volatilitySurfaces[baseTokens[i]][\\n                    underlyingTokens[i]\\n                ] = VolatilitySurfaceOracleStorage.Update({\\n                updatedAt: block.timestamp,\\n                callCoefficients: callCoefficients[i],\\n                putCoefficients: putCoefficients[i]\\n            });\\n\\n            emit UpdateCoefficients(\\n                baseTokens[i],\\n                underlyingTokens[i],\\n                callCoefficients[i],\\n                putCoefficients[i]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Unpack volatility surface coefficients from a bytes43\\n     * @param input Packed volatility surface coefficients to unpack\\n     * @return coefficients The unpacked coefficients of the volatility surface\\n     */\\n    function parseVolatilitySurfaceCoefficients(bytes32 input)\\n        external\\n        pure\\n        returns (int256[] memory coefficients)\\n    {\\n        return\\n            VolatilitySurfaceOracleStorage.parseVolatilitySurfaceCoefficients(\\n                input\\n            );\\n    }\\n\\n    /**\\n     * @notice Pack volatility surface coefficients into a single bytes32\\n     * @dev This function is used to pack the coefficients into a single variable, which is then used as input in `updateVolatilitySurfaces`\\n     * @param coefficients Coefficients of the volatility surface to pack\\n     * @return result The packed coefficients of the volatility surface\\n     */\\n    function formatVolatilitySurfaceCoefficients(int256[5] memory coefficients)\\n        external\\n        pure\\n        returns (bytes32 result)\\n    {\\n        return\\n            VolatilitySurfaceOracleStorage.formatVolatilitySurfaceCoefficients(\\n                coefficients\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/OwnableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == OwnableStorage.layout().owner,\\n            'Ownable: sender must be owner'\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length > index,\\n            'EnumerableSet: index out of bounds'\\n        );\\n        return set._values[index];\\n    }\\n\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            uint256 index = valueIndex - 1;\\n            bytes32 last = set._values[set._values.length - 1];\\n\\n            // move last value to now-vacant index\\n\\n            set._values[index] = last;\\n            set._indexes[last] = index + 1;\\n\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"abdk-libraries-solidity/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (x << 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    unchecked {\\n      return int64 (x >> 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (int256 (x << 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    unchecked {\\n      require (x >= 0);\\n      return uint64 (uint128 (x >> 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = x >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    unchecked {\\n      return int256 (x) << 64;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) + y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) - y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) * y >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    unchecked {\\n      if (x == MIN_64x64) {\\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n          y <= 0x1000000000000000000000000000000000000000000000000);\\n        return -y << 63;\\n      } else {\\n        bool negativeResult = false;\\n        if (x < 0) {\\n          x = -x;\\n          negativeResult = true;\\n        }\\n        if (y < 0) {\\n          y = -y; // We rely on overflow behavior here\\n          negativeResult = !negativeResult;\\n        }\\n        uint256 absoluteResult = mulu (x, uint256 (y));\\n        if (negativeResult) {\\n          require (absoluteResult <=\\n            0x8000000000000000000000000000000000000000000000000000000000000000);\\n          return -int256 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n          require (absoluteResult <=\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n          return int256 (absoluteResult);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    unchecked {\\n      if (y == 0) return 0;\\n\\n      require (x >= 0);\\n\\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\\n\\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      hi <<= 64;\\n\\n      require (hi <=\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n      return hi + lo;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      int256 result = (int256 (x) << 64) / y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      bool negativeResult = false;\\n      if (x < 0) {\\n        x = -x; // We rely on overflow behavior here\\n        negativeResult = true;\\n      }\\n      if (y < 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult <= 0x80000000000000000000000000000000);\\n        return -int128 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (absoluteResult); // We rely on overflow behavior here\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      uint128 result = divuu (x, y);\\n      require (result <= uint128 (MAX_64x64));\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return -x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return x < 0 ? -x : x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != 0);\\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      return int128 ((int256 (x) + int256 (y)) >> 1);\\n    }\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 m = int256 (x) * int256 (y);\\n      require (m >= 0);\\n      require (m <\\n          0x4000000000000000000000000000000000000000000000000000000000000000);\\n      return int128 (sqrtu (uint256 (m)));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      bool negative = x < 0 && y & 1 == 1;\\n\\n      uint256 absX = uint128 (x < 0 ? -x : x);\\n      uint256 absResult;\\n      absResult = 0x100000000000000000000000000000000;\\n\\n      if (absX <= 0x10000000000000000) {\\n        absX <<= 63;\\n        while (y != 0) {\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x2 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x4 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x8 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          y >>= 4;\\n        }\\n\\n        absResult >>= 64;\\n      } else {\\n        uint256 absXShift = 63;\\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\n\\n        uint256 resultShift = 0;\\n        while (y != 0) {\\n          require (absXShift < 64);\\n\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n            resultShift += absXShift;\\n            if (absResult > 0x100000000000000000000000000000000) {\\n              absResult >>= 1;\\n              resultShift += 1;\\n            }\\n          }\\n          absX = absX * absX >> 127;\\n          absXShift <<= 1;\\n          if (absX >= 0x100000000000000000000000000000000) {\\n              absX >>= 1;\\n              absXShift += 1;\\n          }\\n\\n          y >>= 1;\\n        }\\n\\n        require (resultShift < 64);\\n        absResult >>= 64 - resultShift;\\n      }\\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= 0);\\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      int256 msb = 0;\\n      int256 xc = x;\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      int256 result = msb - 64 << 64;\\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n        ux *= ux;\\n        uint256 b = ux >> 255;\\n        ux >>= 127 + b;\\n        result += bit * int256 (b);\\n      }\\n\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      return int128 (int256 (\\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      uint256 result = 0x80000000000000000000000000000000;\\n\\n      if (x & 0x8000000000000000 > 0)\\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n      if (x & 0x4000000000000000 > 0)\\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n      if (x & 0x2000000000000000 > 0)\\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n      if (x & 0x1000000000000000 > 0)\\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n      if (x & 0x800000000000000 > 0)\\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n      if (x & 0x400000000000000 > 0)\\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n      if (x & 0x200000000000000 > 0)\\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n      if (x & 0x100000000000000 > 0)\\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n      if (x & 0x80000000000000 > 0)\\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n      if (x & 0x40000000000000 > 0)\\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n      if (x & 0x20000000000000 > 0)\\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n      if (x & 0x10000000000000 > 0)\\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n      if (x & 0x8000000000000 > 0)\\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n      if (x & 0x4000000000000 > 0)\\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n      if (x & 0x2000000000000 > 0)\\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n      if (x & 0x1000000000000 > 0)\\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n      if (x & 0x800000000000 > 0)\\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n      if (x & 0x400000000000 > 0)\\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n      if (x & 0x200000000000 > 0)\\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n      if (x & 0x100000000000 > 0)\\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n      if (x & 0x80000000000 > 0)\\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n      if (x & 0x40000000000 > 0)\\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n      if (x & 0x20000000000 > 0)\\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n      if (x & 0x10000000000 > 0)\\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n      if (x & 0x8000000000 > 0)\\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n      if (x & 0x4000000000 > 0)\\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n      if (x & 0x2000000000 > 0)\\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n      if (x & 0x1000000000 > 0)\\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n      if (x & 0x800000000 > 0)\\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n      if (x & 0x400000000 > 0)\\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n      if (x & 0x200000000 > 0)\\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n      if (x & 0x100000000 > 0)\\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n      if (x & 0x80000000 > 0)\\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n      if (x & 0x40000000 > 0)\\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n      if (x & 0x20000000 > 0)\\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n      if (x & 0x10000000 > 0)\\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n      if (x & 0x8000000 > 0)\\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n      if (x & 0x4000000 > 0)\\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n      if (x & 0x2000000 > 0)\\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n      if (x & 0x1000000 > 0)\\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n      if (x & 0x800000 > 0)\\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n      if (x & 0x400000 > 0)\\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n      if (x & 0x200000 > 0)\\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n      if (x & 0x100000 > 0)\\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n      if (x & 0x80000 > 0)\\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n      if (x & 0x40000 > 0)\\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n      if (x & 0x20000 > 0)\\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n      if (x & 0x10000 > 0)\\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n      if (x & 0x8000 > 0)\\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n      if (x & 0x4000 > 0)\\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n      if (x & 0x2000 > 0)\\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n      if (x & 0x1000 > 0)\\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n      if (x & 0x800 > 0)\\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n      if (x & 0x400 > 0)\\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n      if (x & 0x200 > 0)\\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n      if (x & 0x100 > 0)\\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n      if (x & 0x80 > 0)\\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n      if (x & 0x40 > 0)\\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n      if (x & 0x20 > 0)\\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n      if (x & 0x10 > 0)\\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n      if (x & 0x8 > 0)\\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n      if (x & 0x4 > 0)\\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n      if (x & 0x2 > 0)\\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n      if (x & 0x1 > 0)\\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n      result >>= uint256 (int256 (63 - (x >> 64)));\\n      require (result <= uint256 (int256 (MAX_64x64)));\\n\\n      return int128 (int256 (result));\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      return exp_2 (\\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      uint256 result;\\n\\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        result = (x << 64) / y;\\n      else {\\n        uint256 msb = 192;\\n        uint256 xc = x >> 192;\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 hi = result * (y >> 128);\\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 xh = x >> 192;\\n        uint256 xl = x << 64;\\n\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n        lo = hi << 128;\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n\\n        assert (xh == hi >> 128);\\n\\n        result += xl / y;\\n      }\\n\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return uint128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    unchecked {\\n      if (x == 0) return 0;\\n      else {\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n        if (xx >= 0x8) { r <<= 1; }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return uint128 (r < r1 ? r : r1);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/OptionMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// For further clarification please see https://license.premia.legal\\n\\npragma solidity ^0.8.0;\\n\\nimport {ABDKMath64x64} from \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\n\\nlibrary OptionMath {\\n    using ABDKMath64x64 for int128;\\n\\n    struct QuoteArgs {\\n        int128 varianceAnnualized64x64; // 64x64 fixed point representation of annualized variance\\n        int128 strike64x64; // 64x64 fixed point representation of strike price\\n        int128 spot64x64; // 64x64 fixed point representation of spot price\\n        int128 timeToMaturity64x64; // 64x64 fixed point representation of duration of option contract (in years)\\n        int128 oldCLevel64x64; // 64x64 fixed point representation of C-Level of Pool before purchase\\n        int128 oldPoolState; // 64x64 fixed point representation of current state of the pool\\n        int128 newPoolState; // 64x64 fixed point representation of state of the pool after trade\\n        int128 steepness64x64; // 64x64 fixed point representation of Pool state delta multiplier\\n        int128 minAPY64x64; // 64x64 fixed point representation of minimum APY for capital locked up to underwrite options\\n        bool isCall; // whether to price \\\"call\\\" or \\\"put\\\" option\\n    }\\n\\n    struct CalculateCLevelDecayArgs {\\n        int128 timeIntervalsElapsed64x64; // 64x64 fixed point representation of quantity of discrete arbitrary intervals elapsed since last update\\n        int128 oldCLevel64x64; // 64x64 fixed point representation of C-Level prior to accounting for decay\\n        int128 utilization64x64; // 64x64 fixed point representation of pool capital utilization rate\\n        int128 utilizationLowerBound64x64;\\n        int128 utilizationUpperBound64x64;\\n        int128 cLevelLowerBound64x64;\\n        int128 cLevelUpperBound64x64;\\n        int128 cConvergenceULowerBound64x64;\\n        int128 cConvergenceUUpperBound64x64;\\n    }\\n\\n    // 64x64 fixed point integer constants\\n    int128 internal constant ONE_64x64 = 0x10000000000000000;\\n    int128 internal constant THREE_64x64 = 0x30000000000000000;\\n\\n    // 64x64 fixed point constants used in Choudhury’s approximation of the Black-Scholes CDF\\n    int128 private constant CDF_CONST_0 = 0x09109f285df452394; // 2260 / 3989\\n    int128 private constant CDF_CONST_1 = 0x19abac0ea1da65036; // 6400 / 3989\\n    int128 private constant CDF_CONST_2 = 0x0d3c84b78b749bd6b; // 3300 / 3989\\n\\n    /**\\n     * @notice recalculate C-Level based on change in liquidity\\n     * @param initialCLevel64x64 64x64 fixed point representation of C-Level of Pool before update\\n     * @param oldPoolState64x64 64x64 fixed point representation of liquidity in pool before update\\n     * @param newPoolState64x64 64x64 fixed point representation of liquidity in pool after update\\n     * @param steepness64x64 64x64 fixed point representation of steepness coefficient\\n     * @return 64x64 fixed point representation of new C-Level\\n     */\\n    function calculateCLevel(\\n        int128 initialCLevel64x64,\\n        int128 oldPoolState64x64,\\n        int128 newPoolState64x64,\\n        int128 steepness64x64\\n    ) external pure returns (int128) {\\n        return\\n            newPoolState64x64\\n                .sub(oldPoolState64x64)\\n                .div(\\n                    oldPoolState64x64 > newPoolState64x64\\n                        ? oldPoolState64x64\\n                        : newPoolState64x64\\n                )\\n                .mul(steepness64x64)\\n                .neg()\\n                .exp()\\n                .mul(initialCLevel64x64);\\n    }\\n\\n    /**\\n     * @notice calculate the price of an option using the Premia Finance model\\n     * @param args arguments of quotePrice\\n     * @return premiaPrice64x64 64x64 fixed point representation of Premia option price\\n     * @return cLevel64x64 64x64 fixed point representation of C-Level of Pool after purchase\\n     */\\n    function quotePrice(QuoteArgs memory args)\\n        external\\n        pure\\n        returns (\\n            int128 premiaPrice64x64,\\n            int128 cLevel64x64,\\n            int128 slippageCoefficient64x64\\n        )\\n    {\\n        int128 deltaPoolState64x64 = args\\n            .newPoolState\\n            .sub(args.oldPoolState)\\n            .div(args.oldPoolState)\\n            .mul(args.steepness64x64);\\n        int128 tradingDelta64x64 = deltaPoolState64x64.neg().exp();\\n\\n        int128 blackScholesPrice64x64 = _blackScholesPrice(\\n            args.varianceAnnualized64x64,\\n            args.strike64x64,\\n            args.spot64x64,\\n            args.timeToMaturity64x64,\\n            args.isCall\\n        );\\n\\n        cLevel64x64 = tradingDelta64x64.mul(args.oldCLevel64x64);\\n        slippageCoefficient64x64 = ONE_64x64.sub(tradingDelta64x64).div(\\n            deltaPoolState64x64\\n        );\\n\\n        premiaPrice64x64 = blackScholesPrice64x64.mul(cLevel64x64).mul(\\n            slippageCoefficient64x64\\n        );\\n\\n        int128 intrinsicValue64x64;\\n\\n        if (args.isCall && args.strike64x64 < args.spot64x64) {\\n            intrinsicValue64x64 = args.spot64x64.sub(args.strike64x64);\\n        } else if (!args.isCall && args.strike64x64 > args.spot64x64) {\\n            intrinsicValue64x64 = args.strike64x64.sub(args.spot64x64);\\n        }\\n\\n        int128 collateralValue64x64 = args.isCall\\n            ? args.spot64x64\\n            : args.strike64x64;\\n\\n        int128 minPrice64x64 = intrinsicValue64x64.add(\\n            collateralValue64x64.mul(args.minAPY64x64).mul(\\n                args.timeToMaturity64x64\\n            )\\n        );\\n\\n        if (minPrice64x64 > premiaPrice64x64) {\\n            premiaPrice64x64 = minPrice64x64;\\n        }\\n    }\\n\\n    /**\\n     * @notice calculate the decay of C-Level based on heat diffusion function\\n     * @param args structured CalculateCLevelDecayArgs\\n     * @return cLevelDecayed64x64 C-Level after accounting for decay\\n     */\\n    function calculateCLevelDecay(CalculateCLevelDecayArgs memory args)\\n        external\\n        pure\\n        returns (int128 cLevelDecayed64x64)\\n    {\\n        int128 convFHighU64x64 = (args.utilization64x64 >=\\n            args.utilizationUpperBound64x64 &&\\n            args.oldCLevel64x64 <= args.cLevelLowerBound64x64)\\n            ? ONE_64x64\\n            : int128(0);\\n\\n        int128 convFLowU64x64 = (args.utilization64x64 <=\\n            args.utilizationLowerBound64x64 &&\\n            args.oldCLevel64x64 >= args.cLevelUpperBound64x64)\\n            ? ONE_64x64\\n            : int128(0);\\n\\n        cLevelDecayed64x64 = args\\n            .oldCLevel64x64\\n            .sub(args.cConvergenceULowerBound64x64.mul(convFLowU64x64))\\n            .sub(args.cConvergenceUUpperBound64x64.mul(convFHighU64x64))\\n            .mul(\\n                convFLowU64x64\\n                    .mul(ONE_64x64.sub(args.utilization64x64))\\n                    .add(convFHighU64x64.mul(args.utilization64x64))\\n                    .mul(args.timeIntervalsElapsed64x64)\\n                    .neg()\\n                    .exp()\\n            )\\n            .add(\\n                args.cConvergenceULowerBound64x64.mul(convFLowU64x64).add(\\n                    args.cConvergenceUUpperBound64x64.mul(convFHighU64x64)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice calculate the exponential decay coefficient for a given interval\\n     * @param oldTimestamp timestamp of previous update\\n     * @param newTimestamp current timestamp\\n     * @return 64x64 fixed point representation of exponential decay coefficient\\n     */\\n    function _decay(uint256 oldTimestamp, uint256 newTimestamp)\\n        internal\\n        pure\\n        returns (int128)\\n    {\\n        return\\n            ONE_64x64.sub(\\n                (-ABDKMath64x64.divu(newTimestamp - oldTimestamp, 7 days)).exp()\\n            );\\n    }\\n\\n    /**\\n     * @notice calculate Choudhury’s approximation of the Black-Scholes CDF\\n     * @param input64x64 64x64 fixed point representation of random variable\\n     * @return 64x64 fixed point representation of the approximated CDF of x\\n     */\\n    function _N(int128 input64x64) internal pure returns (int128) {\\n        // squaring via mul is cheaper than via pow\\n        int128 inputSquared64x64 = input64x64.mul(input64x64);\\n\\n        int128 value64x64 = (-inputSquared64x64 >> 1).exp().div(\\n            CDF_CONST_0.add(CDF_CONST_1.mul(input64x64.abs())).add(\\n                CDF_CONST_2.mul(inputSquared64x64.add(THREE_64x64).sqrt())\\n            )\\n        );\\n\\n        return input64x64 > 0 ? ONE_64x64.sub(value64x64) : value64x64;\\n    }\\n\\n    /**\\n     * @notice calculate the price of an option using the Black-Scholes model\\n     * @param varianceAnnualized64x64 64x64 fixed point representation of annualized variance\\n     * @param strike64x64 64x64 fixed point representation of strike price\\n     * @param spot64x64 64x64 fixed point representation of spot price\\n     * @param timeToMaturity64x64 64x64 fixed point representation of duration of option contract (in years)\\n     * @param isCall whether to price \\\"call\\\" or \\\"put\\\" option\\n     * @return 64x64 fixed point representation of Black-Scholes option price\\n     */\\n    function _blackScholesPrice(\\n        int128 varianceAnnualized64x64,\\n        int128 strike64x64,\\n        int128 spot64x64,\\n        int128 timeToMaturity64x64,\\n        bool isCall\\n    ) internal pure returns (int128) {\\n        int128 cumulativeVariance64x64 = timeToMaturity64x64.mul(\\n            varianceAnnualized64x64\\n        );\\n        int128 cumulativeVarianceSqrt64x64 = cumulativeVariance64x64.sqrt();\\n\\n        int128 d1_64x64 = spot64x64\\n            .div(strike64x64)\\n            .ln()\\n            .add(cumulativeVariance64x64 >> 1)\\n            .div(cumulativeVarianceSqrt64x64);\\n        int128 d2_64x64 = d1_64x64.sub(cumulativeVarianceSqrt64x64);\\n\\n        if (isCall) {\\n            return\\n                spot64x64.mul(_N(d1_64x64)).sub(strike64x64.mul(_N(d2_64x64)));\\n        } else {\\n            return\\n                -spot64x64.mul(_N(-d1_64x64)).sub(\\n                    strike64x64.mul(_N(-d2_64x64))\\n                );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/VolatilitySurfaceOracleStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// For further clarification please see https://license.premia.legal\\n\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"@solidstate/contracts/utils/EnumerableSet.sol\\\";\\n\\nlibrary VolatilitySurfaceOracleStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"premia.contracts.storage.VolatilitySurfaceOracle\\\");\\n\\n    uint256 internal constant COEFF_BITS = 51;\\n    uint256 internal constant COEFF_BITS_MINUS_ONE = 50;\\n    uint256 internal constant COEFF_AMOUNT = 5;\\n    // START_BIT = COEFF_BITS * (COEFF_AMOUNT - 1)\\n    uint256 internal constant START_BIT = 204;\\n\\n    struct Update {\\n        uint256 updatedAt;\\n        bytes32 callCoefficients;\\n        bytes32 putCoefficients;\\n    }\\n\\n    struct Layout {\\n        // Base token -> Underlying token -> Update\\n        mapping(address => mapping(address => Update)) volatilitySurfaces;\\n        // Relayer addresses which can be trusted to provide accurate option trades\\n        EnumerableSet.AddressSet whitelistedRelayers;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function getCoefficients(\\n        Layout storage l,\\n        address baseToken,\\n        address underlyingToken,\\n        bool isCall\\n    ) internal view returns (bytes32) {\\n        Update storage u = l.volatilitySurfaces[baseToken][underlyingToken];\\n        return isCall ? u.callCoefficients : u.putCoefficients;\\n    }\\n\\n    function parseVolatilitySurfaceCoefficients(bytes32 input)\\n        internal\\n        pure\\n        returns (int256[] memory coefficients)\\n    {\\n        coefficients = new int256[](COEFF_AMOUNT);\\n\\n        // Value to add to negative numbers to cast them to int256\\n        int256 toAdd = (int256(-1) >> COEFF_BITS) << COEFF_BITS;\\n\\n        assembly {\\n            let i := 0\\n            // Value equal to -1\\n            let mid := shl(COEFF_BITS_MINUS_ONE, 1)\\n\\n            for {\\n\\n            } lt(i, COEFF_AMOUNT) {\\n\\n            } {\\n                let offset := sub(START_BIT, mul(COEFF_BITS, i))\\n                let coeff := shr(\\n                    offset,\\n                    sub(\\n                        input,\\n                        shl(\\n                            add(offset, COEFF_BITS),\\n                            shr(add(offset, COEFF_BITS), input)\\n                        )\\n                    )\\n                )\\n\\n                // Check if value is a negative number and needs casting\\n                if or(eq(coeff, mid), gt(coeff, mid)) {\\n                    coeff := add(coeff, toAdd)\\n                }\\n\\n                // Store result in the coefficients array\\n                mstore(add(coefficients, add(0x20, mul(0x20, i))), coeff)\\n\\n                i := add(i, 1)\\n            }\\n        }\\n    }\\n\\n    function formatVolatilitySurfaceCoefficients(int256[5] memory coefficients)\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        for (uint256 i = 0; i < COEFF_AMOUNT; i++) {\\n            int256 max = int256(1 << COEFF_BITS_MINUS_ONE);\\n            require(\\n                coefficients[i] < max && coefficients[i] > -max,\\n                \\\"Out of bounds\\\"\\n            );\\n        }\\n\\n        assembly {\\n            let i := 0\\n\\n            for {\\n\\n            } lt(i, COEFF_AMOUNT) {\\n\\n            } {\\n                let offset := sub(START_BIT, mul(COEFF_BITS, i))\\n                let coeff := mload(add(coefficients, mul(0x20, i)))\\n\\n                result := add(\\n                    result,\\n                    shl(\\n                        offset,\\n                        sub(coeff, shl(COEFF_BITS, shr(COEFF_BITS, coeff)))\\n                    )\\n                )\\n\\n                i := add(i, 1)\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/IVolatilitySurfaceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {VolatilitySurfaceOracleStorage} from \\\"./VolatilitySurfaceOracleStorage.sol\\\";\\r\\n\\r\\ninterface IVolatilitySurfaceOracle {\\r\\n    function getWhitelistedRelayers() external view returns (address[] memory);\\r\\n\\r\\n    function getVolatilitySurface(address baseToken, address underlyingToken)\\r\\n        external\\r\\n        view\\r\\n        returns (VolatilitySurfaceOracleStorage.Update memory);\\r\\n\\r\\n    function getVolatilitySurfaceCoefficientsUnpacked(\\r\\n        address baseToken,\\r\\n        address underlyingToken,\\r\\n        bool isCall\\r\\n    ) external view returns (int256[] memory);\\r\\n\\r\\n    function getTimeToMaturity64x64(uint64 maturity)\\r\\n        external\\r\\n        view\\r\\n        returns (int128);\\r\\n\\r\\n    function getAnnualizedVolatility64x64(\\r\\n        address baseToken,\\r\\n        address underlyingToken,\\r\\n        int128 spot64x64,\\r\\n        int128 strike64x64,\\r\\n        int128 timeToMaturity64x64,\\r\\n        bool isCall\\r\\n    ) external view returns (int128);\\r\\n\\r\\n    function getBlackScholesPrice64x64(\\r\\n        address baseToken,\\r\\n        address underlyingToken,\\r\\n        int128 strike64x64,\\r\\n        int128 spot64x64,\\r\\n        int128 timeToMaturity64x64,\\r\\n        bool isCall\\r\\n    ) external view returns (int128);\\r\\n\\r\\n    function getBlackScholesPrice(\\r\\n        address baseToken,\\r\\n        address underlyingToken,\\r\\n        int128 strike64x64,\\r\\n        int128 spot64x64,\\r\\n        int128 timeToMaturity64x64,\\r\\n        bool isCall\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/OwnableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"callCoefficients\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"putCoefficients\",\"type\":\"bytes32\"}],\"name\":\"UpdateCoefficients\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"addWhitelistedRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[5]\",\"name\":\"coefficients\",\"type\":\"int256[5]\"}],\"name\":\"formatVolatilitySurfaceCoefficients\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"spot64x64\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"strike64x64\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"timeToMaturity64x64\",\"type\":\"int128\"},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\"}],\"name\":\"getAnnualizedVolatility64x64\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"strike64x64\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"spot64x64\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"timeToMaturity64x64\",\"type\":\"int128\"},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\"}],\"name\":\"getBlackScholesPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"strike64x64\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"spot64x64\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"timeToMaturity64x64\",\"type\":\"int128\"},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\"}],\"name\":\"getBlackScholesPrice64x64\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"maturity\",\"type\":\"uint64\"}],\"name\":\"getTimeToMaturity64x64\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"name\":\"getVolatilitySurface\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"callCoefficients\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"putCoefficients\",\"type\":\"bytes32\"}],\"internalType\":\"struct VolatilitySurfaceOracleStorage.Update\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCall\",\"type\":\"bool\"}],\"name\":\"getVolatilitySurfaceCoefficientsUnpacked\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistedRelayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"input\",\"type\":\"bytes32\"}],\"name\":\"parseVolatilitySurfaceCoefficients\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"coefficients\",\"type\":\"int256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"removeWhitelistedRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"baseTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"underlyingTokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"callCoefficients\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"putCoefficients\",\"type\":\"bytes32[]\"}],\"name\":\"updateVolatilitySurfaces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VolatilitySurfaceOracle","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}