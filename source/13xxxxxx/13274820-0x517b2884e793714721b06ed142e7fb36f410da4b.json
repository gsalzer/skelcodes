{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/AvnNftRoyaltyStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"./interfaces/IAvnNftRoyaltyStorage.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\n\\r\\ncontract AvnNftRoyaltyStorage is IAvnNftRoyaltyStorage, Owned {\\r\\n\\r\\n  uint32 constant private ONE_MILLION = 1000000;\\r\\n\\r\\n  mapping (address => bool) public isPermitted;\\r\\n  mapping (uint256 => uint256) private royaltiesId;\\r\\n  mapping (uint256 => Royalty[]) private royalties;\\r\\n  uint256 private rId;\\r\\n\\r\\n  modifier onlyPermitted() {\\r\\n    require(isPermitted[msg.sender], \\\"Access not permitted\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setPermission(address _partnerContract, bool _status)\\r\\n    onlyOwner\\r\\n    external\\r\\n    override\\r\\n  {\\r\\n    isPermitted[_partnerContract] = _status;\\r\\n    emit LogPermissionUpdated(_partnerContract, _status);\\r\\n  }\\r\\n\\r\\n  function setRoyaltyId(uint256 _batchId, uint256 _nftId)\\r\\n    onlyPermitted\\r\\n    external\\r\\n    override\\r\\n  {\\r\\n    royaltiesId[_nftId] = royaltiesId[_batchId];\\r\\n  }\\r\\n\\r\\n  function setRoyalties(uint256 _id, Royalty[] calldata _royalties)\\r\\n    onlyPermitted\\r\\n    external\\r\\n    override\\r\\n  {\\r\\n    if (royaltiesId[_id] != 0) return;\\r\\n\\r\\n    royaltiesId[_id] = ++rId;\\r\\n\\r\\n    uint64 totalRoyalties;\\r\\n\\r\\n    for (uint256 i = 0; i < _royalties.length; i++) {\\r\\n      if (_royalties[i].recipient != address(0) && _royalties[i].partsPerMil != 0) {\\r\\n        totalRoyalties += _royalties[i].partsPerMil;\\r\\n        require(totalRoyalties <= ONE_MILLION, \\\"Royalties too high\\\");\\r\\n        royalties[rId].push(_royalties[i]);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getRoyalties(uint256 _id)\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    returns(Royalty[] memory)\\r\\n  {\\r\\n    return royalties[royaltiesId[_id]];\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"/contracts/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ncontract Owned {\\r\\n\\r\\n  address public owner = msg.sender;\\r\\n\\r\\n  event LogOwnershipTransferred(address indexed owner, address indexed newOwner);\\r\\n\\r\\n  modifier onlyOwner {\\r\\n    require(msg.sender == owner, \\\"Only owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setOwner(address _owner)\\r\\n    external\\r\\n    onlyOwner\\r\\n  {\\r\\n    require(_owner != address(0), \\\"Owner cannot be zero address\\\");\\r\\n    emit LogOwnershipTransferred(owner, _owner);\\r\\n    owner = _owner;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IAvnNftRoyaltyStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface IAvnNftRoyaltyStorage {\\r\\n\\r\\n  struct Royalty {\\r\\n    address recipient;\\r\\n    uint32 partsPerMil;\\r\\n  }\\r\\n\\r\\n  event LogPermissionUpdated(address partnerContract, bool status);\\r\\n\\r\\n  function setPermission(address partnerContract, bool status) external; // onlyOwner\\r\\n  function setRoyaltyId(uint256 batchId, uint256 nftId) external; // onlyPermitted\\r\\n  function setRoyalties(uint256 id, Royalty[] calldata royalties) external; // onlyPermitted\\r\\n  function getRoyalties(uint256 id) external view returns(Royalty[] memory);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"partnerContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"LogPermissionUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getRoyalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"partsPerMil\",\"type\":\"uint32\"}],\"internalType\":\"struct IAvnNftRoyaltyStorage.Royalty[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPermitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partnerContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"partsPerMil\",\"type\":\"uint32\"}],\"internalType\":\"struct IAvnNftRoyaltyStorage.Royalty[]\",\"name\":\"_royalties\",\"type\":\"tuple[]\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AvnNftRoyaltyStorage","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}