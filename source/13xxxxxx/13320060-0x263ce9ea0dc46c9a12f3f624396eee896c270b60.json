{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract PussyRocket is IERC20 {\r\n   \r\n    string public constant name         = 'PussyRocket';\r\n    string public constant symbol       = 'PROCK';\r\n    uint8 public constant decimals      = 18;\r\n    \r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    \r\n    address public tokenOwner;\r\n    address public crowdsale;\r\n    \r\n    uint256 public totalSupply_                     = 69e27; // 69B tokens\r\n    uint256 public constant unlockTime              = 1640008800; //After this date, tokens are no longer locked\r\n    uint256 public limitCrowdsale                   = 58e27;    // 84% of token goes for sale\r\n    uint256 public tokensDistributedCrowdsale       = 0;    // The amount of tokens already sold to the ICO buyers\r\n    bool public remainingTokenBurnt                 = false;  \r\n\r\n\r\n    modifier onlyOwner {\r\n    require(msg.sender == tokenOwner);\r\n    _;\r\n    }\r\n    \r\n    modifier onlyCrowdsale {\r\n    require(msg.sender == crowdsale);\r\n    _;\r\n    }\r\n    \r\n    modifier afterCrowdsale {\r\n    require(block.timestamp > unlockTime || msg.sender == crowdsale);\r\n    _;\r\n    }\r\n    \r\n    constructor() public {\r\n        tokenOwner = msg.sender;\r\n        balances[msg.sender] = totalSupply_ - limitCrowdsale;\r\n            emit Transfer(address(0), msg.sender, totalSupply_ - limitCrowdsale);\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public afterCrowdsale override returns (bool) {\r\n        require(recipient != address(0));\r\n        require(amount <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender] - amount;\r\n        balances[recipient] = balances[recipient] + amount;\r\n        emit Transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public afterCrowdsale override returns (bool) {\r\n        require(recipient != address(0));\r\n        require(amount <= balances[sender]);\r\n        require(amount <= allowed[sender][msg.sender]);\r\n\r\n        balances[sender] = balances[sender] - amount;\r\n        balances[recipient] = balances[recipient] + amount;\r\n        allowed[sender][msg.sender] = allowed[sender][msg.sender] - amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public afterCrowdsale override returns (bool) {\r\n        allowed[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address account,address spender) public override view returns (uint256) {\r\n        return allowed[account][spender];\r\n    }\r\n\r\n    function increaseApproval(address spender, uint256 amount) public afterCrowdsale returns (bool) {\r\n        allowed[msg.sender][spender] = (allowed[msg.sender][spender] + amount);\r\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address spender, uint256 amount) public afterCrowdsale returns (bool) {\r\n        uint256 oldValue = allowed[msg.sender][spender];\r\n        if (amount >= oldValue) {\r\n          allowed[msg.sender][spender] = 0;\r\n        } else {\r\n          allowed[msg.sender][spender] = oldValue - amount;\r\n        }\r\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n   \r\n   \r\n    // Functions to support the Crowdsale\r\n    function setCrowdsale(address _crowdsale) external onlyOwner {\r\n        require(_crowdsale != address(0));\r\n        crowdsale = _crowdsale;\r\n    }\r\n    \r\n    function distribute(address buyer, uint tokens) external onlyCrowdsale {\r\n        require(buyer != address(0));\r\n        require(tokens > 0);\r\n\r\n        // Check that the limit of ICO tokens hasn't been met yet\r\n        require(tokensDistributedCrowdsale < limitCrowdsale);\r\n        require(tokensDistributedCrowdsale + tokens <= limitCrowdsale);\r\n\r\n        tokensDistributedCrowdsale = tokensDistributedCrowdsale + tokens;\r\n        balances[buyer] = balances[buyer] + tokens;\r\n        emit Transfer(address(0), buyer, tokens);\r\n      }\r\n   \r\n   function airdrop(address recipient, uint amount) external onlyOwner returns (bool){\r\n        require(block.timestamp < unlockTime);\r\n        require(recipient != address(0));\r\n        require(amount <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender] - amount;\r\n        balances[recipient] = balances[recipient] + amount;\r\n        emit Transfer(msg.sender, recipient, amount);\r\n        return true;\r\n      }\r\n   \r\n    function burn() external onlyCrowdsale {\r\n        uint256 remainingICOToken = limitCrowdsale - tokensDistributedCrowdsale;\r\n        if(remainingICOToken > 0 && !remainingTokenBurnt) {\r\n            remainingTokenBurnt = true;    \r\n            limitCrowdsale = limitCrowdsale - remainingICOToken;  \r\n            totalSupply_ = totalSupply_ - remainingICOToken;\r\n        }\r\n    }\r\n\r\n    function emergencyExtract() external onlyOwner {\r\n        payable(tokenOwner).transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExtract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitCrowdsale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingTokenBurnt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crowdsale\",\"type\":\"address\"}],\"name\":\"setCrowdsale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensDistributedCrowdsale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PussyRocket","CompilerVersion":"v0.8.8+commit.dddeac2f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://84914a5a7312eed1eb10d9d24e942cd481bf0d8560e74b1bc082371a1d0f277f"}]}