{"status":"1","message":"OK","result":[{"SourceCode":"//\r\n//  _____                                                 _   _ ______ _______\r\n//  / ____|                                               | \\ | |  ____|__   __|\r\n// | (___  _   _ _ __ ___  _ __ ___   ___  _ __   ___ _ __|  \\| | |__     | |\r\n//  \\___ \\| | | | '_ ` _ \\| '_ ` _ \\ / _ \\| '_ \\ / _ \\ '__| . ` |  __|    | |\r\n//  ____) | |_| | | | | | | | | | | | (_) | | | |  __/ |  | |\\  | |       | |\r\n// |_____/ \\__,_|_| |_| |_|_| |_| |_|\\___/|_| |_|\\___|_|  |_| \\_|_|       |_|\r\n//\r\n// SummonerNFT\r\n// https://summonernft.io/\r\n// https://twitter.com/SummonerNFT\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.1\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes calldata) {\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.1\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    _setOwner(_msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    _setOwner(address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    _setOwner(newOwner);\r\n  }\r\n\r\n  function _setOwner(address newOwner) private {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n}\r\n\r\n// File contracts/SummoningPit.sol\r\npragma solidity ^0.8.4;\r\n\r\ninterface MintableToken {\r\n  function mint(address _to, uint256 _amount) external;\r\n}\r\n\r\ncontract SummoningPit is Ownable {\r\n  uint256 constant ONE = 1.00E18;\r\n\r\n  mapping(address => uint256) public totalHarvestedByProject;\r\n  mapping(address => uint256) public lastHarvested;\r\n  mapping(uint256 => uint256) public manaHarvestedInBlock;\r\n  MintableToken manaToken;\r\n  uint256 public totalHarvested;\r\n  uint256 public maxManaPerBlock;\r\n  uint256 public manaPerCollection;\r\n  uint256 public period;\r\n  bool public isPaused;\r\n\r\n  constructor(address tokenAddress, uint256 harvestPeriod) {\r\n    manaPerCollection = ONE;\r\n    maxManaPerBlock = ONE;\r\n    period = harvestPeriod;\r\n    manaToken = MintableToken(tokenAddress);\r\n  }\r\n\r\n  modifier isNotPaused() {\r\n    require(!isPaused, \"Summoning pit is closed\");\r\n    _;\r\n  }\r\n\r\n  function _mintMana(address harvester, uint256 amount) internal {\r\n    require(\r\n      lastHarvested[harvester] + period <= block.number,\r\n      \"Wait before harvesting more\"\r\n    );\r\n    require(\r\n      manaHarvestedInBlock[block.number] + manaPerCollection <= maxManaPerBlock,\r\n      \"Mana fully harvested\"\r\n    );\r\n    lastHarvested[harvester] = block.number;\r\n    manaHarvestedInBlock[block.number] += manaPerCollection;\r\n    totalHarvested += amount;\r\n    manaToken.mint(harvester, amount);\r\n  }\r\n\r\n  function harvest() public isNotPaused {\r\n    _mintMana(msg.sender, manaPerCollection);\r\n  }\r\n\r\n  function harvest(address project) public isNotPaused {\r\n    _mintMana(msg.sender, manaPerCollection);\r\n    totalHarvestedByProject[project] += manaPerCollection;\r\n  }\r\n\r\n  function nextHarvestBlock(address user)\r\n    public\r\n    view\r\n    isNotPaused\r\n    returns (uint256)\r\n  {\r\n    return\r\n      lastHarvested[user] + period > block.number\r\n        ? lastHarvested[user] + period\r\n        : 0;\r\n  }\r\n\r\n  // Admin functions\r\n  function setPause(bool _pause) public onlyOwner {\r\n    isPaused = _pause;\r\n  }\r\n\r\n  function setManaPerCollection(uint256 _manaPerCollection) public onlyOwner {\r\n    manaPerCollection = _manaPerCollection;\r\n  }\r\n\r\n  function setMaxManaPerBlock(uint256 _maxManaPerBlock) public onlyOwner {\r\n    maxManaPerBlock = _maxManaPerBlock;\r\n  }\r\n\r\n  function setPeriod(uint256 _period) public onlyOwner {\r\n    period = _period;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"harvestPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHarvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"manaHarvestedInBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manaPerCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxManaPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"nextHarvestBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_manaPerCollection\",\"type\":\"uint256\"}],\"name\":\"setManaPerCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxManaPerBlock\",\"type\":\"uint256\"}],\"name\":\"setMaxManaPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHarvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalHarvestedByProject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SummoningPit","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000025cd9ef493e9ba5cf962a10d783022f5b15086470000000000000000000000000000000000000000000000000000000000001680","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://50a4bb86e462995d92708065b4a8d9f3b611d1bb11cbffcfc7edb7fa455cb6cc"}]}