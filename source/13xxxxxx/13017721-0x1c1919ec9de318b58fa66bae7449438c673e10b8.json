{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SwapKiwi.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract SwapKiwi is Ownable, IERC721Receiver {\\n\\n  uint256 private _swapsCounter;\\n  uint256 private _etherLocked;\\n\\n  uint256 public fee;\\n\\n  mapping (address => uint256) private _balances;\\n  mapping (uint256 => Swap) private _swaps;\\n\\n  struct Swap {\\n    address payable initiator;\\n    address[] initiatorNftAddresses;\\n    uint256[] initiatorNftIds;\\n    uint256 initiatorEtherValue;\\n    address payable secondUser;\\n    address[] secondUserNftAddresses;\\n    uint256[] secondUserNftIds;\\n    uint256 secondUserEtherValue;\\n  }\\n\\n  event SwapExecuted(address indexed from, address indexed to, uint256 indexed swapId);\\n  event SwapCanceled(address indexed canceledBy, uint256 indexed swapId);\\n  event SwapProposed(\\n    address indexed from,\\n    address indexed to,\\n    uint256 indexed swapId,\\n    address[] nftAddresses,\\n    uint256[] nftIds,\\n    uint256 etherValue\\n  );\\n  event SwapInitiated(\\n    address indexed from,\\n    address indexed to,\\n    uint256 indexed swapId,\\n    address[] nftAddresses,\\n    uint256[] nftIds,\\n    uint256 etherValue\\n  );\\n\\n  modifier onlyInitiator(uint256 swapId) {\\n    require(msg.sender == _swaps[swapId].initiator,\\n      \\\"SwapKiwi: caller is not swap initiator\\\");\\n    _;\\n  }\\n\\n  modifier requireSameLength(address[] memory nftAddresses, uint256[] memory nftIds) {\\n    require(nftAddresses.length == nftIds.length, \\\"SwapKiwi: NFT and ID arrays have to be same length\\\");\\n    _;\\n  }\\n\\n  modifier chargeAppFee() {\\n    require(msg.value >= fee, \\\"SwapKiwi: Sent ETH amount needs to be more or equal application fee\\\");\\n    _;\\n  }\\n\\n  constructor(uint256 initalAppFee, address contractOwnerAddress) {\\n    fee = initalAppFee;\\n    super.transferOwnership(contractOwnerAddress);\\n  }\\n\\n  function setAppFee(uint newFee) public onlyOwner {\\n    fee = newFee;\\n  }\\n\\n  /**\\n    * @dev First user proposes a swap to the second user with the NFTs that he deposits and wants to trade.\\n    *      Proposed NFTs are transfered to the SwapKiwi contract and\\n    *      kept there until the swap is accepted or canceled/rejected.\\n    *\\n    * @param secondUser address of the user that the first user wants to trade NFTs with\\n    * @param nftAddresses array of NFT addressed that want to be traded\\n    * @param nftIds array of IDs belonging to NFTs that want to be traded\\n    */\\n  function proposeSwap(address secondUser, address[] memory nftAddresses, uint256[] memory nftIds)\\n    external payable chargeAppFee requireSameLength(nftAddresses, nftIds) {\\n      _swapsCounter += 1;\\n\\n      safeMultipleTransfersFrom(\\n        msg.sender,\\n        address(this),\\n        nftAddresses,\\n        nftIds\\n    );\\n\\n      Swap storage swap = _swaps[_swapsCounter];\\n      swap.initiator = payable(msg.sender);\\n      swap.initiatorNftAddresses = nftAddresses;\\n      swap.initiatorNftIds = nftIds;\\n      if (msg.value > fee) {\\n        swap.initiatorEtherValue = msg.value - fee;\\n        _etherLocked += swap.initiatorEtherValue;\\n      }\\n      swap.secondUser = payable(secondUser);\\n\\n\\n      emit SwapProposed(msg.sender, secondUser, _swapsCounter, nftAddresses, nftIds, swap.initiatorEtherValue);\\n  }\\n\\n  /**\\n    * @dev Second user accepts the swap (with proposed NFTs) from swap initiator and\\n    *      deposits his NFTs into the SwapKiwi contract.\\n    *      Callable only by second user that is invited by swap initiator.\\n    *\\n    * @param swapId ID of the swap that the second user is invited to participate in\\n    * @param nftAddresses array of NFT addressed that want to be traded\\n    * @param nftIds array of IDs belonging to NFTs that want to be traded\\n    */\\n  function initiateSwap(uint256 swapId, address[] memory nftAddresses, uint256[] memory nftIds)\\n    external payable chargeAppFee requireSameLength(nftAddresses, nftIds) {\\n      require(_swaps[swapId].secondUser == msg.sender, \\\"SwapKiwi: caller is not swap participator\\\");\\n      require(\\n        _swaps[swapId].secondUserNftAddresses.length == 0 && _swaps[swapId].secondUserNftIds.length == 0,\\n        \\\"SwapKiwi: swap already initiated\\\"\\n      );\\n\\n      safeMultipleTransfersFrom(\\n        msg.sender,\\n        address(this),\\n        nftAddresses,\\n        nftIds\\n    );\\n\\n      _swaps[swapId].secondUserNftAddresses = nftAddresses;\\n      _swaps[swapId].secondUserNftIds = nftIds;\\n      if (msg.value > fee) {\\n        _swaps[swapId].secondUserEtherValue = msg.value - fee;\\n        _etherLocked += _swaps[swapId].secondUserEtherValue;\\n      }\\n\\n      emit SwapInitiated(\\n        msg.sender,\\n        _swaps[swapId].initiator,\\n        swapId,\\n        nftAddresses,\\n        nftIds,\\n        _swaps[swapId].secondUserEtherValue\\n      );\\n  }\\n\\n  /**\\n    * @dev Swap initiator accepts the swap (NFTs proposed by the second user).\\n    *      Executeds the swap - transfers NFTs from SwapKiwi to the participating users.\\n    *      Callable only by swap initiator.\\n    *\\n    * @param swapId ID of the swap that the initator wants to execute\\n    */\\n  function acceptSwap(uint256 swapId) external onlyInitiator(swapId) {\\n    require( _swaps[swapId].secondUserNftAddresses.length != 0 &&\\n      _swaps[swapId].initiatorNftAddresses.length != 0,\\n       \\\"SwapKiwi: Can't accept swap, both participants didn't add NFTs\\\"\\n    );\\n\\n    // transfer NFTs from escrow to initiator\\n    safeMultipleTransfersFrom(\\n      address(this),\\n      _swaps[swapId].initiator,\\n      _swaps[swapId].secondUserNftAddresses,\\n      _swaps[swapId].secondUserNftIds\\n    );\\n\\n    // transfer NFTs from escrow to second user\\n    safeMultipleTransfersFrom(\\n      address(this),\\n      _swaps[swapId].secondUser,\\n      _swaps[swapId].initiatorNftAddresses,\\n      _swaps[swapId].initiatorNftIds\\n    );\\n\\n    if (_swaps[swapId].initiatorEtherValue != 0) {\\n      _etherLocked -= _swaps[swapId].initiatorEtherValue;\\n      _swaps[swapId].secondUser.transfer(_swaps[swapId].initiatorEtherValue);\\n    }\\n    if (_swaps[swapId].secondUserEtherValue != 0) {\\n      _etherLocked -= _swaps[swapId].secondUserEtherValue;\\n      _swaps[swapId].initiator.transfer(_swaps[swapId].secondUserEtherValue);\\n    }\\n\\n    emit SwapExecuted(_swaps[swapId].initiator, _swaps[swapId].secondUser, swapId);\\n\\n    delete _swaps[swapId];\\n  }\\n\\n  /**\\n    * @dev Returns NFTs from SwapKiwi to swap initator.\\n    *      Callable only if second user hasn't yet added NFTs.\\n    *\\n    * @param swapId ID of the swap that the swap participants want to cancel\\n    */\\n  function cancelSwap(uint256 swapId) external {\\n    require(\\n      _swaps[swapId].initiator == msg.sender || _swaps[swapId].secondUser == msg.sender,\\n      \\\"SwapKiwi: Can't cancel swap, must be swap participant\\\"\\n    );\\n      // return initiator NFTs\\n      safeMultipleTransfersFrom(\\n        address(this),\\n        _swaps[swapId].initiator,\\n        _swaps[swapId].initiatorNftAddresses,\\n        _swaps[swapId].initiatorNftIds\\n      );\\n\\n    if(_swaps[swapId].secondUserNftAddresses.length != 0) {\\n      // return second user NFTs\\n      safeMultipleTransfersFrom(\\n        address(this),\\n        _swaps[swapId].secondUser,\\n        _swaps[swapId].secondUserNftAddresses,\\n        _swaps[swapId].secondUserNftIds\\n      );\\n    }\\n\\n    if (_swaps[swapId].initiatorEtherValue != 0) {\\n      _etherLocked -= _swaps[swapId].initiatorEtherValue;\\n      _swaps[swapId].initiator.transfer(_swaps[swapId].initiatorEtherValue);\\n    }\\n    if (_swaps[swapId].secondUserEtherValue != 0) {\\n      _etherLocked -= _swaps[swapId].secondUserEtherValue;\\n      _swaps[swapId].secondUser.transfer(_swaps[swapId].secondUserEtherValue);\\n    }\\n\\n\\n    emit SwapCanceled(msg.sender, swapId);\\n\\n    delete _swaps[swapId];\\n  }\\n\\n  function safeMultipleTransfersFrom(\\n      address from,\\n      address to,\\n      address[] memory nftAddresses,\\n      uint256[] memory nftIds\\n    ) internal virtual {\\n    for (uint256 i=0; i < nftIds.length; i++){\\n      safeTransferFrom(from, to, nftAddresses[i], nftIds[i], \\\"\\\");\\n    }\\n  }\\n\\n  function safeTransferFrom(\\n      address from,\\n      address to,\\n      address tokenAddress,\\n      uint256 tokenId,\\n      bytes memory _data\\n    ) internal virtual {\\n    IERC721(tokenAddress).safeTransferFrom(from, to, tokenId, _data);\\n  }\\n\\n  function withdrawEther(address payable recipient, uint256 amount) external onlyOwner {\\n    require(recipient != address(0), \\\"SwapKiwi: transfer to the zero address\\\");\\n    require(\\n        address(this).balance - _etherLocked >= amount,\\n        \\\"SwapKiwi: insufficient ETH in contract\\\"\\n    );\\n\\n    recipient.transfer(amount);\\n  }\\n\\n  function onERC721Received(\\n    /* solhint-disable */\\n      address operator,\\n      address from,\\n      uint256 tokenId,\\n      bytes calldata data\\n    /* solhint-enable */\\n    ) external pure override returns (bytes4) {\\n      return bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"));\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initalAppFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractOwnerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"canceledBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"}],\"name\":\"SwapCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"nftAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherValue\",\"type\":\"uint256\"}],\"name\":\"SwapInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"nftAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherValue\",\"type\":\"uint256\"}],\"name\":\"SwapProposed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"}],\"name\":\"acceptSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"}],\"name\":\"cancelSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"nftAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"initiateSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"secondUser\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"nftAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"proposeSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setAppFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SwapKiwi","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000008e1bc9bf04000000000000000000000000000f37dcdef718eb72b542933b27427f39a3af09ad7","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}