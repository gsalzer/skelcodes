{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.4 https://hardhat.org\r\n\r\n// File contracts/lib/RLPReader.sol\r\n\r\n/*\r\n* @author Hamdi Allam hamdi.allam97@gmail.com\r\n* Please reach out with any questions or concerns\r\n*/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nlibrary RLPReader {\r\n    uint8 constant STRING_SHORT_START = 0x80;\r\n    uint8 constant STRING_LONG_START  = 0xb8;\r\n    uint8 constant LIST_SHORT_START   = 0xc0;\r\n    uint8 constant LIST_LONG_START    = 0xf8;\r\n    uint8 constant WORD_SIZE = 32;\r\n\r\n    struct RLPItem {\r\n        uint len;\r\n        uint memPtr;\r\n    }\r\n\r\n    struct Iterator {\r\n        RLPItem item;   // Item that's being iterated over.\r\n        uint nextPtr;   // Position of the next item in the list.\r\n    }\r\n\r\n    /*\r\n    * @dev Returns the next element in the iteration. Reverts if it has not next element.\r\n    * @param self The iterator.\r\n    * @return The next element in the iteration.\r\n    */\r\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\r\n        require(hasNext(self));\r\n\r\n        uint ptr = self.nextPtr;\r\n        uint itemLength = _itemLength(ptr);\r\n        self.nextPtr = ptr + itemLength;\r\n\r\n        return RLPItem(itemLength, ptr);\r\n    }\r\n\r\n    /*\r\n    * @dev Returns true if the iteration has more elements.\r\n    * @param self The iterator.\r\n    * @return true if the iteration has more elements.\r\n    */\r\n    function hasNext(Iterator memory self) internal pure returns (bool) {\r\n        RLPItem memory item = self.item;\r\n        return self.nextPtr < item.memPtr + item.len;\r\n    }\r\n\r\n    /*\r\n    * @param item RLP encoded bytes\r\n    */\r\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\r\n        uint memPtr;\r\n        assembly {\r\n            memPtr := add(item, 0x20)\r\n        }\r\n\r\n        return RLPItem(item.length, memPtr);\r\n    }\r\n\r\n    /*\r\n    * @dev Create an iterator. Reverts if item is not a list.\r\n    * @param self The RLP item.\r\n    * @return An 'Iterator' over the item.\r\n    */\r\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\r\n        require(isList(self));\r\n\r\n        uint ptr = self.memPtr + _payloadOffset(self.memPtr);\r\n        return Iterator(self, ptr);\r\n    }\r\n\r\n    /*\r\n    * @param item RLP encoded bytes\r\n    */\r\n    function rlpLen(RLPItem memory item) internal pure returns (uint) {\r\n        return item.len;\r\n    }\r\n\r\n    /*\r\n    * @param item RLP encoded bytes\r\n    */\r\n    function payloadLen(RLPItem memory item) internal pure returns (uint) {\r\n        return item.len - _payloadOffset(item.memPtr);\r\n    }\r\n\r\n    /*\r\n    * @param item RLP encoded list in bytes\r\n    */\r\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\r\n        require(isList(item));\r\n\r\n        uint items = numItems(item);\r\n        RLPItem[] memory result = new RLPItem[](items);\r\n\r\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\r\n        uint dataLen;\r\n        for (uint i = 0; i < items; i++) {\r\n            dataLen = _itemLength(memPtr);\r\n            result[i] = RLPItem(dataLen, memPtr); \r\n            memPtr = memPtr + dataLen;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\r\n    function isList(RLPItem memory item) internal pure returns (bool) {\r\n        if (item.len == 0) return false;\r\n\r\n        uint8 byte0;\r\n        uint memPtr = item.memPtr;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < LIST_SHORT_START)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\r\n     * @return keccak256 hash of RLP encoded bytes.\r\n     */\r\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\r\n        uint256 ptr = item.memPtr;\r\n        uint256 len = item.len;\r\n        bytes32 result;\r\n        assembly {\r\n            result := keccak256(ptr, len)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function payloadLocation(RLPItem memory item) internal pure returns (uint, uint) {\r\n        uint offset = _payloadOffset(item.memPtr);\r\n        uint memPtr = item.memPtr + offset;\r\n        uint len = item.len - offset; // data length\r\n        return (memPtr, len);\r\n    }\r\n\r\n    /*\r\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\r\n     * @return keccak256 hash of the item payload.\r\n     */\r\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\r\n        (uint memPtr, uint len) = payloadLocation(item);\r\n        bytes32 result;\r\n        assembly {\r\n            result := keccak256(memPtr, len)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /** RLPItem conversions into data types **/\r\n\r\n    // @returns raw rlp encoding in bytes\r\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\r\n        bytes memory result = new bytes(item.len);\r\n        if (result.length == 0) return result;\r\n        \r\n        uint ptr;\r\n        assembly {\r\n            ptr := add(0x20, result)\r\n        }\r\n\r\n        copy(item.memPtr, ptr, item.len);\r\n        return result;\r\n    }\r\n\r\n    // any non-zero byte is considered true\r\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\r\n        require(item.len == 1);\r\n        uint result;\r\n        uint memPtr = item.memPtr;\r\n        assembly {\r\n            result := byte(0, mload(memPtr))\r\n        }\r\n\r\n        return result == 0 ? false : true;\r\n    }\r\n\r\n    function toAddress(RLPItem memory item) internal pure returns (address) {\r\n        // 1 byte for the length prefix\r\n        require(item.len == 21);\r\n\r\n        return address(uint160(toUint(item)));\r\n    }\r\n\r\n    function toUint(RLPItem memory item) internal pure returns (uint) {\r\n        require(item.len > 0 && item.len <= 33);\r\n\r\n        uint offset = _payloadOffset(item.memPtr);\r\n        uint len = item.len - offset;\r\n\r\n        uint result;\r\n        uint memPtr = item.memPtr + offset;\r\n        assembly {\r\n            result := mload(memPtr)\r\n\r\n            // shfit to the correct location if neccesary\r\n            if lt(len, 32) {\r\n                result := div(result, exp(256, sub(32, len)))\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // enforces 32 byte length\r\n    function toUintStrict(RLPItem memory item) internal pure returns (uint) {\r\n        // one byte prefix\r\n        require(item.len == 33);\r\n\r\n        uint result;\r\n        uint memPtr = item.memPtr + 1;\r\n        assembly {\r\n            result := mload(memPtr)\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\r\n        require(item.len > 0);\r\n\r\n        uint offset = _payloadOffset(item.memPtr);\r\n        uint len = item.len - offset; // data length\r\n        bytes memory result = new bytes(len);\r\n\r\n        uint destPtr;\r\n        assembly {\r\n            destPtr := add(0x20, result)\r\n        }\r\n\r\n        copy(item.memPtr + offset, destPtr, len);\r\n        return result;\r\n    }\r\n\r\n    /*\r\n    * Private Helpers\r\n    */\r\n\r\n    // @return number of payload items inside an encoded list.\r\n    function numItems(RLPItem memory item) private pure returns (uint) {\r\n        if (item.len == 0) return 0;\r\n\r\n        uint count = 0;\r\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\r\n        uint endPtr = item.memPtr + item.len;\r\n        while (currPtr < endPtr) {\r\n           currPtr = currPtr + _itemLength(currPtr); // skip over an item\r\n           count++;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    // @return entire rlp item byte length\r\n    function _itemLength(uint memPtr) private pure returns (uint) {\r\n        uint itemLen;\r\n        uint byte0;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < STRING_SHORT_START)\r\n            itemLen = 1;\r\n        \r\n        else if (byte0 < STRING_LONG_START)\r\n            itemLen = byte0 - STRING_SHORT_START + 1;\r\n\r\n        else if (byte0 < LIST_SHORT_START) {\r\n            assembly {\r\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\r\n                memPtr := add(memPtr, 1) // skip over the first byte\r\n                /* 32 byte word size */\r\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\r\n                itemLen := add(dataLen, add(byteLen, 1))\r\n            }\r\n        }\r\n\r\n        else if (byte0 < LIST_LONG_START) {\r\n            itemLen = byte0 - LIST_SHORT_START + 1;\r\n        } \r\n\r\n        else {\r\n            assembly {\r\n                let byteLen := sub(byte0, 0xf7)\r\n                memPtr := add(memPtr, 1)\r\n\r\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\r\n                itemLen := add(dataLen, add(byteLen, 1))\r\n            }\r\n        }\r\n\r\n        return itemLen;\r\n    }\r\n\r\n    // @return number of bytes until the data\r\n    function _payloadOffset(uint memPtr) private pure returns (uint) {\r\n        uint byte0;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < STRING_SHORT_START) \r\n            return 0;\r\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\r\n            return 1;\r\n        else if (byte0 < LIST_SHORT_START)  // being explicit\r\n            return byte0 - (STRING_LONG_START - 1) + 1;\r\n        else\r\n            return byte0 - (LIST_LONG_START - 1) + 1;\r\n    }\r\n\r\n    /*\r\n    * @param src Pointer to source\r\n    * @param dest Pointer to destination\r\n    * @param len Amount of memory to copy from the source\r\n    */\r\n    function copy(uint src, uint dest, uint len) private pure {\r\n        if (len == 0) return;\r\n\r\n        // copy as many word sizes as possible\r\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n\r\n            src += WORD_SIZE;\r\n            dest += WORD_SIZE;\r\n        }\r\n\r\n        if (len == 0) return;\r\n\r\n        // left over bytes. Mask is used to remove unwanted bytes from the word\r\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\r\n\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask)) // zero out src\r\n            let destpart := and(mload(dest), mask) // retrieve the bytes\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/lib/MerklePatriciaProof.sol\r\n\r\n\r\nlibrary MerklePatriciaProof {\r\n    /*\r\n     * @dev Verifies a merkle patricia proof.\r\n     * @param value The terminating value in the trie.\r\n     * @param encodedPath The path in the trie leading to value.\r\n     * @param rlpParentNodes The rlp encoded stack of nodes.\r\n     * @param root The root hash of the trie.\r\n     * @return The boolean validity of the proof.\r\n     */\r\n    function verify(\r\n        bytes memory value,\r\n        bytes memory encodedPath,\r\n        bytes memory rlpParentNodes,\r\n        bytes32 root\r\n    ) internal pure returns (bool) {\r\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\r\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\r\n\r\n        bytes memory currentNode;\r\n        RLPReader.RLPItem[] memory currentNodeList;\r\n\r\n        bytes32 nodeKey = root;\r\n        uint256 pathPtr = 0;\r\n\r\n        bytes memory path = _getNibbleArray(encodedPath);\r\n        if (path.length == 0) {\r\n            return false;\r\n        }\r\n\r\n        for (uint256 i = 0; i < parentNodes.length; i++) {\r\n            if (pathPtr > path.length) {\r\n                return false;\r\n            }\r\n\r\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\r\n            if (nodeKey != keccak256(currentNode)) {\r\n                return false;\r\n            }\r\n            currentNodeList = RLPReader.toList(parentNodes[i]);\r\n\r\n            if (currentNodeList.length == 17) {\r\n                if (pathPtr == path.length) {\r\n                    if (\r\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\r\n                        keccak256(value)\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                uint8 nextPathNibble = uint8(path[pathPtr]);\r\n                if (nextPathNibble > 16) {\r\n                    return false;\r\n                }\r\n                nodeKey = bytes32(\r\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\r\n                );\r\n                pathPtr += 1;\r\n            } else if (currentNodeList.length == 2) {\r\n                uint256 traversed = _nibblesToTraverse(\r\n                    RLPReader.toBytes(currentNodeList[0]),\r\n                    path,\r\n                    pathPtr\r\n                );\r\n                if (pathPtr + traversed == path.length) {\r\n                    //leaf node\r\n                    if (\r\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\r\n                        keccak256(value)\r\n                    ) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                //extension node\r\n                if (traversed == 0) {\r\n                    return false;\r\n                }\r\n\r\n                pathPtr += traversed;\r\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _nibblesToTraverse(\r\n        bytes memory encodedPartialPath,\r\n        bytes memory path,\r\n        uint256 pathPtr\r\n    ) private pure returns (uint256) {\r\n        uint256 len = 0;\r\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\r\n        // and slicedPath have elements that are each one hex character (1 nibble)\r\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\r\n        bytes memory slicedPath = new bytes(partialPath.length);\r\n\r\n        // pathPtr counts nibbles in path\r\n        // partialPath.length is a number of nibbles\r\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\r\n            bytes1 pathNibble = path[i];\r\n            slicedPath[i - pathPtr] = pathNibble;\r\n        }\r\n\r\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\r\n            len = partialPath.length;\r\n        } else {\r\n            len = 0;\r\n        }\r\n        return len;\r\n    }\r\n\r\n    // bytes b must be hp encoded\r\n    function _getNibbleArray(bytes memory b)\r\n        internal\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        bytes memory nibbles = \"\";\r\n        if (b.length > 0) {\r\n            uint8 offset;\r\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\r\n            if (hpNibble == 1 || hpNibble == 3) {\r\n                nibbles = new bytes(b.length * 2 - 1);\r\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\r\n                nibbles[0] = oddNibble;\r\n                offset = 1;\r\n            } else {\r\n                nibbles = new bytes(b.length * 2 - 2);\r\n                offset = 0;\r\n            }\r\n\r\n            for (uint256 i = offset; i < nibbles.length; i++) {\r\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\r\n            }\r\n        }\r\n        return nibbles;\r\n    }\r\n\r\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\r\n        private\r\n        pure\r\n        returns (bytes1)\r\n    {\r\n        return\r\n            bytes1(\r\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\r\n            );\r\n    }\r\n}\r\n\r\n\r\n// File contracts/lib/Merkle.sol\r\n\r\n\r\nlibrary Merkle {\r\n    function checkMembership(\r\n        bytes32 leaf,\r\n        uint256 index,\r\n        bytes32 rootHash,\r\n        bytes memory proof\r\n    ) internal pure returns (bool) {\r\n        require(proof.length % 32 == 0, \"Invalid proof length\");\r\n        uint256 proofHeight = proof.length / 32;\r\n        // Proof of size n means, height of the tree is n+1.\r\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\r\n        require(index < 2 ** proofHeight, \"Leaf index is too big\");\r\n\r\n        bytes32 proofElement;\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 32; i <= proof.length; i += 32) {\r\n            assembly {\r\n                proofElement := mload(add(proof, i))\r\n            }\r\n\r\n            if (index % 2 == 0) {\r\n                computedHash = keccak256(\r\n                    abi.encodePacked(computedHash, proofElement)\r\n                );\r\n            } else {\r\n                computedHash = keccak256(\r\n                    abi.encodePacked(proofElement, computedHash)\r\n                );\r\n            }\r\n\r\n            index = index / 2;\r\n        }\r\n        return computedHash == rootHash;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/lib/ExitPayloadReader.sol\r\n\r\nlibrary ExitPayloadReader {\r\n  using RLPReader for bytes;\r\n  using RLPReader for RLPReader.RLPItem;\r\n\r\n  uint8 constant WORD_SIZE = 32;\r\n\r\n  struct ExitPayload {\r\n    RLPReader.RLPItem[] data;\r\n  }\r\n\r\n  struct Receipt {\r\n    RLPReader.RLPItem[] data;\r\n    bytes raw;\r\n    uint256 logIndex;\r\n  }\r\n\r\n  struct Log {\r\n    RLPReader.RLPItem data;\r\n    RLPReader.RLPItem[] list;\r\n  }\r\n\r\n  struct LogTopics {\r\n    RLPReader.RLPItem[] data;\r\n  }\r\n\r\n  // copy paste of private copy() from RLPReader to avoid changing of existing contracts\r\n  function copy(uint src, uint dest, uint len) private pure {\r\n        if (len == 0) return;\r\n\r\n        // copy as many word sizes as possible\r\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n\r\n            src += WORD_SIZE;\r\n            dest += WORD_SIZE;\r\n        }\r\n\r\n        // left over bytes. Mask is used to remove unwanted bytes from the word\r\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask)) // zero out src\r\n            let destpart := and(mload(dest), mask) // retrieve the bytes\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n  function toExitPayload(bytes memory data)\r\n        internal\r\n        pure\r\n        returns (ExitPayload memory)\r\n    {\r\n        RLPReader.RLPItem[] memory payloadData = data\r\n            .toRlpItem()\r\n            .toList();\r\n\r\n        return ExitPayload(payloadData);\r\n    }\r\n\r\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns(uint256) {\r\n      return payload.data[0].toUint();\r\n    }\r\n\r\n    function getBlockProof(ExitPayload memory payload) internal pure returns(bytes memory) {\r\n      return payload.data[1].toBytes();\r\n    }\r\n\r\n    function getBlockNumber(ExitPayload memory payload) internal pure returns(uint256) {\r\n      return payload.data[2].toUint();\r\n    }\r\n\r\n    function getBlockTime(ExitPayload memory payload) internal pure returns(uint256) {\r\n      return payload.data[3].toUint();\r\n    }\r\n\r\n    function getTxRoot(ExitPayload memory payload) internal pure returns(bytes32) {\r\n      return bytes32(payload.data[4].toUint());\r\n    }\r\n\r\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns(bytes32) {\r\n      return bytes32(payload.data[5].toUint());\r\n    }\r\n\r\n    function getReceipt(ExitPayload memory payload) internal pure returns(Receipt memory receipt) {\r\n      receipt.raw = payload.data[6].toBytes();\r\n      RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\r\n\r\n      if (receiptItem.isList()) {\r\n          // legacy tx\r\n          receipt.data = receiptItem.toList();\r\n      } else {\r\n          // pop first byte before parsting receipt\r\n          bytes memory typedBytes = receipt.raw;\r\n          bytes memory result = new bytes(typedBytes.length - 1);\r\n          uint256 srcPtr;\r\n          uint256 destPtr;\r\n          assembly {\r\n              srcPtr := add(33, typedBytes)\r\n              destPtr := add(0x20, result)\r\n          }\r\n\r\n          copy(srcPtr, destPtr, result.length);\r\n          receipt.data = result.toRlpItem().toList();\r\n      }\r\n\r\n      receipt.logIndex = getReceiptLogIndex(payload);\r\n      return receipt;\r\n    }\r\n\r\n    function getReceiptProof(ExitPayload memory payload) internal pure returns(bytes memory) {\r\n      return payload.data[7].toBytes();\r\n    }\r\n\r\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns(bytes memory) {\r\n      return payload.data[8].toBytes();\r\n    }\r\n\r\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns(uint256) {\r\n      return payload.data[8].toUint();\r\n    }\r\n\r\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns(uint256) {\r\n      return payload.data[9].toUint();\r\n    }\r\n    \r\n    // Receipt methods\r\n    function toBytes(Receipt memory receipt) internal pure returns(bytes memory) {\r\n        return receipt.raw;\r\n    }\r\n\r\n    function getLog(Receipt memory receipt) internal pure returns(Log memory) {\r\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\r\n        return Log(logData, logData.toList());\r\n    }\r\n\r\n    // Log methods\r\n    function getEmitter(Log memory log) internal pure returns(address) {\r\n      return RLPReader.toAddress(log.list[0]);\r\n    }\r\n\r\n    function getTopics(Log memory log) internal pure returns(LogTopics memory) {\r\n        return LogTopics(log.list[1].toList());\r\n    }\r\n\r\n    function getData(Log memory log) internal pure returns(bytes memory) {\r\n        return log.list[2].toBytes();\r\n    }\r\n\r\n    function toRlpBytes(Log memory log) internal pure returns(bytes memory) {\r\n      return log.data.toRlpBytes();\r\n    }\r\n\r\n    // LogTopics methods\r\n    function getField(LogTopics memory topics, uint256 index) internal pure returns(RLPReader.RLPItem memory) {\r\n      return topics.data[index];\r\n    }\r\n}\r\n\r\n\r\n// File contracts/tunnel/FxBaseRootTunnel.sol\r\n\r\n\r\n\r\n\r\n\r\ninterface IFxStateSender {\r\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\r\n}\r\n\r\ncontract ICheckpointManager {\r\n    struct HeaderBlock {\r\n        bytes32 root;\r\n        uint256 start;\r\n        uint256 end;\r\n        uint256 createdAt;\r\n        address proposer;\r\n    }\r\n\r\n    /**\r\n     * @notice mapping of checkpoint header numbers to block details\r\n     * @dev These checkpoints are submited by plasma contracts\r\n     */\r\n    mapping(uint256 => HeaderBlock) public headerBlocks;\r\n}\r\n\r\nabstract contract FxBaseRootTunnel {\r\n    using RLPReader for RLPReader.RLPItem;\r\n    using Merkle for bytes32;\r\n    using ExitPayloadReader for bytes;\r\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\r\n    using ExitPayloadReader for ExitPayloadReader.Log;\r\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\r\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\r\n\r\n    // keccak256(MessageSent(bytes))\r\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\r\n\r\n    // state sender contract\r\n    IFxStateSender public fxRoot;\r\n    // root chain manager\r\n    ICheckpointManager public checkpointManager;\r\n    // child tunnel contract which receives and sends messages \r\n    address public fxChildTunnel;\r\n\r\n    // storage to avoid duplicate exits\r\n    mapping(bytes32 => bool) public processedExits;\r\n\r\n    constructor(address _checkpointManager, address _fxRoot) {\r\n        checkpointManager = ICheckpointManager(_checkpointManager);\r\n        fxRoot = IFxStateSender(_fxRoot);\r\n    }\r\n\r\n    // set fxChildTunnel if not set already\r\n    function setFxChildTunnel(address _fxChildTunnel) public {\r\n        require(fxChildTunnel == address(0x0), \"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\");\r\n        fxChildTunnel = _fxChildTunnel;\r\n    }\r\n\r\n    /**\r\n     * @notice Send bytes message to Child Tunnel\r\n     * @param message bytes message that will be sent to Child Tunnel\r\n     * some message examples -\r\n     *   abi.encode(tokenId);\r\n     *   abi.encode(tokenId, tokenMetadata);\r\n     *   abi.encode(messageType, messageData);\r\n     */\r\n    function _sendMessageToChild(bytes memory message) internal {\r\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\r\n    }\r\n\r\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\r\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\r\n\r\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\r\n        uint256 blockNumber = payload.getBlockNumber();\r\n        // checking if exit has already been processed\r\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\r\n        bytes32 exitHash = keccak256(\r\n            abi.encodePacked(\r\n                blockNumber,\r\n                // first 2 nibbles are dropped while generating nibble array\r\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\r\n                // so converting to nibble array and then hashing it\r\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\r\n                payload.getReceiptLogIndex()\r\n            )\r\n        );\r\n        require(\r\n            processedExits[exitHash] == false,\r\n            \"FxRootTunnel: EXIT_ALREADY_PROCESSED\"\r\n        );\r\n        processedExits[exitHash] = true;\r\n\r\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\r\n        ExitPayloadReader.Log memory log = receipt.getLog();\r\n\r\n        // check child tunnel\r\n        require(fxChildTunnel == log.getEmitter(), \"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\");\r\n\r\n        bytes32 receiptRoot = payload.getReceiptRoot();\r\n        // verify receipt inclusion\r\n        require(\r\n            MerklePatriciaProof.verify(\r\n                receipt.toBytes(), \r\n                branchMaskBytes, \r\n                payload.getReceiptProof(), \r\n                receiptRoot\r\n            ),\r\n            \"FxRootTunnel: INVALID_RECEIPT_PROOF\"\r\n        );\r\n\r\n        // verify checkpoint inclusion\r\n        _checkBlockMembershipInCheckpoint(\r\n            blockNumber,\r\n            payload.getBlockTime(),\r\n            payload.getTxRoot(),\r\n            receiptRoot,\r\n            payload.getHeaderNumber(),\r\n            payload.getBlockProof()\r\n        );\r\n\r\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\r\n\r\n        require(\r\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\r\n            \"FxRootTunnel: INVALID_SIGNATURE\"\r\n        );\r\n\r\n        // received message data\r\n        (bytes memory message) = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\r\n        return message;\r\n    }\r\n\r\n    function _checkBlockMembershipInCheckpoint(\r\n        uint256 blockNumber,\r\n        uint256 blockTime,\r\n        bytes32 txRoot,\r\n        bytes32 receiptRoot,\r\n        uint256 headerNumber,\r\n        bytes memory blockProof\r\n    ) private view returns (uint256) {\r\n        (\r\n            bytes32 headerRoot,\r\n            uint256 startBlock,\r\n            ,\r\n            uint256 createdAt,\r\n\r\n        ) = checkpointManager.headerBlocks(headerNumber);\r\n\r\n        require(\r\n            keccak256(\r\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\r\n            )\r\n                .checkMembership(\r\n                blockNumber-startBlock,\r\n                headerRoot,\r\n                blockProof\r\n            ),\r\n            \"FxRootTunnel: INVALID_HEADER\"\r\n        );\r\n        return createdAt;\r\n    }\r\n\r\n    /**\r\n     * @notice receive message from  L2 to L1, validated by proof\r\n     * @dev This function verifies if the transaction actually happened on child chain\r\n     *\r\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\r\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\r\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\r\n     *  2 - blockNumber - Block number containing the reference tx on child chain\r\n     *  3 - blockTime - Reference tx block time\r\n     *  4 - txRoot - Transactions root of block\r\n     *  5 - receiptRoot - Receipts root of block\r\n     *  6 - receipt - Receipt of the reference transaction\r\n     *  7 - receiptProof - Merkle proof of the reference receipt\r\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\r\n     *  9 - receiptLogIndex - Log Index to read from the receipt\r\n     */\r\n    function receiveMessage(bytes memory inputData) public virtual {\r\n        bytes memory message = _validateAndExtractMessage(inputData);\r\n        _processMessageFromChild(message);\r\n    }\r\n\r\n    /**\r\n     * @notice Process message received from Child Tunnel\r\n     * @dev function needs to be implemented to handle message as per requirement\r\n     * This is called by onStateReceive function.\r\n     * Since it is called via a system call, any event will not be emitted during its execution.\r\n     * @param message bytes message that was sent from Child Tunnel\r\n     */\r\n    function _processMessageFromChild(bytes memory message) virtual internal;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.3.1\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC721.sol\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function mintBabyCrow() external;\r\n\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v4.3.1\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol@v4.3.1\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC721Receiver} interface.\r\n *\r\n * Accepts all token transfers.\r\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\r\n */\r\ncontract ERC721Holder is IERC721Receiver {\r\n    /**\r\n     * @dev See {IERC721Receiver-onERC721Received}.\r\n     *\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.1\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.1\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/MadHouse.sol\r\n\r\n\r\n\r\n\r\ncontract MadHouse is ERC721Holder {}\r\n\r\n\r\n// File contracts/Breeder.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Adds Breeding functionality to Crazy Crows Chess Club\r\n * @author crispymangoes\r\n * @notice Interacts with egg carton contract on polygon using Polygon State Transfer\r\n */\r\ncontract Breeder is FxBaseRootTunnel, ERC721Holder, Ownable {\r\n    IERC721 CrowsContract;\r\n    address public madhouse;\r\n    bytes32 public constant MAKE_EGG = keccak256(\"MAKE_EGG\");\r\n    bytes32 public constant FIND_TRAITS = keccak256(\"FIND_TRAITS\");\r\n    mapping(uint256 => uint256) public breedingTimeStamp;\r\n    uint256 public bonusCoolDown = 604800;\r\n    uint256 public baseCoolDown = 2419200;\r\n    bool public matingSeason;\r\n    bool public eggCreation = false;\r\n    bool public madHouseCreation = false;\r\n\r\n    /**\r\n     * @notice emitted when owner calls adminMint\r\n     * @param tokenID the token id of the newly minted crow\r\n     */\r\n    event AdminCrowMint(uint256 tokenID);\r\n\r\n    constructor(\r\n        address _checkpointManager,\r\n        address _fxRoot,\r\n        address _fxERC721Token\r\n    ) FxBaseRootTunnel(_checkpointManager, _fxRoot) {\r\n        CrowsContract = IERC721(_fxERC721Token);\r\n        madhouse = address(new MadHouse());\r\n    }\r\n\r\n    /****************** External onlyOwner Functions ******************/\r\n    /**\r\n     * @notice used by owner to set the cool down times for egg breeding\r\n     * @param _bonus how many seconds a crow needs to wait during mating season\r\n     * @param _base how many seconds a crow needs to wait normally\r\n     */\r\n    function changeCoolDowns(uint256 _bonus, uint256 _base) external onlyOwner {\r\n        bonusCoolDown = _bonus;\r\n        baseCoolDown = _base;\r\n    }\r\n\r\n    /**\r\n     * @notice allows owner to turn egg breeding on and off\r\n     * @notice any previously existing eggs are still hatchable and useable\r\n     * it will only stop creation of new eggs\r\n     */\r\n    function changeEggCreation(bool state) external onlyOwner {\r\n        eggCreation = state;\r\n    }\r\n\r\n    /// @notice allows owner to turn mad house breeding on and off\r\n    function changeMadhouseBreedingState(bool state) external onlyOwner {\r\n        madHouseCreation = state;\r\n    }\r\n\r\n    /// @notice allows owner to toggle mating season\r\n    function changeMatingSeason(bool state) external onlyOwner {\r\n        matingSeason = state;\r\n    }\r\n\r\n    /**\r\n     * @notice allows owner to mint a crow\r\n     * @notice this will only be used to mint promotional crows for partnerships\r\n     * or to mint crows in the event of a logic error in CCCC breeding contracts\r\n     * @notice emits AdminCrowMint when called\r\n     */\r\n    function adminMint() external onlyOwner {\r\n        uint256 tID = CrowsContract.totalSupply();\r\n        CrowsContract.mintBabyCrow();\r\n        CrowsContract.safeTransferFrom(address(this), msg.sender, tID);\r\n        emit AdminCrowMint(tID);\r\n    }\r\n\r\n    /****************** External State Changing Functions ******************/\r\n    /**\r\n     * @notice burns two crows and mints caller 1 new crow\r\n     * keeping the parents two rarest traits\r\n     * @dev minted crow is blank at the start, traits are set on polygon\r\n     * @dev caller must approve breeder to spend their mom and dad crows\r\n     */\r\n    function admitToMadHouse(uint256 mom, uint256 dad) external {\r\n        require(madHouseCreation, \"MadHouse breeding not allowed\");\r\n        //Sends the parents to the mad house\r\n        CrowsContract.safeTransferFrom(msg.sender, madhouse, mom);\r\n        CrowsContract.safeTransferFrom(msg.sender, madhouse, dad);\r\n\r\n        //mint caller a baby crow\r\n        uint256 babyID = CrowsContract.totalSupply();\r\n        CrowsContract.mintBabyCrow();\r\n\r\n        //send baby crow to caller\r\n        CrowsContract.safeTransferFrom(address(this), msg.sender, babyID);\r\n\r\n        //send data to polygon so that traits can be stored on chain\r\n        bytes memory message = abi.encode(\r\n            FIND_TRAITS,\r\n            abi.encode(babyID, mom, dad)\r\n        );\r\n        _sendMessageToChild(message);\r\n    }\r\n\r\n    /**\r\n     * @notice take two crows and create an egg\r\n     * @notice egg can be hatched using DeFi nests\r\n     * @notice Eggs live on polygon\r\n     * @dev caller must own mom and dad, and mom and dad must be able to breed\r\n     * @param receiver the address you want the egg sent to on polygon\r\n     */\r\n    function makeEgg(\r\n        address receiver,\r\n        uint256 mom,\r\n        uint256 dad\r\n    ) external {\r\n        require(eggCreation, \"Egg Creation not allowed\");\r\n        //make sure mom and dad can breed\r\n        uint256 timestamp = block.timestamp;\r\n        if (matingSeason) {\r\n            require(\r\n                timestamp > (breedingTimeStamp[mom] + bonusCoolDown),\r\n                \"Mom can not breed yet\"\r\n            );\r\n            require(\r\n                timestamp > (breedingTimeStamp[dad] + bonusCoolDown),\r\n                \"Dad can not breed yet\"\r\n            );\r\n        } else {\r\n            require(\r\n                timestamp > (breedingTimeStamp[mom] + baseCoolDown),\r\n                \"Mom can not breed yet\"\r\n            );\r\n            require(\r\n                timestamp > (breedingTimeStamp[dad] + baseCoolDown),\r\n                \"Dad can not breed yet\"\r\n            );\r\n        }\r\n\r\n        //requires to make sure caller owns mom and dad\r\n        require(\r\n            CrowsContract.ownerOf(mom) == msg.sender,\r\n            \"Caller does not own mom\"\r\n        );\r\n        require(\r\n            CrowsContract.ownerOf(dad) == msg.sender,\r\n            \"Caller does not own dad\"\r\n        );\r\n\r\n        breedingTimeStamp[mom] = timestamp;\r\n        breedingTimeStamp[dad] = timestamp;\r\n\r\n        uint256 babyID = CrowsContract.totalSupply();\r\n        CrowsContract.mintBabyCrow();\r\n\r\n        bytes memory message = abi.encode(\r\n            MAKE_EGG,\r\n            abi.encode(receiver, babyID, mom, dad)\r\n        );\r\n        _sendMessageToChild(message);\r\n    }\r\n\r\n    /****************** Internal State Changing Functions ******************/\r\n    /**\r\n     * @notice callable by anyone, but egg is sent to whichever address called\r\n     *  sendHatchedEggToMainnet on egg carton\r\n     */\r\n    function _processMessageFromChild(bytes memory message) internal override {\r\n        (address caller, uint256 tID) = abi.decode(message, (address, uint256));\r\n        CrowsContract.safeTransferFrom(address(this), caller, tID);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxERC721Token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"AdminCrowMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIND_TRAITS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAKE_EGG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dad\",\"type\":\"uint256\"}],\"name\":\"admitToMadHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCoolDown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusCoolDown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"breedingTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_base\",\"type\":\"uint256\"}],\"name\":\"changeCoolDowns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"changeEggCreation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"changeMadhouseBreedingState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"changeMatingSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eggCreation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"madHouseCreation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"madhouse\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dad\",\"type\":\"uint256\"}],\"name\":\"makeEgg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matingSeason\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Breeder","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000086e4dc95c7fbdbf52e33d563bbdb00823894c287000000000000000000000000fe5e5d361b2ad62c541bab87c45a0b9b018389a2000000000000000000000000220524bdf02ccfdf009f47ad4e483439ff136a9c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7b80e528cf8d82060c3a5c65caa516c1c611a6194f2fcab285a8a417e9e532bb"}]}