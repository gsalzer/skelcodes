{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.3.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.1.0\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC998ERC721BottomUp.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC998ERC721BottomUp {\r\n    event TransferToParent(\r\n        address indexed _toContract,\r\n        uint256 indexed _toTokenId,\r\n        uint256 _tokenId\r\n    );\r\n    event TransferFromParent(\r\n        address indexed _fromContract,\r\n        uint256 indexed _fromTokenId,\r\n        uint256 _tokenId\r\n    );\r\n\r\n    function rootOwnerOf(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (bytes32 rootOwner);\r\n\r\n    /**\r\n     * The tokenOwnerOf function gets the owner of the _tokenId which can be a user address or another ERC721 token.\r\n     * The tokenOwner address return value can be either a user address or an ERC721 contract address.\r\n     * If the tokenOwner address is a user address then parentTokenId will be 0 and should not be used or considered.\r\n     * If tokenOwner address is a user address then isParent is false, otherwise isChild is true, which means that\r\n     * tokenOwner is an ERC721 contract address and _tokenId is a child of tokenOwner and parentTokenId.\r\n     */\r\n    function tokenOwnerOf(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (\r\n            bytes32 tokenOwner,\r\n            uint256 parentTokenId,\r\n            bool isParent\r\n        );\r\n\r\n    // Transfers _tokenId as a child to _toContract and _toTokenId\r\n    function transferToParent(\r\n        address _from,\r\n        address _toContract,\r\n        uint256 _toTokenId,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) external;\r\n\r\n    // Transfers _tokenId from a parent ERC721 token to a user address.\r\n    function transferFromParent(\r\n        address _fromContract,\r\n        uint256 _fromTokenId,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) external;\r\n\r\n    // Transfers _tokenId from a parent ERC721 token to a parent ERC721 token.\r\n    function transferAsChild(\r\n        address _fromContract,\r\n        uint256 _fromTokenId,\r\n        address _toContract,\r\n        uint256 _toTokenId,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC998ERC721BottomUpEnumerable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC998ERC721BottomUpEnumerable {\r\n    function totalChildTokens(address _parentContract, uint256 _parentTokenId)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function childTokenByIndex(\r\n        address _parentContract,\r\n        uint256 _parentTokenId,\r\n        uint256 _index\r\n    ) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/ComposableBottomUp.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract ComposableBottomUp is\r\n    ERC165,\r\n    IERC721,\r\n    IERC998ERC721BottomUp,\r\n    IERC998ERC721BottomUpEnumerable\r\n{\r\n    using SafeMath for uint256;\r\n    struct TokenOwner {\r\n        address tokenOwner;\r\n        uint256 parentTokenId;\r\n    }\r\n\r\n    // return this.rootOwnerOf.selector ^ this.rootOwnerOfChild.selector ^\r\n    //   this.tokenOwnerOf.selector ^ this.ownerOfChild.selector;\r\n    bytes32 constant ERC998_MAGIC_VALUE = 0x00000000000000000000000000000000000000000000000000000000cd740db5;\r\n\r\n    // tokenId => token owner\r\n    mapping(uint256 => TokenOwner) internal tokenIdToTokenOwner;\r\n\r\n    // root token owner address => (tokenId => approved address)\r\n    mapping(address => mapping(uint256 => address))\r\n        internal rootOwnerAndTokenIdToApprovedAddress;\r\n\r\n    // token owner address => token count\r\n    mapping(address => uint256) internal tokenOwnerToTokenCount;\r\n\r\n    // token owner => (operator address => bool)\r\n    mapping(address => mapping(address => bool)) internal tokenOwnerToOperators;\r\n\r\n    // parent address => (parent tokenId => array of child tokenIds)\r\n    mapping(address => mapping(uint256 => uint256[]))\r\n        private parentToChildTokenIds;\r\n\r\n    // tokenId => position in childTokens array\r\n    mapping(uint256 => uint256) private tokenIdToChildTokenIdsIndex;\r\n\r\n    // wrapper on minting new 721\r\n    /*\r\n    function mint721(address _to) public returns(uint256) {\r\n      _mint(_to, allTokens.length + 1);\r\n      return allTokens.length;\r\n    }\r\n    */\r\n    //from zepellin ERC721Receiver.sol\r\n    //old version\r\n    bytes4 constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    function isContract(address _addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function _tokenOwnerOf(uint256 _tokenId)\r\n        internal\r\n        view\r\n        returns (\r\n            address tokenOwner,\r\n            uint256 parentTokenId,\r\n            bool isParent\r\n        )\r\n    {\r\n        tokenOwner = tokenIdToTokenOwner[_tokenId].tokenOwner;\r\n        require(\r\n            tokenOwner != address(0),\r\n            \"ComposableBottomUp: _tokenOwnerOf tokenOwner zero address\"\r\n        );\r\n        parentTokenId = tokenIdToTokenOwner[_tokenId].parentTokenId;\r\n        if (parentTokenId > 0) {\r\n            isParent = true;\r\n            parentTokenId--;\r\n        } else {\r\n            isParent = false;\r\n        }\r\n        return (tokenOwner, parentTokenId, isParent);\r\n    }\r\n\r\n    function tokenOwnerOf(uint256 _tokenId)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            bytes32 tokenOwner,\r\n            uint256 parentTokenId,\r\n            bool isParent\r\n        )\r\n    {\r\n        address tokenOwnerAddress = tokenIdToTokenOwner[_tokenId].tokenOwner;\r\n        require(tokenOwnerAddress != address(0), \"ComposableBottomUp: tokenOwnerOf tokenOwnerAddress zero address\");\r\n        parentTokenId = tokenIdToTokenOwner[_tokenId].parentTokenId;\r\n        if (parentTokenId > 0) {\r\n            isParent = true;\r\n            parentTokenId--;\r\n        } else {\r\n            isParent = false;\r\n        }\r\n        return (\r\n            (ERC998_MAGIC_VALUE << 224) |\r\n                bytes32(uint256(uint160(tokenOwnerAddress))),\r\n            parentTokenId,\r\n            isParent\r\n        );\r\n    }\r\n\r\n    // Use Cases handled:\r\n    // Case 1: Token owner is this contract and no parent tokenId.\r\n    // Case 2: Token owner is this contract and token\r\n    // Case 3: Token owner is top-down composable\r\n    // Case 4: Token owner is an unknown contract\r\n    // Case 5: Token owner is a user\r\n    // Case 6: Token owner is a bottom-up composable\r\n    // Case 7: Token owner is ERC721 token owned by top-down token\r\n    // Case 8: Token owner is ERC721 token owned by unknown contract\r\n    // Case 9: Token owner is ERC721 token owned by user\r\n    function rootOwnerOf(uint256 _tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (bytes32 rootOwner)\r\n    {\r\n        address rootOwnerAddress = tokenIdToTokenOwner[_tokenId].tokenOwner;\r\n        require(\r\n            rootOwnerAddress != address(0),\r\n            \"ComposableBottomUp: rootOwnerOf rootOwnerAddress zero address\"\r\n        );\r\n        uint256 parentTokenId = tokenIdToTokenOwner[_tokenId].parentTokenId;\r\n        bool isParent = parentTokenId > 0;\r\n        parentTokenId--;\r\n        bytes memory callData;\r\n        bytes memory data;\r\n        bool callSuccess;\r\n\r\n        if ((rootOwnerAddress == address(this))) {\r\n            do {\r\n                if (isParent == false) {\r\n                    // Case 1: Token owner is this contract and no token.\r\n                    // This case should not happen.\r\n                    return\r\n                        (ERC998_MAGIC_VALUE << 224) |\r\n                        bytes32(uint256(uint160(rootOwnerAddress)));\r\n                } else {\r\n                    // Case 2: Token owner is this contract and token\r\n                    (rootOwnerAddress, parentTokenId, isParent) = _tokenOwnerOf(\r\n                        parentTokenId\r\n                    );\r\n                }\r\n            } while (rootOwnerAddress == address(this));\r\n            _tokenId = parentTokenId;\r\n        }\r\n\r\n        if (isParent == false) {\r\n            // success if this token is owned by a top-down token\r\n            // 0xed81cdda == rootOwnerOfChild(address, uint256)\r\n            callData = abi.encodeWithSelector(\r\n                0xed81cdda,\r\n                address(this),\r\n                _tokenId\r\n            );\r\n            (callSuccess, data) = rootOwnerAddress.staticcall(callData);\r\n            if (callSuccess) {\r\n                assembly {\r\n                    rootOwner := mload(add(data, 0x20))\r\n                }\r\n            }\r\n            if (callSuccess == true && rootOwner >> 224 == ERC998_MAGIC_VALUE) {\r\n                // Case 3: Token owner is top-down composable\r\n                return rootOwner;\r\n            } else {\r\n                // Case 4: Token owner is an unknown contract\r\n                // Or\r\n                // Case 5: Token owner is a user\r\n                return\r\n                    (ERC998_MAGIC_VALUE << 224) |\r\n                    bytes32(uint256(uint160(rootOwnerAddress)));\r\n            }\r\n        } else {\r\n            // 0x43a61a8e == rootOwnerOf(uint256)\r\n            callData = abi.encodeWithSelector(0x43a61a8e, parentTokenId);\r\n            (callSuccess, data) = rootOwnerAddress.staticcall(callData);\r\n            if (callSuccess) {\r\n                assembly {\r\n                    rootOwner := mload(add(data, 0x20))\r\n                }\r\n            }\r\n            if (callSuccess == true && rootOwner >> 224 == ERC998_MAGIC_VALUE) {\r\n                // Case 6: Token owner is a bottom-up composable\r\n                // Or\r\n                // Case 2: Token owner is top-down composable\r\n                return rootOwner;\r\n            } else {\r\n                // token owner is ERC721\r\n                address childContract = rootOwnerAddress;\r\n                //0x6352211e == \"ownerOf(uint256)\"\r\n                callData = abi.encodeWithSelector(0x6352211e, parentTokenId);\r\n                (callSuccess, data) = rootOwnerAddress.staticcall(callData);\r\n                if (callSuccess) {\r\n                    assembly {\r\n                        rootOwnerAddress := mload(add(data, 0x20))\r\n                    }\r\n                }\r\n                require(callSuccess, \"Call to ownerOf failed\");\r\n\r\n                // 0xed81cdda == rootOwnerOfChild(address,uint256)\r\n                callData = abi.encodeWithSelector(\r\n                    0xed81cdda,\r\n                    childContract,\r\n                    parentTokenId\r\n                );\r\n\r\n                (callSuccess, data) = rootOwnerAddress.staticcall(callData);\r\n                if (callSuccess) {\r\n                    assembly {\r\n                        rootOwner := mload(add(data, 0x20))\r\n                    }\r\n                }\r\n                if (\r\n                    callSuccess == true &&\r\n                    rootOwner >> 224 == ERC998_MAGIC_VALUE\r\n                ) {\r\n                    // Case 7: Token owner is ERC721 token owned by top-down token\r\n                    return rootOwner;\r\n                } else {\r\n                    // Case 8: Token owner is ERC721 token owned by unknown contract\r\n                    // Or\r\n                    // Case 9: Token owner is ERC721 token owned by user\r\n                    return\r\n                        (ERC998_MAGIC_VALUE << 224) |\r\n                        bytes32(uint256(uint160(rootOwnerAddress)));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * In a bottom-up composable authentication to transfer etc. is done by getting the rootOwner by finding the parent token\r\n     * and then the parent token of that one until a final owner address is found.  If the msg.sender is the rootOwner or is\r\n     * approved by the rootOwner then msg.sender is authenticated and the action can occur.\r\n     * This enables the owner of the top-most parent of a tree of composables to call any method on child composables.\r\n     */\r\n    // returns the root owner at the top of the tree of composables\r\n    function ownerOf(uint256 _tokenId) external view override returns (address) {\r\n        address tokenOwner = tokenIdToTokenOwner[_tokenId].tokenOwner;\r\n        require(\r\n            tokenOwner != address(0),\r\n            \"ComposableBottomUp: ownerOf tokenOwner zero address\"\r\n        );\r\n        return tokenOwner;\r\n    }\r\n\r\n    function balanceOf(address _tokenOwner)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            _tokenOwner != address(0),\r\n            \"ComposableBottomUp: balanceOf _tokenOwner zero address\"\r\n        );\r\n        return tokenOwnerToTokenCount[_tokenOwner];\r\n    }\r\n\r\n    function approve(address _approved, uint256 _tokenId) external override {\r\n        address tokenOwner = tokenIdToTokenOwner[_tokenId].tokenOwner;\r\n        require(tokenOwner != address(0), \"ComposableBottomUp: approve tokenOwner zero address\");\r\n        address rootOwner = address(uint160(uint256(rootOwnerOf(_tokenId))));\r\n        require(\r\n            rootOwner == msg.sender ||\r\n                tokenOwnerToOperators[rootOwner][msg.sender],\r\n            \"ComposableBottomUp: approve msg.sender not eligible\"\r\n        );\r\n\r\n        rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId] = _approved;\r\n        emit Approval(rootOwner, _approved, _tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 _tokenId)\r\n        external\r\n        view\r\n        override\r\n        returns (address)\r\n    {\r\n        address rootOwner = address(uint160(uint256(rootOwnerOf(_tokenId))));\r\n        return rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address _operator, bool _approved)\r\n        external\r\n        override\r\n    {\r\n        require(_operator != address(0), \"ComposableBottomUp: setApprovalForAll _operator zero address\");\r\n        tokenOwnerToOperators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address _operator)\r\n        external\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        require(_owner != address(0), \"ComposableBottomUp: isApprovedForAll _owner zero address\");\r\n        require(_operator != address(0), \"ComposableBottomUp: isApprovedForAll _operator zero address\");\r\n        return tokenOwnerToOperators[_owner][_operator];\r\n    }\r\n\r\n    function removeChild(\r\n        address _fromContract,\r\n        uint256 _fromTokenId,\r\n        uint256 _tokenId\r\n    ) internal {\r\n        uint256 childTokenIndex = tokenIdToChildTokenIdsIndex[_tokenId];\r\n        uint256 lastChildTokenIndex =\r\n            parentToChildTokenIds[_fromContract][_fromTokenId].length - 1;\r\n        uint256 lastChildTokenId =\r\n            parentToChildTokenIds[_fromContract][_fromTokenId][\r\n                lastChildTokenIndex\r\n            ];\r\n\r\n        if (_tokenId != lastChildTokenId) {\r\n            parentToChildTokenIds[_fromContract][_fromTokenId][\r\n                childTokenIndex\r\n            ] = lastChildTokenId;\r\n            tokenIdToChildTokenIdsIndex[lastChildTokenId] = childTokenIndex;\r\n        }\r\n        // parentToChildTokenIds[_fromContract][_fromTokenId].length--;\r\n        // added:\r\n        parentToChildTokenIds[_fromContract][_fromTokenId].pop();\r\n    }\r\n\r\n    function authenticateAndClearApproval(uint256 _tokenId) private {\r\n        address rootOwner = address(uint160(uint256(rootOwnerOf(_tokenId))));\r\n        address approvedAddress =\r\n            rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId];\r\n        require(\r\n            rootOwner == msg.sender ||\r\n                tokenOwnerToOperators[rootOwner][msg.sender] ||\r\n                approvedAddress == msg.sender,\r\n            \"ComposableBottomUp: authenticateAndClearApproval msg.sender not eligible\"\r\n        );\r\n\r\n        // clear approval\r\n        if (approvedAddress != address(0)) {\r\n            delete rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId];\r\n            emit Approval(rootOwner, address(0), _tokenId);\r\n        }\r\n    }\r\n\r\n    function transferFromParent(\r\n        address _fromContract,\r\n        uint256 _fromTokenId,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) external override {\r\n        require(tokenIdToTokenOwner[_tokenId].tokenOwner == _fromContract, \"ComposableBottomUp: transferFromParent tokenOwner != _fromContract\");\r\n        require(_to != address(0), \"ComposableBottomUp: transferFromParent _to zero address\");\r\n        uint256 parentTokenId = tokenIdToTokenOwner[_tokenId].parentTokenId;\r\n        require(parentTokenId != 0, \"ComposableBottomUp: transferFromParent token does not have a parent token.\");\r\n        require(parentTokenId - 1 == _fromTokenId, \"ComposableBottomUp: transferFromParent _fromTokenId not matching parentTokenId\");\r\n        authenticateAndClearApproval(_tokenId);\r\n\r\n        // remove and transfer token\r\n        if (_fromContract != _to) {\r\n            assert(tokenOwnerToTokenCount[_fromContract] > 0);\r\n            tokenOwnerToTokenCount[_fromContract]--;\r\n            tokenOwnerToTokenCount[_to]++;\r\n        }\r\n\r\n        tokenIdToTokenOwner[_tokenId].tokenOwner = _to;\r\n        tokenIdToTokenOwner[_tokenId].parentTokenId = 0;\r\n\r\n        removeChild(_fromContract, _fromTokenId, _tokenId);\r\n        delete tokenIdToChildTokenIdsIndex[_tokenId];\r\n\r\n        if (isContract(_to)) {\r\n            bytes4 retval =\r\n                IERC721Receiver(_to).onERC721Received(\r\n                    msg.sender,\r\n                    _fromContract,\r\n                    _tokenId,\r\n                    _data\r\n                );\r\n            require(retval == ERC721_RECEIVED, \"ComposableBottomUp: transferFromParent onERC721Received invalid value\");\r\n        }\r\n\r\n        emit Transfer(_fromContract, _to, _tokenId);\r\n        emit TransferFromParent(_fromContract, _fromTokenId, _tokenId);\r\n    }\r\n\r\n    function transferToParent(\r\n        address _from,\r\n        address _toContract,\r\n        uint256 _toTokenId,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) external override {\r\n        require(_from != address(0), \"ComposableBottomUp: transferToParent _from zero address\");\r\n        require(tokenIdToTokenOwner[_tokenId].tokenOwner == _from, \"ComposableBottomUp: transferToParent tokenOwner != _from\");\r\n        require(_toContract != address(0), \"ComposableBottomUp: transferToParent _toContract zero address\");\r\n        require(\r\n            tokenIdToTokenOwner[_tokenId].parentTokenId == 0,\r\n            \"ComposableBottomUp: transferToParent Cannot transfer from address when owned by a token.\"\r\n        );\r\n        address approvedAddress =\r\n            rootOwnerAndTokenIdToApprovedAddress[_from][_tokenId];\r\n        if (msg.sender != _from) {\r\n            // 0xed81cdda == rootOwnerOfChild(address,uint256)\r\n            bytes memory callData =\r\n                abi.encodeWithSelector(0xed81cdda, address(this), _tokenId);\r\n            (bool callSuccess, bytes memory data) = _from.staticcall(callData);\r\n            if (callSuccess == true) {\r\n                bytes32 rootOwner;\r\n                assembly {\r\n                    rootOwner := mload(add(data, 0x20))\r\n                }\r\n                require(\r\n                    rootOwner >> 224 != ERC998_MAGIC_VALUE,\r\n                    \"ComposableBottomUp: transferToParent Token is child of other top down composable\"\r\n                );\r\n            }\r\n            require(\r\n                tokenOwnerToOperators[_from][msg.sender] ||\r\n                    approvedAddress == msg.sender,\r\n                    \"ComposableBottomUp: transferToParent msg.sender is not eligible\"\r\n            );\r\n        }\r\n\r\n        // clear approval\r\n        if (approvedAddress != address(0)) {\r\n            delete rootOwnerAndTokenIdToApprovedAddress[_from][_tokenId];\r\n            emit Approval(_from, address(0), _tokenId);\r\n        }\r\n\r\n        // remove and transfer token\r\n        if (_from != _toContract) {\r\n            assert(tokenOwnerToTokenCount[_from] > 0);\r\n            tokenOwnerToTokenCount[_from]--;\r\n            tokenOwnerToTokenCount[_toContract]++;\r\n        }\r\n        TokenOwner memory parentToken =\r\n            TokenOwner(_toContract, _toTokenId.add(1));\r\n        tokenIdToTokenOwner[_tokenId] = parentToken;\r\n        uint256 index = parentToChildTokenIds[_toContract][_toTokenId].length;\r\n        parentToChildTokenIds[_toContract][_toTokenId].push(_tokenId);\r\n        tokenIdToChildTokenIdsIndex[_tokenId] = index;\r\n\r\n        require(\r\n            IERC721(_toContract).ownerOf(_toTokenId) != address(0),\r\n            \"ComposableBottomUp: transferToParent _toTokenId does not exist\"\r\n        );\r\n\r\n        emit Transfer(_from, _toContract, _tokenId);\r\n        emit TransferToParent(_toContract, _toTokenId, _tokenId);\r\n    }\r\n\r\n    function transferAsChild(\r\n        address _fromContract,\r\n        uint256 _fromTokenId,\r\n        address _toContract,\r\n        uint256 _toTokenId,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) external override {\r\n        require(tokenIdToTokenOwner[_tokenId].tokenOwner == _fromContract, \"ComposableBottomUp: transferAsChild tokenOwner != _fromContract\");\r\n        require(_toContract != address(0), \"ComposableBottomUp: transferAsChild _toContract zero address\");\r\n        uint256 parentTokenId = tokenIdToTokenOwner[_tokenId].parentTokenId;\r\n        require(parentTokenId > 0, \"ComposableBottomUp: transferAsChild No parent token to transfer from.\");\r\n        require(parentTokenId - 1 == _fromTokenId, \"ComposableBottomUp: transferAsChild parentTokenId != _fromTokenId\");\r\n        address rootOwner = address(uint160(uint256(rootOwnerOf(_tokenId))));\r\n        address approvedAddress =\r\n            rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId];\r\n        require(\r\n            rootOwner == msg.sender ||\r\n                tokenOwnerToOperators[rootOwner][msg.sender] ||\r\n                approvedAddress == msg.sender,\r\n                \"ComposableBottomUp: transferAsChild msg.sender not eligible\"\r\n        );\r\n        // clear approval\r\n        if (approvedAddress != address(0)) {\r\n            delete rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId];\r\n            emit Approval(rootOwner, address(0), _tokenId);\r\n        }\r\n\r\n        // remove and transfer token\r\n        if (_fromContract != _toContract) {\r\n            assert(tokenOwnerToTokenCount[_fromContract] > 0);\r\n            tokenOwnerToTokenCount[_fromContract]--;\r\n            tokenOwnerToTokenCount[_toContract]++;\r\n        }\r\n\r\n        TokenOwner memory parentToken = TokenOwner(_toContract, _toTokenId);\r\n        tokenIdToTokenOwner[_tokenId] = parentToken;\r\n\r\n        removeChild(_fromContract, _fromTokenId, _tokenId);\r\n\r\n        //add to parentToChildTokenIds\r\n        uint256 index = parentToChildTokenIds[_toContract][_toTokenId].length;\r\n        parentToChildTokenIds[_toContract][_toTokenId].push(_tokenId);\r\n        tokenIdToChildTokenIdsIndex[_tokenId] = index;\r\n\r\n        require(\r\n            IERC721(_toContract).ownerOf(_toTokenId) != address(0),\r\n            \"ComposableBottomUp: transferAsChild _toTokenId does not exist\"\r\n        );\r\n\r\n        emit Transfer(_fromContract, _toContract, _tokenId);\r\n        emit TransferFromParent(_fromContract, _fromTokenId, _tokenId);\r\n        emit TransferToParent(_toContract, _toTokenId, _tokenId);\r\n    }\r\n\r\n    function _transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) private {\r\n        require(_from != address(0), \"ComposableBottomUp: _transferFrom _from zero address\");\r\n        require(tokenIdToTokenOwner[_tokenId].tokenOwner == _from, \"ComposableBottomUp: _transferFrom tokenOwner != _from\");\r\n        require(\r\n            tokenIdToTokenOwner[_tokenId].parentTokenId == 0,\r\n            \"ComposableBottomUp: _transferFrom Cannot transfer from address when owned by a token.\"\r\n        );\r\n        require(_to != address(0), \"ComposableBottomUp: _transferFrom _to zero address\");\r\n        address approvedAddress =\r\n            rootOwnerAndTokenIdToApprovedAddress[_from][_tokenId];\r\n        if (msg.sender != _from) {\r\n            // 0xed81cdda == rootOwnerOfChild(address,uint256)\r\n            bytes memory callData =\r\n                abi.encodeWithSelector(0xed81cdda, address(this), _tokenId);\r\n            (bool callSuccess, bytes memory data) = _from.staticcall(callData);\r\n            if (callSuccess == true) {\r\n                bytes32 rootOwner;\r\n                if (callSuccess) {\r\n                    assembly {\r\n                        rootOwner := mload(add(data, 0x20))\r\n                    }\r\n                }\r\n                require(\r\n                    rootOwner >> 224 != ERC998_MAGIC_VALUE,\r\n                    \"ComposableBottomUp: _transferFrom Token is child of other top down composable\"\r\n                );\r\n            }\r\n            require(\r\n                tokenOwnerToOperators[_from][msg.sender] ||\r\n                    approvedAddress == msg.sender,\r\n                    \"ComposableBottomUp: _transferFrom msg.sender not eligible\"\r\n            );\r\n        }\r\n\r\n        // clear approval\r\n        if (approvedAddress != address(0)) {\r\n            delete rootOwnerAndTokenIdToApprovedAddress[_from][_tokenId];\r\n            emit Approval(_from, address(0), _tokenId);\r\n        }\r\n\r\n        // remove and transfer token\r\n        if (_from != _to) {\r\n            assert(tokenOwnerToTokenCount[_from] > 0);\r\n            tokenOwnerToTokenCount[_from]--;\r\n            tokenIdToTokenOwner[_tokenId].tokenOwner = _to;\r\n            tokenOwnerToTokenCount[_to]++;\r\n        }\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) external override {\r\n        _transferFrom(_from, _to, _tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) external override {\r\n        _transferFrom(_from, _to, _tokenId);\r\n        if (isContract(_to)) {\r\n            bytes4 retval =\r\n                IERC721Receiver(_to).onERC721Received(\r\n                    msg.sender,\r\n                    _from,\r\n                    _tokenId,\r\n                    \"\"\r\n                );\r\n            require(retval == ERC721_RECEIVED, \"ComposableBottomUp: safeTransferFrom(3) onERC721Received invalid value\");\r\n        }\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) external override {\r\n        _transferFrom(_from, _to, _tokenId);\r\n        if (isContract(_to)) {\r\n            bytes4 retval =\r\n                IERC721Receiver(_to).onERC721Received(\r\n                    msg.sender,\r\n                    _from,\r\n                    _tokenId,\r\n                    _data\r\n                );\r\n            require(retval == ERC721_RECEIVED, \"ComposableBottomUp: safeTransferFrom(4) onERC721Received invalid value\");\r\n        }\r\n    }\r\n\r\n    function totalChildTokens(address _parentContract, uint256 _parentTokenId)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return parentToChildTokenIds[_parentContract][_parentTokenId].length;\r\n    }\r\n\r\n    function childTokenByIndex(\r\n        address _parentContract,\r\n        uint256 _parentTokenId,\r\n        uint256 _index\r\n    ) external view override returns (uint256) {\r\n        require(\r\n            parentToChildTokenIds[_parentContract][_parentTokenId].length >\r\n                _index,\r\n                \"ComposableBottomUp: childTokenByIndex invalid _index\"\r\n        );\r\n        return parentToChildTokenIds[_parentContract][_parentTokenId][_index];\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/structs/EnumerableSet.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20AndERC223.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20AndERC223 {\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        external\r\n        view\r\n        returns (uint256 remaining);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC998ERC20TopDown.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC998ERC20TopDown {\r\n    event ReceivedERC20(address indexed _from, uint256 indexed _tokenId, address indexed _erc20Contract, uint256 _value);\r\n    event TransferERC20(uint256 indexed _tokenId, address indexed _to, address indexed _erc20Contract, uint256 _value);\r\n\r\n    function tokenFallback(address _from, uint256 _value, bytes memory _data) external;\r\n    function balanceOfERC20(uint256 _tokenId, address _erc20Contract) external view returns (uint256);\r\n    function transferERC20(uint256 _tokenId, address _to, address _erc20Contract, uint256 _value) external;\r\n    function transferERC223(uint256 _tokenId, address _to, address _erc223Contract, uint256 _value, bytes memory _data) external;\r\n    function getERC20(address _from, uint256 _tokenId, address _erc20Contract, uint256 _value) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC998ERC20TopDownEnumerable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC998ERC20TopDownEnumerable {\r\n    function totalERC20Contracts(uint256 _tokenId) external view returns (uint256);\r\n    function erc20ContractByIndex(uint256 _tokenId, uint256 _index) external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC998ERC721TopDown.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC998ERC721TopDown {\r\n    event ReceivedChild(\r\n        address indexed _from,\r\n        uint256 indexed _tokenId,\r\n        address indexed _childContract,\r\n        uint256 _childTokenId\r\n    );\r\n    event TransferChild(\r\n        uint256 indexed tokenId,\r\n        address indexed _to,\r\n        address indexed _childContract,\r\n        uint256 _childTokenId\r\n    );\r\n\r\n    function rootOwnerOf(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (bytes32 rootOwner);\r\n\r\n    function rootOwnerOfChild(address _childContract, uint256 _childTokenId)\r\n        external\r\n        view\r\n        returns (bytes32 rootOwner);\r\n\r\n    function ownerOfChild(address _childContract, uint256 _childTokenId)\r\n        external\r\n        view\r\n        returns (bytes32 parentTokenOwner, uint256 parentTokenId);\r\n\r\n    function onERC721Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _childTokenId,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n\r\n    function transferChild(\r\n        uint256 _fromTokenId,\r\n        address _to,\r\n        address _childContract,\r\n        uint256 _childTokenId\r\n    ) external;\r\n\r\n    function safeTransferChild(\r\n        uint256 _fromTokenId,\r\n        address _to,\r\n        address _childContract,\r\n        uint256 _childTokenId\r\n    ) external;\r\n\r\n    function safeTransferChild(\r\n        uint256 _fromTokenId,\r\n        address _to,\r\n        address _childContract,\r\n        uint256 _childTokenId,\r\n        bytes memory _data\r\n    ) external;\r\n\r\n    function transferChildToParent(\r\n        uint256 _fromTokenId,\r\n        address _toContract,\r\n        uint256 _toTokenId,\r\n        address _childContract,\r\n        uint256 _childTokenId,\r\n        bytes memory _data\r\n    ) external;\r\n\r\n    // getChild function enables older contracts like cryptokitties to be transferred into a composable\r\n    // The _childContract must approve this contract. Then getChild can be called.\r\n    function getChild(\r\n        address _from,\r\n        uint256 _tokenId,\r\n        address _childContract,\r\n        uint256 _childTokenId\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC998ERC721TopDownEnumerable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC998ERC721TopDownEnumerable {\r\n    function totalChildContracts(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function childContractByIndex(uint256 _tokenId, uint256 _index)\r\n        external\r\n        view\r\n        returns (address childContract);\r\n\r\n    function totalChildTokens(uint256 _tokenId, address _childContract)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function childTokenByIndex(\r\n        uint256 _tokenId,\r\n        address _childContract,\r\n        uint256 _index\r\n    ) external view returns (uint256 childTokenId);\r\n}\r\n\r\n\r\n// File contracts/ComposableTopDown.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ComposableTopDown is\r\n    ERC165,\r\n    IERC721,\r\n    IERC998ERC721TopDown,\r\n    IERC998ERC721TopDownEnumerable,\r\n    IERC998ERC20TopDown,\r\n    IERC998ERC20TopDownEnumerable,\r\n    IERC721Metadata\r\n{\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    // return this.rootOwnerOf.selector ^ this.rootOwnerOfChild.selector ^\r\n    //   this.tokenOwnerOf.selector ^ this.ownerOfChild.selector;\r\n    bytes4 constant ERC998_MAGIC_VALUE = 0xcd740db5;\r\n    bytes32 constant ERC998_MAGIC_VALUE_32 = 0xcd740db500000000000000000000000000000000000000000000000000000000;\r\n\r\n    uint256 tokenCount = 0;\r\n\r\n    // tokenId => token owner\r\n    mapping(uint256 => address) private tokenIdToTokenOwner;\r\n\r\n    // tokenId => last state hash indicator\r\n    mapping(uint256 => uint256) private tokenIdToStateHash;\r\n\r\n    // root token owner address => (tokenId => approved address)\r\n    mapping(address => mapping(uint256 => address))\r\n        private rootOwnerAndTokenIdToApprovedAddress;\r\n\r\n    // token owner address => token count\r\n    mapping(address => uint256) private tokenOwnerToTokenCount;\r\n\r\n    // token owner => (operator address => bool)\r\n    mapping(address => mapping(address => bool)) private tokenOwnerToOperators;\r\n\r\n    // mapping for token URIs\r\n    mapping(uint256 => string) private tokenURIs;\r\n\r\n    // Token name\r\n    string public override name;\r\n\r\n    // Token symbol\r\n    string public override symbol;\r\n\r\n    constructor(string memory _name, string memory _symbol) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function safeMint(address _to, string memory _tokenURI) external returns (uint256) {\r\n        return _safeMint(_to, _tokenURI);\r\n    }\r\n\r\n    function safeMint(address _to) external returns (uint256) {\r\n        return _safeMint(_to, '');\r\n    }\r\n\r\n    function _safeMint(address _to, string memory _tokenURI) internal returns (uint256) {\r\n        require(_to != address(0), \"ComposableTopDown: _to zero address\");\r\n        tokenCount++;\r\n        uint256 tokenCount_ = tokenCount;\r\n        tokenIdToTokenOwner[tokenCount_] = _to;\r\n        tokenOwnerToTokenCount[_to]++;\r\n        tokenIdToStateHash[tokenCount] = uint256(keccak256(abi.encodePacked(uint256(uint160(address(this))), tokenCount)));\r\n        if (bytes(_tokenURI).length > 0) {\r\n            tokenURIs[tokenCount_] = _tokenURI;\r\n        }\r\n\r\n        emit Transfer(address(0), _to, tokenCount_);\r\n        require(_checkOnERC721Received(address(0), _to, tokenCount_, \"\"), \"ComposableTopDown: transfer to non ERC721Receiver implementer\");\r\n        return tokenCount_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external override view returns (string memory) {\r\n        require(tokenIdToTokenOwner[tokenId] != address(0), \"ComposableTopDown: URI query for nonexistent token\");\r\n        string memory _tokenURI = tokenURIs[tokenId];\r\n        require(bytes(_tokenURI).length > 0, \"ComposableTopDown: URI is not set\");\r\n        return _tokenURI;\r\n    }\r\n\r\n\r\n    //from zepellin ERC721Receiver.sol\r\n    //old version\r\n    bytes4 constant ERC721_RECEIVED_OLD = 0xf0b9e5ba;\r\n    //new version\r\n    bytes4 constant ERC721_RECEIVED_NEW = 0x150b7a02;\r\n\r\n    bytes4 constant ALLOWANCE = bytes4(keccak256(\"allowance(address,address)\"));\r\n    bytes4 constant APPROVE = bytes4(keccak256(\"approve(address,uint256)\"));\r\n    bytes4 constant ROOT_OWNER_OF_CHILD =\r\n        bytes4(keccak256(\"rootOwnerOfChild(address,uint256)\"));\r\n\r\n    ////////////////////////////////////////////////////////\r\n    // ERC721 implementation\r\n    ////////////////////////////////////////////////////////\r\n    function rootOwnerOf(uint256 _tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (bytes32 rootOwner)\r\n    {\r\n        return rootOwnerOfChild(address(0), _tokenId);\r\n    }\r\n\r\n    // returns the owner at the top of the tree of composables\r\n    // Use Cases handled:\r\n    // Case 1: Token owner is this contract and token.\r\n    // Case 2: Token owner is other top-down composable\r\n    // Case 3: Token owner is other contract\r\n    // Case 4: Token owner is user\r\n    function rootOwnerOfChild(address _childContract, uint256 _childTokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (bytes32 rootOwner)\r\n    {\r\n        address rootOwnerAddress;\r\n        if (_childContract != address(0)) {\r\n            (rootOwnerAddress, _childTokenId) = _ownerOfChild(\r\n                _childContract,\r\n                _childTokenId\r\n            );\r\n        } else {\r\n            rootOwnerAddress = tokenIdToTokenOwner[_childTokenId];\r\n            require(rootOwnerAddress != address(0), \"ComposableTopDown: ownerOf _tokenId zero address\");\r\n        }\r\n        // Case 1: Token owner is this contract and token.\r\n        while (rootOwnerAddress == address(this)) {\r\n            (rootOwnerAddress, _childTokenId) = _ownerOfChild(\r\n                rootOwnerAddress,\r\n                _childTokenId\r\n            );\r\n        }\r\n        bytes memory callData =\r\n            abi.encodeWithSelector(\r\n                ROOT_OWNER_OF_CHILD,\r\n                address(this),\r\n                _childTokenId\r\n            );\r\n        (bool callSuccess, bytes memory data) =\r\n            rootOwnerAddress.staticcall(callData);\r\n        if (callSuccess) {\r\n            assembly {\r\n                rootOwner := mload(add(data, 0x20))\r\n            }\r\n        }\r\n\r\n        if (callSuccess == true && rootOwner & 0xffffffff00000000000000000000000000000000000000000000000000000000 == ERC998_MAGIC_VALUE_32) {\r\n            // Case 2: Token owner is other top-down composable\r\n            return rootOwner;\r\n        } else {\r\n            // Case 3: Token owner is other contract\r\n            // Or\r\n            // Case 4: Token owner is user\r\n            assembly {\r\n                rootOwner := or(ERC998_MAGIC_VALUE_32, rootOwnerAddress)\r\n            }\r\n        }\r\n    }\r\n\r\n    // returns the owner at the top of the tree of composables\r\n\r\n    function ownerOf(uint256 _tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (address tokenOwner)\r\n    {\r\n        tokenOwner = tokenIdToTokenOwner[_tokenId];\r\n        require(\r\n            tokenOwner != address(0),\r\n            \"ComposableTopDown: ownerOf _tokenId zero address\"\r\n        );\r\n        return tokenOwner;\r\n    }\r\n\r\n    function balanceOf(address _tokenOwner)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            _tokenOwner != address(0),\r\n            \"ComposableTopDown: balanceOf _tokenOwner zero address\"\r\n        );\r\n        return tokenOwnerToTokenCount[_tokenOwner];\r\n    }\r\n\r\n    function approve(address _approved, uint256 _tokenId) external override {\r\n        address rootOwner = address(uint160(uint256(rootOwnerOf(_tokenId))));\r\n        require(\r\n            rootOwner == msg.sender ||\r\n                tokenOwnerToOperators[rootOwner][msg.sender],\r\n            \"ComposableTopDown: approve msg.sender not owner\"\r\n        );\r\n        rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId] = _approved;\r\n        emit Approval(rootOwner, _approved, _tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 _tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (address)\r\n    {\r\n        address rootOwner = address(uint160(uint256(rootOwnerOf(_tokenId))));\r\n        return rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address _operator, bool _approved)\r\n        external\r\n        override\r\n    {\r\n        require(\r\n            _operator != address(0),\r\n            \"ComposableTopDown: setApprovalForAll _operator zero address\"\r\n        );\r\n        tokenOwnerToOperators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address _operator)\r\n        external\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _owner != address(0),\r\n            \"ComposableTopDown: isApprovedForAll _owner zero address\"\r\n        );\r\n        require(\r\n            _operator != address(0),\r\n            \"ComposableTopDown: isApprovedForAll _operator zero address\"\r\n        );\r\n        return tokenOwnerToOperators[_owner][_operator];\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public override {\r\n        _transferFrom(_from, _to, _tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public override {\r\n        _transferFrom(_from, _to, _tokenId);\r\n        if (_to.isContract()) {\r\n            bytes4 retval =\r\n                IERC721Receiver(_to).onERC721Received(\r\n                    msg.sender,\r\n                    _from,\r\n                    _tokenId,\r\n                    \"\"\r\n                );\r\n            require(\r\n                retval == ERC721_RECEIVED_OLD || retval == ERC721_RECEIVED_NEW,\r\n                \"ComposableTopDown: safeTransferFrom(3) onERC721Received invalid return value\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) public override {\r\n        _transferFrom(_from, _to, _tokenId);\r\n        if (_to.isContract()) {\r\n            bytes4 retval =\r\n                IERC721Receiver(_to).onERC721Received(\r\n                    msg.sender,\r\n                    _from,\r\n                    _tokenId,\r\n                    _data\r\n                );\r\n            require(\r\n                retval == ERC721_RECEIVED_OLD || retval == ERC721_RECEIVED_NEW,\r\n                \"ComposableTopDown: safeTransferFrom(4) onERC721Received invalid return value\"\r\n            );\r\n            rootOwnerOf(_tokenId);\r\n        }\r\n    }\r\n\r\n    function _transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) private {\r\n        require(\r\n            _from != address(0),\r\n            \"ComposableTopDown: _transferFrom _from zero address\"\r\n        );\r\n        require(\r\n            tokenIdToTokenOwner[_tokenId] == _from,\r\n            \"ComposableTopDown: _transferFrom _from not owner\"\r\n        );\r\n        require(\r\n            _to != address(0),\r\n            \"ComposableTopDown: _transferFrom _to zero address\"\r\n        );\r\n\r\n        if (msg.sender != _from) {\r\n            bytes memory callData =\r\n                abi.encodeWithSelector(\r\n                    ROOT_OWNER_OF_CHILD,\r\n                    address(this),\r\n                    _tokenId\r\n                );\r\n            (bool callSuccess, bytes memory data) = _from.staticcall(callData);\r\n            if (callSuccess == true) {\r\n                bytes32 rootOwner;\r\n                assembly {\r\n                    rootOwner := mload(add(data, 0x20))\r\n                }\r\n                require(\r\n                    rootOwner & 0xffffffff00000000000000000000000000000000000000000000000000000000 != ERC998_MAGIC_VALUE_32,\r\n                    \"ComposableTopDown: _transferFrom token is child of other top down composable\"\r\n                );\r\n            }\r\n\r\n            require(\r\n                tokenOwnerToOperators[_from][msg.sender] ||\r\n                    rootOwnerAndTokenIdToApprovedAddress[_from][_tokenId] ==\r\n                    msg.sender,\r\n                \"ComposableTopDown: _transferFrom msg.sender not approved\"\r\n            );\r\n        }\r\n\r\n        // clear approval\r\n        if (\r\n            rootOwnerAndTokenIdToApprovedAddress[_from][_tokenId] != address(0)\r\n        ) {\r\n            delete rootOwnerAndTokenIdToApprovedAddress[_from][_tokenId];\r\n            emit Approval(_from, address(0), _tokenId);\r\n        }\r\n\r\n        // remove and transfer token\r\n        if (_from != _to) {\r\n            assert(tokenOwnerToTokenCount[_from] > 0);\r\n            tokenOwnerToTokenCount[_from]--;\r\n            tokenIdToTokenOwner[_tokenId] = _to;\r\n            tokenOwnerToTokenCount[_to]++;\r\n        }\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////\r\n    // ERC998ERC721 and ERC998ERC721Enumerable implementation\r\n    ////////////////////////////////////////////////////////\r\n\r\n    // tokenId => child contract\r\n    mapping(uint256 => EnumerableSet.AddressSet) private childContracts;\r\n\r\n    // tokenId => (child address => array of child tokens)\r\n    mapping(uint256 => mapping(address => EnumerableSet.UintSet))\r\n        private childTokens;\r\n\r\n    // child address => childId => tokenId\r\n    mapping(address => mapping(uint256 => uint256)) private childTokenOwner;\r\n\r\n    function safeTransferChild(\r\n        uint256 _fromTokenId,\r\n        address _to,\r\n        address _childContract,\r\n        uint256 _childTokenId\r\n    ) external override {\r\n        _transferChild(_fromTokenId, _to, _childContract, _childTokenId);\r\n        IERC721(_childContract).safeTransferFrom(\r\n            address(this),\r\n            _to,\r\n            _childTokenId\r\n        );\r\n        emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\r\n    }\r\n\r\n    function safeTransferChild(\r\n        uint256 _fromTokenId,\r\n        address _to,\r\n        address _childContract,\r\n        uint256 _childTokenId,\r\n        bytes memory _data\r\n    ) external override {\r\n        _transferChild(_fromTokenId, _to, _childContract, _childTokenId);\r\n        IERC721(_childContract).safeTransferFrom(\r\n            address(this),\r\n            _to,\r\n            _childTokenId,\r\n            _data\r\n        );\r\n        emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\r\n    }\r\n\r\n    function transferChild(\r\n        uint256 _fromTokenId,\r\n        address _to,\r\n        address _childContract,\r\n        uint256 _childTokenId\r\n    ) external override {\r\n        _transferChild(_fromTokenId, _to, _childContract, _childTokenId);\r\n        //this is here to be compatible with cryptokitties and other old contracts that require being owner and approved\r\n        // before transferring.\r\n        //does not work with current standard which does not allow approving self, so we must let it fail in that case.\r\n        bytes memory callData =\r\n            abi.encodeWithSelector(APPROVE, this, _childTokenId);\r\n        _childContract.call(callData);\r\n\r\n        IERC721(_childContract).transferFrom(address(this), _to, _childTokenId);\r\n        emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\r\n    }\r\n\r\n    function transferChildToParent(\r\n        uint256 _fromTokenId,\r\n        address _toContract,\r\n        uint256 _toTokenId,\r\n        address _childContract,\r\n        uint256 _childTokenId,\r\n        bytes memory _data\r\n    ) external override {\r\n        _transferChild(\r\n            _fromTokenId,\r\n            _toContract,\r\n            _childContract,\r\n            _childTokenId\r\n        );\r\n        emit TransferChild(\r\n            _fromTokenId,\r\n            _toContract,\r\n            _childContract,\r\n            _childTokenId\r\n        );\r\n        IERC998ERC721BottomUp(_childContract).transferToParent(\r\n            address(this),\r\n            _toContract,\r\n            _toTokenId,\r\n            _childTokenId,\r\n            _data\r\n        );\r\n    }\r\n\r\n    // this contract has to be approved first in _childContract\r\n    function getChild(\r\n        address _from,\r\n        uint256 _tokenId,\r\n        address _childContract,\r\n        uint256 _childTokenId\r\n    ) external override {\r\n        receiveChild(_from, _tokenId, _childContract, _childTokenId);\r\n        require(\r\n            _from == msg.sender ||\r\n                IERC721(_childContract).isApprovedForAll(_from, msg.sender) ||\r\n                IERC721(_childContract).getApproved(_childTokenId) ==\r\n                msg.sender,\r\n            \"ComposableTopDown: getChild msg.sender not approved\"\r\n        );\r\n        IERC721(_childContract).transferFrom(\r\n            _from,\r\n            address(this),\r\n            _childTokenId\r\n        );\r\n        // a check for looped ownership chain\r\n        rootOwnerOf(_tokenId);\r\n    }\r\n\r\n    function onERC721Received(\r\n        address _from,\r\n        uint256 _childTokenId,\r\n        bytes calldata _data\r\n    ) external returns (bytes4) {\r\n        require(\r\n            _data.length > 0,\r\n            \"ComposableTopDown: onERC721Received(3) _data must contain the uint256 tokenId to transfer the child token to\"\r\n        );\r\n        // convert up to 32 bytes of _data to uint256, owner nft tokenId passed as uint in bytes\r\n        uint256 tokenId = _parseTokenId(_data);\r\n        receiveChild(_from, tokenId, msg.sender, _childTokenId);\r\n        require(\r\n            IERC721(msg.sender).ownerOf(_childTokenId) != address(0),\r\n            \"ComposableTopDown: onERC721Received(3) child token not owned\"\r\n        );\r\n        // a check for looped ownership chain\r\n        rootOwnerOf(tokenId);\r\n        return ERC721_RECEIVED_OLD;\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address _from,\r\n        uint256 _childTokenId,\r\n        bytes calldata _data\r\n    ) external override returns (bytes4) {\r\n        require(\r\n            _data.length > 0,\r\n            \"ComposableTopDown: onERC721Received(4) _data must contain the uint256 tokenId to transfer the child token to\"\r\n        );\r\n        // convert up to 32 bytes of _data to uint256, owner nft tokenId passed as uint in bytes\r\n        uint256 tokenId = _parseTokenId(_data);\r\n        receiveChild(_from, tokenId, msg.sender, _childTokenId);\r\n        require(\r\n            IERC721(msg.sender).ownerOf(_childTokenId) != address(0),\r\n            \"ComposableTopDown: onERC721Received(4) child token not owned\"\r\n        );\r\n        // a check for looped ownership chain\r\n        rootOwnerOf(tokenId);\r\n        return ERC721_RECEIVED_NEW;\r\n    }\r\n\r\n    function childExists(address _childContract, uint256 _childTokenId)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 tokenId = childTokenOwner[_childContract][_childTokenId];\r\n        return tokenId != 0;\r\n    }\r\n\r\n    function totalChildContracts(uint256 _tokenId)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return childContracts[_tokenId].length();\r\n    }\r\n\r\n    function childContractByIndex(uint256 _tokenId, uint256 _index)\r\n        external\r\n        view\r\n        override\r\n        returns (address childContract)\r\n    {\r\n        return childContracts[_tokenId].at(_index);\r\n    }\r\n\r\n    function totalChildTokens(uint256 _tokenId, address _childContract)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return childTokens[_tokenId][_childContract].length();\r\n    }\r\n\r\n    function childTokenByIndex(\r\n        uint256 _tokenId,\r\n        address _childContract,\r\n        uint256 _index\r\n    ) external view override returns (uint256 childTokenId) {\r\n        return childTokens[_tokenId][_childContract].at(_index);\r\n    }\r\n\r\n    function ownerOfChild(address _childContract, uint256 _childTokenId)\r\n        external\r\n        view\r\n        override\r\n        returns (bytes32 parentTokenOwner, uint256 parentTokenId)\r\n    {\r\n        parentTokenId = childTokenOwner[_childContract][_childTokenId];\r\n        require(\r\n            parentTokenId != 0,\r\n            \"ComposableTopDown: ownerOfChild not found\"\r\n        );\r\n        address parentTokenOwnerAddress = tokenIdToTokenOwner[parentTokenId];\r\n        assembly {\r\n            parentTokenOwner := or(ERC998_MAGIC_VALUE_32, parentTokenOwnerAddress)\r\n        }\r\n\r\n    }\r\n\r\n    function _transferChild(\r\n        uint256 _fromTokenId,\r\n        address _to,\r\n        address _childContract,\r\n        uint256 _childTokenId\r\n    ) private {\r\n        uint256 tokenId = childTokenOwner[_childContract][_childTokenId];\r\n        require(\r\n            tokenId != 0,\r\n            \"ComposableTopDown: _transferChild _childContract _childTokenId not found\"\r\n        );\r\n        require(\r\n            tokenId == _fromTokenId,\r\n            \"ComposableTopDown: _transferChild wrong tokenId found\"\r\n        );\r\n        require(\r\n            _to != address(0),\r\n            \"ComposableTopDown: _transferChild _to zero address\"\r\n        );\r\n        address rootOwner = address(uint160(uint256(rootOwnerOf(tokenId))));\r\n        require(\r\n            rootOwner == msg.sender ||\r\n                tokenOwnerToOperators[rootOwner][msg.sender] ||\r\n                rootOwnerAndTokenIdToApprovedAddress[rootOwner][tokenId] ==\r\n                msg.sender,\r\n            \"ComposableTopDown: _transferChild msg.sender not eligible\"\r\n        );\r\n        removeChild(tokenId, _childContract, _childTokenId);\r\n    }\r\n\r\n    function _ownerOfChild(address _childContract, uint256 _childTokenId)\r\n        private\r\n        view\r\n        returns (address parentTokenOwner, uint256 parentTokenId)\r\n    {\r\n        parentTokenId = childTokenOwner[_childContract][_childTokenId];\r\n        require(\r\n            parentTokenId != 0,\r\n            \"ComposableTopDown: _ownerOfChild not found\"\r\n        );\r\n        return (tokenIdToTokenOwner[parentTokenId], parentTokenId);\r\n    }\r\n\r\n    function _parseTokenId(bytes memory _data)\r\n        private\r\n        pure\r\n        returns (uint256 tokenId)\r\n    {\r\n        // convert up to 32 bytes of_data to uint256, owner nft tokenId passed as uint in bytes\r\n        assembly {\r\n            tokenId := mload(add(_data, 0x20))\r\n        }\r\n        if (_data.length < 32) {\r\n            tokenId = tokenId >> (256 - _data.length * 8);\r\n        }\r\n    }\r\n\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    // solhint-disable-next-line no-inline-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function removeChild(\r\n        uint256 _tokenId,\r\n        address _childContract,\r\n        uint256 _childTokenId\r\n    ) private {\r\n        // remove child token\r\n        uint256 lastTokenIndex =\r\n            childTokens[_tokenId][_childContract].length() - 1;\r\n        require(childTokens[_tokenId][_childContract].remove(_childTokenId), \"ComposableTopDown: removeChild: _childTokenId not found\");\r\n        delete childTokenOwner[_childContract][_childTokenId];\r\n\r\n        // remove contract\r\n        if (lastTokenIndex == 0) {\r\n            require(childContracts[_tokenId].remove(_childContract), \"ComposableTopDown: removeChild: _childContract not found\");\r\n        }\r\n        if (_childContract == address(this)) {\r\n            _updateStateHash(_tokenId, uint256(uint160(_childContract)), tokenIdToStateHash[_childTokenId]);\r\n        } else {\r\n            _updateStateHash(_tokenId, uint256(uint160(_childContract)), _childTokenId);\r\n        }\r\n    }\r\n\r\n    function receiveChild(\r\n        address _from,\r\n        uint256 _tokenId,\r\n        address _childContract,\r\n        uint256 _childTokenId\r\n    ) private {\r\n        require(\r\n            tokenIdToTokenOwner[_tokenId] != address(0),\r\n            \"ComposableTopDown: receiveChild _tokenId does not exist.\"\r\n        );\r\n        require(\r\n            childTokenOwner[_childContract][_childTokenId] != _tokenId,\r\n            \"ComposableTopDown: receiveChild _childTokenId already received\"\r\n        );\r\n        uint256 childTokensLength =\r\n            childTokens[_tokenId][_childContract].length();\r\n        if (childTokensLength == 0) {\r\n            require(childContracts[_tokenId].add(_childContract), \"ComposableTopDown: receiveChild: add _childContract\");\r\n        }\r\n        require(childTokens[_tokenId][_childContract].add(_childTokenId), \"ComposableTopDown: receiveChild: add _childTokenId\");\r\n        childTokenOwner[_childContract][_childTokenId] = _tokenId;\r\n        if (_childContract == address(this)) {\r\n            _updateStateHash(_tokenId, uint256(uint160(_childContract)), tokenIdToStateHash[_childTokenId]);\r\n        } else {\r\n            _updateStateHash(_tokenId, uint256(uint160(_childContract)), _childTokenId);\r\n        }\r\n        emit ReceivedChild(_from, _tokenId, _childContract, _childTokenId);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////\r\n    // ERC998ERC223 and ERC998ERC223Enumerable implementation\r\n    ////////////////////////////////////////////////////////\r\n\r\n    // tokenId => token contract\r\n    mapping(uint256 => EnumerableSet.AddressSet) erc20Contracts;\r\n\r\n    // tokenId => (token contract => balance)\r\n    mapping(uint256 => mapping(address => uint256)) erc20Balances;\r\n\r\n    function transferERC20(\r\n        uint256 _tokenId,\r\n        address _to,\r\n        address _erc20Contract,\r\n        uint256 _value\r\n    ) external override {\r\n        require(\r\n            _to != address(0),\r\n            \"ComposableTopDown: transferERC20 _to zero address\"\r\n        );\r\n        address rootOwner = address(uint160(uint256(rootOwnerOf(_tokenId))));\r\n        require(\r\n            rootOwner == msg.sender ||\r\n                tokenOwnerToOperators[rootOwner][msg.sender] ||\r\n                rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId] ==\r\n                msg.sender,\r\n            \"ComposableTopDown: transferERC20 msg.sender not eligible\"\r\n        );\r\n        removeERC20(_tokenId, _erc20Contract, _value);\r\n        require(\r\n            IERC20AndERC223(_erc20Contract).transfer(_to, _value),\r\n            \"ComposableTopDown: transferERC20 transfer failed\"\r\n        );\r\n        emit TransferERC20(_tokenId, _to, _erc20Contract, _value);\r\n    }\r\n\r\n    // implementation of ERC 223\r\n    function transferERC223(\r\n        uint256 _tokenId,\r\n        address _to,\r\n        address _erc223Contract,\r\n        uint256 _value,\r\n        bytes memory _data\r\n    ) external override {\r\n        require(\r\n            _to != address(0),\r\n            \"ComposableTopDown: transferERC223 _to zero address\"\r\n        );\r\n        address rootOwner = address(uint160(uint256(rootOwnerOf(_tokenId))));\r\n        require(\r\n            rootOwner == msg.sender ||\r\n                tokenOwnerToOperators[rootOwner][msg.sender] ||\r\n                rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId] ==\r\n                msg.sender,\r\n            \"ComposableTopDown: transferERC223 msg.sender not eligible\"\r\n        );\r\n        removeERC20(_tokenId, _erc223Contract, _value);\r\n        require(\r\n            IERC20AndERC223(_erc223Contract).transfer(_to, _value, _data),\r\n            \"ComposableTopDown: transferERC223 transfer failed\"\r\n        );\r\n        emit TransferERC20(_tokenId, _to, _erc223Contract, _value);\r\n    }\r\n\r\n    // used by ERC 223\r\n    function tokenFallback(\r\n        address _from,\r\n        uint256 _value,\r\n        bytes memory _data\r\n    ) external override {\r\n        require(\r\n            _data.length > 0,\r\n            \"ComposableTopDown: tokenFallback _data must contain the uint256 tokenId to transfer the token to\"\r\n        );\r\n        require(\r\n            tx.origin != msg.sender,\r\n            \"ComposableTopDown: tokenFallback msg.sender is not a contract\"\r\n        );\r\n        uint256 tokenId = _parseTokenId(_data);\r\n        erc20Received(_from, tokenId, msg.sender, _value);\r\n    }\r\n\r\n    function balanceOfERC20(uint256 _tokenId, address _erc20Contract)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return erc20Balances[_tokenId][_erc20Contract];\r\n    }\r\n\r\n    function erc20ContractByIndex(uint256 _tokenId, uint256 _index)\r\n        external\r\n        view\r\n        override\r\n        returns (address)\r\n    {\r\n        return erc20Contracts[_tokenId].at(_index);\r\n    }\r\n\r\n    function totalERC20Contracts(uint256 _tokenId)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return erc20Contracts[_tokenId].length();\r\n    }\r\n\r\n    // this contract has to be approved first by _erc20Contract\r\n    function getERC20(\r\n        address _from,\r\n        uint256 _tokenId,\r\n        address _erc20Contract,\r\n        uint256 _value\r\n    ) public override {\r\n        bool allowed = _from == msg.sender;\r\n        if (!allowed) {\r\n            bytes memory callData =\r\n                abi.encodeWithSelector(ALLOWANCE, _from, msg.sender);\r\n            (bool callSuccess, bytes memory data) =\r\n                _erc20Contract.staticcall(callData);\r\n            require(\r\n                callSuccess,\r\n                \"ComposableTopDown: getERC20 allowance failed\"\r\n            );\r\n            uint256 remaining;\r\n            assembly {\r\n                remaining := mload(add(data, 0x20))\r\n            }\r\n            require(\r\n                remaining >= _value,\r\n                \"ComposableTopDown: getERC20 value greater than remaining\"\r\n            );\r\n            allowed = true;\r\n        }\r\n        require(allowed, \"ComposableTopDown: getERC20 not allowed to getERC20\");\r\n        erc20Received(_from, _tokenId, _erc20Contract, _value);\r\n        require(\r\n            IERC20AndERC223(_erc20Contract).transferFrom(\r\n                _from,\r\n                address(this),\r\n                _value\r\n            ),\r\n            \"ComposableTopDown: getERC20 transfer failed\"\r\n        );\r\n    }\r\n\r\n    function erc20Received(\r\n        address _from,\r\n        uint256 _tokenId,\r\n        address _erc20Contract,\r\n        uint256 _value\r\n    ) private {\r\n        require(\r\n            tokenIdToTokenOwner[_tokenId] != address(0),\r\n            \"ComposableTopDown: erc20Received _tokenId does not exist\"\r\n        );\r\n        if (_value == 0) {\r\n            return;\r\n        }\r\n        uint256 erc20Balance = erc20Balances[_tokenId][_erc20Contract];\r\n        if (erc20Balance == 0) {\r\n            require(erc20Contracts[_tokenId].add(_erc20Contract), \"ComposableTopDown: erc20Received: erc20Contracts add _erc20Contract\");\r\n        }\r\n        erc20Balances[_tokenId][_erc20Contract] += _value;\r\n        _updateStateHash(_tokenId, uint256(uint160(_erc20Contract)), erc20Balance + _value);\r\n        emit ReceivedERC20(_from, _tokenId, _erc20Contract, _value);\r\n    }\r\n\r\n    function removeERC20(\r\n        uint256 _tokenId,\r\n        address _erc20Contract,\r\n        uint256 _value\r\n    ) private {\r\n        if (_value == 0) {\r\n            return;\r\n        }\r\n        uint256 erc20Balance = erc20Balances[_tokenId][_erc20Contract];\r\n        require(\r\n            erc20Balance >= _value,\r\n            \"ComposableTopDown: removeERC20 value not enough\"\r\n        );\r\n        unchecked {\r\n            // overflow already checked\r\n            uint256 newERC20Balance = erc20Balance - _value;\r\n            erc20Balances[_tokenId][_erc20Contract] = newERC20Balance;\r\n            if (newERC20Balance == 0) {\r\n                require(erc20Contracts[_tokenId].remove(_erc20Contract), \"ComposableTopDown: removeERC20: erc20Contracts remove _erc20Contract\");\r\n            }\r\n            _updateStateHash(_tokenId, uint256(uint160(_erc20Contract)), newERC20Balance);\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////\r\n    // ERC165 implementation\r\n    ////////////////////////////////////////////////////////\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     * The interface id 0x1bc995e4 is added. The spec claims it to be the interface id of IERC998ERC721TopDown.\r\n     * But it is not.\r\n     * It is added anyway in case some contract checks it being compliant with the spec.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view override(IERC165,ERC165) returns (bool) {\r\n        return interfaceId == type(IERC721).interfaceId\r\n            || interfaceId == type(IERC721Metadata).interfaceId\r\n            || interfaceId == type(IERC998ERC721TopDown).interfaceId\r\n            || interfaceId == type(IERC998ERC721TopDownEnumerable).interfaceId\r\n            || interfaceId == type(IERC998ERC20TopDown).interfaceId\r\n            || interfaceId == type(IERC998ERC20TopDownEnumerable).interfaceId\r\n            || interfaceId == 0x1bc995e4\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////\r\n    // Last State Hash\r\n    ////////////////////////////////////////////////////////\r\n\r\n    /**\r\n     * Update the state hash of tokenId and all its ancestors.\r\n     * @param tokenId token id\r\n     * @param childReference generalization of a child contract adddress\r\n     * @param value new balance of ERC20, childTokenId of ERC721 or a child's state hash (if childContract==address(this))\r\n     */\r\n    function _updateStateHash(uint256 tokenId, uint256 childReference, uint256 value) private {\r\n        uint256 _newStateHash = uint256(keccak256(abi.encodePacked(tokenIdToStateHash[tokenId], childReference, value)));\r\n        tokenIdToStateHash[tokenId] = _newStateHash;\r\n        while (tokenIdToTokenOwner[tokenId] == address(this)) {\r\n            tokenId = childTokenOwner[address(this)][tokenId];\r\n            _newStateHash = uint256(keccak256(abi.encodePacked(tokenIdToStateHash[tokenId], uint256(uint160(address(this))), _newStateHash)));\r\n            tokenIdToStateHash[tokenId] = _newStateHash;\r\n        }\r\n    }\r\n\r\n    function stateHash(uint256 tokenId) public view returns (uint256) {\r\n        uint256 _stateHash = tokenIdToStateHash[tokenId];\r\n        require(_stateHash > 0, \"ComposableTopDown: stateHash of _tokenId is zero\");\r\n        return _stateHash;\r\n    }\r\n\r\n    /**\r\n     * @dev See {safeTransferFrom}.\r\n     * Check the state hash and call safeTransferFrom.\r\n     */\r\n    function safeCheckedTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 expectedStateHash\r\n    ) external {\r\n        require(expectedStateHash == tokenIdToStateHash[tokenId], \"ComposableTopDown: stateHash mismatch (1)\");\r\n        safeTransferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {transferFrom}.\r\n     * Check the state hash and call transferFrom.\r\n     */\r\n    function checkedTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 expectedStateHash\r\n    ) external {\r\n        require(expectedStateHash == tokenIdToStateHash[tokenId], \"ComposableTopDown: stateHash mismatch (2)\");\r\n        transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {safeTransferFrom}.\r\n     * Check the state hash and call safeTransferFrom.\r\n     */\r\n    function safeCheckedTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 expectedStateHash,\r\n        bytes calldata data\r\n    ) external {\r\n        require(expectedStateHash == tokenIdToStateHash[tokenId], \"ComposableTopDown: stateHash mismatch (3)\");\r\n        safeTransferFrom(from, to, tokenId, data);\r\n    }\r\n\r\n}\r\n\r\n\r\n// File contracts/samples/ContractIERC721ReceiverNew.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract ContractIERC721ReceiverNew is IERC721Receiver {\r\n    bytes4 constant ERC721_RECEIVED = 0xcd740db5;\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) external pure override returns (bytes4) {\r\n        return ERC721_RECEIVED;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = alphabet[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/ERC721.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping (uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping (address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC721).interfaceId\r\n            || interfaceId == type(IERC721Metadata).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0\r\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n            : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\r\n     * in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    // solhint-disable-next-line no-inline-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Counters.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/samples/ContractIERC721ReceiverOld.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract ContractIERC721ReceiverOld is ERC721, IERC721Receiver {\r\n    bytes4 constant ERC721_RECEIVED_OLD = 0xf0b9e5ba;\r\n\r\n    using Counters for Counters.Counter;\r\n\r\n    Counters.Counter public _tokenIds;\r\n\r\n    uint256 data = 1;\r\n\r\n    constructor() public ERC721(\"NFT_OLD_RECEIVER\", \"NOR\") {}\r\n\r\n    function mint721(address _to) public returns (uint256) {\r\n        _tokenIds.increment();\r\n        uint256 newItemId = _tokenIds.current();\r\n\r\n        _safeMint(_to, newItemId);\r\n        return newItemId;\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) external pure override returns (bytes4) {\r\n        return ERC721_RECEIVED_OLD;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.1.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC223Receiver.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC223Receiver {\r\n  /**\r\n   * @dev Standard ERC223 function that will handle incoming token transfers.\r\n   *\r\n   * @param _from  Token sender address.\r\n   * @param _value Amount of tokens.\r\n   * @param _data  Transaction metadata.\r\n   */\r\n  function tokenFallback(address _from, uint _value, bytes memory _data) external;\r\n}\r\n\r\n\r\n// File contracts/samples/SampleERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract SampleERC20 is ERC20 {\r\n    using Address for address;\r\n\r\n    constructor(string memory tokenName, string memory tokenSymbol)\r\n        public\r\n        ERC20(tokenName, tokenSymbol)\r\n    {}\r\n\r\n    function mint(address account, uint256 amount) public {\r\n        super._mint(account, amount);\r\n    }\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value,\r\n        bytes memory _data\r\n    ) external returns (bool) {\r\n        _transfer(msg.sender, _to, _value);\r\n\r\n        if (_to.isContract()) {\r\n            // Require proper transaction handling.\r\n            IERC223Receiver receiver = IERC223Receiver(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC721ReceiverOld.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721ReceiverOld {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n\r\n// File contracts/samples/SampleNFT.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract SampleNFT is ERC721 {\r\n    using Address for address;\r\n    using Counters for Counters.Counter;\r\n\r\n    Counters.Counter public _tokenIds;\r\n    mapping(string => bool) public hashes;\r\n\r\n    uint256 data = 1;\r\n\r\n    //old version\r\n    bytes4 constant ERC721_RECEIVED_OLD = 0xf0b9e5ba;\r\n\r\n    constructor() public ERC721(\"Sample NFT\", \"NFT\") {}\r\n\r\n    /// wrapper on minting new 721\r\n    function mint721(address _to, string memory _hash)\r\n        public\r\n        returns (uint256)\r\n    {\r\n        require(hashes[_hash] != true);\r\n        hashes[_hash] = true;\r\n\r\n        _tokenIds.increment();\r\n        uint256 newItemId = _tokenIds.current();\r\n\r\n        _safeMint(_to, newItemId);\r\n        return newItemId;\r\n    }\r\n\r\n    function safeTransferFromOld(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public {\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId),\r\n            \"SampleNFT: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        _transfer(from, to, tokenId);\r\n\r\n        require(\r\n            _checkOnERC721ReceivedOld(from, to, tokenId, _data),\r\n            \"SampleNFT: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /// @dev mocked for ComposableTopDown safeTransferChild(4)\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override {\r\n        safeTransferFrom(from, to, tokenId, abi.encode(data));\r\n    }\r\n\r\n    function _checkOnERC721ReceivedOld(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n        bytes memory returndata =\r\n            to.functionCall(\r\n                abi.encodeWithSelector(\r\n                    IERC721ReceiverOld(to).onERC721Received.selector,\r\n                    from,\r\n                    tokenId,\r\n                    _data\r\n                ),\r\n                \"SampleNFT: transfer to non ERC721Receiver implementer\"\r\n            );\r\n        bytes4 retval = abi.decode(returndata, (bytes4));\r\n        return (retval == ERC721_RECEIVED_OLD);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"ReceivedChild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_erc20Contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReceivedERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"TransferChild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_erc20Contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferERC20\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20Contract\",\"type\":\"address\"}],\"name\":\"balanceOfERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedStateHash\",\"type\":\"uint256\"}],\"name\":\"checkedTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"childContractByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"childContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"childExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"childTokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"childTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"erc20ContractByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"getChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOfChild\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentTokenOwner\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"parentTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"rootOwnerOf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootOwner\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"rootOwnerOfChild\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootOwner\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedStateHash\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeCheckedTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedStateHash\",\"type\":\"uint256\"}],\"name\":\"safeCheckedTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"safeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stateHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"totalChildContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"}],\"name\":\"totalChildTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"totalERC20Contracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"transferChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferChildToParent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc20Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc223Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferERC223\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ComposableTopDown","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000e436f6d706f7361626c65204e46540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004434e465400000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://15ff459bc4f58905da537b06bee1b19459690784b7679a4f977b1eebacd46b3d"}]}