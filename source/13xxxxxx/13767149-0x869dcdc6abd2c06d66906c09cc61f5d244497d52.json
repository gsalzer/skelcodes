{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface ERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract ENOStaking is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint;\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint8;\r\n\r\n\r\n\r\n    struct Stake{\r\n        uint deposit_amount;        //Deposited Amount\r\n        uint stake_creation_time;   //The time when the stake was created\r\n        bool returned;              //Specifies if the funds were withdrawed\r\n        uint alreadyWithdrawedAmount;   //TODO Correct Lint\r\n    }\r\n\r\n\r\n    struct Account{\r\n        address referral;\r\n        uint referralAlreadyWithdrawed;\r\n    }\r\n\r\n\r\n    //---------------------------------------------------------------------\r\n    //-------------------------- EVENTS -----------------------------------\r\n    //---------------------------------------------------------------------\r\n\r\n\r\n    /**\r\n    *   @dev Emitted when the pot value changes\r\n     */\r\n    event PotUpdated(\r\n        uint newPot\r\n    );\r\n\r\n\r\n    /**\r\n    *   @dev Emitted when a customer tries to withdraw an amount\r\n    *       of token greater than the one in the pot\r\n     */\r\n    event PotExhausted(\r\n\r\n    );\r\n\r\n\r\n    /**\r\n    *   @dev Emitted when a new stake is issued\r\n     */\r\n    event NewStake(\r\n        uint stakeAmount,\r\n        address from\r\n    );\r\n\r\n    /**\r\n    *   @dev Emitted when a new stake is withdrawed\r\n     */\r\n    event StakeWithdraw(\r\n        uint stakeID,\r\n        uint amount\r\n    );\r\n\r\n    /**\r\n    *   @dev Emitted when a referral reward is sent\r\n     */\r\n    event referralRewardSent(\r\n        address account,\r\n        uint reward\r\n    );\r\n\r\n    event rewardWithdrawed(\r\n        address account\r\n    );\r\n\r\n\r\n    /**\r\n    *   @dev Emitted when the machine is stopped (500.000 tokens)\r\n     */\r\n    event machineStopped(\r\n    );\r\n\r\n    /**\r\n    *   @dev Emitted when the subscription is stopped (400.000 tokens)\r\n     */\r\n    event subscriptionStopped(\r\n    );\r\n\r\n\r\n\r\n    //--------------------------------------------------------------------\r\n    //-------------------------- GLOBALS -----------------------------------\r\n    //--------------------------------------------------------------------\r\n\r\n    mapping (address => Stake[]) private stake; /// @dev Map that contains account's stakes\r\n\r\n    address private tokenAddress;\r\n\r\n    ERC20 private ERC20Interface;\r\n\r\n    uint private pot;    //The pot where token are taken\r\n\r\n    uint256 private amount_supplied;    //Store the remaining token to be supplied\r\n\r\n    uint private pauseTime;     //Time when the machine paused\r\n    uint private stopTime;      //Time when the machine stopped\r\n\r\n\r\n\r\n\r\n    // @dev Mapping the referrals\r\n    mapping (address => address[]) private referral;    //Store account that used the referral\r\n\r\n    mapping (address => Account) private account_referral;  //Store the setted account referral\r\n\r\n\r\n    address[] private activeAccounts;   //Store both staker and referer address\r\n\r\n\r\n    uint256 private constant _DECIMALS = 18;\r\n\r\n    uint256 private constant _INTEREST_PERIOD = 1 days;    //One Month\r\n    uint256 private constant _INTEREST_VALUE = 333;    //0.333% per day\r\n\r\n    uint256 private constant _PENALTY_VALUE = 20;    //20% of the total stake\r\n\r\n\r\n\r\n    uint256 private constant _MIN_STAKE_AMOUNT = 100 * (10**_DECIMALS);\r\n\r\n    uint256 private constant _MAX_STAKE_AMOUNT = 100000 * (10**_DECIMALS);\r\n\r\n    uint private constant _REFERALL_REWARD = 333; //0.333% per day\r\n\r\n    uint256 private constant _MAX_TOKEN_SUPPLY_LIMIT =     50000000 * (10**_DECIMALS);\r\n    uint256 private constant _MIDTERM_TOKEN_SUPPLY_LIMIT = 40000000 * (10**_DECIMALS);\r\n\r\n\r\n    constructor() {\r\n        pot = 0;\r\n        amount_supplied = _MAX_TOKEN_SUPPLY_LIMIT;    //The total amount of token released\r\n        tokenAddress = address(0);\r\n    }\r\n\r\n    //--------------------------------------------------------------------\r\n    //-------------------------- TOKEN ADDRESS -----------------------------------\r\n    //--------------------------------------------------------------------\r\n\r\n\r\n    function setTokenAddress(address _tokenAddress) external onlyOwner {\r\n        require(Address.isContract(_tokenAddress), \"The address does not point to a contract\");\r\n\r\n        tokenAddress = _tokenAddress;\r\n        ERC20Interface = ERC20(tokenAddress);\r\n    }\r\n\r\n    function isTokenSet() external view returns (bool) {\r\n        if(tokenAddress == address(0))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    function getTokenAddress() external view returns (address){\r\n        return tokenAddress;\r\n    }\r\n\r\n    //--------------------------------------------------------------------\r\n    //-------------------------- ONLY OWNER -----------------------------------\r\n    //--------------------------------------------------------------------\r\n\r\n\r\n    function depositPot(uint _amount) external onlyOwner nonReentrant {\r\n        require(tokenAddress != address(0), \"The Token Contract is not specified\");\r\n\r\n        pot = pot.add(_amount);\r\n\r\n        if(ERC20Interface.transferFrom(msg.sender, address(this), _amount)){\r\n            //Emit the event to update the UI\r\n            emit PotUpdated(pot);\r\n        }else{\r\n            revert(\"Unable to tranfer funds\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function returnPot(uint _amount) external onlyOwner nonReentrant{\r\n        require(tokenAddress != address(0), \"The Token Contract is not specified\");\r\n        require(pot.sub(_amount) >= 0, \"Not enough token\");\r\n\r\n        pot = pot.sub(_amount);\r\n\r\n        if(ERC20Interface.transfer(msg.sender, _amount)){\r\n            //Emit the event to update the UI\r\n            emit PotUpdated(pot);\r\n        }else{\r\n            revert(\"Unable to tranfer funds\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function finalShutdown() external onlyOwner nonReentrant{\r\n\r\n        uint machineAmount = getMachineBalance();\r\n\r\n        if(!ERC20Interface.transfer(owner(), machineAmount)){\r\n            revert(\"Unable to transfer funds\");\r\n        }\r\n        //Goodbye\r\n    }\r\n\r\n    function getAllAccount() external onlyOwner view returns (address[] memory){\r\n        return activeAccounts;\r\n    }\r\n\r\n    /**\r\n    *   @dev Check if the pot has enough balance to satisfy the potential withdraw\r\n     */\r\n    function getPotentialWithdrawAmount() external onlyOwner view returns (uint){\r\n        uint accountNumber = activeAccounts.length;\r\n\r\n        uint potentialAmount = 0;\r\n\r\n        for(uint i = 0; i<accountNumber; i++){\r\n\r\n            address currentAccount = activeAccounts[i];\r\n\r\n            potentialAmount = potentialAmount.add(calculateTotalRewardReferral(currentAccount));    //Referral\r\n\r\n            potentialAmount = potentialAmount.add(calculateTotalRewardToWithdraw(currentAccount));  //Normal Reward\r\n        }\r\n\r\n        return potentialAmount;\r\n    }\r\n\r\n\r\n    //--------------------------------------------------------------------\r\n    //-------------------------- CLIENTS -----------------------------------\r\n    //--------------------------------------------------------------------\r\n\r\n    /**\r\n    *   @dev Stake token verifying all the contraint\r\n    *   @notice Stake tokens\r\n    *   @param _amount Amoun to stake\r\n    *   @param _referralAddress Address of the referer; 0x000...1 if no referer is provided\r\n     */\r\n    function stakeToken(uint _amount, address _referralAddress) external nonReentrant {\r\n\r\n        require(tokenAddress != address(0), \"No contract set\");\r\n\r\n        require(_amount >= _MIN_STAKE_AMOUNT, \"You must stake at least 100 tokens\");\r\n        require(_amount <= _MAX_STAKE_AMOUNT, \"You must stake at maximum 100000 tokens\");\r\n\r\n        require(!isSubscriptionEnded(), \"Subscription ended\");\r\n\r\n        address staker = msg.sender;\r\n        Stake memory newStake;\r\n\r\n        newStake.deposit_amount = _amount;\r\n        newStake.returned = false;\r\n        newStake.stake_creation_time = block.timestamp;\r\n        newStake.alreadyWithdrawedAmount = 0;\r\n\r\n        stake[staker].push(newStake);\r\n\r\n        if(!hasReferral()){\r\n            setReferral(_referralAddress);\r\n        }\r\n\r\n        activeAccounts.push(msg.sender);\r\n\r\n        if(ERC20Interface.transferFrom(msg.sender, address(this), _amount)){\r\n            emit NewStake(_amount, _referralAddress);\r\n        }else{\r\n            revert(\"Unable to transfer funds\");\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n    *   @dev Return the staked tokens, requiring that the stake was\r\n    *        not alreay withdrawed\r\n    *   @notice Return staked token\r\n    *   @param _stakeID The ID of the stake to be returned\r\n     */\r\n    function returnTokens(uint _stakeID) external nonReentrant returns (bool){\r\n        Stake memory selectedStake = stake[msg.sender][_stakeID];\r\n\r\n        //Check if the stake were already withdraw\r\n        require(selectedStake.returned == false, \"Stake were already returned\");\r\n\r\n        uint deposited_amount = selectedStake.deposit_amount;\r\n        //Get the net reward\r\n        uint penalty = calculatePenalty(deposited_amount);\r\n\r\n        //Sum the net reward to the total reward to withdraw\r\n        uint total_amount = deposited_amount.sub(penalty);\r\n\r\n\r\n        //Update the supplied amount considering also the penalty\r\n        uint supplied = deposited_amount.sub(total_amount);\r\n        require(updateSuppliedToken(supplied), \"Limit reached\");\r\n\r\n        //Add the penalty to the pot\r\n        pot = pot.add(penalty);\r\n\r\n\r\n        //Only set the withdraw flag in order to disable further withdraw\r\n        stake[msg.sender][_stakeID].returned = true;\r\n\r\n        if(ERC20Interface.transfer(msg.sender, total_amount)){\r\n            emit StakeWithdraw(_stakeID, total_amount);\r\n        }else{\r\n            revert(\"Unable to transfer funds\");\r\n        }\r\n\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function withdrawReward(uint _stakeID) external nonReentrant returns (bool){\r\n        Stake memory _stake = stake[msg.sender][_stakeID];\r\n\r\n        uint rewardToWithdraw = calculateRewardToWithdraw(_stakeID);\r\n\r\n        require(updateSuppliedToken(rewardToWithdraw), \"Supplied limit reached\");\r\n\r\n        if(rewardToWithdraw > pot){\r\n            revert(\"Pot exhausted\");\r\n        }\r\n\r\n        pot = pot.sub(rewardToWithdraw);\r\n\r\n        stake[msg.sender][_stakeID].alreadyWithdrawedAmount = _stake.alreadyWithdrawedAmount.add(rewardToWithdraw);\r\n\r\n        if(ERC20Interface.transfer(msg.sender, rewardToWithdraw)){\r\n            emit rewardWithdrawed(msg.sender);\r\n        }else{\r\n            revert(\"Unable to transfer funds\");\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function withdrawReferralReward() external nonReentrant returns (bool){\r\n        uint referralCount = referral[msg.sender].length;\r\n\r\n        uint totalAmount = 0;\r\n\r\n        for(uint i = 0; i<referralCount; i++){\r\n            address currentAccount = referral[msg.sender][i];\r\n            uint currentReward = calculateRewardReferral(currentAccount);\r\n\r\n            totalAmount = totalAmount.add(currentReward);\r\n\r\n            //Update the alreadyWithdrawed status\r\n            account_referral[currentAccount].referralAlreadyWithdrawed = account_referral[currentAccount].referralAlreadyWithdrawed.add(currentReward);\r\n        }\r\n\r\n        require(updateSuppliedToken(totalAmount), \"Machine limit reached\");\r\n\r\n        //require(withdrawFromPot(totalAmount), \"Pot exhausted\");\r\n\r\n        if(totalAmount > pot){\r\n            revert(\"Pot exhausted\");\r\n        }\r\n\r\n        pot = pot.sub(totalAmount);\r\n\r\n\r\n        if(ERC20Interface.transfer(msg.sender, totalAmount)){\r\n            emit referralRewardSent(msg.sender, totalAmount);\r\n        }else{\r\n            revert(\"Unable to transfer funds\");\r\n        }\r\n\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    *   @dev Check if the provided amount is available in the pot\r\n    *   If yes, it will update the pot value and return true\r\n    *   Otherwise it will emit a PotExhausted event and return false\r\n     */\r\n    function withdrawFromPot(uint _amount) public nonReentrant returns (bool){\r\n\r\n        if(_amount > pot){\r\n            emit PotExhausted();\r\n            return false;\r\n        }\r\n\r\n        //Update the pot value\r\n\r\n        pot = pot.sub(_amount);\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n    //--------------------------------------------------------------------\r\n    //-------------------------- VIEWS -----------------------------------\r\n    //--------------------------------------------------------------------\r\n\r\n    /**\r\n    * @dev Return the amount of token in the provided caller's stake\r\n    * @param _stakeID The ID of the stake of the caller\r\n     */\r\n    function getCurrentStakeAmount(uint _stakeID) external view returns (uint256)  {\r\n        require(tokenAddress != address(0), \"No contract set\");\r\n\r\n        return stake[msg.sender][_stakeID].deposit_amount;\r\n    }\r\n\r\n    /**\r\n    * @dev Return sum of all the caller's stake amount\r\n    * @return Amount of stake\r\n     */\r\n    function getTotalStakeAmount() external view returns (uint256) {\r\n        require(tokenAddress != address(0), \"No contract set\");\r\n\r\n        Stake[] memory currentStake = stake[msg.sender];\r\n        uint nummberOfStake = stake[msg.sender].length;\r\n        uint totalStake = 0;\r\n        uint tmp;\r\n        for (uint i = 0; i<nummberOfStake; i++){\r\n            tmp = currentStake[i].deposit_amount;\r\n            totalStake = totalStake.add(tmp);\r\n        }\r\n\r\n        return totalStake;\r\n    }\r\n\r\n    /**\r\n    *   @dev Return all the available stake info\r\n    *   @notice Return stake info\r\n    *   @param _stakeID ID of the stake which info is returned\r\n    *\r\n    *   @return 1) Amount Deposited\r\n    *   @return 2) Bool value that tells if the stake was withdrawed\r\n    *   @return 3) Stake creation time (Unix timestamp)\r\n    *   @return 4) The eventual referAccountess != address(0), \"No contract set\");\r\n    *   @return 5) The current amount\r\n    *   @return 6) The penalty of withdraw\r\n    */\r\n    function getStakeInfo(uint _stakeID) external view returns(uint, bool, uint, address, uint, uint){\r\n\r\n        Stake memory selectedStake = stake[msg.sender][_stakeID];\r\n\r\n        uint amountToWithdraw = calculateRewardToWithdraw(_stakeID);\r\n\r\n        uint penalty = calculatePenalty(selectedStake.deposit_amount);\r\n\r\n        address myReferral = getMyReferral();\r\n\r\n        return (\r\n            selectedStake.deposit_amount,\r\n            selectedStake.returned,\r\n            selectedStake.stake_creation_time,\r\n            myReferral,\r\n            amountToWithdraw,\r\n            penalty\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n    *  @dev Get the current pot value\r\n    *  @return The amount of token in the current pot\r\n     */\r\n    function getCurrentPot() external view returns (uint){\r\n        return pot;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the number of active stake of the caller\r\n    * @return Number of active stake\r\n     */\r\n    function getStakeCount() external view returns (uint){\r\n        return stake[msg.sender].length;\r\n    }\r\n\r\n\r\n    function getActiveStakeCount() external view returns(uint){\r\n        uint stakeCount = stake[msg.sender].length;\r\n\r\n        uint count = 0;\r\n\r\n        for(uint i = 0; i<stakeCount; i++){\r\n            if(!stake[msg.sender][i].returned){\r\n                count = count + 1;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n\r\n    function getReferralCount() external view returns (uint) {\r\n        return referral[msg.sender].length;\r\n    }\r\n\r\n    function getAccountReferral() external view returns (address[] memory){\r\n        return referral[msg.sender];\r\n    }\r\n\r\n    function getAlreadyWithdrawedAmount(uint _stakeID) external view returns (uint){\r\n        return stake[msg.sender][_stakeID].alreadyWithdrawedAmount;\r\n    }\r\n\r\n\r\n    //--------------------------------------------------------------------\r\n    //-------------------------- REFERRALS -----------------------------------\r\n    //--------------------------------------------------------------------\r\n\r\n\r\n    function hasReferral() public view returns (bool){\r\n\r\n        Account memory myAccount = account_referral[msg.sender];\r\n\r\n        if(myAccount.referral == address(0) || myAccount.referral == address(0x0000000000000000000000000000000000000001)){\r\n            //If I have no referral...\r\n            assert(myAccount.referralAlreadyWithdrawed == 0);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function getMyReferral() public view returns (address){\r\n        Account memory myAccount = account_referral[msg.sender];\r\n\r\n        return myAccount.referral;\r\n    }\r\n\r\n\r\n    function setReferral(address referer) internal {\r\n        require(referer != address(0), \"Invalid address\");\r\n        require(!hasReferral(), \"Referral already setted\");\r\n\r\n        if(referer == address(0x0000000000000000000000000000000000000001)){\r\n            return;   //This means no referer\r\n        }\r\n\r\n        if(referer == msg.sender){\r\n            revert(\"Referral is the same as the sender, forbidden\");\r\n        }\r\n\r\n        referral[referer].push(msg.sender);\r\n\r\n        Account memory account;\r\n\r\n        account.referral = referer;\r\n        account.referralAlreadyWithdrawed = 0;\r\n\r\n        account_referral[msg.sender] = account;\r\n\r\n        activeAccounts.push(referer);    //Add to the list of active account for pot calculation\r\n    }\r\n\r\n\r\n    function getCurrentReferrals() external view returns (address[] memory){\r\n        return referral[msg.sender];\r\n    }\r\n\r\n\r\n    /**\r\n    *   @dev Calculate the current referral reward of the specified customer\r\n    *   @return The amount of referral reward related to the given customer\r\n     */\r\n    function calculateRewardReferral(address customer) public view returns (uint){\r\n\r\n        uint lowestStake;\r\n        uint lowStakeID;\r\n        (lowestStake, lowStakeID) = getLowestStake(customer);\r\n\r\n        if(lowestStake == 0 && lowStakeID == 0){\r\n            return 0;\r\n        }\r\n\r\n        uint periods = calculateAccountStakePeriods(customer, lowStakeID);\r\n\r\n        uint currentReward = lowestStake.mul(_REFERALL_REWARD).mul(periods).div(100000);\r\n\r\n        uint alreadyWithdrawed = account_referral[customer].referralAlreadyWithdrawed;\r\n\r\n\r\n        if(currentReward <= alreadyWithdrawed){\r\n            return 0;   //Already withdrawed all the in the past\r\n        }\r\n\r\n\r\n        uint availableReward = currentReward.sub(alreadyWithdrawed);\r\n\r\n        return availableReward;\r\n    }\r\n\r\n\r\n    function calculateTotalRewardReferral() external view returns (uint){\r\n\r\n        uint referralCount = referral[msg.sender].length;\r\n\r\n        uint totalAmount = 0;\r\n\r\n        for(uint i = 0; i<referralCount; i++){\r\n            totalAmount = totalAmount.add(calculateRewardReferral(referral[msg.sender][i]));\r\n        }\r\n\r\n        return totalAmount;\r\n    }\r\n\r\n    function calculateTotalRewardReferral(address _account) public view returns (uint){\r\n\r\n        uint referralCount = referral[_account].length;\r\n\r\n        uint totalAmount = 0;\r\n\r\n        for(uint i = 0; i<referralCount; i++){\r\n            totalAmount = totalAmount.add(calculateRewardReferral(referral[_account][i]));\r\n        }\r\n\r\n        return totalAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the lowest stake info of the current account\r\n     * @param customer Customer where the lowest stake is returned\r\n     * @return uint The stake amount\r\n     * @return uint The stake ID\r\n     */\r\n    function getLowestStake(address customer) public view returns (uint, uint){\r\n        uint stakeNumber = stake[customer].length;\r\n        uint min = _MAX_STAKE_AMOUNT;\r\n        uint minID = 0;\r\n        bool foundFlag = false;\r\n\r\n        for(uint i = 0; i<stakeNumber; i++){\r\n            if(stake[customer][i].deposit_amount <= min){\r\n                if(stake[customer][i].returned){\r\n                    continue;\r\n                }\r\n                min = stake[customer][i].deposit_amount;\r\n                minID = i;\r\n                foundFlag = true;\r\n            }\r\n        }\r\n\r\n\r\n        if(!foundFlag){\r\n            return (0, 0);\r\n        }else{\r\n            return (min, minID);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    //--------------------------------------------------------------------\r\n    //-------------------------- INTERNAL -----------------------------------\r\n    //--------------------------------------------------------------------\r\n\r\n    /**\r\n     * @dev Calculate the customer reward based on the provided stake\r\n     * param uint _stakeID The stake where the reward should be calculated\r\n     * @return The reward value\r\n     */\r\n    function calculateRewardToWithdraw(uint _stakeID) public view returns (uint){\r\n        Stake memory _stake = stake[msg.sender][_stakeID];\r\n\r\n        uint amount_staked = _stake.deposit_amount;\r\n        uint already_withdrawed = _stake.alreadyWithdrawedAmount;\r\n\r\n        uint periods = calculatePeriods(_stakeID);  //Periods for interest calculation\r\n\r\n        uint interest = amount_staked.mul(_INTEREST_VALUE);\r\n\r\n        uint total_interest = interest.mul(periods).div(100000);\r\n\r\n        uint reward = total_interest.sub(already_withdrawed); //Subtract the already withdrawed amount\r\n\r\n        return reward;\r\n    }\r\n\r\n    function calculateRewardToWithdraw(address _account, uint _stakeID) internal view onlyOwner returns (uint){\r\n        Stake memory _stake = stake[_account][_stakeID];\r\n\r\n        uint amount_staked = _stake.deposit_amount;\r\n        uint already_withdrawed = _stake.alreadyWithdrawedAmount;\r\n\r\n        uint periods = calculateAccountStakePeriods(_account, _stakeID);  //Periods for interest calculation\r\n\r\n        uint interest = amount_staked.mul(_INTEREST_VALUE);\r\n\r\n        uint total_interest = interest.mul(periods).div(100000);\r\n\r\n        uint reward = total_interest.sub(already_withdrawed); //Subtract the already withdrawed amount\r\n\r\n        return reward;\r\n    }\r\n\r\n    function calculateTotalRewardToWithdraw(address _account) internal view onlyOwner returns (uint){\r\n        Stake[] memory accountStakes = stake[_account];\r\n\r\n        uint stakeNumber = accountStakes.length;\r\n        uint amount = 0;\r\n\r\n        for( uint i = 0; i<stakeNumber; i++){\r\n            amount = amount.add(calculateRewardToWithdraw(_account, i));\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function calculateCompoundInterest(uint _stakeID) external view returns (uint256){\r\n\r\n        Stake memory _stake = stake[msg.sender][_stakeID];\r\n\r\n        uint256 periods = calculatePeriods(_stakeID);\r\n        uint256 amount_staked = _stake.deposit_amount;\r\n\r\n        uint256 excepted_amount = amount_staked;\r\n\r\n        //Calculate reward\r\n        for(uint i = 0; i < periods; i++){\r\n\r\n            uint256 period_interest;\r\n\r\n            period_interest = excepted_amount.mul(_INTEREST_VALUE).div(100);\r\n\r\n            excepted_amount = excepted_amount.add(period_interest);\r\n        }\r\n\r\n        assert(excepted_amount >= amount_staked);\r\n\r\n        return excepted_amount;\r\n    }\r\n\r\n    function calculatePeriods(uint _stakeID) public view returns (uint){\r\n        Stake memory _stake = stake[msg.sender][_stakeID];\r\n\r\n\r\n        uint creation_time = _stake.stake_creation_time;\r\n        uint current_time = block.timestamp;\r\n\r\n        uint total_period = current_time.sub(creation_time);\r\n\r\n        uint periods = total_period.div(_INTEREST_PERIOD);\r\n\r\n        return periods;\r\n    }\r\n\r\n    function calculateAccountStakePeriods(address _account, uint _stakeID) public view returns (uint){\r\n        Stake memory _stake = stake[_account][_stakeID];\r\n\r\n\r\n        uint creation_time = _stake.stake_creation_time;\r\n        uint current_time = block.timestamp;\r\n\r\n        uint total_period = current_time.sub(creation_time);\r\n\r\n        uint periods = total_period.div(_INTEREST_PERIOD);\r\n\r\n        return periods;\r\n    }\r\n\r\n    function calculatePenalty(uint _amountStaked) private pure returns (uint){\r\n        uint tmp_penalty = _amountStaked.mul(_PENALTY_VALUE);   //Take the 10 percent\r\n        return tmp_penalty.div(100);\r\n    }\r\n\r\n    function updateSuppliedToken(uint _amount) internal returns (bool){\r\n        \r\n        if(_amount > amount_supplied){\r\n            return false;\r\n        }\r\n        \r\n        amount_supplied = amount_supplied.sub(_amount);\r\n        return true;\r\n    }\r\n\r\n    function checkPotBalance(uint _amount) internal view returns (bool){\r\n        if(pot >= _amount){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n\r\n    function getMachineBalance() internal view returns (uint){\r\n        return ERC20Interface.balanceOf(address(this));\r\n    }\r\n\r\n    function getMachineState() external view returns (uint){\r\n        return amount_supplied;\r\n    }\r\n\r\n    function isSubscriptionEnded() public view returns (bool){\r\n        if(amount_supplied >= _MAX_TOKEN_SUPPLY_LIMIT - _MIDTERM_TOKEN_SUPPLY_LIMIT){\r\n            return false;\r\n        }else{\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function isMachineStopped() public view returns (bool){\r\n        if(amount_supplied > 0){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    //--------------------------------------------------------------\r\n    //------------------------ DEBUG -------------------------------\r\n    //--------------------------------------------------------------\r\n\r\n    function getOwner() external view returns (address){\r\n        return owner();\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"NewStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PotExhausted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPot\",\"type\":\"uint256\"}],\"name\":\"PotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"machineStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"referralRewardSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewardWithdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"subscriptionStopped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"}],\"name\":\"calculateAccountStakePeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"}],\"name\":\"calculateCompoundInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"}],\"name\":\"calculatePeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"calculateRewardReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"}],\"name\":\"calculateRewardToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"calculateTotalRewardReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateTotalRewardReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositPot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccountReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveStakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAccount\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"}],\"name\":\"getAlreadyWithdrawedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"}],\"name\":\"getCurrentStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"getLowestStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMachineState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPotentialWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReferralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasReferral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMachineStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSubscriptionEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTokenSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"returnPot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"}],\"name\":\"returnTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referralAddress\",\"type\":\"address\"}],\"name\":\"stakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromPot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReferralReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ENOStaking","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://77c49fea6c8ef97a96f0947b16d874a573166e7bf6127a24853698b813574b6d"}]}