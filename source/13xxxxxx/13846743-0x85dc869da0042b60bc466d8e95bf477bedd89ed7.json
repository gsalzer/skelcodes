{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/utils/Ownable.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract Ownable {\r\n    address private _contract_owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _contract_owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _contract_owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_contract_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_contract_owner, newOwner);\r\n        _contract_owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Address.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts/utils/SafeMath.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a, \"add\");\r\n    }\r\n    function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {\r\n        require(b <= a, s);\r\n        c = a - b;\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a, \"sub\");\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"mul\");\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0, \"div\");\r\n        c = a / b;\r\n    }\r\n    function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {\r\n        require(b > 0, s);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// File: contracts/erc20/IERC20.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/erc20/SafeERC20.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).safeAdd(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).safeSub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/core/IPool.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract ICurvePool{\r\n  function deposit(uint256 _amount) public;\r\n  function withdraw(uint256 _amount) public;\r\n\r\n  function get_virtual_price() public view returns(uint256);\r\n\r\n  function get_lp_token_balance() public view returns(uint256);\r\n\r\n  function get_lp_token_addr() public view returns(address);\r\n\r\n  string public name;\r\n}\r\n\r\n// File: contracts/utils/AddressArray.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary AddressArray{\r\n  function exists(address[] memory self, address addr) public pure returns(bool){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function index_of(address[] memory self, address addr) public pure returns(uint){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return i;\r\n      }\r\n    }\r\n    require(false, \"AddressArray:index_of, not exist\");\r\n  }\r\n\r\n  function remove(address[] storage self, address addr) public returns(bool){\r\n    uint index = index_of(self, addr);\r\n    self[index] = self[self.length - 1];\r\n\r\n    delete self[self.length-1];\r\n    self.length--;\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/utils/TransferableToken.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\ncontract TransferableTokenHelper{\r\n  uint256 public decimals;\r\n}\r\n\r\nlibrary TransferableToken{\r\n  using SafeERC20 for IERC20;\r\n\r\n  function transfer(address target_token, address payable to, uint256 amount) public {\r\n    if(target_token == address(0x0)){\r\n      (bool status, ) = to.call.value(address(this).balance)(\"\");\r\n      require(status, \"TransferableToken, transfer eth failed\");\r\n    }else{\r\n      IERC20(target_token).safeTransfer(to, amount);\r\n    }\r\n  }\r\n\r\n  function balanceOfAddr(address target_token, address _of) public view returns(uint256){\r\n    if(target_token == address(0x0)){\r\n      return address(_of).balance;\r\n    }else{\r\n      return IERC20(target_token).balanceOf(address(_of));\r\n    }\r\n  }\r\n\r\n  function decimals(address target_token) public view returns(uint256) {\r\n    if(target_token == address(0x0)){\r\n      return 18;\r\n    }else{\r\n      return TransferableTokenHelper(target_token).decimals();\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/core/ConvexInterface.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract ConvexRewardInterface{\r\nfunction getReward(address, bool) external returns(bool);\r\nfunction withdraw(uint256, bool) external returns(bool);\r\n}\r\n\r\ncontract ConvexBoosterInterface{\r\n  function poolInfo(uint256) external view returns(address,address,address,address,address,bool);\r\n  function poolLength() external view returns (uint256);\r\n  function depositAll(uint256 _pid, bool _stake) external returns(bool);\r\n  function withdraw(uint256 _pid, uint256 _amount) public returns(bool);\r\n}\r\n\r\n// File: contracts/core/CFController.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract YieldHandlerInterface{\r\n  function handleExtraToken(address from, address target_token, uint256 amount, uint min_amount) public;\r\n}\r\n\r\n\r\ncontract CFControllerV2 is Ownable{\r\n  using SafeERC20 for IERC20;\r\n  using TransferableToken for address;\r\n  using AddressArray for address[];\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  address[] public all_pools;\r\n\r\n  address public current_pool;\r\n\r\n  uint256 public last_earn_block;\r\n  uint256 public earn_gap;\r\n  address public crv_token;\r\n  address public target_token;\r\n\r\n  address public fee_pool;\r\n  uint256 public harvest_fee_ratio;\r\n  uint256 public ratio_base;\r\n\r\n  address[] public extra_yield_tokens;\r\n\r\n  YieldHandlerInterface public yield_handler;\r\n\r\n  ConvexBoosterInterface public convex_booster;\r\n  address public vault;\r\n  address weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n  //@param _target, when it's 0, means ETH\r\n  constructor(address _crv, address _target, uint256 _earn_gap) public{\r\n    last_earn_block = 0;\r\n    require(_crv != address(0x0), \"invalid crv address\");\r\n    //require(_target != address(0x0), \"invalid target address\");\r\n    require(_earn_gap != 0, \"invalid earn gap\");\r\n    convex_booster= ConvexBoosterInterface(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\r\n    crv_token = _crv;\r\n    target_token = _target;\r\n    earn_gap = _earn_gap;\r\n    ratio_base = 10000;\r\n  }\r\n\r\n  function setVault(address _vault) public onlyOwner{\r\n    require(_vault != address(0x0), \"invalid vault\");\r\n    vault = _vault;\r\n  }\r\n\r\n  modifier onlyVault{\r\n    require(msg.sender == vault, \"only vault can call this\");\r\n    _;\r\n  }\r\n\r\n  function get_current_pool() public view returns(ICurvePool) {\r\n    return ICurvePool(current_pool);\r\n  }\r\n\r\n  function add_pool(address addr) public onlyOwner{\r\n    require(!all_pools.exists(addr), \"already exist\");\r\n    if(current_pool == address(0x0)){\r\n      current_pool = addr;\r\n    }\r\n    all_pools.push(addr);\r\n  }\r\n\r\n  function remove_pool(address addr) public onlyOwner{\r\n    require(all_pools.exists(addr), \"not exist\");\r\n    require(current_pool != addr, \"active, cannot remove\");\r\n    all_pools.remove(addr);\r\n  }\r\n\r\n  event ChangeCurrentPool(address old, address _new);\r\n  function change_current_pool(address addr) public onlyOwner{\r\n    require(all_pools.exists(addr), \"not exist\");\r\n    require(current_pool != addr, \"already active\");\r\n\r\n    emit ChangeCurrentPool(current_pool, addr);\r\n    //pull out all target token\r\n    uint256 cur = ICurvePool(current_pool).get_lp_token_balance();\r\n    if(cur == 0){\r\n      return ;\r\n    }\r\n\r\n    uint256 index = get_pid(ICurvePool(current_pool).get_lp_token_addr());\r\n    (,,,address crvRewards,,) = convex_booster.poolInfo(index);\r\n    ConvexRewardInterface(crvRewards).withdraw(cur, false);\r\n    convex_booster.withdraw(index, cur);\r\n    address lp_token = ICurvePool(current_pool).get_lp_token_addr();\r\n    require(IERC20(lp_token).balanceOf(address(this)) == cur, \"invalid lp token amount\");\r\n    IERC20(lp_token).safeTransfer(current_pool, cur);\r\n\r\n    ICurvePool(current_pool).withdraw(cur);\r\n    uint256 b = TransferableToken.balanceOfAddr(target_token, address(this));\r\n    current_pool = addr;\r\n\r\n    //deposit to new pool\r\n    TransferableToken.transfer(target_token, current_pool.toPayable(), b);\r\n    _deposit(b);\r\n  }\r\n\r\n  function _deposit(uint256 _amount) internal{\r\n    require(current_pool != address(0x0), \"cannot deposit with 0x0 pool\");\r\n    ICurvePool(current_pool).deposit(_amount);\r\n    address lp_token = ICurvePool(current_pool).get_lp_token_addr();\r\n    IERC20(lp_token).approve(address(convex_booster), 0);\r\n    IERC20(lp_token).approve(address(convex_booster), IERC20(lp_token).balanceOf(address(this)));\r\n    convex_booster.depositAll(get_pid(ICurvePool(current_pool).get_lp_token_addr()), true);\r\n  }\r\n\r\n  function deposit(uint256 _amount) public onlyVault{\r\n    _deposit(_amount);\r\n  }\r\n\r\n  mapping(address=>uint256) public cached_lp_token_pids;\r\n  function get_pid(address lp_token_addr) internal returns(uint256) {\r\n    if(cached_lp_token_pids[lp_token_addr] != 0){\r\n      return cached_lp_token_pids[lp_token_addr];\r\n    }\r\n\r\n    for(uint i = 0; i < convex_booster.poolLength(); i++){\r\n      (address lp_token,,,,,bool shutdown) = convex_booster.poolInfo(i);\r\n      if(!shutdown && lp_token == lp_token_addr){\r\n        cached_lp_token_pids[lp_token_addr] = i;\r\n        return i;\r\n      }\r\n    }\r\n    require(false, \"not support pool\");\r\n  }\r\n\r\n  function withdraw(uint256 _amount) public onlyVault{\r\n    uint256 index = get_pid(ICurvePool(current_pool).get_lp_token_addr());\r\n    (,,,address crvRewards,,) = convex_booster.poolInfo(index);\r\n    ConvexRewardInterface(crvRewards).withdraw(_amount, false);\r\n    convex_booster.withdraw(index, _amount);\r\n    address lp_token = ICurvePool(current_pool).get_lp_token_addr();\r\n    require(IERC20(lp_token).balanceOf(address(this)) == _amount, \"invalid lp token amount\");\r\n    IERC20(lp_token).safeTransfer(current_pool, _amount);\r\n\r\n    ICurvePool(current_pool).withdraw(_amount);\r\n\r\n    uint256 b = TransferableToken.balanceOfAddr(target_token, address(this));\r\n    require(b != 0, \"too small target token\");\r\n    TransferableToken.transfer(target_token, msg.sender, b);\r\n  }\r\n\r\n  event EarnExtra(address addr, address token, uint256 amount);\r\n  //at least min_amount blocks to call this\r\n  function earnReward(uint min_amount) public onlyOwner{\r\n    require(block.number.safeSub(last_earn_block) >= earn_gap, \"not long enough\");\r\n    last_earn_block = block.number;\r\n\r\n    uint256 index = get_pid(ICurvePool(current_pool).get_lp_token_addr());\r\n    (,,,address crvRewards,,) = convex_booster.poolInfo(index);\r\n    ConvexRewardInterface(crvRewards).getReward(address(this), true);\r\n\r\n    for(uint i = 0; i < extra_yield_tokens.length; i++){\r\n      uint256 amount = IERC20(extra_yield_tokens[i]).balanceOf(address(this));\r\n      if(amount > 0){\r\n        require(yield_handler != YieldHandlerInterface(0x0), \"invalid yield handler\");\r\n        IERC20(extra_yield_tokens[i]).approve(address(yield_handler), amount);\r\n        if(target_token == address(0x0)){\r\n          yield_handler.handleExtraToken(extra_yield_tokens[i], weth, amount, min_amount);\r\n        }else{\r\n          yield_handler.handleExtraToken(extra_yield_tokens[i], target_token, amount, min_amount);\r\n        }\r\n      }\r\n    }\r\n\r\n    uint256 amount = TransferableToken.balanceOfAddr(target_token, address(this));\r\n    _refundTarget(amount);\r\n  }\r\n\r\n\r\n  event CFFRefund(uint256 amount, uint256 fee);\r\n  function _refundTarget(uint256 _amount) internal{\r\n    if(_amount == 0){\r\n      return ;\r\n    }\r\n    if(harvest_fee_ratio != 0 && fee_pool != address(0x0)){\r\n      uint256 f = _amount.safeMul(harvest_fee_ratio).safeDiv(ratio_base);\r\n      emit CFFRefund(_amount, f);\r\n      _amount = _amount.safeSub(f);\r\n      if(f != 0){\r\n        TransferableToken.transfer(target_token, fee_pool.toPayable(), f);\r\n      }\r\n    }else{\r\n      emit CFFRefund(_amount, 0);\r\n    }\r\n    TransferableToken.transfer(target_token, current_pool.toPayable(), _amount);\r\n    _deposit(_amount);\r\n  }\r\n\r\n  function pause() public onlyOwner{\r\n    current_pool = address(0x0);\r\n  }\r\n\r\n  event AddExtraToken(address _new);\r\n  function addExtraToken(address _new) public onlyOwner{\r\n    require(_new != address(0x0), \"invalid extra token\");\r\n    extra_yield_tokens.push(_new);\r\n    emit AddExtraToken(_new);\r\n  }\r\n\r\n  event RemoveExtraToken(address _addr);\r\n  function removeExtraToken(address _addr) public onlyOwner{\r\n    require(_addr != address(0x0), \"invalid address\");\r\n    uint len = extra_yield_tokens.length;\r\n    for(uint i = 0; i < len; i++){\r\n      if(extra_yield_tokens[i] == _addr){\r\n        extra_yield_tokens[i] = extra_yield_tokens[len - 1];\r\n        extra_yield_tokens[len - 1] =address(0x0);\r\n        extra_yield_tokens.length = len - 1;\r\n        emit RemoveExtraToken(_addr);\r\n      }\r\n    }\r\n  }\r\n\r\n  event ChangeYieldHandler(address old, address _new);\r\n  function changeYieldHandler(address _new) public onlyOwner{\r\n    address old = address(yield_handler);\r\n    yield_handler = YieldHandlerInterface(_new);\r\n    emit ChangeYieldHandler(old, address(yield_handler));\r\n  }\r\n\r\n  event ChangeFeePool(address old, address _new);\r\n  function changeFeePool(address _fp) public onlyOwner{\r\n    address old = fee_pool;\r\n    fee_pool = _fp;\r\n    emit ChangeFeePool(old, fee_pool);\r\n  }\r\n\r\n  event ChangeHarvestFee(uint256 old, uint256 _new);\r\n  function changeHarvestFee(uint256 _fee) public onlyOwner{\r\n    require(_fee < ratio_base, \"invalid fee\");\r\n    uint256 old = harvest_fee_ratio;\r\n    harvest_fee_ratio = _fee;\r\n    emit ChangeHarvestFee(old, harvest_fee_ratio);\r\n  }\r\n  function clearCachedPID(address lp_token) public onlyOwner{\r\n    delete cached_lp_token_pids[lp_token];\r\n  }\r\n\r\n  function() external payable{}\r\n}\r\n\r\ncontract CFControllerV2Factory{\r\n  event NewCFController(address addr);\r\n  function createCFController(address _crv, address _target, uint256 _earn_gap) public returns(address){\r\n    CFControllerV2 cf = new CFControllerV2(_crv, _target, _earn_gap);\r\n    emit NewCFController(address(cf));\r\n    cf.transferOwnership(msg.sender);\r\n    return address(cf);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"current_pool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratio_base\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_current_pool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cached_lp_token_pids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeYieldHandler\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeHarvestFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"remove_pool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_earn_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extra_yield_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crv_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee_pool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yield_handler\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvest_fee_ratio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"addExtraToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_pools\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeExtraToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"add_pool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fp\",\"type\":\"address\"}],\"name\":\"changeFeePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"convex_booster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"min_amount\",\"type\":\"uint256\"}],\"name\":\"earnReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"change_current_pool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lp_token\",\"type\":\"address\"}],\"name\":\"clearCachedPID\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earn_gap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crv\",\"type\":\"address\"},{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_earn_gap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangeCurrentPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EarnExtra\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"CFFRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"AddExtraToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"RemoveExtraToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangeYieldHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangeFeePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"ChangeHarvestFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CFControllerV2","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd52000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000001680","EVMVersion":"Default","Library":"SafeMath:071108ad85d7a766b41e0f5e5195537a8fc8e74d;AddressArray:d942f306075a0f7bc375328db822fcc3103b3268;TransferableToken:3fae5f25953e16833fbf9c1fa55b683dc87e2aad","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://88d24a9c713b21389050da88db3987701700b7659db64834abdc1d4a07330df2"}]}