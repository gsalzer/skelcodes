{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"FOOD.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;}\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;}\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());}\\r\\n\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;}\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;}\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));}\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);}\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);}\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function name() external view returns (string memory);\\r\\n    function getOwner() external view returns (address);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n  \\r\\ninterface IDEXFactory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n \\r\\ninterface IDEXRouter {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n \\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n \\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n \\r\\ncontract FOOD is IERC20, Ownable {\\r\\n    string constant _name = 'FOOD';\\r\\n    string constant _symbol = 'FOOD';\\r\\n    uint8 constant _decimals = 9;\\r\\n    uint256 _totalSupply;\\r\\n    mapping(address => bool) controllers;\\r\\n    mapping(address => uint256) lastMinted;\\r\\n    mapping (address => uint256) _balances;\\r\\n    mapping (address => mapping (address => uint256)) _allowances;\\r\\n    mapping (address => bool) isFeeExempt;\\r\\n\\r\\n \\r\\n    uint256 liquidityFee = 400;\\r\\n    uint256 marketingFee = 200;\\r\\n    uint256 teamFee = 100;\\r\\n    uint256 burnFee = 400;\\r\\n    uint256 totalFee = 1000;\\r\\n    uint256 totalFeeNoBurn = totalFee - burnFee;\\r\\n    uint256 feeDenominator = 10000;\\r\\n \\r\\n    address public liquidityWallet;\\r\\n    address public marketingWallet;\\r\\n    address public buybackWallet;\\r\\n    address private teamFeeReceiver;\\r\\n    address private teamFeeReceiver2;\\r\\n    address private teamFeeReceiver3;\\r\\n \\r\\n    IDEXRouter public router;\\r\\n    address public pair;\\r\\n    bool public swapEnabled = true;\\r\\n\\r\\n \\r\\n    uint256 public swapThreshold = _totalSupply / 2000; // 0.05%\\r\\n    bool inSwap;\\r\\n    modifier swapping() { inSwap = true; _; inSwap = false; }\\r\\n \\r\\n    constructor () {\\r\\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\\r\\n        _allowances[address(this)][address(router)] = uint256(2**256 - 1);\\r\\n        controllers[msg.sender] = true;\\r\\n        liquidityWallet = address(msg.sender);\\r\\n\\t    marketingWallet = address(0xD8Acc73b079FC7F262a0b5fD4dDEA3c02e863996);\\r\\n\\t    teamFeeReceiver = address(0xD69100f793Ecc214C0fF3C9cEaC62B06b3473AEC);\\r\\n\\t    teamFeeReceiver2 = address(0x9e369014Ff6012dFaA81e3D511e962FE53924D10);\\r\\n\\t    teamFeeReceiver3 = address(0xA65CBA2da4791338af6fa02dB3584d82212e37e8);\\r\\n        controllers[msg.sender]=true;\\r\\n        isFeeExempt[owner()] = true; \\r\\n        isFeeExempt[address(this)] = true;\\r\\n        isFeeExempt[liquidityWallet] = true;\\r\\n        _totalSupply = 600000000 gwei;\\r\\n        _balances[0xEDa074bf977C0EF4939114d98631735819f233a4] = 600000000 gwei;\\r\\n        emit Transfer(address(0), 0xEDa074bf977C0EF4939114d98631735819f233a4, 600000000 gwei);\\r\\n    }\\r\\n \\r\\n    receive() external payable { }\\r\\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\\r\\n    function decimals() external pure override returns (uint8) { return _decimals; }\\r\\n    function symbol() external pure override returns (string memory) { return _symbol; }\\r\\n    function name() external pure override returns (string memory) { return _name; }\\r\\n    function getOwner() external view override returns (address) { return owner(); }\\r\\n    function balanceOf(address account) public view override returns (uint256) {require (lastMinted[account] != block.number); return _balances[account]; }\\r\\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\r\\n \\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _allowances[msg.sender][spender] = amount;\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n \\r\\n    function approveMax(address spender) external returns (bool) {\\r\\n        return approve(spender, uint256(2**256 - 1));\\r\\n    }\\r\\n \\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        return _transferFrom(msg.sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function mint(address account, uint256 amount) external {\\r\\n        require(controllers[msg.sender], \\\"Only controllers can mint\\\");\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        lastMinted[account] = block.number;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function claimed(address account) external {\\r\\n        require(controllers[msg.sender], \\\"Only controllers can burn\\\");\\r\\n        lastMinted[account] = block.number;\\r\\n    }\\r\\n\\r\\n    function burn(address account, uint256 amount) external {\\r\\n        require(controllers[msg.sender], \\\"Only controllers can burn\\\");\\r\\n\\t    burnTokens(account,amount);\\r\\n    }\\r\\n\\r\\n    function burnTokens(address account, uint256 amount) internal {\\r\\n\\t    uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        if(_allowances[sender][msg.sender] != uint256(2**256 - 1)){\\r\\n            require(_balances[sender] >= amount, \\\"Insufficient Balance\\\");\\r\\n            _allowances[sender][msg.sender] = (_allowances[sender][msg.sender] -amount);\\r\\n        }\\r\\n        return _transferFrom(sender, recipient, amount);\\r\\n    }\\r\\n \\r\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(_balances[sender] >= amount, \\\"Insufficient Balance\\\");\\r\\n        if(inSwap||isFeeExempt[recipient]||isFeeExempt[sender]){return _simpleTransfer(sender, recipient, amount);}\\r\\n        _balances[sender] = _balances[sender] -amount;\\r\\n        if(shouldSwapBack()){ swapBack();}\\r\\n     \\tuint256 amountReceived;\\r\\n        if(!isFeeExempt[recipient]){amountReceived= shouldTakeFee(sender, recipient) ? takeFee(sender, amount) : amount;}else{amountReceived = amount;}\\r\\n        \\r\\n        _balances[recipient] = _balances[recipient] + amountReceived;\\r\\n        emit Transfer(sender, recipient, amountReceived);\\r\\n        return true;\\r\\n    }\\r\\n \\r\\n     function _simpleTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\\r\\n        require(_balances[sender] >= amount, \\\"Insufficient Balance\\\");\\r\\n        _balances[sender] = _balances[sender] - amount;\\r\\n        _balances[recipient] = _balances[recipient] + amount;\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n \\r\\n    function getTotalFee() public view returns (uint256) {\\r\\n        return totalFee;\\r\\n    }\\r\\n \\r\\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\\r\\n       return (!isFeeExempt[sender] && (sender == pair || recipient == pair));\\r\\n    }\\r\\n \\r\\n    function takeFee(address sender,uint256 amount) internal returns (uint256) {\\r\\n        uint256 feeAmount = (amount*totalFee)/feeDenominator;\\r\\n        uint256 burnAmount = (feeAmount * burnFee) / totalFee;\\r\\n        _balances[address(this)] = _balances[address(this)] + feeAmount;\\r\\n        emit Transfer(sender, address(this), feeAmount);\\r\\n        burnTokens(address(this), burnAmount);\\r\\n        return amount - feeAmount;\\r\\n    }\\r\\n \\r\\n    function shouldSwapBack() internal view returns (bool) {\\r\\n        return msg.sender != pair\\r\\n        && !inSwap\\r\\n        && swapEnabled\\r\\n        && _balances[address(this)] >= swapThreshold;\\r\\n    }\\r\\n \\r\\n    function swapBack() internal swapping {\\r\\n        uint256 amountToLiquify = swapThreshold * liquidityFee / totalFeeNoBurn  / 2;\\r\\n        uint256 amountToSwap = swapThreshold - amountToLiquify;\\r\\n \\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = router.WETH();\\r\\n \\r\\n        uint256 balanceBefore = address(this).balance;\\r\\n \\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            amountToSwap,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp+360\\r\\n        );\\r\\n \\r\\n        uint256 amountETH = address(this).balance -balanceBefore;\\r\\n        \\r\\n        uint256 totalETHFee = totalFeeNoBurn - (liquidityFee / 2);\\r\\n        \\r\\n        uint256 amountETHLiquidity = amountETH * liquidityFee / totalETHFee / 2;\\r\\n        uint256 amountETHTeam = amountETH * teamFee / totalETHFee;\\r\\n        uint256 amountETHMarketing = amountETH * marketingFee / totalETHFee;\\r\\n        \\r\\n        payable(teamFeeReceiver).transfer(amountETHTeam / 3);\\r\\n    \\tpayable(teamFeeReceiver2).transfer(amountETHTeam / 3);\\r\\n    \\tpayable(teamFeeReceiver3).transfer(amountETHTeam / 3);\\r\\n    \\tpayable(marketingWallet).transfer(amountETHMarketing);\\r\\n\\r\\n        if(amountToLiquify > 0){\\r\\n            router.addLiquidityETH{value: amountETHLiquidity}(\\r\\n                address(this),\\r\\n                amountToLiquify,\\r\\n                0,\\r\\n                0,\\r\\n                liquidityWallet,\\r\\n                block.timestamp+360\\r\\n            );\\r\\n            emit AutoLiquify(amountETHLiquidity, amountToLiquify);\\r\\n        }\\r\\n    }\\r\\n \\r\\n \\r\\n    function setIsFeeExempt(address holder, bool _bool) external onlyOwner {\\r\\n        isFeeExempt[holder] = _bool;\\r\\n    }\\r\\n\\r\\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external onlyOwner {\\r\\n        swapEnabled = _enabled;\\r\\n        swapThreshold = _amount;\\r\\n    } \\r\\n\\r\\n    function setFeeReceivers(address _liquidityWallet, address _marketingWallet) external onlyOwner {\\r\\n        liquidityWallet = _liquidityWallet;\\r\\n        marketingWallet = _marketingWallet;\\r\\n    }\\r\\n \\r\\n    function recoverEth() external onlyOwner() {\\r\\n        payable(msg.sender).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function addController(address controller) external onlyOwner {\\r\\n        controllers[controller] = true;\\r\\n    }\\r\\n\\r\\n    function removeController(address controller) external onlyOwner {\\r\\n        controllers[controller] = false;\\r\\n    }\\r\\n \\r\\n    function recoverToken(address _token, uint256 amount) external onlyOwner returns (bool _sent){\\r\\n        _sent = IERC20(_token).transfer(msg.sender, amount);\\r\\n    }\\r\\n \\r\\n    event AutoLiquify(uint256 amountETH, uint256 amountToken);\\r\\n \\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FOOD","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}