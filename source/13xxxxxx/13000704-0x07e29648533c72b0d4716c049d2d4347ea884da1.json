{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/jbrumwell/Documents/wunderkind/monegraph/monegraph-auctions/contracts/TraditionalAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./abstract/Auction.sol\\\";\\n\\ncontract TraditionalAuction is MonegraphAuction {\\n    event AuctionCreated(string metadata);\\n\\n    event BidReceived(address bidder);\\n    event AuctionFinalized(address from);\\n\\n    uint256 public constant maximumIncrease = 100000000000000000 wei;\\n\\n    function initialize(\\n        address payable _beneficiary,\\n        string memory _metadata,\\n        uint256 _initialBidAmount,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    ) public override notZeroAddress(_beneficiary) {\\n        super.initialize(\\n            _beneficiary,\\n            _metadata,\\n            _initialBidAmount,\\n            _startTime,\\n            _endTime\\n        );\\n\\n        emit AuctionCreated(metadata);\\n    }\\n\\n    modifier minimumBid() {\\n        uint256 minimum = initialBidAmount;\\n\\n        if (highestBid > 0) {\\n            uint256 percentIncrease = (highestBid * 10) / 100;\\n            minimum = percentIncrease > maximumIncrease\\n                ? highestBid + maximumIncrease\\n                : highestBid + percentIncrease;\\n        }\\n\\n        require(msg.value >= minimum, \\\"Incorrect purchase price received\\\");\\n        _;\\n    }\\n\\n    function bid()\\n        public\\n        payable\\n        override\\n        auctionHasStarted\\n        auctionNotClosed\\n        minimumBid\\n    {\\n        if (highestBid > 0) {\\n            address payable refundee = payable(highestBidder);\\n            refundee.transfer(highestBid);\\n        } else if (endTime == 0) {\\n            endTime = block.timestamp + duration;\\n        }\\n\\n        bids[msg.sender].push(\\n            Bid({amount: msg.value, timestamp: block.timestamp})\\n        );\\n\\n        if (block.timestamp + extensionPeriod > endTime) {\\n            endTime = block.timestamp + extensionPeriod;\\n        }\\n\\n        highestBidder = msg.sender;\\n        highestBid = msg.value;\\n\\n        emit BidReceived(msg.sender);\\n    }\\n\\n    function finalize() public auctionClosed auctionNotFinalized {\\n        finalizedTime = block.timestamp;\\n\\n        beneficiary.transfer(highestBid);\\n\\n        emit AuctionFinalized(msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/jbrumwell/Documents/wunderkind/monegraph/monegraph-auctions/contracts/abstract/Auction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract MonegraphAuction is Initializable {\\n    address payable public beneficiary;\\n    string public metadata;\\n\\n    address public highestBidder;\\n    uint256 public highestBid;\\n\\n    uint256 public initialBidAmount;\\n\\n    uint256 public startTime;\\n    uint256 public endTime;\\n    uint256 public finalizedTime;\\n\\n    uint256 public constant duration = 86400;\\n    uint256 public constant extensionPeriod = 900;\\n\\n    struct Bid {\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n\\n    mapping(address => Bid[]) public bids;\\n\\n    modifier notZeroAddress(address addr) {\\n        require(addr != address(0));\\n        _;\\n    }\\n\\n    modifier onlyBefore(uint256 _time) {\\n        require(block.timestamp < _time);\\n        _;\\n    }\\n\\n    modifier onlyAfter(uint256 _time) {\\n        require(block.timestamp > _time);\\n        _;\\n    }\\n\\n    modifier auctionHasStarted() {\\n        require(startTime <= block.timestamp, \\\"Auction has not started yet\\\");\\n        _;\\n    }\\n\\n    modifier auctionNotClosed() {\\n        require(\\n            endTime == 0 || endTime >= block.timestamp,\\n            \\\"Auction already ended.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier auctionClosed() {\\n        require(\\n            endTime != 0 && endTime <= block.timestamp,\\n            \\\"This auction is still active\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier auctionNotFinalized() {\\n        require(finalizedTime == 0, \\\"Auction has already been finalized\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address payable _beneficiary,\\n        string memory _metadata,\\n        uint256 _initialBidAmount,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    ) public virtual initializer {\\n        _startTime = _startTime > 0 && _startTime > block.timestamp\\n            ? _startTime\\n            : block.timestamp;\\n\\n        endTime = _endTime > 0 && _endTime > block.timestamp ? _endTime : 0;\\n\\n        beneficiary = _beneficiary;\\n        metadata = _metadata;\\n        initialBidAmount = _initialBidAmount;\\n        startTime = _startTime;\\n    }\\n\\n    function bid() public payable virtual;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"AuctionFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"BidReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extensionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestBidder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialBidAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_initialBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TraditionalAuction","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}