{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n/** \r\n* Crazeblade & the team presents\r\n* \r\n* @title Moon-Flare-Paying-Token v1.0\r\n* \r\n* ███╗░░░███╗░█████╗░░█████╗░███╗░░██╗  ███████╗██╗░░░░░░█████╗░██████╗░███████╗\r\n* ████╗░████║██╔══██╗██╔══██╗████╗░██║  ██╔════╝██║░░░░░██╔══██╗██╔══██╗██╔════╝\r\n* ██╔████╔██║██║░░██║██║░░██║██╔██╗██║  █████╗░░██║░░░░░███████║██████╔╝█████╗░░\r\n* ██║╚██╔╝██║██║░░██║██║░░██║██║╚████║  ██╔══╝░░██║░░░░░██╔══██║██╔══██╗██╔══╝░░\r\n* ██║░╚═╝░██║╚█████╔╝╚█████╔╝██║░╚███║  ██║░░░░░███████╗██║░░██║██║░░██║███████╗\r\n* ╚═╝░░░░░╚═╝░╚════╝░░╚════╝░╚═╝░░╚══╝  ╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝░░╚═╝╚══════╝\r\n* \r\n* ██████╗░░█████╗░██╗░░░██╗██╗███╗░░██╗░██████╗░  ████████╗░█████╗░██╗░░██╗███████╗███╗░░██╗\r\n* ██╔══██╗██╔══██╗╚██╗░██╔╝██║████╗░██║██╔════╝░  ╚══██╔══╝██╔══██╗██║░██╔╝██╔════╝████╗░██║\r\n* ██████╔╝███████║░╚████╔╝░██║██╔██╗██║██║░░██╗░  ░░░██║░░░██║░░██║█████═╝░█████╗░░██╔██╗██║\r\n* ██╔═══╝░██╔══██║░░╚██╔╝░░██║██║╚████║██║░░╚██╗  ░░░██║░░░██║░░██║██╔═██╗░██╔══╝░░██║╚████║\r\n* ██║░░░░░██║░░██║░░░██║░░░██║██║░╚███║╚██████╔╝  ░░░██║░░░╚█████╔╝██║░╚██╗███████╗██║░╚███║\r\n* ╚═╝░░░░░╚═╝░░╚═╝░░░╚═╝░░░╚═╝╚═╝░░╚══╝░╚═════╝░  ░░░╚═╝░░░░╚════╝░╚═╝░░╚═╝╚══════╝╚═╝░░╚══╝\r\n* \r\n* \r\n* Official website: https://moonflare.io\r\n* \r\n**/\r\n\r\npragma solidity 0.8.1;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_)  {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply + amount;\r\n        _balances[account] = _balances[account] + amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account] - amount;\r\n        _totalSupply = _totalSupply - amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\ninterface IPayingToken {\r\n\r\n    /**\r\n     * @dev Returns the total amount of funds a given address is able to withdraw currently.\r\n     * @param owner Address of FundsDistributionToken holder\r\n     * @return A uint256 representing the available funds for a given account\r\n     */\r\n    function withdrawableFundsOf(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Withdraws all available funds for a FundsDistributionToken holder.\r\n     */\r\n    function withdrawFunds() external;\r\n\r\n    /**\r\n     * @dev This event emits when new funds are distributed\r\n     * @param by the address of the sender who distributed funds\r\n     * @param fundsDistributed the amount of funds received for distribution\r\n     */\r\n    event FundsDistributed(address indexed by, uint256 fundsDistributed);\r\n\r\n    /**\r\n     * @dev This event emits when distributed funds are withdrawn by a token holder.\r\n     * @param by the address of the receiver of funds\r\n     * @param fundsWithdrawn the amount of funds that were withdrawn\r\n     */\r\n    event FundsWithdrawn(address indexed by, uint256 fundsWithdrawn);\r\n}\r\n\r\n\r\n/** \r\n * @title PayingToken\r\n * Based on https://github.com/atpar/funds-distribution-token\r\n * @dev A  mintable token that can represent claims on cash flow of arbitrary assets such as dividends, loan repayments, \r\n * fee or revenue shares among large numbers of token holders. Anyone can deposit funds, token holders can withdraw \r\n * their claims.\r\n */\r\nabstract contract PayingToken is IPayingToken, ERC20 {\r\n\r\n    // optimize, see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\r\n    uint256 constant internal pointsMultiplier = 2**128;\r\n    uint256 internal pointsPerShare;\r\n    uint256 internal activeTokens; \r\n\r\n    mapping(address => int256) internal pointsCorrection;\r\n    mapping(address => uint256) internal withdrawnFunds;\r\n    mapping(address => bool) internal activatedAddresses;\r\n\r\n\r\n    constructor (\r\n        string memory name, \r\n        string memory symbol\r\n    ) \r\n        ERC20(name, symbol) \r\n    {}\r\n\r\n\r\n    function activateAddress() public {\r\n        address account = msg.sender;\r\n\r\n        require(!isAddressActivated(account), \"PayingToken.activateAddress: already activated\");\r\n\r\n        activatedAddresses[account] = true;\r\n        uint256 balance = balanceOf(account);\r\n\r\n        activeTokens = activeTokens + balance;\r\n\r\n        pointsCorrection[account] = pointsCorrection[account] -  int256(pointsPerShare * balance);\r\n    }\r\n\r\n    function isAddressActivated(address account) public view returns(bool) {\r\n        return activatedAddresses[account];\r\n    }\r\n\r\n    /** \r\n     * prev. distributeDividends\r\n     * @notice Distributes funds to token holders.\r\n     * @dev It reverts if the total supply of tokens is 0.\r\n    **/\r\n    function _distributeFunds(uint256 value) internal {\r\n        pointsPerShare = pointsPerShare + (value * pointsMultiplier) / activeTokens;\r\n    }\r\n\r\n    /**\r\n     * prev. withdrawDividend\r\n     * @notice Prepares funds withdrawal\r\n     * @dev It emits a `FundsWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n     */\r\n    function _prepareWithdraw() internal returns (uint256) {\r\n        uint256 _withdrawableDividend = withdrawableFundsOf(msg.sender);\r\n    \r\n        withdrawnFunds[msg.sender] = withdrawnFunds[msg.sender] + _withdrawableDividend;\r\n        \r\n        emit FundsWithdrawn(msg.sender, _withdrawableDividend);\r\n\r\n        return _withdrawableDividend;\r\n    }\r\n\r\n    /** \r\n     * prev. withdrawableDividendOf\r\n     * @notice View the amount of funds that an address can withdraw.\r\n     * @param _owner The address of a token holder.\r\n     * @return The amount funds that `_owner` can withdraw.\r\n     */\r\n    function withdrawableFundsOf(address _owner) public view override returns(uint256) {\r\n        return accumulativeFundsOf(_owner)- withdrawnFunds[_owner];\r\n    }\r\n    \r\n    /**\r\n     * prev. withdrawnDividendOf\r\n     * @notice View the amount of funds that an address has withdrawn.\r\n     * @param _owner The address of a token holder.\r\n     * @return The amount of funds that `_owner` has withdrawn.\r\n     */\r\n    function withdrawnFundsOf(address _owner) public view returns(uint256) {\r\n        return withdrawnFunds[_owner];\r\n    }\r\n\r\n    /**\r\n     * prev. accumulativeDividendOf\r\n     * @notice View the amount of funds that an address has earned in total.\r\n     * @dev accumulativeFundsOf(_owner) = withdrawableFundsOf(_owner) + withdrawnFundsOf(_owner)\r\n     * = (pointsPerShare * balanceOf(_owner) + pointsCorrection[_owner]) / pointsMultiplier\r\n     * @param _owner The address of a token holder.\r\n     * @return The amount of funds that `_owner` has earned in total.\r\n     */\r\n    function accumulativeFundsOf(address _owner) public view returns(uint256) {\r\n        if (!isAddressActivated(_owner)) {\r\n            return 0;\r\n        }\r\n\r\n        return uint256(int256(pointsPerShare * balanceOf(_owner)) + pointsCorrection[_owner]) / pointsMultiplier;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that transfer tokens from one address to another.\r\n     * Update pointsCorrection to keep funds unchanged.\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal override {\r\n        super._transfer(from, to, value);\r\n\r\n        if (!isAddressActivated(from) && !isAddressActivated(to)) {\r\n            return;\r\n        }\r\n\r\n        int256 _magCorrection = int256(pointsPerShare * value);\r\n\r\n        if (isAddressActivated(from) && !isAddressActivated(to)) {\r\n            activeTokens = activeTokens - value;\r\n            require(activeTokens > 0, \"PayingToken: you cannot transfer all active tokens to an inactive address\");\r\n            pointsCorrection[from] = pointsCorrection[from] + _magCorrection;\r\n\r\n            return;\r\n        }\r\n\r\n        if (!isAddressActivated(from) && isAddressActivated(to)) {\r\n            activeTokens = activeTokens + value;\r\n            pointsCorrection[to] = pointsCorrection[to] - _magCorrection;\r\n            \r\n            return;\r\n        }\r\n\r\n        pointsCorrection[from] = pointsCorrection[from] + _magCorrection;\r\n        pointsCorrection[to] = pointsCorrection[to] - _magCorrection;\r\n    }\r\n}\r\n\r\n\r\ncontract MoonFlarePayingToken is IPayingToken, PayingToken {\r\n    string constant TOKEN_NAME = \"Moon Flare Paying Token\";\r\n    string constant TOKEN_SYMBOL = \"MFPT\";\r\n    uint256 constant TOTAL_SUPPLY = 10**24;\r\n\r\n    constructor() payable PayingToken(TOKEN_NAME, TOKEN_SYMBOL) \r\n    {\r\n        _mint(msg.sender, TOTAL_SUPPLY); \r\n        activateAddress();\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws available funds for user.\r\n     */\r\n    function withdrawFunds() external override {\r\n        uint256 withdrawableFunds = _prepareWithdraw();\r\n        \r\n        payable(msg.sender).transfer(withdrawableFunds);\r\n    }\r\n\r\n    /**\r\n     * @notice The default function calls _distributeFunds() whereby magnifiedFundsPerShare gets updated.\r\n     */\r\n    receive() external payable {\r\n        if (msg.value > 0) {\r\n            _distributeFunds(msg.value);\r\n        }\r\n    }\r\n\r\n    fallback() external payable {\r\n        if (msg.value > 0) {\r\n            _distributeFunds(msg.value);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsDistributed\",\"type\":\"uint256\"}],\"name\":\"FundsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsWithdrawn\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"accumulativeFundsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAddressActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawableFundsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawnFundsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MoonFlarePayingToken","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f09953f07d0bf21b1c2af5367d56195417a891f856a8ee48107eb7c6c9f0685c"}]}