{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"SocialPixel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\r\\n\\r\\n    /**************************************************************************\\r\\n    * Interfaces \\u0026 Libraries\\r\\n    ***************************************************************************/\\r\\n    import \\\"IERC165.sol\\\";\\r\\n    import \\\"IERC721.sol\\\";\\r\\n    import \\\"IERC721Receiver.sol\\\";\\r\\n    import \\\"Address.sol\\\";\\r\\n    import \\\"Ownable.sol\\\";\\r\\n\\r\\n    contract SocialPixel is IERC165, IERC721, IERC721Receiver, Ownable {\\r\\n    using Address for address;\\r\\n\\r\\n    struct Pixel {\\r\\n        string message;\\r\\n        uint256 price;\\r\\n        bool isSale;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**************************************************************************\\r\\n    * public variables\\r\\n    ***************************************************************************/\\r\\n    uint32[10000] public colors; //colors are encoded as rgb in the follow format: 1rrrgggbbb. For example, red is 1255000000.\\r\\n\\r\\n\\r\\n    /**************************************************************************\\r\\n    * private variables\\r\\n    ***************************************************************************/\\r\\n    //mapping from token ID to Pixel struct\\r\\n    mapping (uint256 =\\u003e Pixel) private pixelNumberToPixel;\\r\\n    \\r\\n    //mapping from token ID to owner\\r\\n    mapping (uint256 =\\u003e address) private pixelNumberToOwner;\\r\\n    \\r\\n    //mapping from token ID to approved address\\r\\n    mapping (uint256 =\\u003e address) private pixelNumberToApproved;\\r\\n    \\r\\n    //mapping from owner to number of owned token\\r\\n    mapping (address =\\u003e uint256) private ownerToPixelAmount;\\r\\n    \\r\\n    //mapping from owner to operator approvals\\r\\n    mapping (address =\\u003e mapping (address =\\u003e bool)) private ownerToOperatorToBool;\\r\\n    \\r\\n    //mapping of supported interfaces\\r\\n    mapping(bytes4 =\\u003e bool) internal supportedInterfaces;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    /**************************************************************************\\r\\n    * public constants\\r\\n    ***************************************************************************/\\r\\n    uint256 public constant numberOfPixels = 10000;\\r\\n    uint256 public constant feeRate = 100;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    /**************************************************************************\\r\\n    * private constants\\r\\n    ***************************************************************************/\\r\\n    uint256 private defaultWeiPrice = 10000000000000000;   // 0.01 eth\\r\\n    \\r\\n\\r\\n\\r\\n\\r\\n    /**************************************************************************\\r\\n    * modifiers\\r\\n    ***************************************************************************/\\r\\n    modifier onlyPixelOwner(uint256 _pixelNumber) {\\r\\n        require(msg.sender == pixelNumberToOwner[_pixelNumber]);\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier validPixel(uint256 _pixelNumber) {\\r\\n        require(_pixelNumber \\u003c numberOfPixels);\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier validColor(uint32 _color) {\\r\\n        require(_color \\u003e= 1000000000 \\u0026\\u0026 _color \\u003c= 1255255255);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /**************************************************************************\\r\\n    * constructor\\r\\n    ***************************************************************************/\\r\\n    constructor() {\\r\\n        supportedInterfaces[0x01ffc9a7] = true; // ERC165\\r\\n        supportedInterfaces[0x80ac58cd] = true; // ERC721\\r\\n        ownerToPixelAmount[owner()] = numberOfPixels;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /**************************************************************************\\r\\n    * public methods\\r\\n    ***************************************************************************/\\r\\n    function getPixel(uint256 _pixelNumber) \\r\\n        public view validPixel(_pixelNumber)\\r\\n        returns(address, string memory, uint256, bool) \\r\\n    {\\r\\n        address pixelOwner = pixelNumberToOwner[_pixelNumber]; \\r\\n        \\r\\n        if (pixelOwner == address(0)) {\\r\\n            return (owner(), \\\"\\\", defaultWeiPrice, true);\\r\\n        }\\r\\n        \\r\\n        Pixel memory pixel;\\r\\n        pixel = pixelNumberToPixel[_pixelNumber];\\r\\n        return (pixelOwner, pixel.message, pixel.price, pixel.isSale);\\r\\n    }\\r\\n    \\r\\n    function getColors() public view returns(uint32[10000] memory)  {\\r\\n        return colors;\\r\\n    }\\r\\n\\r\\n    function buyPixel(uint256 _pixelNumber, uint32 _color, string memory _message)\\r\\n        payable\\r\\n        public validColor(_color)\\r\\n    {\\r\\n        require(msg.sender != address(0));\\r\\n        \\r\\n        address currentOwner;\\r\\n        uint256 currentPrice;\\r\\n        bool currentSaleState;\\r\\n        (currentOwner,,currentPrice, currentSaleState) = getPixel(_pixelNumber);\\r\\n        \\r\\n        require(currentSaleState == true);\\r\\n\\r\\n        require(currentPrice \\u003c= msg.value);\\r\\n\\r\\n        uint fee = msg.value / feeRate;\\r\\n\\r\\n        payable(currentOwner).transfer(msg.value - fee);\\r\\n\\r\\n        pixelNumberToPixel[_pixelNumber] = Pixel(_message, currentPrice, false);\\r\\n        \\r\\n        colors[_pixelNumber] = _color;\\r\\n        changeAdjacentColors(_pixelNumber, _color);\\r\\n\\r\\n        transfer(msg.sender, _pixelNumber);\\r\\n    }\\r\\n    \\r\\n    function setColor(uint256 _pixelNumber, uint32 _color) \\r\\n        public validPixel(_pixelNumber) validColor(_color)\\r\\n        onlyPixelOwner(_pixelNumber)\\r\\n    {\\r\\n        colors[_pixelNumber] = _color;\\r\\n        changeAdjacentColors(_pixelNumber, _color);\\r\\n    }\\r\\n\\r\\n\\r\\n    function setMessage(uint256 _pixelNumber, string memory _message)\\r\\n        public validPixel(_pixelNumber)\\r\\n        onlyPixelOwner(_pixelNumber)\\r\\n    {\\r\\n        pixelNumberToPixel[_pixelNumber].message = _message;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setPrice(uint256 _pixelNumber, uint256 _weiAmount) \\r\\n        public validPixel(_pixelNumber)\\r\\n        onlyPixelOwner(_pixelNumber)\\r\\n    {\\r\\n        pixelNumberToPixel[_pixelNumber].price = _weiAmount;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setForSale(uint256 _pixelNumber)\\r\\n        public validPixel(_pixelNumber)\\r\\n        onlyPixelOwner(_pixelNumber)\\r\\n    {\\r\\n        pixelNumberToPixel[_pixelNumber].isSale = true;\\r\\n    }\\r\\n    \\r\\n    function setNotForSale(uint256 _pixelNumber)\\r\\n        public validPixel(_pixelNumber)\\r\\n        onlyPixelOwner(_pixelNumber)\\r\\n    {\\r\\n        pixelNumberToPixel[_pixelNumber].isSale = false;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /**************************************************************************\\r\\n    * internal methods\\r\\n    ***************************************************************************/\\r\\n    function changeAdjacentColors(uint256 _pixelNumber, uint32 _color) internal {\\r\\n        \\r\\n        uint256 i;\\r\\n        uint256 j;\\r\\n        \\r\\n        if (_pixelNumber \\u003e= 0 \\u0026\\u0026 _pixelNumber \\u003c 100) { \\r\\n            if (_pixelNumber == 0) {\\r\\n                j = 3;\\r\\n                _changeAdjacentColors(i, j, _pixelNumber, _color);\\r\\n                return;\\r\\n            } else if (_pixelNumber == 99) {\\r\\n                j = 5;\\r\\n                i = 2;\\r\\n                _changeAdjacentColors(i, j, _pixelNumber, _color);\\r\\n                return;\\r\\n            } else {\\r\\n                j = 5;\\r\\n                _changeAdjacentColors(i, j, _pixelNumber, _color);\\r\\n                return;\\r\\n            }\\r\\n        } else if (_pixelNumber % 100 == 99) { \\r\\n            if (_pixelNumber == 9999) {\\r\\n                i = 4;\\r\\n                j = 7;\\r\\n                _changeAdjacentColors(i, j, _pixelNumber, _color);\\r\\n                return;\\r\\n            } else {\\r\\n                i = 2;\\r\\n            j = 7;\\r\\n            _changeAdjacentColors(i, j, _pixelNumber, _color);\\r\\n            return;\\r\\n            }\\r\\n            \\r\\n        } else if (_pixelNumber \\u003e= 9900 \\u0026\\u0026 _pixelNumber \\u003c 10000 ) { \\r\\n            if (_pixelNumber == 9900) {\\r\\n                i = 6;\\r\\n                j = 9;\\r\\n                _changeAdjacentColors(i, j, _pixelNumber, _color);\\r\\n                return;\\r\\n            } else {\\r\\n                i = 4;\\r\\n                j = 9;\\r\\n                _changeAdjacentColors(i, j, _pixelNumber, _color);\\r\\n                return;\\r\\n            }\\r\\n        } else if (_pixelNumber % 100 == 0) {\\r\\n            i = 6;\\r\\n            j = 11;\\r\\n            _changeAdjacentColors(i, j, _pixelNumber, _color);\\r\\n            return;\\r\\n        } else {\\r\\n            j = 8;\\r\\n            _changeAdjacentColors(i, j, _pixelNumber, _color);\\r\\n            return;\\r\\n        }  \\r\\n    }\\r\\n\\r\\n    function _changeAdjacentColors(uint256 i, uint256 j, uint256 _pixelNumber, uint32 color) internal {\\r\\n        \\r\\n        int256[16] memory offSets = [int256(1), 101, 100, 99, -1, -101, -100, -99, 1, 101, 100, 99, -1, -101, -100, -99];\\r\\n        \\r\\n        for (uint256 x = i; x \\u003c j; x++) {\\r\\n            int256 adjPixel = int256(_pixelNumber) + offSets[x];\\r\\n            colors[uint256(adjPixel)] = mixColors(color, colors[uint256(adjPixel)]);\\r\\n        }\\r\\n        \\r\\n    }\\r\\n    \\r\\n    function mixColors(uint32 c0, uint32 c1) internal pure returns (uint32) {\\r\\n        return 1000000000 + (((c0 / 1000000) % 1000) + ((c1 / 1000000) % 1000))/2*1000000 + (((c0 / 1000) % 1000) + ((c1 / 1000) % 1000))/2*1000 + ((c0 % 1000) + (c1 % 1000))/2;\\r\\n    }\\r\\n\\r\\n    /**************************************************************************\\r\\n    * methods for contract owner\\r\\n    ***************************************************************************/\\r\\n\\r\\n    function withdrawBalance() external onlyOwner {\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n    }\\r\\n    \\r\\n    function setDefaultPrice(uint256 _price) external onlyOwner {\\r\\n        defaultWeiPrice = _price;\\r\\n    }\\r\\n\\r\\n    /**************************************************************************\\r\\n    * ERC-721 compliance\\r\\n    ***************************************************************************/\\r\\n\\r\\n    //Equal to: bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))\\r\\n    bytes4 internal constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\\r\\n\\r\\n    //ERC-721 implementation\\r\\n    function balanceOf(address _owner) external override view returns (uint256) {\\r\\n        require(_owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n\\r\\n        return ownerToPixelAmount[_owner];\\r\\n    }\\r\\n\\r\\n    function ownerOf(uint256 _pixelNumber) external override view returns (address) {\\r\\n        address owner;\\r\\n        (owner,,,) = getPixel(_pixelNumber);\\r\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\r\\n\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _pixelNumber, bytes calldata data) external override  {\\r\\n        address tokenOwner = pixelNumberToOwner[_pixelNumber];\\r\\n        require(msg.sender == tokenOwner || msg.sender == pixelNumberToApproved[_pixelNumber] || ownerToOperatorToBool[tokenOwner][msg.sender],\\r\\n                \\\"ERC721: message sender is not the owner or approved address\\\");\\r\\n        require(_from == tokenOwner);\\r\\n        require(_to != address(0));\\r\\n        require(tokenOwner != address(0));\\r\\n        transfer(_to, _pixelNumber);\\r\\n        if (_to.isContract()) {\\r\\n            bytes4 retval = IERC721Receiver(_to).onERC721Received(msg.sender, _from, _pixelNumber, data);\\r\\n            require(retval == MAGIC_ON_ERC721_RECEIVED);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _pixelNumber) external override  {\\r\\n        address tokenOwner = pixelNumberToOwner[_pixelNumber];\\r\\n        require(msg.sender == tokenOwner || msg.sender == pixelNumberToApproved[_pixelNumber] || ownerToOperatorToBool[tokenOwner][msg.sender],\\r\\n                \\\"ERC721: message sender is not the owner or approved address\\\");\\r\\n        require(_from == tokenOwner);\\r\\n        require(_to != address(0));\\r\\n        require(tokenOwner != address(0));\\r\\n        transfer(_to, _pixelNumber);\\r\\n        if (_to.isContract()) {\\r\\n            bytes4 retval = IERC721Receiver(_to).onERC721Received(msg.sender, _from, _pixelNumber, \\\"\\\");\\r\\n            require(retval == MAGIC_ON_ERC721_RECEIVED);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferFrom(address _from, address _to, uint256 _pixelNumber) external override {\\r\\n        address tokenOwner = pixelNumberToOwner[_pixelNumber];\\r\\n        require(msg.sender == tokenOwner ||\\r\\n                msg.sender == pixelNumberToApproved[_pixelNumber] ||\\r\\n                ownerToOperatorToBool[tokenOwner][msg.sender]);\\r\\n        require(_from == tokenOwner);\\r\\n        require(_to != address(0));\\r\\n        require(tokenOwner != address(0));\\r\\n        transfer(_to, _pixelNumber);\\r\\n    }\\r\\n\\r\\n    function approve(address _approved, uint256 _pixelNumber) external override {\\r\\n        address tokenOwner = pixelNumberToOwner[_pixelNumber];\\r\\n        require(msg.sender == tokenOwner ||\\r\\n                msg.sender == pixelNumberToApproved[_pixelNumber] ||\\r\\n                ownerToOperatorToBool[tokenOwner][msg.sender]);\\r\\n        pixelNumberToApproved[_pixelNumber] = _approved;\\r\\n\\r\\n        emit Approval(tokenOwner, _approved, _pixelNumber);\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address _operator, bool _approved) external override {\\r\\n        require(_operator != msg.sender);\\r\\n\\r\\n        ownerToOperatorToBool[msg.sender][_operator] = _approved;\\r\\n        \\r\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\r\\n    }\\r\\n\\r\\n    function getApproved(uint256 _pixelNumber) external override view returns (address) {\\r\\n        address owner = pixelNumberToOwner[_pixelNumber];\\r\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\r\\n\\r\\n        return pixelNumberToApproved[_pixelNumber];\\r\\n    }\\r\\n\\r\\n    function isApprovedForAll(address _owner, address _operator) external override view returns (bool) {\\r\\n        return ownerToOperatorToBool[_owner][_operator];\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 _interfaceID) external override view returns (bool) {\\r\\n        return supportedInterfaces[_interfaceID];\\r\\n    }\\r\\n\\r\\n     function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) override pure external returns (bytes4) {\\r\\n         return MAGIC_ON_ERC721_RECEIVED;\\r\\n    }\\r\\n\\r\\n    //ERC-721 implementation helper functions\\r\\n    function transfer(address _to, uint256 _pixelNumber) internal {\\r\\n        address from;\\r\\n        (from,,,) = getPixel(_pixelNumber);\\r\\n        clearApproval(_pixelNumber);\\r\\n\\r\\n        removeToken(from, _pixelNumber);\\r\\n        addToken(_to, _pixelNumber);\\r\\n\\r\\n        emit Transfer(from, _to, _pixelNumber);\\r\\n    }\\r\\n\\r\\n    function clearApproval(uint256 _pixelNumber) private {\\r\\n        if (pixelNumberToApproved[_pixelNumber] != address(0)) {\\r\\n            delete pixelNumberToApproved[_pixelNumber];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeToken(address _from, uint256 _pixelNumber) internal {\\r\\n        ownerToPixelAmount[_from] = ownerToPixelAmount[_from] - 1;\\r\\n        delete pixelNumberToOwner[_pixelNumber];\\r\\n    }\\r\\n\\r\\n    function addToken(address _to, uint256 _pixelNumber) internal {\\r\\n        require(pixelNumberToOwner[_pixelNumber] == address(0));\\r\\n\\r\\n        pixelNumberToOwner[_pixelNumber] = _to;\\r\\n        ownerToPixelAmount[_to] = ownerToPixelAmount[_to] + 1;\\r\\n    }\\r\\n\\r\\n}\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pixelNumber\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pixelNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_color\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"buyPixel\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colors\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pixelNumber\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getColors\",\"outputs\":[{\"internalType\":\"uint32[10000]\",\"name\":\"\",\"type\":\"uint32[10000]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pixelNumber\",\"type\":\"uint256\"}],\"name\":\"getPixel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfPixels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pixelNumber\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pixelNumber\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pixelNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pixelNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_color\",\"type\":\"uint32\"}],\"name\":\"setColor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setDefaultPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pixelNumber\",\"type\":\"uint256\"}],\"name\":\"setForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pixelNumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"setMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pixelNumber\",\"type\":\"uint256\"}],\"name\":\"setNotForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pixelNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pixelNumber\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SocialPixel","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"50000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1125d1bfe84025c76dc7a138462b05fcc0d6f707d50f04f72b8e0813716e1ed9"}]}