{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Colors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nlibrary Colors {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    struct HSL {\\r\\n        uint256 hue;\\r\\n        uint256 saturation;\\r\\n        uint256 lightness;\\r\\n    }\\r\\n\\r\\n    struct Color {\\r\\n        string start;\\r\\n        string end;\\r\\n    }\\r\\n\\r\\n    struct MainframeColors {\\r\\n        Color light;\\r\\n        Color medium;\\r\\n        Color dark;\\r\\n        Color bg;\\r\\n    }\\r\\n\\r\\n    function generateHSLColor(\\r\\n        string memory seed,\\r\\n        uint256 hMin,\\r\\n        uint256 hMax,\\r\\n        uint256 sMin,\\r\\n        uint256 sMax,\\r\\n        uint256 lMin,\\r\\n        uint256 lMax\\r\\n    ) public pure returns (HSL memory) {\\r\\n        return\\r\\n            HSL(\\r\\n                generatePseudoRandomValue(\\r\\n                    string(abi.encodePacked(\\\"H\\\", seed)),\\r\\n                    hMin,\\r\\n                    hMax\\r\\n                ),\\r\\n                generatePseudoRandomValue(\\r\\n                    string(abi.encodePacked(\\\"S\\\", seed)),\\r\\n                    sMin,\\r\\n                    sMax\\r\\n                ),\\r\\n                generatePseudoRandomValue(\\r\\n                    string(abi.encodePacked(\\\"L\\\", seed)),\\r\\n                    lMin,\\r\\n                    lMax\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function toHSLString(HSL memory hsl) public pure returns (string memory) {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"hsl(\\\",\\r\\n                    hsl.hue.toString(),\\r\\n                    \\\",\\\",\\r\\n                    hsl.saturation.toString(),\\r\\n                    \\\"%,\\\",\\r\\n                    hsl.lightness.toString(),\\r\\n                    \\\"%)\\\"\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function generatePseudoRandomValue(\\r\\n        string memory seed,\\r\\n        uint256 from,\\r\\n        uint256 to\\r\\n    ) public pure returns (uint256) {\\r\\n        if (to <= from) return from;\\r\\n        return\\r\\n            (uint256(keccak256(abi.encodePacked(seed))) % (to - from)) + from;\\r\\n    }\\r\\n\\r\\n    function generateComputerColors(string memory seed)\\r\\n        public\\r\\n        pure\\r\\n        returns (MainframeColors memory)\\r\\n    {\\r\\n        HSL memory lightStart = generateHSLColor(\\r\\n            string(abi.encodePacked(seed, \\\"LIGHT_START\\\")),\\r\\n            0,\\r\\n            359,\\r\\n            50,\\r\\n            70,\\r\\n            55,\\r\\n            75\\r\\n        );\\r\\n        HSL memory lightEnd = generateHSLColor(\\r\\n            string(abi.encodePacked(seed, \\\"LIGHT_END\\\")),\\r\\n            lightStart.hue + 359 - generatePseudoRandomValue(seed, 5, 60),\\r\\n            lightStart.hue + 359 + generatePseudoRandomValue(seed, 5, 60),\\r\\n            70,\\r\\n            85,\\r\\n            25,\\r\\n            45\\r\\n        );\\r\\n        HSL memory mediumStart = generateHSLColor(\\r\\n            string(abi.encodePacked(seed, \\\"MEDIUM_START\\\")),\\r\\n            lightStart.hue,\\r\\n            lightStart.hue,\\r\\n            lightStart.saturation,\\r\\n            lightStart.saturation,\\r\\n            35,\\r\\n            50\\r\\n        );\\r\\n        HSL memory mediumEnd = generateHSLColor(\\r\\n            string(abi.encodePacked(seed, \\\"MEDIUM_START\\\")),\\r\\n            lightEnd.hue,\\r\\n            lightEnd.hue,\\r\\n            lightEnd.saturation,\\r\\n            lightEnd.saturation,\\r\\n            35,\\r\\n            10\\r\\n        );\\r\\n\\r\\n        HSL memory darkStart = generateHSLColor(\\r\\n            string(abi.encodePacked(seed, \\\"MEDIUM_START\\\")),\\r\\n            0,\\r\\n            359,\\r\\n            40,\\r\\n            70,\\r\\n            13,\\r\\n            16\\r\\n        );\\r\\n        HSL memory darkEnd = generateHSLColor(\\r\\n            string(abi.encodePacked(seed, \\\"DARKEST_END\\\")),\\r\\n            darkStart.hue + 359 - generatePseudoRandomValue(seed, 5, 60),\\r\\n            darkStart.hue + 359 + generatePseudoRandomValue(seed, 5, 60),\\r\\n            darkStart.saturation,\\r\\n            darkStart.saturation,\\r\\n            3,\\r\\n            13\\r\\n        );\\r\\n\\r\\n        HSL memory BGStart = generateHSLColor(\\r\\n            string(abi.encodePacked(seed, \\\"BG_START\\\")),\\r\\n            0,\\r\\n            359,\\r\\n            55,\\r\\n            100,\\r\\n            45,\\r\\n            65\\r\\n        );\\r\\n        HSL memory BGEnd = generateHSLColor(\\r\\n            string(abi.encodePacked(seed, \\\"BG_END\\\")),\\r\\n            0,\\r\\n            359,\\r\\n            BGStart.saturation,\\r\\n            BGStart.saturation,\\r\\n            BGStart.lightness,\\r\\n            BGStart.lightness\\r\\n        );\\r\\n\\r\\n        return\\r\\n            MainframeColors(\\r\\n                Color(toHSLString(lightStart), toHSLString(lightEnd)),\\r\\n                Color(toHSLString(mediumStart), toHSLString(mediumEnd)),\\r\\n                Color(toHSLString(darkStart), toHSLString(darkEnd)),\\r\\n                Color(toHSLString(BGStart), toHSLString(BGEnd))\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"seed\",\"type\":\"string\"}],\"name\":\"generateComputerColors\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"start\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"end\",\"type\":\"string\"}],\"internalType\":\"struct Colors.Color\",\"name\":\"light\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"start\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"end\",\"type\":\"string\"}],\"internalType\":\"struct Colors.Color\",\"name\":\"medium\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"start\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"end\",\"type\":\"string\"}],\"internalType\":\"struct Colors.Color\",\"name\":\"dark\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"start\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"end\",\"type\":\"string\"}],\"internalType\":\"struct Colors.Color\",\"name\":\"bg\",\"type\":\"tuple\"}],\"internalType\":\"struct Colors.MainframeColors\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"seed\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"hMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lMax\",\"type\":\"uint256\"}],\"name\":\"generateHSLColor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"hue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saturation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lightness\",\"type\":\"uint256\"}],\"internalType\":\"struct Colors.HSL\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"seed\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"generatePseudoRandomValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"hue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saturation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lightness\",\"type\":\"uint256\"}],\"internalType\":\"struct Colors.HSL\",\"name\":\"hsl\",\"type\":\"tuple\"}],\"name\":\"toHSLString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Colors","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}