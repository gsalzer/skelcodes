{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-08-27\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract EncounterHelper is  Context {\r\n        \r\n        uint256 private uniqueId = (random(\"WORLDEATERUNIQUEID\")%12000)+1;\r\n        \r\n        string[] private commonDescriptors = [\r\n        \"Empty\",\r\n        \"Chilling\",\r\n        \"Clammy\",\r\n        \"cramped\",\r\n        \"Rotten\",\r\n        \"Rusty\",\r\n        \"Deserted\",\r\n        \"Gloomy\",\r\n        \"Dark\",\r\n        \"Bright\",\r\n        \"Hot\",\r\n        \"Slippery\",\r\n        \"Slimy\",\r\n        \"Sandy\",\r\n        \"Cold\",\r\n        \"Damp\",\r\n        \"Fancy\",\r\n        \"Remote\",\r\n        \"Regal\",\r\n        \"Small\",\r\n        \"Big\",\r\n        \"Charming\",\r\n        \"Quiet\",\r\n        \"Dirty\",\r\n        \"Traditional\",\r\n        \"Sunny\",\r\n        \"Disgusting\",\r\n        \"Stinking\",\r\n        \"Draining\"\r\n    ];\r\n    \r\n        string[] private rareDescriptors = [\r\n        \"Filthy\",\r\n        \"Frozen\",\r\n        \"Decaying\",\r\n        \"Neglected\",\r\n        \"Weathered And Tough\",\r\n        \"Magical\",\r\n        \"Spongy and Wet\",\r\n        \"Large And Bright\",\r\n        \"Creepy\",\r\n        \"Ancient\",\r\n        \"Mystical\",\r\n        \"Strange and Mysterious\",\r\n        \"Ineffable\",\r\n        \"Radiant\"\r\n    ];\r\n    \r\n        string[] private legendaryDescriptors = [\r\n        \"Dilapidated\",\r\n        \"Petrifying\",\r\n        \"Shadowy and Silent\",\r\n        \"Twisted\",\r\n        \"Repulsive\",\r\n        \"Misty and Murky\",\r\n        \"Glowing\",\r\n        \"Enchanted\"\r\n    ];\r\n    \r\n        string[] private commonLocations = [\r\n        \"Dungeon\",\r\n        \"Courtyard\",\r\n        \"Forest\",\r\n        \"Basement\",\r\n        \"Room\",\r\n        \"Field\",\r\n        \"Meadows\",\r\n        \"Dark closet\",\r\n        \"General Store\",\r\n        \"Swamp\",\r\n        \"Vast Desert\",\r\n        \"Goblin Valley\",\r\n        \"Sewer Tunnel\",\r\n        \"Ruined City\",\r\n        \"Watch Tower\",\r\n        \"Cave\",\r\n        \"Empty Stairwell\",\r\n        \"Mountain cave\",\r\n        \"Goblin encampment\",\r\n        \"Town Market\",\r\n        \"Wooded Grove\",\r\n        \"Coastal Clearing\"\r\n    ];\r\n    \r\n        string[] private rareLocations = [\r\n        \"Tower\",\r\n        \"Abandoned Village\",\r\n        \"Iron Woods\",\r\n        \"Elven Forest\",\r\n        \"Dark Plains\",\r\n        \"High Castle\",\r\n        \"Wizard Tower\",\r\n        \"Abandoned Castle\",\r\n        \"Toll Bridge\",\r\n        \"Magical Island\",\r\n        \"Lighthouse\",\r\n        \"Forge\",\r\n        \"Volcano Tube\",\r\n        \"Wistful Wild\",\r\n        \"Lair of a Giant\",\r\n        \"Badland Highway\"\r\n    ];\r\n    \r\n        string[] private legendaryLocations = [\r\n        \"Hidden Temple\",\r\n        \"Giant Castle\",\r\n        \"Enchanted Dungeon\",\r\n        \"Gold Bank\",\r\n        \"Bustling Barracks\",\r\n        \"Mighty Citadel\",\r\n        \"Sacred Sanctuary\",\r\n        \"Fungal Forrest\",\r\n        \"Place Between Time\",\r\n        \"Astral Plane\",\r\n        \"Pocket Dimension\",\r\n        \"Ghost Ship\"\r\n    ];\r\n    \r\n        string[] private uniqueLocations = [\r\n        'The Edge of Time and Space'\r\n    ];\r\n    \r\n        string[] private commonCreatures = [\r\n        \"Goblin\",\r\n        \"Troll\",\r\n        \"Wolf\",\r\n        \"Wizard\",\r\n        \"Spider\",\r\n        \"Zombie\",\r\n        \"City Guard\",\r\n        \"Cave slime\",\r\n        \"Thug\",\r\n        \"Troll Runt\",\r\n        \"Dwarf\",\r\n        \"Mugger\",\r\n        \"Grizzly Bear\",\r\n        \"Giant Spider\",\r\n        \"Wild Dog\",\r\n        \"Wraith\",\r\n        \"Minotaur\",\r\n        \"Ghoul\",\r\n        \"Mudskipper\",\r\n        \"Giant Scorpion\",\r\n        \"Giant Rat\",\r\n        \"Sphinx\",\r\n        \"Vampire\",\r\n        \"Basilisks\",\r\n        \"Orc\"\r\n    ];\r\n    \r\n        string[] private rareCreatures = [\r\n        \"Hobgoblin\",\r\n        \"Seething Devil\",\r\n        \"Hellhound\",\r\n        \"Cyclops\",\r\n        \"Ice Dragon\",\r\n        \"Fire Dragon\",\r\n        \"Skeleton Dragon\",\r\n        \"Werewolf\",\r\n        \"Great Demon\",\r\n        \"Mummy\",\r\n        \"Abyssal Demon\",\r\n        \"ice Prince\",\r\n        \"Scarab Swarm\",\r\n        \"High Priest\",\r\n        \"Gargoyle\",\r\n        \"Night Shifter\",\r\n        \"High Elf\",\r\n        \"Night Elf\"\r\n    ];\r\n    \r\n        string[] private legendaryCreatures = [\r\n        \"Yeti\",\r\n        \"Lich King\",\r\n        \"Kraken\",\r\n        \"Dark Wyvern\",\r\n        \"Revenant Beast\",\r\n        \"Shadow Lord\",\r\n        \"Onyx Warlord\",\r\n        \"Zombie Lord\",\r\n        \"Scarab Queen\",\r\n        \"Wyvern of Undying\"\r\n    ];\r\n    \r\n        string[] private uniqueCreatures = [\r\n        'The Great World Eater'\r\n    ];\r\n        \r\n        string[] private creatureDescriptors = [\r\n        'Supreme',\r\n        'Exalted',\r\n        'Enraged',\r\n        'Diseased',\r\n        'Gigantic',\r\n        'Firey',\r\n        'Ancient',\r\n        'Cursed',\r\n        'Flying',\r\n        'Invisible',\r\n        'Engulfed',\r\n        'Frost'\r\n    ];\r\n    \r\n    function random(string memory input) internal pure returns (uint256) {\r\n        return uint256(keccak256(abi.encodePacked(input)));\r\n    }\r\n    \r\n    //returns a location in svg format <text>output</text>\r\n    function pluckLocation(uint256 tokenId) internal view returns (string memory,string memory, uint256) {\r\n        uint256 rarity = 0;\r\n        \r\n        uint256 rand1 = random(string(abi.encodePacked(\"LOCATION\", toString(tokenId))));\r\n        uint256 rand2 = random(string(abi.encodePacked(\"LOCATIONDESCRIPTOR\", toString(tokenId))));\r\n        \r\n        string memory location;\r\n        string memory descriptor;\r\n        \r\n        uint256 locationRarity = rand1 % 100; //0-99\r\n        \r\n        if(locationRarity < 60)\r\n        {\r\n            //common\r\n            rarity = rarity + 1;\r\n            location = commonLocations[rand1 % commonLocations.length];\r\n        }\r\n        else if(locationRarity < 90)\r\n        {\r\n            //rare\r\n            rarity = rarity + 5;\r\n            location = rareLocations[rand1 % rareLocations.length];\r\n        }\r\n        else\r\n        {\r\n            //legendary\r\n            rarity = rarity + 15;\r\n            location = legendaryLocations[rand1 % legendaryLocations.length];\r\n        }\r\n        \r\n        uint256 descriptorRarity = rand2 % 100;\r\n        \r\n        if(descriptorRarity < 60)\r\n        {\r\n            //common\r\n            rarity = rarity + 1;\r\n            descriptor = commonDescriptors[rand2 % commonDescriptors.length];\r\n        }\r\n        else if(descriptorRarity < 90)\r\n        {\r\n            //rare\r\n            rarity = rarity + 5;\r\n            descriptor = rareDescriptors[rand2 % rareDescriptors.length];\r\n        }\r\n        else\r\n        {\r\n            //legendary\r\n            rarity = rarity + 15;\r\n            descriptor = legendaryDescriptors[rand2 % legendaryDescriptors.length];\r\n        }\r\n        \r\n        return (descriptor, location, rarity);\r\n    }\r\n    \r\n    function pluckCreature(uint256 tokenId) internal view returns (string memory, string memory, uint256) {\r\n        uint256 rarity = 0;\r\n        \r\n        uint256 rand1 = random(string(abi.encodePacked(\"CREATURE\", toString(tokenId))));\r\n        uint256 rand2 = random(string(abi.encodePacked(\"CREATUREMODIFIER\", toString(tokenId))));\r\n        \r\n        string memory creature;\r\n        string memory prefix = \"\";\r\n        \r\n        uint256 creatureRarity = rand1 % 100; //0-99\r\n        \r\n        if(creatureRarity < 60)\r\n        {\r\n            //common\r\n            rarity = rarity + 1;\r\n            creature = commonCreatures[rand1 % commonCreatures.length];\r\n        }\r\n        else if(creatureRarity < 90)\r\n        {\r\n            //rare\r\n            rarity = rarity + 5;\r\n            creature = rareCreatures[rand1 % rareCreatures.length];\r\n        }\r\n        else\r\n        {\r\n            //legendary\r\n            rarity = rarity + 15;\r\n            creature = legendaryCreatures[rand1 % legendaryCreatures.length];\r\n        }\r\n        \r\n        if((rand2 % 100) < 10) //add a descriptr\r\n        {\r\n            rarity = rarity + 15;\r\n            prefix = creatureDescriptors[rand2 % creatureDescriptors.length];\r\n        }\r\n        \r\n        \r\n        return (prefix, creature, rarity);\r\n    }\r\n    \r\n    function getNumCreatures(uint256 tokenId) public view returns (uint256)\r\n    {\r\n        uint256 rand1 = random(string(abi.encodePacked(\"CREATURE\", toString(tokenId))));\r\n        \r\n        uint256 numberRarity = rand1 % 100;\r\n        \r\n        if(numberRarity < 50)\r\n        {\r\n            return 2;\r\n        }\r\n        else if(numberRarity < 80)\r\n        {\r\n            return 3;\r\n        }\r\n        else if(numberRarity < 95)\r\n        {\r\n            return 4;\r\n        }\r\n        else\r\n        {\r\n            return 5;\r\n        }\r\n    }\r\n    \r\n    function getLocation(uint256 tokenId) public view returns (string memory, string memory, uint256)\r\n    {\r\n        return pluckLocation(tokenId);\r\n    }\r\n    \r\n    function getCreature1(uint256 tokenId) public view returns (string memory,string memory, uint256)\r\n    {\r\n        return pluckCreature(tokenId+12345); //creature 1\r\n    }\r\n    \r\n    function getCreature2(uint256 tokenId) public view returns (string memory,string memory, uint256)\r\n    {\r\n        return pluckCreature(tokenId+12345+12345); //creature 1\r\n    }\r\n    \r\n    function getCreature3(uint256 tokenId) public view returns (string memory,string memory, uint256)\r\n    {\r\n        if (getNumCreatures(tokenId) < 3) return (\"\",\"\", 0);\r\n        return pluckCreature(tokenId+12345+12345+12345); //creature 1\r\n    }\r\n    \r\n    function getCreature4(uint256 tokenId) public view returns (string memory,string memory, uint256)\r\n    {\r\n        if (getNumCreatures(tokenId) < 4) return (\"\",\"\", 0);\r\n        return pluckCreature(tokenId+12345+12345+12345+12345); //creature 1\r\n    }\r\n    \r\n    function getCreature5(uint256 tokenId) public view returns (string memory,string memory, uint256)\r\n    {\r\n        if (getNumCreatures(tokenId) < 5) return (\"\",\"\", 0);\r\n        return pluckCreature(tokenId+12345+12345+12345+12345+12345); //creature 1\r\n    }\r\n    \r\n    function getRarityValue(uint256 tokenId) public view returns (uint256)\r\n    {\r\n        (,,uint256 rarity0) = getLocation(tokenId);\r\n        (,,uint256 rarity1) = getCreature1(tokenId);\r\n        (,,uint256 rarity2) = getCreature2(tokenId);\r\n        (,,uint256 rarity3) = getCreature3(tokenId);\r\n        (,,uint256 rarity4) = getCreature4(tokenId);\r\n        (,,uint256 rarity5) = getCreature5(tokenId);\r\n        return rarity0+rarity1 + rarity2 + rarity3 + rarity4 + rarity5;\r\n    }\r\n    \r\n    function getRarityLevel(uint256 tokenId) public view returns (string memory)\r\n    {\r\n        uint256 rarity = getRarityValue(tokenId);\r\n        if(rarity < 20)\r\n        {\r\n            return(\"Common\");\r\n        }\r\n        else if(rarity < 35)\r\n        {\r\n            return(\"Rare\");\r\n        }\r\n        else if(rarity < 55)\r\n        {\r\n            return(\"Legendary\");\r\n        }\r\n        else\r\n        {\r\n            return(\"Godlike\");\r\n        }\r\n    }\r\n\r\n    \r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n    // Inspired by OraclizeAPI's implementation - MIT license\r\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n    \r\n    constructor()  {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCreature1\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCreature2\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCreature3\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCreature4\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCreature5\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLocation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNumCreatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRarityLevel\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRarityValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EncounterHelper","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4b0b469fecb554a65375a983cc59f7748bbd2d14ff24933dcebded231bd5e5fb"}]}