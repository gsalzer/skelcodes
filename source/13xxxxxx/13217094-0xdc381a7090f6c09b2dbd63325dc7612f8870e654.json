{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity 0.5.16;\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract MultiStake is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     *  @dev Structs to store user staking data.\r\n     */\r\n    struct Deposits {\r\n        uint256 depositAmount;\r\n        uint256 depositTime;\r\n        uint256 endTime;\r\n        uint64 userIndex;\r\n        bool paid;\r\n    }\r\n\r\n    /**\r\n     *  @dev Structs to store interest rate change.\r\n     */\r\n    struct Rates {\r\n        uint64 newInterestRate;\r\n        uint256 timeStamp;\r\n    }\r\n\r\n    mapping(address => mapping(address => Deposits)) private deposits;\r\n    mapping(uint64 => Rates) public rates;\r\n    mapping(address => mapping(address => bool)) private hasStaked;\r\n    mapping(address => uint256) public userCap;\r\n    mapping(address => uint256) public poolCap;\r\n    mapping(address => uint256) public payOut;\r\n\r\n    address public tokenAddressA;\r\n    address public tokenAddressB;\r\n    uint256 public rewardBalanceA;\r\n    uint256 public rewardBalanceB;\r\n    uint256 public stakedTotalA;\r\n    uint256 public stakedTotalB;\r\n    uint256 public stakedCapA;\r\n    uint256 public stakedCapB;\r\n    uint256 public totalRewardA;\r\n    uint256 public totalRewardB;\r\n    uint64 public index;\r\n    uint64 public rate;\r\n    uint256 public conversionAtoB; //tolerance factor = 10**6\r\n    uint256 public lockDuration;\r\n    string public name;\r\n\r\n    IERC20 public ERC20Interface;\r\n\r\n    /**\r\n     *  @dev Emitted when user stakes 'stakedAmount' value of tokens\r\n     */\r\n    event Staked(\r\n        address indexed token,\r\n        address indexed staker_,\r\n        uint256 stakedAmount_\r\n    );\r\n\r\n    /**\r\n     *  @dev Emitted when user withdraws his stakings\r\n     */\r\n    event PaidOut(\r\n        address indexed token,\r\n        address indexed staker_,\r\n        uint256 amount_,\r\n        uint256 reward_\r\n    );\r\n\r\n    /**\r\n     *   @param\r\n     *   name_ name of the contract\r\n     *   tokenAddressA_ contract address of the token A\r\n     *   tokenAddressB_ contract address of the token B\r\n     *   conversionAtoB_ tokenA to tokenB conversion multiplied by 10**6\r\n     *   rate_ Effective interest rate for the pool multiplied by 100\r\n     *   lockDuration_ lock duration of the pool in days\r\n     *   stakedCapA_ Cap amount for token A in the pool\r\n     *   stakedCapB_ Cap amount for token B in the pool\r\n     *   payOutA_ payOut ratio for token A\r\n     *   payOutB_ payOut ratio for token B\r\n     */\r\n    constructor(\r\n        string memory name_,\r\n        address tokenAddressA_,\r\n        address tokenAddressB_,\r\n        uint256 conversionAtoB_,\r\n        uint64 rate_,\r\n        uint256 lockDuration_,\r\n        uint256 stakedCapA_,\r\n        uint256 stakedCapB_,\r\n        uint256 payOutA_,\r\n        uint256 payOutB_\r\n    ) public Ownable() {\r\n        name = name_;\r\n        require(tokenAddressA_ != address(0), \"Zero token A address\");\r\n        tokenAddressA = tokenAddressA_;\r\n        require(tokenAddressB_ != address(0), \"Zero token B address\");\r\n        tokenAddressB = tokenAddressB_;\r\n        require(conversionAtoB_ > 0, \"Zero conversion rate A to B\");\r\n        conversionAtoB = conversionAtoB_;\r\n        require(lockDuration_ > 0, \"Zero lock days\");\r\n        lockDuration = lockDuration_;\r\n        require(rate_ != 0, \"Zero interest rate\");\r\n        rate = rate_;\r\n        rates[index] = Rates(rate, block.timestamp);\r\n        require(stakedCapA_ > 0, \"Zero cap amount for token A\");\r\n        poolCap[tokenAddressA] = stakedCapA_;\r\n        require(stakedCapB_ > 0, \"Zero cap amount for token B\");\r\n        poolCap[tokenAddressB] = stakedCapB_;\r\n        require(payOutA_ != 0, \"Zero Payout ratio of token A\");\r\n        payOut[tokenAddressA] = payOutA_;\r\n        require(payOutB_ != 0, \"Zero Payout ratio of token B\");\r\n        payOut[tokenAddressB] = payOutB_;\r\n    }\r\n\r\n    /**\r\n     *  Requirements:\r\n     *  `rate_` New effective interest rate multiplied by 100\r\n     *  @dev to set interest rates\r\n     */\r\n    function setRate(uint64 rate_) external onlyOwner {\r\n        require(rate_ != 0, \"Zero interest rate\");\r\n        rate = rate_;\r\n        index++;\r\n        rates[index] = Rates(rate_, block.timestamp);\r\n    }\r\n\r\n    function changeLockDuration(uint256 lockduration_) external onlyOwner {\r\n        lockDuration = lockduration_;\r\n    }\r\n\r\n    /**\r\n     *  Requirements:\r\n     *  `tokenAddress_` token address to set user cap\r\n     *  `amount_` user cap for token address\r\n     *  @dev to set interest rates\r\n     */\r\n    function setUserCap(address tokenAddress_, uint256 amount_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            tokenAddress_ == tokenAddressA || tokenAddress_ == tokenAddressB,\r\n            \"Wrong token address for the pool\"\r\n        );\r\n        userCap[tokenAddress_] = amount_;\r\n    }\r\n\r\n    /**\r\n     *  Requirements:\r\n     *  `payOutA_` Ratio of reward payout for token A\r\n     *  `payOutB_` Ratio of reward payout for token B\r\n     *  @dev to set interest rates\r\n     */\r\n    function setPayout(uint256 payOutA_, uint256 payOutB_) external onlyOwner {\r\n        payOut[tokenAddressA] = payOutA_;\r\n        payOut[tokenAddressB] = payOutB_;\r\n    }\r\n\r\n    function stakedTotal(address token) external view returns (uint256) {\r\n        if (token == tokenAddressA) return stakedTotalA;\r\n        if (token == tokenAddressB) return stakedTotalB;\r\n    }\r\n\r\n    /**\r\n     *  Requirements:\r\n     *  `rewardAmount` rewards to be added to the staking contract\r\n     *  @dev to add rewards to the staking contract\r\n     *  once the allowance is given to this contract for 'rewardAmount' by the user\r\n     */\r\n    function addReward(uint256 rewardAmount, address tokenAddress)\r\n        external\r\n        _validTokenAddress(tokenAddress)\r\n        _hasAllowance(msg.sender, rewardAmount, tokenAddress)\r\n        returns (bool)\r\n    {\r\n        require(rewardAmount > 0, \"Reward must be positive\");\r\n        address from = msg.sender;\r\n\r\n        if (!_payMe(from, rewardAmount, tokenAddress)) {\r\n            return false;\r\n        }\r\n\r\n        if (tokenAddress == tokenAddressA) {\r\n            totalRewardA = totalRewardA.add(rewardAmount);\r\n            rewardBalanceA = rewardBalanceA.add(rewardAmount);\r\n        } else {\r\n            totalRewardB = totalRewardB.add(rewardAmount);\r\n            rewardBalanceB = rewardBalanceB.add(rewardAmount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *  Requirements:\r\n     *  `user` User wallet address\r\n     *  @dev returns user staking data\r\n     */\r\n    function userDeposits(address user, address tokenAddress)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            bool\r\n        )\r\n    {\r\n        if (hasStaked[user][tokenAddress]) {\r\n            return (\r\n                deposits[user][tokenAddress].depositAmount,\r\n                deposits[user][tokenAddress].depositTime,\r\n                deposits[user][tokenAddress].endTime,\r\n                deposits[user][tokenAddress].userIndex,\r\n                deposits[user][tokenAddress].paid\r\n            );\r\n        }\r\n    }\r\n\r\n    function stakeBoth(uint256 amountA, uint256 amountB)\r\n        external\r\n        returns (bool)\r\n    {\r\n        //extra checks before execution;\r\n        address from = msg.sender;\r\n        require(!hasStaked[from][tokenAddressA], \"Already Staked Token A\");\r\n        require(!hasStaked[from][tokenAddressB], \"Already Staked Token B\");\r\n        bool stakeA = stake(amountA, tokenAddressA);\r\n        require(stakeA, \"Staking token A failed\");\r\n        bool stakeB = stake(amountB, tokenAddressB);\r\n        require(stakeB, \"Staking token B failed\");\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *  Requirements:\r\n     *  `amount` Amount to be staked\r\n     *  `tokenAddress` Token address to stake\r\n     /**\r\n     *  @dev to stake 'amount' value of tokens \r\n     *  once the user has given allowance to the staking contract\r\n     */\r\n    function stake(uint256 amount, address tokenAddress)\r\n        public\r\n        _validTokenAddress(tokenAddress)\r\n        _hasAllowance(msg.sender, amount, tokenAddress)\r\n        returns (bool)\r\n    {\r\n        require(amount > 0, \"Can't stake 0 amount\");\r\n        require(\r\n            amount <= userCap[tokenAddress],\r\n            \"Amount is greater than limit\"\r\n        );\r\n        uint256 poolRemaining;\r\n        if (tokenAddress == tokenAddressA) {\r\n            poolRemaining = poolCap[tokenAddress].sub(stakedTotalA);\r\n        } else {\r\n            poolRemaining = poolCap[tokenAddress].sub(stakedTotalB);\r\n        }\r\n        require(poolRemaining > 0, \"Pool limit reached\");\r\n        if (amount > poolRemaining) {\r\n            amount = poolRemaining;\r\n        }\r\n        address from = msg.sender;\r\n        require(!hasStaked[from][tokenAddress], \"Already Staked\");\r\n        return (_stake(from, amount, tokenAddress));\r\n    }\r\n\r\n    function _stake(\r\n        address from,\r\n        uint256 amount,\r\n        address token\r\n    ) private returns (bool) {\r\n        if (!_payMe(from, amount, token)) {\r\n            return false;\r\n        }\r\n\r\n        hasStaked[from][token] = true;\r\n\r\n        deposits[from][token] = Deposits(\r\n            amount,\r\n            block.timestamp,\r\n            block.timestamp.add((lockDuration.mul(86400))), //lockDuration * 24 * 3600\r\n            index,\r\n            false\r\n        );\r\n\r\n        emit Staked(token, from, amount);\r\n\r\n        if (token == tokenAddressA) {\r\n            stakedTotalA = stakedTotalA.add(amount);\r\n        } else {\r\n            stakedTotalB = stakedTotalB.add(amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function emergencyWithdrawBoth() external returns (bool) {\r\n        //extra checks before executing;\r\n        address from = msg.sender;\r\n        require(\r\n            block.timestamp >= deposits[from][tokenAddressA].endTime,\r\n            \"Requesting before lock time token A\"\r\n        );\r\n        require(\r\n            block.timestamp >= deposits[from][tokenAddressB].endTime,\r\n            \"Requesting before lock time token B\"\r\n        );\r\n        bool withdrawA = emergencyWithdraw(tokenAddressA);\r\n        require(withdrawA, \"Error paying token A\");\r\n        bool withdrawB = emergencyWithdraw(tokenAddressB);\r\n        require(withdrawB, \"Error paying token B\");\r\n        return true;\r\n    }\r\n\r\n    function emergencyWithdraw(address token) public returns (bool) {\r\n        address from = msg.sender;\r\n        require(hasStaked[from][token], \"No stakes found for user\");\r\n        require(\r\n            block.timestamp >= deposits[from][token].endTime,\r\n            \"Requesting before lock time\"\r\n        );\r\n        require(!deposits[from][token].paid, \"Already paid out\");\r\n\r\n        return (_emergencyWithdraw(from, token));\r\n    }\r\n\r\n    function _emergencyWithdraw(address from, address token)\r\n        private\r\n        returns (bool)\r\n    {\r\n        uint256 amount = deposits[from][token].depositAmount;\r\n        deposits[from][token].paid = true;\r\n        hasStaked[from][token] = false; //Check-Effects-Interactions pattern\r\n\r\n        bool principalPaid = _payDirect(from, amount, token);\r\n        require(principalPaid, \"Error paying\");\r\n        emit PaidOut(token, from, amount, 0);\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdrawBoth() external returns (bool) {\r\n        //extra checks before executing;\r\n        address from = msg.sender;\r\n        require(\r\n            block.timestamp >= deposits[from][tokenAddressA].endTime,\r\n            \"Requesting before lock time token A\"\r\n        );\r\n        require(\r\n            block.timestamp >= deposits[from][tokenAddressB].endTime,\r\n            \"Requesting before lock time token B\"\r\n        );\r\n        bool withdrawA = withdraw(tokenAddressA);\r\n        require(withdrawA, \"Error paying token A\");\r\n        bool withdrawB = withdraw(tokenAddressB);\r\n        require(withdrawB, \"Error paying token B\");\r\n        return true;\r\n    }\r\n\r\n    function withdraw(address token)\r\n        public\r\n        _validTokenAddress(token)\r\n        returns (bool)\r\n    {\r\n        address from = msg.sender;\r\n        require(hasStaked[from][token], \"No stakes found for user\");\r\n        require(\r\n            block.timestamp >= deposits[from][token].endTime,\r\n            \"Requesting before lock time\"\r\n        );\r\n        require(!deposits[from][token].paid, \"Already paid out\");\r\n\r\n        return (_withdraw(from, token));\r\n    }\r\n\r\n    function _withdraw(address from, address token) private returns (bool) {\r\n        (uint256 rewardA, uint256 rewardB) = _calculate(from, token);\r\n        require(\r\n            rewardA <= rewardBalanceA && rewardB <= rewardBalanceB,\r\n            \"Not enough rewards\"\r\n        );\r\n\r\n        bool paidA = _payDirect(from, rewardA, tokenAddressA);\r\n        require(paidA, \"Error paying rewards of token A\");\r\n\r\n        bool paidB = _payDirect(from, rewardB, tokenAddressB);\r\n        require(paidB, \"Error paying rewards of token B\");\r\n\r\n        bool paidAmount = _emergencyWithdraw(from, token);\r\n        require(paidAmount, \"Error paying deposit amount\");\r\n\r\n        return true;\r\n    }\r\n\r\n    function calculate(address from, address token)\r\n        external\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        return _calculate(from, token);\r\n    }\r\n\r\n    function _calculate(address from, address token)\r\n        private\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        if (!hasStaked[from][token]) return (0, 0);\r\n        (\r\n            uint256 amount,\r\n            uint256 depositTime,\r\n            uint256 endTime,\r\n            uint64 userIndex\r\n        ) = (\r\n            deposits[from][token].depositAmount,\r\n            deposits[from][token].depositTime,\r\n            deposits[from][token].endTime,\r\n            deposits[from][token].userIndex\r\n        );\r\n\r\n        uint256 amount1 = amount;\r\n        uint256 time;\r\n        uint256 interest;\r\n        uint256 _lockduration = endTime.sub(depositTime);\r\n        for (uint64 i = userIndex; i < index; i++) {\r\n            //loop runs till the latest index/interest rate change\r\n            if (endTime < rates[i + 1].timeStamp) {\r\n                //if the change occurs after the endTime loop breaks\r\n                break;\r\n            } else {\r\n                time = rates[i + 1].timeStamp.sub(depositTime);\r\n                interest = amount.mul(rates[i].newInterestRate).mul(time).div(\r\n                    _lockduration.mul(10000)\r\n                );\r\n                if (token == tokenAddressA) {\r\n                    uint256 test = payOut[tokenAddressA].mul(10000).div(\r\n                        payOut[tokenAddressA].add(payOut[tokenAddressB])\r\n                    );\r\n                    interest = interest.mul(test).div(10000);\r\n                } else {\r\n                    uint256 test = payOut[tokenAddressB].mul(10000).div(\r\n                        payOut[tokenAddressA].add(payOut[tokenAddressB])\r\n                    );\r\n                    interest = interest.mul(test).div(10000);\r\n                }\r\n                amount = amount.add(interest);\r\n                depositTime = rates[i + 1].timeStamp;\r\n                userIndex++;\r\n            }\r\n        }\r\n\r\n        if (depositTime < endTime) {\r\n            //final calculation for the remaining time period\r\n            time = endTime.sub(depositTime);\r\n\r\n            interest = time\r\n            .mul(amount)\r\n            .mul(rates[userIndex].newInterestRate)\r\n            .div(_lockduration.mul(10000));\r\n\r\n            if (token == tokenAddressA) {\r\n                uint256 test = payOut[tokenAddressA].mul(10000).div(\r\n                    payOut[tokenAddressA].add(payOut[tokenAddressB])\r\n                );\r\n                interest = interest.mul(test).div(10000);\r\n            } else {\r\n                uint256 test = payOut[tokenAddressB].mul(10000).div(\r\n                    payOut[tokenAddressA].add(payOut[tokenAddressB])\r\n                );\r\n                interest = interest.mul(test).div(10000);\r\n            }\r\n            amount = amount.add(interest);\r\n        }\r\n\r\n        uint256 rewardA;\r\n        uint256 rewardB;\r\n\r\n        if (token == tokenAddressA) {\r\n            rewardA = amount.sub(amount1);\r\n            uint256 test = payOut[tokenAddressB].mul(1000000).div(\r\n                payOut[tokenAddressA]\r\n            );\r\n            rewardB = rewardA.mul(conversionAtoB).mul(test).div(10**12);\r\n        } else {\r\n            rewardB = amount.sub(amount1);\r\n            uint256 test = payOut[tokenAddressA].mul(1000000).div(\r\n                payOut[tokenAddressB]\r\n            );\r\n            rewardA = rewardB.mul(10**6).mul(test).div(conversionAtoB).div(\r\n                1000000\r\n            );\r\n        }\r\n\r\n        return (rewardA, rewardB);\r\n    }\r\n\r\n    function _payMe(\r\n        address payer,\r\n        uint256 amount,\r\n        address token\r\n    ) private returns (bool) {\r\n        return _payTo(payer, address(this), amount, token);\r\n    }\r\n\r\n    function _payTo(\r\n        address allower,\r\n        address receiver,\r\n        uint256 amount,\r\n        address token\r\n    ) private _hasAllowance(allower, amount, token) returns (bool) {\r\n        // Request to transfer amount from the contract to receiver.\r\n        // contract does not own the funds, so the allower must have added allowance to the contract\r\n        // Allower is the original owner.\r\n        ERC20Interface = IERC20(token);\r\n        return ERC20Interface.transferFrom(allower, receiver, amount);\r\n    }\r\n\r\n    function _payDirect(\r\n        address to,\r\n        uint256 amount,\r\n        address token\r\n    ) private returns (bool) {\r\n        ERC20Interface = IERC20(token);\r\n        return ERC20Interface.transfer(to, amount);\r\n    }\r\n\r\n    modifier _hasAllowance(\r\n        address allower,\r\n        uint256 amount,\r\n        address token\r\n    ) {\r\n        // Make sure the allower has provided the right allowance.\r\n        ERC20Interface = IERC20(token);\r\n        uint256 ourAllowance = ERC20Interface.allowance(allower, address(this));\r\n        require(amount <= ourAllowance, \"Make sure to add enough allowance\");\r\n        _;\r\n    }\r\n\r\n    modifier _validTokenAddress(address token) {\r\n        require(\r\n            token == tokenAddressA || token == tokenAddressB,\r\n            \"Invalid token address\"\r\n        );\r\n        _;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddressA_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddressB_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"conversionAtoB_\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"rate_\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedCapA_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedCapB_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payOutA_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payOutB_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"}],\"name\":\"PaidOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAmount_\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20Interface\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"calculate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockduration_\",\"type\":\"uint256\"}],\"name\":\"changeLockDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conversionAtoB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyWithdrawBoth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"rates\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"newInterestRate\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardBalanceA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardBalanceB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payOutA_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payOutB_\",\"type\":\"uint256\"}],\"name\":\"setPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rate_\",\"type\":\"uint64\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"setUserCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"stakeBoth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakedCapA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakedCapB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"stakedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakedTotalA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakedTotalB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddressA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddressB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRewardA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRewardB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBoth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MultiStake","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000001400000000000000000000000001de5e000c41c8d35b9f1f4985c23988f0583105700000000000000000000000003042482d64577a7bdb282260e2ea4c8a89c064b00000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000035f000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000372537349a396a28680000000000000000000000000000000000000000000000372537349a396a28680000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000013424e462d434e5452204475616c205969656c6400000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0a0d8aaa78c7d5fd1923c85c9dd5b0b5e129f9e91ea1efa9b5b0bb9b1950efcf"}]}