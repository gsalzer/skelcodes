{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n    Fully commented standard ERC721 Distilled from OpenZeppelin Docs\r\n    Base for Building ERC721 by Martin McConnell\r\n    All the utility without the fluff.\r\n*/\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is 0x address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract Functional {\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n    \r\n    bool private _reentryKey = false;\r\n    modifier reentryLock {\r\n        require(!_reentryKey, \"attempt reenter locked function\");\r\n        _reentryKey = true;\r\n        _;\r\n        _reentryKey = false;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC721 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint256 balance){}\r\n    function ownerOf(uint256 tokenId) external view returns (address owner){}\r\n    function safeTransferFrom(address from,address to,uint256 tokenId) external{}\r\n    function transferFrom(address from, address to, uint256 tokenId) external{}\r\n    function approve(address to, uint256 tokenId) external{}\r\n    function getApproved(uint256 tokenId) external view returns (address operator){}\r\n    function setApprovalForAll(address operator, bool _approved) external{}\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool){}\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external{}\r\n}\r\n\r\n// ******************************************************************************************************************************\r\n// **************************************************  Start of Main Contract ***************************************************\r\n// ******************************************************************************************************************************\r\n\r\n\r\ncontract gotchivender is Ownable, Functional {\r\n    uint256 public price;\r\n    uint256 public holderPrice;\r\n    uint256 public discountPrice;\r\n\r\n    bool public mintActive;\r\n    string public name;\r\n\r\n    ERC721 CHAMFAM;\r\n    ERC721[] DISCOUNT;\r\n\r\n    address dev;\r\n    address community;\r\n    address chamagotchi;\r\n\r\n    constructor() {\r\n        name = \"Chamagotchis\";\r\n        mintActive = false;\r\n\r\n        //initialize discount contract\r\n        CHAMFAM = ERC721(0xFD3C3717164831916E6D2D7cdde9904dd793eC84); // mainnet\r\n\r\n        dev             = payable(0x2E07cd18E675c921E8c523E36D79788734E94f88);\r\n        community       = payable(0x855bFE65652868920729b9d92D8d6030D01e3bFF);\r\n        chamagotchi     = payable(0x3083b00d19951c9f182c358e165460C52a729767);\r\n\r\n        //DISCOUNT.push(CHAMFAM); //chamfam added to discount\r\n            //as an example\r\n\r\n        price = 50 * (10 ** 15); // Replace leading value with price in finney\r\n        holderPrice = 25 * (10 ** 15); // Replace leading value with price in finney\r\n        discountPrice = 35 * (10 ** 15); // Replace leading value with price in finney\r\n\r\n        DISCOUNT.push(ERC721(CHAMFAM));\r\n        \r\n    }\r\n\r\n    function purchase() external payable {\r\n        uint256 cost = price;\r\n        if (CHAMFAM.balanceOf(_msgSender()) > 0){\r\n            cost = holderPrice;  // discount for chamfam holders\r\n        } else if (isDiscount()){\r\n            cost = discountPrice; // discount for associated NFTs\r\n        }\r\n\r\n        require(msg.value >= cost, \"Mint: Insufficient Funds\");\r\n        require(mintActive);\r\n\r\n        //Handle ETH transactions\r\n        uint256 cashIn = msg.value;\r\n        uint256 cashChange = 0;\r\n        if (cost > cashIn){\r\n            cashChange = cashIn - cost;\r\n        }\r\n                \r\n        if (cashChange > 0){\r\n            (bool success, ) = msg.sender.call{value: cashChange}(\"\");\r\n            require(success, \"Mint: unable to send change\");\r\n        }\r\n    }\r\n\r\n    function isDiscount() public view returns (bool) {\r\n        for (uint256 i; i < DISCOUNT.length; i++){\r\n            if (DISCOUNT[i].balanceOf(_msgSender()) > 0) {\r\n                return true;\r\n            }        \r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function withdraw() external onlyOwner {\r\n        uint256 sendAmount = address(this).balance;\r\n        bool success;\r\n\r\n        (success, ) = dev.call{value: ((sendAmount * 5)/100)}(\"\");\r\n        require(success, \"Txn Unsuccessful\");\r\n\r\n        (success, ) = community.call{value: ((sendAmount * 25)/100)}(\"\");\r\n        require(success, \"Txn Unsuccessful\");\r\n\r\n        (success, ) = chamagotchi.call{value: ((sendAmount * 70)/100)}(\"\");\r\n        require(success, \"Txn Unsuccessful\");       \r\n    }\r\n\r\n    function setDiscountPrice(uint256 newPrice) external onlyOwner{\r\n        discountPrice = newPrice;\r\n    }\r\n\r\n    function setHolderPrice(uint256 newPrice) external onlyOwner{\r\n        holderPrice = newPrice;\r\n    }\r\n\r\n    function addDiscountContract(address NFTaddress) external onlyOwner{\r\n        DISCOUNT.push(ERC721(NFTaddress));\r\n    }\r\n\r\n    function activateMint() public onlyOwner {\r\n        mintActive = true;\r\n    }\r\n    \r\n    function deactivateMint() public onlyOwner {\r\n        mintActive = false;\r\n    }\r\n    \r\n    function setPrice(uint256 newPrice) public onlyOwner {\r\n        price = newPrice;\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    fallback() external payable {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"activateMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFTaddress\",\"type\":\"address\"}],\"name\":\"addDiscountContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDiscount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setDiscountPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setHolderPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"gotchivender","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9c77775b574f9985d804891ccac37a9a45c60989fc551fd25bbb8d3695b3839c"}]}