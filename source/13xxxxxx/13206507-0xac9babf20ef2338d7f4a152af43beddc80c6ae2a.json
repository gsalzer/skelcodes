{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/wrappers/ArbitrumMessengerWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @unsupported: ovm\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/arbitrum/messengers/IInbox.sol\\\";\\nimport \\\"../interfaces/arbitrum/messengers/IBridge.sol\\\";\\nimport \\\"../interfaces/arbitrum/messengers/IOutbox.sol\\\";\\nimport \\\"./MessengerWrapper.sol\\\";\\n\\n/**\\n * @dev A MessengerWrapper for Arbitrum - https://developer.offchainlabs.com/\\n * @notice Deployed on layer-1\\n */\\n\\ncontract ArbitrumMessengerWrapper is MessengerWrapper, Ownable {\\n\\n    IInbox public immutable l1MessengerAddress;\\n    address public l2BridgeAddress;\\n    uint256 public maxSubmissionCost;\\n    address public l1MessengerWrapperAlias;\\n    uint256 public maxGas;\\n    uint256 public gasPriceBid;\\n    uint160 constant offset = uint160(0x1111000000000000000000000000000000001111);\\n\\n    constructor(\\n        address _l1BridgeAddress,\\n        address _l2BridgeAddress,\\n        IInbox _l1MessengerAddress,\\n        uint256 _maxSubmissionCost,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid\\n        \\n    )\\n        public\\n        MessengerWrapper(_l1BridgeAddress)\\n    {\\n        l2BridgeAddress = _l2BridgeAddress;\\n        l1MessengerAddress = _l1MessengerAddress;\\n        maxSubmissionCost = _maxSubmissionCost;\\n        l1MessengerWrapperAlias = applyL1ToL2Alias(address(this));\\n        maxGas = _maxGas;\\n        gasPriceBid = _gasPriceBid;\\n    }\\n\\n    /** \\n     * @dev Sends a message to the l2BridgeAddress from layer-1\\n     * @param _calldata The data that l2BridgeAddress will be called with\\n     */\\n    function sendCrossDomainMessage(bytes memory _calldata) public override onlyL1Bridge {\\n        l1MessengerAddress.createRetryableTicket(\\n            l2BridgeAddress,\\n            0,\\n            maxSubmissionCost,\\n            l1MessengerWrapperAlias,\\n            l1MessengerWrapperAlias,\\n            maxGas,\\n            gasPriceBid,\\n            _calldata\\n        );\\n    }\\n\\n    function verifySender(address l1BridgeCaller, bytes memory /*_data*/) public override {\\n        // Reference: https://github.com/OffchainLabs/arbitrum/blob/5c06d89daf8fa6088bcdba292ffa6ed0c72afab2/packages/arb-bridge-peripherals/contracts/tokenbridge/ethereum/L1ArbitrumMessenger.sol#L89\\n        IBridge arbBridge = l1MessengerAddress.bridge();\\n        IOutbox outbox = IOutbox(arbBridge.activeOutbox());\\n        address l2ToL1Sender = outbox.l2ToL1Sender();\\n\\n        require(l1BridgeCaller == address(arbBridge), \\\"ARB_MSG_WPR: Caller is not the bridge\\\");\\n        require(l2ToL1Sender == l2BridgeAddress, \\\"ARB_MSG_WPR: Invalid cross-domain sender\\\");\\n    }\\n\\n    /**\\n     * @dev Claim funds that exist on the l2 messenger wrapper alias address\\n     * @notice Do not use state variables here as this is to be used when passing in precise values\\n     */\\n    function claimL2Funds(\\n        address _recipient,\\n        uint256 _l2CallValue,\\n        uint256 _maxSubmissionCost,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid\\n    )\\n        public\\n        onlyOwner\\n    {\\n        l1MessengerAddress.createRetryableTicket(\\n            _recipient,\\n            _l2CallValue,\\n            _maxSubmissionCost,\\n            _recipient,\\n            _recipient,\\n            _maxGas,\\n            _gasPriceBid,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /// @notice Utility function that converts the msg.sender viewed in the L2 to the\\n    /// address in the L1 that submitted a tx to the inbox\\n    /// @param l1Address L2 address as viewed in msg.sender\\n    /// @return The address in the L1 that triggered the tx to L2\\n    function applyL1ToL2Alias(address l1Address) internal pure returns (address) {\\n        return address(uint160(l1Address) + offset);\\n    }\\n\\n    /* ========== External Config Management Functions ========== */\\n\\n    function setMaxSubmissionCost(uint256 _newMaxSubmissionCost) external onlyOwner {\\n        maxSubmissionCost = _newMaxSubmissionCost;\\n    }\\n\\n    function setL1MessengerWrapperAlias(address _newL1MessengerWrapperAlias) external onlyOwner {\\n        l1MessengerWrapperAlias = _newL1MessengerWrapperAlias;\\n    }\\n\\n    function setMaxGas(uint256 _newMaxGas) external onlyOwner {\\n        maxGas = _newMaxGas;\\n    }\\n\\n    function setGasPriceBid(uint256 _newGasPriceBid) external onlyOwner {\\n        gasPriceBid = _newGasPriceBid;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/arbitrum/messengers/IInbox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./IBridge.sol\\\";\\n\\ninterface IInbox {\\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\\n    function bridge() external view returns (IBridge);\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 l2CallValue,\\n        uint256 maxSubmissionCost,\\n        address excessFeeRefundAddress,\\n        address callValueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/arbitrum/messengers/IBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface IBridge {\\n    function activeOutbox() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/arbitrum/messengers/IOutbox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface IOutbox {\\n    function l2ToL1Sender() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/wrappers/MessengerWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IMessengerWrapper.sol\\\";\\n\\nabstract contract MessengerWrapper is IMessengerWrapper {\\n    address public immutable l1BridgeAddress;\\n\\n    constructor(address _l1BridgeAddress) internal {\\n        l1BridgeAddress = _l1BridgeAddress;\\n    }\\n\\n    modifier onlyL1Bridge {\\n        require(msg.sender == l1BridgeAddress, \\\"MW: Sender must be the L1 Bridge\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMessengerWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IMessengerWrapper {\\n    function sendCrossDomainMessage(bytes memory _calldata) external;\\n    function verifySender(address l1BridgeCaller, bytes memory _data) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"contract IInbox\",\"name\":\"_l1MessengerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2CallValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"}],\"name\":\"claimL2Funds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPriceBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1BridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1MessengerAddress\",\"outputs\":[{\"internalType\":\"contract IInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1MessengerWrapperAlias\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2BridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSubmissionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"sendCrossDomainMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newGasPriceBid\",\"type\":\"uint256\"}],\"name\":\"setGasPriceBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newL1MessengerWrapperAlias\",\"type\":\"address\"}],\"name\":\"setL1MessengerWrapperAlias\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxGas\",\"type\":\"uint256\"}],\"name\":\"setMaxGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"setMaxSubmissionCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1BridgeCaller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ArbitrumMessengerWrapper","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"50000","ConstructorArguments":"0000000000000000000000003666f603cc164936c1b87e207f36beba4ac5f18a0000000000000000000000000e0e3d2c5c292161999474247956ef542cabf8dd0000000000000000000000004dbd4fc535ac27206064b68ffcf827b0a60bab3f000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000004c4b40000000000000000000000000000000000000000000000000000000174876e800","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}