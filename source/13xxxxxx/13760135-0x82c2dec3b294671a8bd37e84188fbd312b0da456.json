{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function skim(address to) external;\r\n    function sync() external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface AntiSnipe {\r\n    function checkUser(address from, address to, uint256 amt) external returns (bool);\r\n    function setLaunch(address _initialLpPair, uint32 _liqAddBlock, uint64 _liqAddStamp, uint8 dec) external;\r\n    function setLpPair(address pair, bool enabled) external;\r\n    function setProtections(bool _as, bool _ag, bool _ab, bool _algo) external;\r\n    function setGasPriceLimit(uint256 gas) external;\r\n    function removeSniper(address account) external;\r\n    function getSniperAmt() external view returns (uint256);\r\n    function removeBlacklisted(address account) external;\r\n    function isBlacklisted(address account) external view returns (bool);\r\n    function setBlacklistEnabled(address account, bool enabled) external;\r\n    function setBlacklistEnabledMultiple(address[] memory accounts, bool enabled) external;\r\n}\r\n\r\ncontract Shibezos is Context, IERC20 {\r\n    // Ownership moved to in-contract for customizability.\r\n    address private _owner;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => bool) lpPairs;\r\n    uint256 private timeSinceLastPair = 0;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n\r\n    mapping (address => bool) private presaleAddresses;\r\n    bool private allowedPresaleExclusion = true;\r\n    mapping (address => bool) private _liquidityHolders;\r\n   \r\n    uint256 private startingSupply = 100_000_000_000_000_000;\r\n\r\n    string constant private _name = \"Shibezos\";\r\n    string constant private _symbol = \"$BEZOS\";\r\n    uint8 private _decimals = 9;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = startingSupply * 10**_decimals;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n\r\n    struct CurrentFees {\r\n        uint16 reflect;\r\n        uint16 totalSwap;\r\n        uint16 burn;\r\n    }\r\n\r\n    struct Fees {\r\n        uint16 reflect;\r\n        uint16 liquidity;\r\n        uint16 marketing;\r\n        uint16 burn;\r\n        uint16 dev1;\r\n        uint16 dev2;\r\n        uint16 totalSwap;\r\n    }\r\n\r\n    struct StaticValuesStruct {\r\n        uint16 maxReflect;\r\n        uint16 maxLiquidity;\r\n        uint16 maxMarketing;\r\n        uint16 maxBurn;\r\n        uint16 maxDev1;\r\n        uint16 maxDev2;\r\n        uint16 masterTaxDivisor;\r\n    }\r\n\r\n    struct Ratios {\r\n        uint16 liquidity;\r\n        uint16 marketing;\r\n        uint16 dev1;\r\n        uint16 dev2;\r\n        uint16 total;\r\n    }\r\n\r\n    CurrentFees private currentTaxes = CurrentFees({\r\n        reflect: 0,\r\n        totalSwap: 0,\r\n        burn: 0\r\n        });\r\n\r\n    Fees public _buyTaxes = Fees({\r\n        reflect: 200,\r\n        liquidity: 200,\r\n        marketing: 300,\r\n        burn: 100,\r\n        dev1: 100,\r\n        dev2: 100,\r\n        totalSwap: 800\r\n        });\r\n\r\n    Fees public _sellTaxes = Fees({\r\n        reflect: 200,\r\n        liquidity: 200,\r\n        marketing: 300,\r\n        burn: 100,\r\n        dev1: 100,\r\n        dev2: 100,\r\n        totalSwap: 800\r\n        });\r\n\r\n    Fees public _transferTaxes = Fees({\r\n        reflect: 0,\r\n        liquidity: 0,\r\n        marketing: 200,\r\n        burn: 0,\r\n        dev1: 100,\r\n        dev2: 100,\r\n        totalSwap: 400\r\n        });\r\n\r\n    Ratios public _ratios = Ratios({\r\n        liquidity: 2,\r\n        marketing: 3,\r\n        dev1: 1,\r\n        dev2: 1,\r\n        total: 7\r\n        });\r\n\r\n    StaticValuesStruct public staticVals = StaticValuesStruct({\r\n        maxReflect: 800,\r\n        maxLiquidity: 800,\r\n        maxMarketing: 800,\r\n        maxBurn: 800,\r\n        maxDev1: 800,\r\n        maxDev2: 800,\r\n        masterTaxDivisor: 10000\r\n        });\r\n\r\n    IUniswapV2Router02 public dexRouter;\r\n    address public lpPair;\r\n\r\n    address public currentRouter;\r\n    // PCS ROUTER\r\n    address private pcsV2Router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    // UNI ROUTER\r\n    address private uniswapV2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    // KOFFEE ROUTER\r\n    address private _routerAddress = 0xc0fFee0000C824D24E0F280f1e4D21152625742b;\r\n    // TESTNET BUSD ADDY\r\n    address TESTNET_BUSD = 0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee;\r\n\r\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address payable public _marketingWallet = payable(0x6D0b366129B54fdf2428DfA1edcAdf0922CE54Eb);\r\n    address payable public _dev1Wallet = payable(0x80ea25751B4F407D7349A3F2384b37504eDC6740);\r\n    address payable public _dev2Wallet = payable(0xFff1814d05218Eb88931458d71ec8e5871DcCcEF);\r\n    \r\n    bool inSwap;\r\n    bool public contractSwapEnabled = false;\r\n\r\n    uint256 private maxTBPercent = 3;\r\n    uint256 private maxTBDivisor = 100;\r\n    uint256 private maxTSPercent = 9;\r\n    uint256 private maxTSDivisor = 1000;\r\n    uint256 private maxWPercent = 3;\r\n    uint256 private maxWDivisor = 100;\r\n\r\n    uint256 private _maxTxAmountBuy = (_tTotal * maxTBPercent) / maxTBDivisor;\r\n    uint256 public maxTxAmountUIBuy = (startingSupply * maxTBPercent) / maxTBDivisor;\r\n    uint256 private _maxTxAmountSell = (_tTotal * maxTSPercent) / maxTSDivisor;\r\n    uint256 public maxTxAmountUISell = (startingSupply * maxTSPercent) / maxTSDivisor;\r\n    uint256 private _maxWalletSize = (_tTotal * maxWPercent) / maxWDivisor;\r\n    uint256 public maxWalletSizeUI = (startingSupply * maxWPercent) / maxWDivisor;\r\n\r\n    uint256 private swapThreshold = (_tTotal * 5) / 10000;\r\n    uint256 private swapAmount = (_tTotal * 5) / 1000;\r\n\r\n    bool public tradingEnabled = false;\r\n    bool public _hasLiqBeenAdded = false;\r\n    AntiSnipe antiSnipe;\r\n\r\n    mapping (address => uint256) private lastBuyTime;\r\n    bool public doubleDayTradingTaxEnabled = true;\r\n    uint256 public doubleDayTradingTaxTime = 24 hours;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event ContractSwapEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event SniperCaught(address sniperAddress);\r\n    \r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Caller =/= owner.\");\r\n        _;\r\n    }\r\n    \r\n    constructor () payable {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n\r\n        // Set the owner.\r\n        _owner = msg.sender;\r\n\r\n        if (block.chainid == 56 || block.chainid == 97) {\r\n            currentRouter = pcsV2Router;\r\n        } else if (block.chainid == 1) {\r\n            currentRouter = uniswapV2Router;\r\n        }\r\n\r\n        dexRouter = IUniswapV2Router02(currentRouter);\r\n        lpPair = IUniswapV2Factory(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));\r\n        lpPairs[lpPair] = true;\r\n\r\n        _approve(msg.sender, currentRouter, type(uint256).max);\r\n        _approve(address(this), currentRouter, type(uint256).max);\r\n\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[DEAD] = true;\r\n        _liquidityHolders[owner()] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n    // Ownable removed as a lib and added here to allow for custom transfers and renouncements.\r\n    // This allows for removal of ownership privileges from the owner once renounced or transferred.\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwner(address newOwner) external onlyOwner() {\r\n        require(newOwner != address(0), \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        require(newOwner != DEAD, \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        setExcludedFromFees(_owner, false);\r\n        setExcludedFromFees(newOwner, true);\r\n        \r\n        if(balanceOf(_owner) > 0) {\r\n            _transfer(_owner, newOwner, balanceOf(_owner));\r\n        }\r\n        \r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        \r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner() {\r\n        setExcludedFromFees(_owner, false);\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n\r\n    function totalSupply() external view override returns (uint256) { return _tTotal; }\r\n    function decimals() external view override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner(); }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address sender, address spender, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: Zero Address\");\r\n        require(spender != address(0), \"ERC20: Zero Address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function approveContractContingency() public onlyOwner returns (bool) {\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function setNewRouter(address newRouter) public onlyOwner() {\r\n        IUniswapV2Router02 _newRouter = IUniswapV2Router02(newRouter);\r\n        address get_pair = IUniswapV2Factory(_newRouter.factory()).getPair(address(this), _newRouter.WETH());\r\n        if (get_pair == address(0)) {\r\n            lpPair = IUniswapV2Factory(_newRouter.factory()).createPair(address(this), _newRouter.WETH());\r\n        }\r\n        else {\r\n            lpPair = get_pair;\r\n        }\r\n        dexRouter = _newRouter;\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n    }\r\n\r\n    function setLpPair(address pair, bool enabled) external onlyOwner {\r\n        if (enabled == false) {\r\n            lpPairs[pair] = false;\r\n            antiSnipe.setLpPair(pair, false);\r\n        } else {\r\n            if (timeSinceLastPair != 0) {\r\n                require(block.timestamp - timeSinceLastPair > 3 days, \"3 Day cooldown.!\");\r\n            }\r\n            lpPairs[pair] = true;\r\n            timeSinceLastPair = block.timestamp;\r\n            antiSnipe.setLpPair(pair, true);\r\n        }\r\n    }\r\n\r\n    function changeRouterContingency(address router) external onlyOwner {\r\n        require(!_hasLiqBeenAdded);\r\n        currentRouter = router;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return (_tTotal - (balanceOf(DEAD) + balanceOf(address(0))));\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns(bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function setExcludedFromFees(address account, bool enabled) public onlyOwner {\r\n        _isExcludedFromFees[account] = enabled;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function setExcludedFromReward(address account, bool enabled) public onlyOwner {\r\n        if (enabled == true) {\r\n            require(!_isExcluded[account], \"Account is already excluded.\");\r\n            if(_rOwned[account] > 0) {\r\n                _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n            }\r\n            _isExcluded[account] = true;\r\n            _excluded.push(account);\r\n        } else if (enabled == false) {\r\n            require(_isExcluded[account], \"Account is already included.\");\r\n            if(_excluded.length == 1){\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n            } else {\r\n                for (uint256 i = 0; i < _excluded.length; i++) {\r\n                    if (_excluded[i] == account) {\r\n                        _excluded[i] = _excluded[_excluded.length - 1];\r\n                        _tOwned[account] = 0;\r\n                        _isExcluded[account] = false;\r\n                        _excluded.pop();\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function setInitializer(address initializer) external onlyOwner {\r\n        require(!_hasLiqBeenAdded, \"Liquidity is already in.\");\r\n        require(initializer != address(this), \"Can't be self.\");\r\n        antiSnipe = AntiSnipe(initializer);\r\n    }\r\n\r\n    function removeBlacklisted(address account) external onlyOwner {\r\n        antiSnipe.removeBlacklisted(account);\r\n    }\r\n\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return antiSnipe.isBlacklisted(account);\r\n    }\r\n\r\n    function getSniperAmt() public view returns (uint256) {\r\n        return antiSnipe.getSniperAmt();\r\n    }\r\n\r\n    function removeSniper(address account) external onlyOwner {\r\n        antiSnipe.removeSniper(account);\r\n    }\r\n\r\n    function setProtectionSettings(bool _antiSnipe, bool _antiGas, bool _antiBlock, bool _algo) external onlyOwner {\r\n        antiSnipe.setProtections(_antiSnipe, _antiGas, _antiBlock, _algo);\r\n    }\r\n\r\n    function setGasPriceLimit(uint256 gas) external onlyOwner {\r\n        require(gas >= 75, \"Too low.\");\r\n        antiSnipe.setGasPriceLimit(gas);\r\n    }\r\n    \r\n    function setTaxesBuy(uint16 reflect, uint16 liquidity, uint16 marketing, uint16 burn, uint16 dev1, uint16 dev2) external onlyOwner {\r\n        uint16 check = reflect + liquidity + marketing + burn + dev1 + dev2;\r\n        require(reflect <= staticVals.maxReflect\r\n                && liquidity <= staticVals.maxLiquidity\r\n                && marketing <= staticVals.maxMarketing\r\n                && burn <= staticVals.maxBurn\r\n                && dev1 <= staticVals.maxDev1\r\n                && dev2 <= staticVals.maxDev2);\r\n        require(check <= 3450);\r\n        _buyTaxes.liquidity = liquidity;\r\n        _buyTaxes.reflect = reflect;\r\n        _buyTaxes.marketing = marketing;\r\n        _buyTaxes.burn = burn;\r\n        _buyTaxes.dev1 = dev1;\r\n        _buyTaxes.dev2 = dev2;\r\n        _buyTaxes.totalSwap = check - (reflect + burn);\r\n    }\r\n\r\n    function setTaxesSell(uint16 reflect, uint16 liquidity, uint16 marketing, uint16 burn, uint16 dev1, uint16 dev2) external onlyOwner {\r\n        uint16 check = reflect + liquidity + marketing + burn + dev1 + dev2;\r\n        require(reflect <= staticVals.maxReflect\r\n                && liquidity <= staticVals.maxLiquidity\r\n                && marketing <= staticVals.maxMarketing\r\n                && burn <= staticVals.maxBurn\r\n                && dev1 <= staticVals.maxDev1\r\n                && dev2 <= staticVals.maxDev2);\r\n        require(check <= 3450);\r\n        _sellTaxes.liquidity = liquidity;\r\n        _sellTaxes.reflect = reflect;\r\n        _sellTaxes.marketing = marketing;\r\n        _sellTaxes.burn = burn;\r\n        _sellTaxes.dev1 = dev1;\r\n        _sellTaxes.dev2 = dev2;\r\n        _sellTaxes.totalSwap = check - (reflect + burn);\r\n    }\r\n\r\n    function setTaxesTransfer(uint16 reflect, uint16 liquidity, uint16 marketing, uint16 burn, uint16 dev1, uint16 dev2) external onlyOwner {\r\n        uint16 check = reflect + liquidity + marketing + burn + dev1 + dev2;\r\n        require(reflect <= staticVals.maxReflect\r\n                && liquidity <= staticVals.maxLiquidity\r\n                && marketing <= staticVals.maxMarketing\r\n                && burn <= staticVals.maxBurn\r\n                && dev1 <= staticVals.maxDev1\r\n                && dev2 <= staticVals.maxDev2);\r\n        require(check <= 3450);\r\n        _transferTaxes.liquidity = liquidity;\r\n        _transferTaxes.reflect = reflect;\r\n        _transferTaxes.marketing = marketing;\r\n        _transferTaxes.burn = burn;\r\n        _transferTaxes.dev1 = dev1;\r\n        _transferTaxes.dev2 = dev2;\r\n        _transferTaxes.totalSwap = check - (reflect + burn);\r\n    }\r\n\r\n    function setRatios(uint16 liquidity, uint16 marketing, uint16 dev1, uint16 dev2) external onlyOwner {\r\n        _ratios.liquidity = liquidity;\r\n        _ratios.marketing = marketing;\r\n        _ratios.dev1 = dev1;\r\n        _ratios.dev2 = dev2;\r\n        _ratios.total = liquidity + marketing + dev1 + dev2;\r\n    }\r\n\r\n    function setDoubleDayTradeTaxEnabled(bool enabled) external onlyOwner {\r\n        doubleDayTradingTaxEnabled = enabled;\r\n    }\r\n\r\n    function setDoubleDayTradeTaxTime(uint256 time) external onlyOwner {\r\n        require(time <= 24 hours);\r\n        doubleDayTradingTaxTime = time;\r\n    }\r\n\r\n    function setMaxTxPercents(uint256 percentBuy, uint256 divisorBuy, uint256 percentSell, uint256 divisorSell) public onlyOwner {\r\n        uint256 check = (_tTotal * percentBuy) / divisorBuy;\r\n        require(check >= (_tTotal / 1000), \"Max Transaction amt must be above 0.1% of total supply.\");\r\n        _maxTxAmountBuy = check;\r\n        maxTxAmountUIBuy = (startingSupply * percentBuy) / divisorBuy;\r\n        check = (_tTotal * percentSell) / divisorSell;\r\n        require(check >= (_tTotal / 1000), \"Max Transaction amt must be above 0.1% of total supply.\");\r\n        _maxTxAmountSell = check;\r\n        maxTxAmountUISell = (startingSupply * percentSell) / divisorSell;\r\n    }\r\n\r\n    function setMaxWalletSize(uint256 percent, uint256 divisor) external onlyOwner {\r\n        uint256 check = (_tTotal * percent) / divisor;\r\n        require(check >= (_tTotal / 1000), \"Max Wallet amt must be above 0.1% of total supply.\");\r\n        _maxWalletSize = check;\r\n        maxWalletSizeUI = (startingSupply * percent) / divisor;\r\n    }\r\n\r\n    function setSwapSettings(uint256 thresholdPercent, uint256 thresholdDivisor, uint256 amountPercent, uint256 amountDivisor) external onlyOwner {\r\n        swapThreshold = (_tTotal * thresholdPercent) / thresholdDivisor;\r\n        swapAmount = (_tTotal * amountPercent) / amountDivisor;\r\n    }\r\n\r\n    function setWallets(address payable marketing, address payable dev1, address payable dev2) external onlyOwner {\r\n        _marketingWallet = payable(marketing);\r\n        _dev1Wallet = payable(dev1);\r\n        _dev2Wallet = payable(dev2);\r\n    }\r\n\r\n    function setContractSwapEnabled(bool _enabled) public onlyOwner {\r\n        contractSwapEnabled = _enabled;\r\n        emit ContractSwapEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function _hasLimits(address from, address to) private view returns (bool) {\r\n        return from != owner()\r\n            && to != owner()\r\n            && !_liquidityHolders[to]\r\n            && !_liquidityHolders[from]\r\n            && to != DEAD\r\n            && to != address(0)\r\n            && from != address(this);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        if(_hasLimits(from, to)) {\r\n            if(!tradingEnabled) {\r\n                revert(\"Trading not yet enabled!\");\r\n            }\r\n            if(lpPairs[from]){\r\n                require(amount <= _maxTxAmountBuy, \"Transfer amount exceeds the maxTxAmount.\");\r\n            } else if (lpPairs[to]) {\r\n                require(amount <= _maxTxAmountSell, \"Transfer amount exceeds the maxTxAmount.\");\r\n            }\r\n            if(to != currentRouter && !lpPairs[to]) {\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Transfer amount exceeds the maxWalletSize.\");\r\n            }\r\n        }\r\n\r\n        bool takeFee = true;\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]){\r\n            takeFee = false;\r\n        }\r\n\r\n        if (lpPairs[to]) {\r\n            if (!inSwap\r\n                && contractSwapEnabled\r\n            ) {\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                if (contractTokenBalance >= swapThreshold) {\r\n                    if(contractTokenBalance >= swapAmount) { contractTokenBalance = swapAmount; }\r\n                    contractSwap(contractTokenBalance, path);\r\n                }\r\n            }      \r\n        } \r\n        return _finalizeTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    struct Balances {\r\n        uint256 total;\r\n        uint256 marketing;\r\n        uint256 liquidity;\r\n        uint256 dev1;\r\n        uint256 dev2;\r\n    }\r\n\r\n    Balances public __balances = Balances(0,0,0,0,0);\r\n\r\n    function contractSwap(uint256 contractTokenBalance, address[] memory path) private lockTheSwap {\r\n        if (_ratios.total == 0)\r\n            return;\r\n\r\n        if(_allowances[address(this)][address(dexRouter)] != type(uint256).max) {\r\n            _allowances[address(this)][address(dexRouter)] = type(uint256).max;\r\n        }\r\n\r\n        uint256 toLiquify = ((contractTokenBalance * _ratios.liquidity) / _ratios.total) / 2;\r\n\r\n        uint256 toSwapForEth = contractTokenBalance - toLiquify;\r\n\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            toSwapForEth,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        __balances.total = address(this).balance;\r\n\r\n        uint256 liquidityBalance = ((address(this).balance * _ratios.liquidity) / _ratios.total) / 2;\r\n        __balances.liquidity = liquidityBalance;\r\n\r\n        if (toLiquify > 0) {\r\n            dexRouter.addLiquidityETH{value: liquidityBalance}(\r\n                address(this),\r\n                toLiquify,\r\n                0, // slippage is unavoidable\r\n                0, // slippage is unavoidable\r\n                DEAD,\r\n                block.timestamp\r\n            );\r\n            emit SwapAndLiquify(toLiquify, liquidityBalance, toLiquify);\r\n        }\r\n        if (address(this).balance > 0) {\r\n            uint256 amountETH = address(this).balance;\r\n            _dev1Wallet.transfer((amountETH * _ratios.dev1) / (_ratios.total - _ratios.liquidity));\r\n            _dev2Wallet.transfer((amountETH * _ratios.dev2) / (_ratios.total - _ratios.liquidity));\r\n            __balances.dev1 = ((amountETH * _ratios.dev1) / (_ratios.total - _ratios.liquidity));\r\n            __balances.dev2 = ((amountETH * _ratios.dev2) / (_ratios.total - _ratios.liquidity));\r\n            __balances.marketing = address(this).balance;\r\n            _marketingWallet.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function _checkLiquidityAdd(address from, address to) private {\r\n        require(!_hasLiqBeenAdded, \"Liquidity already added and marked.\");\r\n        if (!_hasLimits(from, to) && to == lpPair) {\r\n            _liquidityHolders[from] = true;\r\n            _hasLiqBeenAdded = true;\r\n            if(address(antiSnipe) == address(0)){\r\n                antiSnipe = AntiSnipe(address(this));\r\n            }\r\n            contractSwapEnabled = true;\r\n            emit ContractSwapEnabledUpdated(true);\r\n        }\r\n    }\r\n\r\n    function enableTrading() public onlyOwner {\r\n        require(!tradingEnabled, \"Trading already enabled!\");\r\n        require(_hasLiqBeenAdded, \"Liquidity must be added.\");\r\n        setExcludedFromReward(address(this), true);\r\n        setExcludedFromReward(lpPair, true);\r\n        if(address(antiSnipe) == address(0)){\r\n            antiSnipe = AntiSnipe(address(this));\r\n        }\r\n        try antiSnipe.setLaunch(lpPair, uint32(block.number), uint64(block.timestamp), _decimals) {} catch {}\r\n        tradingEnabled = true;\r\n    }\r\n\r\n    function sweepContingency() external onlyOwner {\r\n        require(!_hasLiqBeenAdded, \"Cannot call after liquidity.\");\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    struct ExtraValues {\r\n        uint256 tTransferAmount;\r\n        uint256 tFee;\r\n        uint256 tSwap;\r\n        uint256 tBurn;\r\n\r\n        uint256 rTransferAmount;\r\n        uint256 rAmount;\r\n        uint256 rFee;\r\n    }\r\n\r\n    function _finalizeTransfer(address from, address to, uint256 tAmount, bool takeFee) private returns (bool) {\r\n        if (!_hasLiqBeenAdded) {\r\n            _checkLiquidityAdd(from, to);\r\n            if (!_hasLiqBeenAdded && _hasLimits(from, to)) {\r\n                revert(\"Only owner can transfer at this time.\");\r\n            }\r\n        }\r\n\r\n        ExtraValues memory values = _getValues(from, to, tAmount, takeFee);\r\n\r\n        _rOwned[from] = _rOwned[from] - values.rAmount;\r\n        _rOwned[to] = _rOwned[to] + values.rTransferAmount;\r\n\r\n        if (_isExcluded[from]) {\r\n            _tOwned[from] = _tOwned[from] - tAmount;\r\n        }\r\n        if (_isExcluded[to]) {\r\n            _tOwned[to] = _tOwned[to] + values.tTransferAmount;  \r\n        }\r\n\r\n        if (values.tSwap > 0) {\r\n            _rOwned[address(this)] = _rOwned[address(this)] + (values.tSwap * _getRate());\r\n            if(_isExcluded[address(this)])\r\n                _tOwned[address(this)] = _tOwned[address(this)] + values.tSwap;\r\n            emit Transfer(from, address(this), values.tSwap); // Transparency is the key to success.\r\n        }\r\n\r\n        if (values.tBurn > 0) {\r\n            _rOwned[DEAD] = _rOwned[DEAD] + (values.tBurn * _getRate());\r\n            if(_isExcluded[DEAD])\r\n                _tOwned[DEAD] = _tOwned[DEAD] + values.tBurn;\r\n            emit Transfer(from, DEAD, values.tBurn); // Transparency is the key to success.\r\n        }\r\n\r\n        if (values.rFee > 0 || values.tFee > 0) {\r\n            _rTotal -= values.rFee;\r\n        }\r\n\r\n        emit Transfer(from, to, values.tTransferAmount);\r\n        return true;\r\n    }\r\n\r\n    function _getValues(address from, address to, uint256 tAmount, bool takeFee) private returns (ExtraValues memory) {\r\n        ExtraValues memory values;\r\n        uint256 currentRate = _getRate();\r\n\r\n        values.rAmount = tAmount * currentRate;\r\n\r\n        if (_hasLimits(from, to)) {\r\n            bool checked;\r\n            try antiSnipe.checkUser(from, to, tAmount) returns (bool check) {\r\n                checked = check;\r\n            } catch {\r\n                revert();\r\n            }\r\n\r\n            if(!checked) {\r\n                revert();\r\n            }\r\n        }\r\n\r\n        if(takeFee) {\r\n            if (lpPairs[to]) {\r\n                currentTaxes.reflect = _sellTaxes.reflect;\r\n                currentTaxes.totalSwap = _sellTaxes.totalSwap;\r\n                currentTaxes.burn = _sellTaxes.burn;\r\n            } else if (lpPairs[from]) {\r\n                currentTaxes.reflect = _buyTaxes.reflect;\r\n                currentTaxes.totalSwap = _buyTaxes.totalSwap;\r\n                currentTaxes.burn = _buyTaxes.burn;\r\n            } else {\r\n                currentTaxes.reflect = _transferTaxes.reflect;\r\n                currentTaxes.totalSwap = _transferTaxes.totalSwap;\r\n                currentTaxes.burn = _transferTaxes.burn;\r\n            }\r\n\r\n            if(doubleDayTradingTaxEnabled && lpPairs[to]) {\r\n                if(lastBuyTime[from] + doubleDayTradingTaxTime >= block.timestamp) {\r\n                    currentTaxes.reflect *= 2;\r\n                    currentTaxes.totalSwap *= 2;\r\n                    currentTaxes.burn *= 2;\r\n                }\r\n            } else if (doubleDayTradingTaxEnabled && lpPairs[from]) {\r\n                lastBuyTime[to] = block.timestamp;\r\n            }\r\n\r\n            values.tFee = (tAmount * currentTaxes.reflect) / staticVals.masterTaxDivisor;\r\n            values.tSwap = (tAmount * currentTaxes.totalSwap) / staticVals.masterTaxDivisor;\r\n            values.tBurn = (tAmount * currentTaxes.burn) / staticVals.masterTaxDivisor;\r\n            values.tTransferAmount = tAmount - (values.tFee + values.tSwap + values.tBurn);\r\n\r\n            values.rFee = values.tFee * currentRate;\r\n        } else {\r\n            values.tFee = 0;\r\n            values.tSwap = 0;\r\n            values.tBurn = 0;\r\n            values.tTransferAmount = tAmount;\r\n\r\n            values.rFee = 0;\r\n        }\r\n        values.rTransferAmount = values.rAmount - (values.rFee + (values.tSwap * currentRate) + (values.tBurn * currentRate));\r\n        return values;\r\n    }\r\n\r\n    function _getRate() internal view returns(uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return _rTotal / _tTotal;\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return _rTotal / _tTotal;\r\n        return rSupply / tSupply;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ContractSwapEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniperAddress\",\"type\":\"address\"}],\"name\":\"SniperCaught\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTaxes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"reflect\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burn\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dev1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dev2\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalSwap\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dev1Wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dev2Wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hasLiqBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ratios\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dev1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dev2\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"total\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"reflect\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burn\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dev1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dev2\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalSwap\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferTaxes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"reflect\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burn\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dev1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dev2\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalSwap\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveContractContingency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"changeRouterContingency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doubleDayTradingTaxEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doubleDayTradingTaxTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSniperAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmountUIBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmountUISell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSizeUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBlacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setContractSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setDoubleDayTradeTaxEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setDoubleDayTradeTaxTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setGasPriceLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"name\":\"setInitializer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisorBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisorSell\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setNewRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_antiSnipe\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_antiGas\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_antiBlock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_algo\",\"type\":\"bool\"}],\"name\":\"setProtectionSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dev1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dev2\",\"type\":\"uint16\"}],\"name\":\"setRatios\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thresholdPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDivisor\",\"type\":\"uint256\"}],\"name\":\"setSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"reflect\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burn\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dev1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dev2\",\"type\":\"uint16\"}],\"name\":\"setTaxesBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"reflect\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burn\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dev1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dev2\",\"type\":\"uint16\"}],\"name\":\"setTaxesSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"reflect\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burn\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dev1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dev2\",\"type\":\"uint16\"}],\"name\":\"setTaxesTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dev1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dev2\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staticVals\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"maxReflect\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxLiquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxMarketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxBurn\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxDev1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxDev2\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"masterTaxDivisor\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepContingency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Shibezos","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"5000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5505bc8db0cc588da26e8feb8c24b704ff34b9a185260bf57f8e2bc269d22eab"}]}