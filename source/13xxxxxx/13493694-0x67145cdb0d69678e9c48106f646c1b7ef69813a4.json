{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/name/Desktop/jump/wormhole/ethereum/contracts/Structs.sol\": {\r\n      \"content\": \"// contracts/Structs.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\ninterface Structs {\\n\\tstruct Provider {\\n\\t\\tuint16 chainId;\\n\\t\\tuint16 governanceChainId;\\n\\t\\tbytes32 governanceContract;\\n\\t}\\n\\n\\tstruct GuardianSet {\\n\\t\\taddress[] keys;\\n\\t\\tuint32 expirationTime;\\n\\t}\\n\\n\\tstruct Signature {\\n\\t\\tbytes32 r;\\n\\t\\tbytes32 s;\\n\\t\\tuint8 v;\\n\\t\\tuint8 guardianIndex;\\n\\t}\\n\\n\\tstruct VM {\\n\\t\\tuint8 version;\\n\\t\\tuint32 timestamp;\\n\\t\\tuint32 nonce;\\n\\t\\tuint16 emitterChainId;\\n\\t\\tbytes32 emitterAddress;\\n\\t\\tuint64 sequence;\\n\\t\\tuint8 consistencyLevel;\\n\\t\\tbytes payload;\\n\\n\\t\\tuint32 guardianSetIndex;\\n\\t\\tSignature[] signatures;\\n\\n\\t\\tbytes32 hash;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"/home/name/Desktop/jump/wormhole/ethereum/contracts/bridge/Bridge.sol\": {\r\n      \"content\": \"// contracts/Bridge.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../libraries/external/BytesLib.sol\\\";\\n\\nimport \\\"./BridgeGetters.sol\\\";\\nimport \\\"./BridgeSetters.sol\\\";\\nimport \\\"./BridgeStructs.sol\\\";\\nimport \\\"./BridgeGovernance.sol\\\";\\n\\nimport \\\"./token/Token.sol\\\";\\nimport \\\"./token/TokenImplementation.sol\\\";\\n\\ncontract Bridge is BridgeGovernance {\\n    using BytesLib for bytes;\\n\\n    // Produce a AssetMeta message for a given token\\n    function attestToken(address tokenAddress, uint32 nonce) public payable returns (uint64 sequence){\\n        // decimals, symbol & token are not part of the core ERC20 token standard, so we need to support contracts that dont implement them\\n        (,bytes memory queriedDecimals) = tokenAddress.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\n        (,bytes memory queriedSymbol) = tokenAddress.staticcall(abi.encodeWithSignature(\\\"symbol()\\\"));\\n        (,bytes memory queriedName) = tokenAddress.staticcall(abi.encodeWithSignature(\\\"name()\\\"));\\n\\n        uint8 decimals = abi.decode(queriedDecimals, (uint8));\\n\\n        string memory symbolString = abi.decode(queriedSymbol, (string));\\n        string memory nameString = abi.decode(queriedName, (string));\\n\\n        bytes32 symbol;\\n        bytes32 name;\\n        assembly {\\n            // first 32 bytes hold string length\\n            symbol := mload(add(symbolString, 32))\\n            name := mload(add(nameString, 32))\\n        }\\n\\n        BridgeStructs.AssetMeta memory meta = BridgeStructs.AssetMeta({\\n        payloadID : 2,\\n        // Address of the token. Left-zero-padded if shorter than 32 bytes\\n        tokenAddress : bytes32(uint256(uint160(tokenAddress))),\\n        // Chain ID of the token\\n        tokenChain : chainId(),\\n        // Number of decimals of the token (big-endian uint8)\\n        decimals : decimals,\\n        // Symbol of the token (UTF-8)\\n        symbol : symbol,\\n        // Name of the token (UTF-8)\\n        name : name\\n        });\\n\\n        bytes memory encoded = encodeAssetMeta(meta);\\n\\n        sequence = wormhole().publishMessage{\\n            value : msg.value\\n        }(nonce, encoded, 15);\\n    }\\n\\n    function wrapAndTransferETH(uint16 recipientChain, bytes32 recipient, uint256 arbiterFee, uint32 nonce) public payable returns (uint64 sequence) {\\n        uint wormholeFee = wormhole().messageFee();\\n\\n        require(wormholeFee < msg.value, \\\"value is smaller than wormhole fee\\\");\\n\\n        uint amount = msg.value - wormholeFee;\\n\\n        require(arbiterFee <= amount, \\\"fee is bigger than amount minus wormhole fee\\\");\\n\\n        uint normalizedAmount = normalizeAmount(amount, 18);\\n        uint normalizedArbiterFee = normalizeAmount(arbiterFee, 18);\\n\\n        // refund dust\\n        uint dust = amount - deNormalizeAmount(normalizedAmount, 18);\\n        if (dust > 0) {\\n            payable(msg.sender).transfer(dust);\\n        }\\n\\n        // deposit into WETH\\n        WETH().deposit{\\n            value : amount - dust\\n        }();\\n\\n        // track and check outstanding token amounts\\n        bridgeOut(address(WETH()), normalizedAmount);\\n\\n        sequence = logTransfer(chainId(), bytes32(uint256(uint160(address(WETH())))), normalizedAmount, recipientChain, recipient, normalizedArbiterFee, wormholeFee, nonce);\\n    }\\n\\n    // Initiate a Transfer\\n    function transferTokens(address token, uint256 amount, uint16 recipientChain, bytes32 recipient, uint256 arbiterFee, uint32 nonce) public payable returns (uint64 sequence) {\\n        // determine token parameters\\n        uint16 tokenChain;\\n        bytes32 tokenAddress;\\n        if (isWrappedAsset(token)) {\\n            tokenChain = TokenImplementation(token).chainId();\\n            tokenAddress = TokenImplementation(token).nativeContract();\\n        } else {\\n            tokenChain = chainId();\\n            tokenAddress = bytes32(uint256(uint160(token)));\\n        }\\n\\n        // query tokens decimals\\n        (,bytes memory queriedDecimals) = token.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\n        uint8 decimals = abi.decode(queriedDecimals, (uint8));\\n\\n        // don't deposit dust that can not be bridged due to the decimal shift\\n        amount = deNormalizeAmount(normalizeAmount(amount, decimals), decimals);\\n\\n        if (tokenChain == chainId()) {\\n            // query own token balance before transfer\\n            (,bytes memory queriedBalanceBefore) = token.staticcall(abi.encodeWithSelector(IERC20.balanceOf.selector, address(this)));\\n            uint256 balanceBefore = abi.decode(queriedBalanceBefore, (uint256));\\n\\n            // transfer tokens\\n            SafeERC20.safeTransferFrom(IERC20(token), msg.sender, address(this), amount);\\n\\n            // query own token balance after transfer\\n            (,bytes memory queriedBalanceAfter) = token.staticcall(abi.encodeWithSelector(IERC20.balanceOf.selector, address(this)));\\n            uint256 balanceAfter = abi.decode(queriedBalanceAfter, (uint256));\\n\\n            // correct amount for potential transfer fees\\n            amount = balanceAfter - balanceBefore;\\n        } else {\\n            SafeERC20.safeTransferFrom(IERC20(token), msg.sender, address(this), amount);\\n\\n            TokenImplementation(token).burn(address(this), amount);\\n        }\\n\\n        // normalize amounts decimals\\n        uint256 normalizedAmount = normalizeAmount(amount, decimals);\\n        uint256 normalizedArbiterFee = normalizeAmount(arbiterFee, decimals);\\n\\n        // track and check outstanding token amounts\\n        if (tokenChain == chainId()) {\\n            bridgeOut(token, normalizedAmount);\\n        }\\n\\n        sequence = logTransfer(tokenChain, tokenAddress, normalizedAmount, recipientChain, recipient, normalizedArbiterFee, msg.value, nonce);\\n    }\\n\\n    function normalizeAmount(uint256 amount, uint8 decimals) internal pure returns(uint256){\\n        if (decimals > 8) {\\n            amount /= 10 ** (decimals - 8);\\n        }\\n        return amount;\\n    }\\n\\n    function deNormalizeAmount(uint256 amount, uint8 decimals) internal pure returns(uint256){\\n        if (decimals > 8) {\\n            amount *= 10 ** (decimals - 8);\\n        }\\n        return amount;\\n    }\\n\\n    function logTransfer(uint16 tokenChain, bytes32 tokenAddress, uint256 amount, uint16 recipientChain, bytes32 recipient, uint256 fee, uint256 callValue, uint32 nonce) internal returns (uint64 sequence) {\\n        require(fee <= amount, \\\"fee exceeds amount\\\");\\n\\n        BridgeStructs.Transfer memory transfer = BridgeStructs.Transfer({\\n            payloadID : 1,\\n            amount : amount,\\n            tokenAddress : tokenAddress,\\n            tokenChain : tokenChain,\\n            to : recipient,\\n            toChain : recipientChain,\\n            fee : fee\\n        });\\n\\n        bytes memory encoded = encodeTransfer(transfer);\\n\\n        sequence = wormhole().publishMessage{\\n            value : callValue\\n        }(nonce, encoded, 15);\\n    }\\n\\n    function updateWrapped(bytes memory encodedVm) external returns (address token) {\\n        (IWormhole.VM memory vm, bool valid, string memory reason) = wormhole().parseAndVerifyVM(encodedVm);\\n\\n        require(valid, reason);\\n        require(verifyBridgeVM(vm), \\\"invalid emitter\\\");\\n\\n        BridgeStructs.AssetMeta memory meta = parseAssetMeta(vm.payload);\\n        return _updateWrapped(meta, vm.sequence);\\n    }\\n\\n    function _updateWrapped(BridgeStructs.AssetMeta memory meta, uint64 sequence) internal returns (address token) {\\n        address wrapped = wrappedAsset(meta.tokenChain, meta.tokenAddress);\\n        require(wrapped != address(0), \\\"wrapped asset does not exists\\\");\\n\\n        // Update metadata\\n        TokenImplementation(wrapped).updateDetails(bytes32ToString(meta.name), bytes32ToString(meta.symbol), sequence);\\n\\n        return wrapped;\\n    }\\n\\n    function createWrapped(bytes memory encodedVm) external returns (address token) {\\n        (IWormhole.VM memory vm, bool valid, string memory reason) = wormhole().parseAndVerifyVM(encodedVm);\\n\\n        require(valid, reason);\\n        require(verifyBridgeVM(vm), \\\"invalid emitter\\\");\\n\\n        BridgeStructs.AssetMeta memory meta = parseAssetMeta(vm.payload);\\n        return _createWrapped(meta, vm.sequence);\\n    }\\n\\n    // Creates a wrapped asset using AssetMeta\\n    function _createWrapped(BridgeStructs.AssetMeta memory meta, uint64 sequence) internal returns (address token) {\\n        require(meta.tokenChain != chainId(), \\\"can only wrap tokens from foreign chains\\\");\\n        require(wrappedAsset(meta.tokenChain, meta.tokenAddress) == address(0), \\\"wrapped asset already exists\\\");\\n\\n        // initialize the TokenImplementation\\n        bytes memory initialisationArgs = abi.encodeWithSelector(\\n            TokenImplementation.initialize.selector,\\n            bytes32ToString(meta.name),\\n            bytes32ToString(meta.symbol),\\n            meta.decimals,\\n            sequence,\\n\\n            address(this),\\n\\n            meta.tokenChain,\\n            meta.tokenAddress\\n        );\\n\\n        // initialize the BeaconProxy\\n        bytes memory constructorArgs = abi.encode(address(this), initialisationArgs);\\n\\n        // deployment code\\n        bytes memory bytecode = abi.encodePacked(type(BridgeToken).creationCode, constructorArgs);\\n\\n        bytes32 salt = keccak256(abi.encodePacked(meta.tokenChain, meta.tokenAddress));\\n\\n        assembly {\\n            token := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\\n\\n            if iszero(extcodesize(token)) {\\n                revert(0, 0)\\n            }\\n        }\\n\\n        setWrappedAsset(meta.tokenChain, meta.tokenAddress, token);\\n    }\\n\\n    function completeTransfer(bytes memory encodedVm) public {\\n        _completeTransfer(encodedVm, false);\\n    }\\n\\n    function completeTransferAndUnwrapETH(bytes memory encodedVm) public {\\n        _completeTransfer(encodedVm, true);\\n    }\\n\\n    // Execute a Transfer message\\n    function _completeTransfer(bytes memory encodedVm, bool unwrapWETH) internal {\\n        (IWormhole.VM memory vm, bool valid, string memory reason) = wormhole().parseAndVerifyVM(encodedVm);\\n\\n        require(valid, reason);\\n        require(verifyBridgeVM(vm), \\\"invalid emitter\\\");\\n\\n        BridgeStructs.Transfer memory transfer = parseTransfer(vm.payload);\\n\\n        require(!isTransferCompleted(vm.hash), \\\"transfer already completed\\\");\\n        setTransferCompleted(vm.hash);\\n\\n        require(transfer.toChain == chainId(), \\\"invalid target chain\\\");\\n\\n        IERC20 transferToken;\\n        if (transfer.tokenChain == chainId()) {\\n            transferToken = IERC20(address(uint160(uint256(transfer.tokenAddress))));\\n\\n            // track outstanding token amounts\\n            bridgedIn(address(transferToken), transfer.amount);\\n        } else {\\n            address wrapped = wrappedAsset(transfer.tokenChain, transfer.tokenAddress);\\n            require(wrapped != address(0), \\\"no wrapper for this token created yet\\\");\\n\\n            transferToken = IERC20(wrapped);\\n        }\\n\\n        require(unwrapWETH == false || address(transferToken) == address(WETH()), \\\"invalid token, can only unwrap WETH\\\");\\n\\n        // query decimals\\n        (,bytes memory queriedDecimals) = address(transferToken).staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\n        uint8 decimals = abi.decode(queriedDecimals, (uint8));\\n\\n        // adjust decimals\\n        uint256 nativeAmount = deNormalizeAmount(transfer.amount, decimals);\\n        uint256 nativeFee = deNormalizeAmount(transfer.fee, decimals);\\n\\n        // transfer fee to arbiter\\n        if (nativeFee > 0) {\\n            require(nativeFee <= nativeAmount, \\\"fee higher than transferred amount\\\");\\n\\n            if (unwrapWETH) {\\n                WETH().withdraw(nativeFee);\\n\\n                payable(msg.sender).transfer(nativeFee);\\n            } else {\\n                if (transfer.tokenChain != chainId()) {\\n                    // mint wrapped asset\\n                    TokenImplementation(address(transferToken)).mint(msg.sender, nativeFee);\\n                } else {\\n                    SafeERC20.safeTransfer(transferToken, msg.sender, nativeFee);\\n                }\\n            }\\n        }\\n\\n        // transfer bridged amount to recipient\\n        uint transferAmount = nativeAmount - nativeFee;\\n        address transferRecipient = address(uint160(uint256(transfer.to)));\\n\\n        if (unwrapWETH) {\\n            WETH().withdraw(transferAmount);\\n\\n            payable(transferRecipient).transfer(transferAmount);\\n        } else {\\n            if (transfer.tokenChain != chainId()) {\\n                // mint wrapped asset\\n                TokenImplementation(address(transferToken)).mint(transferRecipient, transferAmount);\\n            } else {\\n                SafeERC20.safeTransfer(transferToken, transferRecipient, transferAmount);\\n            }\\n        }\\n    }\\n\\n    function bridgeOut(address token, uint normalizedAmount) internal {\\n        uint outstanding = outstandingBridged(token);\\n        require(outstanding + normalizedAmount <= type(uint64).max, \\\"transfer exceeds max outstanding bridged token amount\\\");\\n        setOutstandingBridged(token, outstanding + normalizedAmount);\\n    }\\n\\n    function bridgedIn(address token, uint normalizedAmount) internal {\\n        setOutstandingBridged(token, outstandingBridged(token) - normalizedAmount);\\n    }\\n\\n    function verifyBridgeVM(IWormhole.VM memory vm) internal view returns (bool){\\n        if (bridgeContracts(vm.emitterChainId) == vm.emitterAddress) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function encodeAssetMeta(BridgeStructs.AssetMeta memory meta) public pure returns (bytes memory encoded) {\\n        encoded = abi.encodePacked(\\n            meta.payloadID,\\n            meta.tokenAddress,\\n            meta.tokenChain,\\n            meta.decimals,\\n            meta.symbol,\\n            meta.name\\n        );\\n    }\\n\\n    function encodeTransfer(BridgeStructs.Transfer memory transfer) public pure returns (bytes memory encoded) {\\n        encoded = abi.encodePacked(\\n            transfer.payloadID,\\n            transfer.amount,\\n            transfer.tokenAddress,\\n            transfer.tokenChain,\\n            transfer.to,\\n            transfer.toChain,\\n            transfer.fee\\n        );\\n    }\\n\\n    function parseAssetMeta(bytes memory encoded) public pure returns (BridgeStructs.AssetMeta memory meta) {\\n        uint index = 0;\\n\\n        meta.payloadID = encoded.toUint8(index);\\n        index += 1;\\n\\n        require(meta.payloadID == 2, \\\"invalid AssetMeta\\\");\\n\\n        meta.tokenAddress = encoded.toBytes32(index);\\n        index += 32;\\n\\n        meta.tokenChain = encoded.toUint16(index);\\n        index += 2;\\n\\n        meta.decimals = encoded.toUint8(index);\\n        index += 1;\\n\\n        meta.symbol = encoded.toBytes32(index);\\n        index += 32;\\n\\n        meta.name = encoded.toBytes32(index);\\n        index += 32;\\n\\n        require(encoded.length == index, \\\"invalid AssetMeta\\\");\\n    }\\n\\n    function parseTransfer(bytes memory encoded) public pure returns (BridgeStructs.Transfer memory transfer) {\\n        uint index = 0;\\n\\n        transfer.payloadID = encoded.toUint8(index);\\n        index += 1;\\n\\n        require(transfer.payloadID == 1, \\\"invalid Transfer\\\");\\n\\n        transfer.amount = encoded.toUint256(index);\\n        index += 32;\\n\\n        transfer.tokenAddress = encoded.toBytes32(index);\\n        index += 32;\\n\\n        transfer.tokenChain = encoded.toUint16(index);\\n        index += 2;\\n\\n        transfer.to = encoded.toBytes32(index);\\n        index += 32;\\n\\n        transfer.toChain = encoded.toUint16(index);\\n        index += 2;\\n\\n        transfer.fee = encoded.toUint256(index);\\n        index += 32;\\n\\n        require(encoded.length == index, \\\"invalid Transfer\\\");\\n    }\\n\\n    function bytes32ToString(bytes32 input) internal pure returns (string memory) {\\n        uint256 i;\\n        while (i < 32 && input[i] != 0) {\\n            i++;\\n        }\\n        bytes memory array = new bytes(i);\\n        for (uint c = 0; c < i; c++) {\\n            array[c] = input[c];\\n        }\\n        return string(array);\\n    }\\n\\n    // we need to accept ETH sends to unwrap WETH\\n    receive() external payable {}\\n}\"\r\n    },\r\n    \"/home/name/Desktop/jump/wormhole/ethereum/contracts/bridge/BridgeGetters.sol\": {\r\n      \"content\": \"// contracts/Getters.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/IWormhole.sol\\\";\\n\\nimport \\\"./BridgeState.sol\\\";\\n\\ncontract BridgeGetters is BridgeState {\\n    function governanceActionIsConsumed(bytes32 hash) public view returns (bool) {\\n        return _state.consumedGovernanceActions[hash];\\n    }\\n\\n    function isInitialized(address impl) public view returns (bool) {\\n        return _state.initializedImplementations[impl];\\n    }\\n\\n    function isTransferCompleted(bytes32 hash) public view returns (bool) {\\n        return _state.completedTransfers[hash];\\n    }\\n\\n    function wormhole() public view returns (IWormhole) {\\n        return IWormhole(_state.wormhole);\\n    }\\n\\n    function chainId() public view returns (uint16){\\n        return _state.provider.chainId;\\n    }\\n\\n    function governanceChainId() public view returns (uint16){\\n        return _state.provider.governanceChainId;\\n    }\\n\\n    function governanceContract() public view returns (bytes32){\\n        return _state.provider.governanceContract;\\n    }\\n\\n    function wrappedAsset(uint16 tokenChainId, bytes32 tokenAddress) public view returns (address){\\n        return _state.wrappedAssets[tokenChainId][tokenAddress];\\n    }\\n\\n    function bridgeContracts(uint16 chainId_) public view returns (bytes32){\\n        return _state.bridgeImplementations[chainId_];\\n    }\\n\\n    function tokenImplementation() public view returns (address){\\n        return _state.tokenImplementation;\\n    }\\n\\n    function WETH() public view returns (IWETH){\\n        return IWETH(_state.provider.WETH);\\n    }\\n\\n    function outstandingBridged(address token) public view returns (uint256){\\n        return _state.outstandingBridged[token];\\n    }\\n\\n    function isWrappedAsset(address token) public view returns (bool){\\n        return _state.isWrappedAsset[token];\\n    }\\n}\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint amount) external;\\n}\"\r\n    },\r\n    \"/home/name/Desktop/jump/wormhole/ethereum/contracts/bridge/BridgeGovernance.sol\": {\r\n      \"content\": \"// contracts/Bridge.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\n\\nimport \\\"../libraries/external/BytesLib.sol\\\";\\n\\nimport \\\"./BridgeGetters.sol\\\";\\nimport \\\"./BridgeSetters.sol\\\";\\nimport \\\"./BridgeStructs.sol\\\";\\n\\nimport \\\"./token/Token.sol\\\";\\nimport \\\"./token/TokenImplementation.sol\\\";\\n\\nimport \\\"../interfaces/IWormhole.sol\\\";\\n\\ncontract BridgeGovernance is BridgeGetters, BridgeSetters, ERC1967Upgrade {\\n    using BytesLib for bytes;\\n\\n    // \\\"TokenBridge\\\" (left padded)\\n    bytes32 constant module = 0x000000000000000000000000000000000000000000546f6b656e427269646765;\\n\\n    // Execute a RegisterChain governance message\\n    function registerChain(bytes memory encodedVM) public {\\n        (IWormhole.VM memory vm, bool valid, string memory reason) = verifyGovernanceVM(encodedVM);\\n        require(valid, reason);\\n\\n        setGovernanceActionConsumed(vm.hash);\\n\\n        BridgeStructs.RegisterChain memory chain = parseRegisterChain(vm.payload);\\n\\n        require(chain.chainId == chainId() || chain.chainId == 0, \\\"invalid chain id\\\");\\n        require(bridgeContracts(chain.emitterChainID) == bytes32(0), \\\"chain already registered\\\");\\n\\n        setBridgeImplementation(chain.emitterChainID, chain.emitterAddress);\\n    }\\n\\n    // Execute a UpgradeContract governance message\\n    function upgrade(bytes memory encodedVM) public {\\n        (IWormhole.VM memory vm, bool valid, string memory reason) = verifyGovernanceVM(encodedVM);\\n        require(valid, reason);\\n\\n        setGovernanceActionConsumed(vm.hash);\\n\\n        BridgeStructs.UpgradeContract memory implementation = parseUpgrade(vm.payload);\\n\\n        require(implementation.chainId == chainId(), \\\"wrong chain id\\\");\\n\\n        upgradeImplementation(address(uint160(uint256(implementation.newContract))));\\n    }\\n\\n    function verifyGovernanceVM(bytes memory encodedVM) internal view returns (IWormhole.VM memory parsedVM, bool isValid, string memory invalidReason){\\n        (IWormhole.VM memory vm, bool valid, string memory reason) = wormhole().parseAndVerifyVM(encodedVM);\\n\\n        if (!valid) {\\n            return (vm, valid, reason);\\n        }\\n\\n        if (vm.emitterChainId != governanceChainId()) {\\n            return (vm, false, \\\"wrong governance chain\\\");\\n        }\\n        if (vm.emitterAddress != governanceContract()) {\\n            return (vm, false, \\\"wrong governance contract\\\");\\n        }\\n\\n        if (governanceActionIsConsumed(vm.hash)) {\\n            return (vm, false, \\\"governance action already consumed\\\");\\n        }\\n\\n        return (vm, true, \\\"\\\");\\n    }\\n\\n    event ContractUpgraded(address indexed oldContract, address indexed newContract);\\n\\n    function upgradeImplementation(address newImplementation) internal {\\n        address currentImplementation = _getImplementation();\\n\\n        _upgradeTo(newImplementation);\\n\\n        // Call initialize function of the new implementation\\n        (bool success, bytes memory reason) = newImplementation.delegatecall(abi.encodeWithSignature(\\\"initialize()\\\"));\\n\\n        require(success, string(reason));\\n\\n        emit ContractUpgraded(currentImplementation, newImplementation);\\n    }\\n\\n    function parseRegisterChain(bytes memory encoded) public pure returns (BridgeStructs.RegisterChain memory chain) {\\n        uint index = 0;\\n\\n        // governance header\\n\\n        chain.module = encoded.toBytes32(index);\\n        index += 32;\\n        require(chain.module == module, \\\"invalid RegisterChain: wrong module\\\");\\n\\n        chain.action = encoded.toUint8(index);\\n        index += 1;\\n        require(chain.action == 1, \\\"invalid RegisterChain: wrong action\\\");\\n\\n        chain.chainId = encoded.toUint16(index);\\n        index += 2;\\n\\n        // payload\\n\\n        chain.emitterChainID = encoded.toUint16(index);\\n        index += 2;\\n\\n        chain.emitterAddress = encoded.toBytes32(index);\\n        index += 32;\\n\\n        require(encoded.length == index, \\\"invalid RegisterChain: wrong length\\\");\\n    }\\n\\n    function parseUpgrade(bytes memory encoded) public pure returns (BridgeStructs.UpgradeContract memory chain) {\\n        uint index = 0;\\n\\n        // governance header\\n\\n        chain.module = encoded.toBytes32(index);\\n        index += 32;\\n        require(chain.module == module, \\\"invalid UpgradeContract: wrong module\\\");\\n\\n        chain.action = encoded.toUint8(index);\\n        index += 1;\\n        require(chain.action == 2, \\\"invalid UpgradeContract: wrong action\\\");\\n\\n        chain.chainId = encoded.toUint16(index);\\n        index += 2;\\n\\n        // payload\\n\\n        chain.newContract = encoded.toBytes32(index);\\n        index += 32;\\n\\n        require(encoded.length == index, \\\"invalid UpgradeContract: wrong length\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/name/Desktop/jump/wormhole/ethereum/contracts/bridge/BridgeImplementation.sol\": {\r\n      \"content\": \"// contracts/Implementation.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\n\\nimport \\\"./Bridge.sol\\\";\\n\\n\\ncontract BridgeImplementation is Bridge {\\n    // Beacon getter for the token contracts\\n    function implementation() public view returns (address) {\\n        return tokenImplementation();\\n    }\\n\\n    function initialize() initializer public virtual {\\n        // this function needs to be exposed for an upgrade to pass\\n    }\\n\\n    modifier initializer() {\\n        address impl = ERC1967Upgrade._getImplementation();\\n\\n        require(\\n            !isInitialized(impl),\\n            \\\"already initialized\\\"\\n        );\\n\\n        setInitialized(impl);\\n\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/name/Desktop/jump/wormhole/ethereum/contracts/bridge/BridgeSetters.sol\": {\r\n      \"content\": \"// contracts/Setters.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BridgeState.sol\\\";\\n\\ncontract BridgeSetters is BridgeState {\\n    function setInitialized(address implementatiom) internal {\\n        _state.initializedImplementations[implementatiom] = true;\\n    }\\n\\n    function setGovernanceActionConsumed(bytes32 hash) internal {\\n        _state.consumedGovernanceActions[hash] = true;\\n    }\\n\\n    function setTransferCompleted(bytes32 hash) internal {\\n        _state.completedTransfers[hash] = true;\\n    }\\n\\n    function setChainId(uint16 chainId) internal {\\n        _state.provider.chainId = chainId;\\n    }\\n\\n    function setGovernanceChainId(uint16 chainId) internal {\\n        _state.provider.governanceChainId = chainId;\\n    }\\n\\n    function setGovernanceContract(bytes32 governanceContract) internal {\\n        _state.provider.governanceContract = governanceContract;\\n    }\\n\\n    function setBridgeImplementation(uint16 chainId, bytes32 bridgeContract) internal {\\n        _state.bridgeImplementations[chainId] = bridgeContract;\\n    }\\n\\n    function setTokenImplementation(address impl) internal {\\n        _state.tokenImplementation = impl;\\n    }\\n\\n    function setWETH(address weth) internal {\\n        _state.provider.WETH = weth;\\n    }\\n\\n    function setWormhole(address wh) internal {\\n        _state.wormhole = payable(wh);\\n    }\\n\\n    function setWrappedAsset(uint16 tokenChainId, bytes32 tokenAddress, address wrapper) internal {\\n        _state.wrappedAssets[tokenChainId][tokenAddress] = wrapper;\\n        _state.isWrappedAsset[wrapper] = true;\\n    }\\n\\n    function setOutstandingBridged(address token, uint256 outstanding) internal {\\n        _state.outstandingBridged[token] = outstanding;\\n    }\\n}\"\r\n    },\r\n    \"/home/name/Desktop/jump/wormhole/ethereum/contracts/bridge/BridgeState.sol\": {\r\n      \"content\": \"// contracts/State.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BridgeStructs.sol\\\";\\n\\ncontract BridgeStorage {\\n    struct Provider {\\n        uint16 chainId;\\n        uint16 governanceChainId;\\n        bytes32 governanceContract;\\n        address WETH;\\n    }\\n\\n    struct Asset {\\n        uint16 chainId;\\n        bytes32 assetAddress;\\n    }\\n\\n    struct State {\\n        address payable wormhole;\\n        address tokenImplementation;\\n\\n        Provider provider;\\n\\n        // Mapping of consumed governance actions\\n        mapping(bytes32 => bool) consumedGovernanceActions;\\n\\n        // Mapping of consumed token transfers\\n        mapping(bytes32 => bool) completedTransfers;\\n\\n        // Mapping of initialized implementations\\n        mapping(address => bool) initializedImplementations;\\n\\n        // Mapping of wrapped assets (chainID => nativeAddress => wrappedAddress)\\n        mapping(uint16 => mapping(bytes32 => address)) wrappedAssets;\\n\\n        // Mapping to safely identify wrapped assets\\n        mapping(address => bool) isWrappedAsset;\\n\\n        // Mapping of native assets to amount outstanding on other chains\\n        mapping(address => uint256) outstandingBridged;\\n\\n        // Mapping of bridge contracts on other chains\\n        mapping(uint16 => bytes32) bridgeImplementations;\\n    }\\n}\\n\\ncontract BridgeState {\\n    BridgeStorage.State _state;\\n}\"\r\n    },\r\n    \"/home/name/Desktop/jump/wormhole/ethereum/contracts/bridge/BridgeStructs.sol\": {\r\n      \"content\": \"// contracts/Structs.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\ncontract BridgeStructs {\\n    struct Transfer {\\n        // PayloadID uint8 = 1\\n        uint8 payloadID;\\n        // Amount being transferred (big-endian uint256)\\n        uint256 amount;\\n        // Address of the token. Left-zero-padded if shorter than 32 bytes\\n        bytes32 tokenAddress;\\n        // Chain ID of the token\\n        uint16 tokenChain;\\n        // Address of the recipient. Left-zero-padded if shorter than 32 bytes\\n        bytes32 to;\\n        // Chain ID of the recipient\\n        uint16 toChain;\\n        // Amount of tokens (big-endian uint256) that the user is willing to pay as relayer fee. Must be <= Amount.\\n        uint256 fee;\\n    }\\n\\n    struct AssetMeta {\\n        // PayloadID uint8 = 2\\n        uint8 payloadID;\\n        // Address of the token. Left-zero-padded if shorter than 32 bytes\\n        bytes32 tokenAddress;\\n        // Chain ID of the token\\n        uint16 tokenChain;\\n        // Number of decimals of the token (big-endian uint256)\\n        uint8 decimals;\\n        // Symbol of the token (UTF-8)\\n        bytes32 symbol;\\n        // Name of the token (UTF-8)\\n        bytes32 name;\\n    }\\n\\n    struct RegisterChain {\\n        // Governance Header\\n        // module: \\\"TokenBridge\\\" left-padded\\n        bytes32 module;\\n        // governance action: 1\\n        uint8 action;\\n        // governance paket chain id: this or 0\\n        uint16 chainId;\\n\\n        // Chain ID\\n        uint16 emitterChainID;\\n        // Emitter address. Left-zero-padded if shorter than 32 bytes\\n        bytes32 emitterAddress;\\n    }\\n\\n    struct UpgradeContract {\\n        // Governance Header\\n        // module: \\\"TokenBridge\\\" left-padded\\n        bytes32 module;\\n        // governance action: 2\\n        uint8 action;\\n        // governance paket chain id\\n        uint16 chainId;\\n\\n        // Address of the new contract\\n        bytes32 newContract;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/name/Desktop/jump/wormhole/ethereum/contracts/bridge/token/Token.sol\": {\r\n      \"content\": \"// contracts/Structs.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\n\\ncontract BridgeToken is BeaconProxy {\\n    constructor(address beacon, bytes memory data) BeaconProxy(beacon, data) {\\n\\n    }\\n}\"\r\n    },\r\n    \"/home/name/Desktop/jump/wormhole/ethereum/contracts/bridge/token/TokenImplementation.sol\": {\r\n      \"content\": \"// contracts/TokenImplementation.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TokenState.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\n\\n// Based on the OpenZepplin ERC20 implementation, licensed under MIT\\ncontract TokenImplementation is TokenState, Context {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_,\\n        uint64 sequence_,\\n\\n        address owner_,\\n\\n        uint16 chainId_,\\n        bytes32 nativeContract_\\n    ) initializer public {\\n        _state.name = name_;\\n        _state.symbol = symbol_;\\n        _state.decimals = decimals_;\\n        _state.metaLastUpdatedSequence = sequence_;\\n\\n        _state.owner = owner_;\\n\\n        _state.chainId = chainId_;\\n        _state.nativeContract = nativeContract_;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return string(abi.encodePacked(_state.name, \\\" (Wormhole)\\\"));\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _state.symbol;\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _state.owner;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _state.decimals;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _state.totalSupply;\\n    }\\n\\n    function chainId() public view returns (uint16) {\\n        return _state.chainId;\\n    }\\n\\n    function nativeContract() public view returns (bytes32) {\\n        return _state.nativeContract;\\n    }\\n\\n    function balanceOf(address account_) public view returns (uint256) {\\n        return _state.balances[account_];\\n    }\\n\\n    function transfer(address recipient_, uint256 amount_) public returns (bool) {\\n        _transfer(_msgSender(), recipient_, amount_);\\n        return true;\\n    }\\n\\n    function allowance(address owner_, address spender_) public view returns (uint256) {\\n        return _state.allowances[owner_][spender_];\\n    }\\n\\n    function approve(address spender_, uint256 amount_) public returns (bool) {\\n        _approve(_msgSender(), spender_, amount_);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender_, address recipient_, uint256 amount_) public returns (bool) {\\n        _transfer(sender_, recipient_, amount_);\\n\\n        uint256 currentAllowance = _state.allowances[sender_][_msgSender()];\\n        require(currentAllowance >= amount_, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender_, _msgSender(), currentAllowance - amount_);\\n\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender_, uint256 addedValue_) public returns (bool) {\\n        _approve(_msgSender(), spender_, _state.allowances[_msgSender()][spender_] + addedValue_);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender_, uint256 subtractedValue_) public returns (bool) {\\n        uint256 currentAllowance = _state.allowances[_msgSender()][spender_];\\n        require(currentAllowance >= subtractedValue_, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender_, currentAllowance - subtractedValue_);\\n\\n        return true;\\n    }\\n\\n    function _transfer(address sender_, address recipient_, uint256 amount_) internal {\\n        require(sender_ != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient_ != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        uint256 senderBalance = _state.balances[sender_];\\n        require(senderBalance >= amount_, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _state.balances[sender_] = senderBalance - amount_;\\n        _state.balances[recipient_] += amount_;\\n\\n        emit Transfer(sender_, recipient_, amount_);\\n    }\\n\\n    function mint(address account_, uint256 amount_) public onlyOwner {\\n        _mint(account_, amount_);\\n    }\\n\\n    function _mint(address account_, uint256 amount_) internal {\\n        require(account_ != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _state.totalSupply += amount_;\\n        _state.balances[account_] += amount_;\\n        emit Transfer(address(0), account_, amount_);\\n    }\\n\\n    function burn(address account_, uint256 amount_) public onlyOwner {\\n        _burn(account_, amount_);\\n    }\\n\\n    function _burn(address account_, uint256 amount_) internal {\\n        require(account_ != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        uint256 accountBalance = _state.balances[account_];\\n        require(accountBalance >= amount_, \\\"ERC20: burn amount exceeds balance\\\");\\n        _state.balances[account_] = accountBalance - amount_;\\n        _state.totalSupply -= amount_;\\n\\n        emit Transfer(account_, address(0), amount_);\\n    }\\n\\n    function _approve(address owner_, address spender_, uint256 amount_) internal virtual {\\n        require(owner_ != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender_ != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _state.allowances[owner_][spender_] = amount_;\\n        emit Approval(owner_, spender_, amount_);\\n    }\\n\\n    function updateDetails(string memory name_, string memory symbol_, uint64 sequence_) public onlyOwner {\\n        require(_state.metaLastUpdatedSequence < sequence_, \\\"current metadata is up to date\\\");\\n\\n        _state.name = name_;\\n        _state.symbol = symbol_;\\n        _state.metaLastUpdatedSequence = sequence_;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier initializer() {\\n        require(\\n            !_state.initialized,\\n            \\\"Already initialized\\\"\\n        );\\n\\n        _state.initialized = true;\\n\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/name/Desktop/jump/wormhole/ethereum/contracts/bridge/token/TokenState.sol\": {\r\n      \"content\": \"// contracts/State.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\ncontract TokenStorage {\\n    struct State {\\n        string name;\\n        string symbol;\\n\\n        uint64 metaLastUpdatedSequence;\\n\\n        uint256 totalSupply;\\n        uint8 decimals;\\n\\n        mapping(address => uint256) balances;\\n\\n        mapping(address => mapping(address => uint256)) allowances;\\n\\n        address owner;\\n\\n        bool initialized;\\n\\n        uint16 chainId;\\n        bytes32 nativeContract;\\n    }\\n}\\n\\ncontract TokenState {\\n    TokenStorage.State _state;\\n}\"\r\n    },\r\n    \"/home/name/Desktop/jump/wormhole/ethereum/contracts/interfaces/IWormhole.sol\": {\r\n      \"content\": \"// contracts/Messages.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Structs.sol\\\";\\n\\ninterface IWormhole is Structs {\\n    event LogMessagePublished(address indexed sender, uint64 sequence, uint32 nonce, bytes payload, uint8 consistencyLevel);\\n\\n    function publishMessage(\\n        uint32 nonce,\\n        bytes memory payload,\\n        uint8 consistencyLevel\\n    ) external payable returns (uint64 sequence);\\n\\n    function parseAndVerifyVM(bytes calldata encodedVM) external view returns (Structs.VM memory vm, bool valid, string memory reason);\\n\\n    function verifyVM(Structs.VM memory vm) external view returns (bool valid, string memory reason);\\n\\n    function verifySignatures(bytes32 hash, Structs.Signature[] memory signatures, Structs.GuardianSet memory guardianSet) external pure returns (bool valid, string memory reason) ;\\n\\n    function parseVM(bytes memory encodedVM) external pure returns (Structs.VM memory vm);\\n\\n    function getGuardianSet(uint32 index) external view returns (Structs.GuardianSet memory) ;\\n\\n    function getCurrentGuardianSetIndex() external view returns (uint32) ;\\n\\n    function getGuardianSetExpiry() external view returns (uint32) ;\\n\\n    function governanceActionIsConsumed(bytes32 hash) external view returns (bool) ;\\n\\n    function isInitialized(address impl) external view returns (bool) ;\\n\\n    function chainId() external view returns (uint16) ;\\n\\n    function governanceChainId() external view returns (uint16);\\n\\n    function governanceContract() external view returns (bytes32);\\n\\n    function messageFee() external view returns (uint256) ;\\n}\\n\"\r\n    },\r\n    \"/home/name/Desktop/jump/wormhole/ethereum/contracts/libraries/external/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"attestToken\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"}],\"name\":\"bridgeContracts\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedVm\",\"type\":\"bytes\"}],\"name\":\"completeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedVm\",\"type\":\"bytes\"}],\"name\":\"completeTransferAndUnwrapETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedVm\",\"type\":\"bytes\"}],\"name\":\"createWrapped\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"payloadID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"tokenAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"tokenChain\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct BridgeStructs.AssetMeta\",\"name\":\"meta\",\"type\":\"tuple\"}],\"name\":\"encodeAssetMeta\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"encoded\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"payloadID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"tokenAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"tokenChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"toChain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct BridgeStructs.Transfer\",\"name\":\"transfer\",\"type\":\"tuple\"}],\"name\":\"encodeTransfer\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"encoded\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"governanceActionIsConsumed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceContract\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isTransferCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isWrappedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"outstandingBridged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encoded\",\"type\":\"bytes\"}],\"name\":\"parseAssetMeta\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"payloadID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"tokenAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"tokenChain\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct BridgeStructs.AssetMeta\",\"name\":\"meta\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encoded\",\"type\":\"bytes\"}],\"name\":\"parseRegisterChain\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"module\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"emitterChainID\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"emitterAddress\",\"type\":\"bytes32\"}],\"internalType\":\"struct BridgeStructs.RegisterChain\",\"name\":\"chain\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encoded\",\"type\":\"bytes\"}],\"name\":\"parseTransfer\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"payloadID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"tokenAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"tokenChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"toChain\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct BridgeStructs.Transfer\",\"name\":\"transfer\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encoded\",\"type\":\"bytes\"}],\"name\":\"parseUpgrade\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"module\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"newContract\",\"type\":\"bytes32\"}],\"internalType\":\"struct BridgeStructs.UpgradeContract\",\"name\":\"chain\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedVM\",\"type\":\"bytes\"}],\"name\":\"registerChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"recipientChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"arbiterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"transferTokens\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedVm\",\"type\":\"bytes\"}],\"name\":\"updateWrapped\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedVM\",\"type\":\"bytes\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormhole\",\"outputs\":[{\"internalType\":\"contract IWormhole\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"recipientChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"arbiterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"}],\"name\":\"wrapAndTransferETH\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"tokenAddress\",\"type\":\"bytes32\"}],\"name\":\"wrappedAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BridgeImplementation","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}