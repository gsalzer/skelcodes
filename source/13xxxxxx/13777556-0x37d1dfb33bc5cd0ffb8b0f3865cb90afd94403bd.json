{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking/FarmController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\nimport \\\"./LPFarm.sol\\\";\\nimport \\\"../general/Ownable.sol\\\";\\nimport \\\"../interfaces/IRewardDistributionRecipientTokenOnly.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../general/SafeERC20.sol\\\";\\n\\ncontract FarmController is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    \\n    // constant does not occupy the storage slot\\n    address public constant stakerReward = 0x1337DEF1B1Ae35314b40e5A4b70e216A499b0E37;\\n\\n    address public constant borrowerReward = 0x1337DEF172152f2fF82d9545Fd6f79fE38dF15ce;\\n\\n    uint256 public constant INITIAL_DISTRIBUTED = 1638687600;\\n\\n    IRewardDistributionRecipientTokenOnly[] public farms;\\n    mapping(address => address) public lpFarm;\\n    mapping(address => uint256) public rate;\\n    uint256 public weightSum;\\n    IERC20 public rewardToken;\\n\\n    mapping(address => bool) public blackListed;\\n\\n    // rewards\\n    uint256 public lastRewardDistributed;\\n\\n    uint256 public lpRewards;\\n\\n    uint256 public stakerRewards;\\n\\n    uint256 public borrowerRewards;\\n\\n    function initialize(address token) external {\\n        Ownable.initializeOwnable();\\n        rewardToken = IERC20(token);\\n    }\\n\\n    function addFarm(address _lptoken) external onlyOwner returns(address farm){\\n        require(lpFarm[_lptoken] == address(0), \\\"farm exist\\\");\\n        bytes memory bytecode = type(LPFarm).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(_lptoken));\\n        assembly {\\n            farm := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        LPFarm(farm).initialize(_lptoken, address(this));\\n        farms.push(IRewardDistributionRecipientTokenOnly(farm));\\n        rewardToken.approve(farm, uint256(-1));\\n        lpFarm[_lptoken] = farm;\\n        // it will just set the rates to zero before it get's it's own rate\\n    }\\n\\n    function setRates(uint256[] memory _rates) external onlyOwner {\\n        require(_rates.length == farms.length);\\n        uint256 sum = 0;\\n        for(uint256 i = 0; i<_rates.length; i++){\\n            sum += _rates[i];\\n            rate[address(farms[i])] = _rates[i];\\n        }\\n        weightSum = sum;\\n    }\\n\\n    function setRateOf(address _farm, uint256 _rate) external onlyOwner {\\n        weightSum -= rate[_farm];\\n        weightSum += _rate;\\n        rate[_farm] = _rate;\\n    }\\n\\n    function setRewards(uint256 _lpRewards, uint256 _stakerRewards, uint256 _borrowerRewards) external onlyOwner {\\n        // deposit armor before this\\n        lpRewards = _lpRewards;\\n        stakerRewards = _stakerRewards;\\n        borrowerRewards = _borrowerRewards;\\n    }\\n\\n    function withdrawToken(address _token) external onlyOwner {\\n        //withdraw can disable the rewards\\n        IERC20(_token).transfer(msg.sender, IERC20(_token).balanceOf(address(this)));\\n    }\\n\\n    function initializeRewardDistribution() external onlyOwner {\\n        require(lastRewardDistributed == 0, \\\"initialized\\\");\\n        lastRewardDistributed = INITIAL_DISTRIBUTED;\\n    }\\n\\n    function flushRewards() external {\\n        require(block.timestamp >= lastRewardDistributed + 7 days, \\\"wait\\\");\\n        IRewardDistributionRecipientTokenOnly[] memory lpFarms = farms;\\n        uint256 cacheLpReward = lpRewards;\\n        uint256 cacheSum = weightSum;\\n        for(uint256 i = 0; i<lpFarms.length; i++){\\n            IRewardDistributionRecipientTokenOnly farm = lpFarms[i];\\n            uint256 amount = cacheLpReward.mul(rate[address(farm)]).div(cacheSum);\\n            if(amount > 0) {\\n                rewardToken.approve(address(farm), amount);\\n                farm.notifyRewardAmount(amount);\\n            }\\n        }\\n\\n        uint256 cacheStakerReward = stakerRewards;\\n        if(cacheStakerReward > 0) {\\n            IRewardDistributionRecipientTokenOnly stakerFarm = IRewardDistributionRecipientTokenOnly(stakerReward);\\n            rewardToken.approve(address(stakerFarm), cacheStakerReward);\\n            stakerFarm.notifyRewardAmount(cacheStakerReward);\\n        }\\n        \\n        uint256 cacheBorrowerReward = borrowerRewards;\\n        if(cacheBorrowerReward > 0) {\\n            IRewardDistributionRecipientTokenOnly borrowerFarm = IRewardDistributionRecipientTokenOnly(borrowerReward);\\n            rewardToken.approve(address(borrowerFarm), cacheBorrowerReward);\\n            borrowerFarm.notifyRewardAmount(cacheBorrowerReward);\\n        }\\n\\n        // this will make sure lastRewardDistributed to set in order\\n        while(block.timestamp - lastRewardDistributed > 7 days) {\\n            lastRewardDistributed += 7 days;\\n        }\\n    }\\n\\n    // should transfer rewardToken prior to calling this contract\\n    // this is implemented to take care of the out-of-gas situation\\n    function notifyRewardsPartial(uint256 amount, uint256 from, uint256 to) external onlyOwner {\\n        require(from < to, \\\"from should be smaller than to\\\");\\n        require(to <= farms.length, \\\"to should be smaller or equal to farms.length\\\");\\n        for(uint256 i = from; i < to; i++){\\n            IRewardDistributionRecipientTokenOnly farm = farms[i];\\n            farm.notifyRewardAmount(amount.mul(rate[address(farm)]).div(weightSum));\\n        }\\n    }\\n\\n    function blockUser(address target) external onlyOwner {\\n        blackListed[target] = true;\\n    }\\n\\n    function unblockUser(address target) external onlyOwner {\\n        blackListed[target] = false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/general/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\nimport '../libraries/Address.sol';\\nimport '../libraries/SafeMath.sol';\\nimport '../interfaces/IERC20.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardDistributionRecipientTokenOnly.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IRewardDistributionRecipientTokenOnly {\\n    function rewardToken() external view returns(IERC20);\\n    function notifyRewardAmount(uint256 reward) external;\\n    function setRewardDistribution(address rewardDistribution) external;\\n}\\n\"\r\n    },\r\n    \"contracts/general/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n *\\n * @dev We've added a second owner to share control of the timelocked owner contract.\\n */\\ncontract Ownable {\\n    address private _owner;\\n    address private _pendingOwner;\\n    \\n    // Second allows a DAO to share control.\\n    address private _secondOwner;\\n    address private _pendingSecond;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event SecondOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    function initializeOwnable() internal {\\n        require(_owner == address(0), \\\"already initialized\\\");\\n        _owner = msg.sender;\\n        _secondOwner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n        emit SecondOwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n\\n    /**\\n     * @return the address of the owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @return the address of the owner.\\n     */\\n    function secondOwner() public view returns (address) {\\n        return _secondOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"msg.sender is not owner\\\");\\n        _;\\n    }\\n    \\n    modifier onlyFirstOwner() {\\n        require(msg.sender == _owner, \\\"msg.sender is not owner\\\");\\n        _;\\n    }\\n    \\n    modifier onlySecondOwner() {\\n        require(msg.sender == _secondOwner, \\\"msg.sender is not owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return true if `msg.sender` is the owner of the contract.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner || msg.sender == _secondOwner;\\n\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyFirstOwner {\\n        _pendingOwner = newOwner;\\n    }\\n\\n    function receiveOwnership() public {\\n        require(msg.sender == _pendingOwner, \\\"only pending owner can call this function\\\");\\n        _transferOwnership(_pendingOwner);\\n        _pendingOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferSecondOwnership(address newOwner) public onlySecondOwner {\\n        _pendingSecond = newOwner;\\n    }\\n\\n    function receiveSecondOwnership() public {\\n        require(msg.sender == _pendingSecond, \\\"only pending owner can call this function\\\");\\n        _transferSecondOwnership(_pendingSecond);\\n        _pendingSecond = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function _transferSecondOwnership(address newOwner) internal {\\n        require(newOwner != address(0));\\n        emit SecondOwnershipTransferred(_secondOwner, newOwner);\\n        _secondOwner = newOwner;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\\n\"\r\n    },\r\n    \"contracts/staking/LPFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\nimport './FarmController.sol';\\nimport '../general/ArmorModule.sol';\\nimport '../general/TokenWrapper.sol';\\nimport '../general/Ownable.sol';\\nimport '../libraries/Math.sol';\\nimport '../libraries/SafeMath.sol';\\nimport '../interfaces/IRewardDistributionRecipientTokenOnly.sol';\\n\\n/**\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\ncontract LPFarm is TokenWrapper, IRewardDistributionRecipientTokenOnly {\\n    IERC20 public override rewardToken;\\n    address public rewardDistribution;\\n    FarmController public controller;\\n    uint256 public constant DURATION = 7 days;\\n\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(msg.sender == address(controller), \\\"Caller is not controller\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == Ownable(address(controller)).owner(), \\\"Caller is not owner\\\");\\n        _;\\n    }\\n\\n    modifier checkBlackList(address user) {\\n        require(!controller.blackListed(user), \\\"User is blacklisted\\\");\\n        _;\\n    }\\n\\n    function initialize(address _stakeToken, address _controller)\\n      external\\n    {\\n        require(address(stakeToken) == address(0), \\\"already initialized\\\");\\n        stakeToken = IERC20(_stakeToken);\\n        controller = FarmController(_controller);\\n        rewardToken = controller.rewardToken();\\n    }\\n\\n    function setRewardDistribution(address _rewardDistribution)\\n        external\\n        override\\n        onlyOwner\\n    {\\n    }\\n\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(totalSupply())\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            balanceOf(account)\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    // stake visibility is public as overriding LPTokenWrapper's stake() function\\n    function stake(uint256 amount) public virtual override checkBlackList(msg.sender) updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        super.stake(amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount) public virtual override checkBlackList(msg.sender) updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        super.withdraw(amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function exit() external virtual {\\n        withdraw(balanceOf(msg.sender));\\n        getReward();\\n    }\\n\\n    function getReward() public checkBlackList(msg.sender) updateReward(msg.sender) virtual {\\n        uint256 reward = earned(msg.sender);\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            rewardToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        override\\n        onlyController\\n        updateReward(address(0))\\n    {\\n        rewardToken.safeTransferFrom(msg.sender, address(this), reward);\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(DURATION);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(DURATION);\\n        }\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(DURATION);\\n        emit RewardAdded(reward);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n * \\n * @dev Default OpenZeppelin\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Multiplies two unsigned integers, reverts on overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two unsigned integers, reverts on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n     * reverts when dividing by zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"contracts/libraries/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\"\r\n    },\r\n    \"contracts/general/TokenWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\nimport '../general/SafeERC20.sol';\\nimport '../libraries/SafeMath.sol';\\n\\ncontract TokenWrapper {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public stakeToken;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function stake(uint256 amount) public virtual {\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        stakeToken.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount) public virtual {\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        stakeToken.safeTransfer(msg.sender, amount);\\n    }\\n}\"\r\n    },\r\n    \"contracts/general/ArmorModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../interfaces/IArmorMaster.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./Bytes32.sol\\\";\\n\\n/**\\n * @dev Each arCore contract is a module to enable simple communication and interoperability. ArmorMaster.sol is master.\\n**/\\ncontract ArmorModule {\\n    IArmorMaster internal _master;\\n\\n    using Bytes32 for bytes32;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == Ownable(address(_master)).owner(), \\\"only owner can call this function\\\");\\n        _;\\n    }\\n\\n    modifier doKeep() {\\n        _master.keep();\\n        _;\\n    }\\n\\n    modifier onlyModule(bytes32 _module) {\\n        string memory message = string(abi.encodePacked(\\\"only module \\\", _module.toString(),\\\" can call this function\\\"));\\n        require(msg.sender == getModule(_module), message);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Used when multiple can call.\\n    **/\\n    modifier onlyModules(bytes32 _moduleOne, bytes32 _moduleTwo) {\\n        string memory message = string(abi.encodePacked(\\\"only module \\\", _moduleOne.toString(),\\\" or \\\", _moduleTwo.toString(),\\\" can call this function\\\"));\\n        require(msg.sender == getModule(_moduleOne) || msg.sender == getModule(_moduleTwo), message);\\n        _;\\n    }\\n\\n    function initializeModule(address _armorMaster) internal {\\n        require(address(_master) == address(0), \\\"already initialized\\\");\\n        require(_armorMaster != address(0), \\\"master cannot be zero address\\\");\\n        _master = IArmorMaster(_armorMaster);\\n    }\\n\\n    function changeMaster(address _newMaster) external onlyOwner {\\n        _master = IArmorMaster(_newMaster);\\n    }\\n\\n    function getModule(bytes32 _key) internal view returns(address) {\\n        return _master.getModule(_key);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\n     * execution of a contract's constructor, its address will be reported as\\n     * not containing a contract.\\n     *\\n     * IMPORTANT: It is unsafe to assume that an address for which this\\n     * function returns false is an externally-owned account (EOA) and not a\\n     * contract.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != 0x0 && codehash != accountHash);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/general/Bytes32.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\nlibrary Bytes32 {\\n    function toString(bytes32 x) internal pure returns (string memory) {\\n        bytes memory bytesString = new bytes(32);\\n        uint charCount = 0;\\n        for (uint256 j = 0; j < 32; j++) {\\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\\n            if (char != 0) {\\n                bytesString[charCount] = char;\\n                charCount++;\\n            }\\n        }\\n        bytes memory bytesStringTrimmed = new bytes(charCount);\\n        for (uint256 j = 0; j < charCount; j++) {\\n            bytesStringTrimmed[j] = bytesString[j];\\n        }\\n        return string(bytesStringTrimmed);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IArmorMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IArmorMaster {\\n    function registerModule(bytes32 _key, address _module) external;\\n    function getModule(bytes32 _key) external view returns(address);\\n    function keep() external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SecondOwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INITIAL_DISTRIBUTED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lptoken\",\"type\":\"address\"}],\"name\":\"addFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"blockUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"farms\",\"outputs\":[{\"internalType\":\"contract IRewardDistributionRecipientTokenOnly\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flushRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"notifyRewardsPartial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveSecondOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRateOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rates\",\"type\":\"uint256[]\"}],\"name\":\"setRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakerRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowerRewards\",\"type\":\"uint256\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferSecondOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"unblockUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FarmController","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}