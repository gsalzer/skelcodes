{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/TenseiTurtles/TenseiTurtles.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/****************************************\\r\\n * @author: squeebo_nft                 *\\r\\n * @team:   GoldenX                     *\\r\\n ****************************************\\r\\n *   Blimpie-ERC721 provides low-gas    *\\r\\n *           mints + transfers          *\\r\\n ****************************************/\\r\\n\\r\\nimport '../Blimpie/Delegated.sol';\\r\\nimport '../Blimpie/PaymentSplitterMod.sol';\\r\\nimport './ERC721EnumerableT.sol';\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ninterface IERC20Proxy{\\r\\n  function burnFromAccount( address account, uint leaves ) external payable;\\r\\n  function mintToAccount( address[] calldata accounts, uint[] calldata leaves ) external payable;\\r\\n}\\r\\n\\r\\ninterface IERC1155Proxy{\\r\\n  function burnFrom( address account, uint[] calldata ids, uint[] calldata quantities ) external payable;\\r\\n}\\r\\n\\r\\ncontract TenseiTurtles is ERC721EnumerableT, Delegated, PaymentSplitterMod {\\r\\n  using Strings for uint;\\r\\n\\r\\n  event Evolve(address indexed owner, uint256 indexed tokenId);\\r\\n  event Spawn(address indexed owner, uint256 indexed tokenId);\\r\\n\\r\\n  enum TurtleType{\\r\\n    Tensei,\\r\\n    Meta,\\r\\n    Hybrid\\r\\n  }\\r\\n\\r\\n  struct Turtle{\\r\\n    address owner;\\r\\n    TurtleType turtleType;\\r\\n    uint32 nextBreed;\\r\\n    uint32 lastStake;\\r\\n  }\\r\\n\\r\\n  uint public MAX_ORDER    = 2;\\r\\n  uint public MAX_SUPPLY   = 1111;\\r\\n  uint public MAX_WALLET   = 2;\\r\\n  uint public PRICE        = 0.065 ether;\\r\\n\\r\\n  uint32 public COOLDOWN_TENSEI = 259200; // 3 days\\r\\n  uint32 public COOLDOWN_META   = 259200;\\r\\n\\r\\n  uint32 public STAKE_PERIOD = 3600; // 1 hour\\r\\n  uint public STAKE_TENSEI =  83333000000000000;  // 2000000000000000000 / 24\\r\\n  uint public STAKE_META   = 208333000000000000;  // 5000000000000000000 / 24\\r\\n  uint public STAKE_HYBRID = 208333000000000000;  // 5000000000000000000 / 24\\r\\n\\r\\n\\r\\n  Turtle[] public turtles;\\r\\n\\r\\n  bool public isPresaleActive = false;\\r\\n  bool public isMintActive    = false;\\r\\n  bool public isEvolveActive  = false;\\r\\n  bool public isBreedActive   = false;\\r\\n  bool public isStakeActive   = false;\\r\\n\\r\\n  address public flaskAddress;\\r\\n  uint public flaskToken;\\r\\n  uint public flaskQuantity = 1;\\r\\n\\r\\n  address public leafAddress;\\r\\n  uint public leafEvolveQuantity = 0 ether;\\r\\n  uint public leafBreedQuantity  = 210 ether;\\r\\n\\r\\n  mapping(address => uint) public accessList;\\r\\n\\r\\n\\r\\n  mapping(address => uint) private _balances;\\r\\n  string private _tokenURIPrefix = 'https://ipfs.tenseiturtles.io/metadata/';\\r\\n  string private _tokenURISuffix = '';\\r\\n\\r\\n  address[] private addressList = [\\r\\n    0x890903d07b5Db2FaDE12027E9B1AF16e5e6e0EA5,\\r\\n    0xB7edf3Cbb58ecb74BdE6298294c7AAb339F3cE4a\\r\\n  ];\\r\\n\\r\\n  uint[] private shareList = [\\r\\n    88,\\r\\n    12\\r\\n  ];\\r\\n\\r\\n  constructor()\\r\\n    ERC721T(\\\"Tensei Turtles\\\", \\\"TENSEI\\\")\\r\\n    PaymentSplitterMod( addressList, shareList ){\\r\\n  }\\r\\n\\r\\n  //external\\r\\n  fallback() external payable {}\\r\\n\\r\\n\\r\\n  function balanceOf(address account) public view override returns (uint) {\\r\\n    require(account != address(0), \\\"TENSEI: balance query for the zero address\\\");\\r\\n    return _balances[account];\\r\\n  }\\r\\n\\r\\n  function checkLeaf( uint tokenId ) public view returns( uint leaves ){\\r\\n    require( isStakeActive,   \\\"TENSEI: Staking is not active\\\" );\\r\\n    require(_exists(tokenId), \\\"TENSEI: Query for nonexistent token\\\");\\r\\n\\r\\n    Turtle memory turtle = turtles[ tokenId ];\\r\\n    if( turtle.lastStake < 2 )\\r\\n      return 0;\\r\\n\\r\\n    uint periods = (block.timestamp - turtle.lastStake)/STAKE_PERIOD;\\r\\n    if( periods == 0 )\\r\\n      return 0;\\r\\n\\r\\n\\r\\n    if( turtle.turtleType == TurtleType.Tensei )\\r\\n      return periods * STAKE_TENSEI;\\r\\n    else if( turtle.turtleType == TurtleType.Meta )\\r\\n      return periods * STAKE_META;\\r\\n    else if( turtle.turtleType == TurtleType.Hybrid )\\r\\n      return periods * STAKE_HYBRID;\\r\\n    else\\r\\n      return 0;\\r\\n  }\\r\\n\\r\\n  function checkLeaves( uint[] calldata tokenIds ) external view returns( uint totalLeaves_ ) {\\r\\n    uint totalLeaves;\\r\\n    for( uint i; i < tokenIds.length; ++i ){\\r\\n      totalLeaves += checkLeaf( tokenIds[i] );\\r\\n    }\\r\\n    return totalLeaves;\\r\\n  }\\r\\n\\r\\n  function isOwnerOf( address account, uint[] calldata tokenIds ) external view override returns( bool ){\\r\\n    for(uint i; i < tokenIds.length; ++i ){\\r\\n      if( turtles[ tokenIds[i] ].owner != account )\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function ownerOf( uint tokenId ) public override view returns( address owner_ ){\\r\\n    address owner = turtles[tokenId].owner;\\r\\n    require(owner != address(0), \\\"TENSEI: query for nonexistent token\\\");\\r\\n    return owner;\\r\\n  }\\r\\n\\r\\n  function tokenByIndex(uint index) external view override returns (uint) {\\r\\n    require(index < totalSupply(), \\\"TENSEI: global index out of bounds\\\");\\r\\n    return index;\\r\\n  }\\r\\n\\r\\n  function tokenOfOwnerByIndex(address owner, uint index) public view override returns (uint tokenId) {\\r\\n    uint count;\\r\\n    for( uint i; i < turtles.length; ++i ){\\r\\n      if( owner == turtles[i].owner ){\\r\\n        if( count == index )\\r\\n          return i;\\r\\n        else\\r\\n          ++count;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    revert(\\\"ERC721Enumerable: owner index out of bounds\\\");\\r\\n  }\\r\\n\\r\\n  function tokenURI(uint tokenId) external view override returns (string memory) {\\r\\n    require(_exists(tokenId), \\\"TENSEI: URI query for nonexistent token\\\");\\r\\n    return string(abi.encodePacked(_tokenURIPrefix, tokenId.toString(), _tokenURISuffix));\\r\\n  }\\r\\n\\r\\n  function totalSupply() public view override returns( uint totalSupply_ ){\\r\\n    return turtles.length;\\r\\n  }\\r\\n\\r\\n  function walletOfOwner( address account ) external view override returns( uint[] memory ){\\r\\n    uint quantity = balanceOf( account );\\r\\n    uint[] memory wallet = new uint[]( quantity );\\r\\n    for( uint i; i < quantity; ++i ){\\r\\n        wallet[i] = tokenOfOwnerByIndex( account, i );\\r\\n    }\\r\\n    return wallet;\\r\\n  }\\r\\n\\r\\n\\r\\n  //non-payable\\r\\n  function breed( uint turtleA, uint turtleB ) external {\\r\\n    require( isBreedActive, \\\"TENSEI: Breeding is not active\\\" );\\r\\n    require( _exists(turtleA) && _exists( turtleB ), \\\"TENSEI: Query for nonexistent token(s)\\\" );\\r\\n\\r\\n    Turtle storage tensei;\\r\\n    Turtle storage meta;\\r\\n    if( turtles[ turtleA ].turtleType == TurtleType.Tensei ){\\r\\n      if( turtles[ turtleB ].turtleType == TurtleType.Meta ){\\r\\n        tensei = turtles[ turtleA ];\\r\\n        meta = turtles[ turtleB ];\\r\\n      }\\r\\n      else\\r\\n        revert( \\\"Invalid combination\\\" );\\r\\n    }\\r\\n    else if( turtles[ turtleA ].turtleType == TurtleType.Meta ){\\r\\n      if( turtles[ turtleB ].turtleType == TurtleType.Tensei ){\\r\\n        meta = turtles[ turtleA ];\\r\\n        tensei = turtles[ turtleB ];\\r\\n      }\\r\\n      else\\r\\n        revert( \\\"Invalid combination\\\" );\\r\\n    }\\r\\n    else{\\r\\n      revert( \\\"TENSEI: invalid combination\\\" );\\r\\n    }\\r\\n\\r\\n\\r\\n    //verify cooldown\\r\\n    uint32 time = uint32(block.timestamp);\\r\\n    require( tensei.nextBreed < time && meta.nextBreed < time, \\\"TENSEI: breeding cooldown active\\\" );\\r\\n    require( tensei.owner != msg.sender || meta.owner != msg.sender, \\\"TENSEI: breeding of token that is not owned\\\" );\\r\\n\\r\\n    uint supply = totalSupply();\\r\\n    require( supply + 1 <= MAX_SUPPLY, \\\"TENSEI: Mint/order exceeds supply\\\" );\\r\\n\\r\\n    if( leafEvolveQuantity > 0 ){\\r\\n      require( leafAddress != address(0), \\\"TENSEI: Leaf contract unset\\\" );\\r\\n      IERC20Proxy( leafAddress ).burnFromAccount( msg.sender, leafEvolveQuantity );\\r\\n    }\\r\\n\\r\\n    tensei.nextBreed = time + COOLDOWN_TENSEI;\\r\\n    tensei.nextBreed = time + COOLDOWN_META;\\r\\n    _mint( msg.sender, supply, TurtleType.Hybrid );\\r\\n    emit Spawn( msg.sender, supply );\\r\\n  }\\r\\n\\r\\n  function claimLeaves( uint[] calldata tokenIds ) external {\\r\\n    require( isStakeActive,             \\\"TENSEI: Staking is not active\\\" );\\r\\n    require( leafAddress != address(0), \\\"TENSEI: Leaf contract unset\\\" );\\r\\n\\r\\n    uint tokenLeaves;\\r\\n    Turtle storage turtle;\\r\\n    uint32 time = uint32(block.timestamp);\\r\\n    uint[] memory leaves = new uint[]( tokenIds.length );\\r\\n    address[] memory owners = new address[]( tokenIds.length );\\r\\n    for( uint i; i < tokenIds.length; ++i ){\\r\\n      require( _exists(tokenIds[i]),      \\\"TENSEI: Query for nonexistent token\\\" );\\r\\n\\r\\n      turtle = turtles[ tokenIds[i] ];\\r\\n      require(turtle.owner == msg.sender, \\\"TENSEI: Claiming token that is not owned\\\");\\r\\n\\r\\n      tokenLeaves = checkLeaf( tokenIds[i] );\\r\\n      if( tokenLeaves > 0 ){\\r\\n        leaves[ i ] = tokenLeaves;\\r\\n        owners[ i ] = turtle.owner;\\r\\n        turtle.lastStake = time;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    IERC20Proxy( leafAddress ).mintToAccount( owners, leaves );\\r\\n  }\\r\\n\\r\\n  function evolve( uint[] calldata tokenIds ) external {\\r\\n    require( isEvolveActive,             \\\"TENSEI: Evolution is not active\\\" );\\r\\n\\r\\n    if( flaskQuantity > 0 ){\\r\\n      require( flaskAddress != address(0), \\\"TENSEI: Flask contract unset\\\" );\\r\\n\\r\\n      uint[] memory tokens = new uint[]( 1 );\\r\\n      tokens[0] = flaskToken;\\r\\n\\r\\n      uint[] memory quantities = new uint[]( 1 );\\r\\n      quantities[0] = tokenIds.length * flaskQuantity;\\r\\n\\r\\n      IERC1155Proxy( flaskAddress ).burnFrom( msg.sender, tokens, quantities );\\r\\n    }\\r\\n\\r\\n    if( leafEvolveQuantity > 0 ){\\r\\n      require( leafAddress != address(0), \\\"TENSEI: Leaf contract unset\\\" );\\r\\n      IERC20Proxy( leafAddress ).burnFromAccount( msg.sender, leafEvolveQuantity * tokenIds.length );\\r\\n    }\\r\\n\\r\\n    Turtle storage turtle;\\r\\n    for(uint i; i < tokenIds.length; ++i ){\\r\\n      require( _exists(tokenIds[i]), \\\"TENSEI: Query for nonexistent token\\\" );\\r\\n\\r\\n      turtle = turtles[tokenIds[i]];\\r\\n      require(turtle.owner == msg.sender, \\\"TENSEI: Evolving token that is not owned\\\");\\r\\n      require(turtle.turtleType == TurtleType.Tensei, \\\"TENSEI: Only Tensei turtles can evolve\\\" );\\r\\n\\r\\n      turtle.turtleType = TurtleType.Meta;\\r\\n      emit Evolve( msg.sender, tokenIds[i] );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setStake( uint[] calldata tokenIds, bool isSet ) external {\\r\\n    require( isStakeActive, \\\"TENSEI: Staking is not active\\\" );\\r\\n\\r\\n    Turtle storage turtle;\\r\\n    uint32 time = uint32(block.timestamp);\\r\\n    for( uint i; i < tokenIds.length; ++i ){\\r\\n      require( _exists(tokenIds[i]), \\\"TENSEI: Query for nonexistent token\\\" );\\r\\n\\r\\n      turtle = turtles[ tokenIds[i] ];\\r\\n      require(turtle.owner == msg.sender, \\\"TENSEI: Staking token that is not owned\\\");\\r\\n\\r\\n      turtle.lastStake = isSet ? time : 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n\\r\\n  //payable\\r\\n  function mint( uint quantity ) external payable {\\r\\n    if( isMintActive ){\\r\\n    }\\r\\n    else if( isPresaleActive ){\\r\\n      require( accessList[ msg.sender ] >= quantity, \\\"TENSEI: Account is not on the access list\\\" );\\r\\n      accessList[ msg.sender ] -= quantity;\\r\\n    }\\r\\n    else{\\r\\n      revert( \\\"TENSEI: Sale is not active\\\" );\\r\\n    }\\r\\n\\r\\n    require( quantity <= MAX_ORDER, string(abi.encodePacked(\\\"TENSEI: Max order is \\\", MAX_ORDER.toString())) );\\r\\n    require( balanceOf(msg.sender) + quantity <= MAX_WALLET, string(abi.encodePacked(\\\"TENSEI: Max per wallet is \\\", MAX_WALLET.toString())) );\\r\\n    require( msg.value >= PRICE * quantity, \\\"TENSEI: Ether sent is not correct\\\" );\\r\\n\\r\\n    uint supply = totalSupply();\\r\\n    require( supply + quantity <= MAX_SUPPLY, \\\"TENSEI: Mint/order exceeds supply\\\" );\\r\\n    for(uint i; i < quantity; ++i){\\r\\n      _mint( msg.sender, supply++, TurtleType.Tensei );\\r\\n    }\\r\\n  }\\r\\n\\r\\n\\r\\n  //onlyDelegates\\r\\n  function mint_(uint[] calldata quantity, address[] calldata recipient, TurtleType[] calldata types_ ) external payable onlyDelegates{\\r\\n    require(quantity.length == recipient.length, \\\"TENSEI: Must provide equal quantities and recipients\\\" );\\r\\n    require(recipient.length == types_.length,   \\\"TENSEI: Must provide equal recipients and types\\\" );\\r\\n\\r\\n    uint totalQuantity;\\r\\n    uint supply = totalSupply();\\r\\n    for(uint i; i < quantity.length; ++i){\\r\\n      totalQuantity += quantity[i];\\r\\n    }\\r\\n    require( supply + totalQuantity < MAX_SUPPLY, \\\"TENSEI: Mint/order exceeds supply\\\" );\\r\\n\\r\\n    for(uint i; i < recipient.length; ++i){\\r\\n      for(uint j; j < quantity[i]; ++j){\\r\\n        uint tokenId = supply++;\\r\\n        _mint( recipient[i], tokenId, types_[i] );\\r\\n\\r\\n        if( types_[i] == TurtleType.Meta ){\\r\\n          emit Evolve( recipient[i], tokenId );\\r\\n        }\\r\\n        else if( types_[i] == TurtleType.Hybrid ){\\r\\n          emit Spawn( recipient[i], tokenId );\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function evolve_(address account, uint[] calldata tokenIds) external payable onlyDelegates{\\r\\n    for(uint i; i < tokenIds.length; ++i){\\r\\n      require( _exists( tokenIds[i] ),            \\\"TENSEI: Query for nonexistent token\\\");\\r\\n      require( ownerOf( tokenIds[i] ) == account, \\\"TENSEI: Evolution of token that is not owned\\\" );\\r\\n      require( turtles[tokenIds[i]].turtleType == TurtleType.Tensei, \\\"TENSEI: Only Tensei turtles can evolve\\\" );\\r\\n\\r\\n      turtles[tokenIds[i]].turtleType = TurtleType.Meta;\\r\\n      emit Evolve( account, tokenIds[i] );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function breed_( address account, uint quantity ) external payable onlyDelegates{\\r\\n    uint supply = totalSupply();\\r\\n    require( supply + quantity <= MAX_SUPPLY, \\\"TENSEI: Mint/order exceeds supply\\\" );\\r\\n\\r\\n    for( uint i; i < quantity; ++i ){\\r\\n      uint tokenId = supply++;\\r\\n      _mint( account, tokenId, TurtleType.Hybrid );\\r\\n      emit Spawn( account, tokenId );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function stake_( address account, uint[] calldata tokenIds, bool isSet ) external payable onlyDelegates{\\r\\n    require( isStakeActive, \\\"TENSEI: Staking is not active\\\" );\\r\\n\\r\\n    Turtle storage turtle;\\r\\n    uint32 time = uint32(block.timestamp);\\r\\n    for( uint i; i < tokenIds.length; ++i ){\\r\\n      require( _exists(tokenIds[i]), \\\"TENSEI: Query for nonexistent token\\\" );\\r\\n\\r\\n      turtle = turtles[ tokenIds[i] ];\\r\\n      require(turtle.owner == account, \\\"TENSEI: staking token that is not owned\\\");\\r\\n\\r\\n      turtle.lastStake = isSet ? time : 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setNextBreeds(uint[] calldata tokenIds, uint32[] calldata nextBreeds ) external onlyDelegates {\\r\\n    for(uint i; i < tokenIds.length; ++i ){\\r\\n      require(_exists(tokenIds[i]), \\\"TENSEI: Query for nonexistent token\\\");\\r\\n      turtles[tokenIds[i]].nextBreed = nextBreeds[i];\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setAccessList(address[] calldata accounts, uint[] calldata allowed) external onlyDelegates{\\r\\n    require( accounts.length == allowed.length, \\\"TENSEI: Must provide equal accounts and allowed\\\" );\\r\\n    for(uint i; i < accounts.length; ++i){\\r\\n      accessList[ accounts[i] ] = allowed[i];\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setActive(bool isPresaleActive_, bool isMintActive_, bool isEvolveActive_, bool isBreedActive_) external onlyDelegates{\\r\\n    require( isPresaleActive != isPresaleActive_ ||\\r\\n      isMintActive != isMintActive_ ||\\r\\n      isEvolveActive != isEvolveActive_ ||\\r\\n      isBreedActive != isBreedActive_, \\\"TENSEI: New value matches old\\\" );\\r\\n    isPresaleActive = isPresaleActive_;\\r\\n    isMintActive = isMintActive_;\\r\\n    isEvolveActive = isEvolveActive_;\\r\\n    isBreedActive = isBreedActive_;\\r\\n  }\\r\\n\\r\\n  function setBaseURI(string calldata prefix, string calldata suffix) external onlyDelegates{\\r\\n    _tokenURIPrefix = prefix;\\r\\n    _tokenURISuffix = suffix;\\r\\n  }\\r\\n\\r\\n  function setCooldown(uint32 tenseiCooldown, uint32 metaCooldown) external onlyDelegates{\\r\\n    require( COOLDOWN_TENSEI != tenseiCooldown || COOLDOWN_META != metaCooldown, \\\"TENSEI: New value matches old\\\" );\\r\\n    COOLDOWN_TENSEI = tenseiCooldown;\\r\\n    COOLDOWN_META = metaCooldown;\\r\\n  }\\r\\n\\r\\n  function setMaxOrder(uint maxOrder, uint maxSupply, uint maxWallet) external onlyDelegates{\\r\\n    require( MAX_ORDER != maxOrder || MAX_SUPPLY != maxSupply || MAX_WALLET != maxWallet, \\\"TENSEI: New value matches old\\\" );\\r\\n    require( maxSupply >= totalSupply(), \\\"TENSEI: Specified supply is lower than current balance\\\" );\\r\\n    MAX_ORDER = maxOrder;\\r\\n    MAX_SUPPLY = maxSupply;\\r\\n    MAX_WALLET = maxWallet;\\r\\n  }\\r\\n\\r\\n  function setFlask( address flaskAddress_, uint flaskToken_, uint flaskQuantity_ ) external onlyDelegates{\\r\\n    flaskAddress = flaskAddress_;\\r\\n    flaskToken = flaskToken_;\\r\\n    flaskQuantity = flaskQuantity_;\\r\\n  }\\r\\n\\r\\n  function setLeaf( address leafAddress_, uint leafEvolveQuantity_, uint leafBreedQuantity_ ) external onlyDelegates{\\r\\n    leafAddress = leafAddress_;\\r\\n    leafEvolveQuantity = leafEvolveQuantity_;\\r\\n    leafBreedQuantity = leafBreedQuantity_;\\r\\n  }\\r\\n\\r\\n  function setPrice(uint price) external onlyDelegates{\\r\\n    require( PRICE != price, \\\"TENSEI: New value matches old\\\" );\\r\\n    PRICE = price;\\r\\n  }\\r\\n\\r\\n  function setStakeOptions( bool isActive, uint32 period, uint tenseiLeaf, uint metaLeaf, uint hybridLeaf ) external onlyDelegates{\\r\\n    isStakeActive = isActive;\\r\\n\\r\\n    STAKE_PERIOD = period;\\r\\n    STAKE_TENSEI = tenseiLeaf;\\r\\n    STAKE_META   = metaLeaf;\\r\\n    STAKE_HYBRID = hybridLeaf;\\r\\n  }\\r\\n\\r\\n  function setTurtle(uint[] calldata tokenIds, TurtleType[] calldata types,\\r\\n    uint32[] calldata nextBreeds, uint32[] calldata lastStakes ) external onlyDelegates {\\r\\n\\r\\n    Turtle storage turtle;\\r\\n    for(uint i; i < tokenIds.length; ++i ){\\r\\n      require(_exists(tokenIds[i]), \\\"TENSEI: Query for nonexistent token\\\");\\r\\n\\r\\n      turtle = turtles[tokenIds[i]];\\r\\n      turtle.turtleType = types[i];\\r\\n      turtle.nextBreed  = nextBreeds[i];\\r\\n      turtle.lastStake  = lastStakes[i];\\r\\n    }\\r\\n  }\\r\\n\\r\\n\\r\\n  //onlyOwner\\r\\n  function addPayee( address account, uint shares ) external onlyOwner {\\r\\n    _addPayee( account, shares );\\r\\n  }\\r\\n\\r\\n  function setPayee( uint index, address account, uint newShares ) external onlyOwner {\\r\\n    _setPayee( index, account, newShares );\\r\\n  }\\r\\n\\r\\n\\r\\n  //internal\\r\\n  function _beforeTokenTransfer(address from, address to) internal {\\r\\n    if( from != address(0) )\\r\\n      --_balances[ from ];\\r\\n\\r\\n    if( to != address(0) )\\r\\n      ++_balances[ to ];\\r\\n  }\\r\\n\\r\\n  function _exists(uint tokenId) internal view override returns (bool) {\\r\\n    return tokenId < turtles.length && turtles[tokenId].owner != address(0);\\r\\n  }\\r\\n\\r\\n  function _mint(address to, uint tokenId, TurtleType type_ ) internal {\\r\\n    _beforeTokenTransfer(address(0), to);\\r\\n    turtles.push(Turtle( to, type_, 0, 0 ));\\r\\n    emit Transfer(address(0), to, tokenId);\\r\\n  }\\r\\n\\r\\n  function _transfer(address from, address to, uint tokenId) internal override {\\r\\n    require(turtles[tokenId].owner == from, \\\"TENSEI: transfer of token that is not owned\\\");\\r\\n\\r\\n    // Clear approvals from the previous owner\\r\\n    _approve(address(0), tokenId);\\r\\n    _beforeTokenTransfer(from, to);\\r\\n\\r\\n    turtles[tokenId].owner = to;\\r\\n    emit Transfer(from, to, tokenId);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/TenseiTurtles/ERC721T.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/****************************************\\r\\n * @author: squeebo_nft                 *\\r\\n * @team:   GoldenX                     *\\r\\n ****************************************\\r\\n *   Blimpie-ERC721 provides low-gas    *\\r\\n *           mints + transfers          *\\r\\n ****************************************/\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\nabstract contract ERC721T is Context, ERC165, IERC721, IERC721Metadata {\\r\\n    using Address for address;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    mapping(uint => address) internal _tokenApprovals;\\r\\n    mapping(address => mapping(address => bool)) internal _operatorApprovals;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    //public\\r\\n    function balanceOf(address owner) public view virtual override returns( uint );\\r\\n\\r\\n    function name() external view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function ownerOf(uint tokenId) public view virtual override returns (address);\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function symbol() external view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    function totalSupply() public view virtual returns (uint) {\\r\\n        return _owners.length - (_offset + _burned);\\r\\n    }\\r\\n    */\\r\\n\\r\\n\\r\\n    function approve(address to, uint tokenId) external virtual override {\\r\\n        address owner = ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function getApproved(uint tokenId) public view virtual override returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external virtual override {\\r\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint tokenId\\r\\n    ) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint tokenId\\r\\n    ) external virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n\\r\\n    //internal\\r\\n    function _approve(address to, uint tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver.onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n                } else {\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _exists(uint tokenId) internal view virtual returns (bool);\\r\\n\\r\\n    function _isApprovedOrOwner(address spender, uint tokenId) internal view virtual returns (bool) {\\r\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n        address owner = ownerOf(tokenId);\\r\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint tokenId) internal virtual;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/TenseiTurtles/ERC721EnumerableT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/****************************************\\r\\n * @author: squeebo_nft                 *\\r\\n ****************************************\\r\\n *   Blimpie-ERC721 provides low-gas    *\\r\\n *           mints + transfers          *\\r\\n ****************************************/\\r\\n\\r\\nimport \\\"./ERC721T.sol\\\";\\r\\nimport \\\"../Blimpie/IERC721Batch.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\n\\r\\nabstract contract ERC721EnumerableT is ERC721T, IERC721Batch, IERC721Enumerable {\\r\\n    function balanceOf( address owner ) public view virtual override( IERC721, ERC721T ) returns( uint );\\r\\n\\r\\n    function isOwnerOf( address account, uint[] calldata tokenIds ) external view virtual override returns( bool );\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721T) returns (bool) {\\r\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function tokenOfOwnerByIndex(address owner, uint index) public view virtual override returns( uint tokenId );\\r\\n\\r\\n    function tokenByIndex(uint index) external view virtual override returns (uint) {\\r\\n        require(index < totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view virtual override returns( uint );\\r\\n\\r\\n    function transferBatch( address from, address to, uint[] calldata tokenIds, bytes calldata data ) external override{\\r\\n        for(uint i; i < tokenIds.length; ++i ){\\r\\n            safeTransferFrom( from, to, tokenIds[i], data );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function walletOfOwner( address account ) external view virtual override returns( uint[] memory ){\\r\\n        uint quantity = balanceOf( account );\\r\\n        uint[] memory wallet = new uint[]( quantity );\\r\\n        for( uint i; i < quantity; ++i ){\\r\\n            wallet[i] = tokenOfOwnerByIndex( account, i );\\r\\n        }\\r\\n        return wallet;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/Blimpie/PaymentSplitterMod.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n */\\ncontract PaymentSplitterMod is Context {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + _totalReleased;\\n        uint256 payment = (totalReceived * _shares[account]) / _totalShares - _released[account];\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] = _released[account] + payment;\\n        _totalReleased = _totalReleased + payment;\\n\\n        Address.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    function _addPayee(address account, uint256 shares_) internal {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n\\n    function _setPayee( uint index, address account, uint newShares ) internal {\\n        _totalShares = _totalShares - _shares[ account ] + newShares;\\n        _shares[ account ] = newShares;\\n        _payees[ index ] = account;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/Blimpie/IERC721Batch.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC721Batch {\\r\\n  function isOwnerOf( address account, uint[] calldata tokenIds ) external view returns( bool );\\r\\n  function transferBatch( address from, address to, uint[] calldata tokenIds, bytes calldata data ) external;\\r\\n  function walletOfOwner( address account ) external view returns( uint[] memory );\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/Blimpie/Delegated.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.0;\\n\\n/***********************\\n* @author: squeebo_nft *\\n************************/\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Delegated is Ownable{\\n  mapping(address => bool) internal _delegates;\\n\\n  constructor(){\\n    _delegates[owner()] = true;\\n  }\\n\\n  modifier onlyDelegates {\\n    require(_delegates[msg.sender], \\\"Invalid delegate\\\" );\\n    _;\\n  }\\n\\n  //onlyOwner\\n  function isDelegate( address addr ) external view onlyOwner returns ( bool ){\\n    return _delegates[addr];\\n  }\\n\\n  function setDelegate( address addr, bool isDelegate_ ) external onlyOwner{\\n    _delegates[addr] = isDelegate_;\\n  }\\n\\n  function transferOwnership(address newOwner) public virtual override onlyOwner {\\n    _delegates[newOwner] = true;\\n    super.transferOwnership( newOwner );\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Evolve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Spawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"COOLDOWN_META\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COOLDOWN_TENSEI\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ORDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WALLET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_HYBRID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_META\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_PERIOD\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_TENSEI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accessList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"addPayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"turtleA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turtleB\",\"type\":\"uint256\"}],\"name\":\"breed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"breed_\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkLeaf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"leaves\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"checkLeaves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLeaves_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimLeaves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"evolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"evolve_\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flaskAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flaskQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flaskToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBreedActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isDelegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEvolveActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"isOwnerOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStakeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leafAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leafBreedQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leafEvolveQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"quantity\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"recipient\",\"type\":\"address[]\"},{\"internalType\":\"enum TenseiTurtles.TurtleType[]\",\"name\":\"types_\",\"type\":\"uint8[]\"}],\"name\":\"mint_\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"allowed\",\"type\":\"uint256[]\"}],\"name\":\"setAccessList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPresaleActive_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMintActive_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEvolveActive_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isBreedActive_\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"suffix\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tenseiCooldown\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"metaCooldown\",\"type\":\"uint32\"}],\"name\":\"setCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDelegate_\",\"type\":\"bool\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"flaskAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flaskToken_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flaskQuantity_\",\"type\":\"uint256\"}],\"name\":\"setFlask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"leafAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"leafEvolveQuantity_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leafBreedQuantity_\",\"type\":\"uint256\"}],\"name\":\"setLeaf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxOrder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"nextBreeds\",\"type\":\"uint32[]\"}],\"name\":\"setNextBreeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"}],\"name\":\"setPayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"setStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"period\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"tenseiLeaf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metaLeaf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hybridLeaf\",\"type\":\"uint256\"}],\"name\":\"setStakeOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum TenseiTurtles.TurtleType[]\",\"name\":\"types\",\"type\":\"uint8[]\"},{\"internalType\":\"uint32[]\",\"name\":\"nextBreeds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"lastStakes\",\"type\":\"uint32[]\"}],\"name\":\"setTurtle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"stake_\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"turtles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum TenseiTurtles.TurtleType\",\"name\":\"turtleType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"nextBreed\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastStake\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TenseiTurtles","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}