{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/clexmond/projects/influence/contracts/contracts/crew/CrewFeatures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ICrewGenerator.sol\\\";\\n\\n\\n/**\\n * @dev Contract which generates crew features based on the set they're part of\\n */\\ncontract CrewFeatures is Ownable {\\n\\n  // Mapping of collectionIds to contract addresses of generators\\n  mapping (uint => ICrewGenerator) private _generators;\\n\\n  // Mapping of tokenIds to collection membership\\n  mapping (uint => uint) private _crewCollection;\\n\\n  // Mapping of tokenIds to modifiers\\n  mapping (uint => uint) private _crewModifiers;\\n\\n  // Mapping indicating allowed managers\\n  mapping (address => bool) private _managers;\\n\\n  event CollectionCreated(uint indexed id);\\n  event CollectionSeeded(uint indexed id);\\n\\n  // Modifier to check if calling contract has the correct minting role\\n  modifier onlyManagers {\\n    require(isManager(_msgSender()), \\\"CrewFeatures: Only managers can call this function\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Defines a collection and points to the relevant contract\\n   * @param _collId Id for the collection\\n   * @param _generator Address of the contract adhering to the appropriate interface\\n   */\\n  function setGenerator(uint _collId, ICrewGenerator _generator) external onlyOwner {\\n    _generators[_collId] = _generator;\\n    emit CollectionCreated(_collId);\\n  }\\n\\n  /**\\n   * @dev Sets the seed for a given collection\\n   * @param _collId Id for the collection\\n   * @param _seed The seed to bootstrap the generator with\\n   */\\n  function setGeneratorSeed(uint _collId, bytes32 _seed) external onlyManagers {\\n    require(address(_generators[_collId]) != address(0), \\\"CrewFeatures: collection must be defined\\\");\\n    ICrewGenerator generator = _generators[_collId];\\n    generator.setSeed(_seed);\\n    emit CollectionSeeded(_collId);\\n  }\\n\\n  /**\\n   * @dev Set a token with a specific crew collection\\n   * @param _crewId The ERC721 tokenID for the crew member\\n   * @param _collId The set ID to assign the crew member to\\n   * @param _mod An optional modifier ranging from 0 (default) to 10,000\\n   */\\n  function setToken(uint _crewId, uint _collId, uint _mod) external onlyManagers {\\n    require(address(_generators[_collId]) != address(0), \\\"CrewFeatures: collection must be defined\\\");\\n    _crewCollection[_crewId] = _collId;\\n\\n    if (_mod > 0) {\\n      _crewModifiers[_crewId] = _mod;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the generated features for a crew member as a bitpacked uint\\n   * @param _crewId The ERC721 tokenID for the crew member\\n   */\\n  function getFeatures(uint _crewId) public view returns (uint) {\\n    uint generatorId = _crewCollection[_crewId];\\n    ICrewGenerator generator = _generators[generatorId];\\n    uint features = generator.getFeatures(_crewId, _crewModifiers[_crewId]);\\n    features |= generatorId << 0;\\n    return features;\\n  }\\n\\n  /**\\n   * @dev Add a new account / contract that can mint / burn crew members\\n   * @param _manager Address of the new manager\\n   */\\n  function addManager(address _manager) external onlyOwner {\\n    _managers[_manager] = true;\\n  }\\n\\n  /**\\n   * @dev Remove a current manager\\n   * @param _manager Address of the manager to be removed\\n   */\\n  function removeManager(address _manager) external onlyOwner {\\n    _managers[_manager] = false;\\n  }\\n\\n  /**\\n   * @dev Checks if an address is a manager\\n   * @param _manager Address of contract / account to check\\n   */\\n  function isManager(address _manager) public view returns (bool) {\\n    return _managers[_manager];\\n  }\\n}\\n\"\r\n    },\r\n    \"/Users/clexmond/projects/influence/contracts/contracts/interfaces/ICrewGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\n\\ninterface ICrewGenerator {\\n\\n  function setSeed(bytes32 _seed) external;\\n\\n  function getFeatures(uint _crewId, uint _mod) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CollectionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CollectionSeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_crewId\",\"type\":\"uint256\"}],\"name\":\"getFeatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collId\",\"type\":\"uint256\"},{\"internalType\":\"contract ICrewGenerator\",\"name\":\"_generator\",\"type\":\"address\"}],\"name\":\"setGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"}],\"name\":\"setGeneratorSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_crewId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mod\",\"type\":\"uint256\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CrewFeatures","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1af64d9ca984e51b3f0da1a55c5050bcb9f2a8633ebc69d63df610b885599759"}]}