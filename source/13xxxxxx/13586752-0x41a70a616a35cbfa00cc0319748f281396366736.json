{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor() {\r\n\t\t_setOwner(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view virtual returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\t_setOwner(address(0));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\t_setOwner(newOwner);\r\n\t}\r\n\r\n\tfunction _setOwner(address newOwner) private {\r\n\t\taddress oldOwner = _owner;\r\n\t\t_owner = newOwner;\r\n\t\temit OwnershipTransferred(oldOwner, newOwner);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n\t// Booleans are more expensive than uint256 or any type that takes up a full\r\n\t// word because each write operation emits an extra SLOAD to first read the\r\n\t// slot's contents, replace the bits taken up by the boolean, and then write\r\n\t// back. This is the compiler's defense against contract upgrades and\r\n\t// pointer aliasing, and it cannot be disabled.\r\n\r\n\t// The values being non-zero value makes deployment a bit more expensive,\r\n\t// but in exchange the refund on every call to nonReentrant will be lower in\r\n\t// amount. Since refunds are capped to a percentage of the total\r\n\t// transaction's gas, it is best to keep them low in cases like this one, to\r\n\t// increase the likelihood of the full refund coming into effect.\r\n\tuint256 private constant _NOT_ENTERED = 1;\r\n\tuint256 private constant _ENTERED = 2;\r\n\r\n\tuint256 private _status;\r\n\r\n\tconstructor() {\r\n\t\t_status = _NOT_ENTERED;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Prevents a contract from calling itself, directly or indirectly.\r\n\t * Calling a `nonReentrant` function from another `nonReentrant`\r\n\t * function is not supported. It is possible to prevent this from happening\r\n\t * by making the `nonReentrant` function external, and make it call a\r\n\t * `private` function that does the actual work.\r\n\t */\r\n\tmodifier nonReentrant() {\r\n\t\t// On the first call to nonReentrant, _notEntered will be true\r\n\t\trequire(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n\t\t// Any calls to nonReentrant after this point will fail\r\n\t\t_status = _ENTERED;\r\n\r\n\t\t_;\r\n\r\n\t\t// By storing the original value once again, a refund is triggered (see\r\n\t\t// https://eips.ethereum.org/EIPS/eip-2200)\r\n\t\t_status = _NOT_ENTERED;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n\t/**\r\n\t * @dev Returns true if this contract implements the interface defined by\r\n\t * `interfaceId`. See the corresponding\r\n\t * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n\t * to learn more about how these ids are created.\r\n\t *\r\n\t * This function call must use less than 30 000 gas.\r\n\t */\r\n\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n\t/*\r\n\t * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n\t */\r\n\tbytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n\t/**\r\n\t * @dev Mapping of interface ids to whether or not it's supported.\r\n\t */\r\n\tmapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n\tconstructor () {\r\n\t\t// Derived contracts need only register support for their own interfaces,\r\n\t\t// we register support for ERC165 itself here\r\n\t\t_registerInterface(_INTERFACE_ID_ERC165);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC165-supportsInterface}.\r\n\t *\r\n\t * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n\t */\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n\t\treturn _supportedInterfaces[interfaceId];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Registers the contract as an implementer of the interface defined by\r\n\t * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n\t * registering its interface id is not required.\r\n\t *\r\n\t * See {IERC165-supportsInterface}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n\t */\r\n\tfunction _registerInterface(bytes4 interfaceId) internal virtual {\r\n\t\trequire(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n\t\t_supportedInterfaces[interfaceId] = true;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n\t/**\r\n\t * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n\t/**\r\n\t * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n\t/**\r\n\t * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n\t */\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n\t/**\r\n\t * @dev Returns the number of tokens in ``owner``'s account.\r\n\t */\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n\t/**\r\n\t * @dev Returns the owner of the `tokenId` token.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t */\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n\t/**\r\n\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must exist and be owned by `from`.\r\n\t * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) external;\r\n\r\n\t/**\r\n\t * @dev Transfers `tokenId` token from `from` to `to`.\r\n\t *\r\n\t * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must be owned by `from`.\r\n\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) external;\r\n\r\n\t/**\r\n\t * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n\t * The approval is cleared when the token is transferred.\r\n\t *\r\n\t * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The caller must own the token or be an approved operator.\r\n\t * - `tokenId` must exist.\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address to, uint256 tokenId) external;\r\n\r\n\t/**\r\n\t * @dev Returns the account approved for `tokenId` token.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t */\r\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n\t/**\r\n\t * @dev Approve or remove `operator` as an operator for the caller.\r\n\t * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The `operator` cannot be the caller.\r\n\t *\r\n\t * Emits an {ApprovalForAll} event.\r\n\t */\r\n\tfunction setApprovalForAll(address operator, bool _approved) external;\r\n\r\n\t/**\r\n\t * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n\t *\r\n\t * See {setApprovalForAll}\r\n\t */\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n\t/**\r\n\t * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must exist and be owned by `from`.\r\n\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\tbytes calldata data\r\n\t) external;\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n\t/**\r\n\t * @dev Returns the token collection name.\r\n\t */\r\n\tfunction name() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the token collection symbol.\r\n\t */\r\n\tfunction symbol() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n\t */\r\n\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\t/**\r\n\t * @dev Returns the total amount of tokens stored by the contract.\r\n\t */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n\t * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n\t */\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n\t/**\r\n\t * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n\t * Use along with {totalSupply} to enumerate all tokens.\r\n\t */\r\n\tfunction tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\tusing EnumerableSet for EnumerableSet.UintSet;\r\n\tusing EnumerableMap for EnumerableMap.UintToAddressMap;\r\n\tusing Strings for uint256;\r\n\r\n\t// Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n\t// which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n\tbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n\t// Mapping from holder address to their (enumerable) set of owned tokens\r\n\tmapping (address => EnumerableSet.UintSet) private _holderTokens;\r\n\r\n\t// Enumerable mapping from token ids to their owners\r\n\tEnumerableMap.UintToAddressMap private _tokenOwners;\r\n\r\n\t// Mapping from token ID to approved address\r\n\tmapping (uint256 => address) private _tokenApprovals;\r\n\r\n\t// Mapping from owner to operator approvals\r\n\tmapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n\t// Token name\r\n\tstring private _name;\r\n\r\n\t// Token symbol\r\n\tstring private _symbol;\r\n\r\n\t// Optional mapping for token URIs\r\n\tmapping (uint256 => string) private _tokenURIs;\r\n\r\n\t// Base URI\r\n\tstring private _baseURI;\r\n\r\n\t/*\r\n\t *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\r\n\t *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\r\n\t *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\r\n\t *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\r\n\t *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\r\n\t *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\r\n\t *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\r\n\t *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\r\n\t *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\r\n\t *\r\n\t *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\r\n\t *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\r\n\t */\r\n\tbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n\t/*\r\n\t *     bytes4(keccak256('name()')) == 0x06fdde03\r\n\t *     bytes4(keccak256('symbol()')) == 0x95d89b41\r\n\t *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\r\n\t *\r\n\t *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\r\n\t */\r\n\tbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n\r\n\t/*\r\n\t *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\r\n\t *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\r\n\t *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\r\n\t *\r\n\t *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\r\n\t */\r\n\tbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n\t/**\r\n\t * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n\t */\r\n\r\n\tconstructor (string memory name_, string memory symbol_) {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\r\n\t\t// register the supported interfaces to conform to ERC721 via ERC165\r\n\t\t_registerInterface(_INTERFACE_ID_ERC721);\r\n\t\t_registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n\t\t_registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-balanceOf}.\r\n\t */\r\n\tfunction balanceOf(address owner) public view virtual override returns (uint256) {\r\n\t\trequire(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\t\treturn _holderTokens[owner].length();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-ownerOf}.\r\n\t */\r\n\tfunction ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n\t\treturn _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Metadata-name}.\r\n\t */\r\n\tfunction name() public view virtual override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Metadata-symbol}.\r\n\t */\r\n\tfunction symbol() public view virtual override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Metadata-tokenURI}.\r\n\t */\r\n\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n\t\trequire(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n\t\tstring memory _tokenURI = _tokenURIs[tokenId];\r\n\t\tstring memory base = baseURI();\r\n\r\n\t\t// If there is no base URI, return the token URI.\r\n\t\tif (bytes(base).length == 0) {\r\n\t\t\treturn _tokenURI;\r\n\t\t}\r\n\t\t// If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\r\n\t\tif (bytes(_tokenURI).length > 0) {\r\n\t\t\treturn string(abi.encodePacked(base, _tokenURI));\r\n\t\t}\r\n\t\t// If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\r\n\t\treturn string(abi.encodePacked(base, tokenId.toString()));\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the base URI set via {_setBaseURI}. This will be\r\n\t* automatically added as a prefix in {tokenURI} to each token's URI, or\r\n\t* to the token ID if no specific URI is set for that token ID.\r\n\t*/\r\n\tfunction baseURI() public view virtual returns (string memory) {\r\n\t\treturn _baseURI;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n\t */\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n\t\treturn _holderTokens[owner].at(index);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Enumerable-totalSupply}.\r\n\t */\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n\t\t// _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\r\n\t\treturn _tokenOwners.length();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Enumerable-tokenByIndex}.\r\n\t */\r\n\tfunction tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n\t\t(uint256 tokenId, ) = _tokenOwners.at(index);\r\n\t\treturn tokenId;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-approve}.\r\n\t */\r\n\tfunction approve(address to, uint256 tokenId) public virtual override {\r\n\t\taddress owner = ERC721.ownerOf(tokenId);\r\n\t\trequire(to != owner, \"ERC721: approval to current owner\");\r\n\r\n\t\trequire(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\r\n\t\t\t\"ERC721: approve caller is not owner nor approved for all\"\r\n\t\t);\r\n\r\n\t\t_approve(to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-getApproved}.\r\n\t */\r\n\tfunction getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n\t\trequire(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n\t\treturn _tokenApprovals[tokenId];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-setApprovalForAll}.\r\n\t */\r\n\tfunction setApprovalForAll(address operator, bool approved) public virtual override {\r\n\t\trequire(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n\t\t_operatorApprovals[_msgSender()][operator] = approved;\r\n\t\temit ApprovalForAll(_msgSender(), operator, approved);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-isApprovedForAll}.\r\n\t */\r\n\tfunction isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n\t\treturn _operatorApprovals[owner][operator];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-transferFrom}.\r\n\t */\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n\t\t//solhint-disable-next-line max-line-length\r\n\t\trequire(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n\t\t_transfer(from, to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-safeTransferFrom}.\r\n\t */\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n\t\tsafeTransferFrom(from, to, tokenId, \"\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-safeTransferFrom}.\r\n\t */\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n\t\trequire(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\t\t_safeTransfer(from, to, tokenId, _data);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n\t *\r\n\t * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n\t *\r\n\t * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n\t * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must exist and be owned by `from`.\r\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n\t\t_transfer(from, to, tokenId);\r\n\t\trequire(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns whether `tokenId` exists.\r\n\t *\r\n\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n\t *\r\n\t * Tokens start existing when they are minted (`_mint`),\r\n\t * and stop existing when they are burned (`_burn`).\r\n\t */\r\n\tfunction _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n\t\treturn _tokenOwners.contains(tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t */\r\n\tfunction _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n\t\trequire(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n\t\taddress owner = ERC721.ownerOf(tokenId);\r\n\t\treturn (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Safely mints `tokenId` and transfers it to `to`.\r\n\t *\r\n\t * Requirements:\r\n\t d*\r\n\t * - `tokenId` must not exist.\r\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _safeMint(address to, uint256 tokenId) internal virtual {\r\n\t\t_safeMint(to, tokenId, \"\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n\t * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n\t */\r\n\tfunction _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n\t\t_mint(to, tokenId);\r\n\t\trequire(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Mints `tokenId` and transfers it to `to`.\r\n\t *\r\n\t * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must not exist.\r\n\t * - `to` cannot be the zero address.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _mint(address to, uint256 tokenId) internal virtual {\r\n\t\trequire(to != address(0), \"ERC721: mint to the zero address\");\r\n\t\trequire(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n\t\t_beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n\t\t_holderTokens[to].add(tokenId);\r\n\r\n\t\t_tokenOwners.set(tokenId, to);\r\n\r\n\t\temit Transfer(address(0), to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Destroys `tokenId`.\r\n\t * The approval is cleared when the token is burned.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _burn(uint256 tokenId) internal virtual {\r\n\t\taddress owner = ERC721.ownerOf(tokenId); // internal owner\r\n\r\n\t\t_beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n\t\t// Clear approvals\r\n\t\t_approve(address(0), tokenId);\r\n\r\n\t\t// Clear metadata (if any)\r\n\t\tif (bytes(_tokenURIs[tokenId]).length != 0) {\r\n\t\t\tdelete _tokenURIs[tokenId];\r\n\t\t}\r\n\r\n\t\t_holderTokens[owner].remove(tokenId);\r\n\r\n\t\t_tokenOwners.remove(tokenId);\r\n\r\n\t\temit Transfer(owner, address(0), tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers `tokenId` from `from` to `to`.\r\n\t *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must be owned by `from`.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n\t\trequire(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\"); // internal owner\r\n\t\trequire(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(from, to, tokenId);\r\n\r\n\t\t// Clear approvals from the previous owner\r\n\t\t_approve(address(0), tokenId);\r\n\r\n\t\t_holderTokens[from].remove(tokenId);\r\n\t\t_holderTokens[to].add(tokenId);\r\n\r\n\t\t_tokenOwners.set(tokenId, to);\r\n\r\n\t\temit Transfer(from, to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t */\r\n\tfunction _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\r\n\t\trequire(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\r\n\t\t_tokenURIs[tokenId] = _tokenURI;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function to set the base URI for all token IDs. It is\r\n\t * automatically added as a prefix to the value returned in {tokenURI},\r\n\t * or to the token ID if {tokenURI} is empty.\r\n\t */\r\n\tfunction _setBaseURI(string memory baseURI_) internal virtual {\r\n\t\t_baseURI = baseURI_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n\t * The call is not executed if the target address is not a contract.\r\n\t *\r\n\t * @param from address representing the previous owner of the given token ID\r\n\t * @param to target address that will receive the tokens\r\n\t * @param tokenId uint256 ID of the token to be transferred\r\n\t * @param _data bytes optional data to send along with the call\r\n\t * @return bool whether the call correctly returned the expected magic value\r\n\t */\r\n\tfunction _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n\t\tprivate returns (bool)\r\n\t{\r\n\t\tif (!to.isContract()) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tbytes memory returndata = to.functionCall(abi.encodeWithSelector(\r\n\t\t\tIERC721Receiver(to).onERC721Received.selector,\r\n\t\t\t_msgSender(),\r\n\t\t\tfrom,\r\n\t\t\ttokenId,\r\n\t\t\t_data\r\n\t\t), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n\t\tbytes4 retval = abi.decode(returndata, (bytes4));\r\n\t\treturn (retval == _ERC721_RECEIVED);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Approve `to` to operate on `tokenId`\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction _approve(address to, uint256 tokenId) internal virtual {\r\n\t\t_tokenApprovals[tokenId] = to;\r\n\t\temit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Hook that is called before any token transfer. This includes minting\r\n\t * and burning.\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n\t * transferred to `to`.\r\n\t * - When `from` is zero, `tokenId` will be minted for `to`.\r\n\t * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t *\r\n\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\t */\r\n\tfunction _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n\t/**\r\n\t * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n\t * by `operator` from `from`, this function is called.\r\n\t *\r\n\t * It must return its Solidity selector to confirm the token transfer.\r\n\t * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n\t *\r\n\t * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n\t */\r\n\tfunction onERC721Received(\r\n\t\taddress operator,\r\n\t\taddress from,\r\n\t\tuint256 tokenId,\r\n\t\tbytes calldata data\r\n\t) external returns (bytes4);\r\n}\r\n\r\n\r\n/**\r\n * @dev Extends ERC721 Non-Fungible Token Standard basic implementation\r\n *\r\n */\r\ncontract SolaStars is ERC721, ReentrancyGuard, Ownable\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 public max_tokens_per_transaction = 2;\r\n\tuint256 public token_price = 200000000000000000;\r\n\tuint256 public max_token_supply = 2000;\r\n\tuint256 public starting_index_block;\r\n\tuint256 public starting_index;\r\n\r\n\tbool public whitelist_sale_active = false;\r\n\tbool public public_raffle_sale_active = false;\r\n\tbool public general_sale_active = false;\r\n\r\n\tstring public provenance_hash = \"\";\r\n\r\n\r\n\t/**\r\n\t * @dev Nothing to see here.\r\n\t */\r\n\tconstructor() ERC721(\"The SolaVerse: SOLA-STARS\", \"SOLA-STAR\") {}\r\n\r\n\r\n\t/**\r\n\t * @dev Whitelisted method to mint a free token.\r\n\t *\r\n\t * @param _signature bytes memory\r\n\t * @param _id string memory\r\n\t * @param _timestamp string memory\r\n\t */\r\n\tfunction mintStarWhitelist(bytes memory _signature, string memory _id, string memory _timestamp) public nonReentrant\r\n\t{\r\n\t\trequire(whitelist_sale_active, \"Whitelist not open\");\r\n\t\trequire(isWalletAuthorisedToMint(msg.sender, _signature, _id, _timestamp, \"Whitelist\"), \"Not authorised to mint\");\r\n\t\trequire(IERC721(address(this)).balanceOf(msg.sender) == 0, \"Wallet has already minted\");\r\n\r\n\t\tmaybeMintTokens(1);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Whitelisted method to mint a free token and one additional token at normal price.\r\n\t *\r\n\t * @param _signature bytes memory\r\n\t * @param _id string memory\r\n\t * @param _timestamp string memory\r\n\t */\r\n\tfunction mintStarsWhitelist(bytes memory _signature, string memory _id, string memory _timestamp) public payable nonReentrant\r\n\t{\r\n\t\trequire(whitelist_sale_active, \"Whitelist not open\");\r\n\t\trequire(msg.value >= token_price, \"Not enough ETH\");\r\n\t\trequire(isWalletAuthorisedToMint(msg.sender, _signature, _id, _timestamp, \"Whitelist\"), \"Not authorised to mint\");\r\n\t\trequire(IERC721(address(this)).balanceOf(msg.sender) == 0, \"Wallet has already minted\");\r\n\r\n\t\tmaybeMintTokens(2);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Public payable method to mint the number of tokens requested based on the results of the public raffle.\r\n\t *\r\n\t * @param _num_tokens uint256\r\n\t * @param _signature bytes memory\r\n\t * @param _id string memory\r\n\t * @param _timestamp string memory\r\n\t */\r\n\tfunction mintStarRaffle(uint256 _num_tokens, bytes memory _signature, string memory _id, string memory _timestamp) public payable nonReentrant\r\n\t{\r\n\t\trequire(public_raffle_sale_active, \"Public Raffle not open\");\r\n\t\trequire(msg.value >= (token_price * _num_tokens), \"Not enough ETH\");\r\n\t\trequire(isWalletAuthorisedToMint(msg.sender, _signature, _id, _timestamp, \"Public-Raffle\"), \"Not authorised to mint\");\r\n\t\trequire(IERC721(address(this)).balanceOf(msg.sender) == 0, \"Wallet has already minted\");\r\n\r\n\t\tmaybeMintTokens(_num_tokens);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Public payable method to mint the number of tokens requested.\r\n\t *\r\n\t * @param _num_tokens uint256\r\n\t */\r\n\tfunction mintStarPublic(uint256 _num_tokens) public payable nonReentrant\r\n\t{\r\n\t\trequire(general_sale_active, \"General sale not open\");\r\n\t\trequire(msg.value >= (token_price * _num_tokens), \"Not enough ETH\");\r\n\r\n\t\tmaybeMintTokens(_num_tokens);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Mint the requested number of tokens if there's enough available.\r\n\r\n\t * @dev If we haven't set the starting index yet and this is either 1) the last saleable token or 2) the first token to be sold after the end of pre-sale, set the starting index block.\r\n\t */\r\n\tfunction maybeMintTokens(uint _num_tokens) internal\r\n\t{\r\n\t\trequire((_num_tokens > 0) && (_num_tokens <= max_tokens_per_transaction), \"Cannot mint that many tokens\");\r\n\t\trequire(totalSupply().add(_num_tokens) <= max_token_supply, \"Exceeds max tokens available\");\r\n\r\n\t\tfor (uint256 i=0; i<_num_tokens; i++)\r\n\t\t{\r\n\t\t\tuint256 new_token_id = totalSupply();\r\n\t\t\t_safeMint(msg.sender, new_token_id);\r\n\t\t}\r\n\r\n\t\tif (starting_index_block == 0 && (totalSupply() == max_token_supply))\r\n\t\t{\r\n\t\t\tstarting_index_block = block.number;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Use ECDSA to get the wallet info from the signature and check to make sure it matches the current sender's wallet.\r\n\t *\r\n\t * @param _wallet address\r\n\t * @param _signature bytes memory\r\n\t * @param _id string memory\r\n\t * @param _timestamp string memory\r\n\t * @param _sale string memory\r\n\t * @return bool\r\n\t */\r\n\tfunction isWalletAuthorisedToMint(address _wallet, bytes memory _signature, string memory _id, string memory _timestamp, string memory _sale) public pure returns(bool)\r\n\t{\r\n\t\treturn ECDSA.recover(ECDSA.toEthSignedMessageHash(keccak256(abi.encodePacked(\"Token-\", bytes(_sale), \"-Mint--\", bytes(_id), \"--\", bytes(_timestamp), \".\"))), _signature) == _wallet;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Finalize starting index.\r\n\t */\r\n\tfunction finalizeStartingIndex() public\r\n\t{\r\n\t\trequire(starting_index == 0, \"Starting index already set\");\r\n\t\trequire(starting_index_block != 0, \"Starting index block not set\");\r\n\r\n\t\tstarting_index = uint256(blockhash(starting_index_block)) % max_token_supply;\r\n\r\n\t\tif (block.number.sub(starting_index_block) > 255)\r\n\t\t{\r\n\t\t\tstarting_index = uint256(blockhash(block.number-1)) % max_token_supply;\r\n\t\t}\r\n\r\n\t\tif (starting_index == 0)\r\n\t\t{\r\n\t\t\tstarting_index = starting_index.add(1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Set the starting index block for the collection, essentially unblocking setting starting index.\r\n\t */\r\n\tfunction emergencySetStartingIndexBlock() public onlyOwner\r\n\t{\r\n\t\trequire(starting_index == 0, \"Starting index is already set\");\r\n\r\n\t\tstarting_index_block = block.number;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Set provenance once it's calculated.\r\n\t *\r\n\t * @param _provenance_hash string memory\r\n\t */\r\n\tfunction setProvenanceHash(string memory _provenance_hash) public onlyOwner\r\n\t{\r\n\t\tprovenance_hash = _provenance_hash;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Set the base URI to a new value once we reveal the tokens.\r\n\t *\r\n\t * @param _new_token_base_uri string memory\r\n\t */\r\n\tfunction setBaseURI(string memory _new_token_base_uri) public onlyOwner\r\n\t{\r\n\t\t_setBaseURI(_new_token_base_uri);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Set the flag to enable/disable the Whitelist sale.\r\n\t */\r\n\tfunction setWhitelistSaleActive(bool _active) public onlyOwner\r\n\t{\r\n\t\twhitelist_sale_active = _active;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Set the flag to enable/disable the Public Raffle sale.\r\n\t */\r\n\tfunction setPublicRaffleSaleActive(bool _active) public onlyOwner\r\n\t{\r\n\t\tpublic_raffle_sale_active = _active;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Set the flag to enable/disable the General sale.\r\n\t */\r\n\tfunction setGeneralSaleActive(bool _active) public onlyOwner\r\n\t{\r\n\t\tgeneral_sale_active = _active;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Allow owner withdrawal from the main wallet.\r\n\t */\r\n\tfunction withdraw() public onlyOwner\r\n\t{\r\n\t\tuint256 balance = address(this).balance;\r\n\t\trequire(balance > 0, \"Balance is 0\");\r\n\t\tpayable(msg.sender).transfer(balance);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tif (c < a) return (false, 0);\r\n\t\treturn (true, c);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tif (b > a) return (false, 0);\r\n\t\treturn (true, a - b);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) return (true, 0);\r\n\t\tuint256 c = a * b;\r\n\t\tif (c / a != b) return (false, 0);\r\n\t\treturn (true, c);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tif (b == 0) return (false, 0);\r\n\t\treturn (true, a / b);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tif (b == 0) return (false, 0);\r\n\t\treturn (true, a % b);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `+` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Addition cannot overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a, \"SafeMath: subtraction overflow\");\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `*` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Multiplication cannot overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) return 0;\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers, reverting on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b > 0, \"SafeMath: division by zero\");\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * reverting when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b > 0, \"SafeMath: modulo by zero\");\r\n\t\treturn a % b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n\t * message unnecessarily. For custom revert reasons use {trySub}.\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n\t * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * reverting with custom message when dividing by zero.\r\n\t *\r\n\t * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n\t * message unnecessarily. For custom revert reasons use {tryMod}.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\t/**\r\n\t * @dev Returns true if `account` is a contract.\r\n\t *\r\n\t * [IMPORTANT]\r\n\t * ====\r\n\t * It is unsafe to assume that an address for which this function returns\r\n\t * false is an externally-owned account (EOA) and not a contract.\r\n\t *\r\n\t * Among others, `isContract` will return false for the following\r\n\t * types of addresses:\r\n\t *\r\n\t *  - an externally-owned account\r\n\t *  - a contract in construction\r\n\t *  - an address where a contract will be created\r\n\t *  - an address where a contract lived, but was destroyed\r\n\t * ====\r\n\t */\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\t// This method relies on extcodesize, which returns 0 for contracts in\r\n\t\t// construction, since the code is only stored at the end of the\r\n\t\t// constructor execution.\r\n\r\n\t\tuint256 size;\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(account)\r\n\t\t}\r\n\t\treturn size > 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\t * `recipient`, forwarding all available gas and reverting on errors.\r\n\t *\r\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\t * imposed by `transfer`, making them unable to receive funds via\r\n\t * `transfer`. {sendValue} removes this limitation.\r\n\t *\r\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\t *\r\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\t * taken to not create reentrancy vulnerabilities. Consider using\r\n\t * {ReentrancyGuard} or the\r\n\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\t */\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\t\t(bool success, ) = recipient.call{value: amount}(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a Solidity function call using a low level `call`. A\r\n\t * plain `call` is an unsafe replacement for a function call: use this\r\n\t * function instead.\r\n\t *\r\n\t * If `target` reverts with a revert reason, it is bubbled up by this\r\n\t * function (like regular Solidity function calls).\r\n\t *\r\n\t * Returns the raw returned data. To convert to the expected return value,\r\n\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `target` must be a contract.\r\n\t * - calling `target` with `data` must not revert.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n\t * `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but also transferring `value` wei to `target`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the calling contract must have an ETH balance of at least `value`.\r\n\t * - the called Solidity function must be `payable`.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n\t * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.call{value: value}(data);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t *\r\n\t * _Available since v3.3._\r\n\t */\r\n\tfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n\t\treturn functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t *\r\n\t * _Available since v3.3._\r\n\t */\r\n\tfunction functionStaticCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal view returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: static call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.staticcall(data);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a delegate call.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n\t * but performing a delegate call.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction functionDelegateCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.delegatecall(data);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\tfunction _verifyCallResult(\r\n\t\tbool success,\r\n\t\tbytes memory returndata,\r\n\t\tstring memory errorMessage\r\n\t) private pure returns (bytes memory) {\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\t// Look for revert reason and bubble it up if present\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` representation.\r\n\t */\r\n\tfunction toString(uint256 value) internal pure returns (string memory) {\r\n\t\t// Inspired by OraclizeAPI's implementation - MIT licence\r\n\t\t// https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n\t\tif (value == 0) {\r\n\t\t\treturn \"0\";\r\n\t\t}\r\n\t\tuint256 temp = value;\r\n\t\tuint256 digits;\r\n\t\twhile (temp != 0) {\r\n\t\t\tdigits++;\r\n\t\t\ttemp /= 10;\r\n\t\t}\r\n\t\tbytes memory buffer = new bytes(digits);\r\n\t\tuint256 index = digits - 1;\r\n\t\ttemp = value;\r\n\t\twhile (temp != 0) {\r\n\t\t\tbuffer[index--] = bytes1(uint8(48 + temp % 10));\r\n\t\t\ttemp /= 10;\r\n\t\t}\r\n\t\treturn string(buffer);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n\tenum RecoverError {\r\n\t\tNoError,\r\n\t\tInvalidSignature,\r\n\t\tInvalidSignatureLength,\r\n\t\tInvalidSignatureS,\r\n\t\tInvalidSignatureV\r\n\t}\r\n\r\n\tfunction _throwError(RecoverError error) private pure {\r\n\t\tif (error == RecoverError.NoError) {\r\n\t\t\treturn; // no error: do nothing\r\n\t\t} else if (error == RecoverError.InvalidSignature) {\r\n\t\t\trevert(\"ECDSA: invalid signature\");\r\n\t\t} else if (error == RecoverError.InvalidSignatureLength) {\r\n\t\t\trevert(\"ECDSA: invalid signature length\");\r\n\t\t} else if (error == RecoverError.InvalidSignatureS) {\r\n\t\t\trevert(\"ECDSA: invalid signature 's' value\");\r\n\t\t} else if (error == RecoverError.InvalidSignatureV) {\r\n\t\t\trevert(\"ECDSA: invalid signature 'v' value\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address that signed a hashed message (`hash`) with\r\n\t * `signature` or error string. This address can then be used for verification purposes.\r\n\t *\r\n\t * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n\t * this function rejects them by requiring the `s` value to be in the lower\r\n\t * half order, and the `v` value to be either 27 or 28.\r\n\t *\r\n\t * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n\t * verification to be secure: it is possible to craft signatures that\r\n\t * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n\t * this is by receiving a hash of the original message (which may otherwise\r\n\t * be too long), and then calling {toEthSignedMessageHash} on it.\r\n\t *\r\n\t * Documentation for signature generation:\r\n\t * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n\t * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n\t *\r\n\t * _Available since v4.3._\r\n\t */\r\n\tfunction tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n\t\t// Check the signature length\r\n\t\t// - case 65: r,s,v signature (standard)\r\n\t\t// - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n\t\tif (signature.length == 65) {\r\n\t\t\tbytes32 r;\r\n\t\t\tbytes32 s;\r\n\t\t\tuint8 v;\r\n\t\t\t// ecrecover takes the signature parameters, and the only way to get them\r\n\t\t\t// currently is to use assembly.\r\n\t\t\tassembly {\r\n\t\t\t\tr := mload(add(signature, 0x20))\r\n\t\t\t\ts := mload(add(signature, 0x40))\r\n\t\t\t\tv := byte(0, mload(add(signature, 0x60)))\r\n\t\t\t}\r\n\t\t\treturn tryRecover(hash, v, r, s);\r\n\t\t} else if (signature.length == 64) {\r\n\t\t\tbytes32 r;\r\n\t\t\tbytes32 vs;\r\n\t\t\t// ecrecover takes the signature parameters, and the only way to get them\r\n\t\t\t// currently is to use assembly.\r\n\t\t\tassembly {\r\n\t\t\t\tr := mload(add(signature, 0x20))\r\n\t\t\t\tvs := mload(add(signature, 0x40))\r\n\t\t\t}\r\n\t\t\treturn tryRecover(hash, r, vs);\r\n\t\t} else {\r\n\t\t\treturn (address(0), RecoverError.InvalidSignatureLength);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address that signed a hashed message (`hash`) with\r\n\t * `signature`. This address can then be used for verification purposes.\r\n\t *\r\n\t * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n\t * this function rejects them by requiring the `s` value to be in the lower\r\n\t * half order, and the `v` value to be either 27 or 28.\r\n\t *\r\n\t * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n\t * verification to be secure: it is possible to craft signatures that\r\n\t * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n\t * this is by receiving a hash of the original message (which may otherwise\r\n\t * be too long), and then calling {toEthSignedMessageHash} on it.\r\n\t */\r\n\tfunction recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n\t\t(address recovered, RecoverError error) = tryRecover(hash, signature);\r\n\t\t_throwError(error);\r\n\t\treturn recovered;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n\t *\r\n\t * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n\t *\r\n\t * _Available since v4.3._\r\n\t */\r\n\tfunction tryRecover(\r\n\t\tbytes32 hash,\r\n\t\tbytes32 r,\r\n\t\tbytes32 vs\r\n\t) internal pure returns (address, RecoverError) {\r\n\t\tbytes32 s;\r\n\t\tuint8 v;\r\n\t\tassembly {\r\n\t\t\ts := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n\t\t\tv := add(shr(255, vs), 27)\r\n\t\t}\r\n\t\treturn tryRecover(hash, v, r, s);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n\t *\r\n\t * _Available since v4.2._\r\n\t */\r\n\tfunction recover(\r\n\t\tbytes32 hash,\r\n\t\tbytes32 r,\r\n\t\tbytes32 vs\r\n\t) internal pure returns (address) {\r\n\t\t(address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n\t\t_throwError(error);\r\n\t\treturn recovered;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n\t * `r` and `s` signature fields separately.\r\n\t *\r\n\t * _Available since v4.3._\r\n\t */\r\n\tfunction tryRecover(\r\n\t\tbytes32 hash,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) internal pure returns (address, RecoverError) {\r\n\t\t// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n\t\t// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n\t\t// the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\r\n\t\t// signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n\t\t//\r\n\t\t// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n\t\t// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n\t\t// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n\t\t// these malleable signatures as well.\r\n\t\tif (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n\t\t\treturn (address(0), RecoverError.InvalidSignatureS);\r\n\t\t}\r\n\t\tif (v != 27 && v != 28) {\r\n\t\t\treturn (address(0), RecoverError.InvalidSignatureV);\r\n\t\t}\r\n\r\n\t\t// If the signature is valid (and not malleable), return the signer address\r\n\t\taddress signer = ecrecover(hash, v, r, s);\r\n\t\tif (signer == address(0)) {\r\n\t\t\treturn (address(0), RecoverError.InvalidSignature);\r\n\t\t}\r\n\r\n\t\treturn (signer, RecoverError.NoError);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n\t * `r` and `s` signature fields separately.\r\n\t */\r\n\tfunction recover(\r\n\t\tbytes32 hash,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) internal pure returns (address) {\r\n\t\t(address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n\t\t_throwError(error);\r\n\t\treturn recovered;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n\t * produces hash corresponding to the one signed with the\r\n\t * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n\t * JSON-RPC method as part of EIP-191.\r\n\t *\r\n\t * See {recover}.\r\n\t */\r\n\tfunction toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n\t\t// 32 is the length in bytes of hash,\r\n\t\t// enforced by the type signature above\r\n\t\treturn keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n\t * produces hash corresponding to the one signed with the\r\n\t * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n\t * JSON-RPC method as part of EIP-191.\r\n\t *\r\n\t * See {recover}.\r\n\t */\r\n\tfunction toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns an Ethereum Signed Typed Data, created from a\r\n\t * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n\t * to the one signed with the\r\n\t * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n\t * JSON-RPC method as part of EIP-712.\r\n\t *\r\n\t * See {recover}.\r\n\t */\r\n\tfunction toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n\t// To implement this library for multiple types with as little code\r\n\t// repetition as possible, we write it in terms of a generic Set type with\r\n\t// bytes32 values.\r\n\t// The Set implementation uses private functions, and user-facing\r\n\t// implementations (such as AddressSet) are just wrappers around the\r\n\t// underlying Set.\r\n\t// This means that we can only create new EnumerableSets for types that fit\r\n\t// in bytes32.\r\n\r\n\tstruct Set {\r\n\t\t// Storage of set values\r\n\t\tbytes32[] _values;\r\n\t\t// Position of the value in the `values` array, plus 1 because index 0\r\n\t\t// means a value is not in the set.\r\n\t\tmapping(bytes32 => uint256) _indexes;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add a value to a set. O(1).\r\n\t *\r\n\t * Returns true if the value was added to the set, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction _add(Set storage set, bytes32 value) private returns (bool) {\r\n\t\tif (!_contains(set, value)) {\r\n\t\t\tset._values.push(value);\r\n\t\t\t// The value is stored at length-1, but we add 1 to all indexes\r\n\t\t\t// and use 0 as a sentinel value\r\n\t\t\tset._indexes[value] = set._values.length;\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a value from a set. O(1).\r\n\t *\r\n\t * Returns true if the value was removed from the set, that is if it was\r\n\t * present.\r\n\t */\r\n\tfunction _remove(Set storage set, bytes32 value) private returns (bool) {\r\n\t\t// We read and store the value's index to prevent multiple reads from the same storage slot\r\n\t\tuint256 valueIndex = set._indexes[value];\r\n\r\n\t\tif (valueIndex != 0) {\r\n\t\t\t// Equivalent to contains(set, value)\r\n\t\t\t// To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n\t\t\t// the array, and then remove the last element (sometimes called as 'swap and pop').\r\n\t\t\t// This modifies the order of the array, as noted in {at}.\r\n\r\n\t\t\tuint256 toDeleteIndex = valueIndex - 1;\r\n\t\t\tuint256 lastIndex = set._values.length - 1;\r\n\r\n\t\t\tif (lastIndex != toDeleteIndex) {\r\n\t\t\t\tbytes32 lastvalue = set._values[lastIndex];\r\n\r\n\t\t\t\t// Move the last value to the index where the value to delete is\r\n\t\t\t\tset._values[toDeleteIndex] = lastvalue;\r\n\t\t\t\t// Update the index for the moved value\r\n\t\t\t\tset._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n\t\t\t}\r\n\r\n\t\t\t// Delete the slot where the moved value was stored\r\n\t\t\tset._values.pop();\r\n\r\n\t\t\t// Delete the index for the deleted slot\r\n\t\t\tdelete set._indexes[value];\r\n\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the value is in the set. O(1).\r\n\t */\r\n\tfunction _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n\t\treturn set._indexes[value] != 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of values on the set. O(1).\r\n\t */\r\n\tfunction _length(Set storage set) private view returns (uint256) {\r\n\t\treturn set._values.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the value stored at position `index` in the set. O(1).\r\n\t *\r\n\t * Note that there are no guarantees on the ordering of values inside the\r\n\t * array, and it may change when more values are added or removed.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `index` must be strictly less than {length}.\r\n\t */\r\n\tfunction _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n\t\treturn set._values[index];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the entire set in an array\r\n\t *\r\n\t * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n\t * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n\t * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n\t * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n\t */\r\n\tfunction _values(Set storage set) private view returns (bytes32[] memory) {\r\n\t\treturn set._values;\r\n\t}\r\n\r\n\t// Bytes32Set\r\n\r\n\tstruct Bytes32Set {\r\n\t\tSet _inner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add a value to a set. O(1).\r\n\t *\r\n\t * Returns true if the value was added to the set, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n\t\treturn _add(set._inner, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a value from a set. O(1).\r\n\t *\r\n\t * Returns true if the value was removed from the set, that is if it was\r\n\t * present.\r\n\t */\r\n\tfunction remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n\t\treturn _remove(set._inner, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the value is in the set. O(1).\r\n\t */\r\n\tfunction contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n\t\treturn _contains(set._inner, value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of values in the set. O(1).\r\n\t */\r\n\tfunction length(Bytes32Set storage set) internal view returns (uint256) {\r\n\t\treturn _length(set._inner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the value stored at position `index` in the set. O(1).\r\n\t *\r\n\t * Note that there are no guarantees on the ordering of values inside the\r\n\t * array, and it may change when more values are added or removed.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `index` must be strictly less than {length}.\r\n\t */\r\n\tfunction at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n\t\treturn _at(set._inner, index);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the entire set in an array\r\n\t *\r\n\t * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n\t * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n\t * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n\t * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n\t */\r\n\tfunction values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n\t\treturn _values(set._inner);\r\n\t}\r\n\r\n\t// AddressSet\r\n\r\n\tstruct AddressSet {\r\n\t\tSet _inner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add a value to a set. O(1).\r\n\t *\r\n\t * Returns true if the value was added to the set, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction add(AddressSet storage set, address value) internal returns (bool) {\r\n\t\treturn _add(set._inner, bytes32(uint256(uint160(value))));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a value from a set. O(1).\r\n\t *\r\n\t * Returns true if the value was removed from the set, that is if it was\r\n\t * present.\r\n\t */\r\n\tfunction remove(AddressSet storage set, address value) internal returns (bool) {\r\n\t\treturn _remove(set._inner, bytes32(uint256(uint160(value))));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the value is in the set. O(1).\r\n\t */\r\n\tfunction contains(AddressSet storage set, address value) internal view returns (bool) {\r\n\t\treturn _contains(set._inner, bytes32(uint256(uint160(value))));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of values in the set. O(1).\r\n\t */\r\n\tfunction length(AddressSet storage set) internal view returns (uint256) {\r\n\t\treturn _length(set._inner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the value stored at position `index` in the set. O(1).\r\n\t *\r\n\t * Note that there are no guarantees on the ordering of values inside the\r\n\t * array, and it may change when more values are added or removed.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `index` must be strictly less than {length}.\r\n\t */\r\n\tfunction at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n\t\treturn address(uint160(uint256(_at(set._inner, index))));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the entire set in an array\r\n\t *\r\n\t * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n\t * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n\t * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n\t * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n\t */\r\n\tfunction values(AddressSet storage set) internal view returns (address[] memory) {\r\n\t\tbytes32[] memory store = _values(set._inner);\r\n\t\taddress[] memory result;\r\n\r\n\t\tassembly {\r\n\t\t\tresult := store\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// UintSet\r\n\r\n\tstruct UintSet {\r\n\t\tSet _inner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add a value to a set. O(1).\r\n\t *\r\n\t * Returns true if the value was added to the set, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction add(UintSet storage set, uint256 value) internal returns (bool) {\r\n\t\treturn _add(set._inner, bytes32(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a value from a set. O(1).\r\n\t *\r\n\t * Returns true if the value was removed from the set, that is if it was\r\n\t * present.\r\n\t */\r\n\tfunction remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n\t\treturn _remove(set._inner, bytes32(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the value is in the set. O(1).\r\n\t */\r\n\tfunction contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n\t\treturn _contains(set._inner, bytes32(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of values on the set. O(1).\r\n\t */\r\n\tfunction length(UintSet storage set) internal view returns (uint256) {\r\n\t\treturn _length(set._inner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the value stored at position `index` in the set. O(1).\r\n\t *\r\n\t * Note that there are no guarantees on the ordering of values inside the\r\n\t * array, and it may change when more values are added or removed.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `index` must be strictly less than {length}.\r\n\t */\r\n\tfunction at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n\t\treturn uint256(_at(set._inner, index));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the entire set in an array\r\n\t *\r\n\t * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n\t * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n\t * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n\t * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n\t */\r\n\tfunction values(UintSet storage set) internal view returns (uint256[] memory) {\r\n\t\tbytes32[] memory store = _values(set._inner);\r\n\t\tuint256[] memory result;\r\n\r\n\t\tassembly {\r\n\t\t\tresult := store\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @dev Library for managing an enumerable variant of Solidity's\r\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\r\n * type.\r\n *\r\n * Maps have the following properties:\r\n *\r\n * - Entries are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableMap.UintToAddressMap private myMap;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\r\n * supported.\r\n */\r\nlibrary EnumerableMap {\r\n\tusing EnumerableSet for EnumerableSet.Bytes32Set;\r\n\r\n\t// To implement this library for multiple types with as little code\r\n\t// repetition as possible, we write it in terms of a generic Map type with\r\n\t// bytes32 keys and values.\r\n\t// The Map implementation uses private functions, and user-facing\r\n\t// implementations (such as Uint256ToAddressMap) are just wrappers around\r\n\t// the underlying Map.\r\n\t// This means that we can only create new EnumerableMaps for types that fit\r\n\t// in bytes32.\r\n\r\n\tstruct Map {\r\n\t\t// Storage of keys\r\n\t\tEnumerableSet.Bytes32Set _keys;\r\n\t\tmapping(bytes32 => bytes32) _values;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n\t * key. O(1).\r\n\t *\r\n\t * Returns true if the key was added to the map, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction _set(\r\n\t\tMap storage map,\r\n\t\tbytes32 key,\r\n\t\tbytes32 value\r\n\t) private returns (bool) {\r\n\t\tmap._values[key] = value;\r\n\t\treturn map._keys.add(key);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a key-value pair from a map. O(1).\r\n\t *\r\n\t * Returns true if the key was removed from the map, that is if it was present.\r\n\t */\r\n\tfunction _remove(Map storage map, bytes32 key) private returns (bool) {\r\n\t\tdelete map._values[key];\r\n\t\treturn map._keys.remove(key);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the key is in the map. O(1).\r\n\t */\r\n\tfunction _contains(Map storage map, bytes32 key) private view returns (bool) {\r\n\t\treturn map._keys.contains(key);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of key-value pairs in the map. O(1).\r\n\t */\r\n\tfunction _length(Map storage map) private view returns (uint256) {\r\n\t\treturn map._keys.length();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the key-value pair stored at position `index` in the map. O(1).\r\n\t *\r\n\t * Note that there are no guarantees on the ordering of entries inside the\r\n\t * array, and it may change when more entries are added or removed.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `index` must be strictly less than {length}.\r\n\t */\r\n\tfunction _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\r\n\t\tbytes32 key = map._keys.at(index);\r\n\t\treturn (key, map._values[key]);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Tries to returns the value associated with `key`.  O(1).\r\n\t * Does not revert if `key` is not in the map.\r\n\t */\r\n\tfunction _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\r\n\t\tbytes32 value = map._values[key];\r\n\t\tif (value == bytes32(0)) {\r\n\t\t\treturn (_contains(map, key), bytes32(0));\r\n\t\t} else {\r\n\t\t\treturn (true, value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the value associated with `key`.  O(1).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `key` must be in the map.\r\n\t */\r\n\tfunction _get(Map storage map, bytes32 key) private view returns (bytes32) {\r\n\t\tbytes32 value = map._values[key];\r\n\t\trequire(value != 0 || _contains(map, key), \"EnumerableMap: nonexistent key\");\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {_get}, with a custom error message when `key` is not in the map.\r\n\t *\r\n\t * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n\t * message unnecessarily. For custom revert reasons use {_tryGet}.\r\n\t */\r\n\tfunction _get(\r\n\t\tMap storage map,\r\n\t\tbytes32 key,\r\n\t\tstring memory errorMessage\r\n\t) private view returns (bytes32) {\r\n\t\tbytes32 value = map._values[key];\r\n\t\trequire(value != 0 || _contains(map, key), errorMessage);\r\n\t\treturn value;\r\n\t}\r\n\r\n\t// UintToAddressMap\r\n\r\n\tstruct UintToAddressMap {\r\n\t\tMap _inner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n\t * key. O(1).\r\n\t *\r\n\t * Returns true if the key was added to the map, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction set(\r\n\t\tUintToAddressMap storage map,\r\n\t\tuint256 key,\r\n\t\taddress value\r\n\t) internal returns (bool) {\r\n\t\treturn _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a value from a set. O(1).\r\n\t *\r\n\t * Returns true if the key was removed from the map, that is if it was present.\r\n\t */\r\n\tfunction remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\r\n\t\treturn _remove(map._inner, bytes32(key));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the key is in the map. O(1).\r\n\t */\r\n\tfunction contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\r\n\t\treturn _contains(map._inner, bytes32(key));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of elements in the map. O(1).\r\n\t */\r\n\tfunction length(UintToAddressMap storage map) internal view returns (uint256) {\r\n\t\treturn _length(map._inner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the element stored at position `index` in the set. O(1).\r\n\t * Note that there are no guarantees on the ordering of values inside the\r\n\t * array, and it may change when more values are added or removed.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `index` must be strictly less than {length}.\r\n\t */\r\n\tfunction at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\r\n\t\t(bytes32 key, bytes32 value) = _at(map._inner, index);\r\n\t\treturn (uint256(key), address(uint160(uint256(value))));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Tries to returns the value associated with `key`.  O(1).\r\n\t * Does not revert if `key` is not in the map.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\r\n\t\t(bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\r\n\t\treturn (success, address(uint160(uint256(value))));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the value associated with `key`.  O(1).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `key` must be in the map.\r\n\t */\r\n\tfunction get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\r\n\t\treturn address(uint160(uint256(_get(map._inner, bytes32(key)))));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {get}, with a custom error message when `key` is not in the map.\r\n\t *\r\n\t * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n\t * message unnecessarily. For custom revert reasons use {tryGet}.\r\n\t */\r\n\tfunction get(\r\n\t\tUintToAddressMap storage map,\r\n\t\tuint256 key,\r\n\t\tstring memory errorMessage\r\n\t) internal view returns (address) {\r\n\t\treturn address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencySetStartingIndexBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeStartingIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"general_sale_active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_timestamp\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_sale\",\"type\":\"string\"}],\"name\":\"isWalletAuthorisedToMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_token_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_tokens_per_transaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num_tokens\",\"type\":\"uint256\"}],\"name\":\"mintStarPublic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num_tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_timestamp\",\"type\":\"string\"}],\"name\":\"mintStarRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_timestamp\",\"type\":\"string\"}],\"name\":\"mintStarWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_timestamp\",\"type\":\"string\"}],\"name\":\"mintStarsWhitelist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provenance_hash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"public_raffle_sale_active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_new_token_base_uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setGeneralSaleActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_provenance_hash\",\"type\":\"string\"}],\"name\":\"setProvenanceHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setPublicRaffleSaleActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setWhitelistSaleActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starting_index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starting_index_block\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist_sale_active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SolaStars","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://051104b07cf7cccdf627eaa0dff1baa8223b15992ecb0e65d35ee252128b2141"}]}