{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/CapitalPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./libraries/DecimalsConverter.sol\\\";\\n\\nimport \\\"./interfaces/ICapitalPool.sol\\\";\\nimport \\\"./interfaces/IClaimingRegistry.sol\\\";\\nimport \\\"./interfaces/IContractsRegistry.sol\\\";\\nimport \\\"./interfaces/ILeveragePortfolio.sol\\\";\\nimport \\\"./interfaces/ILiquidityRegistry.sol\\\";\\nimport \\\"./interfaces/IPolicyBook.sol\\\";\\nimport \\\"./interfaces/IPolicyBookFacade.sol\\\";\\nimport \\\"./interfaces/IPolicyBookRegistry.sol\\\";\\nimport \\\"./interfaces/IYieldGenerator.sol\\\";\\nimport \\\"./interfaces/ILeveragePortfolioView.sol\\\";\\n\\nimport \\\"./abstract/AbstractDependant.sol\\\";\\n\\nimport \\\"./Globals.sol\\\";\\n\\ncontract CapitalPool is ICapitalPool, OwnableUpgradeable, AbstractDependant {\\n    using SafeERC20 for ERC20;\\n    using SafeMath for uint256;\\n\\n    IClaimingRegistry public claimingRegistry;\\n    IPolicyBookRegistry public policyBookRegistry;\\n    IYieldGenerator public yieldGenerator;\\n    ILeveragePortfolio public reinsurancePool;\\n    ILiquidityRegistry public liquidityRegistry;\\n    ILeveragePortfolioView public leveragePortfolioView;\\n    ERC20 public stblToken;\\n\\n    // reisnurance pool vStable balance updated by(premium, interest from defi)\\n    uint256 public reinsurancePoolBalance;\\n    // user leverage pool vStable balance updated by(premium, addliq, withdraw liq)\\n    mapping(address => uint256) public leveragePoolBalance;\\n    // policy books vStable balances updated by(premium, addliq, withdraw liq)\\n    mapping(address => uint256) public regularCoverageBalance;\\n    // all hStable capital balance , updated by (all pool transfer + deposit to dfi + liq cushion)\\n    uint256 public hardUsdtAccumulatedBalance;\\n    // all vStable capital balance , updated by (all pool transfer + withdraw from liq cushion)\\n    uint256 public override virtualUsdtAccumulatedBalance;\\n    // pool balances tracking\\n    uint256 public liquidityCushionBalance;\\n    address public maintainer;\\n\\n    uint256 public stblDecimals;\\n\\n    event PoolBalancesUpdated(\\n        uint256 hardUsdtAccumulatedBalance,\\n        uint256 virtualUsdtAccumulatedBalance,\\n        uint256 liquidityCushionBalance,\\n        uint256 reinsurancePoolBalance\\n    );\\n\\n    event LiquidityCushionRebalanced(\\n        uint256 liquidityNeede,\\n        uint256 liquidityWithdraw,\\n        uint256 liquidityDeposit\\n    );\\n\\n    modifier broadcastBalancing() {\\n        _;\\n        emit PoolBalancesUpdated(\\n            hardUsdtAccumulatedBalance,\\n            virtualUsdtAccumulatedBalance,\\n            liquidityCushionBalance,\\n            reinsurancePoolBalance\\n        );\\n    }\\n\\n    modifier onlyPolicyBook() {\\n        require(policyBookRegistry.isPolicyBook(msg.sender), \\\"CAPL: Not a PolicyBook\\\");\\n        _;\\n    }\\n\\n    modifier onlyReinsurancePool() {\\n        require(\\n            address(reinsurancePool) == _msgSender(),\\n            \\\"RP: Caller is not a reinsurance pool contract\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyMaintainer() {\\n        require(_msgSender() == maintainer, \\\"CP: not maintainer\\\");\\n        _;\\n    }\\n\\n    function __CapitalPool_init() external initializer {\\n        __Ownable_init();\\n        maintainer = _msgSender();\\n    }\\n\\n    function setDependencies(IContractsRegistry _contractsRegistry)\\n        external\\n        override\\n        onlyInjectorOrZero\\n    {\\n        claimingRegistry = IClaimingRegistry(_contractsRegistry.getClaimingRegistryContract());\\n        policyBookRegistry = IPolicyBookRegistry(\\n            _contractsRegistry.getPolicyBookRegistryContract()\\n        );\\n        stblToken = ERC20(_contractsRegistry.getUSDTContract());\\n        yieldGenerator = IYieldGenerator(_contractsRegistry.getYieldGeneratorContract());\\n        reinsurancePool = ILeveragePortfolio(_contractsRegistry.getReinsurancePoolContract());\\n        liquidityRegistry = ILiquidityRegistry(_contractsRegistry.getLiquidityRegistryContract());\\n        leveragePortfolioView = ILeveragePortfolioView(\\n            _contractsRegistry.getLeveragePortfolioViewContract()\\n        );\\n        stblDecimals = stblToken.decimals();\\n    }\\n\\n    /// @notice distributes the policybook premiums into pools (CP, ULP , RP)\\n    /// @dev distributes the balances acording to the established percentages\\n    /// @param _stblAmount amount hardSTBL ingressed into the system\\n    /// @param _epochsNumber uint256 the number of epochs which the policy holder will pay a premium for\\n    /// @param _protocolFee uint256 the amount of protocol fee earned by premium\\n    function addPolicyHoldersHardSTBL(\\n        uint256 _stblAmount,\\n        uint256 _epochsNumber,\\n        uint256 _protocolFee\\n    ) external override onlyPolicyBook broadcastBalancing returns (uint256) {\\n        PremiumFactors memory factors;\\n\\n        factors.vStblOfCP = regularCoverageBalance[_msgSender()];\\n        factors.premiumPrice = _stblAmount.sub(_protocolFee);\\n\\n        IPolicyBookFacade policyBookFacade =\\n            IPolicyBookFacade(IPolicyBook(_msgSender()).policyBookFacade());\\n        /// TODO for v2 it is one user leverage pool , so need to figure it out after v2\\n        (\\n            factors.vStblDeployedByRP,\\n            ,\\n            factors.lStblDeployedByLP,\\n            factors.userLeveragePoolAddress\\n        ) = policyBookFacade.getPoolsData();\\n\\n        uint256 reinsurancePoolPremium;\\n        uint256 userLeveragePoolPremium;\\n        uint256 coveragePoolPremium;\\n        if (factors.vStblDeployedByRP == 0 && factors.lStblDeployedByLP == 0) {\\n            coveragePoolPremium = factors.premiumPrice;\\n        } else {\\n            factors.stblAmount = _stblAmount;\\n            factors.premiumDurationInDays = _epochsNumber.mul(EPOCH_DAYS_AMOUNT);\\n            (\\n                reinsurancePoolPremium,\\n                userLeveragePoolPremium,\\n                coveragePoolPremium\\n            ) = _calcPremiumForAllPools(factors);\\n        }\\n\\n        uint256 reinsurancePoolTotalPremium = reinsurancePoolPremium.add(_protocolFee);\\n        reinsurancePoolBalance += reinsurancePoolTotalPremium;\\n        reinsurancePool.addPolicyPremium(\\n            _epochsNumber,\\n            DecimalsConverter.convertTo18(reinsurancePoolTotalPremium, stblDecimals)\\n        );\\n\\n        if (userLeveragePoolPremium > 0) {\\n            leveragePoolBalance[factors.userLeveragePoolAddress] += userLeveragePoolPremium;\\n            ILeveragePortfolio(factors.userLeveragePoolAddress).addPolicyPremium(\\n                _epochsNumber,\\n                DecimalsConverter.convertTo18(userLeveragePoolPremium, stblDecimals)\\n            );\\n        }\\n\\n        regularCoverageBalance[_msgSender()] += coveragePoolPremium;\\n        hardUsdtAccumulatedBalance += _stblAmount;\\n        virtualUsdtAccumulatedBalance += _stblAmount;\\n        return DecimalsConverter.convertTo18(coveragePoolPremium, stblDecimals);\\n    }\\n\\n    function _calcPremiumForAllPools(PremiumFactors memory factors)\\n        internal\\n        view\\n        returns (\\n            uint256 reinsurancePoolPremium,\\n            uint256 userLeveragePoolPremium,\\n            uint256 coveragePoolPremium\\n        )\\n    {\\n        uint256 _totalCoverTokens =\\n            DecimalsConverter.convertFrom18(\\n                (IPolicyBook(_msgSender())).totalCoverTokens(),\\n                stblDecimals\\n            );\\n\\n        uint256 poolUtilizationRation =\\n            _totalCoverTokens.mul(PERCENTAGE_100).div(factors.vStblOfCP);\\n\\n        if (factors.lStblDeployedByLP > 0) {\\n            factors.participatedlStblDeployedByLP = factors\\n                .lStblDeployedByLP\\n                .mul(\\n                leveragePortfolioView.calcM(poolUtilizationRation, factors.userLeveragePoolAddress)\\n            )\\n                .div(PERCENTAGE_100);\\n        }\\n\\n        uint256 totalLiqforPremium =\\n            factors.vStblOfCP.add(factors.vStblDeployedByRP).add(\\n                factors.participatedlStblDeployedByLP\\n            );\\n\\n        uint256 premiumPerDay =\\n            factors.premiumPrice.mul(PRECISION).div(\\n                factors.premiumDurationInDays.mul(stblDecimals)\\n            );\\n\\n        factors.premiumPerDeployment = (premiumPerDay.mul(stblDecimals)).div(totalLiqforPremium);\\n\\n        reinsurancePoolPremium = _calcReinsurancePoolPremium(factors);\\n        if (factors.lStblDeployedByLP > 0) {\\n            userLeveragePoolPremium = _calcUserLeveragePoolPremium(factors);\\n        }\\n        coveragePoolPremium = _calcCoveragePoolPremium(factors);\\n    }\\n\\n    /// @notice distributes the hardSTBL from the coverage providers\\n    /// @dev emits PoolBalancedUpdated event\\n    /// @param _stblAmount amount hardSTBL ingressed into the system\\n    function addCoverageProvidersHardSTBL(uint256 _stblAmount)\\n        external\\n        override\\n        onlyPolicyBook\\n        broadcastBalancing\\n    {\\n        regularCoverageBalance[_msgSender()] += _stblAmount;\\n        hardUsdtAccumulatedBalance += _stblAmount;\\n        virtualUsdtAccumulatedBalance += _stblAmount;\\n    }\\n\\n    //// @notice distributes the hardSTBL from the leverage providers\\n    /// @dev emits PoolBalancedUpdated event\\n    /// @param _stblAmount amount hardSTBL ingressed into the system\\n    function addLeverageProvidersHardSTBL(uint256 _stblAmount)\\n        external\\n        override\\n        onlyPolicyBook\\n        broadcastBalancing\\n    {\\n        leveragePoolBalance[_msgSender()] += _stblAmount;\\n        hardUsdtAccumulatedBalance += _stblAmount;\\n        virtualUsdtAccumulatedBalance += _stblAmount;\\n    }\\n\\n    /// @notice distributes the hardSTBL from the reinsurance pool\\n    /// @dev emits PoolBalancedUpdated event\\n    /// @param _stblAmount amount hardSTBL ingressed into the system\\n    function addReinsurancePoolHardSTBL(uint256 _stblAmount)\\n        external\\n        override\\n        onlyReinsurancePool\\n        broadcastBalancing\\n    {\\n        reinsurancePoolBalance += _stblAmount;\\n        hardUsdtAccumulatedBalance += _stblAmount;\\n        virtualUsdtAccumulatedBalance += _stblAmount;\\n    }\\n\\n    /// TODO if user not withdraw the amount after request withdraw , should the amount returned back to capital pool\\n    /// @notice rebalances pools acording to v2 specification and dao enforced policies\\n    /// @dev  emits PoolBalancesUpdated\\n    function rebalanceLiquidityCushion() public override broadcastBalancing onlyMaintainer {\\n        uint256 _pendingClaimAmount = claimingRegistry.getAllPendingClaimsAmount();\\n\\n        uint256 _pendingWithdrawlAmount =\\n            liquidityRegistry.getAllPendingWithdrawalRequestsAmount();\\n\\n        uint256 _requiredLiquidity = _pendingWithdrawlAmount.add(_pendingClaimAmount);\\n\\n        _requiredLiquidity = DecimalsConverter.convertFrom18(_requiredLiquidity, stblDecimals);\\n\\n        (uint256 _deposit, uint256 _withdraw) = getDepositAndWithdraw(_requiredLiquidity);\\n\\n        liquidityCushionBalance = _requiredLiquidity;\\n\\n        hardUsdtAccumulatedBalance = 0;\\n\\n        uint256 _actualAmount;\\n        if (_deposit > 0) {\\n            stblToken.safeApprove(address(yieldGenerator), 0);\\n            stblToken.safeApprove(address(yieldGenerator), _deposit);\\n\\n            _actualAmount = yieldGenerator.deposit(_deposit);\\n            if (_actualAmount < _deposit) {\\n                hardUsdtAccumulatedBalance += _deposit.sub(_actualAmount);\\n            }\\n        } else if (_withdraw > 0) {\\n            _actualAmount = yieldGenerator.withdraw(_withdraw);\\n            if (_actualAmount < _withdraw) {\\n                liquidityCushionBalance -= _withdraw.sub(_actualAmount);\\n            }\\n        }\\n\\n        emit LiquidityCushionRebalanced(_requiredLiquidity, _withdraw, _deposit);\\n    }\\n\\n    /// @notice Fullfils policybook claims by transfering the balance to claimer\\n    /// @param _claimer, address of the claimer recieving the withdraw\\n    /// @param _stblAmount uint256 amount to be withdrawn\\n    function fundClaim(address _claimer, uint256 _stblAmount) external override onlyPolicyBook {\\n        _withdrawFromLiquidityCushion(_claimer, _stblAmount);\\n        regularCoverageBalance[_msgSender()] -= _stblAmount;\\n    }\\n\\n    /// @notice Withdraws liquidity from a specific policbybook to the user\\n    /// @param _sender, address of the user beneficiary of the withdraw\\n    /// @param _stblAmount uint256 amount to be withdrawn\\n    function withdrawLiquidity(\\n        address _sender,\\n        uint256 _stblAmount,\\n        bool _isLeveragePool\\n    ) external override onlyPolicyBook broadcastBalancing {\\n        _withdrawFromLiquidityCushion(_sender, _stblAmount);\\n\\n        if (_isLeveragePool) {\\n            leveragePoolBalance[_msgSender()] -= _stblAmount;\\n        } else {\\n            regularCoverageBalance[_msgSender()] -= _stblAmount;\\n        }\\n    }\\n\\n    function setMaintainer(address _newMainteiner) public onlyOwner {\\n        require(_newMainteiner != address(0), \\\"CP: invalid maintainer address\\\");\\n        maintainer = _newMainteiner;\\n    }\\n\\n    function _withdrawFromLiquidityCushion(address _sender, uint256 _stblAmount)\\n        internal\\n        broadcastBalancing\\n    {\\n        require(liquidityCushionBalance >= _stblAmount, \\\"CP: insuficient liquidity\\\");\\n\\n        liquidityCushionBalance = liquidityCushionBalance.sub(_stblAmount);\\n        virtualUsdtAccumulatedBalance -= _stblAmount;\\n\\n        stblToken.safeTransfer(_sender, _stblAmount);\\n    }\\n\\n    function _calcReinsurancePoolPremium(PremiumFactors memory factors)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (\\n            factors\\n                .premiumPerDeployment\\n                .mul(factors.vStblDeployedByRP)\\n                .mul(factors.premiumDurationInDays)\\n                .div(PRECISION)\\n        );\\n    }\\n\\n    function _calcUserLeveragePoolPremium(PremiumFactors memory factors)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            factors\\n                .premiumPerDeployment\\n                .mul(factors.participatedlStblDeployedByLP)\\n                .mul(factors.premiumDurationInDays)\\n                .div(PRECISION);\\n    }\\n\\n    function _calcCoveragePoolPremium(PremiumFactors memory factors)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            factors\\n                .premiumPerDeployment\\n                .mul(factors.vStblOfCP)\\n                .mul(factors.premiumDurationInDays)\\n                .div(PRECISION);\\n    }\\n\\n    function getDepositAndWithdraw(uint256 _requiredLiquidity)\\n        internal\\n        view\\n        returns (uint256 deposit, uint256 withdraw)\\n    {\\n        uint256 _availableBalance = hardUsdtAccumulatedBalance.add(liquidityCushionBalance);\\n\\n        if (_requiredLiquidity > _availableBalance) {\\n            withdraw = _requiredLiquidity.sub(_availableBalance);\\n        } else if (_requiredLiquidity < _availableBalance) {\\n            deposit = _availableBalance.sub(_requiredLiquidity);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/Globals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nuint256 constant SECONDS_IN_THE_YEAR = 365 * 24 * 60 * 60; // 365 days * 24 hours * 60 minutes * 60 seconds\\nuint256 constant DAYS_IN_THE_YEAR = 365;\\nuint256 constant MAX_INT = type(uint256).max;\\n\\nuint256 constant DECIMALS18 = 10**18;\\n\\nuint256 constant PRECISION = 10**25;\\nuint256 constant PERCENTAGE_100 = 100 * PRECISION;\\n\\nuint256 constant BLOCKS_PER_DAY = 6450;\\nuint256 constant BLOCKS_PER_YEAR = BLOCKS_PER_DAY * 365;\\n\\nuint256 constant APY_TOKENS = DECIMALS18;\\n\\nuint256 constant PROTOCOL_PERCENTAGE = 20 * PRECISION;\\n\\nuint256 constant DEFAULT_REBALANCING_THRESHOLD = 10**23;\\n\\nuint256 constant EPOCH_DAYS_AMOUNT = 7;\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/abstract/AbstractDependant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"../interfaces/IContractsRegistry.sol\\\";\\n\\nabstract contract AbstractDependant {\\n    /// @dev keccak256(AbstractDependant.setInjector(address)) - 1\\n    bytes32 private constant _INJECTOR_SLOT =\\n        0xd6b8f2e074594ceb05d47c27386969754b6ad0c15e5eb8f691399cd0be980e76;\\n\\n    modifier onlyInjectorOrZero() {\\n        address _injector = injector();\\n\\n        require(_injector == address(0) || _injector == msg.sender, \\\"Dependant: Not an injector\\\");\\n        _;\\n    }\\n\\n    function setInjector(address _injector) external onlyInjectorOrZero {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            sstore(slot, _injector)\\n        }\\n    }\\n\\n    /// @dev has to apply onlyInjectorOrZero() modifier\\n    function setDependencies(IContractsRegistry) external virtual;\\n\\n    function injector() public view returns (address _injector) {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            _injector := sload(slot)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/ICapitalPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICapitalPool {\\n    struct PremiumFactors {\\n        uint256 stblAmount;\\n        uint256 premiumDurationInDays;\\n        uint256 premiumPrice;\\n        uint256 lStblDeployedByLP;\\n        uint256 vStblDeployedByRP;\\n        uint256 vStblOfCP;\\n        uint256 premiumPerDeployment;\\n        uint256 participatedlStblDeployedByLP;\\n        address userLeveragePoolAddress;\\n    }\\n\\n    function virtualUsdtAccumulatedBalance() external view returns (uint256);\\n\\n    /// @notice distributes the policybook premiums into pools (CP, ULP , RP)\\n    /// @dev distributes the balances acording to the established percentages\\n    /// @param _stblAmount amount hardSTBL ingressed into the system\\n    /// @param _epochsNumber uint256 the number of epochs which the policy holder will pay a premium for\\n    /// @param _protocolFee uint256 the amount of protocol fee earned by premium\\n    function addPolicyHoldersHardSTBL(\\n        uint256 _stblAmount,\\n        uint256 _epochsNumber,\\n        uint256 _protocolFee\\n    ) external returns (uint256);\\n\\n    /// @notice distributes the hardSTBL from the coverage providers\\n    /// @dev emits PoolBalancedUpdated event\\n    /// @param _stblAmount amount hardSTBL ingressed into the system\\n    function addCoverageProvidersHardSTBL(uint256 _stblAmount) external;\\n\\n    /// @notice distributes the hardSTBL from the leverage providers\\n    /// @dev emits PoolBalancedUpdated event\\n    /// @param _stblAmount amount hardSTBL ingressed into the system\\n    function addLeverageProvidersHardSTBL(uint256 _stblAmount) external;\\n\\n    /// @notice distributes the hardSTBL from the reinsurance pool\\n    /// @dev emits PoolBalancedUpdated event\\n    /// @param _stblAmount amount hardSTBL ingressed into the system\\n    function addReinsurancePoolHardSTBL(uint256 _stblAmount) external;\\n\\n    /// @notice rebalances pools acording to v2 specification and dao enforced policies\\n    /// @dev  emits PoolBalancesUpdated\\n    function rebalanceLiquidityCushion() external;\\n\\n    /// @notice Fullfils policybook claims by transfering the balance to claimer\\n    /// @param _claimer, address of the claimer recieving the withdraw\\n    /// @param _stblAmount uint256 amount to be withdrawn\\n    function fundClaim(address _claimer, uint256 _stblAmount) external;\\n\\n    /// @notice Withdraws liquidity from a specific policbybook to the user\\n    /// @param _sender, address of the user beneficiary of the withdraw\\n    /// @param _stblAmount uint256 amount to be withdrawn\\n    /// @param _isLeveragePool bool wether the pool is ULP or CP(policybook)\\n    function withdrawLiquidity(\\n        address _sender,\\n        uint256 _stblAmount,\\n        bool _isLeveragePool\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IClaimingRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\n\\ninterface IClaimingRegistry {\\n    enum ClaimStatus {\\n        CAN_CLAIM,\\n        UNCLAIMABLE,\\n        PENDING,\\n        AWAITING_CALCULATION,\\n        REJECTED_CAN_APPEAL,\\n        REJECTED,\\n        ACCEPTED\\n    }\\n\\n    struct ClaimInfo {\\n        address claimer;\\n        address policyBookAddress;\\n        string evidenceURI;\\n        uint256 dateSubmitted;\\n        uint256 dateEnded;\\n        bool appeal;\\n        ClaimStatus status;\\n        uint256 claimAmount;\\n    }\\n\\n    /// @notice returns anonymous voting duration\\n    function anonymousVotingDuration(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns the whole voting duration\\n    function votingDuration(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns how many time should pass before anyone could calculate a claim result\\n    function anyoneCanCalculateClaimResultAfter(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns true if a user can buy new policy of specified PolicyBook\\n    function canBuyNewPolicy(address buyer, address policyBookAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice submits new PolicyBook claim for the user\\n    function submitClaim(\\n        address user,\\n        address policyBookAddress,\\n        string calldata evidenceURI,\\n        uint256 cover,\\n        bool appeal\\n    ) external returns (uint256);\\n\\n    /// @notice returns true if the claim with this index exists\\n    function claimExists(uint256 index) external view returns (bool);\\n\\n    /// @notice returns claim submition time\\n    function claimSubmittedTime(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns claim end time or zero in case it is pending\\n    function claimEndTime(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns true if the claim is anonymously votable\\n    function isClaimAnonymouslyVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if the claim is exposably votable\\n    function isClaimExposablyVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if claim is anonymously votable or exposably votable\\n    function isClaimVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if a claim can be calculated by anyone\\n    function canClaimBeCalculatedByAnyone(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if this claim is pending or awaiting\\n    function isClaimPending(uint256 index) external view returns (bool);\\n\\n    /// @notice returns how many claims the holder has\\n    function countPolicyClaimerClaims(address user) external view returns (uint256);\\n\\n    /// @notice returns how many pending claims are there\\n    function countPendingClaims() external view returns (uint256);\\n\\n    /// @notice returns how many claims are there\\n    function countClaims() external view returns (uint256);\\n\\n    /// @notice returns a claim index of it's claimer and an ordinal number\\n    function claimOfOwnerIndexAt(address claimer, uint256 orderIndex)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice returns pending claim index by its ordinal index\\n    function pendingClaimIndexAt(uint256 orderIndex) external view returns (uint256);\\n\\n    /// @notice returns claim index by its ordinal index\\n    function claimIndexAt(uint256 orderIndex) external view returns (uint256);\\n\\n    /// @notice returns current active claim index by policybook and claimer\\n    function claimIndex(address claimer, address policyBookAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice returns true if the claim is appealed\\n    function isClaimAppeal(uint256 index) external view returns (bool);\\n\\n    /// @notice returns current status of a claim\\n    function policyStatus(address claimer, address policyBookAddress)\\n        external\\n        view\\n        returns (ClaimStatus);\\n\\n    /// @notice returns current status of a claim\\n    function claimStatus(uint256 index) external view returns (ClaimStatus);\\n\\n    /// @notice returns the claim owner (claimer)\\n    function claimOwner(uint256 index) external view returns (address);\\n\\n    /// @notice returns the claim PolicyBook\\n    function claimPolicyBook(uint256 index) external view returns (address);\\n\\n    /// @notice returns claim info by its index\\n    function claimInfo(uint256 index) external view returns (ClaimInfo memory _claimInfo);\\n\\n    function getAllPendingClaimsAmount() external view returns (uint256 _totalClaimsAmount);\\n\\n    function getClaimableAmounts(uint256[] memory _claimIndexes) external view returns (uint256);\\n\\n    /// @notice marks the user's claim as Accepted\\n    function acceptClaim(uint256 index) external;\\n\\n    /// @notice marks the user's claim as Rejected\\n    function rejectClaim(uint256 index) external;\\n\\n    /// @notice Update Image Uri in case it contains material that is ilegal\\n    ///         or offensive.\\n    /// @dev Only the owner of the PolicyBookAdmin can erase/update evidenceUri.\\n    /// @param _claimIndex Claim Index that is going to be updated\\n    /// @param _newEvidenceURI New evidence uri. It can be blank.\\n    function updateImageUriOfClaim(uint256 _claimIndex, string calldata _newEvidenceURI) external;\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IContractsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IContractsRegistry {\\n    function getUniswapRouterContract() external view returns (address);\\n\\n    function getUniswapBMIToETHPairContract() external view returns (address);\\n\\n    function getUniswapBMIToUSDTPairContract() external view returns (address);\\n\\n    function getSushiswapRouterContract() external view returns (address);\\n\\n    function getSushiswapBMIToETHPairContract() external view returns (address);\\n\\n    function getSushiswapBMIToUSDTPairContract() external view returns (address);\\n\\n    function getSushiSwapMasterChefV2Contract() external view returns (address);\\n\\n    function getWETHContract() external view returns (address);\\n\\n    function getUSDTContract() external view returns (address);\\n\\n    function getBMIContract() external view returns (address);\\n\\n    function getPriceFeedContract() external view returns (address);\\n\\n    function getPolicyBookRegistryContract() external view returns (address);\\n\\n    function getPolicyBookFabricContract() external view returns (address);\\n\\n    function getBMICoverStakingContract() external view returns (address);\\n\\n    function getBMICoverStakingViewContract() external view returns (address);\\n\\n    function getLegacyRewardsGeneratorContract() external view returns (address);\\n\\n    function getRewardsGeneratorContract() external view returns (address);\\n\\n    function getBMIUtilityNFTContract() external view returns (address);\\n\\n    function getNFTStakingContract() external view returns (address);\\n\\n    function getLiquidityMiningContract() external view returns (address);\\n\\n    function getClaimingRegistryContract() external view returns (address);\\n\\n    function getPolicyRegistryContract() external view returns (address);\\n\\n    function getLiquidityRegistryContract() external view returns (address);\\n\\n    function getClaimVotingContract() external view returns (address);\\n\\n    function getReinsurancePoolContract() external view returns (address);\\n\\n    function getLeveragePortfolioViewContract() external view returns (address);\\n\\n    function getCapitalPoolContract() external view returns (address);\\n\\n    function getPolicyBookAdminContract() external view returns (address);\\n\\n    function getPolicyQuoteContract() external view returns (address);\\n\\n    function getLegacyBMIStakingContract() external view returns (address);\\n\\n    function getBMIStakingContract() external view returns (address);\\n\\n    function getSTKBMIContract() external view returns (address);\\n\\n    function getVBMIContract() external view returns (address);\\n\\n    function getLegacyLiquidityMiningStakingContract() external view returns (address);\\n\\n    function getLiquidityMiningStakingETHContract() external view returns (address);\\n\\n    function getLiquidityMiningStakingUSDTContract() external view returns (address);\\n\\n    function getReputationSystemContract() external view returns (address);\\n\\n    function getAaveProtocolContract() external view returns (address);\\n\\n    function getAaveLendPoolAddressProvdierContract() external view returns (address);\\n\\n    function getAaveATokenContract() external view returns (address);\\n\\n    function getCompoundProtocolContract() external view returns (address);\\n\\n    function getCompoundCTokenContract() external view returns (address);\\n\\n    function getCompoundComptrollerContract() external view returns (address);\\n\\n    function getYearnProtocolContract() external view returns (address);\\n\\n    function getYearnVaultContract() external view returns (address);\\n\\n    function getYieldGeneratorContract() external view returns (address);\\n\\n    function getShieldMiningContract() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/ILeveragePortfolio.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\ninterface ILeveragePortfolio {\\n    enum LeveragePortfolio {USERLEVERAGEPOOL, REINSURANCEPOOL}\\n    struct LevFundsFactors {\\n        uint256 netMPL;\\n        uint256 netMPLn;\\n        address policyBookAddr;\\n        // uint256 poolTotalLiquidity;\\n        // uint256 poolUR;\\n        // uint256 minUR;\\n    }\\n\\n    function targetUR() external view returns (uint256);\\n\\n    function d_ProtocolConstant() external view returns (uint256);\\n\\n    function a_ProtocolConstant() external view returns (uint256);\\n\\n    function max_ProtocolConstant() external view returns (uint256);\\n\\n    /// @notice deploy lStable from user leverage pool or reinsurance pool using 2 formulas: access by policybook.\\n    /// @param leveragePoolType LeveragePortfolio is determine the pool which call the function\\n    function deployLeverageStableToCoveragePools(LeveragePortfolio leveragePoolType)\\n        external\\n        returns (uint256);\\n\\n    /// @notice deploy the vStable from RP in v2 and for next versions it will be from RP and LP : access by policybook.\\n    function deployVirtualStableToCoveragePools() external returns (uint256);\\n\\n    /// @notice set the threshold % for re-evaluation of the lStable provided across all Coverage pools : access by owner\\n    /// @param threshold uint256 is the reevaluatation threshold\\n    function setRebalancingThreshold(uint256 threshold) external;\\n\\n    /// @notice set the protocol constant : access by owner\\n    /// @param _targetUR uint256 target utitlization ration\\n    /// @param _d_ProtocolConstant uint256 D protocol constant\\n    /// @param  _a_ProtocolConstant uint256 A protocol constant\\n    /// @param _max_ProtocolConstant uint256 the max % included\\n    function setProtocolConstant(\\n        uint256 _targetUR,\\n        uint256 _d_ProtocolConstant,\\n        uint256 _a_ProtocolConstant,\\n        uint256 _max_ProtocolConstant\\n    ) external;\\n\\n    /// @notice calc M factor by formual M = min( abs((1/ (Tur-UR))*d) /a, max)\\n    /// @param poolUR uint256 utitilization ratio for a coverage pool\\n    /// @return uint256 M facotr\\n    //function calcM(uint256 poolUR) external returns (uint256);\\n\\n    /// @return uint256 the amount of vStable stored in the pool\\n    function totalLiquidity() external view returns (uint256);\\n\\n    /// @notice add the portion of 80% of premium to user leverage pool where the leverage provide lstable : access policybook\\n    /// add the 20% of premium + portion of 80% of premium where reisnurance pool participate in coverage pools (vStable)  : access policybook\\n    /// @param epochsNumber uint256 the number of epochs which the policy holder will pay a premium for\\n    /// @param  premiumAmount uint256 the premium amount which is a portion of 80% of the premium\\n    function addPolicyPremium(uint256 epochsNumber, uint256 premiumAmount) external;\\n\\n    /// @notice Used to get a list of coverage pools which get leveraged , use with count()\\n    /// @return _coveragePools a list containing policybook addresses\\n    function listleveragedCoveragePools(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _coveragePools);\\n\\n    /// @notice get count of coverage pools which get leveraged\\n    function countleveragedCoveragePools() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/ILeveragePortfolioView.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ILeveragePortfolio.sol\\\";\\nimport \\\"./IUserLeveragePool.sol\\\";\\n\\ninterface ILeveragePortfolioView {\\n    function calcM(uint256 poolUR, address leveragePoolAddress) external view returns (uint256);\\n\\n    function calcMaxLevFunds(ILeveragePortfolio.LevFundsFactors memory factors)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calcBMIMultiplier(IUserLeveragePool.BMIMultiplierFactors memory factors)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPolicyBookFacade(address _policybookAddress)\\n        external\\n        view\\n        returns (IPolicyBookFacade _coveragePool);\\n\\n    function calcNetMPLn(\\n        ILeveragePortfolio.LeveragePortfolio leveragePoolType,\\n        address _policyBookFacade\\n    ) external view returns (uint256 _netMPLn);\\n\\n    function calcMaxVirtualFunds(address policyBookAddress)\\n        external\\n        returns (uint256 _amountToDeploy, uint256 _maxAmount);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/ILiquidityRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILiquidityRegistry {\\n    struct LiquidityInfo {\\n        address policyBookAddr;\\n        uint256 lockedAmount;\\n        uint256 availableAmount;\\n        uint256 bmiXRatio; // multiply availableAmount by this num to get stable coin\\n    }\\n\\n    struct WithdrawalRequestInfo {\\n        address policyBookAddr;\\n        uint256 requestAmount;\\n        uint256 requestSTBLAmount;\\n        uint256 availableLiquidity;\\n        uint256 readyToWithdrawDate;\\n        uint256 endWithdrawDate;\\n    }\\n\\n    struct WithdrawalSetInfo {\\n        address policyBookAddr;\\n        uint256 requestAmount;\\n        uint256 requestSTBLAmount;\\n        uint256 availableSTBLAmount;\\n    }\\n\\n    function tryToAddPolicyBook(address _userAddr, address _policyBookAddr) external;\\n\\n    function tryToRemovePolicyBook(address _userAddr, address _policyBookAddr) external;\\n\\n    function getPolicyBooksArrLength(address _userAddr) external view returns (uint256);\\n\\n    function getPolicyBooksArr(address _userAddr)\\n        external\\n        view\\n        returns (address[] memory _resultArr);\\n\\n    function getLiquidityInfos(\\n        address _userAddr,\\n        uint256 _offset,\\n        uint256 _limit\\n    ) external view returns (LiquidityInfo[] memory _resultArr);\\n\\n    function getWithdrawalRequests(\\n        address _userAddr,\\n        uint256 _offset,\\n        uint256 _limit\\n    ) external view returns (uint256 _arrLength, WithdrawalRequestInfo[] memory _resultArr);\\n\\n    function getWithdrawalSet(\\n        address _userAddr,\\n        uint256 _offset,\\n        uint256 _limit\\n    ) external view returns (uint256 _arrLength, WithdrawalSetInfo[] memory _resultArr);\\n\\n    function registerWithdrawl(address _policyBook, address _users) external;\\n\\n    function getAllPendingWithdrawalRequestsAmount()\\n        external\\n        returns (uint256 _totalWithdrawlAmount);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IPolicyBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\nimport \\\"./IClaimingRegistry.sol\\\";\\nimport \\\"./IPolicyBookFacade.sol\\\";\\n\\ninterface IPolicyBook {\\n    enum WithdrawalStatus {NONE, PENDING, READY, EXPIRED}\\n\\n    struct PolicyHolder {\\n        uint256 coverTokens;\\n        uint256 startEpochNumber;\\n        uint256 endEpochNumber;\\n        uint256 paid;\\n        uint256 reinsurancePrice;\\n    }\\n\\n    struct WithdrawalInfo {\\n        uint256 withdrawalAmount;\\n        uint256 readyToWithdrawDate;\\n        bool withdrawalAllowed;\\n    }\\n\\n    struct BuyPolicyParameters {\\n        address buyer;\\n        address holder;\\n        uint256 epochsNumber;\\n        uint256 coverTokens;\\n        uint256 distributorFee;\\n        address distributor;\\n    }\\n\\n    function policyHolders(address _holder)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function policyBookFacade() external view returns (IPolicyBookFacade);\\n\\n    function setPolicyBookFacade(address _policyBookFacade) external;\\n\\n    function EPOCH_DURATION() external view returns (uint256);\\n\\n    function stblDecimals() external view returns (uint256);\\n\\n    function READY_TO_WITHDRAW_PERIOD() external view returns (uint256);\\n\\n    function whitelisted() external view returns (bool);\\n\\n    function epochStartTime() external view returns (uint256);\\n\\n    // @TODO: should we let DAO to change contract address?\\n    /// @notice Returns address of contract this PolicyBook covers, access: ANY\\n    /// @return _contract is address of covered contract\\n    function insuranceContractAddress() external view returns (address _contract);\\n\\n    /// @notice Returns type of contract this PolicyBook covers, access: ANY\\n    /// @return _type is type of contract\\n    function contractType() external view returns (IPolicyBookFabric.ContractType _type);\\n\\n    function totalLiquidity() external view returns (uint256);\\n\\n    function totalCoverTokens() external view returns (uint256);\\n\\n    // /// @notice return MPL for user leverage pool\\n    // function userleveragedMPL() external view returns (uint256);\\n\\n    // /// @notice return MPL for reinsurance pool\\n    // function reinsurancePoolMPL() external view returns (uint256);\\n\\n    // function bmiRewardMultiplier() external view returns (uint256);\\n\\n    function withdrawalsInfo(address _userAddr)\\n        external\\n        view\\n        returns (\\n            uint256 _withdrawalAmount,\\n            uint256 _readyToWithdrawDate,\\n            bool _withdrawalAllowed\\n        );\\n\\n    function __PolicyBook_init(\\n        address _insuranceContract,\\n        IPolicyBookFabric.ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol\\n    ) external;\\n\\n    function whitelist(bool _whitelisted) external;\\n\\n    function getEpoch(uint256 time) external view returns (uint256);\\n\\n    /// @notice get STBL equivalent\\n    function convertBMIXToSTBL(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice get BMIX equivalent\\n    function convertSTBLToBMIX(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice submits new claim of the policy book\\n    function submitClaimAndInitializeVoting(string calldata evidenceURI) external;\\n\\n    /// @notice submits new appeal claim of the policy book\\n    function submitAppealAndInitializeVoting(string calldata evidenceURI) external;\\n\\n    /// @notice updates info on claim acceptance\\n    function commitClaim(\\n        address claimer,\\n        uint256 claimAmount,\\n        uint256 claimEndTime,\\n        IClaimingRegistry.ClaimStatus status\\n    ) external;\\n\\n    /// @notice forces an update of RewardsGenerator multiplier\\n    function forceUpdateBMICoverStakingRewardMultiplier() external;\\n\\n    /// @notice function to get precise current cover and liquidity\\n    function getNewCoverAndLiquidity()\\n        external\\n        view\\n        returns (uint256 newTotalCoverTokens, uint256 newTotalLiquidity);\\n\\n    /// @notice view function to get precise policy price\\n    /// @param _epochsNumber is number of epochs to cover\\n    /// @param _coverTokens is number of tokens to cover\\n    /// @param _buyer address of the user who buy the policy\\n    /// @return totalSeconds is number of seconds to cover\\n    /// @return totalPrice is the policy price which will pay by the buyer\\n    function getPolicyPrice(\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens,\\n        address _buyer\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalSeconds,\\n            uint256 totalPrice,\\n            uint256 pricePercentage\\n        );\\n\\n    /// @notice Let user to buy policy by supplying stable coin, access: ANY\\n    /// @param _buyer who is transferring funds\\n    /// @param _holder who owns coverage\\n    /// @param _epochsNumber period policy will cover\\n    /// @param _coverTokens amount paid for the coverage\\n    /// @param _distributorFee distributor fee (commission). It can't be greater than PROTOCOL_PERCENTAGE\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\n    function buyPolicy(\\n        address _buyer,\\n        address _holder,\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens,\\n        uint256 _distributorFee,\\n        address _distributor\\n    ) external returns (uint256, uint256);\\n\\n    function updateEpochsInfo() external;\\n\\n    function secondsToEndCurrentEpoch() external view returns (uint256);\\n\\n    /// @notice Let eligible contracts add liqiudity for another user by supplying stable coin\\n    /// @param _liquidityHolderAddr is address of address to assign cover\\n    /// @param _liqudityAmount is amount of stable coin tokens to secure\\n    function addLiquidityFor(address _liquidityHolderAddr, uint256 _liqudityAmount) external;\\n\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\n    /// @param _liquidityBuyerAddr address the one that transfer funds\\n    /// @param _liquidityHolderAddr address the one that owns liquidity\\n    /// @param _liquidityAmount uint256 amount to be added on behalf the sender\\n    /// @param _stakeSTBLAmount uint256 the staked amount if add liq and stake\\n    function addLiquidity(\\n        address _liquidityBuyerAddr,\\n        address _liquidityHolderAddr,\\n        uint256 _liquidityAmount,\\n        uint256 _stakeSTBLAmount\\n    ) external;\\n\\n    function getAvailableBMIXWithdrawableAmount(address _userAddr) external view returns (uint256);\\n\\n    function getWithdrawalStatus(address _userAddr) external view returns (WithdrawalStatus);\\n\\n    function requestWithdrawal(uint256 _tokensToWithdraw, address _user) external;\\n\\n    // function requestWithdrawalWithPermit(\\n    //     uint256 _tokensToWithdraw,\\n    //     uint8 _v,\\n    //     bytes32 _r,\\n    //     bytes32 _s\\n    // ) external;\\n\\n    function unlockTokens() external;\\n\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\n    function withdrawLiquidity(address sender) external returns (uint256);\\n\\n    function getAPY() external view returns (uint256);\\n\\n    /// @notice Getting user stats, access: ANY\\n    function userStats(address _user) external view returns (PolicyHolder memory);\\n\\n    /// @notice Getting number stats, access: ANY\\n    /// @return _maxCapacities is a max token amount that a user can buy\\n    /// @return _totalSTBLLiquidity is PolicyBook's liquidity\\n    /// @return _totalLeveragedLiquidity is PolicyBook's leveraged liquidity\\n    /// @return _stakedSTBL is how much stable coin are staked on this PolicyBook\\n    /// @return _annualProfitYields is its APY\\n    /// @return _annualInsuranceCost is percentage of cover tokens that is required to be paid for 1 year of insurance\\n    function numberStats()\\n        external\\n        view\\n        returns (\\n            uint256 _maxCapacities,\\n            uint256 _totalSTBLLiquidity,\\n            uint256 _totalLeveragedLiquidity,\\n            uint256 _stakedSTBL,\\n            uint256 _annualProfitYields,\\n            uint256 _annualInsuranceCost,\\n            uint256 _bmiXRatio\\n        );\\n\\n    /// @notice Getting info, access: ANY\\n    /// @return _symbol is the symbol of PolicyBook (bmiXCover)\\n    /// @return _insuredContract is an addres of insured contract\\n    /// @return _contractType is a type of insured contract\\n    /// @return _whitelisted is a state of whitelisting\\n    function info()\\n        external\\n        view\\n        returns (\\n            string memory _symbol,\\n            address _insuredContract,\\n            IPolicyBookFabric.ContractType _contractType,\\n            bool _whitelisted\\n        );\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IPolicyBookFabric.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\ninterface IPolicyBookFabric {\\n    enum ContractType {CONTRACT, STABLECOIN, SERVICE, EXCHANGE, VARIOUS}\\n\\n    /// @notice Create new Policy Book contract, access: ANY\\n    /// @param _contract is Contract to create policy book for\\n    /// @param _contractType is Contract to create policy book for\\n    /// @param _description is bmiXCover token desription for this policy book\\n    /// @param _projectSymbol replaces x in bmiXCover token symbol\\n    /// @param _initialDeposit is an amount user deposits on creation (addLiquidity())\\n    /// @return _policyBook is address of created contract\\n    function create(\\n        address _contract,\\n        ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol,\\n        uint256 _initialDeposit,\\n        address _shieldMiningToken\\n    ) external returns (address);\\n\\n    function createLeveragePools(\\n        ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IPolicyBookFacade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"./IPolicyBook.sol\\\";\\nimport \\\"./ILeveragePortfolio.sol\\\";\\n\\ninterface IPolicyBookFacade {\\n    /// @notice Let user to buy policy by supplying stable coin, access: ANY\\n    /// @param _epochsNumber period policy will cover\\n    /// @param _coverTokens amount paid for the coverage\\n    function buyPolicy(uint256 _epochsNumber, uint256 _coverTokens) external;\\n\\n    /// @param _holder who owns coverage\\n    /// @param _epochsNumber period policy will cover\\n    /// @param _coverTokens amount paid for the coverage\\n    function buyPolicyFor(\\n        address _holder,\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens\\n    ) external;\\n\\n    function policyBook() external view returns (IPolicyBook);\\n\\n    function userLiquidity(address account) external view returns (uint256);\\n\\n    /// @notice virtual funds deployed by reinsurance pool\\n    function VUreinsurnacePool() external view returns (uint256);\\n\\n    /// @notice leverage funds deployed by reinsurance pool\\n    function LUreinsurnacePool() external view returns (uint256);\\n\\n    /// @notice leverage funds deployed by user leverage pool\\n    function LUuserLeveragePool(address userLeveragePool) external view returns (uint256);\\n\\n    /// @notice total leverage funds deployed to the pool sum of (VUreinsurnacePool,LUreinsurnacePool,LUuserLeveragePool)\\n    function totalLeveragedLiquidity() external view returns (uint256);\\n\\n    function userleveragedMPL() external view returns (uint256);\\n\\n    function reinsurancePoolMPL() external view returns (uint256);\\n\\n    function rebalancingThreshold() external view returns (uint256);\\n\\n    function safePricingModel() external view returns (bool);\\n\\n    /// @notice policyBookFacade initializer\\n    /// @param pbProxy polciybook address upgreadable cotnract.\\n    function __PolicyBookFacade_init(\\n        address pbProxy,\\n        address liquidityProvider,\\n        uint256 initialDeposit\\n    ) external;\\n\\n    /// @param _epochsNumber period policy will cover\\n    /// @param _coverTokens amount paid for the coverage\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\n    function buyPolicyFromDistributor(\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens,\\n        address _distributor\\n    ) external;\\n\\n    /// @param _buyer who is buying the coverage\\n    /// @param _epochsNumber period policy will cover\\n    /// @param _coverTokens amount paid for the coverage\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\n    function buyPolicyFromDistributorFor(\\n        address _buyer,\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens,\\n        address _distributor\\n    ) external;\\n\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\n    /// @param _liquidityAmount is amount of stable coin tokens to secure\\n    function addLiquidity(uint256 _liquidityAmount) external;\\n\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\n    /// @param _user the one taht add liquidity\\n    /// @param _liquidityAmount is amount of stable coin tokens to secure\\n    function addLiquidityFromDistributorFor(address _user, uint256 _liquidityAmount) external;\\n\\n    /// @notice Let user to add liquidity by supplying stable coin and stake it,\\n    /// @dev access: ANY\\n    function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _stakeSTBLAmount) external;\\n\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\n    function withdrawLiquidity() external;\\n\\n    /// @notice fetches all the pools data\\n    /// @return uint256 VUreinsurnacePool\\n    /// @return uint256 LUreinsurnacePool\\n    /// @return uint256 LUleveragePool\\n    /// @return uint256 user leverage pool address\\n    function getPoolsData()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            address\\n        );\\n\\n    /// @notice deploy leverage funds (RP lStable, ULP lStable)\\n    /// @param  deployedAmount uint256 the deployed amount to be added or substracted from the total liquidity\\n    /// @param leveragePool whether user leverage or reinsurance leverage\\n    function deployLeverageFundsAfterRebalance(\\n        uint256 deployedAmount,\\n        ILeveragePortfolio.LeveragePortfolio leveragePool\\n    ) external;\\n\\n    /// @notice deploy virtual funds (RP vStable)\\n    /// @param  deployedAmount uint256 the deployed amount to be added to the liquidity\\n    function deployVirtualFundsAfterRebalance(uint256 deployedAmount) external;\\n\\n    /// @notice set the MPL for the user leverage and the reinsurance leverage\\n    /// @param _userLeverageMPL uint256 value of the user leverage MPL\\n    /// @param _reinsuranceLeverageMPL uint256  value of the reinsurance leverage MPL\\n    function setMPLs(uint256 _userLeverageMPL, uint256 _reinsuranceLeverageMPL) external;\\n\\n    /// @notice sets the rebalancing threshold value\\n    /// @param _newRebalancingThreshold uint256 rebalancing threshhold value\\n    function setRebalancingThreshold(uint256 _newRebalancingThreshold) external;\\n\\n    /// @notice sets the rebalancing threshold value\\n    /// @param _safePricingModel bool is pricing model safe (true) or not (false)\\n    function setSafePricingModel(bool _safePricingModel) external;\\n\\n    /// @notice returns how many BMI tokens needs to approve in order to submit a claim\\n    function getClaimApprovalAmount(address user) external view returns (uint256);\\n\\n    /// @notice upserts a withdraw request\\n    /// @dev prevents adding a request if an already pending or ready request is open.\\n    /// @param _tokensToWithdraw uint256 amount of tokens to withdraw\\n    function requestWithdrawal(uint256 _tokensToWithdraw) external;\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IPolicyBookRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\n\\ninterface IPolicyBookRegistry {\\n    struct PolicyBookStats {\\n        string symbol;\\n        address insuredContract;\\n        IPolicyBookFabric.ContractType contractType;\\n        uint256 maxCapacity;\\n        uint256 totalSTBLLiquidity;\\n        uint256 totalLeveragedLiquidity;\\n        uint256 stakedSTBL;\\n        uint256 APY;\\n        uint256 annualInsuranceCost;\\n        uint256 bmiXRatio;\\n        bool whitelisted;\\n    }\\n\\n    function policyBooksByInsuredAddress(address insuredContract) external view returns (address);\\n\\n    function policyBookFacades(address facadeAddress) external view returns (address);\\n\\n    /// @notice Adds PolicyBook to registry, access: PolicyFabric\\n    function add(\\n        address insuredContract,\\n        IPolicyBookFabric.ContractType contractType,\\n        address policyBook,\\n        address facadeAddress\\n    ) external;\\n\\n    function whitelist(address policyBookAddress, bool whitelisted) external;\\n\\n    /// @notice returns required allowances for the policybooks\\n    function getPoliciesPrices(\\n        address[] calldata policyBooks,\\n        uint256[] calldata epochsNumbers,\\n        uint256[] calldata coversTokens\\n    ) external view returns (uint256[] memory _durations, uint256[] memory _allowances);\\n\\n    /// @notice Buys a batch of policies\\n    function buyPolicyBatch(\\n        address[] calldata policyBooks,\\n        uint256[] calldata epochsNumbers,\\n        uint256[] calldata coversTokens\\n    ) external;\\n\\n    /// @notice Checks if provided address is a PolicyBook\\n    function isPolicyBook(address policyBook) external view returns (bool);\\n\\n    /// @notice Checks if provided address is a policyBookFacade\\n    function isPolicyBookFacade(address _facadeAddress) external view returns (bool);\\n\\n    /// @notice Checks if provided address is a user leverage pool\\n    function isUserLeveragePool(address policyBookAddress) external view returns (bool);\\n\\n    /// @notice Returns number of registered PolicyBooks with certain contract type\\n    function countByType(IPolicyBookFabric.ContractType contractType)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns number of registered PolicyBooks, access: ANY\\n    function count() external view returns (uint256);\\n\\n    function countByTypeWhitelisted(IPolicyBookFabric.ContractType contractType)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function countWhitelisted() external view returns (uint256);\\n\\n    /// @notice Listing registered PolicyBooks with certain contract type, access: ANY\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses with certain contract type\\n    function listByType(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr);\\n\\n    /// @notice Listing registered PolicyBooks, access: ANY\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses\\n    function list(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr);\\n\\n    function listByTypeWhitelisted(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr);\\n\\n    function listWhitelisted(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr);\\n\\n    /// @notice Listing registered PolicyBooks with stats and certain contract type, access: ANY\\n    function listWithStatsByType(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    /// @notice Listing registered PolicyBooks with stats, access: ANY\\n    function listWithStats(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    function listWithStatsByTypeWhitelisted(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    function listWithStatsWhitelisted(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    /// @notice Getting stats from policy books, access: ANY\\n    /// @param policyBooks is list of PolicyBooks addresses\\n    function stats(address[] calldata policyBooks)\\n        external\\n        view\\n        returns (PolicyBookStats[] memory _stats);\\n\\n    /// @notice Return existing Policy Book contract, access: ANY\\n    /// @param insuredContract is contract address to lookup for created IPolicyBook\\n    function policyBookFor(address insuredContract) external view returns (address);\\n\\n    /// @notice Getting stats from policy books, access: ANY\\n    /// @param insuredContracts is list of insuredContracts in registry\\n    function statsByInsuredContracts(address[] calldata insuredContracts)\\n        external\\n        view\\n        returns (PolicyBookStats[] memory _stats);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IUserLeveragePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\nimport \\\"./IClaimingRegistry.sol\\\";\\nimport \\\"./IPolicyBookFacade.sol\\\";\\n\\ninterface IUserLeveragePool {\\n    enum WithdrawalStatus {NONE, PENDING, READY, EXPIRED}\\n\\n    struct WithdrawalInfo {\\n        uint256 withdrawalAmount;\\n        uint256 readyToWithdrawDate;\\n        bool withdrawalAllowed;\\n    }\\n\\n    struct BMIMultiplierFactors {\\n        uint256 poolMultiplier;\\n        uint256 leverageProvided;\\n        uint256 multiplier;\\n    }\\n\\n    /// @notice Returns type of contract this PolicyBook covers, access: ANY\\n    /// @return _type is type of contract\\n    function contractType() external view returns (IPolicyBookFabric.ContractType _type);\\n\\n    function userLiquidity(address account) external view returns (uint256);\\n\\n    function EPOCH_DURATION() external view returns (uint256);\\n\\n    function READY_TO_WITHDRAW_PERIOD() external view returns (uint256);\\n\\n    function epochStartTime() external view returns (uint256);\\n\\n    function withdrawalsInfo(address _userAddr)\\n        external\\n        view\\n        returns (\\n            uint256 _withdrawalAmount,\\n            uint256 _readyToWithdrawDate,\\n            bool _withdrawalAllowed\\n        );\\n\\n    function __UserLeveragePool_init(\\n        IPolicyBookFabric.ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol\\n    ) external;\\n\\n    function getEpoch(uint256 time) external view returns (uint256);\\n\\n    /// @notice get STBL equivalent\\n    function convertBMIXToSTBL(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice get BMIX equivalent\\n    function convertSTBLToBMIX(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice forces an update of RewardsGenerator multiplier\\n    function forceUpdateBMICoverStakingRewardMultiplier() external;\\n\\n    /// @notice function to get precise current cover and liquidity\\n    function getNewCoverAndLiquidity()\\n        external\\n        view\\n        returns (uint256 newTotalCoverTokens, uint256 newTotalLiquidity);\\n\\n    function updateEpochsInfo() external;\\n\\n    function secondsToEndCurrentEpoch() external view returns (uint256);\\n\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\n    /// @param _liqudityAmount is amount of stable coin tokens to secure\\n    function addLiquidity(uint256 _liqudityAmount) external;\\n\\n    // /// @notice Let eligible contracts add liqiudity for another user by supplying stable coin\\n    // /// @param _liquidityHolderAddr is address of address to assign cover\\n    // /// @param _liqudityAmount is amount of stable coin tokens to secure\\n    // function addLiquidityFor(address _liquidityHolderAddr, uint256 _liqudityAmount) external;\\n\\n    function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _stakeSTBLAmount) external;\\n\\n    function getAvailableBMIXWithdrawableAmount(address _userAddr) external view returns (uint256);\\n\\n    function getWithdrawalStatus(address _userAddr) external view returns (WithdrawalStatus);\\n\\n    function requestWithdrawal(uint256 _tokensToWithdraw) external;\\n\\n    // function requestWithdrawalWithPermit(\\n    //     uint256 _tokensToWithdraw,\\n    //     uint8 _v,\\n    //     bytes32 _r,\\n    //     bytes32 _s\\n    // ) external;\\n\\n    function unlockTokens() external;\\n\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\n    function withdrawLiquidity() external;\\n\\n    function getAPY() external view returns (uint256);\\n\\n    function whitelisted() external view returns (bool);\\n\\n    function whitelist(bool _whitelisted) external;\\n\\n    /// @notice set max total liquidity for the pool\\n    /// @param _maxCapacities uint256 the max total liquidity\\n    function setMaxCapacities(uint256 _maxCapacities) external;\\n\\n    /// @notice Getting number stats, access: ANY\\n    /// @return _maxCapacities is a max liquidity of the pool\\n    /// @return _totalSTBLLiquidity is PolicyBook's liquidity\\n    /// @return _totalLeveragedLiquidity is becuase to follow the same function in policy book\\n    /// @return _stakedSTBL is how much stable coin are staked on this PolicyBook\\n    /// @return _annualProfitYields is its APY\\n    /// @return _annualInsuranceCost is becuase to follow the same function in policy book\\n    /// @return  _bmiXRatio is multiplied by 10**18. To get STBL representation\\n    function numberStats()\\n        external\\n        view\\n        returns (\\n            uint256 _maxCapacities,\\n            uint256 _totalSTBLLiquidity,\\n            uint256 _totalLeveragedLiquidity,\\n            uint256 _stakedSTBL,\\n            uint256 _annualProfitYields,\\n            uint256 _annualInsuranceCost,\\n            uint256 _bmiXRatio\\n        );\\n\\n    /// @notice Getting info, access: ANY\\n    /// @return _symbol is the symbol of PolicyBook (bmiXCover)\\n    /// @return _insuredContract is an addres of insured contract\\n    /// @return _contractType is becuase to follow the same function in policy book\\n    /// @return _whitelisted is a state of whitelisting\\n    function info()\\n        external\\n        view\\n        returns (\\n            string memory _symbol,\\n            address _insuredContract,\\n            IPolicyBookFabric.ContractType _contractType,\\n            bool _whitelisted\\n        );\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IYieldGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IYieldGenerator {\\n    enum DefiProtocols {AAVE, COMPOUND, YEARN}\\n\\n    struct DefiProtocol {\\n        uint256 targetAllocation;\\n        uint256 currentAllocation;\\n        uint256 rebalanceWeight;\\n        uint256 depositedAmount;\\n        bool whiteListed;\\n        bool threshold;\\n        bool withdrawMax;\\n    }\\n\\n    /// @notice deposit stable coin into multiple defi protocols using formulas, access: capital pool\\n    /// @param amount uint256 the amount of stable coin to deposit\\n    function deposit(uint256 amount) external returns (uint256);\\n\\n    /// @notice withdraw stable coin from mulitple defi protocols using formulas, access: capital pool\\n    /// @param amount uint256 the amount of stable coin to withdraw\\n    function withdraw(uint256 amount) external returns (uint256);\\n\\n    /// @notice set the protocol settings for each defi protocol (allocations, whitelisted, threshold), access: owner\\n    /// @param whitelisted bool[] list of whitelisted values for each protocol\\n    /// @param allocations uint256[] list of allocations value for each protocol\\n    /// @param threshold bool[] list of threshold values for each protocol\\n    function setProtocolSettings(\\n        bool[] calldata whitelisted,\\n        uint256[] calldata allocations,\\n        bool[] calldata threshold\\n    ) external;\\n\\n    /// @notice Claims farmed tokens and sends it to the reinsurance pool\\n    function claimRewards() external;\\n\\n    /// @notice returns defi protocol info by its index\\n    /// @param index uint256 the index of the defi protocol\\n    function defiProtocol(uint256 index) external view returns (DefiProtocol memory _defiProtocol);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/libraries/DecimalsConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/// @notice the intention of this library is to be able to easily convert\\n///     one amount of tokens with N decimal places\\n///     to another amount with M decimal places\\nlibrary DecimalsConverter {\\n    using SafeMath for uint256;\\n\\n    function convert(\\n        uint256 amount,\\n        uint256 baseDecimals,\\n        uint256 destinationDecimals\\n    ) internal pure returns (uint256) {\\n        if (baseDecimals > destinationDecimals) {\\n            amount = amount.div(10**(baseDecimals - destinationDecimals));\\n        } else if (baseDecimals < destinationDecimals) {\\n            amount = amount.mul(10**(destinationDecimals - baseDecimals));\\n        }\\n\\n        return amount;\\n    }\\n\\n    function convertTo18(uint256 amount, uint256 baseDecimals) internal pure returns (uint256) {\\n        return convert(amount, baseDecimals, 18);\\n    }\\n\\n    function convertFrom18(uint256 amount, uint256 destinationDecimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return convert(amount, 18, destinationDecimals);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityNeede\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityDeposit\",\"type\":\"uint256\"}],\"name\":\"LiquidityCushionRebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hardUsdtAccumulatedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"virtualUsdtAccumulatedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityCushionBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reinsurancePoolBalance\",\"type\":\"uint256\"}],\"name\":\"PoolBalancesUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__CapitalPool_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stblAmount\",\"type\":\"uint256\"}],\"name\":\"addCoverageProvidersHardSTBL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stblAmount\",\"type\":\"uint256\"}],\"name\":\"addLeverageProvidersHardSTBL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stblAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochsNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"addPolicyHoldersHardSTBL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stblAmount\",\"type\":\"uint256\"}],\"name\":\"addReinsurancePoolHardSTBL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingRegistry\",\"outputs\":[{\"internalType\":\"contract IClaimingRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stblAmount\",\"type\":\"uint256\"}],\"name\":\"fundClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardUsdtAccumulatedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"injector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"leveragePoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leveragePortfolioView\",\"outputs\":[{\"internalType\":\"contract ILeveragePortfolioView\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityCushionBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRegistry\",\"outputs\":[{\"internalType\":\"contract ILiquidityRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintainer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyBookRegistry\",\"outputs\":[{\"internalType\":\"contract IPolicyBookRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceLiquidityCushion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"regularCoverageBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinsurancePool\",\"outputs\":[{\"internalType\":\"contract ILeveragePortfolio\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinsurancePoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractsRegistry\",\"name\":\"_contractsRegistry\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"name\":\"setInjector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMainteiner\",\"type\":\"address\"}],\"name\":\"setMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stblDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stblToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualUsdtAccumulatedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stblAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLeveragePool\",\"type\":\"bool\"}],\"name\":\"withdrawLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldGenerator\",\"outputs\":[{\"internalType\":\"contract IYieldGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CapitalPool","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}