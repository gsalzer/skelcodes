{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Claimable is Context {\r\n  address private _owner;\r\n  address public pendingOwner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  event NewPendingOwner(address indexed owner);\r\n\r\n  constructor() {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(_msgSender() == owner(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyPendingOwner() {\r\n    require(_msgSender() == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(owner(), address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(pendingOwner == address(0));\r\n    pendingOwner = newOwner;\r\n    emit NewPendingOwner(newOwner);\r\n  }\r\n\r\n  function cancelTransferOwnership() public onlyOwner {\r\n    require(pendingOwner != address(0));\r\n    delete pendingOwner;\r\n    emit NewPendingOwner(address(0));\r\n  }\r\n\r\n  function claimOwnership() public onlyPendingOwner {\r\n    emit OwnershipTransferred(owner(), pendingOwner);\r\n    _owner = pendingOwner;\r\n    delete pendingOwner;\r\n  }\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\ninterface IFujiOracle {\r\n  function getPriceOf(\r\n    address _collateralAsset,\r\n    address _borrowAsset,\r\n    uint8 _decimals\r\n  ) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title Errors library\r\n * @author Fuji\r\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\r\n * @dev Error messages prefix glossary:\r\n *  - VL = Validation Logic 100 series\r\n *  - MATH = Math libraries 200 series\r\n *  - RF = Refinancing 300 series\r\n *  - VLT = vault 400 series\r\n *  - SP = Special 900 series\r\n */\r\nlibrary Errors {\r\n  //Errors\r\n  string public constant VL_INDEX_OVERFLOW = \"100\"; // index overflows uint128\r\n  string public constant VL_INVALID_MINT_AMOUNT = \"101\"; //invalid amount to mint\r\n  string public constant VL_INVALID_BURN_AMOUNT = \"102\"; //invalid amount to burn\r\n  string public constant VL_AMOUNT_ERROR = \"103\"; //Input value >0, and for ETH msg.value and amount shall match\r\n  string public constant VL_INVALID_WITHDRAW_AMOUNT = \"104\"; //Withdraw amount exceeds provided collateral, or falls undercollaterized\r\n  string public constant VL_INVALID_BORROW_AMOUNT = \"105\"; //Borrow amount does not meet collaterization\r\n  string public constant VL_NO_DEBT_TO_PAYBACK = \"106\"; //Msg sender has no debt amount to be payback\r\n  string public constant VL_MISSING_ERC20_ALLOWANCE = \"107\"; //Msg sender has not approved ERC20 full amount to transfer\r\n  string public constant VL_USER_NOT_LIQUIDATABLE = \"108\"; //User debt position is not liquidatable\r\n  string public constant VL_DEBT_LESS_THAN_AMOUNT = \"109\"; //User debt is less than amount to partial close\r\n  string public constant VL_PROVIDER_ALREADY_ADDED = \"110\"; // Provider is already added in Provider Array\r\n  string public constant VL_NOT_AUTHORIZED = \"111\"; //Not authorized\r\n  string public constant VL_INVALID_COLLATERAL = \"112\"; //There is no Collateral, or Collateral is not in active in vault\r\n  string public constant VL_NO_ERC20_BALANCE = \"113\"; //User does not have ERC20 balance\r\n  string public constant VL_INPUT_ERROR = \"114\"; //Check inputs. For ERC1155 batch functions, array sizes should match.\r\n  string public constant VL_ASSET_EXISTS = \"115\"; //Asset intended to be added already exists in FujiERC1155\r\n  string public constant VL_ZERO_ADDR_1155 = \"116\"; //ERC1155: balance/transfer for zero address\r\n  string public constant VL_NOT_A_CONTRACT = \"117\"; //Address is not a contract.\r\n  string public constant VL_INVALID_ASSETID_1155 = \"118\"; //ERC1155 Asset ID is invalid.\r\n  string public constant VL_NO_ERC1155_BALANCE = \"119\"; //ERC1155: insufficient balance for transfer.\r\n  string public constant VL_MISSING_ERC1155_APPROVAL = \"120\"; //ERC1155: transfer caller is not owner nor approved.\r\n  string public constant VL_RECEIVER_REJECT_1155 = \"121\"; //ERC1155Receiver rejected tokens\r\n  string public constant VL_RECEIVER_CONTRACT_NON_1155 = \"122\"; //ERC1155: transfer to non ERC1155Receiver implementer\r\n  string public constant VL_OPTIMIZER_FEE_SMALL = \"123\"; //Fuji OptimizerFee has to be > 1 RAY (1e27)\r\n  string public constant VL_UNDERCOLLATERIZED_ERROR = \"124\"; // Flashloan-Flashclose cannot be used when User's collateral is worth less than intended debt position to close.\r\n  string public constant VL_MINIMUM_PAYBACK_ERROR = \"125\"; // Minimum Amount payback should be at least Fuji Optimizerfee accrued interest.\r\n  string public constant VL_HARVESTING_FAILED = \"126\"; // Harvesting Function failed, check provided _farmProtocolNum or no claimable balance.\r\n  string public constant VL_FLASHLOAN_FAILED = \"127\"; // Flashloan failed\r\n  string public constant VL_ERC1155_NOT_TRANSFERABLE = \"128\"; // ERC1155: Not Transferable\r\n  string public constant VL_SWAP_SLIPPAGE_LIMIT_EXCEED = \"129\"; // ERC1155: Not Transferable\r\n  string public constant VL_ZERO_ADDR = \"130\"; // Zero Address\r\n\r\n  string public constant MATH_DIVISION_BY_ZERO = \"201\";\r\n  string public constant MATH_ADDITION_OVERFLOW = \"202\";\r\n  string public constant MATH_MULTIPLICATION_OVERFLOW = \"203\";\r\n\r\n  string public constant RF_INVALID_RATIO_VALUES = \"301\"; // Ratio Value provided is invalid, _ratioA/_ratioB <= 1, and > 0, or activeProvider borrowBalance = 0\r\n\r\n  string public constant VLT_CALLER_MUST_BE_VAULT = \"401\"; // The caller of this function must be a vault\r\n\r\n  string public constant ORACLE_INVALID_LENGTH = \"501\"; // The assets length and price feeds length doesn't match\r\n  string public constant ORACLE_NONE_PRICE_FEED = \"502\"; // The price feed is not found\r\n}\r\n\r\n\r\ncontract FujiOracle is IFujiOracle, Claimable {\r\n  // mapping from asset address to its price feed oracle in USD - decimals: 8\r\n  mapping(address => address) public usdPriceFeeds;\r\n\r\n  constructor(address[] memory _assets, address[] memory _priceFeeds) Claimable() {\r\n    require(_assets.length == _priceFeeds.length, Errors.ORACLE_INVALID_LENGTH);\r\n    for (uint256 i = 0; i < _assets.length; i++) {\r\n      usdPriceFeeds[_assets[i]] = _priceFeeds[i];\r\n    }\r\n  }\r\n\r\n  function setPriceFeed(address _asset, address _priceFeed) public onlyOwner {\r\n    usdPriceFeeds[_asset] = _priceFeed;\r\n  }\r\n\r\n  /// @dev Calculates the exchange rate n given decimals (_borrowAsset / _collateralAsset Exchange Rate)\r\n  /// @param _collateralAsset the collateral asset, zero-address for USD\r\n  /// @param _borrowAsset the borrow asset, zero-address for USD\r\n  /// @param _decimals the decimals of the price output\r\n  /// @return price The exchange rate of the given assets pair\r\n  function getPriceOf(\r\n    address _collateralAsset,\r\n    address _borrowAsset,\r\n    uint8 _decimals\r\n  ) external view override returns (uint256 price) {\r\n    price = 10**uint256(_decimals);\r\n\r\n    if (_borrowAsset != address(0)) {\r\n      price = price * _getUSDPrice(_borrowAsset);\r\n    } else {\r\n      price = price * (10**8);\r\n    }\r\n\r\n    if (_collateralAsset != address(0)) {\r\n      price = price / _getUSDPrice(_collateralAsset);\r\n    } else {\r\n      price = price / (10**8);\r\n    }\r\n  }\r\n\r\n  /// @dev Calculates the USD price of asset\r\n  /// @param _asset the asset address\r\n  /// @return price USD price of the give asset\r\n  function _getUSDPrice(address _asset) internal view returns (uint256 price) {\r\n    require(usdPriceFeeds[_asset] != address(0), Errors.ORACLE_NONE_PRICE_FEED);\r\n\r\n    (, int256 latestPrice, , , ) = AggregatorV3Interface(usdPriceFeeds[_asset]).latestRoundData();\r\n\r\n    price = uint256(latestPrice);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_priceFeeds\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cancelTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowAsset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"getPriceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usdPriceFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FujiOracle","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000050000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000956f47f50a910163d8bf957cf5846d573e7f87ca0000000000000000000000000000000000000000000000000000000000000005000000000000000000000000aed0c38402a5d19df6e4c03f4e2dced6e29c1ee90000000000000000000000008fffffd4afb6115b954bd326cbe7b4ba576818f60000000000000000000000003e7d1eab13ad0104d2750b8863b489d65364e32d0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b841900000000000000000000000031e0a88fecb6ec0a411dbe0e9e76391498296ee9","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://43437552ec1b9d7a2baf3b2f8c5938d496e71e3b7ccf0185d69f1668249250d6"}]}