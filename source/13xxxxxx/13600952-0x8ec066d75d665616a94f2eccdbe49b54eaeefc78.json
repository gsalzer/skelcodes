{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/basic.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"./interfaces.sol\\\";\\nimport { Stores } from \\\"./stores.sol\\\";\\nimport { DSMath } from \\\"./math.sol\\\";\\n\\nabstract contract Basic is DSMath, Stores {\\n\\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = (_amt / 10 ** (18 - _dec));\\n    }\\n\\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = mul(_amt, 10 ** (18 - _dec));\\n    }\\n\\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\\n        _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));\\n    }\\n\\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\\n        buyDec = address(buyAddr) == ethAddr ?  18 : buyAddr.decimals();\\n        sellDec = address(sellAddr) == ethAddr ?  18 : sellAddr.decimals();\\n    }\\n\\n    function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {\\n        return abi.encode(eventName, eventParam);\\n    }\\n\\n    function approve(TokenInterface token, address spender, uint256 amount) internal {\\n        try token.approve(spender, amount) {\\n\\n        } catch {\\n            token.approve(spender, 0);\\n            token.approve(spender, amount);\\n        }\\n    }\\n\\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\\n        _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);\\n        _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);\\n    }\\n\\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\\n        if(isEth) token.deposit{value: amount}();\\n    }\\n\\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\\n       if(isEth) {\\n            approve(token, address(token), amount);\\n            token.withdraw(amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n    function transfer(address, uint) external;\\n    function transferFrom(address, address, uint) external;\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint);\\n}\\n\\ninterface MemoryInterface {\\n    function getUint(uint id) external returns (uint num);\\n    function setUint(uint id, uint val) external;\\n}\\n\\ninterface InstaMapping {\\n    function cTokenMapping(address) external view returns (address);\\n    function gemJoinMapping(bytes32) external view returns (address);\\n}\\n\\ninterface AccountInterface {\\n    function enable(address) external;\\n    function disable(address) external;\\n    function isAuth(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/common/math.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n  uint constant WAD = 10 ** 18;\\n  uint constant RAY = 10 ** 27;\\n\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(x, y);\\n  }\\n\\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\\n    z = SafeMath.sub(x, y);\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.mul(x, y);\\n  }\\n\\n  function div(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.div(x, y);\\n  }\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n  }\\n\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n  }\\n\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  function toInt(uint x) internal pure returns (int y) {\\n    y = int(x);\\n    require(y >= 0, \\\"int-overflow\\\");\\n  }\\n\\n  function toRad(uint wad) internal pure returns (uint rad) {\\n    rad = mul(wad, 10 ** 27);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/common/stores.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { MemoryInterface, InstaMapping } from \\\"./interfaces.sol\\\";\\n\\n\\nabstract contract Stores {\\n\\n  /**\\n   * @dev Return ethereum address\\n   */\\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /**\\n   * @dev Return Wrapped ETH address\\n   */\\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /**\\n   * @dev Return memory variable address\\n   */\\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\\n\\n  /**\\n   * @dev Return InstaDApp Mapping Addresses\\n   */\\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\\n\\n  /**\\n   * @dev Get Uint value from InstaMemory Contract.\\n   */\\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\\n  }\\n\\n  /**\\n  * @dev Set Uint value in InstaMemory Contract.\\n  */\\n  function setUint(uint setId, uint val) virtual internal {\\n    if (setId != 0) instaMemory.setUint(setId, val);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/connectors/ubiquity/events.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ncontract Events {\\n\\tevent LogDeposit(\\n\\t\\taddress indexed userAddress,\\n\\t\\taddress indexed token,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 indexed bondingShareId,\\n\\t\\tuint256 lpAmount,\\n\\t\\tuint256 durationWeeks,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n\\tevent LogWithdraw(\\n\\t\\taddress indexed userAddress,\\n\\t\\tuint256 indexed bondingShareId,\\n\\t\\tuint256 lpAmount,\\n\\t\\tuint256 endBlock,\\n\\t\\taddress indexed token,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n}\\n\"\r\n    },\r\n    \"contracts/connectors/ubiquity/helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport { Basic } from \\\"../../common/basic.sol\\\";\\nimport { IUbiquityAlgorithmicDollarManager } from \\\"./interfaces.sol\\\";\\n\\nabstract contract Helpers is Basic {\\n\\t/**\\n\\t * @dev Ubiquity Algorithmic Dollar Manager\\n\\t */\\n\\tIUbiquityAlgorithmicDollarManager internal constant ubiquityManager =\\n\\t\\tIUbiquityAlgorithmicDollarManager(\\n\\t\\t\\t0x4DA97a8b831C345dBe6d16FF7432DF2b7b776d98\\n\\t\\t);\\n\\n\\t/**\\n\\t * @dev DAI Address\\n\\t */\\n\\taddress internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\\n\\t/**\\n\\t * @dev USDC Address\\n\\t */\\n\\taddress internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n\\n\\t/**\\n\\t * @dev USDT Address\\n\\t */\\n\\taddress internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n\\t/**\\n\\t * @dev Curve 3CRV Token Address\\n\\t */\\n\\taddress internal constant CRV3 = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\\n\\n\\t/**\\n\\t * @dev Curve 3Pool Address\\n\\t */\\n\\taddress internal constant Pool3 =\\n\\t\\t0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\\n\\n\\t/**\\n\\t * @dev Ubiquity Algorithmic Dollar Address\\n\\t */\\n\\tfunction getUAD() internal returns (address) {\\n\\t\\treturn ubiquityManager.dollarTokenAddress();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Ubiquity Metapool uAD / 3CRV Address\\n\\t */\\n\\tfunction getUADCRV3() internal returns (address) {\\n\\t\\treturn ubiquityManager.stableSwapMetaPoolAddress();\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/connectors/ubiquity/interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IUbiquityBondingV2 {\\n\\tstruct Bond {\\n\\t\\taddress minter;\\n\\t\\tuint256 lpFirstDeposited;\\n\\t\\tuint256 creationBlock;\\n\\t\\tuint256 lpRewardDebt;\\n\\t\\tuint256 endBlock;\\n\\t\\tuint256 lpAmount;\\n\\t}\\n\\n\\tfunction deposit(uint256 lpAmount, uint256 durationWeeks)\\n\\t\\texternal\\n\\t\\treturns (uint256 bondingShareId);\\n\\n\\tfunction removeLiquidity(uint256 lpAmount, uint256 bondId) external;\\n\\n\\tfunction holderTokens(address) external view returns (uint256[] memory);\\n\\n\\tfunction totalLP() external view returns (uint256);\\n\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\tfunction getBond(uint256 bondId) external returns (Bond memory bond);\\n}\\n\\ninterface IUbiquityMetaPool {\\n\\tfunction add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount)\\n\\t\\texternal\\n\\t\\treturns (uint256);\\n\\n\\tfunction remove_liquidity_one_coin(\\n\\t\\tuint256 lpAmount,\\n\\t\\tint128 i,\\n\\t\\tuint256 min_amount\\n\\t) external returns (uint256);\\n}\\n\\ninterface I3Pool {\\n\\tfunction add_liquidity(\\n\\t\\tuint256[3] calldata _amounts,\\n\\t\\tuint256 _min_mint_amount\\n\\t) external;\\n\\n\\tfunction remove_liquidity_one_coin(\\n\\t\\tuint256 lpAmount,\\n\\t\\tint128 i,\\n\\t\\tuint256 min_amount\\n\\t) external;\\n}\\n\\ninterface IUbiquityAlgorithmicDollarManager {\\n\\tfunction dollarTokenAddress() external returns (address);\\n\\n\\tfunction stableSwapMetaPoolAddress() external returns (address);\\n\\n\\tfunction bondingContractAddress() external returns (address);\\n\\n\\tfunction bondingShareAddress() external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/connectors/ubiquity/main.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\n/**\\n * @title Ubiquity.\\n * @dev Ubiquity Dollar (uAD).\\n */\\n\\nimport { TokenInterface } from \\\"../../common/interfaces.sol\\\";\\nimport { IUbiquityBondingV2, IUbiquityMetaPool, I3Pool } from \\\"./interfaces.sol\\\";\\nimport { Helpers } from \\\"./helpers.sol\\\";\\nimport { Events } from \\\"./events.sol\\\";\\n\\nabstract contract UbiquityResolver is Helpers, Events {\\n\\t/**\\n\\t * @dev Deposit into Ubiquity protocol\\n\\t * @notice 3POOL (DAI / USDC / USDT) => METAPOOL (3CRV / uAD) => uAD3CRV-f => Ubiquity BondingShare\\n\\t * @notice STEP 1 : 3POOL (DAI / USDC / USDT) => 3CRV\\n\\t * @notice STEP 2 : METAPOOL(3CRV / UAD) => uAD3CRV-f\\n\\t * @notice STEP 3 : uAD3CRV-f => Ubiquity BondingShare\\n\\t * @param token Token deposited : DAI, USDC, USDT, 3CRV, uAD or uAD3CRV-f\\n\\t * @param amount Amount of tokens to deposit (For max: `uint256(-1)`)\\n\\t * @param durationWeeks Duration in weeks tokens will be locked (4-208)\\n\\t * @param getId ID to retrieve amt.\\n\\t * @param setId ID stores the bonding share id of tokens deposited.\\n\\t */\\n\\tfunction deposit(\\n\\t\\taddress token,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 durationWeeks,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\taddress UAD3CRVf = getUADCRV3();\\n\\t\\tbool[6] memory tok = [\\n\\t\\t\\ttoken == DAI, // 0\\n\\t\\t\\ttoken == USDC, // 1\\n\\t\\t\\ttoken == USDT, // 2\\n\\t\\t\\ttoken == CRV3, // 3\\n\\t\\t\\ttoken == getUAD(), // 4\\n\\t\\t\\ttoken == UAD3CRVf // 5\\n\\t\\t];\\n\\n\\t\\trequire(\\n\\t\\t\\t// DAI / USDC / USDT / CRV3 / UAD / UAD3CRVF\\n\\t\\t\\ttok[0] || tok[1] || tok[2] || tok[3] || tok[4] || tok[5],\\n\\t\\t\\t\\\"Invalid token: must be DAI, USDC, USDT, 3CRV, uAD or uAD3CRV-f\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 _amount = getUint(getId, amount);\\n\\t\\tuint256 lpAmount;\\n\\n\\t\\t// Full balance if amount = -1\\n\\t\\tif (_amount == uint256(-1)) {\\n\\t\\t\\t_amount = getTokenBal(TokenInterface(token));\\n\\t\\t}\\n\\n\\t\\t// STEP 1 : SwapTo3CRV : Deposit DAI, USDC or USDT into 3Pool to get 3Crv LPs\\n\\t\\t// DAI / USDC / USDT\\n\\t\\tif (tok[0] || tok[1] || tok[2]) {\\n\\t\\t\\tuint256[3] memory amounts1;\\n\\n\\t\\t\\tif (tok[0]) amounts1[0] = _amount;\\n\\t\\t\\telse if (tok[1]) amounts1[1] = _amount;\\n\\t\\t\\telse if (tok[2]) amounts1[2] = _amount;\\n\\n\\t\\t\\tapprove(TokenInterface(token), Pool3, _amount);\\n\\t\\t\\tI3Pool(Pool3).add_liquidity(amounts1, 0);\\n\\t\\t}\\n\\n\\t\\t// STEP 2 : ProvideLiquidityToMetapool : Deposit in uAD3CRV pool to get uAD3CRV-f LPs\\n\\t\\t// DAI / USDC / USDT / CRV3 / UAD\\n\\t\\tif (tok[0] || tok[1] || tok[2] || tok[3] || tok[4]) {\\n\\t\\t\\tuint256[2] memory amounts2;\\n\\t\\t\\taddress token2 = token;\\n\\t\\t\\tuint256 _amount2;\\n\\n\\t\\t\\tif (tok[4]) {\\n\\t\\t\\t\\t_amount2 = _amount;\\n\\t\\t\\t\\tamounts2[0] = _amount2;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (tok[3]) {\\n\\t\\t\\t\\t\\t_amount2 = _amount;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttoken2 = CRV3;\\n\\t\\t\\t\\t\\t_amount2 = getTokenBal(TokenInterface(token2));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tamounts2[1] = _amount2;\\n\\t\\t\\t}\\n\\n\\t\\t\\tapprove(TokenInterface(token2), UAD3CRVf, _amount2);\\n\\t\\t\\tlpAmount = IUbiquityMetaPool(UAD3CRVf).add_liquidity(amounts2, 0);\\n\\t\\t}\\n\\n\\t\\t// STEP 3 : Farm/ApeIn : Deposit uAD3CRV-f LPs into UbiquityBondingV2 and get Ubiquity Bonding Shares\\n\\t\\t// UAD3CRVF\\n\\t\\tif (tok[5]) {\\n\\t\\t\\tlpAmount = _amount;\\n\\t\\t}\\n\\n\\t\\taddress bonding = ubiquityManager.bondingContractAddress();\\n\\t\\tapprove(TokenInterface(UAD3CRVf), bonding, lpAmount);\\n\\t\\tuint256 bondingShareId = IUbiquityBondingV2(bonding).deposit(\\n\\t\\t\\tlpAmount,\\n\\t\\t\\tdurationWeeks\\n\\t\\t);\\n\\n\\t\\tsetUint(setId, bondingShareId);\\n\\n\\t\\t_eventName = \\\"LogDeposit(address,address,uint256,uint256,uint256,uint256,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\taddress(this),\\n\\t\\t\\ttoken,\\n\\t\\t\\tamount,\\n\\t\\t\\tbondingShareId,\\n\\t\\t\\tlpAmount,\\n\\t\\t\\tdurationWeeks,\\n\\t\\t\\tgetId,\\n\\t\\t\\tsetId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Withdraw from Ubiquity protocol\\n\\t * @notice Ubiquity BondingShare => uAD3CRV-f => METAPOOL (3CRV / uAD) => 3POOL (DAI / USDC / USDT)\\n\\t * @notice STEP 1 : Ubiquity BondingShare  => uAD3CRV-f\\n\\t * @notice STEP 2 : uAD3CRV-f => METAPOOL(3CRV / UAD)\\n\\t * @notice STEP 3 : 3CRV => 3POOL (DAI / USDC / USDT)\\n\\t * @param bondingShareId Bonding Share Id to withdraw\\n\\t * @param token Token to withdraw to : DAI, USDC, USDT, 3CRV, uAD or uAD3CRV-f\\n\\t * @param getId ID\\n\\t * @param setId ID\\n\\t */\\n\\tfunction withdraw(\\n\\t\\tuint256 bondingShareId,\\n\\t\\taddress token,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\taddress UAD3CRVf = getUADCRV3();\\n\\t\\tbool[6] memory tok = [\\n\\t\\t\\ttoken == DAI, // 0\\n\\t\\t\\ttoken == USDC, // 1\\n\\t\\t\\ttoken == USDT, // 2\\n\\t\\t\\ttoken == CRV3, // 3\\n\\t\\t\\ttoken == getUAD(), // 4\\n\\t\\t\\ttoken == UAD3CRVf // 5\\n\\t\\t];\\n\\n\\t\\trequire(\\n\\t\\t\\t// DAI / USDC / USDT / CRV3 / UAD / UAD3CRVF\\n\\t\\t\\ttok[0] || tok[1] || tok[2] || tok[3] || tok[4] || tok[5],\\n\\t\\t\\t\\\"Invalid token: must be DAI, USDC, USDT, 3CRV, uAD or uAD3CRV-f\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 _bondingShareId = getUint(getId, bondingShareId);\\n\\n\\t\\t// Get Bond\\n\\t\\tIUbiquityBondingV2.Bond memory bond = IUbiquityBondingV2(\\n\\t\\t\\tubiquityManager.bondingShareAddress()\\n\\t\\t).getBond(_bondingShareId);\\n\\n\\t\\trequire(address(this) == bond.minter, \\\"Not bond owner\\\");\\n\\n\\t\\t// STEP 1 : Withdraw Ubiquity Bonding Shares to get back uAD3CRV-f LPs\\n\\t\\taddress bonding = ubiquityManager.bondingContractAddress();\\n\\t\\tIUbiquityBondingV2(bonding).removeLiquidity(\\n\\t\\t\\tbond.lpAmount,\\n\\t\\t\\t_bondingShareId\\n\\t\\t);\\n\\n\\t\\t// STEP 2 : Withdraw uAD3CRV-f LPs to get back uAD or 3Crv\\n\\t\\t// DAI / USDC / USDT / CRV3 / UAD\\n\\t\\tif (tok[0] || tok[1] || tok[2] || tok[3] || tok[4]) {\\n\\t\\t\\tuint256 amount2 = getTokenBal(TokenInterface(UAD3CRVf));\\n\\t\\t\\tIUbiquityMetaPool(UAD3CRVf).remove_liquidity_one_coin(\\n\\t\\t\\t\\tamount2,\\n\\t\\t\\t\\ttok[4] ? 0 : 1,\\n\\t\\t\\t\\t0\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// STEP 3 : Withdraw  3Crv LPs from 3Pool to get back DAI, USDC or USDT\\n\\t\\t// DAI / USDC / USDT\\n\\t\\tif (tok[0] || tok[1] || tok[2]) {\\n\\t\\t\\tuint256 amount1 = getTokenBal(TokenInterface(CRV3));\\n\\t\\t\\tI3Pool(Pool3).remove_liquidity_one_coin(\\n\\t\\t\\t\\tamount1,\\n\\t\\t\\t\\ttok[0] ? 0 : (tok[1] ? 1 : 2),\\n\\t\\t\\t\\t0\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tuint256 amount = getTokenBal(TokenInterface(token));\\n\\n\\t\\tsetUint(setId, amount);\\n\\t\\t_eventName = \\\"LogWithdraw(address,uint256,uint256,uint256,address,uint256,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\taddress(this),\\n\\t\\t\\t_bondingShareId,\\n\\t\\t\\tbond.lpAmount,\\n\\t\\t\\tbond.endBlock,\\n\\t\\t\\ttoken,\\n\\t\\t\\tamount,\\n\\t\\t\\tgetId,\\n\\t\\t\\tsetId\\n\\t\\t);\\n\\t}\\n}\\n\\ncontract ConnectV2Ubiquity is UbiquityResolver {\\n\\tstring public constant name = \\\"Ubiquity-v1\\\";\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bondingShareId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationWeeks\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bondingShareId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationWeeks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondingShareId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectV2Ubiquity","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}