{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT @GoPocketStudio\r\npragma solidity ^0.7.5;\r\npragma abicoder v2;\r\n\r\ninterface IERC1155 {\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n}\r\n\r\ninterface IERC721 {\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\ncontract NFTBalanceChecker {\r\n    \r\n    /* Fallback function, don't accept any ETH */\r\n    receive() external payable {\r\n        // revert();\r\n        revert(\"BalanceChecker does not accept payments\");\r\n    }\r\n\r\n    function isContract(address token) public view returns(bool){\r\n        // check if token is actually a contract\r\n        uint256 tokenCode;\r\n        assembly { tokenCode := extcodesize(token) } // contract code size\r\n        return tokenCode > 0;\r\n    }\r\n\r\n    function balances(address[] memory users, address[] memory tokens, uint256[] memory ids) external view returns (uint[] memory) {\r\n        uint[] memory addrBalances = new uint[](tokens.length * users.length);\r\n        for (uint i = 0; i < users.length; i++) {\r\n            for (uint j = 0; j < tokens.length; j++) {\r\n                uint addrIdx = j + tokens.length * i;\r\n                if (isContract(tokens[j])) {\r\n                    IERC1155 t = IERC1155(tokens[j]);\r\n                    addrBalances[addrIdx] = t.balanceOf(users[i], ids[j]);\r\n                } else {\r\n                    addrBalances[addrIdx] = 0;\r\n                }\r\n                \r\n            }\r\n        }\r\n        return addrBalances;\r\n    }\r\n\r\n    function owners(address[] memory users, address[] memory tokens, uint256[] memory ids) external view returns (address[] memory) {\r\n        address[] memory addrBalances = new address[](tokens.length * users.length);\r\n        for (uint i = 0; i < users.length; i++) {\r\n            for (uint j = 0; j < tokens.length; j++) {\r\n                uint addrIdx = j + tokens.length * i;\r\n                if (isContract(tokens[j])) {\r\n                    IERC721 t = IERC721(tokens[j]);\r\n                    addrBalances[addrIdx] = t.ownerOf(ids[j]);\r\n                } else {\r\n                    addrBalances[addrIdx] = address(0x0);\r\n                }\r\n                \r\n            }\r\n        }\r\n        return addrBalances;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NFTBalanceChecker","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1bb4e94ce3995c29aff4fe0e50f28c63dbc76e9a8628106431d13cf73a99231e"}]}