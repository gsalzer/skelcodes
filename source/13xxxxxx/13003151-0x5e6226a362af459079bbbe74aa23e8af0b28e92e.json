{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/GSN/Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// pragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IFarmFactory.sol\r\n\r\n// pragma solidity ^0.6.10;\r\n\r\ninterface IFarmFactory {\r\n    function registerFarm (address _farmAddress) external;\r\n    function userEnteredFarm (address _user) external;\r\n    function userLeftFarm (address _user) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/farm/Farm.sol\r\n\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n// import { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n// import { IFarmFactory } from \"contracts/interfaces/IFarmFactory.sol\";\r\n\r\ncontract Farm is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /* ============ Struct ============ */\r\n\r\n    struct UserInfo {\r\n        uint256 amount;     // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt.\r\n    }\r\n\r\n    struct FarmInfo {\r\n        IERC20 lpToken;\r\n        IERC20 rewardToken;\r\n        uint256 startBlock;\r\n        uint256 blockReward;\r\n        uint256 bonusEndBlock;\r\n        uint256 bonus;\r\n        uint256 endBlock;\r\n        uint256 lastRewardBlock;  // Last block number that reward distribution occurs.\r\n        uint256 accRewardPerShare; // Accumulated Rewards per share, times 1e12\r\n        uint256 farmableSupply; // set in init, total amount of tokens farmable\r\n        uint256 numFarmers;\r\n    }\r\n\r\n    /* ============ State Variables ============ */\r\n\r\n    // Useful for back-end systems to know how to read the contract (ABI) as we plan to launch multiple farm types\r\n    uint256 public farmType = 1;\r\n\r\n    IFarmFactory public factory;\r\n    address public farmGenerator;\r\n\r\n    FarmInfo public farmInfo;\r\n\r\n    // Information on each user than stakes LP tokens\r\n    mapping (address => UserInfo) public userInfo;\r\n\r\n    /* ============ Events ============ */\r\n\r\n    event Deposit(address indexed user, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n    event WithdrawWithoutReward(address indexed user, uint256 amount);\r\n\r\n    /* ============ Constructor ============ */\r\n\r\n    /**\r\n     * Store factory and generator instance.\r\n     *\r\n     * @param _factory              Instance of Farm Factory\r\n     * @param _farmGenerator        Instance of Farm Generator\r\n     */\r\n    constructor(address _factory, address _farmGenerator) public {\r\n        factory = IFarmFactory(_factory);\r\n        farmGenerator = _farmGenerator;\r\n    }\r\n\r\n    /* ============ Public/External functions ============ */\r\n\r\n    /**\r\n     * Initialize the farming contract. This is called only once upon farm creation and the FarmGenerator\r\n     * ensures the farm has the correct paramaters\r\n     *\r\n     * @param _rewardToken          Instance of reward token contract\r\n     * @param _amount               Total sum of reward\r\n     * @param _lpToken              Instance of LP token contract\r\n     * @param _blockReward          Reward per block\r\n     * @param _startBlock           Block number to start reward\r\n     * @param _bonusEndBlock        Block number to end the bonus reward\r\n     * @param _bonus                Bonus multipler which will be applied until bonus end block\r\n     */\r\n    function init(\r\n        IERC20 _rewardToken,\r\n        uint256 _amount,\r\n        IERC20 _lpToken,\r\n        uint256 _blockReward,\r\n        uint256 _startBlock,\r\n        uint256 _endBlock,\r\n        uint256 _bonusEndBlock,\r\n        uint256 _bonus\r\n    ) external {\r\n        require(msg.sender == address(farmGenerator), \"FORBIDDEN\");\r\n\r\n        _rewardToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n        farmInfo.rewardToken = _rewardToken;\r\n\r\n        farmInfo.startBlock = _startBlock;\r\n        farmInfo.blockReward = _blockReward;\r\n        farmInfo.bonusEndBlock = _bonusEndBlock;\r\n        farmInfo.bonus = _bonus;\r\n\r\n        uint256 lastRewardBlock = block.number > _startBlock ? block.number : _startBlock;\r\n        farmInfo.lpToken = _lpToken;\r\n        farmInfo.lastRewardBlock = lastRewardBlock;\r\n        farmInfo.accRewardPerShare = 0;\r\n\r\n        farmInfo.endBlock = _endBlock;\r\n        farmInfo.farmableSupply = _amount;\r\n    }\r\n\r\n    /**\r\n     * Updates pool information to be up to date to the current block\r\n     */\r\n    function updatePool() public {\r\n        if (block.number <= farmInfo.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = farmInfo.lpToken.balanceOf(address(this));\r\n        if (lpSupply == 0) {\r\n            farmInfo.lastRewardBlock = block.number < farmInfo.endBlock ? block.number : farmInfo.endBlock;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(farmInfo.lastRewardBlock, block.number);\r\n        uint256 tokenReward = multiplier.mul(farmInfo.blockReward);\r\n        farmInfo.accRewardPerShare = farmInfo.accRewardPerShare.add(tokenReward.mul(1e12).div(lpSupply));\r\n        farmInfo.lastRewardBlock = block.number < farmInfo.endBlock ? block.number : farmInfo.endBlock;\r\n    }\r\n\r\n    /**\r\n     * Deposit LP token function for msg.sender\r\n     *\r\n     * @param _amount               the total deposit amount\r\n     */\r\n    function deposit(uint256 _amount) external {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        updatePool();\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(farmInfo.accRewardPerShare).div(1e12).sub(user.rewardDebt);\r\n            _safeRewardTransfer(msg.sender, pending);\r\n        }\r\n        if (user.amount == 0 && _amount > 0) {\r\n            factory.userEnteredFarm(msg.sender);\r\n            farmInfo.numFarmers++;\r\n        }\r\n        farmInfo.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        user.amount = user.amount.add(_amount);\r\n        user.rewardDebt = user.amount.mul(farmInfo.accRewardPerShare).div(1e12);\r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * Withdraw LP token function for msg.sender\r\n     *\r\n     * @param                       _amount the total withdrawable amount\r\n     */\r\n    function withdraw(uint256 _amount) external {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.amount >= _amount, \"INSUFFICIENT\");\r\n        updatePool();\r\n        if (user.amount == _amount && _amount > 0) {\r\n            factory.userLeftFarm(msg.sender);\r\n            farmInfo.numFarmers--;\r\n        }\r\n        uint256 pending = user.amount.mul(farmInfo.accRewardPerShare).div(1e12).sub(user.rewardDebt);\r\n        _safeRewardTransfer(msg.sender, pending);\r\n        user.amount = user.amount.sub(_amount);\r\n        user.rewardDebt = user.amount.mul(farmInfo.accRewardPerShare).div(1e12);\r\n        farmInfo.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        emit Withdraw(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * Function to withdraw LP tokens and forego harvest rewards. Important to protect users LP tokens\r\n     */\r\n    function withdrawWithoutReward() external {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        farmInfo.lpToken.safeTransfer(address(msg.sender), user.amount);\r\n        emit WithdrawWithoutReward(msg.sender, user.amount);\r\n        if (user.amount > 0) {\r\n            factory.userLeftFarm(msg.sender);\r\n            farmInfo.numFarmers--;\r\n        }\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n    }\r\n\r\n    /**\r\n     * Withdraw tokens emergency.\r\n     *\r\n     * @param _token                Token contract address\r\n     * @param _to                   Address where the token withdraw to\r\n     * @param _amount               Amount of tokens to withdraw\r\n     */\r\n    function emergencyWithdraw(address _token, address _to, uint256 _amount) external onlyOwner {\r\n        IERC20 erc20Token = IERC20(_token);\r\n        require(erc20Token.balanceOf(address(this)) > 0, \"Insufficient balane\");\r\n\r\n        uint256 amountToWithdraw = _amount;\r\n        if (_amount == 0) {\r\n            amountToWithdraw = erc20Token.balanceOf(address(this));\r\n        }\r\n        erc20Token.safeTransfer(_to, amountToWithdraw);\r\n    }\r\n\r\n    /* ============ View functions ============ */\r\n\r\n    /**\r\n     * Get the reward multiplier over the given _from_block until _to block\r\n     *\r\n     * @param _fromBlock            the start of the period to measure rewards for\r\n     * @param _to                   the end of the period to measure rewards for\r\n     *\r\n     * @return                      The weighted multiplier for the given period\r\n     */\r\n    function getMultiplier(uint256 _fromBlock, uint256 _to) public view returns (uint256) {\r\n        uint256 _from = _fromBlock >= farmInfo.startBlock ? _fromBlock : farmInfo.startBlock;\r\n        uint256 to = farmInfo.endBlock > _to ? _to : farmInfo.endBlock;\r\n        if (to <= farmInfo.bonusEndBlock) {\r\n            return to.sub(_from).mul(farmInfo.bonus);\r\n        } else if (_from >= farmInfo.bonusEndBlock) {\r\n            return to.sub(_from);\r\n        } else {\r\n            return farmInfo.bonusEndBlock.sub(_from).mul(farmInfo.bonus).add(\r\n                to.sub(farmInfo.bonusEndBlock)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to see accumulated balance of reward token for specified user\r\n     *\r\n     * @param _user                 the user for whom unclaimed tokens will be shown\r\n     *\r\n     * @return                      total amount of withdrawable reward tokens\r\n     */\r\n    function pendingReward(address _user) external view returns (uint256) {\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 accRewardPerShare = farmInfo.accRewardPerShare;\r\n        uint256 lpSupply = farmInfo.lpToken.balanceOf(address(this));\r\n        if (block.number > farmInfo.lastRewardBlock && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(farmInfo.lastRewardBlock, block.number);\r\n            uint256 tokenReward = multiplier.mul(farmInfo.blockReward);\r\n            accRewardPerShare = accRewardPerShare.add(tokenReward.mul(1e12).div(lpSupply));\r\n        }\r\n        return user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    /* ============ Internal functions ============ */\r\n\r\n    /**\r\n     * Safe reward transfer function, just in case a rounding error causes pool to not have enough reward tokens\r\n     *\r\n     * @param _to                   the user address to transfer tokens to\r\n     * @param _amount               the total amount of tokens to transfer\r\n     */\r\n    function _safeRewardTransfer(address _to, uint256 _amount) internal {\r\n        uint256 rewardBal = farmInfo.rewardToken.balanceOf(address(this));\r\n        if (_amount > rewardBal) {\r\n            farmInfo.rewardToken.transfer(_to, rewardBal);\r\n        } else {\r\n            farmInfo.rewardToken.transfer(_to, _amount);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Root file: contracts/farm/FarmGenerator.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n// import { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n// import { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n// import { IFarmFactory } from \"contracts/interfaces/IFarmFactory.sol\";\r\n// import { Farm } from \"contracts/farm/Farm.sol\";\r\n\r\ncontract FarmGenerator is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /* ============ Struct ============ */\r\n\r\n    struct FarmParameters {\r\n        uint256 bonusBlocks;\r\n        uint256 totalBonusReward;\r\n        uint256 numBlocks;\r\n        uint256 endBlock;\r\n        uint256 requiredAmount;\r\n    }\r\n\r\n    /* ============ State Variables ============ */\r\n\r\n    IFarmFactory public factory;\r\n\r\n    /* ============ Events ============ */\r\n\r\n    event FarmCreated(\r\n        IERC20 rewardToken,\r\n        uint256 amount,\r\n        IERC20 lpToken,\r\n        uint256 blockReward,\r\n        uint256 startBlock,\r\n        uint256 bonusEndBlock,\r\n        uint256 bonus\r\n    );\r\n\r\n    /* ============ Constructor ============ */\r\n\r\n    /**\r\n     * Store factory instance.\r\n     *\r\n     * @param _factory              Instance of Farm Factory contract\r\n     */\r\n    constructor(IFarmFactory _factory) public {\r\n        factory = _factory;\r\n    }\r\n\r\n    /**\r\n     * Determine the endBlock based on inputs. Used on the front end to show the exact settings the Farm contract\r\n     * will be deployed with\r\n     *\r\n     * @param _amount               Total sum of reward\r\n     * @param _blockReward          Reward per block\r\n     * @param _startBlock           Block number to start reward\r\n     * @param _bonusEndBlock        Block number to end the bonus reward\r\n     * @param _bonus                Bonus multipler which will be applied until bonus end block\r\n     */\r\n    function determineEndBlock(\r\n        uint256 _amount,\r\n        uint256 _blockReward,\r\n        uint256 _startBlock,\r\n        uint256 _bonusEndBlock,\r\n        uint256 _bonus\r\n    )\r\n        public\r\n        pure\r\n        returns (uint256, uint256)\r\n    {\r\n        FarmParameters memory params;\r\n        params.bonusBlocks = _bonusEndBlock.sub(_startBlock);\r\n        params.totalBonusReward = params.bonusBlocks.mul(_bonus).mul(_blockReward);\r\n        params.numBlocks = _amount.sub(params.totalBonusReward).div(_blockReward);\r\n        params.endBlock = params.numBlocks.add(params.bonusBlocks).add(_startBlock);\r\n\r\n        uint256 nonBonusBlocks = params.endBlock.sub(_bonusEndBlock);\r\n        uint256 effectiveBlocks = params.bonusBlocks.mul(_bonus).add(nonBonusBlocks);\r\n        uint256 requiredAmount = _blockReward.mul(effectiveBlocks);\r\n        return (params.endBlock, requiredAmount);\r\n    }\r\n\r\n    /**\r\n     * Determine the blockReward based on inputs specifying an end date. Used on the front end to show the exact settings\r\n     * the Farm contract will be deployed with\r\n     *\r\n     * @param _amount               Total sum of reward\r\n     * @param _startBlock           Block number to start reward\r\n     * @param _bonusEndBlock        Block number to end the bonus reward\r\n     * @param _bonus                Bonus multipler which will be applied until bonus end block\r\n     * @param _endBlock             Block number to end reward\r\n     */\r\n    function determineBlockReward(\r\n        uint256 _amount,\r\n        uint256 _startBlock,\r\n        uint256 _bonusEndBlock,\r\n        uint256 _bonus,\r\n        uint256 _endBlock\r\n    )\r\n        public\r\n        pure\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 bonusBlocks = _bonusEndBlock.sub(_startBlock);\r\n        uint256 nonBonusBlocks = _endBlock.sub(_bonusEndBlock);\r\n        uint256 effectiveBlocks = bonusBlocks.mul(_bonus).add(nonBonusBlocks);\r\n        uint256 blockReward = _amount.div(effectiveBlocks);\r\n        uint256 requiredAmount = blockReward.mul(effectiveBlocks);\r\n        return (blockReward, requiredAmount);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Farm contract and registers it in the farm factory. Farming rewards are locked in the farm\r\n     *\r\n     * @param _rewardToken          Instance of reward token contract\r\n     * @param _amount               Total sum of reward\r\n     * @param _lpToken              Instance of LP token contract\r\n     * @param _blockReward          Reward per block\r\n     * @param _startBlock           Block number to start reward\r\n     * @param _bonusEndBlock        Block number to end the bonus reward\r\n     * @param _bonus                Bonus multipler which will be applied until bonus end block\r\n     * @param _manager              Manager of the farm\r\n     */\r\n    function createFarm(\r\n        IERC20 _rewardToken,\r\n        uint256 _amount,\r\n        IERC20 _lpToken,\r\n        uint256 _blockReward,\r\n        uint256 _startBlock,\r\n        uint256 _bonusEndBlock,\r\n        uint256 _bonus,\r\n        address _manager\r\n    )\r\n        public\r\n        onlyOwner\r\n        returns (address)\r\n    {\r\n        require(_startBlock > block.number, \"START\"); // ideally at least 24 hours more to give farmers time\r\n        require(_bonus > 0, \"BONUS\");\r\n        require(address(_rewardToken) != address(0), \"TOKEN\");\r\n        require(_blockReward > 1000, \"BR\"); // minimum 1000 divisibility per block reward\r\n\r\n        (uint256 endBlock, uint256 requiredAmount) = determineEndBlock(_amount, _blockReward, _startBlock, _bonusEndBlock, _bonus);\r\n\r\n        _rewardToken.safeTransferFrom(address(msg.sender), address(this), requiredAmount);\r\n        Farm newFarm = new Farm(address(factory), address(this));\r\n        newFarm.transferOwnership(_manager);\r\n        _rewardToken.safeApprove(address(newFarm), requiredAmount);\r\n        newFarm.init(_rewardToken, requiredAmount, _lpToken, _blockReward, _startBlock, endBlock, _bonusEndBlock, _bonus);\r\n\r\n        factory.registerFarm(address(newFarm));\r\n\r\n        emit FarmCreated(_rewardToken, _amount, _lpToken, _blockReward, _startBlock, _bonusEndBlock, _bonus);\r\n        return (address(newFarm));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IFarmFactory\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusEndBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"FarmCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"createFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"determineBlockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"determineEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IFarmFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FarmGenerator","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002d73a511db87d67e6ed22e568b38f8416775a96b","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c5fa16f10f9d5606b9c20fb838e38ffda06ee176261cd367daf0048bcb9e2cd8"}]}