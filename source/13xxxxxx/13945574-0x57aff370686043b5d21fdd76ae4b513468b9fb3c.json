{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/miningOneSideBoost/MiningOneSideBoost.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.4;\\n\\n// Uncomment if needed.\\n// import \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../libraries/UniswapOracle.sol\\\";\\nimport \\\"../libraries/UniswapCallingParams.sol\\\";\\n\\nimport \\\"../base/MiningBase.sol\\\";\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\\n\\n/// @title Uniswap V3 Liquidity Mining Main Contract\\ncontract MiningOneSideBoost is MiningBase {\\n    // using Math for int24;\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    using UniswapOracle for address;\\n\\n    int24 internal constant TICK_MAX = 500000;\\n    int24 internal constant TICK_MIN = -500000;\\n\\n    struct PoolInfo {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    bool public uniIsETH;\\n\\n    address public uniToken;\\n    address public lockToken;\\n\\n    /// @dev Contract of the uniV3 Nonfungible Position Manager.\\n    address public uniV3NFTManager;\\n    address public uniFactory;\\n    address public swapPool;\\n    PoolInfo public rewardPool;\\n\\n    uint256 public lockBoostMultiplier;\\n    /// @dev Current total lock token\\n    uint256 public totalLock;\\n\\n    /// @dev Record the status for a certain token for the last touched time.\\n    struct TokenStatus {\\n        uint256 nftId;\\n        // bool isDepositWithNFT;\\n        uint128 uniLiquidity;\\n        uint256 lockAmount;\\n        uint256 vLiquidity;\\n        uint256 validVLiquidity;\\n        uint256 nIZI;\\n        uint256 lastTouchBlock;\\n        uint256[] lastTouchAccRewardPerShare;\\n    }\\n\\n    mapping(uint256 => TokenStatus) public tokenStatus;\\n\\n    function getBaseTokenStatus(uint256 tokenId) internal override view returns(BaseTokenStatus memory t) {\\n        TokenStatus memory ts = tokenStatus[tokenId];\\n        t = BaseTokenStatus({\\n            vLiquidity: ts.vLiquidity,\\n            validVLiquidity: ts.validVLiquidity,\\n            nIZI: ts.nIZI,\\n            lastTouchAccRewardPerShare: ts.lastTouchAccRewardPerShare\\n        });\\n    }\\n\\n    receive() external payable {}\\n\\n    function _setRewardPool(\\n        address _uniToken,\\n        address _lockToken,\\n        uint24 fee\\n    ) internal {\\n        address token0;\\n        address token1;\\n        if (_uniToken < _lockToken) {\\n            token0 = _uniToken;\\n            token1 = _lockToken;\\n        } else {\\n            token0 = _lockToken;\\n            token1 = _uniToken;\\n        }\\n        rewardPool.token0 = token0;\\n        rewardPool.token1 = token1;\\n        rewardPool.fee = fee;\\n    }\\n\\n    struct PoolParams {\\n        address uniV3NFTManager;\\n        address uniTokenAddr;\\n        address lockTokenAddr;\\n        uint24 fee;\\n    }\\n\\n    constructor(\\n        PoolParams memory poolParams,\\n        RewardInfo[] memory _rewardInfos,\\n        uint256 _lockBoostMultiplier,\\n        address iziTokenAddr,\\n        uint256 _startBlock,\\n        uint256 _endBlock\\n    ) {\\n        uniV3NFTManager = poolParams.uniV3NFTManager;\\n\\n        _setRewardPool(\\n            poolParams.uniTokenAddr,\\n            poolParams.lockTokenAddr,\\n            poolParams.fee\\n        );\\n\\n        address weth = INonfungiblePositionManager(uniV3NFTManager).WETH9();\\n        require(weth != poolParams.lockTokenAddr, \\\"WETH NOT SUPPORT\\\");\\n        uniFactory = INonfungiblePositionManager(uniV3NFTManager).factory();\\n\\n        uniToken = poolParams.uniTokenAddr;\\n\\n        uniIsETH = (uniToken == weth);\\n        lockToken = poolParams.lockTokenAddr;\\n\\n        IERC20(uniToken).safeApprove(uniV3NFTManager, type(uint256).max);\\n\\n        swapPool = IUniswapV3Factory(uniFactory).getPool(\\n            lockToken,\\n            uniToken,\\n            poolParams.fee\\n        );\\n        require(swapPool != address(0), \\\"NO UNI POOL\\\");\\n\\n        rewardInfosLen = _rewardInfos.length;\\n        require(rewardInfosLen > 0, \\\"NO REWARD\\\");\\n        require(rewardInfosLen < 3, \\\"AT MOST 2 REWARDS\\\");\\n\\n        for (uint256 i = 0; i < rewardInfosLen; i++) {\\n            rewardInfos[i] = _rewardInfos[i];\\n            rewardInfos[i].accRewardPerShare = 0;\\n        }\\n\\n        require(_lockBoostMultiplier > 0, \\\"M>0\\\");\\n        require(_lockBoostMultiplier < 4, \\\"M<4\\\");\\n\\n        lockBoostMultiplier = _lockBoostMultiplier;\\n\\n        // iziTokenAddr == 0 means not boost\\n        iziToken = IERC20(iziTokenAddr);\\n\\n        startBlock = _startBlock;\\n        endBlock = _endBlock;\\n\\n        lastTouchBlock = startBlock;\\n\\n        totalVLiquidity = 0;\\n        totalNIZI = 0;\\n    }\\n\\n    /// @notice Get the overall info for the mining contract.\\n    function getMiningContractInfo()\\n        external\\n        view\\n        returns (\\n            address uniToken_,\\n            address lockToken_,\\n            uint24 fee_,\\n            uint256 lockBoostMultiplier_,\\n            address iziTokenAddr_,\\n            uint256 lastTouchBlock_,\\n            uint256 totalVLiquidity_,\\n            uint256 totalLock_,\\n            uint256 totalNIZI_,\\n            uint256 startBlock_,\\n            uint256 endBlock_\\n        )\\n    {\\n        return (\\n            uniToken,\\n            lockToken,\\n            rewardPool.fee,\\n            lockBoostMultiplier,\\n            address(iziToken),\\n            lastTouchBlock,\\n            totalVLiquidity,\\n            totalLock,\\n            totalNIZI,\\n            startBlock,\\n            endBlock\\n        );\\n    }\\n\\n    /// @dev compute amount of lockToken\\n    /// @param sqrtPriceX96 sqrtprice value viewed from uniswap pool\\n    /// @param uniAmount amount of uniToken user deposits\\n    ///    or amount computed corresponding to deposited uniswap NFT\\n    /// @return lockAmount amount of lockToken\\n    function _getLockAmount(uint160 sqrtPriceX96, uint256 uniAmount)\\n        private\\n        view\\n        returns (uint256 lockAmount)\\n    {\\n        // uniAmount is less than Q96, checked before\\n        uint256 precision = FixedPoints.Q96;\\n        uint256 sqrtPriceXP = sqrtPriceX96;\\n\\n        // if price > 1, we discard the useless precision\\n        if (sqrtPriceX96 > FixedPoints.Q96) {\\n            precision = FixedPoints.Q32;\\n            // sqrtPriceXP <= Q96 after >> operation\\n            sqrtPriceXP = (sqrtPriceXP >> 64);\\n        }\\n        // priceXP <= Q160 if price >= 1\\n        // priceXP <= Q96  if price < 1\\n        uint256 priceXP = (sqrtPriceXP * sqrtPriceXP) / precision;\\n    \\n        if (priceXP > 0) {\\n            if (uniToken < lockToken) {\\n                // price is lockToken / uniToken\\n                lockAmount = (uniAmount * priceXP) / precision;\\n            } else {\\n                lockAmount = (uniAmount * precision) / priceXP;\\n            }\\n        } else {\\n             // in this case sqrtPriceXP <= Q48, precision = Q96\\n            if (uniToken < lockToken) {\\n                // price is lockToken / uniToken\\n                // lockAmount = uniAmount * sqrtPriceXP * sqrtPriceXP / precision / precision;\\n                // the above expression will always get 0\\n                lockAmount = 0;\\n            } else {\\n                lockAmount = uniAmount * precision / sqrtPriceXP / sqrtPriceXP; \\n                // lockAmount is always < Q128, since sqrtPriceXP > Q32\\n                // we still add the require statement to double check\\n                require(lockAmount < FixedPoints.Q160, \\\"TOO MUCH LOCK\\\");\\n                lockAmount *= precision;\\n            }\\n        }\\n        require(lockAmount > 0, \\\"LOCK 0\\\");\\n    }\\n\\n    /// @notice new a token status when touched.\\n    function _newTokenStatus(TokenStatus memory newTokenStatus) internal {\\n        tokenStatus[newTokenStatus.nftId] = newTokenStatus;\\n        TokenStatus storage t = tokenStatus[newTokenStatus.nftId];\\n\\n        t.lastTouchBlock = lastTouchBlock;\\n        t.lastTouchAccRewardPerShare = new uint256[](rewardInfosLen);\\n        for (uint256 i = 0; i < rewardInfosLen; i++) {\\n            t.lastTouchAccRewardPerShare[i] = rewardInfos[i].accRewardPerShare;\\n        }\\n    }\\n\\n    /// @notice update a token status when touched\\n    function _updateTokenStatus(\\n        uint256 tokenId,\\n        uint256 validVLiquidity,\\n        uint256 nIZI\\n    ) internal override {\\n        TokenStatus storage t = tokenStatus[tokenId];\\n\\n        // when not boost, validVL == vL\\n        t.validVLiquidity = validVLiquidity;\\n        t.nIZI = nIZI;\\n\\n        t.lastTouchBlock = lastTouchBlock;\\n        for (uint256 i = 0; i < rewardInfosLen; i++) {\\n            t.lastTouchAccRewardPerShare[i] = rewardInfos[i].accRewardPerShare;\\n        }\\n    }\\n\\n    function _computeValidVLiquidity(uint256 vLiquidity, uint256 nIZI)\\n        internal override\\n        view\\n        returns (uint256)\\n    {\\n        if (totalNIZI == 0) {\\n            return vLiquidity;\\n        }\\n        uint256 iziVLiquidity = (vLiquidity * 4 + (totalVLiquidity * nIZI * 6) / totalNIZI) / 10;\\n        return Math.min(iziVLiquidity, vLiquidity);\\n    }\\n\\n    /// @dev get sqrtPrice of pool(uniToken/tokenSwap/fee)\\n    ///    and compute tick range converted from [TICK_MIN, PriceUni] or [PriceUni, TICK_MAX]\\n    /// @return sqrtPriceX96 current sqrtprice value viewed from uniswap pool, is a 96-bit fixed point number\\n    ///    note this value might mean price of lockToken/uniToken (if uniToken < lockToken)\\n    ///    or price of uniToken / lockToken (if uniToken > lockToken)\\n    /// @return tickLeft\\n    /// @return tickRight\\n    function _getPriceAndTickRange()\\n        private\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tickLeft,\\n            int24 tickRight\\n        )\\n    {\\n        (int24 avgTick, uint160 avgSqrtPriceX96, int24 currTick, ) = swapPool\\n            .getAvgTickPriceWithin2Hour();\\n        int24 tickSpacing = IUniswapV3Factory(uniFactory).feeAmountTickSpacing(\\n            rewardPool.fee\\n        );\\n        if (uniToken < lockToken) {\\n            // price is lockToken / uniToken\\n            // uniToken is X\\n            tickLeft = Math.max(currTick + 1, avgTick);\\n            tickRight = TICK_MAX;\\n            tickLeft = Math.tickUpper(tickLeft, tickSpacing);\\n            tickRight = Math.tickUpper(tickRight, tickSpacing);\\n        } else {\\n            // price is uniToken / lockToken\\n            // uniToken is Y\\n            tickRight = Math.min(currTick, avgTick);\\n            tickLeft = TICK_MIN;\\n            tickLeft = Math.tickFloor(tickLeft, tickSpacing);\\n            tickRight = Math.tickFloor(tickRight, tickSpacing);\\n        }\\n        require(tickLeft < tickRight, \\\"L<R\\\");\\n        sqrtPriceX96 = avgSqrtPriceX96;\\n    }\\n\\n    function getOraclePrice()\\n        external\\n        view\\n        returns (\\n            int24 avgTick,\\n            uint160 avgSqrtPriceX96\\n        )\\n    {\\n        (avgTick, avgSqrtPriceX96, , ) = swapPool.getAvgTickPriceWithin2Hour();\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"STE\\\");\\n    }\\n\\n    function depositWithuniToken(\\n        uint256 uniAmount,\\n        uint256 numIZI,\\n        uint256 deadline\\n    ) external payable nonReentrant {\\n        require(uniAmount >= 1e7, \\\"TOKENUNI AMOUNT TOO SMALL\\\");\\n        require(uniAmount < FixedPoints.Q96 / 3, \\\"TOKENUNI AMOUNT TOO LARGE\\\");\\n        if (uniIsETH) {\\n            require(msg.value >= uniAmount, \\\"ETHER INSUFFICIENT\\\");\\n        } else {\\n            IERC20(uniToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                uniAmount\\n            );\\n        }\\n        (\\n            uint160 sqrtPriceX96,\\n            int24 tickLeft,\\n            int24 tickRight\\n        ) = _getPriceAndTickRange();\\n\\n        TokenStatus memory newTokenStatus;\\n\\n        INonfungiblePositionManager.MintParams\\n            memory uniParams = UniswapCallingParams.mintParams(\\n                uniToken, lockToken, rewardPool.fee, uniAmount, 0, tickLeft, tickRight, deadline\\n            );\\n        uint256 actualAmountUni;\\n\\n        if (uniToken < lockToken) {\\n            (\\n                newTokenStatus.nftId,\\n                newTokenStatus.uniLiquidity,\\n                actualAmountUni,\\n\\n            ) = INonfungiblePositionManager(uniV3NFTManager).mint{\\n                value: msg.value\\n            }(uniParams);\\n        } else {\\n            (\\n                newTokenStatus.nftId,\\n                newTokenStatus.uniLiquidity,\\n                ,\\n                actualAmountUni\\n            ) = INonfungiblePositionManager(uniV3NFTManager).mint{\\n                value: msg.value\\n            }(uniParams);\\n        }\\n\\n        // mark owners and append to list\\n        owners[newTokenStatus.nftId] = msg.sender;\\n        bool res = tokenIds[msg.sender].add(newTokenStatus.nftId);\\n        require(res);\\n\\n        if (actualAmountUni < uniAmount) {\\n            if (uniIsETH) {\\n                // refund uniToken\\n                // from uniswap to this\\n                INonfungiblePositionManager(uniV3NFTManager).refundETH();\\n                // from this to msg.sender\\n                if (address(this).balance > 0)\\n                    safeTransferETH(msg.sender, address(this).balance);\\n            } else {\\n                // refund uniToken\\n                IERC20(uniToken).safeTransfer(\\n                    msg.sender,\\n                    uniAmount - actualAmountUni\\n                );\\n            }\\n        }\\n\\n        _updateGlobalStatus();\\n        newTokenStatus.vLiquidity = actualAmountUni * lockBoostMultiplier;\\n        newTokenStatus.lockAmount = _getLockAmount(\\n            sqrtPriceX96,\\n            newTokenStatus.vLiquidity\\n        );\\n\\n        // make vLiquidity lower\\n        newTokenStatus.vLiquidity = newTokenStatus.vLiquidity / 1e6;\\n\\n        IERC20(lockToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            newTokenStatus.lockAmount\\n        );\\n        totalLock += newTokenStatus.lockAmount;\\n        _updateVLiquidity(newTokenStatus.vLiquidity, true);\\n\\n        newTokenStatus.nIZI = numIZI;\\n        if (address(iziToken) == address(0)) {\\n            // boost is not enabled\\n            newTokenStatus.nIZI = 0;\\n        }\\n        _updateNIZI(newTokenStatus.nIZI, true);\\n        newTokenStatus.validVLiquidity = _computeValidVLiquidity(\\n            newTokenStatus.vLiquidity,\\n            newTokenStatus.nIZI\\n        );\\n        require(newTokenStatus.nIZI < FixedPoints.Q128 / 6, \\\"NIZI O\\\");\\n        _newTokenStatus(newTokenStatus);\\n        if (newTokenStatus.nIZI > 0) {\\n            // lock izi in this contract\\n            iziToken.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                newTokenStatus.nIZI\\n            );\\n        }\\n\\n        emit Deposit(msg.sender, newTokenStatus.nftId, newTokenStatus.nIZI);\\n    }\\n\\n    /// @notice Widthdraw a single position.\\n    /// @param tokenId The related position id.\\n    /// @param noReward true if use want to withdraw without reward\\n    function withdraw(uint256 tokenId, bool noReward) external nonReentrant {\\n        require(owners[tokenId] == msg.sender, \\\"NOT OWNER OR NOT EXIST\\\");\\n\\n        if (noReward) {\\n            _updateGlobalStatus();\\n        } else {\\n            _collectReward(tokenId);\\n        }\\n        TokenStatus storage t = tokenStatus[tokenId];\\n\\n        _updateVLiquidity(t.vLiquidity, false);\\n        if (t.nIZI > 0) {\\n            _updateNIZI(t.nIZI, false);\\n            // refund iZi to user\\n            iziToken.safeTransfer(msg.sender, t.nIZI);\\n        }\\n        if (t.lockAmount > 0) {\\n            // refund lockToken to user\\n            IERC20(lockToken).safeTransfer(msg.sender, t.lockAmount);\\n            totalLock -= t.lockAmount;\\n        }\\n\\n        INonfungiblePositionManager(uniV3NFTManager).decreaseLiquidity(\\n            UniswapCallingParams.decreaseLiquidityParams(tokenId, t.uniLiquidity, type(uint256).max)\\n        );\\n\\n        if (!uniIsETH) {\\n            INonfungiblePositionManager(uniV3NFTManager).collect(\\n                UniswapCallingParams.collectParams(tokenId, msg.sender)\\n            );\\n        } else {\\n            (uint256 amount0, uint256 amount1) = INonfungiblePositionManager(\\n                uniV3NFTManager\\n            ).collect(\\n                UniswapCallingParams.collectParams(tokenId, address(this))\\n            );\\n            (uint256 amountUni, uint256 amountLock) = (uniToken < lockToken)? (amount0, amount1) : (amount1, amount0);\\n            if (amountLock > 0) {\\n                IERC20(lockToken).safeTransfer(msg.sender, amountLock);\\n            }\\n\\n            if (amountUni > 0) {\\n                IWETH9(uniToken).withdraw(amountUni);\\n                safeTransferETH(msg.sender, amountUni);\\n            }\\n        }\\n\\n        owners[tokenId] = address(0);\\n        bool res = tokenIds[msg.sender].remove(tokenId);\\n        require(res);\\n\\n        emit Withdraw(msg.sender, tokenId);\\n    }\\n\\n    /// @notice Collect pending reward for a single position.\\n    /// @param tokenId The related position id.\\n    function collect(uint256 tokenId) external nonReentrant {\\n        require(owners[tokenId] == msg.sender, \\\"NOT OWNER or NOT EXIST\\\");\\n        _collectReward(tokenId);\\n        INonfungiblePositionManager.CollectParams\\n            memory params = UniswapCallingParams.collectParams(tokenId, msg.sender);\\n        // collect swap fee from uniswap\\n        INonfungiblePositionManager(uniV3NFTManager).collect(params);\\n    }\\n\\n    /// @notice Collect all pending rewards.\\n    function collectAllTokens() external nonReentrant {\\n        EnumerableSet.UintSet storage ids = tokenIds[msg.sender];\\n        for (uint256 i = 0; i < ids.length(); i++) {\\n            uint256 tokenId = ids.at(i);\\n            require(owners[tokenId] == msg.sender, \\\"NOT OWNER\\\");\\n            _collectReward(tokenId);\\n            INonfungiblePositionManager.CollectParams\\n                memory params = UniswapCallingParams.collectParams(tokenId, msg.sender);\\n            // collect swap fee from uniswap\\n            INonfungiblePositionManager(uniV3NFTManager).collect(params);\\n        }\\n    }\\n\\n    // Control fuctions for the contract owner and operators.\\n\\n    /// @notice If something goes wrong, we can send back user's nft and locked assets\\n    /// @param tokenId The related position id.\\n    function emergenceWithdraw(uint256 tokenId) external override onlyOwner {\\n        address owner = owners[tokenId];\\n        require(owner != address(0));\\n        INonfungiblePositionManager(uniV3NFTManager).safeTransferFrom(\\n            address(this),\\n            owner,\\n            tokenId\\n        );\\n\\n        TokenStatus storage t = tokenStatus[tokenId];\\n        if (t.nIZI > 0) {\\n            // we should ensure nft refund to user\\n            // omit the case when transfer() returns false unexpectedly\\n            iziToken.transfer(owner, t.nIZI);\\n        }\\n        if (t.lockAmount > 0) {\\n            // we should ensure nft refund to user\\n            // omit the case when transfer() returns false unexpectedly\\n            IERC20(lockToken).transfer(owner, t.lockAmount);\\n        }\\n        // makesure user cannot withdraw/depositIZI or collect reward on this nft\\n        owners[tokenId] = address(0);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/UniswapOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../uniswap/interfaces.sol\\\";\\nimport \\\"./LogPowMath.sol\\\";\\n\\nlibrary UniswapOracle {\\n\\n    using UniswapOracle for address;\\n\\n    struct Observation {\\n        uint32 blockTimestamp;\\n        int56 tickCumulative;\\n        uint160 secondsPerLiquidityCumulativeX128;\\n        bool initialized;\\n    }\\n\\n    /// @dev query a certain observation from uniswap pool\\n    /// @param pool address of uniswap pool\\n    /// @param observationIndex index of wanted observation\\n    /// @return observation desired observation, see Observation to learn more\\n    function getObservation(address pool, uint observationIndex)\\n        internal\\n        view\\n        returns (Observation memory observation) \\n    {\\n        (\\n            observation.blockTimestamp,\\n            observation.tickCumulative,\\n            observation.secondsPerLiquidityCumulativeX128,\\n            observation.initialized\\n        ) = IUniswapV3Pool(pool).observations(observationIndex);\\n    }\\n\\n    /// @dev query latest and oldest observations from uniswap pool\\n    /// @param pool address of uniswap pool\\n    /// @param latestIndex index of latest observation in the pool\\n    /// @param observationCardinality size of observation queue in the pool\\n    /// @return oldestObservation\\n    /// @return latestObservation\\n    function getObservationBoundary(address pool, uint16 latestIndex, uint16 observationCardinality)\\n        internal\\n        view\\n        returns (Observation memory oldestObservation, Observation memory latestObservation)\\n    {\\n        uint16 oldestIndex = (latestIndex + 1) % observationCardinality;\\n        oldestObservation = pool.getObservation(oldestIndex);\\n        if (!oldestObservation.initialized) {\\n            oldestIndex = 0;\\n            oldestObservation = pool.getObservation(0);\\n        }\\n        if (latestIndex == oldestIndex) {\\n            // oldest observation is latest observation\\n            latestObservation = oldestObservation;\\n        } else {\\n            latestObservation = pool.getObservation(latestIndex);\\n        }\\n    }\\n\\n    struct Slot0 {\\n        int24 tick;\\n        uint160 sqrtPriceX96;\\n        uint16 observationIndex;\\n        uint16 observationCardinality;\\n        uint16 observationCardinalityNext;\\n    }\\n\\n    /// @dev view slot0 infomations from uniswap pool\\n    /// @param pool address of uniswap\\n    /// @return slot0 a Slot0 struct with necessary info, see Slot0 struct above\\n    function getSlot0(address pool) \\n        internal\\n        view\\n        returns (Slot0 memory slot0) {\\n        (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            ,\\n        \\n        ) = IUniswapV3Pool(pool).slot0();\\n        slot0.tick = tick;\\n        slot0.sqrtPriceX96 = sqrtPriceX96;\\n        slot0.observationIndex = observationIndex;\\n        slot0.observationCardinality = observationCardinality;\\n        slot0.observationCardinalityNext = observationCardinalityNext;\\n    }\\n\\n    // note if we call this interface, we must ensure that the \\n    //    oldest observation preserved in pool is older than 2h ago\\n    function _getAvgTickFromTarget(address pool, uint32 targetTimestamp, int56 latestTickCumu, uint32 latestTimestamp)\\n        private\\n        view\\n        returns (int24 tick) \\n    {\\n        uint32[] memory secondsAgo = new uint32[](1);\\n        secondsAgo[0] = uint32(block.timestamp) - targetTimestamp;\\n\\n        int56[] memory tickCumulatives;\\n        \\n        (tickCumulatives,) = IUniswapV3Pool(pool).observe(secondsAgo);\\n        uint56 timeDelta = latestTimestamp - targetTimestamp;\\n\\n        int56 tickAvg = (latestTickCumu - tickCumulatives[0]) / int56(timeDelta);\\n        tick = int24(tickAvg);\\n    }\\n\\n    /// @dev compute avg tick and avg sqrt price of pool within one hour from now\\n    /// @param pool address of uniswap pool\\n    /// @return tick computed avg tick\\n    /// @return sqrtPriceX96 computed avg sqrt price, in the form of 96-bit fixed point number\\n    function getAvgTickPriceWithin2Hour(address pool)\\n        internal\\n        view\\n        returns (int24 tick, uint160 sqrtPriceX96, int24 currTick, uint160 currSqrtPriceX96)\\n    {\\n        Slot0 memory slot0 = pool.getSlot0();\\n\\n        if (slot0.observationCardinality == 1) {\\n            // only 1 observation in the swap pool\\n            // we could simply return tick/sqrtPrice of slot0\\n            return (slot0.tick, slot0.sqrtPriceX96, slot0.tick, slot0.sqrtPriceX96);\\n        } else {\\n            // we will search the latest observation and the observation 1h ago \\n\\n            // 1st, we should get the boundary of the observations in the pool\\n            Observation memory oldestObservation;\\n            Observation memory latestObservation;\\n            (oldestObservation, latestObservation) = pool.getObservationBoundary(slot0.observationIndex, slot0.observationCardinality);\\n            \\n            if (oldestObservation.blockTimestamp == latestObservation.blockTimestamp) {\\n                // there is only 1 valid observation in the pool\\n                return (slot0.tick, slot0.sqrtPriceX96, slot0.tick, slot0.sqrtPriceX96);\\n            }\\n            uint32 twoHourAgo = uint32(block.timestamp - 7200);\\n\\n            // now there must be at least 2 valid observations in the pool\\n            if (twoHourAgo <= oldestObservation.blockTimestamp || latestObservation.blockTimestamp <= oldestObservation.blockTimestamp + 3600) {\\n                // the oldest observation updated within 1h\\n                // we can not safely call IUniswapV3Pool.observe(...) for it 1h ago\\n                uint56 timeDelta = latestObservation.blockTimestamp - oldestObservation.blockTimestamp;\\n                int56 tickAvg = (latestObservation.tickCumulative - oldestObservation.tickCumulative) / int56(timeDelta);\\n                tick = int24(tickAvg);\\n            } else {\\n                // we are sure that the oldest observation is old enough\\n                // we can safely call IUniswapV3Pool.observe(...) for it 1h ago\\n                uint32 targetTimestamp = twoHourAgo;\\n                if (targetTimestamp + 3600 > latestObservation.blockTimestamp) {\\n                    targetTimestamp = latestObservation.blockTimestamp - 3600;\\n                }\\n                tick = _getAvgTickFromTarget(pool, targetTimestamp, latestObservation.tickCumulative, latestObservation.blockTimestamp);\\n            }\\n            sqrtPriceX96 = LogPowMath.getSqrtPrice(tick);\\n            return (tick, sqrtPriceX96, slot0.tick, slot0.sqrtPriceX96);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/UniswapCallingParams.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../uniswap/interfaces.sol\\\";\\nimport \\\"./Math.sol\\\";\\n\\nlibrary UniswapCallingParams {\\n    // fill INonfungiblePositionManager.CollectParams struct to call INonfungiblePositionManager.collect(...)\\n    function collectParams(uint256 uniPositionID, address recipient)\\n        internal\\n        pure\\n        returns (INonfungiblePositionManager.CollectParams memory params)\\n    {\\n        params.tokenId = uniPositionID;\\n        params.recipient = recipient;\\n        params.amount0Max = 0xffffffffffffffffffffffffffffffff;\\n        params.amount1Max = 0xffffffffffffffffffffffffffffffff;\\n    }\\n\\n    function decreaseLiquidityParams(\\n        uint256 uniPositionID,\\n        uint128 liquidity,\\n        uint256 deadline\\n    )\\n        internal\\n        pure\\n        returns (\\n            INonfungiblePositionManager.DecreaseLiquidityParams memory params\\n        )\\n    {\\n        params.tokenId = uniPositionID;\\n        params.liquidity = liquidity;\\n        params.amount0Min = 0;\\n        params.amount1Min = 0;\\n        params.deadline = deadline;\\n    }\\n\\n    /// @dev fill INonfungiblePositionManager.MintParams struct to call INonfungiblePositionManager.mint(...)\\n    /// @param token0 one of token pair in uniswap pool, note here not necessary to ensure that token0 < token1\\n    /// @param token1 another token\\n    /// @param fee fee\\n    /// @param amount0 amount of token0\\n    /// @param amount1 amount of token1\\n    /// @param tickLeft tickLower\\n    /// @param tickRight tickUpper\\n    /// @param deadline deadline of mint calling\\n    /// @return params MintParams\\n    function mintParams(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint256 amount0,\\n        uint256 amount1,\\n        int24 tickLeft,\\n        int24 tickRight,\\n        uint256 deadline\\n    )\\n        internal\\n        view\\n        returns (INonfungiblePositionManager.MintParams memory params)\\n    {\\n        params.fee = fee;\\n        params.tickLower = tickLeft;\\n        params.tickUpper = tickRight;\\n        params.deadline = deadline;\\n        params.recipient = address(this);\\n        params.amount0Min = 0;\\n        params.amount1Min = 0;\\n        if (token0 < token1) {\\n            params.token0 = token0;\\n            params.token1 = token1;\\n            params.amount0Desired = amount0;\\n            params.amount1Desired = amount1;\\n        } else {\\n            params.token0 = token1;\\n            params.token1 = token0;\\n            params.amount0Desired = amount1;\\n            params.amount1Desired = amount0;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/base/MiningBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.4;\\n\\n// Uncomment if needed.\\n// import \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../libraries/FixedPoints.sol\\\";\\nimport \\\"../libraries/Math.sol\\\";\\nimport \\\"../multicall.sol\\\";\\n\\nabstract contract MiningBase is Ownable, Multicall, ReentrancyGuard {\\n\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /// @dev Last block number that the accRewardRerShare is touched.\\n    uint256 public lastTouchBlock;\\n\\n    /// @dev The block number when NFT mining rewards starts/ends.\\n    uint256 public startBlock;\\n    uint256 public endBlock;\\n    struct RewardInfo {\\n        /// @dev Contract of the reward erc20 token.\\n        address rewardToken;\\n        /// @dev who provides reward\\n        address provider;\\n        /// @dev Accumulated Reward Tokens per share, times Q128.\\n        uint256 accRewardPerShare;\\n        /// @dev Reward amount for each block.\\n        uint256 rewardPerBlock;\\n    }\\n\\n    mapping(uint256 => RewardInfo) public rewardInfos;\\n    uint256 public rewardInfosLen;\\n\\n    /// @dev Store the owner of the NFT token\\n    mapping(uint256 => address) public owners;\\n    /// @dev The inverse mapping of owners.\\n    mapping(address => EnumerableSet.UintSet) internal tokenIds;\\n\\n    /// @dev token to lock, 0 for not boost\\n    IERC20 public iziToken;\\n    /// @dev current total nIZI.\\n    uint256 public totalNIZI;\\n\\n    /// @notice Current total virtual liquidity.\\n    uint256 public totalVLiquidity;\\n\\n    /// @notice emit if user successfully deposit\\n    /// @param user user\\n    /// @param tokenId id of mining (same as uniswap nft token id)\\n    /// @param nIZI amount of boosted iZi\\n    event Deposit(address indexed user, uint256 tokenId, uint256 nIZI);\\n    /// @notice emit if user successfully withdraw\\n    /// @param user user\\n    /// @param tokenId id of mining (same as uniswap nft token id)\\n    event Withdraw(address indexed user, uint256 tokenId);\\n    /// @notice emit if user successfully collect reward\\n    /// @param user user\\n    /// @param tokenId id of mining (same as uniswap nft token id)\\n    /// @param token address of reward erc-20 token\\n    /// @param amount amount of erc-20 token user received \\n    event CollectReward(address indexed user, uint256 tokenId, address token, uint256 amount);\\n    /// @notice emit if contract owner successfully calls modifyEndBlock(...)\\n    /// @param endBlock endBlock \\n    event ModifyEndBlock(uint256 endBlock);\\n    /// @notice emit if contract owner successfully calls modifyRewardPerBlock(...)\\n    /// @param rewardToken address of reward erc20-token\\n    /// @param rewardPerBlock new reward per block of 'rewardToken'\\n    event ModifyRewardPerBlock(address indexed rewardToken, uint256 rewardPerBlock);\\n    /// @notice emit if contract owner successfully calls modifyProvider(...)\\n    /// @param rewardToken address of reward erc20-token\\n    /// @param provider New provider\\n    event ModifyProvider(address indexed rewardToken, address provider);\\n\\n    /// @notice Update reward variables to be up-to-date.\\n    /// @param vLiquidity vLiquidity to add or minus\\n    /// @param isAdd add or minus\\n    function _updateVLiquidity(uint256 vLiquidity, bool isAdd) internal {\\n        if (isAdd) {\\n            totalVLiquidity = totalVLiquidity + vLiquidity;\\n        } else {\\n            totalVLiquidity = totalVLiquidity - vLiquidity;\\n        }\\n\\n        // max lockBoostMultiplier is 3\\n        require(totalVLiquidity <= FixedPoints.Q128 * 3, \\\"TOO MUCH LIQUIDITY STAKED\\\");\\n    }\\n\\n    /// @notice Update reward variables to be up-to-date.\\n    /// @param nIZI amount of boosted iZi to add or minus\\n    /// @param isAdd add or minus\\n    function _updateNIZI(uint256 nIZI, bool isAdd) internal {\\n        if (isAdd) {\\n            totalNIZI = totalNIZI + nIZI;\\n        } else {\\n            totalNIZI = totalNIZI - nIZI;\\n        }\\n    }\\n\\n    /// @notice Update the global status.\\n    function _updateGlobalStatus() internal {\\n        if (block.number <= lastTouchBlock) {\\n            return;\\n        }\\n        if (lastTouchBlock >= endBlock) {\\n            return;\\n        }\\n        uint256 currBlockNumber = Math.min(block.number, endBlock);\\n        if (totalVLiquidity == 0) {\\n            lastTouchBlock = currBlockNumber;\\n            return;\\n        }\\n\\n        for (uint256 i = 0; i < rewardInfosLen; i++) {\\n            // tokenReward < 2^25 * 2^64 * 2*10, 15 years, 1000 r/block\\n            uint256 tokenReward = (currBlockNumber - lastTouchBlock) * rewardInfos[i].rewardPerBlock;\\n            // tokenReward * Q128 < 2^(25 + 64 + 10 + 128)\\n            rewardInfos[i].accRewardPerShare = rewardInfos[i].accRewardPerShare + ((tokenReward * FixedPoints.Q128) / totalVLiquidity);\\n        }\\n        lastTouchBlock = currBlockNumber;\\n    }\\n\\n    /// @notice compute validVLiquidity\\n    /// @param vLiquidity origin vLiquidity\\n    /// @param nIZI amount of boosted iZi\\n    function _computeValidVLiquidity(uint256 vLiquidity, uint256 nIZI)\\n        internal virtual\\n        view\\n        returns (uint256);\\n\\n    /// @notice update a token status when touched\\n    /// @param tokenId id of TokenStatus obj in sub-contracts (same with uniswap nft id)\\n    /// @param validVLiquidity validVLiquidity, can be acquired by _computeValidVLiquidity(...)\\n    /// @param nIZI latest amount of iZi boost\\n    function _updateTokenStatus(\\n        uint256 tokenId,\\n        uint256 validVLiquidity,\\n        uint256 nIZI\\n    ) internal virtual;\\n\\n\\n    struct BaseTokenStatus {\\n        uint256 vLiquidity;\\n        uint256 validVLiquidity;\\n        uint256 nIZI;\\n        uint256[] lastTouchAccRewardPerShare;\\n    }\\n\\n    /// @notice get base infomation from token status in sub-contracts\\n    /// @param tokenId id of TokenStatus obj in sub-contracts\\n    /// @return t contains base infomation (uint256 vLiquidity, uint256 validVLiquidity, uint256 nIZI, uint256[] lastTouchAccRewardPerShare)\\n    function getBaseTokenStatus(uint256 tokenId) internal virtual view returns(BaseTokenStatus memory t);\\n\\n    /// @notice deposit iZi to an nft token\\n    /// @param tokenId nft already deposited\\n    /// @param deltaNIZI amount of izi to deposit\\n    function depositIZI(uint256 tokenId, uint256 deltaNIZI)\\n        external\\n        nonReentrant\\n    {\\n        require(owners[tokenId] == msg.sender, \\\"NOT OWNER or NOT EXIST\\\");\\n        require(address(iziToken) != address(0), \\\"NOT BOOST\\\");\\n        require(deltaNIZI > 0, \\\"DEPOSIT IZI MUST BE POSITIVE\\\");\\n        _collectReward(tokenId);\\n        BaseTokenStatus memory t = getBaseTokenStatus(tokenId);\\n        _updateNIZI(deltaNIZI, true);\\n        uint256 nIZI = t.nIZI + deltaNIZI;\\n        // update validVLiquidity\\n        uint256 validVLiquidity = _computeValidVLiquidity(t.vLiquidity, nIZI);\\n        _updateTokenStatus(tokenId, validVLiquidity, nIZI);\\n\\n        // transfer iZi from user\\n        iziToken.safeTransferFrom(msg.sender, address(this), deltaNIZI);\\n    }\\n\\n    /// @notice Collect pending reward for a single position. can be called by sub-contracts\\n    /// @param tokenId The related position id.\\n    function _collectReward(uint256 tokenId) internal {\\n        BaseTokenStatus memory t = getBaseTokenStatus(tokenId);\\n\\n        _updateGlobalStatus();\\n        for (uint256 i = 0; i < rewardInfosLen; i++) {\\n            // multiplied by Q128 before\\n            uint256 _reward = (t.validVLiquidity * (rewardInfos[i].accRewardPerShare - t.lastTouchAccRewardPerShare[i])) / FixedPoints.Q128;\\n            if (_reward > 0) {\\n                IERC20(rewardInfos[i].rewardToken).safeTransferFrom(\\n                    rewardInfos[i].provider,\\n                    msg.sender,\\n                    _reward\\n                );\\n            }\\n            emit CollectReward(\\n                msg.sender,\\n                tokenId,\\n                rewardInfos[i].rewardToken,\\n                _reward\\n            );\\n        }\\n\\n        // update validVLiquidity\\n        uint256 validVLiquidity = _computeValidVLiquidity(t.vLiquidity, t.nIZI);\\n        _updateTokenStatus(tokenId, validVLiquidity, t.nIZI);\\n    }\\n\\n    /// @notice View function to get position ids staked here for an user.\\n    /// @param _user The related address.\\n    /// @return list of tokenId\\n    function getTokenIds(address _user)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        EnumerableSet.UintSet storage ids = tokenIds[_user];\\n        // push could not be used in memory array\\n        // we set the tokenIdList into a fixed-length array rather than dynamic\\n        uint256[] memory tokenIdList = new uint256[](ids.length());\\n        for (uint256 i = 0; i < ids.length(); i++) {\\n            tokenIdList[i] = ids.at(i);\\n        }\\n        return tokenIdList;\\n    }\\n    \\n    /// @notice Return reward multiplier over the given _from to _to block.\\n    /// @param _from The start block.\\n    /// @param _to The end block.\\n    function _getRewardBlockNum(uint256 _from, uint256 _to)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_from > _to) {\\n            return 0;\\n        }\\n        if (_to <= endBlock) {\\n            return _to - _from;\\n        } else if (_from >= endBlock) {\\n            return 0;\\n        } else {\\n            return endBlock - _from;\\n        }\\n    }\\n\\n    /// @notice View function to see pending Reward for a single position.\\n    /// @param tokenId The related position id.\\n    /// @return list of pending reward amount for each reward ERC20-token of tokenId\\n    function pendingReward(uint256 tokenId)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        BaseTokenStatus memory t = getBaseTokenStatus(tokenId);\\n        uint256[] memory _reward = new uint256[](rewardInfosLen);\\n        for (uint256 i = 0; i < rewardInfosLen; i++) {\\n            uint256 tokenReward = _getRewardBlockNum(\\n                lastTouchBlock,\\n                block.number\\n            ) * rewardInfos[i].rewardPerBlock;\\n            uint256 rewardPerShare = rewardInfos[i].accRewardPerShare + (tokenReward * FixedPoints.Q128) / totalVLiquidity;\\n            // l * (currentAcc - lastAcc)\\n            _reward[i] = (t.validVLiquidity * (rewardPerShare - t.lastTouchAccRewardPerShare[i])) / FixedPoints.Q128;\\n        }\\n        return _reward;\\n    }\\n\\n    /// @notice View function to see pending Rewards for an address.\\n    /// @param _user The related address.\\n    /// @return list of pending reward amount for each reward ERC20-token of this user\\n    function pendingRewards(address _user)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory _reward = new uint256[](rewardInfosLen);\\n        for (uint256 j = 0; j < rewardInfosLen; j++) {\\n            _reward[j] = 0;\\n        }\\n\\n        for (uint256 i = 0; i < tokenIds[_user].length(); i++) {\\n            uint256[] memory r = pendingReward(tokenIds[_user].at(i));\\n            for (uint256 j = 0; j < rewardInfosLen; j++) {\\n                _reward[j] += r[j];\\n            }\\n        }\\n        return _reward;\\n    }\\n\\n    // Control fuctions for the contract owner and operators.\\n\\n    /// @notice If something goes wrong, we can send back user's nft and locked assets\\n    /// @param tokenId The related position id.\\n    function emergenceWithdraw(uint256 tokenId) external virtual;\\n\\n    /// @notice Set new reward end block.\\n    /// @param _endBlock New end block.\\n    function modifyEndBlock(uint256 _endBlock) external onlyOwner {\\n        require(_endBlock > block.number, \\\"OUT OF DATE\\\");\\n        _updateGlobalStatus();\\n        // jump if origin endBlock < block.number\\n        lastTouchBlock = block.number;\\n        endBlock = _endBlock;\\n        emit ModifyEndBlock(endBlock);\\n    }\\n\\n    /// @notice Set new reward per block.\\n    /// @param rewardIdx which rewardInfo to modify\\n    /// @param _rewardPerBlock new reward per block\\n    function modifyRewardPerBlock(uint256 rewardIdx, uint256 _rewardPerBlock)\\n        external\\n        onlyOwner\\n    {\\n        require(rewardIdx < rewardInfosLen, \\\"OUT OF REWARD INFO RANGE\\\");\\n        _updateGlobalStatus();\\n        rewardInfos[rewardIdx].rewardPerBlock = _rewardPerBlock;\\n        emit ModifyRewardPerBlock(\\n            rewardInfos[rewardIdx].rewardToken,\\n            _rewardPerBlock\\n        );\\n    }\\n\\n\\n    /// @notice Set new reward provider.\\n    /// @param rewardIdx which rewardInfo to modify\\n    /// @param provider New provider\\n    function modifyProvider(uint256 rewardIdx, address provider)\\n        external\\n        onlyOwner\\n    {\\n        require(rewardIdx < rewardInfosLen, \\\"OUT OF REWARD INFO RANGE\\\");\\n        rewardInfos[rewardIdx].provider = provider;\\n        emit ModifyProvider(rewardInfos[rewardIdx].rewardToken, provider);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/uniswap/interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapV3Pool {\\n    function slot0()\\n    external\\n    view\\n    returns (\\n        uint160 sqrtPriceX96,\\n        int24 tick,\\n        uint16 observationIndex,\\n        uint16 observationCardinality,\\n        uint16 observationCardinalityNext,\\n        uint8 feeProtocol,\\n        bool unlocked\\n    );\\n    \\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n}\\n\\ninterface IUniswapV3Factory {\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n}\\n\\ninterface INonfungiblePositionManager {\\n\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n    \\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n    \\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/libraries/LogPowMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\nlibrary LogPowMath {\\n\\n    int24 internal constant MIN_POINT = -887272;\\n\\n    int24 internal constant MAX_POINT = -MIN_POINT;\\n\\n\\n    uint160 internal constant MIN_SQRT_PRICE = 4295128739;\\n\\n    uint160 internal constant MAX_SQRT_PRICE = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice sqrt(1.0001^point) in form oy 96-bit fix point num\\n    function getSqrtPrice(int24 point) internal pure returns (uint160 sqrtPrice_96) {\\n        uint256 absIdx = point < 0 ? uint256(-int256(point)) : uint256(int256(point));\\n        require(absIdx <= uint256(int256(MAX_POINT)), 'T');\\n\\n        uint256 value = absIdx & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absIdx & 0x2 != 0) value = (value * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absIdx & 0x4 != 0) value = (value * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absIdx & 0x8 != 0) value = (value * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absIdx & 0x10 != 0) value = (value * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absIdx & 0x20 != 0) value = (value * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absIdx & 0x40 != 0) value = (value * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absIdx & 0x80 != 0) value = (value * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absIdx & 0x100 != 0) value = (value * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absIdx & 0x200 != 0) value = (value * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absIdx & 0x400 != 0) value = (value * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absIdx & 0x800 != 0) value = (value * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absIdx & 0x1000 != 0) value = (value * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absIdx & 0x2000 != 0) value = (value * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absIdx & 0x4000 != 0) value = (value * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absIdx & 0x8000 != 0) value = (value * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absIdx & 0x10000 != 0) value = (value * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absIdx & 0x20000 != 0) value = (value * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absIdx & 0x40000 != 0) value = (value * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absIdx & 0x80000 != 0) value = (value * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (point > 0) value = type(uint256).max / value;\\n\\n        sqrtPrice_96 = uint160((value >> 32) + (value % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    // floor(log1.0001(sqrtPrice_96))\\n    function getLogSqrtPriceFloor(uint160 sqrtPrice_96) internal pure returns (int24 logValue) {\\n        // second inequality must be < because the price can nevex reach the price at the max tick\\n        require(sqrtPrice_96 >= MIN_SQRT_PRICE && sqrtPrice_96 < MAX_SQRT_PRICE, 'R');\\n        uint256 sqrtPrice_128 = uint256(sqrtPrice_96) << 32;\\n\\n        uint256 x = sqrtPrice_128;\\n        uint256 m = 0;\\n\\n        assembly {\\n            let y := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(5, gt(x, 0xFFFFFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(4, gt(x, 0xFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(3, gt(x, 0xFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(2, gt(x, 0xF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(1, gt(x, 0x3))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := gt(x, 0x1)\\n            m := or(m, y)\\n        }\\n\\n        if (m >= 128) x = sqrtPrice_128 >> (m - 127);\\n        else x = sqrtPrice_128 << (127 - m);\\n\\n        int256 l2 = (int256(m) - 128) << 64;\\n\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(63, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(62, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(61, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(60, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(59, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(58, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(57, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(56, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(55, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(54, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(53, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(52, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(51, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(50, y))\\n        }\\n\\n        int256 ls10001 = l2 * 255738958999603826347141;\\n\\n        int24 logFloor = int24((ls10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 logUpper = int24((ls10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        logValue = logFloor == logUpper ? logFloor : getSqrtPrice(logUpper) <= sqrtPrice_96 ? logUpper : logFloor;\\n    }\\n\\n    function getLogSqrtPriceFU(uint160 sqrtPrice_96) internal pure returns (int24 logFloor, int24 logUpper) {\\n        // second inequality must be < because the price can nevex reach the price at the max tick\\n        require(sqrtPrice_96 >= MIN_SQRT_PRICE && sqrtPrice_96 < MAX_SQRT_PRICE, 'R');\\n        uint256 sqrtPrice_128 = uint256(sqrtPrice_96) << 32;\\n\\n        uint256 x = sqrtPrice_128;\\n        uint256 m = 0;\\n\\n        assembly {\\n            let y := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(5, gt(x, 0xFFFFFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(4, gt(x, 0xFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(3, gt(x, 0xFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(2, gt(x, 0xF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(1, gt(x, 0x3))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := gt(x, 0x1)\\n            m := or(m, y)\\n        }\\n\\n        if (m >= 128) x = sqrtPrice_128 >> (m - 127);\\n        else x = sqrtPrice_128 << (127 - m);\\n\\n        int256 l2 = (int256(m) - 128) << 64;\\n\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(63, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(62, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(61, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(60, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(59, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(58, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(57, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(56, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(55, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(54, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(53, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(52, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(51, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(50, y))\\n        }\\n\\n        int256 ls10001 = l2 * 255738958999603826347141;\\n\\n        logFloor = int24((ls10001 - 3402992956809132418596140100660247210) >> 128);\\n        logUpper = int24((ls10001 + 291339464771989622907027621153398088495) >> 128);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title Simple math library for Max and Min.\\nlibrary Math {\\n    function max(int24 a, int24 b) internal pure returns (int24) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(int24 a, int24 b) internal pure returns (int24) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function tickFloor(int24 tick, int24 tickSpacing)\\n        internal\\n        pure\\n        returns (int24)\\n    {\\n        int24 c = tick / tickSpacing;\\n        if (tick < 0 && tick % tickSpacing != 0) {\\n            c = c - 1;\\n        }\\n        c = c * tickSpacing;\\n        return c;\\n    }\\n\\n    function tickUpper(int24 tick, int24 tickSpacing)\\n        internal\\n        pure\\n        returns (int24)\\n    {\\n        int24 c = tick / tickSpacing;\\n        if (tick > 0 && tick % tickSpacing != 0) {\\n            c = c + 1;\\n        }\\n        c = c * tickSpacing;\\n        return c;\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/FixedPoints.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary FixedPoints {\\n    uint256 constant Q32 = (1 << 32);\\n    uint256 constant Q64 = (1 << 64);\\n    uint256 constant Q96 = (1 << 96);\\n    uint256 constant Q128 = (1 << 128);\\n    uint256 constant Q160 = (1 << 160);\\n}\"\r\n    },\r\n    \"contracts/multicall.sol\": {\r\n      \"content\": \"//  SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title Multicall\\n/// @notice Enables calling multiple methods in a single call to the contract\\nabstract contract Multicall {\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"uniV3NFTManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lockTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct MiningOneSideBoost.PoolParams\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct MiningBase.RewardInfo[]\",\"name\":\"_rewardInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_lockBoostMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"iziTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollectReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nIZI\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"ModifyEndBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ModifyProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"ModifyRewardPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaNIZI\",\"type\":\"uint256\"}],\"name\":\"depositIZI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uniAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numIZI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"depositWithuniToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"emergenceWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMiningContractInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"uniToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lockToken_\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee_\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"lockBoostMultiplier_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"iziTokenAddr_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastTouchBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVLiquidity_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNIZI_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOraclePrice\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"avgTick\",\"type\":\"int24\"},{\"internalType\":\"uint160\",\"name\":\"avgSqrtPriceX96\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iziToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTouchBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockBoostMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"modifyEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"modifyProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"modifyRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardInfosLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"uniLiquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validVLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nIZI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTouchBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNIZI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniIsETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV3NFTManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"noReward\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MiningOneSideBoost","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000c36442b4a4522e871399cd717abdd847ab11fe88000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000794baab6b878467f93ef17e2f2851ce04e3e34c80000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000010000000000000000000000009ad37205d608b8b219e6a2573f922094cec5c2000000000000000000000000000000000000000000000000000000000000d4d9e60000000000000000000000000000000000000000000000000000000000d7ad1c00000000000000000000000000000000000000000000000000000000000000020000000000000000000000009ad37205d608b8b219e6a2573f922094cec5c200000000000000000000000000ee264e74a2fd2c7a55da705b80e092f05dae5b5d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003782dace9d900000000000000000000000000000794baab6b878467f93ef17e2f2851ce04e3e34c800000000000000000000000069d844a9b9334a846f5e6ae437844ac9a25243ba000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006f05b59d3b20000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}