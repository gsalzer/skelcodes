{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Will.sol\": {\r\n      \"content\": \"/// @author Hapi Finance Team\\n/// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/** @title Will */\\ncontract Will is Ownable {\\n    struct Beneficiary {\\n        address beneficiaryAddress;\\n        uint256 split; /// multiplied by 10000 (4 decimal point accuracy) - so 0.25 split is 2500\\n    }\\n\\n    /// Mapping of an estate holder's address to their set of beneficiaries\\n    mapping(address => Beneficiary[]) beneficiaries;\\n\\n    /// Estate information for the estateholder\\n    mapping(address => uint256) cadences;\\n    mapping(address => uint256) lastCheckIn;\\n\\n    /// Events\\n    event TransferSuccess(\\n        address indexed estateHolder,\\n        address indexed beneficiary,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    event TransferFailure(\\n        address indexed estateHolder,\\n        address indexed beneficiary,\\n        address token,\\n        uint256 amount,\\n        string message\\n    );\\n\\n    event Initialized(address indexed estateHolder);\\n\\n    /// Estate modification functions, limited to the estate holder\\n\\n    /** @notice creates an estate going to `beneficiary` and sets the checkin cadence of `cadence`\\n     */\\n    function initializeEstate(address beneficiary, uint256 cadence) public {\\n        require(\\n            beneficiaries[msg.sender].length == 0,\\n            \\\"This sender already has an estate initialized\\\"\\n        );\\n        require(\\n            cadence >= 60,\\n            \\\"Cadence must be greater than 1 minute (60 seconds)\\\"\\n        );\\n\\n        // initialize beneficiaries ONLY if one is provided that is not address(0)\\n        if (beneficiary != address(0)) {\\n            beneficiaries[msg.sender].push(Beneficiary(beneficiary, 10000));\\n        }\\n        lastCheckIn[msg.sender] = block.timestamp;\\n        cadences[msg.sender] = cadence;\\n\\n        emit Initialized(msg.sender);\\n    }\\n\\n    /** @notice If an estate exists this removes all info from this contract.\\n     * @dev This does not revoke approve individual token permissions for this contract.\\n     */\\n    function revoke() public onlyEstateHolder {\\n        delete beneficiaries[msg.sender];\\n        lastCheckIn[msg.sender] = 0;\\n        cadences[msg.sender] = 0;\\n    }\\n\\n    /** @notice Replaces beneficiaries and splits for the sender's estate.\\n     * @dev This also checks in the estate holder.\\n     * @param newAddresses addresses to add to will\\n     * @param newSplits splits to add to these beneficiaries\\n     */\\n    function updateBeneficiaries(\\n        address[] calldata newAddresses,\\n        uint256[] calldata newSplits\\n    ) public onlyEstateHolder {\\n        require(\\n            newAddresses.length == newSplits.length,\\n            \\\"There must be the same number of beneficiaries and splits\\\"\\n        );\\n        require(\\n            newAddresses.length > 0,\\n            \\\"You can't empty all beneficiaries. If you want to terminate the contract, call 'revoke()'\\\"\\n        );\\n\\n        uint256 newSplitTotal = 0;\\n\\n        for (uint256 i = 0; i < newAddresses.length; i++) {\\n            newSplitTotal += newSplits[i];\\n            if (newSplitTotal > 10000) break;\\n        }\\n\\n        require(\\n            newSplitTotal <= 10000,\\n            \\\"The splits for the given beneficiaries exceed 100%. Please re-try.\\\"\\n        );\\n\\n        /// Begin the delete and reloop to add new beneficiaries\\n        delete beneficiaries[msg.sender];\\n\\n        for (uint256 i = 0; i < newAddresses.length; i++) {\\n            /// Create new Beneficiary struct and add to storage\\n            beneficiaries[msg.sender].push(\\n                Beneficiary(newAddresses[i], newSplits[i])\\n            );\\n        }\\n\\n        /// check the user in\\n        lastCheckIn[msg.sender] = block.timestamp;\\n    }\\n\\n    /** @notice Updates the sender's checkin cadence.\\n     * @dev Requires that the sender has run initializeEstate() in the past.\\n     * @param cadence the checkin cadence in seconds.\\n     */\\n    function updateCadence(uint256 cadence) public onlyEstateHolder {\\n        require(\\n            cadence >= 60,\\n            \\\"Cadence must be greater than 1 minute (60 seconds)\\\"\\n        );\\n        cadences[msg.sender] = cadence;\\n        lastCheckIn[msg.sender] = block.timestamp;\\n    }\\n\\n    /** @notice Allows the sender to checkin.\\n     * @dev TODO do we need more protection around time?\\n     * @dev Requires that the sender has run initializeEstate() in the past.\\n     */\\n    function checkin() public onlyEstateHolder {\\n        lastCheckIn[msg.sender] = block.timestamp;\\n    }\\n\\n    /// Estate holder view only functions\\n\\n    /** @notice Returns the time since the last checkin of `msg.sender`\\n     * @return time since last checkin.\\n     */\\n    function getTimeSinceLastCheckin()\\n        public\\n        view\\n        onlyEstateHolder\\n        returns (uint256)\\n    {\\n        uint256 lastCheckInMem = lastCheckIn[msg.sender];\\n        if (lastCheckInMem == 0) {\\n            return 0;\\n        }\\n        return (block.timestamp - lastCheckInMem);\\n    }\\n\\n    /** @notice checks of the sender is an estate holder.\\n     * @return bool if the sender is an estate holder or noot.\\n     */\\n    function isEstateHolder() public view returns (bool) {\\n        return beneficiaries[msg.sender].length != 0;\\n    }\\n\\n    /** @notice the estate owner can get a list of their beneficiaries.\\n     * @return list of the sender's beneficiaries.\\n     */\\n    function getBeneficiaries()\\n        public\\n        view\\n        onlyEstateHolder\\n        returns (Beneficiary[] memory)\\n    {\\n        return beneficiaries[msg.sender];\\n    }\\n\\n    /// CONTRACT OWNER ONLY view functions for convenience in web2\\n\\n    /** @notice Gets a set of beneficiaries, restricted to the owner of contract\\n     * @param estateHolder owner of estate\\n     */\\n    function getBeneficiariesOwner(address estateHolder)\\n        public\\n        view\\n        onlyOwner\\n        returns (Beneficiary[] memory)\\n    {\\n        return beneficiaries[estateHolder];\\n    }\\n\\n    /** @notice Checks the estate's checkin cadence, restricted to owner of contract\\n     * @param estateHolder owner of estate\\n     */\\n    function getCadenceOwner(address estateHolder)\\n        public\\n        view\\n        onlyOwner\\n        returns (uint256)\\n    {\\n        return cadences[estateHolder];\\n    }\\n\\n    /** @notice Checks how long it has been since the last checkin, restricted to owner of contract\\n     * @param estateHolder owner of estate\\n     */\\n    function getTimeSinceLastCheckinOwner(address estateHolder)\\n        public\\n        view\\n        onlyOwner\\n        returns (uint256)\\n    {\\n        return lastCheckIn[estateHolder];\\n    }\\n\\n    /// Public functions that can be called by anyone\\n\\n    /** @notice Transfers the estate to beneficiaries if the estate holder is dead.\\n     * @param estateHolder the estate that will be distributed.\\n     */\\n    function transferIfDead(address estateHolder, address[] calldata tokens)\\n        public\\n    {\\n        // ensure user is an estate holder, fail if not\\n        require(\\n            cadences[estateHolder] != 0,\\n            \\\"No estate exists for the specified address. Please start by having them call 'initializeEstate()'\\\"\\n        );\\n        // Check timing, fail if the user has checked in within their cadence\\n        uint256 diff = block.timestamp - lastCheckIn[estateHolder];\\n        require(diff > cadences[estateHolder], \\\"estate holder isn't dead!\\\");\\n\\n        // Loop through the ERC20 assets the estateHolder owns, transfer\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            //\\n            // get the token, check the allowance and balance\\n            splitTokenForBeneficiaries(tokens[i], estateHolder);\\n        }\\n    }\\n\\n    /// Private Functions\\n\\n    /** @notice Splits the tokens from the estate to the beneficiaries according to will.\\n     * @dev this function is only called by transferIfDead.\\n     * @param tokenAddress the address of the token to split.\\n     * @param estateHolder the address of the estate holder.\\n     */\\n    function splitTokenForBeneficiaries(\\n        address tokenAddress,\\n        address estateHolder\\n    ) private {\\n        if (!isContract(tokenAddress)) return;\\n        IERC20 token = IERC20(tokenAddress);\\n        try token.allowance(estateHolder, address(this)) returns (\\n            uint256 allowance\\n        ) {\\n            try token.balanceOf(estateHolder) returns (uint256 balance) {\\n                // External calls succeeded, proceed.\\n                // If the estate holder does not have this token or has not given the contract allowance, skip\\n                if (allowance == 0 || balance == 0) return;\\n\\n                // The value that gets sent should be the lower of allowance and balance\\n                if (balance < allowance) {\\n                    allowance = balance;\\n                }\\n\\n                // Run through the beneficiaries and accordingly split up the assets\\n                for (\\n                    uint256 i = 0;\\n                    i < beneficiaries[estateHolder].length;\\n                    i++\\n                ) {\\n                    uint256 splitTransferAmount = (beneficiaries[estateHolder][\\n                        i\\n                    ].split * allowance) / (10000);\\n\\n                    // Execute transferFrom\\n                    try\\n                        token.transferFrom(\\n                            estateHolder,\\n                            beneficiaries[estateHolder][i].beneficiaryAddress,\\n                            splitTransferAmount\\n                        )\\n                    {\\n                        emit TransferSuccess(\\n                            estateHolder,\\n                            beneficiaries[estateHolder][i].beneficiaryAddress,\\n                            tokenAddress,\\n                            splitTransferAmount\\n                        );\\n                    } catch Error(string memory _err) {\\n                        emit TransferFailure(\\n                            estateHolder,\\n                            beneficiaries[estateHolder][i].beneficiaryAddress,\\n                            tokenAddress,\\n                            splitTransferAmount,\\n                            _err\\n                        );\\n                        return;\\n                    }\\n                }\\n            } catch {\\n                return;\\n            }\\n        } catch {\\n            return;\\n        }\\n    }\\n\\n    /** @notice Checks if the inputted address is a contract or not - to prevent failure.\\n     * @dev this function is only called by transferIfDead.\\n     * @param _addr the address of the token to split.\\n     */\\n    function isContract(address _addr) private view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    /// Modifiers\\n\\n    /** @notice Executes to restrict methods to estate holder only\\n     */\\n    modifier onlyEstateHolder() {\\n        require(\\n            cadences[msg.sender] != 0,\\n            \\\"No estate exists for this sender, please start by calling 'initializeEstate()'\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"estateHolder\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"estateHolder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"TransferFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"estateHolder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSuccess\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"checkin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiaries\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiaryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"}],\"internalType\":\"struct Will.Beneficiary[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"estateHolder\",\"type\":\"address\"}],\"name\":\"getBeneficiariesOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiaryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"}],\"internalType\":\"struct Will.Beneficiary[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"estateHolder\",\"type\":\"address\"}],\"name\":\"getCadenceOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeSinceLastCheckin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"estateHolder\",\"type\":\"address\"}],\"name\":\"getTimeSinceLastCheckinOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cadence\",\"type\":\"uint256\"}],\"name\":\"initializeEstate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEstateHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"estateHolder\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"transferIfDead\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newSplits\",\"type\":\"uint256[]\"}],\"name\":\"updateBeneficiaries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cadence\",\"type\":\"uint256\"}],\"name\":\"updateCadence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Will","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}