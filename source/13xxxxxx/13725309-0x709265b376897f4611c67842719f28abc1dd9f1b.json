{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Manifest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// https://kanon.art - K21\\n// https://daemonica.io\\n//\\n//\\n//                                   $@@@@@@@@@@@$$$\\n//                               $$@@@@@@$$$$$$$$$$$$$$##\\n//                           $$$$$$$$$$$$$$$$$#########***\\n//                        $$$$$$$$$$$$$$$#######**!!!!!!\\n//                     ##$$$$$$$$$$$$#######****!!!!=========\\n//                   ##$$$$$$$$$#$#######*#***!!!=!===;;;;;\\n//                 *#################*#***!*!!======;;;:::\\n//                ################********!!!!====;;;:::~~~~~\\n//              **###########******!!!!!!==;;;;::~~~--,,,-~\\n//             ***########*#*******!*!!!!====;;;::::~~-,,......,-\\n//            ******#**********!*!!!!=!===;;::~~~-,........\\n//           ***************!*!!!!====;;:::~~-,,..........\\n//         !************!!!!!!===;;::~~--,............\\n//         !!!*****!!*!!!!!===;;:::~~--,,..........\\n//        =!!!!!!!!!=!==;;;::~~-,,...........\\n//        =!!!!!!!!!====;;;;:::~~--,........\\n//       ==!!!!!!=!==;=;;:::~~--,...:~~--,,,..\\n//       ===!!!!!=====;;;;;:::~~~--,,..#*=;;:::~--,.\\n//       ;=============;;;;;;::::~~~-,,...$$###==;;:~--.\\n//      :;;==========;;;;;;::::~~~--,,....@@$$##*!=;:~-.\\n//      :;;;;;===;;;;;;;::::~~~--,,...$$$$#*!!=;~-\\n//       :;;;;;;;;;;:::::~~~~---,,...!*##**!==;~,\\n//       :::;:;;;;:::~~~~---,,,...~;=!!!!=;;:~.\\n//       ~:::::::::::::~~~~~---,,,....-:;;=;;;~,\\n//        ~~::::::::~~~~~~~-----,,,......,~~::::~-.\\n//         -~~~~~~~~~~~~~-----------,,,.......,-~~~~~,.\\n//          ---~~~-----,,,,,........,---,.\\n//           ,,--------,,,,,,.........\\n//             .,,,,,,,,,,,,......\\n//                ...............\\n//                    .........\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Base64.sol\\\";\\nimport \\\"./Helpers.sol\\\";\\nimport \\\"./Sacred.sol\\\";\\n\\n\\n\\n/** @title Daemonica Manifest library\\n  * @author @0xAnimist\\n  * @notice Manifests Daemonica entities\\n  */\\nlibrary Manifest {\\n\\n   string public constant DELIMITER = \\\" \\\";\\n\\n\\n   /** @notice Packs numerical matrix values into a DELIMITER-delimited string\\n     * @param _theta The 8 x 8 matrix of uint8 values\\n     * @return String representation of the matrix\\n     */\\n   function packSvg(uint8[8][8] memory _theta) public pure returns (string memory) {\\n     string[17] memory parts;\\n     parts[0] = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 666 888\\\"><style>.en { fill: #973036; font-family: serif; font-size: 30px; letter-spacing: 3px; white-space: pre; text-align: justify; text-justify: inter-word;}</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"black\\\"/><text y=\\\"150\\\" class=\\\"en\\\">';\\n\\n     parts[1] = Helpers.stringifyRow(_theta[0], DELIMITER);//row 0\\n\\n     parts[2] = '</text><text y=\\\"195\\\" class=\\\"en\\\">';\\n\\n     parts[3] = Helpers.stringifyRow(_theta[1], DELIMITER);//row 1\\n\\n     parts[4] = '</text><text y=\\\"240\\\" class=\\\"en\\\">';\\n\\n     parts[5] = Helpers.stringifyRow(_theta[2], DELIMITER);//row 2\\n\\n     parts[6] = '</text><text y=\\\"285\\\" class=\\\"en\\\">';\\n\\n     parts[7] = Helpers.stringifyRow(_theta[3], DELIMITER);//row 3\\n\\n     parts[8] = '</text><text y=\\\"330\\\" class=\\\"en\\\">';\\n\\n     parts[9] = Helpers.stringifyRow(_theta[4], DELIMITER);//row 4\\n\\n     parts[10] = '</text><text y=\\\"375\\\" class=\\\"en\\\">';\\n\\n     parts[11] = Helpers.stringifyRow(_theta[5], DELIMITER);//row 5\\n\\n     parts[12] = '</text><text y=\\\"420\\\" class=\\\"en\\\">';\\n\\n     parts[13] = Helpers.stringifyRow(_theta[6], DELIMITER);//row 6\\n\\n     parts[14] = '</text><text y=\\\"465\\\" class=\\\"en\\\">';\\n\\n     parts[15] = Helpers.stringifyRow(_theta[7], DELIMITER);//row 7\\n\\n     parts[16] = '</text></svg>';\\n\\n     string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]));\\n     output = string(abi.encodePacked(output, parts[9], parts[10], parts[11], parts[12], parts[13], parts[14], parts[15], parts[16]));\\n\\n     return output;\\n   }\\n\\n\\n   /** @notice Packs an entity's attributes into a string for rendering as metadata\\n     * @param _tau The dims of an entity at the given moment in 3d time\\n     * @param _tick The tick value of an entity at the given moment in 3d time\\n     */\\n   function packAttributes(string[] memory _tau, uint256 _tick) public pure returns (string memory) {\\n     string memory attributes = string(abi.encodePacked(\\n       '\\\"attributes\\\": [{ \\\"tick\\\": ',\\n       Helpers.toString(_tick),\\n       '},{ \\\"trait_type\\\": \\\"dimensions\\\", \\\"value\\\": ',\\n       Helpers.toString(_tau.length),\\n       '}'\\n     ));\\n\\n     if(_tau.length > 0){\\n       for(uint8 i = 0; i < _tau.length-1; i++){\\n         attributes = string(abi.encodePacked(attributes, ',{ \\\"trait_type\\\": \\\"dimension\\\", \\\"value\\\": \\\"', _tau[i], '\\\"}'));\\n       }\\n       return string(abi.encodePacked(attributes, ',{ \\\"trait_type\\\": \\\"dimension\\\", \\\"value\\\": \\\"', _tau[_tau.length-1], '\\\"}],'));\\n     }else{\\n       return string(abi.encodePacked(attributes, '],'));\\n     }\\n   }\\n\\n\\n   /** @notice Manifests a Daemonica entity\\n     * @param _tokenId The _tokenId of the entity to render\\n     * @param _theta The matrix of frequency values of the entity at the given moment in 3d time\\n     * @param _tau The dims of an entity at the given moment in 3d time\\n     * @param _tick The tick value of an entity at the given moment in 3d time\\n     * @param _newday The corresponding block.timestamp to the given moment in 3d time\\n     */\\n   function entity(\\n     uint256 _tokenId,\\n     uint8[8][8] memory _theta,\\n     string[] memory _tau,\\n     uint256 _tick,\\n     uint256 _newday\\n   ) public pure returns (string memory) {\\n     string memory svg = packSvg(_theta);\\n\\n     string memory attributes;\\n\\n     if(_newday > 0){\\n       attributes = string(abi.encodePacked(\\n         '\\\"manifested\\\": ',\\n         Helpers.toString(_newday),\\n         ',',\\n         attributes,\\n         packAttributes(_tau, _tick)\\n       ));\\n     }else{\\n       attributes = string(abi.encodePacked('\\\"manifested\\\": 0,'));\\n     }\\n\\n     string memory json = Base64.encode(\\n       bytes(\\n         string(\\n           abi.encodePacked(\\n             '{\\\"name\\\": \\\"',\\n             Sacred.callBy(_tokenId),\\n             '\\\", \\\"description\\\": \\\"Daemonican entity ',\\n             Helpers.toString(_tokenId),\\n             '\\\\u002F8888: ',\\n             '\\\\u03BE = Xi, *in intentione recta*. Ludwig Wittgenstein used \\\\u03BE as a variable in Tractatus Logico-Philosophicus to represent aspects of his \\\\u201Cpropositions\\\\u201D. He was a mystic who hid his incantations in his philosophy, like how 6.522 + 2.003 = 7. A Daemonican entity is also a proposition, *qualitas occulta*.',\\n             '\\\", ',\\n             attributes,\\n             '\\\"image\\\": \\\"data:image/svg+xml;base64,',\\n             Base64.encode(bytes(svg)), '\\\"}'\\n           )\\n         )\\n       )\\n     );\\n\\n     return string(abi.encodePacked('data:application/json;base64,', json));\\n   }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/Sacred.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// https://kanon.art - K21\\n// https://daemonica.io\\n//\\n//\\n//                                   $@@@@@@@@@@@$$$\\n//                               $$@@@@@@$$$$$$$$$$$$$$##\\n//                           $$$$$$$$$$$$$$$$$#########***\\n//                        $$$$$$$$$$$$$$$#######**!!!!!!\\n//                     ##$$$$$$$$$$$$#######****!!!!=========\\n//                   ##$$$$$$$$$#$#######*#***!!!=!===;;;;;\\n//                 *#################*#***!*!!======;;;:::\\n//                ################********!!!!====;;;:::~~~~~\\n//              **###########******!!!!!!==;;;;::~~~--,,,-~\\n//             ***########*#*******!*!!!!====;;;::::~~-,,......,-\\n//            ******#**********!*!!!!=!===;;::~~~-,........\\n//           ***************!*!!!!====;;:::~~-,,..........\\n//         !************!!!!!!===;;::~~--,............\\n//         !!!*****!!*!!!!!===;;:::~~--,,..........\\n//        =!!!!!!!!!=!==;;;::~~-,,...........\\n//        =!!!!!!!!!====;;;;:::~~--,........\\n//       ==!!!!!!=!==;=;;:::~~--,...:~~--,,,..\\n//       ===!!!!!=====;;;;;:::~~~--,,..#*=;;:::~--,.\\n//       ;=============;;;;;;::::~~~-,,...$$###==;;:~--.\\n//      :;;==========;;;;;;::::~~~--,,....@@$$##*!=;:~-.\\n//      :;;;;;===;;;;;;;::::~~~--,,...$$$$#*!!=;~-\\n//       :;;;;;;;;;;:::::~~~~---,,...!*##**!==;~,\\n//       :::;:;;;;:::~~~~---,,,...~;=!!!!=;;:~.\\n//       ~:::::::::::::~~~~~---,,,....-:;;=;;;~,\\n//        ~~::::::::~~~~~~~-----,,,......,~~::::~-.\\n//         -~~~~~~~~~~~~~-----------,,,.......,-~~~~~,.\\n//          ---~~~-----,,,,,........,---,.\\n//           ,,--------,,,,,,.........\\n//             .,,,,,,,,,,,,......\\n//                ...............\\n//                    .........\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Helpers.sol\\\";\\n\\n\\n/*\\n * @title Sacred contract\\n * @author @0xAnimist\\n * @notice Used for pseudorandomly assigning sacred names\\n */\\nlibrary Sacred {\\n\\n  uint8 public constant tokensPerName = 4;\\n  uint8 public constant totalNgrams = 89;\\n  string public constant nameDelimiter = \\\".\\\";\\n\\n\\n  /** @notice Returns a sacred syllable from a host of languages, ancient and\\n    * contemporary, based on the _index\\n    * @param _index The index value from 0-88\\n    * @return The sacred syllable ngram\\n    */\\n  function ngram(uint8 _index) public pure returns (string memory) {\\n    string[totalNgrams] memory ngrams = [\\n      //Sanskrit sacred seeds\\n      \\\"\\\\u0101\\\\u1E25\\\",//birth of the universe\\n      \\\"o\\\\u1E43\\\",//opening syllable\\n      \\\"h\\\\u016B\\\\u1E43\\\",//closing syllable\\n      \\\"dh\\\\u012B\\\\u1E25\\\",//perfect wisdom\\n      \\\"pha\\\\u1E6D\\\",//ancient magical word\\n      \\\"au\\\",//Sanskrit, \\\"o\\\"\\n\\n      //Sanskrit consonants, Egyptian and Maori terms\\n      \\\"akh\\\",//Egyptian\\n      \\\"ua\\\",//Egyptian: \\\"one who becomes eight\\\" / \\\"growth comes to be\\\"\\n      \\\"kh\\\",//Egyptian: \\\"pool of water rises up\\\"\\n      \\\"qet\\\",//Egyptian: fire, grain, Serpent, \\\"pedestal gives circle\\\"\\n      \\\"ka\\\",//Sanskrit, Egypt\\n      \\\"kha\\\",//Sanskrit\\n      \\\"ba\\\",//Sanskrit, Egypt\\n      \\\"bha\\\",//Sanskrit\\n      \\\"la\\\",//Sanskrit\\n      \\\"\\\\u1E6Da\\\",//Sanskrit\\n      \\\"\\\\u1E6Dha\\\",//Sanskrit\\n      \\\"pa\\\",//Sanskrit, Maori\\n      \\\"pha\\\",//Sanskrit\\n      \\\"ga\\\",//Sanskrit\\n      \\\"gha\\\",//Sanskrit\\n      \\\"ja\\\",//Sanskrit\\n      \\\"jha\\\",//Sanskrit\\n      \\\"\\\\u1E0Da\\\",//Sanskrit\\n      \\\"\\\\u1E0Dha\\\",//Sanskrit\\n      \\\"\\\\u00F1a\\\",//Sanskrit\\n      \\\"ya\\\",//Sanskrit, Dogon\\n      \\\"ra\\\",//Sanskrit, Egyptian\\n      \\\"\\\\u015Ba\\\",//Sanskrit\\n\\n      //Dogon\\n      \\\"\\\\u0119mm\\\\u0119\\\",//from female sorghum\\n      \\\"p\\\\u014D\\\",//digitaria\\n      \\\"sigi\\\",//Sigui, Sirius\\n      \\\"tolo\\\",//star\\n\\n      //Angels\\n      \\\"el\\\",\\n      \\\"ael\\\",\\n      \\\"iel\\\",\\n      \\\"al\\\",\\n      \\\"iah\\\",\\n      \\\"vehu\\\",\\n      \\\"jel\\\",\\n      \\\"nik\\\",\\n      \\\"sit\\\",\\n      \\\"man\\\",\\n      \\\"leu\\\",\\n\\n      //Goetia\\n      \\\"mon\\\",\\n      \\\"eth\\\",\\n      \\\"deus\\\",\\n      \\\"aga\\\",\\n      \\\"bar\\\",\\n      \\\"ast\\\",\\n      \\\"mur\\\",\\n      \\\"ion\\\",\\n      \\\"tri\\\",\\n      \\\"nab\\\",\\n      \\\"ius\\\",\\n\\n      //Faerie\\n      \\\"tit\\\",\\n      \\\"mabd\\\",\\n      \\\"elf\\\",\\n      \\\"gno\\\",\\n      \\\"tua\\\",\\n      \\\"d\\\\u00E9\\\",\\n      \\\"aos\\\",\\n      \\\"s\\\\u00ED\\\",\\n\\n      //Q'ero\\n      \\\"ayni\\\",\\n      \\\"hua\\\",\\n      \\\"nee\\\",\\n      \\\"ska\\\",\\n\\n      //Greek\\n      \\\"nym\\\",\\n      \\\"pan\\\",\\n      \\\"syb\\\",\\n\\n      //Urbit\\n      \\\"zod\\\",\\n      \\\"bin\\\",\\n      \\\"ryx\\\",\\n\\n      //Chinese\\n      \\\"tian\\\",\\n      \\\"ren\\\",\\n      \\\"jing\\\",\\n      \\\"dao\\\",\\n      \\\"zhi\\\",\\n      \\\"ye\\\",\\n      \\\"xu\\\",\\n      \\\"shi\\\",\\n      \\\"gu\\\\u01D0\\\",\\n\\n      //Shintoism\\n      \\\"ama\\\",\\n      \\\"chi\\\",\\n      \\\"edo\\\",\\n      \\\"gi\\\",\\n      \\\"kon\\\",\\n      \\\"oni\\\",\\n      \\\"sei\\\"\\n    ];\\n\\n    return ngrams[_index];\\n  }\\n\\n\\n  /** @notice Pseudorandomly selects and punctuates an ngram\\n    * @param _tokenId The _tokenId of the token name to reveal\\n    * @param _index The index of the ngram (for names with > 1 ngram)\\n    * @return The resulting ngram\\n    */\\n  function pluckNGram(uint256 _tokenId, uint256 _index) public pure returns (string memory) {\\n      uint256 rand = Helpers.random(string(abi.encodePacked(Helpers.toString(_index), Helpers.toString(_tokenId))));\\n      string memory output = ngram(uint8(rand % totalNgrams));\\n      //punctuate pseudorandomly\\n      if(_index < (tokensPerName - 1)){\\n        uint256 daemonicPotential  = rand % 33;\\n        if (daemonicPotential >= 13) {\\n            output = string(abi.encodePacked(output, nameDelimiter));\\n        }\\n      }\\n\\n      return output;\\n  }\\n\\n\\n  /** @notice Reveals the name of a token\\n    * @param _tokenId The _tokenId of the token name to reveal\\n    * @return The name of _tokenId\\n    */\\n  function callBy(uint256 _tokenId) public pure returns (string memory) {\\n    string memory name = \\\"\\\";\\n\\n    for(uint i = 0; i < tokensPerName; i++){\\n      name = string(abi.encodePacked(name, pluckNGram(_tokenId, i)));\\n    }\\n\\n    return name;\\n  }\\n\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// https://kanon.art - K21\\n// https://daemonica.io\\n//\\n//\\n//                                   $@@@@@@@@@@@$$$\\n//                               $$@@@@@@$$$$$$$$$$$$$$##\\n//                           $$$$$$$$$$$$$$$$$#########***\\n//                        $$$$$$$$$$$$$$$#######**!!!!!!\\n//                     ##$$$$$$$$$$$$#######****!!!!=========\\n//                   ##$$$$$$$$$#$#######*#***!!!=!===;;;;;\\n//                 *#################*#***!*!!======;;;:::\\n//                ################********!!!!====;;;:::~~~~~\\n//              **###########******!!!!!!==;;;;::~~~--,,,-~\\n//             ***########*#*******!*!!!!====;;;::::~~-,,......,-\\n//            ******#**********!*!!!!=!===;;::~~~-,........\\n//           ***************!*!!!!====;;:::~~-,,..........\\n//         !************!!!!!!===;;::~~--,............\\n//         !!!*****!!*!!!!!===;;:::~~--,,..........\\n//        =!!!!!!!!!=!==;;;::~~-,,...........\\n//        =!!!!!!!!!====;;;;:::~~--,........\\n//       ==!!!!!!=!==;=;;:::~~--,...:~~--,,,..\\n//       ===!!!!!=====;;;;;:::~~~--,,..#*=;;:::~--,.\\n//       ;=============;;;;;;::::~~~-,,...$$###==;;:~--.\\n//      :;;==========;;;;;;::::~~~--,,....@@$$##*!=;:~-.\\n//      :;;;;;===;;;;;;;::::~~~--,,...$$$$#*!!=;~-\\n//       :;;;;;;;;;;:::::~~~~---,,...!*##**!==;~,\\n//       :::;:;;;;:::~~~~---,,,...~;=!!!!=;;:~.\\n//       ~:::::::::::::~~~~~---,,,....-:;;=;;;~,\\n//        ~~::::::::~~~~~~~-----,,,......,~~::::~-.\\n//         -~~~~~~~~~~~~~-----------,,,.......,-~~~~~,.\\n//          ---~~~-----,,,,,........,---,.\\n//           ,,--------,,,,,,.........\\n//             .,,,,,,,,,,,,......\\n//                ...............\\n//                    .........\\n\\npragma solidity ^0.8.0;\\n\\n\\n/** @title Daemonica helper functions\\n  * @author @0xAnimist\\n  * @notice Misc support for Daemonica contract suite\\n  */\\nlibrary Helpers{\\n\\n  /** @notice Converts boolean to a string\\n    * @param  value The boolean value\\n    * @return A string that reads \\\"true\\\" or \\\"false\\\"\\n    */\\n  function boolToString(bool value) public pure returns (string memory) {\\n    if(value){\\n      return \\\"true\\\";\\n    }else{\\n      return \\\"false\\\";\\n    }\\n  }\\n\\n  /** @notice Converts uint256 to a string\\n    * @param  value The uint256 value\\n    * @return A string that represents the numerical value of the input\\n    */\\n  function toString(uint256 value) public pure returns (string memory) {\\n  // Inspired by OraclizeAPI's implementation - MIT license\\n  // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n      if (value == 0) {\\n          return \\\"0\\\";\\n      }\\n      uint256 temp = value;\\n      uint256 digits;\\n      while (temp != 0) {\\n          digits++;\\n          temp /= 10;\\n      }\\n      bytes memory buffer = new bytes(digits);\\n      while (value != 0) {\\n          digits -= 1;\\n          buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n          value /= 10;\\n      }\\n      return string(buffer);\\n  }\\n\\n  /** @notice Converts uint8 to a string\\n    * @param  value The uint8 value\\n    * @return A string that represents the numerical value of the input\\n    */\\n  function toString8(uint8 value) public pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"00\\\";\\n    }\\n\\n    uint8 temp = value;\\n    uint8 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer;\\n    if(digits == 1){\\n      buffer = new bytes(2);\\n      buffer[0] = bytes1(uint8(48));\\n      buffer[1] = bytes1(uint8(48 + uint8(value % 10)));\\n    }else{\\n      buffer = new bytes(digits);\\n      while (value != 0) {\\n        digits -= 1;\\n        buffer[digits] = bytes1(uint8(48 + uint8(value % 10)));\\n        value /= 10;\\n      }\\n    }\\n\\n    return string(buffer);\\n  }\\n\\n\\n\\n  /** @notice Returns a _delimiter delimited string of all the values in an 8 uint8 long array\\n    * @param  _array Array of uint8 values to concatenate\\n    * @param  _delimiter String to delimit each value\\n    * @return Concatenated string of all the values delimited by _delimiter\\n    */\\n  function stringifyRow(uint8[8] memory _array, string memory _delimiter) internal pure returns (string memory) {\\n    string memory output = string(abi.encodePacked(\\n      '<tspan x=\\\"153\\\">',toString8(_array[0]),'</tspan>',_delimiter,\\n      '<tspan x=\\\"198\\\">',toString8(_array[1]),'</tspan>',_delimiter,\\n      '<tspan x=\\\"243\\\">',toString8(_array[2]),'</tspan>',_delimiter\\n    ));\\n\\n    output = string(abi.encodePacked(\\n      output,\\n      '<tspan x=\\\"288\\\">',toString8(_array[3]),'</tspan>',_delimiter,\\n      '<tspan x=\\\"333\\\">',toString8(_array[4]),'</tspan>',_delimiter,\\n      '<tspan x=\\\"378\\\">',toString8(_array[5]),'</tspan>',_delimiter\\n    ));\\n\\n    return string(abi.encodePacked(\\n      output,\\n      '<tspan x=\\\"423\\\">',toString8(_array[6]),'</tspan>',_delimiter,\\n      '<tspan x=\\\"468\\\">',toString8(_array[7]),'</tspan>',_delimiter\\n    ));\\n  }\\n\\n  /** @notice Compares two strings\\n    * @param  _a First string to compare\\n    * @param  _b Second string to compare\\n    * @return True if equal, false if not\\n    */\\n  function compareStrings(string memory _a, string memory _b) public pure returns (bool) {\\n    return (keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b))));\\n  }\\n\\n\\n  /** @notice Returns a substring of the given string\\n    * @param  str The string\\n    * @param  startIndex Starting index determining the substring to return\\n    * @param  endIndex Ending index determining the substring to return\\n    * @return Substring parsed from the string\\n    */\\n  function substring(string memory str, uint startIndex, uint endIndex) public pure returns (string memory) {\\n      bytes memory strBytes = bytes(str);\\n      if(endIndex == 0){\\n        endIndex = strBytes.length;\\n      }\\n      bytes memory result = new bytes(endIndex-startIndex);\\n      for(uint i = startIndex; i < endIndex; i++) {\\n          result[i-startIndex] = strBytes[i];\\n      }\\n      return string(result);\\n  }\\n\\n\\n  /** @notice Returns a pseudorandom number from a string input\\n    * @param  input A string to seed the pseudorandom number generator\\n    * @return  A pseudorandom uint256 number based on the input string\\n    */\\n  function random(string memory input) internal pure returns (uint256) {\\n      return uint256(keccak256(abi.encodePacked(input)));\\n  }\\n\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {\r\n      \"/contracts/Helpers.sol\": {\r\n        \"Helpers\": \"0x30D432918c74193032C0CD03935B02a3e026B933\"\r\n      },\r\n      \"/contracts/Sacred.sol\": {\r\n        \"Sacred\": \"0x665e40113355CA479d55111138Eacd11A7269a84\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"DELIMITER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[8][8]\",\"name\":\"_theta\",\"type\":\"uint8[8][8]\"},{\"internalType\":\"string[]\",\"name\":\"_tau\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_tick\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newday\",\"type\":\"uint256\"}],\"name\":\"entity\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_tau\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_tick\",\"type\":\"uint256\"}],\"name\":\"packAttributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[8][8]\",\"name\":\"_theta\",\"type\":\"uint8[8][8]\"}],\"name\":\"packSvg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Manifest","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}