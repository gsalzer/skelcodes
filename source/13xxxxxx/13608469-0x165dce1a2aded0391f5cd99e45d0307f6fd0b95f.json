{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/EtherOrcsRaids.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.7;\\n\\ncontract EtherOrcsRaids {\\n\\n    /*///////////////////////////////////////////////////////////////\\n                   STORAGE SLOTS  \\n    //////////////////////////////////////////////////////////////*/\\n\\n    address        implementation_;\\n    address public admin; \\n\\n    ERC721Like          public orcs;\\n    ERC20Like           public zug;\\n    ERC20Like           public boneShards;\\n    HallOfChampionsLike public hallOfChampions;\\n\\n    mapping (uint256 => Raid)         public locations;\\n    mapping (uint256 => Campaign)     public campaigns;\\n    mapping (uint256 => address)      public commanders;\\n\\n    uint256 public giantCrabHealth = 4000000;\\n    uint256 public dbl_discount = 1_000;  // 10% Discount on cost for Double Raids\\n\\n    bytes32 internal entropySauce;\\n\\n    uint256 public constant HND_PCT = 10_000; // Probabilities are given in a scale from 0 - 10_000, where 10_000 == 100% and 0 == 0%\\n\\n\\n    // All that in a single storage slot. Fuck yeah!\\n    struct Raid {\\n        uint16 minLevel;  uint16 maxLevel;  uint16 duration; uint16 cost;\\n        uint16 grtAtMin;  uint16 grtAtMax;  uint16 supAtMin; uint16 supAtMax;\\n        uint16 regReward; uint16 grtReward; uint16 supReward; // Rewards are scale down to 100(= 1BS & 1=0.01) to fit uint16. \\n    }    \\n\\n    struct Campaign { uint8 location; bool double; uint64 end; uint176 reward; }\\n\\n    event BossHit(uint256 orcId, uint256 damage, uint256 remainingHealth);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                   Admin Functions \\n    //////////////////////////////////////////////////////////////*/\\n\\n    function initializer(address orcs_, address zug_, address boneShards_, address hallOfChampions_) external {\\n        require(msg.sender == admin, \\\"not authorized\\\");\\n        orcs            = ERC721Like(orcs_);\\n        zug             = ERC20Like(zug_);\\n        boneShards      = ERC20Like(boneShards_);\\n        hallOfChampions = HallOfChampionsLike(hallOfChampions_);\\n\\n        // Creating starting locations\\n        Raid memory giantCrabBeach = Raid({\\n            minLevel: 5, maxLevel: 15,   duration:  192, cost:      65,  grtAtMin:  1500, grtAtMax: 3500, \\n            supAtMin: 0, supAtMax: 1500, regReward: 200, grtReward: 300, supReward: 500});\\n\\n        Raid memory pirateCove = Raid({\\n            minLevel: 15, maxLevel: 30,   duration:  192,  cost:     150, grtAtMin:  1500, grtAtMax: 3500, \\n            supAtMin: 0,  supAtMax: 1500, regReward: 500, grtReward: 800, supReward: 1200});\\n\\n        Raid memory spiderDen = Raid({\\n            minLevel: 15, maxLevel: 30,   duration:  192,  cost:     175, grtAtMin:  1500, grtAtMax: 3500, \\n            supAtMin: 0,  supAtMax: 1500, regReward: 400, grtReward: 800, supReward: 2000});\\n\\n        Raid memory unstableQuagmire = Raid({\\n            minLevel: 30, maxLevel: 50,   duration:  192,  cost:      250,  grtAtMin:  1500, grtAtMax: 3500, \\n            supAtMin: 0,  supAtMax: 1500, regReward: 1200, grtReward: 1500, supReward: 2300});\\n\\n        Raid memory merfolkFortress = Raid({\\n            minLevel: 50, maxLevel: 75,   duration:  192,  cost:      300,  grtAtMin:  1500, grtAtMax: 3500, \\n            supAtMin: 0,  supAtMax: 1500, regReward: 1600, grtReward: 2000, supReward: 3000});\\n\\n        locations[0] = giantCrabBeach;\\n        locations[1] = pirateCove;\\n        locations[2] = spiderDen;\\n        locations[3] = unstableQuagmire;\\n        locations[4] = merfolkFortress;\\n    }\\n\\n    function addLocation(\\n        uint256 id, uint16 minLevel_,  uint16 maxLevel_,  uint16 duration_, uint16 cost_, uint16 grtAtMin_, uint16 grtAtMax_,\\n        uint16 supAtMin_, uint16 supAtMax_, uint16 regReward_, uint16 grtReward_, uint16 supReward_) external \\n    {\\n        require(msg.sender == admin, \\\"not authorized\\\");\\n\\n        Raid memory raid = Raid({\\n            minLevel:  minLevel_,  maxLevel:  maxLevel_,  duration:  duration_, cost:     cost_,  \\n            grtAtMin:  grtAtMin_,  grtAtMax:  grtAtMax_,  supAtMin:  supAtMin_, supAtMax: supAtMax_,\\n            regReward: regReward_, grtReward: grtReward_, supReward: supReward_});\\n\\n        locations[id] = raid;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                   PUBLIC FUNCTIONS \\n    //////////////////////////////////////////////////////////////*/\\n\\n    function unstake(uint256 orcId) public {\\n        Campaign memory cmp = campaigns[orcId];\\n\\n        require(msg.sender == address(orcs), \\\"Not orcs contract\\\");\\n        require(_ended(campaigns[orcId]),   \\\"Still raiding\\\");\\n\\n        if (cmp.reward > 0) _claim(orcId);\\n\\n        orcs.transfer(commanders[orcId], orcId);\\n\\n        delete commanders[orcId];\\n        delete campaigns[orcId]; \\n    }\\n\\n    function claim(uint256[] calldata ids) external {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _claim(ids[i]);\\n        }\\n        _updateEntropy();\\n    }   \\n\\n    function stakeManyAndStartCampaign(uint256[] calldata ids_, address owner_, uint256 location_, bool double_) external {\\n        for (uint256 i = 0; i < ids_.length; i++) {\\n            _stake(ids_[i], owner_);\\n            _startCampaign(ids_[i], location_, double_);\\n        }\\n        _updateEntropy();\\n    }\\n\\n    function startCampaignWithMany(uint256[] calldata ids, uint256 location_, bool double_) external {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _startCampaign(ids[i], location_, double_);\\n        }\\n        _updateEntropy();\\n    } \\n\\n    /*///////////////////////////////////////////////////////////////\\n                   INTERNAl HELPERS  \\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _claim(uint256 orcId) internal {\\n        Campaign memory cmp = campaigns[orcId]; \\n\\n        if (cmp.reward > 0 && _ended(campaigns[orcId])) {\\n            campaigns[orcId].reward = 0;\\n            boneShards.mint(commanders[orcId], cmp.reward);\\n        }\\n    } \\n\\n    function _stake(uint256 orcId, address owner) internal {\\n        require(commanders[orcId] == address(0), \\\"already Staked\\\");\\n        require(msg.sender == address(orcs));\\n        require(orcs.ownerOf(orcId) == address(this), \\\"orc not transferred\\\");\\n\\n        commanders[orcId] = owner;\\n    }\\n\\n    function _startCampaign(uint orcId, uint256 location_,bool double) internal {\\n        Raid memory raid = locations[location_];\\n        \\n        address owner = commanders[orcId];\\n        require(msg.sender == address(orcs), \\\"Not allowed\\\");\\n        require(_ended(campaigns[orcId]),   \\\"Currently on campaign\\\");\\n\\n        if (campaigns[orcId].reward > 0) _claim(orcId);\\n\\n        (,,,,uint256 orcLevel,,) = EtherOrcLike(address(orcs)).orcs(orcId);\\n        \\n        require(orcLevel >= raid.minLevel, \\\"below min level\\\");\\n\\n        uint256 zugAmount = uint256(raid.cost) * 1 ether;\\n        uint256 duration  = raid.duration;\\n\\n        uint176 reward  = _getReward(raid, orcId, uint16(orcLevel), \\\"RAID\\\");\\n         \\n        campaigns[orcId].double = false;\\n        \\n        if (double) {\\n            uint256 totalCost = zugAmount * 2;\\n            zugAmount  = totalCost - (totalCost * dbl_discount / HND_PCT);\\n            reward    += _getReward(raid, orcId, uint16(orcLevel), \\\"DOUBLE_RAID\\\");\\n            duration  += raid.duration;\\n\\n            campaigns[orcId].double = true;\\n        }\\n        \\n        zug.burn(owner, zugAmount);\\n\\n        campaigns[orcId].location  = uint8(location_);\\n        campaigns[orcId].reward   += reward;\\n        campaigns[orcId].end       = uint64(block.timestamp + (duration * 1 hours));\\n\\n        _attackBoss(orcId);\\n    }   \\n\\n    function _updateEntropy() internal {\\n        entropySauce = keccak256(abi.encodePacked(tx.origin, block.coinbase));\\n    }\\n\\n    function _ended(Campaign memory cmp) internal view returns(bool) {\\n        return block.timestamp > (giantCrabHealth == 0 ? cmp.end - (cmp.double ? 2 days : 1 days) : cmp.end);\\n    }\\n\\n    function _getReward(Raid memory raid, uint256 orcId, uint16 orcLevel, string memory salt) internal view returns(uint176 reward) {\\n        uint256 rdn = (_randomize(_rand(), salt, orcId) % 10_000) + 1;\\n        uint256 champBonus = _getChampionBonus(uint16(orcId));\\n\\n        uint256 greatProb  = _getBaseOutcome(raid.minLevel, raid.maxLevel, raid.grtAtMin, raid.grtAtMax, orcLevel) + _getLevelBonus(raid.maxLevel, orcLevel) + champBonus;\\n        uint256 superbProb = _getBaseOutcome(raid.minLevel, raid.maxLevel, raid.supAtMin, raid.supAtMax, orcLevel) + champBonus;\\n\\n        reward = uint176(rdn <= superbProb ? raid.supReward  : rdn <= greatProb + superbProb ? raid.grtReward : raid.regReward) * 1e16;\\n    }\\n\\n\\n    function _getBaseOutcome(uint256 minLevel, uint256 maxLevel, uint256 minProb, uint256 maxProb, uint256 orcLevel) internal pure returns(uint256 prob) {\\n        orcLevel = orcLevel > maxLevel ? maxLevel : orcLevel;\\n        prob = minProb + ((orcLevel - minLevel)  * HND_PCT / (maxLevel - minLevel) * (maxProb - minProb)) / HND_PCT;\\n    }\\n\\n    function _getLevelBonus(uint256 maxLevel, uint256 orcLevel) internal pure returns (uint256 prob){\\n        if(orcLevel <= maxLevel) return 0;\\n        if (orcLevel <= maxLevel + 20) return ((orcLevel - maxLevel) * HND_PCT / 20 * 500) / HND_PCT;\\n        prob = 500;\\n    }\\n\\n    function _getChampionBonus(uint16 orcId) internal view returns (uint256 bonus){\\n        bonus =  HallOfChampionsLike(hallOfChampions).joined(orcId) > 0 ? 100 : 0;\\n    }\\n\\n    function _attackBoss(uint256 orcId) internal {\\n        uint256 damage = _randomize(_rand(), \\\"ATTACK\\\", orcId) % 1000;\\n        giantCrabHealth = damage >= giantCrabHealth ? 0 : giantCrabHealth - damage;\\n        emit BossHit(orcId, damage, giantCrabHealth);\\n    }\\n\\n    function _randomize(uint256 rand, string memory val, uint256 spicy) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encode(rand, val, spicy)));\\n    }\\n\\n    function _rand() internal view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(msg.sender, block.timestamp, block.basefee, block.timestamp, entropySauce)));\\n    }\\n\\n}\\n\\ninterface ERC20Like {\\n    function burn(address from, uint256 amount) external;\\n    function mint(address from, uint256 amount) external;\\n}\\n\\ninterface ERC721Like {\\n    function transferFrom(address from, address to, uint256 id) external;   \\n    function transfer(address to, uint256 id) external;\\n    function ownerOf(uint256 id) external returns (address owner);\\n}\\n\\ninterface EtherOrcLike {\\n    function orcs(uint256 orcId) external view returns (uint8 body, uint8 helm, uint8 mainhand, uint8 offhand, uint16 level, uint16 zugModifier, uint32 lvlProgress);\\n} \\n\\ninterface HallOfChampionsLike {\\n    function joined(uint256 orcId) external view returns (uint256 joinDate);\\n} \\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orcId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"damage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingHealth\",\"type\":\"uint256\"}],\"name\":\"BossHit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HND_PCT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"minLevel_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxLevel_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"duration_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cost_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"grtAtMin_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"grtAtMax_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"supAtMin_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"supAtMax_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"regReward_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"grtReward_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"supReward_\",\"type\":\"uint16\"}],\"name\":\"addLocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boneShards\",\"outputs\":[{\"internalType\":\"contract ERC20Like\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaigns\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"location\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"double\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"end\",\"type\":\"uint64\"},{\"internalType\":\"uint176\",\"name\":\"reward\",\"type\":\"uint176\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commanders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dbl_discount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giantCrabHealth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hallOfChampions\",\"outputs\":[{\"internalType\":\"contract HallOfChampionsLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"orcs_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zug_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"boneShards_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hallOfChampions_\",\"type\":\"address\"}],\"name\":\"initializer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"minLevel\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxLevel\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"duration\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cost\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"grtAtMin\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"grtAtMax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"supAtMin\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"supAtMax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"regReward\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"grtReward\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"supReward\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orcs\",\"outputs\":[{\"internalType\":\"contract ERC721Like\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids_\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"location_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"double_\",\"type\":\"bool\"}],\"name\":\"stakeManyAndStartCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"location_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"double_\",\"type\":\"bool\"}],\"name\":\"startCampaignWithMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orcId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zug\",\"outputs\":[{\"internalType\":\"contract ERC20Like\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EtherOrcsRaids","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}