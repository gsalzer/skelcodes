{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.8.6;\r\n\r\ninterface IENS {\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n\r\n    // Logged when an operator is added or removed.\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    function setRecord(\r\n        bytes32 node,\r\n        address owner,\r\n        address resolver,\r\n        uint64 ttl\r\n    ) external;\r\n\r\n    function setSubnodeRecord(\r\n        bytes32 node,\r\n        bytes32 label,\r\n        address owner,\r\n        address resolver,\r\n        uint64 ttl\r\n    ) external;\r\n\r\n    function setSubnodeOwner(\r\n        bytes32 node,\r\n        bytes32 label,\r\n        address owner\r\n    ) external returns (bytes32);\r\n\r\n    function setResolver(bytes32 node, address resolver) external;\r\n\r\n    function setOwner(bytes32 node, address owner) external;\r\n\r\n    function setTTL(bytes32 node, uint64 ttl) external;\r\n\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    function owner(bytes32 node) external view returns (address);\r\n\r\n    function resolver(bytes32 node) external view returns (address);\r\n\r\n    function ttl(bytes32 node) external view returns (uint64);\r\n\r\n    function recordExists(bytes32 node) external view returns (bool);\r\n\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\n\r\n// File contracts/lib/Ownable.sol\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address private nextOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    // modifiers\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"caller is not the owner.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyNextOwner() {\r\n        require(isNextOwner(), \"current owner must set caller as next owner.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize contract by setting transaction submitter as initial owner.\r\n     */\r\n    constructor(address owner_) {\r\n        owner = owner_;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Initiate ownership transfer by setting nextOwner.\r\n     */\r\n    function transferOwnership(address nextOwner_) external onlyOwner {\r\n        require(nextOwner_ != address(0), \"Next owner is the zero address.\");\r\n\r\n        nextOwner = nextOwner_;\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel ownership transfer by deleting nextOwner.\r\n     */\r\n    function cancelOwnershipTransfer() external onlyOwner {\r\n        delete nextOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Accepts ownership transfer by setting owner.\r\n     */\r\n    function acceptOwnership() external onlyNextOwner {\r\n        delete nextOwner;\r\n\r\n        owner = msg.sender;\r\n\r\n        emit OwnershipTransferred(owner, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Renounce ownership by setting owner to zero address.\r\n     */\r\n    function renounceOwnership() external onlyOwner {\r\n        owner = address(0);\r\n\r\n        emit OwnershipTransferred(owner, address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the next owner.\r\n     */\r\n    function isNextOwner() public view returns (bool) {\r\n        return msg.sender == nextOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/lib/interface/IGovernable.sol\r\n\r\n\r\ninterface IGovernable {\r\n    function changeGovernor(address governor_) external;\r\n\r\n    function isGovernor() external view returns (bool);\r\n\r\n    function governor() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/lib/Governable.sol\r\n\r\n\r\n\r\ncontract Governable is Ownable, IGovernable {\r\n    // ============ Mutable Storage ============\r\n\r\n    // Mirror governance contract.\r\n    address public override governor;\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier onlyGovernance() {\r\n        require(isOwner() || isGovernor(), \"caller is not governance\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernor() {\r\n        require(isGovernor(), \"caller is not governor\");\r\n        _;\r\n    }\r\n\r\n    // ============ Constructor ============\r\n\r\n    constructor(address owner_) Ownable(owner_) {}\r\n\r\n    // ============ Administration ============\r\n\r\n    function changeGovernor(address governor_) public override onlyGovernance {\r\n        governor = governor_;\r\n    }\r\n\r\n    // ============ Utility Functions ============\r\n\r\n    function isGovernor() public view override returns (bool) {\r\n        return msg.sender == governor;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/distribution/interface/IDistributionLogic.sol\r\n\r\n\r\ninterface IDistributionLogic {\r\n    function version() external returns (uint256);\r\n\r\n    function distribute(address tributary, uint256 contribution) external;\r\n\r\n    function claim(address claimant) external;\r\n\r\n    function claimable(address claimant) external view returns (uint256);\r\n\r\n    function increaseAwards(address member, uint256 amount) external;\r\n}\r\n\r\n\r\n// File contracts/distribution/interface/IDistributionStorage.sol\r\n\r\n\r\ninterface IDistributionStorage {\r\n    function registered(address claimant) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/governance/token/interface/IMirrorTokenLogic.sol\r\n\r\n\r\ninterface IMirrorTokenLogic is IGovernable {\r\n    function version() external returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    function setTreasuryConfig(address newTreasuryConfig) external;\r\n}\r\n\r\n\r\n// File contracts/governance/token/interface/IMirrorTokenStorage.sol\r\n\r\n\r\ninterface IMirrorTokenStorage {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interface/IMirrorTreasury.sol\r\n\r\n\r\ninterface IMirrorTreasury {\r\n    function transferFunds(address payable to, uint256 value) external;\r\n\r\n    function transferERC20(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) external;\r\n\r\n    function contributeWithTributary(address tributary) external payable;\r\n\r\n    function contribute(uint256 amount) external payable;\r\n}\r\n\r\n\r\n// File contracts/governance/MirrorGovernorV1.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MirrorGovernorV1 is Governable {\r\n    // ============ Immutable Storage ============\r\n    bytes32 immutable rootNode;\r\n    IENS public immutable ensRegistry;\r\n\r\n    // ============ Mutable Storage ============\r\n\r\n    // The total number of proposals\r\n    uint256 public proposalCount;\r\n    // The total number of surveys.\r\n    uint256 public surveyCount;\r\n    // The maximum number of actions that can be included in a proposal\r\n    uint256 public constant proposalMaxOperations = 10;\r\n    // The minumum proposal block duration\r\n    uint256 public minProposalDuration = 5760;\r\n    // The minumum survey block duration\r\n    uint256 public minSurveyDuration = 5760;\r\n    // The latest proposal for each proposer.\r\n    mapping(address => uint256) public latestProposalIds;\r\n    // Record of all proposals.\r\n    mapping(uint256 => Proposal) public proposals;\r\n    // Mapping of all surveys.\r\n    mapping(uint256 => Survey) public surveys;\r\n    // Distribution model for voting power.\r\n    address distributionModel;\r\n    // Mirror gov token for voting power.\r\n    address token;\r\n    // Treasury for transfer proposals.\r\n    address treasury;\r\n    // The number of tokens received for voting.\r\n    uint256 votingReward = 15;\r\n\r\n    // ============ Enums ============\r\n\r\n    enum ProposalState {\r\n        Canceled,\r\n        Active,\r\n        Decided,\r\n        Executed,\r\n        Pending\r\n    }\r\n\r\n    enum SurveyState {\r\n        Active,\r\n        Decided\r\n    }\r\n\r\n    struct Call {\r\n        address target;\r\n        uint96 value;\r\n        bytes data;\r\n    }\r\n\r\n    // ============ Structs ============\r\n\r\n    struct Proposal {\r\n        Call call;\r\n        // Unique id for looking up a proposal\r\n        uint256 id;\r\n        // Creator of the proposal\r\n        address proposer;\r\n        // Flag marking whether the proposal has been canceled\r\n        bool canceled;\r\n        // Flag marking whether the proposal has been executed\r\n        bool executed;\r\n        // Voting begins at this block.\r\n        uint256 startBlock;\r\n        // Voting ends at this block.\r\n        uint256 endBlock;\r\n    }\r\n\r\n    struct Survey {\r\n        // Unique id for looking up a survey\r\n        uint256 id;\r\n        // Creator of the survey\r\n        address creator;\r\n        // Voting begins at this block.\r\n        uint256 startBlock;\r\n        // Voting ends at this block.\r\n        uint256 endBlock;\r\n    }\r\n\r\n    // Mapping of votes.\r\n    mapping(uint256 => mapping(address => bool)) votedOnSurvey;\r\n    mapping(uint256 => mapping(address => bool)) votedOnProposal;\r\n\r\n    // ============ Events ============\r\n\r\n    // Proposal Events\r\n    event ProposalCreated(uint256 id, address proposer, string description);\r\n    event VoteCast(\r\n        string label,\r\n        address indexed voter,\r\n        uint256 indexed proposalId,\r\n        bool shouldExecute\r\n    );\r\n    event ProposalExecuted(uint256 id);\r\n    event ProposalCanceled(uint256 id);\r\n\r\n    // Survey Events\r\n    event SurveyCreated(\r\n        uint256 id,\r\n        address creator,\r\n        string description,\r\n        uint256 duration\r\n    );\r\n    event SurveyResponse(\r\n        uint256 indexed surveyId,\r\n        string label,\r\n        address indexed voter,\r\n        string content\r\n    );\r\n\r\n    // Execution Events\r\n    // event ExecuteTransaction(address indexed target, uint256 value, bytes data);\r\n\r\n    // Admin events\r\n    event ChangeDistributionModel(address oldModel, address newModel);\r\n    event ChangeToken(address oldToken, address newToken);\r\n    event ChangeTreasury(address oldTreasury, address newTreasury);\r\n    event ChangeVotingReward(uint256 oldReward, uint256 newReward);\r\n\r\n    // ============ Constructor ============\r\n\r\n    constructor(\r\n        address owner_,\r\n        bytes32 rootNode_,\r\n        address ensRegistry_,\r\n        address token_,\r\n        address distributionModel_\r\n    ) Governable(owner_) {\r\n        rootNode = rootNode_;\r\n        ensRegistry = IENS(ensRegistry_);\r\n        distributionModel = distributionModel_;\r\n        token = token_;\r\n    }\r\n\r\n    // ============ Admin Configuration ============\r\n\r\n    function changeDistributionModel(address distributionModel_)\r\n        public\r\n        onlyGovernance\r\n    {\r\n        emit ChangeDistributionModel(distributionModel, distributionModel_);\r\n        distributionModel = distributionModel_;\r\n    }\r\n\r\n    function changeToken(address token_) public onlyGovernance {\r\n        emit ChangeToken(token, token_);\r\n        token = token_;\r\n    }\r\n\r\n    function changeTreasury(address treasury_) public onlyGovernance {\r\n        emit ChangeTreasury(treasury, treasury_);\r\n        treasury = treasury_;\r\n    }\r\n\r\n    function changeVotingReward(uint256 votingReward_) public onlyGovernance {\r\n        emit ChangeVotingReward(votingReward, votingReward_);\r\n        votingReward = votingReward_;\r\n    }\r\n\r\n    function changeProposalDuration(uint256 newProposalDuration)\r\n        public\r\n        onlyGovernance\r\n    {\r\n        minProposalDuration = newProposalDuration;\r\n    }\r\n\r\n    function changeSurveyDuration(uint256 newSurveyDuration)\r\n        public\r\n        onlyGovernance\r\n    {\r\n        minSurveyDuration = newSurveyDuration;\r\n    }\r\n\r\n    // ============ Surveys ============\r\n\r\n    function createSurvey(\r\n        string memory description,\r\n        // How long should we be able to vote on this for?\r\n        uint256 duration,\r\n        string calldata creatorLabel\r\n    ) public returns (uint256) {\r\n        require(\r\n            isMirrorDAO(creatorLabel, msg.sender),\r\n            \"must be registered to create\"\r\n        );\r\n        require(duration >= minSurveyDuration, \"survey duration is too short\");\r\n\r\n        surveyCount++;\r\n        Survey memory newSurvey = Survey({\r\n            id: surveyCount,\r\n            creator: msg.sender,\r\n            startBlock: block.number,\r\n            endBlock: block.number + duration\r\n        });\r\n\r\n        surveys[newSurvey.id] = newSurvey;\r\n\r\n        emit SurveyCreated(newSurvey.id, msg.sender, description, duration);\r\n        return newSurvey.id;\r\n    }\r\n\r\n    function respond(\r\n        uint256 surveyId,\r\n        string calldata label,\r\n        // \"Intro to NFTs\"\r\n        string calldata voteContent\r\n    ) external {\r\n        require(isMirrorDAO(label, msg.sender), \"needs to be a member\");\r\n        require(\r\n            surveyState(surveyId) == SurveyState.Active,\r\n            \"survey must be active\"\r\n        );\r\n        require(!votedOnSurvey[surveyId][msg.sender], \"already voted\");\r\n\r\n        votedOnSurvey[surveyId][msg.sender] = true;\r\n        emit SurveyResponse(surveyId, label, msg.sender, voteContent);\r\n        _applyReward();\r\n    }\r\n\r\n    // ============ Proposals ============\r\n\r\n    function assertSenderCanPropose(string calldata proposerLabel)\r\n        internal\r\n        view\r\n    {\r\n        require(\r\n            isMirrorDAO(proposerLabel, msg.sender),\r\n            \"must be registered to create\"\r\n        );\r\n\r\n        uint256 latestProposalId = latestProposalIds[msg.sender];\r\n        if (latestProposalId != 0) {\r\n            ProposalState proposersLatestProposalState = proposalState(\r\n                latestProposalId\r\n            );\r\n            require(\r\n                proposersLatestProposalState != ProposalState.Active,\r\n                \"one live proposal per proposer, found an already active proposal\"\r\n            );\r\n            require(\r\n                proposersLatestProposalState != ProposalState.Pending,\r\n                \"one live proposal per proposer, found an already pending proposal\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function initProposal(\r\n        Proposal memory newProposal,\r\n        string memory description\r\n    ) internal returns (uint256) {\r\n        proposalCount++;\r\n        proposals[newProposal.id] = newProposal;\r\n        latestProposalIds[newProposal.proposer] = newProposal.id;\r\n\r\n        emit ProposalCreated(newProposal.id, msg.sender, description);\r\n        return newProposal.id;\r\n    }\r\n\r\n    function propose(\r\n        Call calldata call,\r\n        string memory description,\r\n        // How long should we be able to vote on this for?\r\n        uint256 duration,\r\n        string calldata proposerLabel\r\n    ) public returns (uint256) {\r\n        assertSenderCanPropose(proposerLabel);\r\n        require(\r\n            duration >= minProposalDuration,\r\n            \"proposal duration is too short\"\r\n        );\r\n\r\n        Proposal memory newProposal = Proposal({\r\n            id: proposalCount,\r\n            proposer: msg.sender,\r\n            call: call,\r\n            canceled: false,\r\n            executed: false,\r\n            startBlock: block.number,\r\n            endBlock: block.number + duration\r\n        });\r\n\r\n        return initProposal(newProposal, description);\r\n    }\r\n\r\n    // Transfers Mints Mirror Governance Tokens.\r\n    function createMintProposal(\r\n        address receiver,\r\n        uint256 amount,\r\n        string calldata description,\r\n        uint256 duration,\r\n        string calldata proposerLabel\r\n    ) public {\r\n        assertSenderCanPropose(proposerLabel);\r\n\r\n        bytes memory data = abi.encodeWithSelector(\r\n            IMirrorTokenLogic(token).mint.selector,\r\n            receiver,\r\n            amount\r\n        );\r\n\r\n        Call memory call = Call({target: token, value: 0, data: data});\r\n\r\n        Proposal memory newProposal = Proposal({\r\n            id: proposalCount,\r\n            proposer: msg.sender,\r\n            call: call,\r\n            canceled: false,\r\n            executed: false,\r\n            startBlock: block.number,\r\n            endBlock: block.number + duration\r\n        });\r\n\r\n        initProposal(newProposal, description);\r\n    }\r\n\r\n    // Transfers ETH from the Treasury.\r\n    function createETHTransferProposal(\r\n        address payable receiver,\r\n        uint256 amount,\r\n        string calldata description,\r\n        uint256 duration,\r\n        string calldata proposerLabel\r\n    ) public {\r\n        assertSenderCanPropose(proposerLabel);\r\n\r\n        bytes memory data = abi.encodeWithSelector(\r\n            IMirrorTreasury(treasury).transferFunds.selector,\r\n            receiver,\r\n            amount\r\n        );\r\n\r\n        Call memory call = Call({target: treasury, value: 0, data: data});\r\n\r\n        Proposal memory newProposal = Proposal({\r\n            id: proposalCount,\r\n            proposer: msg.sender,\r\n            call: call,\r\n            canceled: false,\r\n            executed: false,\r\n            startBlock: block.number,\r\n            endBlock: block.number + duration\r\n        });\r\n\r\n        initProposal(newProposal, description);\r\n    }\r\n\r\n    // Transfers ERC20s from the Treasury.\r\n    function createERC20TransferProposal(\r\n        address erc20Token,\r\n        address receiver,\r\n        uint256 amount,\r\n        string calldata description,\r\n        uint256 duration,\r\n        string calldata proposerLabel\r\n    ) public {\r\n        assertSenderCanPropose(proposerLabel);\r\n\r\n        bytes memory data = abi.encodeWithSelector(\r\n            IMirrorTreasury(treasury).transferERC20.selector,\r\n            erc20Token,\r\n            receiver,\r\n            amount\r\n        );\r\n\r\n        Call memory call = Call({target: treasury, value: 0, data: data});\r\n\r\n        Proposal memory newProposal = Proposal({\r\n            id: proposalCount,\r\n            proposer: msg.sender,\r\n            call: call,\r\n            canceled: false,\r\n            executed: false,\r\n            startBlock: block.number,\r\n            endBlock: block.number + duration\r\n        });\r\n\r\n        initProposal(newProposal, description);\r\n    }\r\n\r\n    function castVote(\r\n        string calldata label,\r\n        uint256 proposalId,\r\n        bool shouldExecute\r\n    ) external {\r\n        require(isMirrorDAO(label, msg.sender), \"needs to be a member\");\r\n        require(\r\n            proposalState(proposalId) == ProposalState.Active,\r\n            \"proposal must be active\"\r\n        );\r\n        require(!votedOnProposal[proposalId][msg.sender], \"already voted\");\r\n\r\n        votedOnProposal[proposalId][msg.sender] = true;\r\n        emit VoteCast(label, msg.sender, proposalId, shouldExecute);\r\n        _applyReward();\r\n    }\r\n\r\n    // ============ Voting Power ============\r\n\r\n    // Convenience function for returning a voter's voting poewr.\r\n    function votingPower(address voter) public view returns (uint256) {\r\n        if (IDistributionStorage(distributionModel).registered(voter) == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 balance = IMirrorTokenStorage(token).balanceOf(voter);\r\n        uint256 claimable = IDistributionLogic(distributionModel).claimable(\r\n            voter\r\n        );\r\n\r\n        return balance + claimable;\r\n    }\r\n\r\n    // ============ Proposal Management ============\r\n\r\n    // Can only be called by the owner.\r\n    function executeProposal(uint256 proposalId) external payable onlyOwner {\r\n        Proposal storage proposal = proposals[proposalId];\r\n        // Can be executed if voting is complete.\r\n        require(\r\n            proposalState(proposalId) == ProposalState.Decided,\r\n            \"proposal undecided\"\r\n        );\r\n        // Once executed, we set this to executed.\r\n        proposal.executed = true;\r\n        _executeTransaction(proposal.call);\r\n        emit ProposalExecuted(proposalId);\r\n    }\r\n\r\n    function cancel(uint256 proposalId) external {\r\n        require(\r\n            proposalState(proposalId) != ProposalState.Executed,\r\n            \"cancel: cannot cancel executed proposal\"\r\n        );\r\n\r\n        Proposal storage proposal = proposals[proposalId];\r\n\r\n        require(\r\n            msg.sender == proposal.proposer || msg.sender == owner,\r\n            \"only proposer or gov owner can cancel\"\r\n        );\r\n\r\n        proposal.canceled = true;\r\n\r\n        emit ProposalCanceled(proposalId);\r\n    }\r\n\r\n    // ============ Utility Functions ============\r\n\r\n    function isMirrorDAO(string calldata label, address claimant)\r\n        public\r\n        view\r\n        returns (bool mirrorDAO)\r\n    {\r\n        bytes32 labelNode = keccak256(abi.encodePacked(label));\r\n        bytes32 node = keccak256(abi.encodePacked(rootNode, labelNode));\r\n\r\n        mirrorDAO = claimant == ensRegistry.owner(node);\r\n    }\r\n\r\n    function proposalState(uint256 proposalId)\r\n        public\r\n        view\r\n        returns (ProposalState)\r\n    {\r\n        require(proposalCount >= proposalId, \"invalid proposal id\");\r\n        Proposal storage proposal = proposals[proposalId];\r\n\r\n        if (proposal.canceled) {\r\n            // Cancelled by proposer or owner.\r\n            return ProposalState.Canceled;\r\n        } else if (proposal.executed) {\r\n            // Successfully executed.\r\n            return ProposalState.Executed;\r\n        } else if (block.number <= proposal.endBlock) {\r\n            // Still being voted on.\r\n            return ProposalState.Active;\r\n        } else {\r\n            // At this point, it should either get executed or it didn't pass.\r\n            return ProposalState.Decided;\r\n        }\r\n    }\r\n\r\n    function surveyState(uint256 surveyId) public view returns (SurveyState) {\r\n        require(surveyCount >= surveyId && surveyId > 0, \"invalid survey id\");\r\n\r\n        if (block.number <= surveys[surveyId].endBlock) {\r\n            // Still being voted on.\r\n            return SurveyState.Active;\r\n        } else {\r\n            return SurveyState.Decided;\r\n        }\r\n    }\r\n\r\n    // ============ Internal Functions ============\r\n\r\n    function _executeTransaction(Call memory call) internal {\r\n        (bool ok, ) = call.target.call{value: uint256(call.value)}(call.data);\r\n\r\n        require(ok, \"execute transaction failed\");\r\n    }\r\n\r\n    // Applies the voting reward to the sender.\r\n    function _applyReward() internal {\r\n        IDistributionLogic(distributionModel).increaseAwards(\r\n            msg.sender,\r\n            votingReward\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"rootNode_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"ensRegistry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributionModel_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newModel\",\"type\":\"address\"}],\"name\":\"ChangeDistributionModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"ChangeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"ChangeTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"ChangeVotingReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"SurveyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"surveyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"name\":\"SurveyResponse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"shouldExecute\",\"type\":\"bool\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldExecute\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributionModel_\",\"type\":\"address\"}],\"name\":\"changeDistributionModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProposalDuration\",\"type\":\"uint256\"}],\"name\":\"changeProposalDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSurveyDuration\",\"type\":\"uint256\"}],\"name\":\"changeSurveyDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"changeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"changeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"votingReward_\",\"type\":\"uint256\"}],\"name\":\"changeVotingReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proposerLabel\",\"type\":\"string\"}],\"name\":\"createERC20TransferProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proposerLabel\",\"type\":\"string\"}],\"name\":\"createETHTransferProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proposerLabel\",\"type\":\"string\"}],\"name\":\"createMintProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"creatorLabel\",\"type\":\"string\"}],\"name\":\"createSurvey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"internalType\":\"contract IENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"}],\"name\":\"isMirrorDAO\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"mirrorDAO\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNextOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minProposalDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSurveyDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalMaxOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalState\",\"outputs\":[{\"internalType\":\"enum MirrorGovernorV1.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct MirrorGovernorV1.Call\",\"name\":\"call\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct MirrorGovernorV1.Call\",\"name\":\"call\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proposerLabel\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"surveyId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"voteContent\",\"type\":\"string\"}],\"name\":\"respond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surveyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"surveyId\",\"type\":\"uint256\"}],\"name\":\"surveyState\",\"outputs\":[{\"internalType\":\"enum MirrorGovernorV1.SurveyState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"surveys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"votingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MirrorGovernorV1","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"0000000000000000000000002330ee705ffd040bb0cba8cb7734dfe00e7c4b571aaf79d9b3323ad0212f6a2f34f8c627d8d45e45a55c774d080e3077334bfad900000000000000000000000000000000000c2e074ec69a0dfb2997ba6c7d2e1e0000000000000000000000004bb7672fb652875f97fe9093bc0428d119f6e1480000000000000000000000000bfff7568546091fd6fe2b85b23976e3fff43393","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://300a0534c8a88346b5ae1d7f5d41d8a211fd47cce4402d0de97cae70fcdd68e1"}]}