{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: None\r\npragma solidity 0.8.9;\r\n\r\ninterface ERC20 {\r\n    function approve(address,uint) external returns (bool);\r\n    function balanceOf(address) external view returns (uint);\r\n    function mint(address,uint) external; // only on src chain\r\n    function burn(uint) external; // only on src chain\r\n    function Swapout(uint,address) external returns (bool);\r\n    function transfer(address,uint) external returns (bool);\r\n}\r\n\r\ninterface CErc20 {\r\n    function mint(uint) external returns (uint);\r\n    function redeemUnderlying(uint) external returns (uint);\r\n    function balanceOfUnderlying(address) external returns (uint);\r\n}\r\n\r\ncontract xChainFed {\r\n\r\n    // Shared\r\n\r\n    address public constant GOV = 0x926dF14a23BE491164dCF93f4c468A50ef659D5B;\r\n    address public chair = 0x3FcB35a1CbFB6007f9BC638D388958Bc4550cB28;\r\n    \r\n    modifier onlyChair {\r\n        require(msg.sender == chair || msg.sender == GOV, \"ONLY CHAIN OR GOV\");\r\n        _;\r\n    }\r\n\r\n    function changeChair(address newChair_) public onlyChair {\r\n        chair = newChair_;\r\n    }\r\n\r\n    function sweep(ERC20 token, address to) public onlyChair {\r\n        require(token != SRC_DOLA && token != DST_DOLA && token != ERC20(address(DST_MARKET)), \"cannot steal DOLA\");\r\n        token.transfer(to, token.balanceOf(address(this)));\r\n    }\r\n\r\n    // Source side (Ethereum)\r\n\r\n    ERC20 public constant SRC_DOLA = ERC20(0x865377367054516e17014CcdED1e7d814EDC9ce4);\r\n    address public constant SRC_BRIDGE = 0xC564EE9f21Ed8A2d8E7e76c085740d5e4c5FaFbE;\r\n\r\n    modifier onlySrc {\r\n        require(block.chainid == 1, \"WRONG CHAIN\");\r\n        _;\r\n    }\r\n\r\n    function srcMintReserves(uint amount) public onlyChair onlySrc {\r\n        SRC_DOLA.mint(address(this), amount);\r\n    }\r\n\r\n    function srcBurnReserves(uint amount) public onlyChair onlySrc {\r\n        SRC_DOLA.burn(amount);\r\n    }\r\n\r\n    function srcTransferReservesToDst(uint amount) public onlyChair onlySrc {\r\n        SRC_DOLA.transfer(SRC_BRIDGE, amount);\r\n    }\r\n\r\n    // Destination side (Fantom)\r\n    \r\n    ERC20 public constant DST_DOLA = ERC20(0x3129662808bEC728a27Ab6a6b9AFd3cBacA8A43c);\r\n    CErc20 public constant DST_MARKET = CErc20(0x5A3B9Dcdd462f264eC1bD56D618BF4552C2EaF8A);\r\n    address public dstBoard;\r\n    uint public dstSupply;\r\n    uint public dstLastSuspendTimestamp;\r\n    uint constant SUSPENSION_DURATION = 2 weeks;\r\n    uint constant DUST = 5000 ether; // 5000 DOLA minimum sent across the bridge\r\n\r\n    modifier onlyDst {\r\n        require(block.chainid != 1, \"WRONG CHAIN\");\r\n        _;\r\n    }\r\n\r\n    function dstSetBoard(address newBoard) public onlyDst {\r\n        if(dstBoard == address(0)) {\r\n            require(msg.sender == chair, \"ONLY CHAIR CAN SET BOARD FOR THE FIRST TIME\");\r\n        } else {\r\n            require(msg.sender == dstBoard, \"ONLY BOARD CAN CHANGE ITS OWN ADDRESS\");\r\n        }\r\n        dstBoard = newBoard;\r\n    }\r\n\r\n    function dstIsChairSuspended() public view onlyDst returns (bool) {\r\n        return dstLastSuspendTimestamp + SUSPENSION_DURATION > block.timestamp;\r\n    }\r\n\r\n    function dstSuspendChair() public onlyDst {\r\n        require(msg.sender == dstBoard, \"ONLY BOARD CAN SUSPEND CHAIR\");\r\n        require(!dstIsChairSuspended(), \"CHAIR ALREADY SUSPENDED\");\r\n        dstLastSuspendTimestamp = block.timestamp;\r\n    }\r\n    \r\n    function dstUnsuspendChair() public onlyDst {\r\n        require(msg.sender == dstBoard, \"ONLY BOARD CAN UNSUSPEND CHAIR\");\r\n        require(dstIsChairSuspended(), \"CHAIR NOT SUSPENDED\");\r\n        dstLastSuspendTimestamp = 0;\r\n    }\r\n\r\n    function dstTransferReservesToSrc(uint amount) public onlyDst {\r\n        require(msg.sender == chair || msg.sender == dstBoard, \"Only chair or board can transfer reserves to source\");\r\n        require(amount >= DUST);\r\n        require(DST_DOLA.Swapout(amount, address(this)));\r\n    }\r\n\r\n    function dstExpansion(uint amount) public onlyChair onlyDst {\r\n        require(!dstIsChairSuspended(), \"Chair is suspended\");\r\n        DST_DOLA.approve(address(DST_MARKET), amount);\r\n        require(DST_MARKET.mint(amount) == 0, 'Supplying failed');\r\n        dstSupply = dstSupply + amount;\r\n        emit Expansion(amount);\r\n    }\r\n\r\n    function dstContraction(uint amount) public onlyDst {\r\n        require(msg.sender == chair || msg.sender == dstBoard, \"Only chair or board can call contraction\");\r\n        require(amount <= dstSupply, \"AMOUNT TOO BIG\"); // can't burn profits\r\n        require(DST_MARKET.redeemUnderlying(amount) == 0, \"Redeem failed\");\r\n        dstSupply = dstSupply - amount;\r\n        emit Contraction(amount);\r\n    }\r\n\r\n    function dstSendProfitToGov() public onlyDst {\r\n        uint underlyingBalance = DST_MARKET.balanceOfUnderlying(address(this));\r\n        uint profit = underlyingBalance - dstSupply;\r\n        require(profit >= DUST, \"Not enough profit\");\r\n        require(DST_MARKET.redeemUnderlying(profit) == 0, \"Redeem failed\");\r\n        require(DST_DOLA.Swapout(profit, GOV));\r\n    }\r\n\r\n    event Expansion(uint amount);\r\n    event Contraction(uint amount);\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Contraction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Expansion\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DST_DOLA\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DST_MARKET\",\"outputs\":[{\"internalType\":\"contract CErc20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SRC_BRIDGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SRC_DOLA\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newChair_\",\"type\":\"address\"}],\"name\":\"changeChair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dstBoard\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"dstContraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"dstExpansion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dstIsChairSuspended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dstLastSuspendTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dstSendProfitToGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBoard\",\"type\":\"address\"}],\"name\":\"dstSetBoard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dstSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dstSuspendChair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"dstTransferReservesToSrc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dstUnsuspendChair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"srcBurnReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"srcMintReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"srcTransferReservesToDst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"xChainFed","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://412a7795c50caf1b1195fe78c3837747106f3f7f32721466446da081ef429491"}]}