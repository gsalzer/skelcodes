{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/gas/GasCompensationVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport { EtherSend } from \\\"../libraries/EtherSend.sol\\\";\\n\\ninterface IPayableGovernance {\\n  function receiveEther() external payable returns (bool);\\n}\\n\\n/**\\n * @notice this contract should store ether for gas compensations and also retrieve the basefee\\n * */\\ncontract GasCompensationVault {\\n  using EtherSend for address;\\n\\n  address private constant GovernanceAddress = 0x5efda50f22d34F262c29268506C5Fa42cB56A1Ce;\\n\\n  modifier onlyGovernance() {\\n    require(msg.sender == GovernanceAddress, \\\"only gov\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice function to compensate gas by sending amount eth to a recipient\\n   * @param recipient address to receive amount eth\\n   * @param gasAmount the amount of gas to be compensated\\n   * */\\n  function compensateGas(address recipient, uint256 gasAmount) external onlyGovernance {\\n    uint256 vaultBalance = address(this).balance;\\n    uint256 toCompensate = gasAmount * block.basefee;\\n    if (vaultBalance == 0) return;\\n    payable(recipient).send((toCompensate > vaultBalance) ? vaultBalance : toCompensate);\\n  }\\n\\n  /**\\n   * @notice function to withdraw compensate eth back to governance\\n   * @param amount the amount of eth to withdraw back to governance\\n   * */\\n  function withdrawToGovernance(uint256 amount) external onlyGovernance {\\n    uint256 vaultBalance = address(this).balance;\\n    require(GovernanceAddress.sendEther((amount > vaultBalance) ? vaultBalance : amount), \\\"pay fail\\\");\\n  }\\n\\n  /**\\n   * @notice receive ether function, does nothing but receive ether\\n   * */\\n  receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/EtherSend.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12 || ^0.8.7;\\n\\n/// @notice very short library which implements a method to transfer ether via <address>.call\\nlibrary EtherSend {\\n  /**\\n  * @notice function to transfer ether via filling the value field of a call\\n  * @dev DICLAIMER: you must handle the possibility of reentrancy when using this function!!!\\n  * @param to address to be transferred to\\n  * @param amount amount to be transferred\\n  * @return success true if transfer successful\\n  * */\\n  function sendEther(address to, uint256 amount) internal returns (bool success) {\\n    (success, ) = payable(to).call{ value: amount }(\\\"\\\");\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasAmount\",\"type\":\"uint256\"}],\"name\":\"compensateGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GasCompensationVault","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}