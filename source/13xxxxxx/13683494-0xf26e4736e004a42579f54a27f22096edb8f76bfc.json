{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/governance/CompoundVotingMachine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nimport \\\"../DAOStackInterfaces.sol\\\";\\nimport \\\"../utils/DAOUpgradeableContract.sol\\\";\\n\\n/**\\n * based on https://github.com/compound-finance/compound-protocol/blob/b9b14038612d846b83f8a009a82c38974ff2dcfe/contracts/Governance/GovernorAlpha.sol\\n * CompoundVotingMachine based on Compound's governance with a few differences\\n * 1. no timelock. once vote has passed it stays open for 'queuePeriod' (2 days by default).\\n * if vote decision has changed, execution will be delayed so at least 24 hours are left to vote.\\n * 2. execution modified to support DAOStack Avatar/Controller\\n */\\ncontract CompoundVotingMachine is ContextUpgradeable, DAOUpgradeableContract {\\n\\t/// @notice The name of this contract\\n\\tstring public constant name = \\\"GoodDAO Voting Machine\\\";\\n\\n\\t/// @notice timestamp when foundation releases guardian veto rights\\n\\tuint64 public foundationGuardianRelease;\\n\\n\\t/// @notice the number of blocks a proposal is open for voting (before passing quorum)\\n\\tuint256 public votingPeriod;\\n\\n\\t/// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\\n\\tuint256 public quoromPercentage;\\n\\n\\tfunction quorumVotes() public view returns (uint256) {\\n\\t\\treturn (rep.totalSupply() * quoromPercentage) / 1000000;\\n\\t} //3%\\n\\n\\t/// @notice The number of votes required in order for a voter to become a proposer\\n\\tuint256 public proposalPercentage;\\n\\n\\tfunction proposalThreshold(uint256 blockNumber)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn (rep.totalSupplyAt(blockNumber) * proposalPercentage) / 1000000; //0.25%\\n\\t}\\n\\n\\t/// @notice The maximum number of actions that can be included in a proposal\\n\\tuint256 public proposalMaxOperations; //10\\n\\n\\t/// @notice The delay in blocks before voting on a proposal may take place, once proposed\\n\\tuint256 public votingDelay; //1 block\\n\\n\\t/// @notice The duration of time after proposal passed thershold before it can be executed\\n\\tuint256 public queuePeriod; // 2 days\\n\\n\\t/// @notice The duration of time after proposal passed with absolute majority before it can be executed\\n\\tuint256 public fastQueuePeriod; //1 days/8 = 3hours\\n\\n\\t/// @notice During the queue period if vote decision has changed, we extend queue period time duration so\\n\\t/// that at least gameChangerPeriod is left\\n\\tuint256 public gameChangerPeriod; //1 day\\n\\n\\t/// @notice the duration of time a succeeded proposal has to be executed on the blockchain\\n\\tuint256 public gracePeriod; // 3days\\n\\n\\t/// @notice The address of the DAO reputation token\\n\\tReputationInterface public rep;\\n\\n\\t/// @notice The address of the Governor Guardian\\n\\taddress public guardian;\\n\\n\\t/// @notice The total number of proposals\\n\\tuint256 public proposalCount;\\n\\n\\tstruct Proposal {\\n\\t\\t// Unique id for looking up a proposal\\n\\t\\tuint256 id;\\n\\t\\t// Creator of the proposal\\n\\t\\taddress proposer;\\n\\t\\t// The timestamp that the proposal will be available for execution, set once the vote succeeds\\n\\t\\tuint256 eta;\\n\\t\\t// the ordered list of target addresses for calls to be made\\n\\t\\taddress[] targets;\\n\\t\\t// The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\n\\t\\tuint256[] values;\\n\\t\\t// The ordered list of function signatures to be called\\n\\t\\tstring[] signatures;\\n\\t\\t// The ordered list of calldata to be passed to each call\\n\\t\\tbytes[] calldatas;\\n\\t\\t// The block at which voting begins: holders must delegate their votes prior to this block\\n\\t\\tuint256 startBlock;\\n\\t\\t// The block at which voting ends: votes must be cast prior to this block\\n\\t\\tuint256 endBlock;\\n\\t\\t// Current number of votes in favor of this proposal\\n\\t\\tuint256 forVotes;\\n\\t\\t// Current number of votes in opposition to this proposal\\n\\t\\tuint256 againstVotes;\\n\\t\\t// Flag marking whether the proposal has been canceled\\n\\t\\tbool canceled;\\n\\t\\t// Flag marking whether the proposal has been executed\\n\\t\\tbool executed;\\n\\t\\t// Receipts of ballots for the entire set of voters\\n\\t\\tmapping(address => Receipt) receipts;\\n\\t\\t// quorom required at time of proposing\\n\\t\\tuint256 quoromRequired;\\n\\t\\t// support proposal voting bridge\\n\\t\\tuint256 forBlockchain;\\n\\t}\\n\\n\\t/// @notice Ballot receipt record for a voter\\n\\tstruct Receipt {\\n\\t\\t//Whether or not a vote has been cast\\n\\t\\tbool hasVoted;\\n\\t\\t// Whether or not the voter supports the proposal\\n\\t\\tbool support;\\n\\t\\t// The number of votes the voter had, which were cast\\n\\t\\tuint256 votes;\\n\\t}\\n\\n\\t/// @notice Possible states that a proposal may be in\\n\\tenum ProposalState {\\n\\t\\tPending,\\n\\t\\tActive,\\n\\t\\tActiveTimelock, // passed quorom, time lock of 2 days activated, still open for voting\\n\\t\\tCanceled,\\n\\t\\tDefeated,\\n\\t\\tSucceeded,\\n\\t\\t// Queued, we dont have queued status, we use game changer period instead\\n\\t\\tExpired,\\n\\t\\tExecuted\\n\\t}\\n\\n\\t/// @notice The official record of all proposals ever proposed\\n\\tmapping(uint256 => Proposal) public proposals;\\n\\n\\t/// @notice The latest proposal for each proposer\\n\\tmapping(address => uint256) public latestProposalIds;\\n\\n\\t/// @notice The EIP-712 typehash for the contract's domain\\n\\tbytes32 public constant DOMAIN_TYPEHASH =\\n\\t\\tkeccak256(\\n\\t\\t\\t\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n\\t\\t);\\n\\n\\t/// @notice The EIP-712 typehash for the ballot struct used by the contract\\n\\tbytes32 public constant BALLOT_TYPEHASH =\\n\\t\\tkeccak256(\\\"Ballot(uint256 proposalId,bool support)\\\");\\n\\n\\t/// @notice An event emitted when a new proposal is created\\n\\tevent ProposalCreated(\\n\\t\\tuint256 id,\\n\\t\\taddress proposer,\\n\\t\\taddress[] targets,\\n\\t\\tuint256[] values,\\n\\t\\tstring[] signatures,\\n\\t\\tbytes[] calldatas,\\n\\t\\tuint256 startBlock,\\n\\t\\tuint256 endBlock,\\n\\t\\tstring description\\n\\t);\\n\\n\\t/// @notice An event emitted when using blockchain proposal bridge\\n\\tevent ProposalSucceeded(\\n\\t\\tuint256 id,\\n\\t\\taddress proposer,\\n\\t\\taddress[] targets,\\n\\t\\tuint256[] values,\\n\\t\\tstring[] signatures,\\n\\t\\tbytes[] calldatas,\\n\\t\\tuint256 startBlock,\\n\\t\\tuint256 endBlock,\\n\\t\\tuint256 forBlockchain,\\n\\t\\tuint256 eta,\\n\\t\\tuint256 forVotes,\\n\\t\\tuint256 againstVotes\\n\\t);\\n\\n\\t/// @notice event when proposal made for a different blockchain\\n\\tevent ProposalBridge(uint256 id, uint256 indexed forBlockchain);\\n\\n\\t/// @notice An event emitted when a vote has been cast on a proposal\\n\\tevent VoteCast(\\n\\t\\taddress voter,\\n\\t\\tuint256 proposalId,\\n\\t\\tbool support,\\n\\t\\tuint256 votes\\n\\t);\\n\\n\\t/// @notice An event emitted when a proposal has been canceled\\n\\tevent ProposalCanceled(uint256 id);\\n\\n\\t/// @notice An event emitted when a proposal has been queued\\n\\tevent ProposalQueued(uint256 id, uint256 eta);\\n\\n\\t/// @notice An event emitted when a proposal has been executed\\n\\tevent ProposalExecuted(uint256 id);\\n\\n\\t/// @notice An event emitted when a proposal call has been executed\\n\\tevent ProposalExecutionResult(\\n\\t\\tuint256 id,\\n\\t\\tuint256 index,\\n\\t\\tbool ok,\\n\\t\\tbytes result\\n\\t);\\n\\n\\tevent GuardianSet(address newGuardian);\\n\\n\\tevent ParametersSet(uint256[9] params);\\n\\n\\tfunction initialize(\\n\\t\\tINameService ns_, // the DAO avatar\\n\\t\\tuint256 votingPeriodBlocks_ //number of blocks a proposal is open for voting before expiring\\n\\t) public initializer {\\n\\t\\tfoundationGuardianRelease = 1672531200; //01/01/2023\\n\\t\\tsetDAO(ns_);\\n\\t\\trep = ReputationInterface(ns_.getAddress(\\\"REPUTATION\\\"));\\n\\t\\tuint256[9] memory params = [\\n\\t\\t\\tvotingPeriodBlocks_,\\n\\t\\t\\t30000, //3% quorum\\n\\t\\t\\t2500, //0.25% proposing threshold\\n\\t\\t\\t10, //max operations\\n\\t\\t\\t1, //voting delay blocks\\n\\t\\t\\t2 days, //queue period\\n\\t\\t\\t1 days / 8, //fast queue period\\n\\t\\t\\t1 days, //game change period\\n\\t\\t\\t3 days //grace period\\n\\t\\t];\\n\\t\\t_setVotingParameters(params);\\n\\t\\tguardian = _msgSender();\\n\\t}\\n\\n\\t///@notice set the different voting parameters, value of 0 is ignored\\n\\t///cell 0 - votingPeriod blocks, 1 - quoromPercentage, 2 - proposalPercentage,3 - proposalMaxOperations, 4 - voting delay blocks, 5 - queuePeriod time\\n\\t///6 - fastQueuePeriod time, 7 - gameChangerPeriod time, 8 - gracePeriod\\ttime\\n\\tfunction setVotingParameters(uint256[9] calldata _newParams) external {\\n\\t\\t_onlyAvatar();\\n\\t\\t_setVotingParameters(_newParams);\\n\\t}\\n\\n\\tfunction _setVotingParameters(uint256[9] memory _newParams) internal {\\n\\t\\trequire(\\n\\t\\t\\t(quoromPercentage == 0 || _newParams[1] <= quoromPercentage * 2) &&\\n\\t\\t\\t\\t_newParams[1] < 1000000,\\n\\t\\t\\t\\\"percentage should not double\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t(proposalPercentage == 0 || _newParams[2] <= proposalPercentage * 2) &&\\n\\t\\t\\t\\t_newParams[2] < 1000000,\\n\\t\\t\\t\\\"percentage should not double\\\"\\n\\t\\t);\\n\\t\\tvotingPeriod = _newParams[0] > 0 ? _newParams[0] : votingPeriod;\\n\\t\\tquoromPercentage = _newParams[1] > 0 ? _newParams[1] : quoromPercentage;\\n\\t\\tproposalPercentage = _newParams[2] > 0 ? _newParams[2] : proposalPercentage;\\n\\t\\tproposalMaxOperations = _newParams[3] > 0\\n\\t\\t\\t? _newParams[3]\\n\\t\\t\\t: proposalMaxOperations;\\n\\t\\tvotingDelay = _newParams[4] > 0 ? _newParams[4] : votingDelay;\\n\\t\\tqueuePeriod = _newParams[5] > 0 ? _newParams[5] : queuePeriod;\\n\\t\\tfastQueuePeriod = _newParams[6] > 0 ? _newParams[6] : fastQueuePeriod;\\n\\t\\tgameChangerPeriod = _newParams[7] > 0 ? _newParams[7] : gameChangerPeriod;\\n\\t\\tgracePeriod = _newParams[8] > 0 ? _newParams[8] : gracePeriod;\\n\\n\\t\\temit ParametersSet(_newParams);\\n\\t}\\n\\n\\t/// @notice make a proposal to be voted on\\n\\t/// @param targets list of contracts to be excuted on\\n\\t/// @param values list of eth value to be used in each contract call\\n\\t/// @param signatures the list of functions to execute\\n\\t/// @param calldatas the list of parameters to pass to each function\\n\\t/// @return uint256 proposal id\\n\\tfunction propose(\\n\\t\\taddress[] memory targets,\\n\\t\\tuint256[] memory values,\\n\\t\\tstring[] memory signatures,\\n\\t\\tbytes[] memory calldatas,\\n\\t\\tstring memory description\\n\\t) public returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\tpropose(\\n\\t\\t\\t\\ttargets,\\n\\t\\t\\t\\tvalues,\\n\\t\\t\\t\\tsignatures,\\n\\t\\t\\t\\tcalldatas,\\n\\t\\t\\t\\tdescription,\\n\\t\\t\\t\\tgetChainId()\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/// @notice make a proposal to be voted on\\n\\t/// @param targets list of contracts to be excuted on\\n\\t/// @param values list of eth value to be used in each contract call\\n\\t/// @param signatures the list of functions to execute\\n\\t/// @param calldatas the list of parameters to pass to each function\\n\\t/// @return uint256 proposal id\\n\\tfunction propose(\\n\\t\\taddress[] memory targets,\\n\\t\\tuint256[] memory values,\\n\\t\\tstring[] memory signatures,\\n\\t\\tbytes[] memory calldatas,\\n\\t\\tstring memory description,\\n\\t\\tuint256 forBlockchain\\n\\t) public returns (uint256) {\\n\\t\\trequire(\\n\\t\\t\\trep.getVotesAt(_msgSender(), true, block.number - 1) >\\n\\t\\t\\t\\tproposalThreshold(block.number - 1),\\n\\t\\t\\t\\\"CompoundVotingMachine::propose: proposer votes below proposal threshold\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttargets.length == values.length &&\\n\\t\\t\\t\\ttargets.length == signatures.length &&\\n\\t\\t\\t\\ttargets.length == calldatas.length,\\n\\t\\t\\t\\\"CompoundVotingMachine::propose: proposal function information arity mismatch\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttargets.length != 0,\\n\\t\\t\\t\\\"CompoundVotingMachine::propose: must provide actions\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttargets.length <= proposalMaxOperations,\\n\\t\\t\\t\\\"CompoundVotingMachine::propose: too many actions\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 latestProposalId = latestProposalIds[_msgSender()];\\n\\n\\t\\tif (latestProposalId != 0) {\\n\\t\\t\\tProposalState proposersLatestProposalState = state(latestProposalId);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tproposersLatestProposalState != ProposalState.Active &&\\n\\t\\t\\t\\t\\tproposersLatestProposalState != ProposalState.ActiveTimelock,\\n\\t\\t\\t\\t\\\"CompoundVotingMachine::propose: one live proposal per proposer, found an already active proposal\\\"\\n\\t\\t\\t);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tproposersLatestProposalState != ProposalState.Pending,\\n\\t\\t\\t\\t\\\"CompoundVotingMachine::propose: one live proposal per proposer, found an already pending proposal\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tuint256 startBlock = block.number + votingDelay;\\n\\t\\tuint256 endBlock = startBlock + votingPeriod;\\n\\n\\t\\tproposalCount++;\\n\\t\\tProposal storage newProposal = proposals[proposalCount];\\n\\t\\tnewProposal.id = proposalCount;\\n\\t\\tnewProposal.proposer = _msgSender();\\n\\t\\tnewProposal.eta = 0;\\n\\t\\tnewProposal.targets = targets;\\n\\t\\tnewProposal.values = values;\\n\\t\\tnewProposal.signatures = signatures;\\n\\t\\tnewProposal.calldatas = calldatas;\\n\\t\\tnewProposal.startBlock = startBlock;\\n\\t\\tnewProposal.endBlock = endBlock;\\n\\t\\tnewProposal.forVotes = 0;\\n\\t\\tnewProposal.againstVotes = 0;\\n\\t\\tnewProposal.canceled = false;\\n\\t\\tnewProposal.executed = false;\\n\\t\\tnewProposal.quoromRequired = quorumVotes();\\n\\t\\tnewProposal.forBlockchain = forBlockchain;\\n\\t\\tlatestProposalIds[newProposal.proposer] = newProposal.id;\\n\\n\\t\\temit ProposalCreated(\\n\\t\\t\\tnewProposal.id,\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\ttargets,\\n\\t\\t\\tvalues,\\n\\t\\t\\tsignatures,\\n\\t\\t\\tcalldatas,\\n\\t\\t\\tstartBlock,\\n\\t\\t\\tendBlock,\\n\\t\\t\\tdescription\\n\\t\\t);\\n\\n\\t\\tif (getChainId() != forBlockchain) {\\n\\t\\t\\temit ProposalBridge(proposalCount, forBlockchain);\\n\\t\\t}\\n\\n\\t\\treturn newProposal.id;\\n\\t}\\n\\n\\t/// @notice helper to set the effective time of a proposal that passed quorom\\n\\t/// @dev also extends the ETA in case of a game changer in vote decision\\n\\t/// @param proposal the proposal to set the eta\\n\\t/// @param hasVoteChanged did the current vote changed the decision\\n\\tfunction _updateETA(Proposal storage proposal, bool hasVoteChanged) internal {\\n\\t\\t//if absolute majority allow to execute quickly\\n\\t\\tif (proposal.forVotes > rep.totalSupplyAt(proposal.startBlock) / 2) {\\n\\t\\t\\tproposal.eta = block.timestamp + fastQueuePeriod;\\n\\t\\t}\\n\\t\\t//first time we have a quorom we ask for a no change in decision period\\n\\t\\telse if (proposal.eta == 0) {\\n\\t\\t\\tproposal.eta = block.timestamp + queuePeriod;\\n\\t\\t}\\n\\t\\t//if we have a gamechanger then we extend current eta to have at least gameChangerPeriod left\\n\\t\\telse if (hasVoteChanged) {\\n\\t\\t\\tuint256 timeLeft = proposal.eta - block.timestamp;\\n\\t\\t\\tproposal.eta += timeLeft > gameChangerPeriod\\n\\t\\t\\t\\t? 0\\n\\t\\t\\t\\t: gameChangerPeriod - timeLeft;\\n\\t\\t} else {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\temit ProposalQueued(proposal.id, proposal.eta);\\n\\t}\\n\\n\\t/// @notice execute the proposal list of transactions\\n\\t/// @dev anyone can call this once its ETA has arrived\\n\\tfunction execute(uint256 proposalId) public payable {\\n\\t\\trequire(\\n\\t\\t\\tstate(proposalId) == ProposalState.Succeeded,\\n\\t\\t\\t\\\"CompoundVotingMachine::execute: proposal can only be executed if it is succeeded\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tproposals[proposalId].forBlockchain == getChainId(),\\n\\t\\t\\t\\\"CompoundVotingMachine::execute: proposal for wrong blockchain\\\"\\n\\t\\t);\\n\\n\\t\\tproposals[proposalId].executed = true;\\n\\t\\taddress[] memory _targets = proposals[proposalId].targets;\\n\\t\\tuint256[] memory _values = proposals[proposalId].values;\\n\\t\\tstring[] memory _signatures = proposals[proposalId].signatures;\\n\\t\\tbytes[] memory _calldatas = proposals[proposalId].calldatas;\\n\\n\\t\\tfor (uint256 i = 0; i < _targets.length; i++) {\\n\\t\\t\\t(bool ok, bytes memory result) = _executeTransaction(\\n\\t\\t\\t\\t_targets[i],\\n\\t\\t\\t\\t_values[i],\\n\\t\\t\\t\\t_signatures[i],\\n\\t\\t\\t\\t_calldatas[i]\\n\\t\\t\\t);\\n\\t\\t\\temit ProposalExecutionResult(proposalId, i, ok, result);\\n\\t\\t}\\n\\t\\temit ProposalExecuted(proposalId);\\n\\t}\\n\\n\\t/// @notice internal helper to execute a single transaction of a proposal\\n\\t/// @dev special execution is done if target is a method in the DAO controller\\n\\tfunction _executeTransaction(\\n\\t\\taddress target,\\n\\t\\tuint256 value,\\n\\t\\tstring memory signature,\\n\\t\\tbytes memory data\\n\\t) internal returns (bool, bytes memory) {\\n\\t\\tbytes memory callData;\\n\\n\\t\\tif (bytes(signature).length == 0) {\\n\\t\\t\\tcallData = data;\\n\\t\\t} else {\\n\\t\\t\\tcallData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\\n\\t\\t}\\n\\n\\t\\tbool ok;\\n\\t\\tbytes memory result;\\n\\n\\t\\tif (target == address(dao)) {\\n\\t\\t\\t(ok, result) = target.call{ value: value }(callData);\\n\\t\\t} else {\\n\\t\\t\\tif (value > 0) payable(address(avatar)).transfer(value); //make sure avatar have the funds to pay\\n\\t\\t\\t(ok, result) = dao.genericCall(target, callData, address(avatar), value);\\n\\t\\t}\\n\\t\\trequire(\\n\\t\\t\\tok,\\n\\t\\t\\t\\\"CompoundVotingMachine::executeTransaction: Transaction execution reverted.\\\"\\n\\t\\t);\\n\\n\\t\\treturn (ok, result);\\n\\t}\\n\\n\\t/// @notice cancel a proposal in case proposer no longer holds the votes that were required to propose\\n\\t/// @dev could be cheating trying to bypass the single proposal per address by delegating to another address\\n\\t/// or when delegators do not concur with the proposal done in their name, they can withdraw\\n\\tfunction cancel(uint256 proposalId) public {\\n\\t\\tProposalState pState = state(proposalId);\\n\\t\\trequire(\\n\\t\\t\\tpState != ProposalState.Executed,\\n\\t\\t\\t\\\"CompoundVotingMachine::cancel: cannot cancel executed proposal\\\"\\n\\t\\t);\\n\\n\\t\\tProposal storage proposal = proposals[proposalId];\\n\\t\\trequire(\\n\\t\\t\\t_msgSender() == guardian ||\\n\\t\\t\\t\\trep.getVotesAt(proposal.proposer, true, block.number - 1) <\\n\\t\\t\\t\\tproposalThreshold(proposal.startBlock),\\n\\t\\t\\t\\\"CompoundVotingMachine::cancel: proposer above threshold\\\"\\n\\t\\t);\\n\\n\\t\\tproposal.canceled = true;\\n\\n\\t\\temit ProposalCanceled(proposalId);\\n\\t}\\n\\n\\t/// @notice get the actions to be done in a proposal\\n\\tfunction getActions(uint256 proposalId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress[] memory targets,\\n\\t\\t\\tuint256[] memory values,\\n\\t\\t\\tstring[] memory signatures,\\n\\t\\t\\tbytes[] memory calldatas\\n\\t\\t)\\n\\t{\\n\\t\\tProposal storage p = proposals[proposalId];\\n\\t\\treturn (p.targets, p.values, p.signatures, p.calldatas);\\n\\t}\\n\\n\\t/// @notice get the receipt of a single voter in a proposal\\n\\tfunction getReceipt(uint256 proposalId, address voter)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (Receipt memory)\\n\\t{\\n\\t\\treturn proposals[proposalId].receipts[voter];\\n\\t}\\n\\n\\t/// @notice get the current status of a proposal\\n\\tfunction state(uint256 proposalId) public view returns (ProposalState) {\\n\\t\\trequire(\\n\\t\\t\\tproposalCount >= proposalId && proposalId > 0,\\n\\t\\t\\t\\\"CompoundVotingMachine::state: invalid proposal id\\\"\\n\\t\\t);\\n\\n\\t\\tProposal storage proposal = proposals[proposalId];\\n\\n\\t\\tif (proposal.canceled) {\\n\\t\\t\\treturn ProposalState.Canceled;\\n\\t\\t} else if (block.number <= proposal.startBlock) {\\n\\t\\t\\treturn ProposalState.Pending;\\n\\t\\t} else if (proposal.executed) {\\n\\t\\t\\treturn ProposalState.Executed;\\n\\t\\t} else if (\\n\\t\\t\\tproposal.eta > 0 && block.timestamp < proposal.eta //passed quorum but not executed yet, in time lock\\n\\t\\t) {\\n\\t\\t\\treturn ProposalState.ActiveTimelock;\\n\\t\\t} else if (\\n\\t\\t\\t//regular voting period\\n\\t\\t\\tproposal.eta == 0 && block.number <= proposal.endBlock\\n\\t\\t) {\\n\\t\\t\\t//proposal is active if we are in the gameChanger period (eta) or no decision yet and in voting period\\n\\t\\t\\treturn ProposalState.Active;\\n\\t\\t} else if (\\n\\t\\t\\tproposal.forVotes <= proposal.againstVotes ||\\n\\t\\t\\tproposal.forVotes < proposal.quoromRequired\\n\\t\\t) {\\n\\t\\t\\treturn ProposalState.Defeated;\\n\\t\\t} else if (\\n\\t\\t\\tproposal.eta > 0 && block.timestamp >= proposal.eta + gracePeriod\\n\\t\\t) {\\n\\t\\t\\t//expired if not executed gracePeriod after eta\\n\\t\\t\\treturn ProposalState.Expired;\\n\\t\\t} else {\\n\\t\\t\\treturn ProposalState.Succeeded;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice cast your vote on a proposal\\n\\t/// @param proposalId the proposal to vote on\\n\\t/// @param support for or against\\n\\tfunction castVote(uint256 proposalId, bool support) public {\\n\\t\\t//get all votes in all blockchains including delegated\\n\\t\\tProposal storage proposal = proposals[proposalId];\\n\\t\\tuint256 votes = rep.getVotesAt(_msgSender(), true, proposal.startBlock);\\n\\t\\treturn _castVote(_msgSender(), proposal, support, votes);\\n\\t}\\n\\n\\tstruct VoteSig {\\n\\t\\tbool support;\\n\\t\\tuint8 v;\\n\\t\\tbytes32 r;\\n\\t\\tbytes32 s;\\n\\t}\\n\\n\\t// function ecRecoverTest(\\n\\t// \\tuint256 proposalId,\\n\\t// \\tVoteSig[] memory votesFor,\\n\\t// \\tVoteSig[] memory votesAgainst\\n\\t// ) public {\\n\\t// \\tbytes32 domainSeparator =\\n\\t// \\t\\tkeccak256(\\n\\t// \\t\\t\\tabi.encode(\\n\\t// \\t\\t\\t\\tDOMAIN_TYPEHASH,\\n\\t// \\t\\t\\t\\tkeccak256(bytes(name)),\\n\\t// \\t\\t\\t\\tgetChainId(),\\n\\t// \\t\\t\\t\\taddress(this)\\n\\t// \\t\\t\\t)\\n\\t// \\t\\t);\\n\\t// \\tbytes32 structHashFor =\\n\\t// \\t\\tkeccak256(abi.encode(BALLOT_TYPEHASH, proposalId, true));\\n\\t// \\tbytes32 structHashAgainst =\\n\\t// \\t\\tkeccak256(abi.encode(BALLOT_TYPEHASH, proposalId, false));\\n\\t// \\tbytes32 digestFor =\\n\\t// \\t\\tkeccak256(\\n\\t// \\t\\t\\tabi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHashFor)\\n\\t// \\t\\t);\\n\\t// \\tbytes32 digestAgainst =\\n\\t// \\t\\tkeccak256(\\n\\t// \\t\\t\\tabi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHashAgainst)\\n\\t// \\t\\t);\\n\\n\\t// \\tProposal storage proposal = proposals[proposalId];\\n\\n\\t// \\tuint256 total;\\n\\t// \\tfor (uint32 i = 0; i < votesFor.length; i++) {\\n\\t// \\t\\tbytes32 digest = digestFor;\\n\\n\\t// \\t\\taddress signatory =\\n\\t// \\t\\t\\tecrecover(digest, votesFor[i].v, votesFor[i].r, votesFor[i].s);\\n\\t// \\t\\trequire(\\n\\t// \\t\\t\\tsignatory != address(0),\\n\\t// \\t\\t\\t\\\"CompoundVotingMachine::castVoteBySig: invalid signature\\\"\\n\\t// \\t\\t);\\n\\t// \\t\\trequire(\\n\\t// \\t\\t\\tvotesFor[i].support == true,\\n\\t// \\t\\t\\t\\\"CompoundVotingMachine::castVoteBySig: invalid support value in for batch\\\"\\n\\t// \\t\\t);\\n\\t// \\t\\ttotal += rep.getVotesAt(signatory, true, proposal.startBlock);\\n\\t// \\t\\tReceipt storage receipt = proposal.receipts[signatory];\\n\\t// \\t\\treceipt.hasVoted = true;\\n\\t// \\t\\treceipt.support = true;\\n\\t// \\t}\\n\\t// \\tif (votesFor.length > 0) {\\n\\t// \\t\\taddress voteAddressHash =\\n\\t// \\t\\t\\taddress(uint160(uint256(keccak256(abi.encode(votesFor)))));\\n\\t// \\t\\t_castVote(voteAddressHash, proposalId, true, total);\\n\\t// \\t}\\n\\n\\t// \\ttotal = 0;\\n\\t// \\tfor (uint32 i = 0; i < votesAgainst.length; i++) {\\n\\t// \\t\\tbytes32 digest = digestAgainst;\\n\\n\\t// \\t\\taddress signatory =\\n\\t// \\t\\t\\tecrecover(\\n\\t// \\t\\t\\t\\tdigest,\\n\\t// \\t\\t\\t\\tvotesAgainst[i].v,\\n\\t// \\t\\t\\t\\tvotesAgainst[i].r,\\n\\t// \\t\\t\\t\\tvotesAgainst[i].s\\n\\t// \\t\\t\\t);\\n\\t// \\t\\trequire(\\n\\t// \\t\\t\\tsignatory != address(0),\\n\\t// \\t\\t\\t\\\"CompoundVotingMachine::castVoteBySig: invalid signature\\\"\\n\\t// \\t\\t);\\n\\t// \\t\\trequire(\\n\\t// \\t\\t\\tvotesAgainst[i].support == false,\\n\\t// \\t\\t\\t\\\"CompoundVotingMachine::castVoteBySig: invalid support value in against batch\\\"\\n\\t// \\t\\t);\\n\\t// \\t\\ttotal += rep.getVotesAt(signatory, true, proposal.startBlock);\\n\\t// \\t\\tReceipt storage receipt = proposal.receipts[signatory];\\n\\t// \\t\\treceipt.hasVoted = true;\\n\\t// \\t\\treceipt.support = true;\\n\\t// \\t}\\n\\t// \\tif (votesAgainst.length > 0) {\\n\\t// \\t\\taddress voteAddressHash =\\n\\t// \\t\\t\\taddress(uint160(uint256(keccak256(abi.encode(votesAgainst)))));\\n\\t// \\t\\t_castVote(voteAddressHash, proposalId, false, total);\\n\\t// \\t}\\n\\t// }\\n\\n\\t/// @notice helper to cast a vote for someone else by using eip712 signatures\\n\\tfunction castVoteBySig(\\n\\t\\tuint256 proposalId,\\n\\t\\tbool support,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) public {\\n\\t\\tbytes32 domainSeparator = keccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\tDOMAIN_TYPEHASH,\\n\\t\\t\\t\\tkeccak256(bytes(name)),\\n\\t\\t\\t\\tgetChainId(),\\n\\t\\t\\t\\taddress(this)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tbytes32 structHash = keccak256(\\n\\t\\t\\tabi.encode(BALLOT_TYPEHASH, proposalId, support)\\n\\t\\t);\\n\\t\\tbytes32 digest = keccak256(\\n\\t\\t\\tabi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n\\t\\t);\\n\\t\\taddress signatory = ecrecover(digest, v, r, s);\\n\\t\\trequire(\\n\\t\\t\\tsignatory != address(0),\\n\\t\\t\\t\\\"CompoundVotingMachine::castVoteBySig: invalid signature\\\"\\n\\t\\t);\\n\\n\\t\\t//get all votes in all blockchains including delegated\\n\\t\\tProposal storage proposal = proposals[proposalId];\\n\\t\\tuint256 votes = rep.getVotesAt(signatory, true, proposal.startBlock);\\n\\t\\treturn _castVote(signatory, proposal, support, votes);\\n\\t}\\n\\n\\t/// @notice internal helper to cast a vote\\n\\tfunction _castVote(\\n\\t\\taddress voter,\\n\\t\\tProposal storage proposal,\\n\\t\\tbool support,\\n\\t\\tuint256 votes\\n\\t) internal {\\n\\t\\tuint256 proposalId = proposal.id;\\n\\t\\trequire(\\n\\t\\t\\tstate(proposalId) == ProposalState.Active ||\\n\\t\\t\\t\\tstate(proposalId) == ProposalState.ActiveTimelock,\\n\\t\\t\\t\\\"CompoundVotingMachine::_castVote: voting is closed\\\"\\n\\t\\t);\\n\\n\\t\\tReceipt storage receipt = proposal.receipts[voter];\\n\\t\\trequire(\\n\\t\\t\\treceipt.hasVoted == false,\\n\\t\\t\\t\\\"CompoundVotingMachine::_castVote: voter already voted\\\"\\n\\t\\t);\\n\\n\\t\\tbool hasChanged = proposal.forVotes > proposal.againstVotes;\\n\\t\\tif (support) {\\n\\t\\t\\tproposal.forVotes += votes;\\n\\t\\t} else {\\n\\t\\t\\tproposal.againstVotes += votes;\\n\\t\\t}\\n\\n\\t\\thasChanged = hasChanged != (proposal.forVotes > proposal.againstVotes);\\n\\t\\treceipt.hasVoted = true;\\n\\t\\treceipt.support = support;\\n\\t\\treceipt.votes = votes;\\n\\n\\t\\t// if quorom passed then start the queue period\\n\\t\\tif (\\n\\t\\t\\tproposal.forVotes >= proposal.quoromRequired ||\\n\\t\\t\\tproposal.againstVotes >= proposal.quoromRequired\\n\\t\\t) _updateETA(proposal, hasChanged);\\n\\t\\temit VoteCast(voter, proposalId, support, votes);\\n\\t}\\n\\n\\tfunction getChainId() public view returns (uint256) {\\n\\t\\tuint256 chainId;\\n\\t\\tassembly {\\n\\t\\t\\tchainId := chainid()\\n\\t\\t}\\n\\t\\treturn chainId;\\n\\t}\\n\\n\\tfunction renounceGuardian() public {\\n\\t\\trequire(_msgSender() == guardian, \\\"CompoundVotingMachine: not guardian\\\");\\n\\t\\tguardian = address(0);\\n\\t\\tfoundationGuardianRelease = 0;\\n\\t\\temit GuardianSet(guardian);\\n\\t}\\n\\n\\tfunction setGuardian(address _guardian) public {\\n\\t\\trequire(\\n\\t\\t\\t_msgSender() == address(avatar) || _msgSender() == guardian,\\n\\t\\t\\t\\\"CompoundVotingMachine: not avatar or guardian\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\t_msgSender() == guardian || block.timestamp > foundationGuardianRelease,\\n\\t\\t\\t\\\"CompoundVotingMachine: foundation expiration not reached\\\"\\n\\t\\t);\\n\\n\\t\\tguardian = _guardian;\\n\\t\\temit GuardianSet(guardian);\\n\\t}\\n\\n\\t/// @notice allow anyone to emit details about proposal that passed. can be used for cross-chain proposals using blockheader proofs\\n\\tfunction emitSucceeded(uint256 _proposalId) public {\\n\\t\\trequire(\\n\\t\\t\\tstate(_proposalId) == ProposalState.Succeeded,\\n\\t\\t\\t\\\"CompoundVotingMachine: not Succeeded\\\"\\n\\t\\t);\\n\\t\\tProposal storage proposal = proposals[_proposalId];\\n\\t\\t//also mark in storage as executed for cross chain voting. can be used by storage proofs, to verify proposal passed\\n\\t\\tif (proposal.forBlockchain != getChainId()) {\\n\\t\\t\\tproposal.executed = true;\\n\\t\\t}\\n\\n\\t\\temit ProposalSucceeded(\\n\\t\\t\\t_proposalId,\\n\\t\\t\\tproposal.proposer,\\n\\t\\t\\tproposal.targets,\\n\\t\\t\\tproposal.values,\\n\\t\\t\\tproposal.signatures,\\n\\t\\t\\tproposal.calldatas,\\n\\t\\t\\tproposal.startBlock,\\n\\t\\t\\tproposal.endBlock,\\n\\t\\t\\tproposal.forBlockchain,\\n\\t\\t\\tproposal.eta,\\n\\t\\t\\tproposal.forVotes,\\n\\t\\t\\tproposal.againstVotes\\n\\t\\t);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/DAOStackInterfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface Avatar {\\n\\tfunction nativeToken() external view returns (address);\\n\\n\\tfunction nativeReputation() external view returns (address);\\n\\n\\tfunction owner() external view returns (address);\\n}\\n\\ninterface Controller {\\n\\tevent RegisterScheme(address indexed _sender, address indexed _scheme);\\n\\tevent UnregisterScheme(address indexed _sender, address indexed _scheme);\\n\\n\\tfunction genericCall(\\n\\t\\taddress _contract,\\n\\t\\tbytes calldata _data,\\n\\t\\taddress _avatar,\\n\\t\\tuint256 _value\\n\\t) external returns (bool, bytes memory);\\n\\n\\tfunction avatar() external view returns (address);\\n\\n\\tfunction unregisterScheme(address _scheme, address _avatar)\\n\\t\\texternal\\n\\t\\treturns (bool);\\n\\n\\tfunction unregisterSelf(address _avatar) external returns (bool);\\n\\n\\tfunction registerScheme(\\n\\t\\taddress _scheme,\\n\\t\\tbytes32 _paramsHash,\\n\\t\\tbytes4 _permissions,\\n\\t\\taddress _avatar\\n\\t) external returns (bool);\\n\\n\\tfunction isSchemeRegistered(address _scheme, address _avatar)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (bool);\\n\\n\\tfunction getSchemePermissions(address _scheme, address _avatar)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (bytes4);\\n\\n\\tfunction addGlobalConstraint(\\n\\t\\taddress _constraint,\\n\\t\\tbytes32 _paramHash,\\n\\t\\taddress _avatar\\n\\t) external returns (bool);\\n\\n\\tfunction mintTokens(\\n\\t\\tuint256 _amount,\\n\\t\\taddress _beneficiary,\\n\\t\\taddress _avatar\\n\\t) external returns (bool);\\n\\n\\tfunction externalTokenTransfer(\\n\\t\\taddress _token,\\n\\t\\taddress _recipient,\\n\\t\\tuint256 _amount,\\n\\t\\taddress _avatar\\n\\t) external returns (bool);\\n\\n\\tfunction sendEther(\\n\\t\\tuint256 _amountInWei,\\n\\t\\taddress payable _to,\\n\\t\\taddress _avatar\\n\\t) external returns (bool);\\n}\\n\\ninterface GlobalConstraintInterface {\\n\\tenum CallPhase {\\n\\t\\tPre,\\n\\t\\tPost,\\n\\t\\tPreAndPost\\n\\t}\\n\\n\\tfunction pre(\\n\\t\\taddress _scheme,\\n\\t\\tbytes32 _params,\\n\\t\\tbytes32 _method\\n\\t) external returns (bool);\\n\\n\\t/**\\n\\t * @dev when return if this globalConstraints is pre, post or both.\\n\\t * @return CallPhase enum indication  Pre, Post or PreAndPost.\\n\\t */\\n\\tfunction when() external returns (CallPhase);\\n}\\n\\ninterface ReputationInterface {\\n\\tfunction balanceOf(address _user) external view returns (uint256);\\n\\n\\tfunction balanceOfAt(address _user, uint256 _blockNumber)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction getVotes(address _user) external view returns (uint256);\\n\\n\\tfunction getVotesAt(\\n\\t\\taddress _user,\\n\\t\\tbool _global,\\n\\t\\tuint256 _blockNumber\\n\\t) external view returns (uint256);\\n\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\tfunction totalSupplyAt(uint256 _blockNumber)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction delegateOf(address _user) external returns (address);\\n}\\n\\ninterface SchemeRegistrar {\\n\\tfunction proposeScheme(\\n\\t\\tAvatar _avatar,\\n\\t\\taddress _scheme,\\n\\t\\tbytes32 _parametersHash,\\n\\t\\tbytes4 _permissions,\\n\\t\\tstring memory _descriptionHash\\n\\t) external returns (bytes32);\\n\\n\\tevent NewSchemeProposal(\\n\\t\\taddress indexed _avatar,\\n\\t\\tbytes32 indexed _proposalId,\\n\\t\\taddress indexed _intVoteInterface,\\n\\t\\taddress _scheme,\\n\\t\\tbytes32 _parametersHash,\\n\\t\\tbytes4 _permissions,\\n\\t\\tstring _descriptionHash\\n\\t);\\n}\\n\\ninterface IntVoteInterface {\\n\\tevent NewProposal(\\n\\t\\tbytes32 indexed _proposalId,\\n\\t\\taddress indexed _organization,\\n\\t\\tuint256 _numOfChoices,\\n\\t\\taddress _proposer,\\n\\t\\tbytes32 _paramsHash\\n\\t);\\n\\n\\tevent ExecuteProposal(\\n\\t\\tbytes32 indexed _proposalId,\\n\\t\\taddress indexed _organization,\\n\\t\\tuint256 _decision,\\n\\t\\tuint256 _totalReputation\\n\\t);\\n\\n\\tevent VoteProposal(\\n\\t\\tbytes32 indexed _proposalId,\\n\\t\\taddress indexed _organization,\\n\\t\\taddress indexed _voter,\\n\\t\\tuint256 _vote,\\n\\t\\tuint256 _reputation\\n\\t);\\n\\n\\tevent CancelProposal(\\n\\t\\tbytes32 indexed _proposalId,\\n\\t\\taddress indexed _organization\\n\\t);\\n\\tevent CancelVoting(\\n\\t\\tbytes32 indexed _proposalId,\\n\\t\\taddress indexed _organization,\\n\\t\\taddress indexed _voter\\n\\t);\\n\\n\\t/**\\n\\t * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\\n\\t * generated by calculating keccak256 of a incremented counter.\\n\\t * @param _numOfChoices number of voting choices\\n\\t * @param _proposalParameters defines the parameters of the voting machine used for this proposal\\n\\t * @param _proposer address\\n\\t * @param _organization address - if this address is zero the msg.sender will be used as the organization address.\\n\\t * @return proposal's id.\\n\\t */\\n\\tfunction propose(\\n\\t\\tuint256 _numOfChoices,\\n\\t\\tbytes32 _proposalParameters,\\n\\t\\taddress _proposer,\\n\\t\\taddress _organization\\n\\t) external returns (bytes32);\\n\\n\\tfunction vote(\\n\\t\\tbytes32 _proposalId,\\n\\t\\tuint256 _vote,\\n\\t\\tuint256 _rep,\\n\\t\\taddress _voter\\n\\t) external returns (bool);\\n\\n\\tfunction cancelVote(bytes32 _proposalId) external;\\n\\n\\tfunction getNumberOfChoices(bytes32 _proposalId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction isVotable(bytes32 _proposalId) external view returns (bool);\\n\\n\\t/**\\n\\t * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\\n\\t * @param _proposalId the ID of the proposal\\n\\t * @param _choice the index in the\\n\\t * @return voted reputation for the given choice\\n\\t */\\n\\tfunction voteStatus(bytes32 _proposalId, uint256 _choice)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\t/**\\n\\t * @dev isAbstainAllow returns if the voting machine allow abstain (0)\\n\\t * @return bool true or false\\n\\t */\\n\\tfunction isAbstainAllow() external pure returns (bool);\\n\\n\\t/**\\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\\n     * @return min - minimum number of choices\\n               max - maximum number of choices\\n     */\\n\\tfunction getAllowedRangeOfChoices()\\n\\t\\texternal\\n\\t\\tpure\\n\\t\\treturns (uint256 min, uint256 max);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/DAOUpgradeableContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./DAOContract.sol\\\";\\n\\n/**\\n@title Simple contract that adds upgradability to DAOContract\\n*/\\n\\ncontract DAOUpgradeableContract is Initializable, UUPSUpgradeable, DAOContract {\\n\\tfunction _authorizeUpgrade(address) internal virtual override {\\n\\t\\t_onlyAvatar();\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/DAOContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../DAOStackInterfaces.sol\\\";\\nimport \\\"../Interfaces.sol\\\";\\n\\n/**\\n@title Simple contract that keeps DAO contracts registery\\n*/\\n\\ncontract DAOContract {\\n\\tController public dao;\\n\\n\\taddress public avatar;\\n\\n\\tINameService public nameService;\\n\\n\\tfunction _onlyAvatar() internal view {\\n\\t\\trequire(\\n\\t\\t\\taddress(dao.avatar()) == msg.sender,\\n\\t\\t\\t\\\"only avatar can call this method\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction setDAO(INameService _ns) internal {\\n\\t\\tnameService = _ns;\\n\\t\\tupdateAvatar();\\n\\t}\\n\\n\\tfunction updateAvatar() public {\\n\\t\\tdao = Controller(nameService.getAddress(\\\"CONTROLLER\\\"));\\n\\t\\tavatar = dao.avatar();\\n\\t}\\n\\n\\tfunction nativeToken() public view returns (IGoodDollar) {\\n\\t\\treturn IGoodDollar(nameService.getAddress(\\\"GOODDOLLAR\\\"));\\n\\t}\\n\\n\\tuint256[50] private gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\nimport { DataTypes } from \\\"./utils/DataTypes.sol\\\";\\npragma solidity >=0.8.0;\\n\\npragma experimental ABIEncoderV2;\\n\\ninterface ERC20 {\\n\\tfunction balanceOf(address addr) external view returns (uint256);\\n\\n\\tfunction transfer(address to, uint256 amount) external returns (bool);\\n\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction mint(address to, uint256 mintAmount) external returns (uint256);\\n\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\tfunction allowance(address owner, address spender)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n\\n\\tfunction name() external view returns (string memory);\\n\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\tevent Transfer(address indexed from, address indexed to, uint256 amount);\\n\\tevent Transfer(\\n\\t\\taddress indexed from,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount,\\n\\t\\tbytes data\\n\\t);\\n}\\n\\ninterface cERC20 is ERC20 {\\n\\tfunction mint(uint256 mintAmount) external returns (uint256);\\n\\n\\tfunction redeemUnderlying(uint256 mintAmount) external returns (uint256);\\n\\n\\tfunction redeem(uint256 mintAmount) external returns (uint256);\\n\\n\\tfunction exchangeRateCurrent() external returns (uint256);\\n\\n\\tfunction exchangeRateStored() external view returns (uint256);\\n\\n\\tfunction underlying() external returns (address);\\n}\\n\\ninterface IGoodDollar is ERC20 {\\n\\tfunction getFees(uint256 value) external view returns (uint256, bool);\\n\\n\\tfunction burn(uint256 amount) external;\\n\\n\\tfunction burnFrom(address account, uint256 amount) external;\\n\\n\\tfunction renounceMinter() external;\\n\\n\\tfunction addMinter(address minter) external;\\n\\n\\tfunction isMinter(address minter) external view returns (bool);\\n\\n\\tfunction transferAndCall(\\n\\t\\taddress to,\\n\\t\\tuint256 value,\\n\\t\\tbytes calldata data\\n\\t) external returns (bool);\\n\\n\\tfunction formula() external view returns (address);\\n}\\n\\ninterface IERC2917 is ERC20 {\\n\\t/// @dev This emit when interests amount per block is changed by the owner of the contract.\\n\\t/// It emits with the old interests amount and the new interests amount.\\n\\tevent InterestRatePerBlockChanged(uint256 oldValue, uint256 newValue);\\n\\n\\t/// @dev This emit when a users' productivity has changed\\n\\t/// It emits with the user's address and the the value after the change.\\n\\tevent ProductivityIncreased(address indexed user, uint256 value);\\n\\n\\t/// @dev This emit when a users' productivity has changed\\n\\t/// It emits with the user's address and the the value after the change.\\n\\tevent ProductivityDecreased(address indexed user, uint256 value);\\n\\n\\t/// @dev Return the current contract's interests rate per block.\\n\\t/// @return The amount of interests currently producing per each block.\\n\\tfunction interestsPerBlock() external view returns (uint256);\\n\\n\\t/// @notice Change the current contract's interests rate.\\n\\t/// @dev Note the best practice will be restrict the gross product provider's contract address to call this.\\n\\t/// @return The true/fase to notice that the value has successfully changed or not, when it succeed, it will emite the InterestRatePerBlockChanged event.\\n\\tfunction changeInterestRatePerBlock(uint256 value) external returns (bool);\\n\\n\\t/// @notice It will get the productivity of given user.\\n\\t/// @dev it will return 0 if user has no productivity proved in the contract.\\n\\t/// @return user's productivity and overall productivity.\\n\\tfunction getProductivity(address user)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256, uint256);\\n\\n\\t/// @notice increase a user's productivity.\\n\\t/// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\\n\\t/// @return true to confirm that the productivity added success.\\n\\tfunction increaseProductivity(address user, uint256 value)\\n\\t\\texternal\\n\\t\\treturns (bool);\\n\\n\\t/// @notice decrease a user's productivity.\\n\\t/// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\\n\\t/// @return true to confirm that the productivity removed success.\\n\\tfunction decreaseProductivity(address user, uint256 value)\\n\\t\\texternal\\n\\t\\treturns (bool);\\n\\n\\t/// @notice take() will return the interests that callee will get at current block height.\\n\\t/// @dev it will always calculated by block.number, so it will change when block height changes.\\n\\t/// @return amount of the interests that user are able to mint() at current block height.\\n\\tfunction take() external view returns (uint256);\\n\\n\\t/// @notice similar to take(), but with the block height joined to calculate return.\\n\\t/// @dev for instance, it returns (_amount, _block), which means at block height _block, the callee has accumulated _amount of interests.\\n\\t/// @return amount of interests and the block height.\\n\\tfunction takeWithBlock() external view returns (uint256, uint256);\\n\\n\\t/// @notice mint the avaiable interests to callee.\\n\\t/// @dev once it mint, the amount of interests will transfer to callee's address.\\n\\t/// @return the amount of interests minted.\\n\\tfunction mint() external returns (uint256);\\n}\\n\\ninterface Staking {\\n\\tstruct Staker {\\n\\t\\t// The staked DAI amount\\n\\t\\tuint256 stakedDAI;\\n\\t\\t// The latest block number which the\\n\\t\\t// staker has staked tokens\\n\\t\\tuint256 lastStake;\\n\\t}\\n\\n\\tfunction stakeDAI(uint256 amount) external;\\n\\n\\tfunction withdrawStake() external;\\n\\n\\tfunction stakers(address staker) external view returns (Staker memory);\\n}\\n\\ninterface Uniswap {\\n\\tfunction swapExactETHForTokens(\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactTokensForETH(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction WETH() external pure returns (address);\\n\\n\\tfunction factory() external pure returns (address);\\n\\n\\tfunction quote(\\n\\t\\tuint256 amountA,\\n\\t\\tuint256 reserveA,\\n\\t\\tuint256 reserveB\\n\\t) external pure returns (uint256 amountB);\\n\\n\\tfunction getAmountIn(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256 amountIn);\\n\\n\\tfunction getAmountOut(\\n\\t\\tuint256 amountI,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256 amountOut);\\n\\n\\tfunction getAmountsOut(uint256 amountIn, address[] memory path)\\n\\t\\texternal\\n\\t\\tpure\\n\\t\\treturns (uint256[] memory amounts);\\n}\\n\\ninterface UniswapFactory {\\n\\tfunction getPair(address tokenA, address tokenB)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (address);\\n}\\n\\ninterface UniswapPair {\\n\\tfunction getReserves()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint112 reserve0,\\n\\t\\t\\tuint112 reserve1,\\n\\t\\t\\tuint32 blockTimestampLast\\n\\t\\t);\\n\\n\\tfunction kLast() external view returns (uint256);\\n\\n\\tfunction token0() external view returns (address);\\n\\n\\tfunction token1() external view returns (address);\\n\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\tfunction balanceOf(address owner) external view returns (uint256);\\n}\\n\\ninterface Reserve {\\n\\tfunction buy(\\n\\t\\taddress _buyWith,\\n\\t\\tuint256 _tokenAmount,\\n\\t\\tuint256 _minReturn\\n\\t) external returns (uint256);\\n}\\n\\ninterface IIdentity {\\n\\tfunction isWhitelisted(address user) external view returns (bool);\\n\\n\\tfunction addWhitelistedWithDID(address account, string memory did) external;\\n\\n\\tfunction removeWhitelisted(address account) external;\\n\\n\\tfunction addIdentityAdmin(address account) external returns (bool);\\n\\n\\tfunction setAvatar(address _avatar) external;\\n\\n\\tfunction isIdentityAdmin(address account) external view returns (bool);\\n\\n\\tfunction owner() external view returns (address);\\n\\n\\tevent WhitelistedAdded(address user);\\n}\\n\\ninterface IUBIScheme {\\n\\tfunction currentDay() external view returns (uint256);\\n\\n\\tfunction periodStart() external view returns (uint256);\\n\\n\\tfunction hasClaimed(address claimer) external view returns (bool);\\n}\\n\\ninterface IFirstClaimPool {\\n\\tfunction awardUser(address user) external returns (uint256);\\n\\n\\tfunction claimAmount() external view returns (uint256);\\n}\\n\\ninterface ProxyAdmin {\\n\\tfunction getProxyImplementation(address proxy)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (address);\\n\\n\\tfunction getProxyAdmin(address proxy) external view returns (address);\\n\\n\\tfunction upgrade(address proxy, address implementation) external;\\n\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction transferOwnership(address newOwner) external;\\n}\\n\\n/**\\n * @dev Interface for chainlink oracles to obtain price datas\\n */\\ninterface AggregatorV3Interface {\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction description() external view returns (string memory);\\n\\n\\tfunction version() external view returns (uint256);\\n\\n\\t// getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n\\t// if they do not have data to report, instead of returning unset values\\n\\t// which could be misinterpreted as actual reported values.\\n\\tfunction getRoundData(uint80 _roundId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t);\\n\\n\\tfunction latestAnswer() external view returns (int256);\\n}\\n\\n/**\\n\\t@dev interface for AAVE lending Pool\\n */\\ninterface ILendingPool {\\n\\t/**\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n\\t * @param asset The address of the underlying asset to deposit\\n\\t * @param amount The amount to be deposited\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n\\t *   is a different wallet\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction deposit(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\taddress onBehalfOf,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n\\t * @param asset The address of the underlying asset to withdraw\\n\\t * @param amount The underlying amount to be withdrawn\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n\\t *   different wallet\\n\\t * @return The final amount withdrawn\\n\\t **/\\n\\tfunction withdraw(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\taddress to\\n\\t) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the state and configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The state of the reserve\\n\\t **/\\n\\tfunction getReserveData(address asset)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (DataTypes.ReserveData memory);\\n}\\n\\ninterface IDonationStaking {\\n\\tfunction stakeDonations() external payable;\\n}\\n\\ninterface INameService {\\n\\tfunction getAddress(string memory _name) external view returns (address);\\n}\\n\\ninterface IAaveIncentivesController {\\n\\t/**\\n\\t * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewards(\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256 amount,\\n\\t\\taddress to\\n\\t) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n\\t * @param user The address of the user\\n\\t * @return The rewards\\n\\t **/\\n\\tfunction getRewardsBalance(address[] calldata assets, address user)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n}\\n\\ninterface IGoodStaking {\\n\\tfunction collectUBIInterest(address recipient)\\n\\t\\texternal\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256\\n\\t\\t);\\n\\n\\tfunction iToken() external view returns (address);\\n\\n\\tfunction currentGains(\\n\\t\\tbool _returnTokenBalanceInUSD,\\n\\t\\tbool _returnTokenGainsInUSD\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256\\n\\t\\t);\\n\\n\\tfunction getRewardEarned(address user) external view returns (uint256);\\n\\n\\tfunction getGasCostForInterestTransfer() external view returns (uint256);\\n\\n\\tfunction rewardsMinted(\\n\\t\\taddress user,\\n\\t\\tuint256 rewardsPerBlock,\\n\\t\\tuint256 blockStart,\\n\\t\\tuint256 blockEnd\\n\\t) external returns (uint256);\\n}\\n\\ninterface IHasRouter {\\n\\tfunction getRouter() external view returns (Uniswap);\\n}\\n\\ninterface IAdminWallet {\\n\\tfunction addAdmins(address payable[] memory _admins) external;\\n\\n\\tfunction removeAdmins(address[] memory _admins) external;\\n\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction transferOwnership(address _owner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nlibrary DataTypes {\\n\\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n\\tstruct ReserveData {\\n\\t\\t//stores the reserve configuration\\n\\t\\tReserveConfigurationMap configuration;\\n\\t\\t//the liquidity index. Expressed in ray\\n\\t\\tuint128 liquidityIndex;\\n\\t\\t//variable borrow index. Expressed in ray\\n\\t\\tuint128 variableBorrowIndex;\\n\\t\\t//the current supply rate. Expressed in ray\\n\\t\\tuint128 currentLiquidityRate;\\n\\t\\t//the current variable borrow rate. Expressed in ray\\n\\t\\tuint128 currentVariableBorrowRate;\\n\\t\\t//the current stable borrow rate. Expressed in ray\\n\\t\\tuint128 currentStableBorrowRate;\\n\\t\\tuint40 lastUpdateTimestamp;\\n\\t\\t//tokens addresses\\n\\t\\taddress aTokenAddress;\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\taddress variableDebtTokenAddress;\\n\\t\\t//address of the interest rate strategy\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\t//the id of the reserve. Represents the position in the list of the active reserves\\n\\t\\tuint8 id;\\n\\t}\\n\\n\\tstruct ReserveConfigurationMap {\\n\\t\\t//bit 0-15: LTV\\n\\t\\t//bit 16-31: Liq. threshold\\n\\t\\t//bit 32-47: Liq. bonus\\n\\t\\t//bit 48-55: Decimals\\n\\t\\t//bit 56: Reserve is active\\n\\t\\t//bit 57: reserve is frozen\\n\\t\\t//bit 58: borrowing is enabled\\n\\t\\t//bit 59: stable rate borrowing enabled\\n\\t\\t//bit 60-63: reserved\\n\\t\\t//bit 64-79: reserve factor\\n\\t\\tuint256 data;\\n\\t}\\n\\tenum InterestRateMode { NONE, STABLE, VARIABLE }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 0\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"GuardianSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[9]\",\"name\":\"params\",\"type\":\"uint256[9]\"}],\"name\":\"ParametersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"forBlockchain\",\"type\":\"uint256\"}],\"name\":\"ProposalBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"ProposalExecutionResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forBlockchain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"}],\"name\":\"ProposalSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avatar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"contract Controller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"emitSucceeded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fastQueuePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationGuardianRelease\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameChangerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"internalType\":\"struct CompoundVotingMachine.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gracePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INameService\",\"name\":\"ns_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPeriodBlocks_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameService\",\"outputs\":[{\"internalType\":\"contract INameService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToken\",\"outputs\":[{\"internalType\":\"contract IGoodDollar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalMaxOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"quoromRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forBlockchain\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"forBlockchain\",\"type\":\"uint256\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoromPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rep\",\"outputs\":[{\"internalType\":\"contract ReputationInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[9]\",\"name\":\"_newParams\",\"type\":\"uint256[9]\"}],\"name\":\"setVotingParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum CompoundVotingMachine.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAvatar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CompoundVotingMachine","CompilerVersion":"v0.8.8+commit.dddeac2f","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}