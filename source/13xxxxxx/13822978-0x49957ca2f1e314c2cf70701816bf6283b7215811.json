{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"details\": {\r\n        \"constantOptimizer\": true,\r\n        \"cse\": true,\r\n        \"deduplicate\": true,\r\n        \"jumpdestRemover\": true,\r\n        \"orderLiterals\": true,\r\n        \"peephole\": true,\r\n        \"yul\": false\r\n      },\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TerraformsSVG.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ToString.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @notice Interface for retrieving custom fonts\\ninterface ITerraformsCharacters {\\n    function font(uint) external view returns (string memory);\\n}\\n\\n/// @author xaltgeist\\n/// @title Creates a tokenURI string for tokens of the Terraforms contract\\ncontract TerraformsSVG is Ownable {\\n\\n    /// @notice Struct for passing token info from TerraformsData to this contract\\n    struct SVGParams {\\n        uint[32][32] heightmapIndices; // Heightmap (indices into chars array)\\n        uint level; // Level placement of token\\n        uint tile; // Tile placement of token\\n        uint resourceLvl; // Amount of resource present on token\\n        uint resourceDirection; // Direction resource is flowing\\n        uint status; // Terrain status enum, cast as an integer from 0 - 4\\n        uint font; // Font index\\n        uint fontSize; // Font size \\n        uint charsIndex; // Character set index\\n        string zoneName; // Name of token zone\\n        string[9] chars; // Token's character array\\n        string[10] zoneColors; // Token's zone colors\\n    }\\n\\n    /// @notice Struct for passing animation information to <style> generator\\n    /// @dev Times are in milliseconds\\n    struct AnimParams {\\n        Activation activation; // Animation type\\n        uint classesAnimated; // Number of levels animated\\n        uint duration; // Base animation duration for first class\\n        uint durationInc; // Duration increment for each class\\n        uint delay; // Base delay for first class\\n        uint delayInc; // Delay increment for each class\\n        uint bgDuration; // Animation duration for background\\n        uint bgDelay; // Delay for background\\n        string easing; // Animation mode, e.g. steps(), linear, ease-in-out\\n        string[2] altColors; // Alternate colors for Plague tokens\\n    }\\n\\n    /// @notice Struct for tracking state of the URI generator\\n    struct CTX {\\n        uint val; // Current character being drawn\\n        string char; // current character\\n        string class; // CSS class to apply to current character\\n        string[32] colBuf; // Buffer for compiling columns of SVG elems\\n        string[32] rowBuf; // Buffer for compiling rows of SVG elems\\n        string[3] iterBuf; // Reusable buffer for compiling in loops\\n        AnimParams a; // Animation parameters\\n    }\\n\\n    /// @notice the activation of a tile, which affects its movement speed\\n    enum Activation {Cascade, Plague}\\n\\n    // Address for storing fonts and character sets\\n    address terraformsCharactersAddress;\\n    \\n    // CSS class selectors to be used to apply styling to individual characters\\n    string[11] classes = [\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\", \\\"f\\\", \\\"g\\\", \\\"h\\\", \\\"i\\\", \\\"j\\\"];\\n    \\n    // JavaScript included in animated SVGs\\n    string jsString = unicode\\\";function map(e,t,r,i,a){return i+(a-i)*(e-t)/(r-t)}RESOURCE/=1e4;let isDaydream=1==MODE||3==MODE,isTerraformed=2==MODE||4==MODE,isOrigin=3==MODE||4==MODE,classIds=['i','h','g','f','e','d','c','b','a'],charSet=[],uni=[9600,9610,9620,3900,9812,9120,9590,143345,48,143672,143682,143692,143702,820,8210,8680,9573,142080,142085,142990,143010,143030,9580,9540,1470,143762,143790,143810];function makeSet(e){let t=[];for(let r=e;r&lt;e+10;r++)t.push(String.fromCharCode(r));return t}let newSet,originalChars=[];for(let e of classIds){let t=document.querySelector('.'+e);if(t){let e=t.textContent;originalChars.push(e)}}if(charSet.push(originalChars),isOrigin)if(SEED&gt;9e3)for(let e of uni)charSet.push(makeSet(e));else charSet.push(makeSet(uni[Math.floor(SEED)%uni.length]));else if(SEED&gt;9970)for(let e of uni)charSet.push(makeSet(e));else SEED&gt;5e3&amp;&amp;charSet.push(makeSet(uni[Math.floor(SEED)%3]));charSet=charSet.flat();let mainSet=originalChars.reverse();SEED&gt;9950&amp;&amp;(mainSet=charSet);let gridEls=document.querySelectorAll('p'),grid=[],brushSize=2,pointerDown=!1,pointerShift=0,isEraser=!1,loopLength=10,airship=0;function erase(e){e.activeClass='j',e.setAttribute('class','j'),e.h=9,e.textContent}function draw(e){let t=classIds[pointerShift%classIds.length];e.activeClass=t,e.setAttribute('class',t),e.h=pointerShift%classIds.length}for(let e=0;e&lt;32;e++){grid.push([]);for(let t=0;t&lt;32;t++){let r=gridEls[t+32*e];grid[e][t]=r,r.originalClass=r.className,r.activeClass=r.originalClass,r.h=classIds.length-classIds.indexOf(r.originalClass)-1,r.originalH=r.h,isDaydream&amp;&amp;(r.style.webkitUserSelect='none',r.style.userSelect='none'),r.onpointermove=(i=&gt;{if(pointerDown&amp;&amp;isDaydream){for(let r=-brushSize;r&lt;brushSize;r++)for(let i=-brushSize;i&lt;brushSize;i++){let a=grid[Math.min(Math.max(0,e+r),31)][Math.min(Math.max(0,t+i),31)];isEraser?erase(a):draw(a)}isEraser?erase(r):draw(r)}})}}let speedFac=SEED&gt;6500?30:1;setInterval(()=&gt;{for(let e=0;e&lt;32;e++)for(let t=0;t&lt;32;t++){let r=gridEls[t+32*e];0==MODE?r.h&gt;6-RESOURCE&amp;&amp;(r.textContent=mainSet[Math.floor(.25*airship+(r.h+.5*e+.1*DIRECTION*t))%mainSet.length]):(isDaydream||isTerraformed)&amp;&amp;(0==r.h?SEED&lt;8e3?r.textContent=mainSet[Math.floor(airship/1e3+.05*e+.005*t)%mainSet.length]:r.textContent=mainSet[Math.floor(airship/2+.05*e)%mainSet.length]:(r.textContent=charSet[Math.floor(airship/speedFac+e+r.h)%charSet.length],SEED&gt;5e3&amp;&amp;Math.random()&lt;.005&amp;&amp;(r.style.fontSize=`${3+airship%34}px`))),'j'!=r.originalClass&amp;&amp;'j'!=r.activeClass||(r.textContent=' ')}airship+=1},loopLength),document.addEventListener('keyup',e=&gt;{'e'==e.key&amp;&amp;(isEraser=!1)}),document.addEventListener('keydown',e=&gt;{'e'==e.key?isEraser=!0:'q'==e.key?brushSize=(brushSize+1)%4:'a'==e.key&amp;&amp;pointerShift++}),document.querySelector('svg').onpointerdown=(()=&gt;{pointerShift++,pointerDown=!0}),document.querySelector('svg').onpointerup=(()=&gt;{pointerDown=!1;for(let e of gridEls)e.style.animation='none',e.offsetHeight,e.style.animation=null}),document.querySelector('svg').onpointerleave=(()=&gt;{pointerDown=!1});</script>\\\";\\n    \\n    /// @notice whether new jsStrings may be uploaded by the contract owner\\n    bool public isLocked = false;\\n    \\n    constructor (address _terraformsCharactersAddress) Ownable() {\\n        terraformsCharactersAddress = _terraformsCharactersAddress;\\n    }\\n\\n    /// @notice Returns the token SVG\\n    /// @param p is a SVGParams struct passed from TerraformsData\\n    /// @param a is an AnimParams struct passed from TerraformsData\\n    /// @return svgMain opening svg tag and css declarations except keyframes\\n    /// @return animations css animations\\n    /// @return script closing svg tag and svg elements\\n    function makeSVG(\\n        SVGParams memory p, \\n        AnimParams memory a\\n    )\\n        public \\n        view \\n        returns (\\n            string memory svgMain, \\n            string memory animations,\\n            string memory script\\n        )\\n    {\\n        \\n        CTX memory ctx;\\n\\n        // Certain fonts are bold\\n        string memory boldString;\\n        if (p.charsIndex < 14 || (p.charsIndex > 33 && p.charsIndex < 37)){ \\n            boldString = 'font-weight:bold;';\\n        }\\n\\n        //Start SVG string and create style elem for inline styling\\n        string memory svgHeader = string(\\n            abi.encodePacked(\\n                \\\"<svg version='2.0' encoding='utf-8' viewBox='0 0 388 560' preserveAspectRatio='xMidYMid' xmlns:xlink='http://www.w3.org/1999/xlink' xmlns='http://www.w3.org/2000/svg'><style>@font-face {font-family:'MathcastlesRemix-Regular';font-display:block;src:url(data:application/font-woff2;charset=utf-8;base64,\\\",\\n                ITerraformsCharacters(terraformsCharactersAddress).font(p.font),\\n                \\\") format('woff');}.meta{width:388px;height:560px;}.r{box-sizing: border-box;width:388px;height:560px;padding:24px;font-size:\\\",\\n                 ToString.toString(p.fontSize),\\n                 \\\"px;\\\",\\n                 boldString,\\n                 \\\"display:grid;grid-template-columns:repeat(32, 3%);grid-template-rows: repeat(32, 16px);grid-gap: 0px;justify-content: space-between;}p{font-family:'MathcastlesRemix-Regular',monospace;margin:0;text-align: center;display:flex;justify-content:center;align-items:center;}\\\",\\n                 generateCSSColors(p.zoneColors),\\n                 \\\"</style><foreignObject x='0' y='0' width='388' height='560'><div class='meta' xmlns='http://www.w3.org/1999/xhtml'><div class='r'>\\\"\\n            )\\n        );\\n        uint col;\\n        // Assemble rows of SVG       \\n        for (uint row; row < 32; row++) {          \\n            // Step through uint[32][32] of indices into char array\\n            for (col = 0; col < 32; col++) {\\n                ctx.val = p.heightmapIndices[row][col];\\n                // Index into base char array and get associated class\\n                // If index > 8, we're at the background so use a space\\n                ctx.char = ctx.val < 9 ? p.chars[ctx.val] : \\\"&#160;\\\";\\n                ctx.class = classes[ctx.val];\\n                // Encode each char in the row in a <p> tag\\n                ctx.colBuf[col] = string(\\n                    abi.encodePacked(\\n                        \\\"<p class='\\\", \\n                        ctx.class, \\n                        \\\"'>\\\", \\n                        ctx.char,\\n                        \\\"</p>\\\"\\n                    )\\n                );\\n            }\\n\\n            // Compile the columns of this row into the row buffer\\n            for(uint i; i < 3; i++){\\n                ctx.iterBuf[i] = string(\\n                    abi.encodePacked(\\n                        ctx.colBuf[i * 10],\\n                        ctx.colBuf[i * 10 + 1],\\n                        ctx.colBuf[i * 10 + 2],\\n                        ctx.colBuf[i * 10 + 3],\\n                        ctx.colBuf[i * 10 + 4],\\n                        ctx.colBuf[i * 10 + 5],\\n                        ctx.colBuf[i * 10 + 6],\\n                        ctx.colBuf[i * 10 + 7],\\n                        ctx.colBuf[i * 10 + 8],\\n                        ctx.colBuf[i * 10 + 9]\\n                    )\\n                );\\n            }\\n    \\t    // Compile the last few columns into the row buffer\\n            ctx.rowBuf[row] = string(\\n                abi.encodePacked(\\n                    ctx.iterBuf[0],\\n                    ctx.iterBuf[1],\\n                    ctx.iterBuf[2],\\n                    ctx.colBuf[30],\\n                    ctx.colBuf[31]\\n                )\\n            );\\n        }\\n\\n        // Compile the rows into single string\\n        for(uint i; i < 3; i++){\\n            ctx.iterBuf[i] = string(\\n                abi.encodePacked(\\n                    ctx.rowBuf[i*10],\\n                    ctx.rowBuf[i*10 + 1],\\n                    ctx.rowBuf[i*10 + 2],\\n                    ctx.rowBuf[i*10 + 3],\\n                    ctx.rowBuf[i*10 + 4],\\n                    ctx.rowBuf[i*10 + 5],\\n                    ctx.rowBuf[i*10 + 6],\\n                    ctx.rowBuf[i*10 + 7],\\n                    ctx.rowBuf[i*10 + 8],\\n                    ctx.rowBuf[i*10 + 9]\\n                )\\n            );\\n        }\\n\\n        // Compile the main SVG, leaving the <style> tag open for the keyframes\\n        svgMain = string(\\n            abi.encodePacked(\\n                svgHeader,\\n                ctx.iterBuf[0],\\n                ctx.iterBuf[1],\\n                ctx.iterBuf[2], \\n                ctx.rowBuf[30], \\n                ctx.rowBuf[31],\\n                '</div></div></foreignObject><style>body, svg{overflow-x:hidden; overflow-y: hidden; margin:0; padding:0}'\\n            )\\n        );\\n        // Generate CSS animation, keyframes and JavaScript\\n        animations = generateAnimations(a, p.zoneColors);\\n        script = generateScript(p);\\n    }\\n\\n    /// @notice generates CSS for coloring characters at each height value\\n    /// @param colors the color scheme of the token's zone\\n    function generateCSSColors(string[10] memory colors) \\n        internal \\n        view \\n        returns (string memory) \\n    {\\n        string[10] memory buf;\\n        // Generate CSS style declarations and class assignments for each color\\n        for (uint i; i < 9; i ++){\\n            buf[i] = setCSSColor(classes[i], colors[i]);\\n        }\\n        // Set the background color to the last color in the array\\n        buf[9] = string(\\n                abi.encodePacked('.r{background-color:',colors[9],';}')\\n        );\\n        return string(\\n            abi.encodePacked(\\n                buf[0],\\n                buf[1],\\n                buf[2],\\n                buf[3],\\n                buf[4],\\n                buf[5],\\n                buf[6],\\n                buf[7],\\n                buf[8],\\n                buf[9]\\n            )\\n        );\\n    }\\n\\n    /// @notice Generates style definitions for all classes in SVG\\n    /// @param a the animation parameters\\n    /// @param colors the color scheme of the token's zone\\n    /// @return a string representing the SVG's style definitions\\n    function generateAnimations(AnimParams memory a, string[10] memory colors) \\n        internal \\n        view \\n        returns (string memory)\\n    {\\n        string[10] memory buf;\\n        // classesAnimated is a uint with each digit representing an index\\n        // the digits are in descending order from right to left\\n        uint animated = a.classesAnimated;\\n        // Used for varying animation delay and duration\\n        uint multiplier; \\n\\n        // Iterate through classes and check whether they're animated\\n        for (uint i; i < 9; i ++){\\n            // If the last digit == i, it is animated\\n            if (i == animated % 10) {\\n                buf[i] = setForegroundAnimation(a, i, multiplier);\\n                multiplier += 1; // Increment the multiplier\\n                animated = animated / 10; // Move to next digit\\n            }\\n        }\\n\\n        // Plague tokens have background animations\\n        if (a.activation == Activation.Plague){\\n            buf[9] = setBackgroundAnimation(a);\\n        }\\n\\n        // Generate CSS keyframes\\n        string memory keyframes = setKeyframes(\\n            a.activation, \\n            colors, \\n            a.altColors\\n        ); \\n\\n        return string(\\n            abi.encodePacked(\\n                buf[0],\\n                buf[1],\\n                buf[2],\\n                buf[3],\\n                buf[4],\\n                buf[5],\\n                buf[6],\\n                buf[7],\\n                buf[8],\\n                buf[9],\\n                keyframes\\n            )\\n        );\\n    }\\n\\n    /// @notice Styles a CSS class for a background with animation\\n    /// @param a the animation parameters\\n    /// @return a string representing a style on a class selector\\n    function setBackgroundAnimation(\\n        AnimParams memory a\\n    )\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(\\n            abi.encodePacked(\\n                '.r{animation: z ',\\n                ToString.toString(a.bgDuration),\\n                'ms ',\\n                a.easing,\\n                ToString.toString(a.bgDelay),\\n                'ms infinite;}'\\n            )\\n        );\\n    }\\n\\n    /// @notice Styles a CSS class with animation\\n    /// @param a the animation parameters\\n    /// @param class  index of the character being styled in the char/color arrs\\n    /// @param multiplier the multiplier for delay and duration increments\\n    /// @return result A string representing a style on a class selector\\n    function setForegroundAnimation(\\n        AnimParams memory a, \\n        uint class,\\n        uint multiplier\\n    ) \\n        internal \\n        view \\n        returns (string memory) \\n    {\\n        return string(\\n            abi.encodePacked(\\n                '.',\\n                classes[class],\\n                '{animation:x ',\\n                ToString.toString(a.duration + a.durationInc*multiplier),\\n                'ms ',\\n                ToString.toString(a.delay + a.delayInc*multiplier),\\n                a.easing,\\n                ' infinite;}'\\n            )\\n        );\\n    }\\n\\n    /// @notice Styles a CSS class without animation\\n    /// @param class the class selector to use\\n    /// @param color the color to use\\n    /// @return A string representing a style on a class selector\\n    function setCSSColor(string memory class, string memory color) \\n        internal \\n        pure \\n        returns (string memory) \\n    {\\n        return string(abi.encodePacked('.', class, '{color:', color,';}'));\\n    }\\n\\n    /// @notice Generates CSS animation keyframes\\n    /// @param activation the token's activation\\n    /// @param colors the color scheme of the token's zone\\n    /// @param altColors alt colors of a Plague token\\n    /// @return a string representing a style on a class selector\\n    function setKeyframes(\\n        Activation activation, \\n        string[10] memory colors, \\n        string[2] memory altColors\\n    ) \\n        internal \\n        pure \\n        returns (string memory)\\n    {\\n        // Plague tokens' backgrounds alternate between two colors\\n        if (activation == Activation.Plague) {\\n            return string(\\n                abi.encodePacked(\\n                    '@keyframes x{0%{color:',\\n                    altColors[0],\\n                    ';}50%{color:',\\n                    altColors[1],\\n                    '}}@keyframes z{0%{background-color:',\\n                    altColors[0],\\n                    ';}50%{background-color:',\\n                    altColors[1]\\n                )\\n            );\\n        } else { // Foreground animations cycle through colors\\n            string[11] memory buf;\\n            buf[0] = '@keyframes x{';\\n            for(uint i; i < 10; i++){\\n                buf[i+1] = string(\\n                    abi.encodePacked(\\n                        ToString.toString(i * 10),\\n                        '%{color:',\\n                        colors[i % 10],\\n                        ';}'\\n                    )\\n                );\\n            }\\n\\n            return string(\\n                abi.encodePacked(\\n                    buf[0],\\n                    buf[1],\\n                    buf[2],\\n                    buf[3],\\n                    buf[4],\\n                    buf[5],\\n                    buf[6],\\n                    buf[7],\\n                    buf[8],\\n                    buf[9],\\n                    buf[10],\\n                    '}'\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @notice generates Javascript for inclusion in animated tokens\\n    /// @param p is a SVGParams struct passed from TerraformsData\\n    function generateScript(SVGParams memory p) \\n        internal \\n        view \\n        returns (string memory) \\n    {\\n        return string(\\n            abi.encodePacked(\\n                \\\"<script>let MODE=\\\",\\n                ToString.toString(p.status),\\n                \\\";let RESOURCE=\\\",\\n                ToString.toString(p.resourceLvl),\\n                \\\";let DIRECTION=\\\",\\n                ToString.toString(p.resourceDirection),\\n                \\\";const SEED=\\\",\\n                ToString.toString(\\n                    uint(keccak256(abi.encodePacked(p.level, p.tile))) % 10_000\\n                ),\\n                jsString\\n            )\\n        );\\n    }\\n\\n    /// @notice permits owner to modify Javascript included in tokens\\n    /// @param js the new Javascript string\\n    function setJS(string memory js) public onlyOwner {\\n        require(!isLocked);\\n        jsString = js;\\n    }\\n\\n    /// @notice locks the contract, preventing further modifications\\n    function lock() public onlyOwner {\\n        isLocked = true;\\n    }\\n}\"\r\n    },\r\n    \"contracts/ToString.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary ToString {\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT license\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_terraformsCharactersAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[32][32]\",\"name\":\"heightmapIndices\",\"type\":\"uint256[32][32]\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tile\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceLvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceDirection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"font\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fontSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charsIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"zoneName\",\"type\":\"string\"},{\"internalType\":\"string[9]\",\"name\":\"chars\",\"type\":\"string[9]\"},{\"internalType\":\"string[10]\",\"name\":\"zoneColors\",\"type\":\"string[10]\"}],\"internalType\":\"struct TerraformsSVG.SVGParams\",\"name\":\"p\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum TerraformsSVG.Activation\",\"name\":\"activation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"classesAnimated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationInc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delayInc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bgDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bgDelay\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"easing\",\"type\":\"string\"},{\"internalType\":\"string[2]\",\"name\":\"altColors\",\"type\":\"string[2]\"}],\"internalType\":\"struct TerraformsSVG.AnimParams\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"makeSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"svgMain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animations\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"script\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"js\",\"type\":\"string\"}],\"name\":\"setJS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TerraformsSVG","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c9e417b7e67e387026161e50875d512f29630d7b","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}