{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"CryptoCards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\n\\n// Created by 256bit.io - 2021/2022\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"ERC721Enumerable.sol\\\";\\nimport \\\"OwnerOrAuthorized.sol\\\";\\nimport \\\"CryptoCardsMessages.sol\\\";\\nimport \\\"CryptoCardsStorage.sol\\\";\\nimport \\\"CryptoCardsFactory.sol\\\";\\n\\ncontract CryptoCards is ERC721Enumerable, OwnerOrAuthorized {\\n    using Strings for uint256;\\n\\n    bool public paused;\\n    CryptoCardsMessages public messages;\\n    CryptoCardsStorage public store;\\n    CryptoCardsFactory public factory;\\n\\n    event CardsMinted(address to, uint256 symbol, uint256[] ids);\\n    event DeckMinted(address to, uint256 symbol);\\n    event HandMinted(address to, uint256[5] ids, uint256 handId);\\n    event ModifiedCardMinted(address to, uint256 id);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _messages,\\n        address _storage,\\n        address _factory\\n    ) ERC721(_name, _symbol) {\\n        messages = CryptoCardsMessages(_messages);\\n        store = CryptoCardsStorage(_storage);\\n        factory = CryptoCardsFactory(_factory);\\n    }\\n\\n    // Internal\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return store.baseURI();\\n    }\\n\\n    function _mintCards(\\n        address _to,\\n        uint256 _mintAmount,\\n        uint256 _symbol,\\n        uint256 _modifierCard\\n    ) internal {\\n        uint256[] memory cardIds = factory.createCards(\\n            _mintAmount,\\n            _symbol,\\n            _modifierCard\\n        );\\n        for (uint256 i = 0; i < cardIds.length; i++) {\\n            _safeMint(_to, cardIds[i]);\\n        }\\n\\n        emit CardsMinted(_to, _symbol, cardIds);\\n    }\\n\\n    function _addCreatorRewards(\\n        uint256 _symbol,\\n        uint256 _modifierCard,\\n        uint256 _mintingCost\\n    ) internal {\\n        uint32 rewardPercentage = store.rewardPercentage();\\n        uint256 rewardAmount = (_mintingCost * rewardPercentage) / 100;\\n\\n        // If card(s) were minted using modifier card then add\\n        // reward amount to modifier card creator's balance (excluding contract owner)\\n        if (_modifierCard > 0) {\\n            address creator = store.getModifierCardCreator(_modifierCard);\\n            if (creator != address(0) && creator != owner()) {\\n                store.addCreatorRewardTransaction(\\n                    creator,\\n                    _modifierCard,\\n                    0,\\n                    rewardAmount,\\n                    0\\n                );\\n            }\\n        } else {\\n            // Otherwise add to reward amount to symbol creator's balance (excluding contract owner)\\n            address creator = store.getSymbolCreator(_symbol);\\n            if (creator != address(0) && creator != owner()) {\\n                store.addCreatorRewardTransaction(\\n                    creator,\\n                    0,\\n                    _symbol,\\n                    rewardAmount,\\n                    0\\n                );\\n            }\\n        }\\n    }\\n\\n    function _checkMintingParams(address _to, uint256 _mintCost) internal {\\n        if (msg.sender != owner()) {\\n            require(!paused, messages.notAvailable());\\n            require(msg.value >= _mintCost, messages.notEnoughFunds());\\n        }\\n        require(_to != address(0), messages.zeroAddress());\\n    }\\n\\n    // Public\\n    function burn(uint256 _tokenId) public {\\n        require(!paused, messages.notAvailable());\\n        require(ownerOf(_tokenId) == msg.sender, messages.mustBeOwner());\\n\\n        // Hand?\\n        if (store.getHandOwner(_tokenId) == msg.sender) {\\n            uint256[5] memory hand = store.getHandCards(_tokenId);\\n\\n            // Re-allocate cards back to sender\\n            for (uint256 i = 0; i < hand.length; i++) {\\n                _safeMint(msg.sender, hand[i]);\\n            }\\n\\n            store.setHandOwner(_tokenId, address(0));\\n            store.setHandCards(\\n                _tokenId,\\n                [uint256(0), uint256(0), uint256(0), uint256(0), uint256(0)]\\n            );\\n        }\\n        _burn(_tokenId);\\n    }\\n\\n    function mintCards(\\n        address _to,\\n        uint256 _mintAmount,\\n        uint256 _symbol,\\n        uint256 _modifierCard\\n    ) public payable {\\n        uint256 mintingCost = _modifierCard > 0\\n            ? (store.cardCost() * 2 * _mintAmount)\\n            : (store.cardCost() * _mintAmount);\\n        _checkMintingParams(_to, mintingCost);\\n\\n        require(store.getSymbolInUse(_symbol), messages.symbolNotFound());\\n        if (_modifierCard > 0) {\\n            require(\\n                ownerOf(_modifierCard) == msg.sender,\\n                messages.mustBeOwner()\\n            );\\n        }\\n\\n        _mintCards(_to, _mintAmount, _symbol, _modifierCard);\\n        _addCreatorRewards(_symbol, _modifierCard, mintingCost);\\n    }\\n\\n    function mintDeck(address _to, uint256 _symbol) public payable {\\n        _checkMintingParams(_to, store.deckCost());\\n\\n        if (msg.sender != owner()) {\\n            require(store.getDeckMintUnlocking() == 0, messages.notAvailable());\\n        }\\n        require(!store.getSymbolInUse(_symbol), messages.symbolInUse());\\n\\n        // Add new symbol\\n        store.addSymbol(_to, _symbol);\\n\\n        // Create initial shuffled deck\\n        factory.createDeck(_symbol);\\n\\n        // Mint cards to new deck owner\\n        _mintCards(_to, store.maxMintAmount(), _symbol, 0);\\n\\n        store.resetDeckMintUnlocking();\\n\\n        emit DeckMinted(_to, _symbol);\\n    }\\n\\n    function mintHand(address _to, uint256[5] memory _tokenIds) public payable {\\n        _checkMintingParams(_to, store.handCost());\\n\\n        uint256 supply = store.getTotalCards();\\n        require(supply + 1 <= store.maxSupply(), messages.exceedsSupply());\\n        require(_tokenIds.length == 5, messages.fiveCardsRequired());\\n\\n        // Check that the sender is the owner of all the cards\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            require(_tokenIds[i] > 0, messages.fiveCardsRequired());\\n            require(\\n                ownerOf(_tokenIds[i]) == msg.sender,\\n                messages.mustBeOwner()\\n            );\\n        }\\n\\n        // Save tokenIds of cards in the data property\\n        uint256 data = (_tokenIds[0] & 0xFFFFFF) |\\n            ((_tokenIds[1] & 0xFFFFFF) << 24) |\\n            ((_tokenIds[2] & 0xFFFFFF) << 48) |\\n            ((_tokenIds[3] & 0xFFFFFF) << 72) |\\n            ((_tokenIds[4] & 0xFFFFFF) << 96);\\n\\n        uint256 handTokenId = store.addCard(\\n            factory.createCard(DecodedCard(HAND_CARD, 0, 0, 0, 0, 0, 0), data)\\n        );\\n        _safeMint(_to, handTokenId);\\n\\n        // Burn cards so that they cannot be minted into a hand again.\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            _burn(_tokenIds[i]);\\n        }\\n\\n        store.setHandOwner(handTokenId, _to);\\n\\n        // Save the tokenIds that form the hand so they can be re-instated if the hand is ever burnt\\n        store.setHandCards(handTokenId, _tokenIds);\\n\\n        emit HandMinted(_to, _tokenIds, handTokenId);\\n    }\\n\\n    function mintModifiedCard(\\n        address _to,\\n        uint256 _originalCard,\\n        uint256 _modifierCard\\n    ) public payable {\\n        _checkMintingParams(_to, store.cardCost() * 2);\\n\\n        require(ownerOf(_originalCard) == msg.sender, messages.mustBeOwner());\\n        require(ownerOf(_modifierCard) == msg.sender, messages.mustBeOwner());\\n\\n        uint256 cardId = factory.createModifiedCard(\\n            _originalCard,\\n            _modifierCard\\n        );\\n        _safeMint(_to, cardId);\\n        _addCreatorRewards(0, _modifierCard, store.cardCost() * 2);\\n\\n        emit ModifiedCardMinted(_to, cardId);\\n    }\\n\\n    function mintModifierCard(\\n        address _to,\\n        string memory _name,\\n        uint256 _value,\\n        uint256 _background,\\n        uint256 _foreground,\\n        uint256 _color,\\n        uint256 _flags,\\n        bytes memory _data\\n    ) public payable returns (uint256) {\\n        _checkMintingParams(_to, store.modifierCost());\\n\\n        require(bytes(_name).length > 0, messages.nameRequired());\\n        require(\\n            store.getModifierCardIdByName(_name) == 0,\\n            messages.modifierNameAlreadyInUse()\\n        );\\n        require(_data.length <= 256, messages.dataLengthExceeded());\\n\\n        uint256 newCardId = factory.createModifierCard(\\n            _value,\\n            _background,\\n            _foreground,\\n            _color,\\n            _flags\\n        );\\n        _safeMint(_to, newCardId);\\n        store.addModifierCard(newCardId, _to, _name, _data);\\n        return newCardId;\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), messages.erc721InvalidTokenId());\\n\\n        bool usePermanentStorage = store.getUsePermanentStorage(tokenId);\\n        string memory currentBaseURI = usePermanentStorage\\n            ? store.permanentStorageBaseURI()\\n            : _baseURI();\\n        return\\n            bytes(currentBaseURI).length > 0\\n                ? string(\\n                    abi.encodePacked(\\n                        currentBaseURI,\\n                        tokenId.toString(),\\n                        usePermanentStorage\\n                            ? store.permanentStorageExtension()\\n                            : store.baseExtension()\\n                    )\\n                )\\n                : \\\"\\\";\\n    }\\n\\n    function walletOfOwner(address _owner)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 ownerTokenCount = balanceOf(_owner);\\n        uint256[] memory tokenIds = new uint256[](ownerTokenCount);\\n        for (uint256 i = 0; i < ownerTokenCount; i++) {\\n            tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\\n        }\\n        return tokenIds;\\n    }\\n\\n    function getCreatorRewardsBalance(address _creator)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return store.getCreatorRewardsBalance(_creator);\\n    }\\n\\n    function getCreatorRewards(address _creator)\\n        public\\n        view\\n        returns (Reward[] memory)\\n    {\\n        return store.getCreatorRewards(_creator);\\n    }\\n\\n    function withdrawRewardBalance() public payable {\\n        uint256 contractBalance = address(this).balance;\\n        uint256 callerRewards = getCreatorRewardsBalance(msg.sender);\\n        require(callerRewards < contractBalance, messages.notEnoughFunds());\\n        store.addCreatorRewardTransaction(msg.sender, 0, 0, 0, callerRewards);\\n        require(payable(msg.sender).send(callerRewards));\\n    }\\n\\n    // Only owner\\n    function setPaused(bool _value) public onlyOwner {\\n        paused = _value;\\n    }\\n\\n    function getNetBalance() public view onlyOwner returns (uint256) {\\n        uint256 contractBalance = address(this).balance;\\n        uint256 totalCreatorRewards = store.getTotalRewardsBalance();\\n        return contractBalance - totalCreatorRewards;\\n    }\\n\\n    function withdrawNetBalance() public payable onlyOwner {\\n        uint256 ownerBalance = getNetBalance();\\n        require(ownerBalance > 0, messages.notEnoughFunds());\\n        require(payable(msg.sender).send(ownerBalance));\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        require(payable(msg.sender).send(address(this).balance));\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"ERC721.sol\\\";\\nimport \\\"IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\nimport \\\"IERC721Receiver.sol\\\";\\nimport \\\"IERC721Metadata.sol\\\";\\nimport \\\"Address.sol\\\";\\nimport \\\"Context.sol\\\";\\nimport \\\"Strings.sol\\\";\\nimport \\\"ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"OwnerOrAuthorized.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\n\\n// Created by 256bit.io - 2021/2022\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Ownable.sol\\\";\\n\\ncontract OwnerOrAuthorized is Ownable {\\n    mapping(address => bool) private _authorized;\\n\\n    event AuthorizationAdded(address indexed addressAdded);\\n    event AuthorizationRemoved(address addressRemoved);\\n\\n    constructor() Ownable() {\\n        _authorized[msg.sender] = true;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than an authorized user (includes owner).\\n     */\\n    modifier onlyAuthorized() {\\n        require(\\n            checkAuthorization(_msgSender()),\\n            \\\"OwnOwnerOrAuthorized: caller is not authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    function addAuthorization(address _address) public onlyOwner {\\n        _authorized[_address] = true;\\n        emit AuthorizationAdded(_address);\\n    }\\n\\n    function removeAuthorization(address _address) public {\\n        require(\\n            owner() == _msgSender() || _authorized[_address] == true,\\n            \\\"OwnOwnerOrAuthorized: caller is not authorized\\\"\\n        );\\n        delete _authorized[_address];\\n        emit AuthorizationRemoved(_address);\\n    }\\n\\n    function checkAuthorization(address _address) public view returns (bool) {\\n        return owner() == _address || _authorized[_address] == true;\\n    }\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"CryptoCardsMessages.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\n\\n// Created by 256bit.io - 2021/2022\\n\\npragma solidity ^0.8.0;\\n\\ncontract CryptoCardsMessages {\\n    string public notAvailable = \\\"Feature not currently available\\\";\\n    string public mintAmount = \\\"Mint Amount\\\";\\n    string public exceedsSupply = \\\"Supply exceeded\\\";\\n    string public exceedsDeckSupply = \\\"Deck supply exceeded\\\";\\n    string public fiveCardsRequired = \\\"Five cards required\\\";\\n    string public zeroAddress = \\\"Zero address\\\";\\n    string public mustBeOwner = \\\"Must be owner\\\";\\n    string public notEnoughFunds = \\\"Not enough funds\\\";\\n    string public existingModifier = \\\"Modifier exists\\\";\\n    string public nameRequired = \\\"Name required\\\";\\n    string public modifierUsage = \\\"Modifier usage exceeded\\\";\\n    string public modifierNotFound = \\\"Modifier not found\\\";\\n    string public erc721InvalidTokenId = \\\"URI query for nonexistent token\\\";\\n    string public symbolInUse = \\\"Symbol already exists\\\";\\n    string public symbolNotFound = \\\"Symbol not found\\\";\\n    string public missingShuffledDeck = \\\"Missing shuffled deck for symbol\\\";\\n    string public modifierDataFull = \\\"The card cannot accept further modifiers\\\";\\n    string public modifierNameAlreadyInUse =\\n        \\\"The specified name is already in use\\\";\\n    string public dataLengthExceeded = \\\"Data length (256 bytes) exceeded\\\";\\n}\\n\"\r\n    },\r\n    \"CryptoCardsStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\n\\n// Created by 256bit.io - 2021/2022\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"OwnerOrAuthorized.sol\\\";\\n\\nuint256 constant MODIFIER_CARD = 0x40;\\nuint256 constant HAND_CARD = 0x20;\\nuint256 constant BITOFFSET_SUIT = 8;\\nuint256 constant BITOFFSET_BACKGROUND = 16;\\nuint256 constant BITOFFSET_FOREGROUND = 48;\\nuint256 constant BITOFFSET_COLOR = 80;\\nuint256 constant BITOFFSET_SYMBOL = 112;\\nuint256 constant BITOFFSET_FLAGS = 144;\\nuint256 constant DEFAULT_BACKGROUND = 0xff00a300;\\nuint256 constant DEFAULT_MODIFIER_BACKGROUND = 0xff1a1a1a;\\nuint256 constant DEFAULT_FOREGROUND = 0xff000000;\\nuint256 constant DEFAULT_COLOR = 0xffffffff;\\nuint256 constant FLAGS_SET_BACKGROUND = 1;\\nuint256 constant FLAGS_SET_FOREGROUND = 2;\\nuint256 constant FLAGS_SET_COLOR = 4;\\nuint256 constant FLAGS_DATA_APPEND = 8;\\nbytes constant PRE_SHUFFLED_DECK = hex\\\"190E0F1E2722111D02040B2E13331209150100240A180D16321B25260C312A07282C1C0820142B101A17293006052F2D23211F03\\\";\\n\\n/*  attributes = [\\n        bytes 0: value  0..0xC = Card face value | 0x40 = Modifier Card | 0x20 = Hand Card\\n        bytes 1: suit\\n        bytes 2..5: background\\n        bytes 6..9: foreground\\n        bytes 10..13: color\\n        bytes 14..17: symbol\\n        bytes 18..31: modifier flags; on a modifier card this specifies how the data will be applied:\\n            0x1 = background copied from modifier card\\n            0x2 = foreground copied from modifier card\\n            0x4 = color copied from modifier card\\n            0x8 = modifiers will be appended with modifier card id instead of overwritten\\n    ]\\n    modifiers: [32 bytes] essentially an array of modifier ids (16 bit)\\n*/\\nstruct Card {\\n    uint256 attributes;\\n    uint256 modifiers;\\n}\\n\\nstruct ModifierCard {\\n    address creator;\\n    uint256 usageCount;\\n    string name;\\n    bytes data; // Seems to be a 256 byte limit??\\n}\\n\\nstruct Reward {\\n    uint256 timestamp;\\n    uint256 modifierCardId;\\n    uint256 symbolId;\\n    int256 value;\\n}\\n\\ncontract CryptoCardsStorage is OwnerOrAuthorized {\\n    bytes private preShuffledDeck = PRE_SHUFFLED_DECK;\\n    string public baseURI;\\n    string public baseExtension;\\n    string public permanentStorageBaseURI;\\n    string public permanentStorageExtension;\\n    uint256 public cardCost = 0.1 ether;\\n    uint256 public handCost = 1 ether;\\n    uint256 public deckCost = 10 ether;\\n    uint256 public modifierCost = 2 ether;\\n    uint256 private deckMintUnlocking = 100;\\n    uint256 public defaultDeckMintUnlocking = 200;\\n    uint32 public maxCardsPerDeck = 1000;\\n    uint32 public maxModifierUsage = 100;\\n    uint32 public maxSupply = 65535; // Hard limit due to 16 bit numbers use to store modifier ids on cards\\n    uint32 public maxMintAmount = 10;\\n    uint32 public rewardPercentage = 50;\\n    Card[] public cards;\\n    uint256[] public symbols;\\n    uint256[] public modifiers;\\n    address[] public creators;\\n\\n    // Mapping hand tokenId to owner address\\n    mapping(uint256 => address) public handOwners;\\n\\n    // Mapping hand tokenId to card tokenIds used to mint hand\\n    mapping(uint256 => uint256[5]) private handCards;\\n\\n    // Mapping deck => card count\\n    mapping(uint256 => uint256) public deckCardCounts;\\n\\n    // Mapping modifier card id to data\\n    mapping(uint256 => ModifierCard) public modifierCards;\\n\\n    // Mapping modifier card name to id\\n    mapping(string => uint256) public modifierCardNames;\\n\\n    // Mapping symbol in use\\n    mapping(uint256 => bool) private symbolInUse;\\n\\n    // Mapping symbol to creator\\n    mapping(uint256 => address) private symbolCreators;\\n\\n    // Mapping creator to rewards\\n    mapping(address => Reward[]) private creatorRewards;\\n\\n    // Mapping creator to reward balance\\n    mapping(address => uint256) private creatorRewardsBalance;\\n\\n    // Mapping creator to known\\n    mapping(address => bool) private knownCreators;\\n\\n    // Mapping symbol to shuffled deck\\n    mapping(uint256 => bytes) private shuffledDecks;\\n\\n    // Mapping tokenId to TokenUri uses permanent storage\\n    mapping(uint256 => bool) public usePermanentStorage;\\n\\n    constructor(string memory _initBaseURI, string memory _initExtension)\\n        OwnerOrAuthorized()\\n    {\\n        baseURI = _initBaseURI;\\n        baseExtension = _initExtension;\\n        permanentStorageBaseURI = _initBaseURI;\\n        permanentStorageExtension = _initExtension;\\n    }\\n\\n    function addCard(Card memory _card)\\n        external\\n        onlyAuthorized\\n        returns (uint256)\\n    {\\n        cards.push(_card);\\n        uint256 symbol = (_card.attributes >> BITOFFSET_SYMBOL) & 0xFFFFFFFF;\\n        deckCardCounts[symbol]++;\\n        return cards.length - 1;\\n    }\\n\\n    function addSymbol(address _creator, uint256 _symbol)\\n        external\\n        onlyAuthorized\\n    {\\n        if (!symbolInUse[_symbol]) {\\n            symbolInUse[_symbol] = true;\\n            symbolCreators[_symbol] = _creator;\\n            symbols.push(_symbol);\\n        }\\n    }\\n\\n    function addModifierCard(\\n        uint256 _cardId,\\n        address _creator,\\n        string calldata _name,\\n        bytes calldata _data\\n    ) external onlyAuthorized {\\n        modifierCards[_cardId] = ModifierCard(_creator, 0, _name, _data);\\n        modifierCardNames[_name] = _cardId;\\n        modifiers.push(_cardId);\\n    }\\n\\n    function addCreatorRewardTransaction(\\n        address _creator,\\n        uint256 _modifierCard,\\n        uint256 _symbol,\\n        uint256 _amountIn,\\n        uint256 _amountOut\\n    ) external onlyAuthorized {\\n        Reward[] storage rewards = creatorRewards[_creator];\\n        rewards.push(\\n            Reward(\\n                block.timestamp,\\n                _modifierCard,\\n                _symbol,\\n                int256(_amountIn) - int256(_amountOut)\\n            )\\n        );\\n        creatorRewardsBalance[_creator] += _amountIn;\\n        creatorRewardsBalance[_creator] -= _amountOut;\\n        if (knownCreators[_creator] == false) {\\n            knownCreators[_creator] = true;\\n            creators.push(_creator);\\n        }\\n    }\\n\\n    function decrementDeckMintUnlocking() external onlyAuthorized {\\n        if (deckMintUnlocking > 0) {\\n            deckMintUnlocking--;\\n        }\\n    }\\n\\n    function getCard(uint256 _cardId) external view returns (Card memory) {\\n        return cards[_cardId];\\n    }\\n\\n    function getCreators() external view returns (address[] memory) {\\n        return creators;\\n    }\\n\\n    function getCreatorRewards(address _creator)\\n        external\\n        view\\n        onlyAuthorized\\n        returns (Reward[] memory)\\n    {\\n        return creatorRewards[_creator];\\n    }\\n\\n    function getCreatorRewardsBalance(address _creator)\\n        external\\n        view\\n        onlyAuthorized\\n        returns (uint256)\\n    {\\n        return creatorRewardsBalance[_creator];\\n    }\\n\\n    function getDeckCardCount(uint256 _deckId) external view returns (uint256) {\\n        return deckCardCounts[_deckId];\\n    }\\n\\n    function getDeckMintUnlocking()\\n        external\\n        view\\n        onlyAuthorized\\n        returns (uint256)\\n    {\\n        return deckMintUnlocking;\\n    }\\n\\n    function getHandOwner(uint256 _handId) external view returns (address) {\\n        return handOwners[_handId];\\n    }\\n\\n    function getHandCards(uint256 _handId)\\n        external\\n        view\\n        returns (uint256[5] memory)\\n    {\\n        return handCards[_handId];\\n    }\\n\\n    function getModifierCardCreator(uint256 _cardId)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return modifierCards[_cardId].creator;\\n    }\\n\\n    function getModifierCardData(uint256 _cardId)\\n        external\\n        view\\n        returns (bytes memory)\\n    {\\n        return modifierCards[_cardId].data;\\n    }\\n\\n    function getModifierCardIdByName(string calldata _name)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return modifierCardNames[_name];\\n    }\\n\\n    function getModifierCardInUse(uint256 _cardId)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return modifierCards[_cardId].creator != address(0);\\n    }\\n\\n    function getModifierCardName(uint256 _cardId)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        return modifierCards[_cardId].name;\\n    }\\n\\n    function getModifierCardUsageCount(uint256 _cardId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return modifierCards[_cardId].usageCount;\\n    }\\n\\n    function getModifiers() external view returns (uint256[] memory) {\\n        return modifiers;\\n    }\\n\\n    function getPreshuffledDeck()\\n        external\\n        view\\n        onlyAuthorized\\n        returns (bytes memory)\\n    {\\n        return preShuffledDeck;\\n    }\\n\\n    function getShuffledDeck(uint256 _symbol)\\n        external\\n        view\\n        onlyAuthorized\\n        returns (bytes memory)\\n    {\\n        return shuffledDecks[_symbol];\\n    }\\n\\n    function getSymbolInUse(uint256 _symbol) external view returns (bool) {\\n        return symbolInUse[_symbol];\\n    }\\n\\n    function getSymbolCreator(uint256 _symbol) external view returns (address) {\\n        return symbolCreators[_symbol];\\n    }\\n\\n    function getSymbols() external view returns (uint256[] memory) {\\n        return symbols;\\n    }\\n\\n    function getTotalActiveModifiers() external view returns (uint256) {\\n        uint256 result;\\n        for (uint256 i; i < modifiers.length; i++) {\\n            if (modifierCards[i].usageCount < maxModifierUsage) {\\n                result++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function getTotalCards() external view returns (uint256) {\\n        return cards.length;\\n    }\\n\\n    function getTotalModifiers() external view returns (uint256) {\\n        return modifiers.length;\\n    }\\n\\n    function getTotalSymbols() external view returns (uint256) {\\n        return symbols.length;\\n    }\\n\\n    function getTotalRewardsBalance() external view returns (uint256) {\\n        uint256 result;\\n        for (uint256 i; i < creators.length; i++) {\\n            if (creators[i] != address(0)) {\\n                result += creatorRewardsBalance[creators[i]];\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function getUsePermanentStorage(uint256 _tokenId)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return usePermanentStorage[_tokenId];\\n    }\\n\\n    function incrementModifierCardUsageCount(uint256 _cardId)\\n        external\\n        onlyAuthorized\\n    {\\n        modifierCards[_cardId].usageCount++;\\n    }\\n\\n    function resetDeckMintUnlocking() external onlyAuthorized {\\n        deckMintUnlocking = defaultDeckMintUnlocking;\\n    }\\n\\n    function setDeckMintUnlocking(uint256 _value) external onlyAuthorized {\\n        deckMintUnlocking = _value;\\n    }\\n\\n    function setDefaultDeckMintUnlocking(uint256 _value)\\n        external\\n        onlyAuthorized\\n    {\\n        defaultDeckMintUnlocking = _value;\\n    }\\n\\n    function setBaseURIAndExtension(\\n        string memory _newBaseURI,\\n        string memory _newBaseExtension\\n    ) external onlyAuthorized {\\n        baseURI = _newBaseURI;\\n        baseExtension = bytes(_newBaseExtension).length <= 1\\n            ? \\\"\\\"\\n            : _newBaseExtension;\\n    }\\n\\n    function setPermanentStorageBaseURIAndExtension(\\n        string memory _newBaseURI,\\n        string memory _newExtension\\n    ) external onlyAuthorized {\\n        permanentStorageBaseURI = _newBaseURI;\\n        permanentStorageExtension = bytes(_newExtension).length <= 1\\n            ? \\\"\\\"\\n            : _newExtension;\\n    }\\n\\n    function setCard(uint256 _cardId, Card calldata _value)\\n        external\\n        onlyAuthorized\\n    {\\n        cards[_cardId] = _value;\\n    }\\n\\n    function setCosts(\\n        uint256 _cardCost,\\n        uint256 _handCost,\\n        uint256 _deckCost,\\n        uint256 _modifierCost\\n    ) external onlyAuthorized {\\n        cardCost = _cardCost;\\n        handCost = _handCost;\\n        deckCost = _deckCost;\\n        modifierCost = _modifierCost;\\n    }\\n\\n    function setHandCards(uint256 _handId, uint256[5] calldata _cards)\\n        external\\n        onlyAuthorized\\n    {\\n        handCards[_handId] = _cards;\\n    }\\n\\n    function setHandOwner(uint256 _handId, address _owner)\\n        external\\n        onlyAuthorized\\n    {\\n        handOwners[_handId] = _owner;\\n    }\\n\\n    function setLimits(\\n        uint32 _maxMintAmount,\\n        uint32 _maxModifierUsage,\\n        uint32 _maxCardsPerDeck,\\n        uint32 _maxSupply\\n    ) external onlyAuthorized {\\n        if (_maxMintAmount > 0) maxMintAmount = _maxMintAmount;\\n        if (_maxModifierUsage > 0) maxModifierUsage = _maxModifierUsage;\\n        if (_maxCardsPerDeck > 0) maxCardsPerDeck = _maxCardsPerDeck;\\n        if (_maxSupply > 0) maxSupply = _maxSupply > 65535 ? 65535 : _maxSupply;\\n    }\\n\\n    function setPreshuffledDeck(bytes memory _value) external onlyAuthorized {\\n        preShuffledDeck = _value;\\n    }\\n\\n    function setRewardPercentage(uint32 _value) external onlyAuthorized {\\n        if (_value > 0 && _value <= 100) {\\n            rewardPercentage = _value;\\n        }\\n    }\\n\\n    function setShuffledDeck(uint256 _symbol, bytes memory _value)\\n        external\\n        onlyAuthorized\\n    {\\n        shuffledDecks[_symbol] = _value;\\n    }\\n\\n    function setUsePermanentStorage(uint256 _tokenId, bool _value)\\n        external\\n        onlyAuthorized\\n    {\\n        usePermanentStorage[_tokenId] = _value;\\n    }\\n}\\n\"\r\n    },\r\n    \"CryptoCardsFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\n\\n// Created by 256bit.io - 2021/2022\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"OwnerOrAuthorized.sol\\\";\\nimport \\\"CryptoCardsMessages.sol\\\";\\nimport \\\"CryptoCardsStorage.sol\\\";\\n\\nstruct DecodedCard {\\n    uint256 value;\\n    uint256 suit;\\n    uint256 background;\\n    uint256 foreground;\\n    uint256 color;\\n    uint256 symbol;\\n    uint256 modifierFlags;\\n}\\n\\ncontract CryptoCardsFactory is OwnerOrAuthorized {\\n    CryptoCardsMessages messages;\\n    CryptoCardsStorage store;\\n    uint256 private psuedoRandomSeed;\\n\\n    uint256[] private CARD_BACKGROUND_COLORS = [\\n        0xff99b433,\\n        0xff00a300,\\n        0xff1e7145,\\n        0xffff0097,\\n        0xff9f00a7,\\n        0xff7e3878,\\n        0xff603cba,\\n        0xff1d1d1d,\\n        0xff00aba9,\\n        0xff2d89ef,\\n        0xff2b5797,\\n        0xffffc40d,\\n        0xffe3a21a,\\n        0xffda532c,\\n        0xffee1111,\\n        0xffb91d47\\n    ];\\n\\n    constructor(address _messages, address _storage) OwnerOrAuthorized() {\\n        messages = CryptoCardsMessages(_messages);\\n        store = CryptoCardsStorage(_storage);\\n    }\\n\\n    // Internal\\n    function _encodeCardAttributes(\\n        uint256 _value,\\n        uint256 _suit,\\n        uint256 _background,\\n        uint256 _foreground,\\n        uint256 _color,\\n        uint256 _symbol,\\n        uint256 _modifierFlags\\n    ) internal pure returns (uint256) {\\n        return\\n            _value |\\n            (_suit << BITOFFSET_SUIT) |\\n            (_background << BITOFFSET_BACKGROUND) |\\n            (_foreground << BITOFFSET_FOREGROUND) |\\n            (_color << BITOFFSET_COLOR) |\\n            (_symbol << BITOFFSET_SYMBOL) |\\n            (_modifierFlags << BITOFFSET_FLAGS);\\n    }\\n\\n    function _createRandomCard(uint256 _symbol) internal returns (uint256) {\\n        uint256 nextCardIndex = store.getDeckCardCount(_symbol);\\n        bytes memory shuffledCards = store.getShuffledDeck(_symbol);\\n\\n        require(shuffledCards.length > 0, messages.missingShuffledDeck());\\n\\n        // Good enough psuedo-random number; only used for background\\n        unchecked {\\n            psuedoRandomSeed = psuedoRandomSeed == 0\\n                ? uint256(blockhash(block.number - 1)) + 1\\n                : psuedoRandomSeed + uint256(blockhash(block.number - 1)) + 1;\\n        }\\n        uint256 randomValue = uint256(\\n            keccak256(\\n                abi.encodePacked(block.timestamp, msg.sender, psuedoRandomSeed)\\n            )\\n        );\\n\\n        uint8 nextCard = uint8(shuffledCards[nextCardIndex % 52]);\\n        uint256 value = nextCard % 13;\\n        uint256 suit = nextCard / 13;\\n        uint256 background = CARD_BACKGROUND_COLORS[randomValue % 16];\\n\\n        return\\n            store.addCard(\\n                createCard(\\n                    DecodedCard(\\n                        value,\\n                        suit,\\n                        background,\\n                        DEFAULT_FOREGROUND,\\n                        DEFAULT_COLOR,\\n                        _symbol,\\n                        0\\n                    ),\\n                    0\\n                )\\n            );\\n    }\\n\\n    function _modifyCard(uint256 _baseCardId, uint256 _modifierCardId)\\n        internal\\n    {\\n        Card memory baseCard = store.getCard(_baseCardId);\\n        Card memory modifierCard = store.getCard(_modifierCardId);\\n\\n        uint256 value = baseCard.attributes & 0xFF;\\n        uint256 suit = (baseCard.attributes >> BITOFFSET_SUIT) & 0xFF;\\n        uint256 background = (baseCard.attributes >> BITOFFSET_BACKGROUND) &\\n            0xFFFFFFFF;\\n        uint256 foreground = (baseCard.attributes >> BITOFFSET_FOREGROUND) &\\n            0xFFFFFFFF;\\n        uint256 color = (baseCard.attributes >> BITOFFSET_COLOR) & 0xFFFFFFFF;\\n        uint256 symbol = (baseCard.attributes >> BITOFFSET_SYMBOL) & 0xFFFFFFFF;\\n        uint256 modifierFlags = modifierCard.attributes >> BITOFFSET_FLAGS;\\n\\n        // background\\n        if (modifierFlags & FLAGS_SET_BACKGROUND == FLAGS_SET_BACKGROUND) {\\n            background =\\n                (modifierCard.attributes >> BITOFFSET_BACKGROUND) &\\n                0xFFFFFFFF;\\n        }\\n\\n        // foreground\\n        if (modifierFlags & FLAGS_SET_FOREGROUND == FLAGS_SET_FOREGROUND) {\\n            foreground =\\n                (modifierCard.attributes >> BITOFFSET_FOREGROUND) &\\n                0xFFFFFFFF;\\n        }\\n\\n        // color\\n        if (modifierFlags & FLAGS_SET_COLOR == FLAGS_SET_COLOR) {\\n            color = (modifierCard.attributes >> BITOFFSET_COLOR) & 0xFFFFFFFF;\\n        }\\n\\n        // modifiers\\n        if (modifierFlags & FLAGS_DATA_APPEND == FLAGS_DATA_APPEND) {\\n            // append\\n            require(\\n                (baseCard.modifiers & (uint256(0xFFFF) << (32 * 8))) == 0,\\n                messages.modifierDataFull()\\n            );\\n            baseCard.modifiers =\\n                (baseCard.modifiers << 16) |\\n                (_modifierCardId & 0xFFFF);\\n        } else {\\n            // overwrite\\n            baseCard.modifiers = _modifierCardId;\\n        }\\n\\n        baseCard.attributes = _encodeCardAttributes(\\n            value,\\n            suit,\\n            background,\\n            foreground,\\n            color,\\n            symbol,\\n            modifierFlags\\n        );\\n        store.setCard(_baseCardId, baseCard);\\n        store.incrementModifierCardUsageCount(_modifierCardId);\\n    }\\n\\n    // Public\\n    function createCard(DecodedCard memory _cardValues, uint256 _data)\\n        public\\n        onlyAuthorized\\n        returns (Card memory)\\n    {\\n        return\\n            Card(\\n                _encodeCardAttributes(\\n                    _cardValues.value,\\n                    _cardValues.suit,\\n                    _cardValues.background,\\n                    _cardValues.foreground,\\n                    _cardValues.color,\\n                    _cardValues.symbol,\\n                    _cardValues.modifierFlags\\n                ),\\n                _data\\n            );\\n    }\\n\\n    function createCards(\\n        uint256 _count,\\n        uint256 _symbol,\\n        uint256 _modifierCardId\\n    ) external onlyAuthorized returns (uint256[] memory) {\\n        uint256 supply = store.getTotalCards();\\n        uint256 deckSupply = store.getDeckCardCount(_symbol);\\n\\n        require(_count > 0, messages.mintAmount());\\n        require(_count <= store.maxMintAmount(), messages.mintAmount());\\n        require(supply + _count <= store.maxSupply(), messages.exceedsSupply());\\n        require(\\n            deckSupply + _count <= store.maxCardsPerDeck(),\\n            messages.exceedsSupply()\\n        );\\n\\n        if (_modifierCardId > 0) {\\n            require(\\n                store.getModifierCardUsageCount(_modifierCardId) + _count <\\n                    store.maxModifierUsage(),\\n                messages.modifierUsage()\\n            );\\n            require(\\n                store.getModifierCardInUse(_modifierCardId) == true,\\n                messages.modifierNotFound()\\n            );\\n        }\\n\\n        uint256[] memory result = new uint256[](_count);\\n        for (uint256 i = 0; i < _count; i++) {\\n            result[i] = _createRandomCard(_symbol);\\n            if (_modifierCardId > 0) {\\n                _modifyCard(result[i], _modifierCardId);\\n            }\\n        }\\n        return result;\\n    }\\n\\n    // Create an array of 52 values and shuffle\\n    function createDeck(uint256 _symbol) external onlyAuthorized {\\n        bytes memory a = store.getPreshuffledDeck();\\n\\n        unchecked {\\n            psuedoRandomSeed = psuedoRandomSeed == 0\\n                ? uint256(blockhash(block.number - 1)) + 1\\n                : psuedoRandomSeed + uint256(blockhash(block.number - 1)) + 1;\\n        }\\n\\n        // Shuffle\\n        for (uint256 sourceIndex; sourceIndex < 52; sourceIndex++) {\\n            uint256 destIndex = sourceIndex +\\n                (uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            block.timestamp,\\n                            msg.sender,\\n                            psuedoRandomSeed\\n                        )\\n                    )\\n                ) % (52 - sourceIndex));\\n            bytes1 temp = a[destIndex];\\n            a[destIndex] = a[sourceIndex];\\n            a[sourceIndex] = temp;\\n        }\\n\\n        store.setShuffledDeck(_symbol, a);\\n    }\\n\\n    function createModifiedCard(\\n        uint256 _originalCardId,\\n        uint256 _modifierCardId\\n    ) external onlyAuthorized returns (uint256) {\\n        uint256 supply = store.getTotalCards();\\n        require(supply + 1 <= store.maxSupply(), messages.exceedsSupply());\\n\\n        if (_modifierCardId > 0) {\\n            require(\\n                store.getModifierCardUsageCount(_modifierCardId) <\\n                    store.maxModifierUsage(),\\n                messages.modifierUsage()\\n            );\\n            require(\\n                store.getModifierCardInUse(_modifierCardId) == true,\\n                messages.modifierNotFound()\\n            );\\n        }\\n\\n        Card memory originalCard = store.getCard(_originalCardId);\\n        uint256 clonedCardId = store.addCard(\\n            Card(originalCard.attributes, originalCard.modifiers)\\n        );\\n        _modifyCard(clonedCardId, _modifierCardId);\\n        return clonedCardId;\\n    }\\n\\n    function createModifierCard(\\n        uint256 _value,\\n        uint256 _background,\\n        uint256 _foreground,\\n        uint256 _color,\\n        uint256 _flags\\n    ) external onlyAuthorized returns (uint256) {\\n        require(\\n            store.getTotalCards() + 1 <= store.maxSupply(),\\n            messages.exceedsSupply()\\n        );\\n\\n        Card memory card = createCard(\\n            DecodedCard(\\n                _value | MODIFIER_CARD,\\n                0,\\n                (_flags & FLAGS_SET_BACKGROUND) == FLAGS_SET_BACKGROUND\\n                    ? _background\\n                    : DEFAULT_MODIFIER_BACKGROUND,\\n                (_flags & FLAGS_SET_FOREGROUND) == FLAGS_SET_FOREGROUND\\n                    ? _foreground\\n                    : DEFAULT_FOREGROUND,\\n                (_flags & FLAGS_SET_COLOR) == FLAGS_SET_COLOR\\n                    ? _color\\n                    : DEFAULT_COLOR,\\n                0,\\n                _flags\\n            ),\\n            0\\n        );\\n\\n        return store.addCard(card);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_messages\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressAdded\",\"type\":\"address\"}],\"name\":\"AuthorizationAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addressRemoved\",\"type\":\"address\"}],\"name\":\"AuthorizationRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"symbol\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"CardsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"symbol\",\"type\":\"uint256\"}],\"name\":\"DeckMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[5]\",\"name\":\"ids\",\"type\":\"uint256[5]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"handId\",\"type\":\"uint256\"}],\"name\":\"HandMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ModifiedCardMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkAuthorization\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract CryptoCardsFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getCreatorRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modifierCardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"symbolId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"internalType\":\"struct Reward[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getCreatorRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messages\",\"outputs\":[{\"internalType\":\"contract CryptoCardsMessages\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_symbol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_modifierCard\",\"type\":\"uint256\"}],\"name\":\"mintCards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_symbol\",\"type\":\"uint256\"}],\"name\":\"mintDeck\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[5]\",\"name\":\"_tokenIds\",\"type\":\"uint256[5]\"}],\"name\":\"mintHand\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_originalCard\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_modifierCard\",\"type\":\"uint256\"}],\"name\":\"mintModifiedCard\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_background\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_foreground\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_color\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_flags\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mintModifierCard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract CryptoCardsStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawNetBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewardBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"CryptoCards","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000015b9cbd70bbc764acc223871ac9c8c698cbf9c72000000000000000000000000050cc9eeb69d23c88d5e9f455e4c96a418fdce9d00000000000000000000000078e51a23a28bc45e836fa518276c39368008bba9000000000000000000000000000000000000000000000000000000000000001343727970746f2043617264732044656c7578650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034343440000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}