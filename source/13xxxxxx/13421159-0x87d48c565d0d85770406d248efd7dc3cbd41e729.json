{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IAToken.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IAToken is IERC20 {\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function UNDERLYING_ASSET_ADDRESS() external returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/IOwnable.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface IOwnable {\r\n    function owner() external view returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/ILendingPool.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface ILendingPool {\r\n    function deposit(\r\n        address asset,\r\n        uint256 amount,\r\n        address onBehalfOf,\r\n        uint16 referralCode\r\n    ) external;\r\n\r\n    function withdraw(\r\n        address asset,\r\n        uint256 amount,\r\n        address to\r\n    ) external returns (uint256);\r\n\r\n    function borrow(\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 interestRateMode,\r\n        uint16 referralCode,\r\n        address onBehalfOf\r\n    ) external returns (uint256);\r\n\r\n    function repay(\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 rateMode,\r\n        address onBehalfOf\r\n    ) external returns (uint256);\r\n\r\n    // workaround to omit usage of abicoder v2\r\n    // see real signature at https://github.com/aave/protocol-v2/blob/master/contracts/protocol/libraries/types/DataTypes.sol\r\n    function getReserveData(address asset) external returns (address[12] memory);\r\n}\r\n\r\n// File: contracts/interfaces/IStakedTokenIncentivesController.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface IStakedTokenIncentivesController {\r\n    function claimRewards(\r\n        address[] calldata assets,\r\n        uint256 amount,\r\n        address to\r\n    ) external;\r\n\r\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\r\n\r\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\r\n\r\n    function setDistributionEnd(uint256 distributionEnd) external;\r\n\r\n    function initialize(address addressesProvider) external;\r\n}\r\n\r\n// File: contracts/interfaces/ILegacyERC20.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface ILegacyERC20 {\r\n    function approve(address spender, uint256 amount) external; // returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/modules/OwnableModule.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n/**\r\n * @title OwnableModule\r\n * @dev Common functionality for multi-token extension non-upgradeable module.\r\n */\r\ncontract OwnableModule {\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev Initializes this contract.\r\n     * @param _owner address of the owner that is allowed to perform additional actions on the particular module.\r\n     */\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if sender is not the owner of this contract.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the owner of this contract.\r\n     * @param _newOwner address of the new owner.\r\n     */\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/modules/MediatorOwnableModule.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n/**\r\n * @title MediatorOwnableModule\r\n * @dev Common functionality for non-upgradeable Omnibridge extension module.\r\n */\r\ncontract MediatorOwnableModule is OwnableModule {\r\n    address public mediator;\r\n\r\n    /**\r\n     * @dev Initializes this contract.\r\n     * @param _mediator address of the deployed Omnibridge extension for which this module is deployed.\r\n     * @param _owner address of the owner that is allowed to perform additional actions on the particular module.\r\n     */\r\n    constructor(address _mediator, address _owner) OwnableModule(_owner) {\r\n        require(Address.isContract(_mediator));\r\n        mediator = _mediator;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if sender is not the Omnibridge extension.\r\n     */\r\n    modifier onlyMediator {\r\n        require(msg.sender == mediator);\r\n        _;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IInterestReceiver.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface IInterestReceiver {\r\n    function onInterestReceived(address _token) external;\r\n}\r\n\r\n// File: contracts/interfaces/IInterestImplementation.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\ninterface IInterestImplementation {\r\n    event InterestEnabled(address indexed token, address xToken);\r\n    event InterestDustUpdated(address indexed token, uint96 dust);\r\n    event InterestReceiverUpdated(address indexed token, address receiver);\r\n    event MinInterestPaidUpdated(address indexed token, uint256 amount);\r\n    event PaidInterest(address indexed token, address to, uint256 value);\r\n    event ForceDisable(address indexed token, uint256 tokensAmount, uint256 xTokensAmount, uint256 investedAmount);\r\n\r\n    function isInterestSupported(address _token) external view returns (bool);\r\n\r\n    function invest(address _token, uint256 _amount) external;\r\n\r\n    function withdraw(address _token, uint256 _amount) external;\r\n\r\n    function investedAmount(address _token) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/modules/interest/BaseInterestERC20.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title BaseInterestERC20\r\n * @dev This contract contains common logic for investing ERC20 tokens into different interest-earning protocols.\r\n */\r\nabstract contract BaseInterestERC20 is IInterestImplementation {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n     * @dev Ensures that caller is an EOA.\r\n     * Functions with such modifier cannot be called from other contract (as well as from GSN-like approaches)\r\n     */\r\n    modifier onlyEOA {\r\n        // solhint-disable-next-line avoid-tx-origin\r\n        require(msg.sender == tx.origin);\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function transferring interest tokens to the interest receiver.\r\n     * Calls a callback on the receiver, interest receiver is a contract.\r\n     * @param _receiver address of the tokens receiver.\r\n     * @param _token address of the token contract to send.\r\n     * @param _amount amount of tokens to transfer.\r\n     */\r\n    function _transferInterest(\r\n        address _receiver,\r\n        address _token,\r\n        uint256 _amount\r\n    ) internal {\r\n        require(_receiver != address(0));\r\n\r\n        IERC20(_token).safeTransfer(_receiver, _amount);\r\n\r\n        if (Address.isContract(_receiver)) {\r\n            IInterestReceiver(_receiver).onInterestReceived(_token);\r\n        }\r\n\r\n        emit PaidInterest(_token, _receiver, _amount);\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/modules/interest/AAVEInterestERC20.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title AAVEInterestERC20\r\n * @dev This contract contains token-specific logic for investing ERC20 tokens into AAVE protocol.\r\n */\r\ncontract AAVEInterestERC20 is BaseInterestERC20, MediatorOwnableModule {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using SafeERC20 for IAToken;\r\n\r\n    struct InterestParams {\r\n        IAToken aToken;\r\n        uint96 dust;\r\n        uint256 investedAmount;\r\n        address interestReceiver;\r\n        uint256 minInterestPaid;\r\n    }\r\n\r\n    mapping(address => InterestParams) public interestParams;\r\n    uint256 public minAavePaid;\r\n    address public aaveReceiver;\r\n\r\n    constructor(\r\n        address _omnibridge,\r\n        address _owner,\r\n        uint256 _minAavePaid,\r\n        address _aaveReceiver\r\n    ) MediatorOwnableModule(_omnibridge, _owner) {\r\n        minAavePaid = _minAavePaid;\r\n        aaveReceiver = _aaveReceiver;\r\n    }\r\n\r\n    /**\r\n     * @dev Tells the module interface version that this contract supports.\r\n     * @return major value of the version\r\n     * @return minor value of the version\r\n     * @return patch value of the version\r\n     */\r\n    function getModuleInterfacesVersion()\r\n        external\r\n        pure\r\n        returns (\r\n            uint64 major,\r\n            uint64 minor,\r\n            uint64 patch\r\n        )\r\n    {\r\n        return (1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells the address of the LendingPool contract in the Ethereum Mainnet.\r\n     */\r\n    function lendingPool() public pure virtual returns (ILendingPool) {\r\n        return ILendingPool(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells the address of the StakedTokenIncentivesController contract in the Ethereum Mainnet.\r\n     */\r\n    function incentivesController() public pure virtual returns (IStakedTokenIncentivesController) {\r\n        return IStakedTokenIncentivesController(0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells the address of the StkAAVE token contract in the Ethereum Mainnet.\r\n     */\r\n    function stkAAVEToken() public pure virtual returns (address) {\r\n        return 0x4da27a545c0c5B758a6BA100e3a049001de870f5;\r\n    }\r\n\r\n    /**\r\n     * @dev Enables support for interest earning through a specific aToken.\r\n     * @param _token address of the token contract for which to enable interest.\r\n     * @param _dust small amount of underlying tokens that cannot be paid as an interest. Accounts for possible truncation errors.\r\n     * @param _interestReceiver address of the interest receiver for underlying token.\r\n     * @param _minInterestPaid min amount of underlying tokens to be paid as an interest.\r\n     */\r\n    function enableInterestToken(\r\n        address _token,\r\n        uint96 _dust,\r\n        address _interestReceiver,\r\n        uint256 _minInterestPaid\r\n    ) external onlyOwner {\r\n        IAToken aToken = IAToken(lendingPool().getReserveData(_token)[7]);\r\n        require(aToken.UNDERLYING_ASSET_ADDRESS() == _token);\r\n\r\n        // disallow reinitialization of tokens that were already initialized and invested\r\n        require(interestParams[_token].investedAmount == 0);\r\n\r\n        interestParams[_token] = InterestParams(aToken, _dust, 0, _interestReceiver, _minInterestPaid);\r\n\r\n        // SafeERC20.safeApprove does not work here in case of possible interest reinitialization,\r\n        // since it does not allow positive->positive allowance change. However, it would be safe to make such change here.\r\n        ILegacyERC20(_token).approve(address(lendingPool()), uint256(-1));\r\n\r\n        emit InterestEnabled(_token, address(aToken));\r\n        emit InterestDustUpdated(_token, _dust);\r\n        emit InterestReceiverUpdated(_token, _interestReceiver);\r\n        emit MinInterestPaidUpdated(_token, _minInterestPaid);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells the current amount of underlying tokens that was invested into the AAVE protocol.\r\n     * @param _token address of the underlying token.\r\n     * @return currently invested value.\r\n     */\r\n    function investedAmount(address _token) external view override returns (uint256) {\r\n        return interestParams[_token].investedAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Tells if interest earning is supported for the specific underlying token contract.\r\n     * @param _token address of the token contract.\r\n     * @return true, if interest earning is supported for the given token.\r\n     */\r\n    function isInterestSupported(address _token) external view override returns (bool) {\r\n        return address(interestParams[_token].aToken) != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Invests the given amount of tokens to the AAVE protocol.\r\n     * Only Omnibridge contract is allowed to call this method.\r\n     * Converts _amount of TOKENs into aTOKENs.\r\n     * @param _token address of the invested token contract.\r\n     * @param _amount amount of tokens to invest.\r\n     */\r\n    function invest(address _token, uint256 _amount) external override onlyMediator {\r\n        InterestParams storage params = interestParams[_token];\r\n        params.investedAmount = params.investedAmount.add(_amount);\r\n        lendingPool().deposit(_token, _amount, address(this), 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws at least min(_amount, investedAmount) of tokens from the AAVE protocol.\r\n     * Only Omnibridge contract is allowed to call this method.\r\n     * Converts aTOKENs into _amount of TOKENs.\r\n     * @param _token address of the invested token contract.\r\n     * @param _amount minimal amount of tokens to withdraw.\r\n     */\r\n    function withdraw(address _token, uint256 _amount) external override onlyMediator {\r\n        InterestParams storage params = interestParams[_token];\r\n        uint256 invested = params.investedAmount;\r\n        uint256 redeemed = _safeWithdraw(_token, _amount > invested ? invested : _amount);\r\n        params.investedAmount = redeemed > invested ? 0 : invested - redeemed;\r\n        IERC20(_token).safeTransfer(mediator, redeemed);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells the current accumulated interest on the invested tokens, that can be withdrawn and payed to the interest receiver.\r\n     * @param _token address of the invested token contract.\r\n     * @return amount of accumulated interest.\r\n     */\r\n    function interestAmount(address _token) public view returns (uint256) {\r\n        InterestParams storage params = interestParams[_token];\r\n        (IAToken aToken, uint96 dust) = (params.aToken, params.dust);\r\n        uint256 balance = aToken.balanceOf(address(this));\r\n        // small portion of tokens are reserved for possible truncation/round errors\r\n        uint256 reserved = params.investedAmount.add(dust);\r\n        return balance > reserved ? balance - reserved : 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Pays collected interest for the underlying token.\r\n     * Anyone can call this function.\r\n     * Earned interest is withdrawn and transferred to the specified interest receiver account.\r\n     * @param _token address of the invested token contract in which interest should be paid.\r\n     */\r\n    function payInterest(address _token) external onlyEOA {\r\n        InterestParams storage params = interestParams[_token];\r\n        uint256 interest = interestAmount(_token);\r\n        require(interest >= params.minInterestPaid);\r\n        _transferInterest(params.interestReceiver, address(_token), _safeWithdraw(_token, interest));\r\n    }\r\n\r\n    /**\r\n     * @dev Tells the amount of earned stkAAVE tokens for supplying assets into the protocol that can be withdrawn.\r\n     * Intended to be called via eth_call to obtain the current accumulated value for stkAAVE.\r\n     * @param _assets aTokens addresses to claim stkAAVE for.\r\n     * @return amount of accumulated stkAAVE tokens across given markets.\r\n     */\r\n    function aaveAmount(address[] calldata _assets) public view returns (uint256) {\r\n        return incentivesController().getRewardsBalance(_assets, address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Claims stkAAVE token received by supplying underlying tokens and transfers it to the associated AAVE receiver.\r\n     * @param _assets aTokens addresses to claim stkAAVE for.\r\n     */\r\n    function claimAaveAndPay(address[] calldata _assets) external onlyEOA {\r\n        uint256 balance = aaveAmount(_assets);\r\n        require(balance >= minAavePaid);\r\n\r\n        incentivesController().claimRewards(_assets, balance, address(this));\r\n\r\n        _transferInterest(aaveReceiver, stkAAVEToken(), balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Last-resort function for returning assets to the Omnibridge contract in case of some failures in the logic.\r\n     * Disables this contract and transfers locked tokens back to the mediator.\r\n     * Only owner is allowed to call this method.\r\n     * @param _token address of the invested token contract that should be disabled.\r\n     */\r\n    function forceDisable(address _token) external onlyOwner {\r\n        InterestParams storage params = interestParams[_token];\r\n        IAToken aToken = params.aToken;\r\n\r\n        uint256 aTokenBalance = 0;\r\n        // try to redeem all aTokens\r\n        // it is safe to specify uint256(-1) as max amount of redeemed tokens\r\n        // since the withdraw method of the pool contract will return the entire balance\r\n        try lendingPool().withdraw(_token, uint256(-1), mediator) {} catch {\r\n            aTokenBalance = aToken.balanceOf(address(this));\r\n            aToken.safeTransfer(mediator, aTokenBalance);\r\n        }\r\n\r\n        uint256 balance = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).safeTransfer(mediator, balance);\r\n        IERC20(_token).safeApprove(address(lendingPool()), 0);\r\n\r\n        emit ForceDisable(_token, balance, aTokenBalance, params.investedAmount);\r\n\r\n        delete interestParams[_token];\r\n    }\r\n\r\n    /**\r\n     * @dev Updates dust parameter for the particular token.\r\n     * Only owner is allowed to call this method.\r\n     * @param _token address of the invested token contract.\r\n     * @param _dust new amount of underlying tokens that cannot be paid as an interest. Accounts for possible truncation errors.\r\n     */\r\n    function setDust(address _token, uint96 _dust) external onlyOwner {\r\n        interestParams[_token].dust = _dust;\r\n        emit InterestDustUpdated(_token, _dust);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates address of the interest receiver. Can be any address, EOA or contract.\r\n     * Set to 0x00..00 to disable interest transfers.\r\n     * Only owner is allowed to call this method.\r\n     * @param _token address of the invested token contract.\r\n     * @param _receiver address of the interest receiver.\r\n     */\r\n    function setInterestReceiver(address _token, address _receiver) external onlyOwner {\r\n        interestParams[_token].interestReceiver = _receiver;\r\n        emit InterestReceiverUpdated(_token, _receiver);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates min interest amount that can be transferred in single call.\r\n     * Only owner is allowed to call this method.\r\n     * @param _token address of the invested token contract.\r\n     * @param _minInterestPaid new amount of TOKENS and can be transferred to the interest receiver in single operation.\r\n     */\r\n    function setMinInterestPaid(address _token, uint256 _minInterestPaid) external onlyOwner {\r\n        interestParams[_token].minInterestPaid = _minInterestPaid;\r\n        emit MinInterestPaidUpdated(_token, _minInterestPaid);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates min stkAAVE amount that can be transferred in single call.\r\n     * Only owner is allowed to call this method.\r\n     * @param _minAavePaid new amount of stkAAVE and can be transferred to the interest receiver in single operation.\r\n     */\r\n    function setMinAavePaid(uint256 _minAavePaid) external onlyOwner {\r\n        minAavePaid = _minAavePaid;\r\n        emit MinInterestPaidUpdated(address(stkAAVEToken()), _minAavePaid);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates address of the accumulated stkAAVE receiver. Can be any address, EOA or contract.\r\n     * Set to 0x00..00 to disable stkAAVE claims and transfers.\r\n     * Only owner is allowed to call this method.\r\n     * @param _receiver address of the interest receiver.\r\n     */\r\n    function setAaveReceiver(address _receiver) external onlyOwner {\r\n        aaveReceiver = _receiver;\r\n        emit InterestReceiverUpdated(address(stkAAVEToken()), _receiver);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for securely withdrawing assets from the underlying protocol.\r\n     * @param _token address of the invested token contract.\r\n     * @param _amount minimal amount of underlying tokens to withdraw from AAVE.\r\n     * @return amount of redeemed tokens, at least as much as was requested.\r\n     */\r\n    function _safeWithdraw(address _token, uint256 _amount) private returns (uint256) {\r\n        uint256 balance = IERC20(_token).balanceOf(address(this));\r\n\r\n        lendingPool().withdraw(_token, _amount, address(this));\r\n\r\n        uint256 redeemed = IERC20(_token).balanceOf(address(this)) - balance;\r\n\r\n        require(redeemed >= _amount);\r\n\r\n        return redeemed;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_omnibridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAavePaid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_aaveReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xTokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investedAmount\",\"type\":\"uint256\"}],\"name\":\"ForceDisable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"dust\",\"type\":\"uint96\"}],\"name\":\"InterestDustUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"}],\"name\":\"InterestEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"InterestReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinInterestPaidUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PaidInterest\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"aaveAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"claimAaveAndPay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_dust\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_interestReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minInterestPaid\",\"type\":\"uint256\"}],\"name\":\"enableInterestToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"forceDisable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getModuleInterfacesVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"major\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minor\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"patch\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentivesController\",\"outputs\":[{\"internalType\":\"contract IStakedTokenIncentivesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"interestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"interestParams\",\"outputs\":[{\"internalType\":\"contract IAToken\",\"name\":\"aToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"dust\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"investedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interestReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minInterestPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"investedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isInterestSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAavePaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"payInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setAaveReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_dust\",\"type\":\"uint96\"}],\"name\":\"setDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setInterestReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAavePaid\",\"type\":\"uint256\"}],\"name\":\"setMinAavePaid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minInterestPaid\",\"type\":\"uint256\"}],\"name\":\"setMinInterestPaid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stkAAVEToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AAVEInterestERC20","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000088ad09518695c6c3712ac10a214be5109a655671000000000000000000000000bf3d6f830ce263cae987193982192cd990442b530000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000b6559da32afc07dccb42c2a3819fb73f72e39267","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://eadb55bd06c5027cc4342ab4da4a21f5262397023b655b1310eb39b17e6f763e"}]}