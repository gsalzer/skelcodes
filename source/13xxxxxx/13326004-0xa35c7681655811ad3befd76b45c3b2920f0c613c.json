{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/delegators/AaveDelegatorClaimer.sol\": {\r\n      \"content\": \"//██████╗  █████╗ ██╗      █████╗ ██████╗ ██╗███╗   ██╗\\n//██╔══██╗██╔══██╗██║     ██╔══██╗██╔══██╗██║████╗  ██║\\n//██████╔╝███████║██║     ███████║██║  ██║██║██╔██╗ ██║\\n//██╔═══╝ ██╔══██║██║     ██╔══██║██║  ██║██║██║╚██╗██║\\n//██║     ██║  ██║███████╗██║  ██║██████╔╝██║██║ ╚████║\\n//╚═╝     ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝  ╚═══╝\\n                                                     \\n\\npragma solidity ^0.7.6;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"./AaveDelegator.sol\\\";\\nimport \\\"../tokens/AAVE/IStakedAave.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\nimport \\\"../utils/SafeMath.sol\\\";\\n/** @title Aave Governance token Delegator that claims rewards for the stkAave token */\\n/// @author Paladin\\ncontract AaveDelegatorClaimer is AaveDelegator {\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    constructor(){\\n        //Set up initial values\\n        motherPool = payable(address(0xdead));\\n        \\n    }\\n\\n    /**\\n    * @notice Starts the Loan and Delegate the voting Power to the Delegatee\\n    * @dev Sets the amount values for the Loan, then delegate the voting power to the Delegatee\\n    * @param _delegatee Address to delegate the voting power to\\n    * @param _amount Amount of the underlying token for this loan\\n    * @param _feesAmount Amount of fees (in the underlying token) paid by the borrower\\n    * @return bool : Power Delagation success\\n    */\\n    function initiate(\\n        address _motherPool,\\n        address _borrower,\\n        address _underlying,\\n        address _delegatee,\\n        uint _amount,\\n        uint _feesAmount\\n    ) public override(AaveDelegator) returns(bool){\\n        return super.initiate(_motherPool, _borrower, _underlying, _delegatee, _amount, _feesAmount);\\n    }\\n\\n    /**\\n    * @notice Increases the amount of fees paid to expand the Loan\\n    * @dev Updates the feesAmount value for this Loan\\n    * @param _newFeesAmount new Amount of fees paid by the Borrower\\n    * @return bool : Expand success\\n    */\\n    function expand(uint _newFeesAmount) public override(AaveDelegator) motherPoolOnly returns(bool){\\n        return super.expand(_newFeesAmount);\\n    }\\n\\n    /**\\n    * @notice Closes a Loan, and returns the non-used fees to the Borrower\\n    * @dev Return the non-used fees to the Borrower, the loaned tokens and the used fees to the PalPool, then destroy the contract\\n    * @param _usedAmount Amount of fees to be used as interest for the Loan\\n    */\\n    function closeLoan(uint _usedAmount) public override(AaveDelegator) motherPoolOnly {\\n        //Claim the reward from the StkAave contract and send them to the PalPool\\n        IStakedAave _stkAave = IStakedAave(underlying);\\n        uint _pendingRewards = _stkAave.getTotalRewardsBalance(address(this));\\n        _stkAave.claimRewards(motherPool, _pendingRewards);\\n\\n        super.closeLoan(_usedAmount);\\n    }\\n\\n    /**\\n    * @notice Kills a Loan, and reward the Killer a part of the fees of the Loan\\n    * @dev Send the reward fees to the Killer, then return the loaned tokens and the fees to the PalPool, and destroy the contract\\n    * @param _killer Address of the Loan Killer\\n    * @param _killerRatio Percentage of the fees to reward to the killer (scale 1e18)\\n    */\\n    function killLoan(address _killer, uint _killerRatio) public override(AaveDelegator) motherPoolOnly {\\n        //Claim the reward from the StkAave contract and send them to the PalPool\\n        IStakedAave _stkAave = IStakedAave(underlying);\\n        uint _pendingRewards = _stkAave.getTotalRewardsBalance(address(this));\\n        _stkAave.claimRewards(motherPool, _pendingRewards);\\n\\n        super.killLoan(_killer, _killerRatio);\\n    }\\n\\n\\n    /**\\n    * @notice Change the voring power delegatee\\n    * @dev Update the delegatee and delegate him the voting power\\n    * @param _delegatee Address to delegate the voting power to\\n    * @return bool : Power Delagation success\\n    */\\n    function changeDelegatee(address _delegatee) public override(AaveDelegator) motherPoolOnly returns(bool){\\n        return super.changeDelegatee(_delegatee);\\n    }\\n}\"\r\n    },\r\n    \"contracts/delegators/AaveDelegator.sol\": {\r\n      \"content\": \"//██████╗  █████╗ ██╗      █████╗ ██████╗ ██╗███╗   ██╗\\n//██╔══██╗██╔══██╗██║     ██╔══██╗██╔══██╗██║████╗  ██║\\n//██████╔╝███████║██║     ███████║██║  ██║██║██╔██╗ ██║\\n//██╔═══╝ ██╔══██║██║     ██╔══██║██║  ██║██║██║╚██╗██║\\n//██║     ██║  ██║███████╗██║  ██║██████╔╝██║██║ ╚████║\\n//╚═╝     ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝  ╚═══╝\\n                                                     \\n\\npragma solidity ^0.7.6;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"../utils/IERC20.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\nimport \\\"../utils/SafeMath.sol\\\";\\nimport \\\"../tokens/AAVE/IGovernancePowerDelegationToken.sol\\\";\\nimport {Errors} from  \\\"../utils/Errors.sol\\\";\\n\\n/** @title Aave Governance token Delegator  */\\n/// @author Paladin\\ncontract AaveDelegator {\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    //Variables\\n\\n    /** @notice Address of the underlying token for this loan */\\n    address public underlying;\\n    /** @notice Amount of the underlying token in this loan */\\n    uint public amount;\\n    /** @notice Address of the borrower */\\n    address public borrower;\\n    /** @notice Address of the delegatee for the voting power */\\n    address public delegatee;\\n    /** @notice PalPool that created this loan */\\n    address payable public motherPool;\\n    /** @notice Amount of fees paid for this loan */\\n    uint public feesAmount;\\n\\n    constructor(){\\n        //Set up initial values\\n        motherPool = payable(address(0xdead));\\n        \\n    }\\n\\n    modifier motherPoolOnly() {\\n        require(msg.sender == motherPool);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Starts the Loan and Delegate the voting Power to the Delegatee\\n    * @dev Sets the amount values for the Loan, then delegate the voting power to the Delegatee\\n    * @param _delegatee Address to delegate the voting power to\\n    * @param _amount Amount of the underlying token for this loan\\n    * @param _feesAmount Amount of fees (in the underlying token) paid by the borrower\\n    * @return bool : Power Delagation success\\n    */\\n    function initiate(\\n        address _motherPool,\\n        address _borrower,\\n        address _underlying,\\n        address _delegatee,\\n        uint _amount,\\n        uint _feesAmount\\n    ) public virtual returns(bool){\\n        require(motherPool == address(0));\\n\\n        motherPool = payable(_motherPool);\\n        borrower = _borrower;\\n        underlying = _underlying;\\n        //Set up the borrowed amount and the amount of fees paid\\n        amount = _amount;\\n        feesAmount = _feesAmount;\\n        delegatee = _delegatee;\\n        \\n        //Delegate governance power : AAVE version\\n        IGovernancePowerDelegationToken govToken = IGovernancePowerDelegationToken(underlying);\\n        govToken.delegate(_delegatee);\\n        return true;\\n    }\\n\\n    /**\\n    * @notice Increases the amount of fees paid to expand the Loan\\n    * @dev Updates the feesAmount value for this Loan\\n    * @param _newFeesAmount new Amount of fees paid by the Borrower\\n    * @return bool : Expand success\\n    */\\n    function expand(uint _newFeesAmount) public virtual motherPoolOnly returns(bool){\\n        feesAmount = feesAmount.add(_newFeesAmount);\\n        return true;\\n    }\\n\\n    /**\\n    * @notice Closes a Loan, and returns the non-used fees to the Borrower\\n    * @dev Return the non-used fees to the Borrower, the loaned tokens and the used fees to the PalPool, then destroy the contract\\n    * @param _usedAmount Amount of fees to be used as interest for the Loan\\n    */\\n    function closeLoan(uint _usedAmount) public virtual motherPoolOnly {\\n        IERC20 _underlying = IERC20(underlying);\\n        \\n        //Return the remaining amount to the borrower\\n        //Then return the borrowed amount and the used fees to the pool\\n        uint _returnAmount = feesAmount.sub(_usedAmount);\\n        uint _balance = _underlying.balanceOf(address(this));\\n        uint _keepAmount = _balance.sub(_returnAmount);\\n        if(_returnAmount > 0){\\n            _underlying.safeTransfer(borrower, _returnAmount);\\n        }\\n        _underlying.safeTransfer(motherPool, _keepAmount);\\n\\n         //Destruct the contract, so it's not usable anymore\\n        selfdestruct(motherPool);\\n    }\\n\\n    /**\\n    * @notice Kills a Loan, and reward the Killer a part of the fees of the Loan\\n    * @dev Send the reward fees to the Killer, then return the loaned tokens and the fees to the PalPool, and destroy the contract\\n    * @param _killer Address of the Loan Killer\\n    * @param _killerRatio Percentage of the fees to reward to the killer (scale 1e18)\\n    */\\n    function killLoan(address _killer, uint _killerRatio) public virtual motherPoolOnly {\\n        IERC20 _underlying = IERC20(underlying);\\n        \\n        //Send the killer reward to the killer\\n        //Then return the borrowed amount and the fees to the pool\\n        uint _killerAmount = feesAmount.mul(_killerRatio).div(uint(1e18));\\n        uint _balance = _underlying.balanceOf(address(this));\\n        uint _poolAmount = _balance.sub(_killerAmount);\\n        _underlying.safeTransfer(_killer, _killerAmount);\\n        _underlying.safeTransfer(motherPool, _poolAmount);\\n\\n         //Destruct the contract, so it's not usable anymore\\n        selfdestruct(motherPool);\\n    }\\n\\n\\n    /**\\n    * @notice Change the voring power delegatee\\n    * @dev Update the delegatee and delegate him the voting power\\n    * @param _delegatee Address to delegate the voting power to\\n    * @return bool : Power Delagation success\\n    */\\n    function changeDelegatee(address _delegatee) public virtual motherPoolOnly returns(bool){\\n        delegatee = _delegatee;\\n        \\n        //Delegate governance power : AAVE version\\n        IGovernancePowerDelegationToken govToken = IGovernancePowerDelegationToken(underlying);\\n        govToken.delegate(_delegatee);\\n        return true;\\n    }\\n}\"\r\n    },\r\n    \"contracts/tokens/AAVE/IStakedAave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.5;\\n\\ninterface IStakedAave {\\n  function stake(address to, uint256 amount) external;\\n\\n  function redeem(address to, uint256 amount) external;\\n\\n  function cooldown() external;\\n\\n  function claimRewards(address to, uint256 amount) external;\\n\\n  function getTotalRewardsBalance(address staker) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.6;\\n//SPDX-License-Identifier: MIT\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.6;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/tokens/AAVE/IGovernancePowerDelegationToken.sol\": {\r\n      \"content\": \"//Aave Governance Token Interface\\n\\n// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.5;\\n\\ninterface IGovernancePowerDelegationToken {\\n  \\n  enum DelegationType {VOTING_POWER, PROPOSITION_POWER}\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the delegator\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev emitted when an action changes the delegated power of a user\\n   * @param user the user which delegated power has changed\\n   * @param amount the amount of delegated power for the user\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power has changed\\n   * @param delegationType the type of delegation (VOTING_POWER, PROPOSITION_POWER)\\n   **/\\n  function delegateByType(address delegatee, DelegationType delegationType) external;\\n  /**\\n   * @dev delegates all the powers to a specific user\\n   * @param delegatee the user to which the power will be delegated\\n   **/\\n  function delegate(address delegatee) external;\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   **/\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev returns the current delegated power of a user. The current power is the\\n   * power delegated at the time of the last snapshot\\n   * @param user the user\\n   **/\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the delegated power of a user at a certain block\\n   * @param user the user\\n   **/\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external view returns (uint256);\\n \\n  /**\\n  * @dev returns the total supply at a certain block number\\n  **/\\n  function totalSupplyAt(uint256 blockNumber) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/utils/Errors.sol\": {\r\n      \"content\": \"//██████╗  █████╗ ██╗      █████╗ ██████╗ ██╗███╗   ██╗\\n//██╔══██╗██╔══██╗██║     ██╔══██╗██╔══██╗██║████╗  ██║\\n//██████╔╝███████║██║     ███████║██║  ██║██║██╔██╗ ██║\\n//██╔═══╝ ██╔══██║██║     ██╔══██║██║  ██║██║██║╚██╗██║\\n//██║     ██║  ██║███████╗██║  ██║██████╔╝██║██║ ╚████║\\n//╚═╝     ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝  ╚═══╝\\n                                                     \\n\\npragma solidity ^0.7.6;\\n//SPDX-License-Identifier: MIT\\n\\nlibrary Errors {\\n    // Admin error\\n    string public constant CALLER_NOT_ADMIN = '1'; // 'The caller must be the admin'\\n    string public constant CALLER_NOT_CONTROLLER = '29'; // 'The caller must be the admin or the controller'\\n    string public constant CALLER_NOT_ALLOWED_POOL = '30';  // 'The caller must be a palPool listed in the controller'\\n    string public constant CALLER_NOT_MINTER = '31';\\n\\n    // ERC20 type errors\\n    string public constant FAIL_TRANSFER = '2';\\n    string public constant FAIL_TRANSFER_FROM = '3';\\n    string public constant BALANCE_TOO_LOW = '4';\\n    string public constant ALLOWANCE_TOO_LOW = '5';\\n    string public constant SELF_TRANSFER = '6';\\n\\n    // PalPool errors\\n    string public constant INSUFFICIENT_CASH = '9';\\n    string public constant INSUFFICIENT_BALANCE = '10';\\n    string public constant FAIL_DEPOSIT = '11';\\n    string public constant FAIL_LOAN_INITIATE = '12';\\n    string public constant FAIL_BORROW = '13';\\n    string public constant ZERO_BORROW = '27';\\n    string public constant BORROW_INSUFFICIENT_FEES = '23';\\n    string public constant LOAN_CLOSED = '14';\\n    string public constant NOT_LOAN_OWNER = '15';\\n    string public constant LOAN_OWNER = '16';\\n    string public constant FAIL_LOAN_EXPAND = '17';\\n    string public constant NOT_KILLABLE = '18';\\n    string public constant RESERVE_FUNDS_INSUFFICIENT = '19';\\n    string public constant FAIL_MINT = '20';\\n    string public constant FAIL_BURN = '21';\\n    string public constant FAIL_WITHDRAW = '24';\\n    string public constant FAIL_CLOSE_BORROW = '25';\\n    string public constant FAIL_KILL_BORROW = '26';\\n    string public constant ZERO_ADDRESS = '22';\\n    string public constant INVALID_PARAMETERS = '28'; \\n    string public constant FAIL_LOAN_DELEGATEE_CHANGE = '32';\\n    string public constant FAIL_LOAN_TOKEN_BURN = '33';\\n    string public constant FEES_ACCRUED_INSUFFICIENT = '34';\\n\\n}\"\r\n    },\r\n    \"contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 25000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"}],\"name\":\"changeDelegatee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usedAmount\",\"type\":\"uint256\"}],\"name\":\"closeLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegatee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeesAmount\",\"type\":\"uint256\"}],\"name\":\"expand\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_motherPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feesAmount\",\"type\":\"uint256\"}],\"name\":\"initiate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_killer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_killerRatio\",\"type\":\"uint256\"}],\"name\":\"killLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"motherPool\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AaveDelegatorClaimer","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"25000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}