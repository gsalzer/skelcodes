{"status":"1","message":"OK","result":[{"SourceCode":"{\"Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENCED\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\n\\r\\ncontract Exchange{\\r\\n    // Define Struct\\r\\n    struct Order{\\r\\n        uint256 id;\\r\\n        address from;\\r\\n        uint256 amount;\\r\\n    }\\r\\n    // Define properties\\r\\n    uint256 public length = 0;\\r\\n    IERC20 token;\\r\\n    Order[] public _orders;\\r\\n    // mapping(address=\\u003euint256) public _uncleared_balances;\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n    // Define Modifiers\\r\\n    modifier onlyAdmin(){\\r\\n        require(msg.sender == owner,\\\"Exchange: Action not Alowed!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Define Events\\r\\n    event TransferIn(address indexed from,address indexed to, uint256 value, uint256 id);\\r\\n    // event TransferOut(address indexed from,address indexed to, uint256 value);\\r\\n\\r\\n    constructor(address _token){\\r\\n        token = IERC20(_token);\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function setAdmin(address _new_admin) public virtual onlyAdmin{\\r\\n        owner = _new_admin;\\r\\n    }\\r\\n\\r\\n    // A function is called to start Swaping Process \\r\\n    function transferIn(uint256 _value) public virtual{\\r\\n        // Transfer Amount\\r\\n        token.transferFrom(msg.sender, owner, _value);\\r\\n\\r\\n        // Add to order\\r\\n        Order memory _order;\\r\\n        _order.id = length;\\r\\n        _order.amount = _value;\\r\\n        _order.from = msg.sender;\\r\\n        _orders.push(_order);\\r\\n\\r\\n\\r\\n        // Emit Event\\r\\n        emit TransferIn(msg.sender, owner, _value, length);\\r\\n\\r\\n        length +=1;\\r\\n    }\\r\\n\\r\\n    function checkStatus(uint256 _order_id) public virtual view returns(uint256 id,address from,uint256 amount){\\r\\n        for(uint256 i = 0; i\\u003e=length;i++){\\r\\n            if(_order_id ==_orders[i].id){\\r\\n                return (_orders[i].id,_orders[i].from,_orders[i].amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getOrders() public virtual view returns(Order[] memory){\\r\\n        return _orders;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"TransferIn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_orders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_order_id\",\"type\":\"uint256\"}],\"name\":\"checkStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Exchange.Order[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Exchange","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000343131c0257ac21ea5a8dc83841f071efd9285c","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c09cf00df90e465f62c10f8c705f92facf3f7ddadd78285969062e15c6718b5f"}]}