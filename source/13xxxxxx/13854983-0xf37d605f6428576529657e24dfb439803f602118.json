{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/pool/LinearInterestRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {PercentageMath} from \\\"../libraries/math/PercentageMath.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/math/WadRayMath.sol\\\";\\nimport {IInterestRateModel} from \\\"../interfaces/IInterestRateModel.sol\\\";\\nimport {Constants} from \\\"../libraries/helpers/Constants.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\n\\n/// @title Linear Interest Rate Model\\n/// @notice Linear interest rate model, similar which Aave uses\\ncontract LinearInterestRateModel is IInterestRateModel {\\n    using PercentageMath for uint256;\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    // Uoptimal[0;1] in Wad\\n    uint256 public immutable _U_Optimal_WAD;\\n\\n    // 1 - Uoptimal [0;1] x10.000, percentage plus two decimals\\n    uint256 public immutable _U_Optimal_inverted_WAD;\\n\\n    // R_base in Ray\\n    uint256 public immutable _R_base_RAY;\\n\\n    // R_Slope1 in Ray\\n    uint256 public immutable _R_slope1_RAY;\\n\\n    // R_Slope2 in Ray\\n    uint256 public immutable _R_slope2_RAY;\\n\\n    // Contract version\\n    uint constant public version = 1;\\n\\n    /// @dev Constructor\\n    /// @param U_optimal Optimal U in percentage format: x10.000 - percentage plus two decimals\\n    /// @param R_base R_base in percentage format: x10.000 - percentage plus two decimals @param R_slope1 R_Slope1 in Ray\\n    /// @param R_slope1 R_Slope1 in percentage format: x10.000 - percentage plus two decimals\\n    /// @param R_slope2 R_Slope2 in percentage format: x10.000 - percentage plus two decimals\\n    constructor(\\n        uint256 U_optimal,\\n        uint256 R_base,\\n        uint256 R_slope1,\\n        uint256 R_slope2\\n    ) {\\n        require(\\n            U_optimal <= PercentageMath.PERCENTAGE_FACTOR,\\n            Errors.INCORRECT_PARAMETER\\n        );\\n        require(\\n            R_base <= PercentageMath.PERCENTAGE_FACTOR,\\n            Errors.INCORRECT_PARAMETER\\n        );\\n        require(\\n            R_slope1 <= PercentageMath.PERCENTAGE_FACTOR,\\n            Errors.INCORRECT_PARAMETER\\n        );\\n\\n        // Convert percetns to WAD\\n        uint256 U_optimal_WAD = WadRayMath.WAD.percentMul(U_optimal);\\n        _U_Optimal_WAD = U_optimal_WAD;\\n\\n        // 1 - Uoptimal in WAD\\n        _U_Optimal_inverted_WAD = WadRayMath.WAD.sub(U_optimal_WAD);\\n\\n        _R_base_RAY = WadRayMath.RAY.percentMul(R_base);\\n        _R_slope1_RAY = WadRayMath.RAY.percentMul(R_slope1);\\n        _R_slope2_RAY = WadRayMath.RAY.percentMul(R_slope2);\\n    }\\n\\n    /// @dev Calculated borrow rate based on expectedLiquidity and availableLiquidity\\n    /// @param expectedLiquidity Expected liquidity in the pool\\n    /// @param availableLiquidity Available liquidity in the pool\\n    function calcBorrowRate(\\n        uint256 expectedLiquidity,\\n        uint256 availableLiquidity\\n    ) external view override returns (uint256) {\\n        // Protection from direct sending tokens on PoolService account\\n        //    T:[LR-5]                     // T:[LR-6]\\n        if (expectedLiquidity == 0 || expectedLiquidity < availableLiquidity) {\\n            return _R_base_RAY;\\n        }\\n\\n        //      expectedLiquidity - availableLiquidity\\n        // U = -------------------------------------\\n        //             expectedLiquidity\\n\\n        uint256 U_WAD = (expectedLiquidity.sub(availableLiquidity))\\n        .mul(WadRayMath.WAD)\\n        .div(expectedLiquidity);\\n\\n        // if U < Uoptimal:\\n        //\\n        //                                    U\\n        // borrowRate = Rbase + Rslope1 * ----------\\n        //                                 Uoptimal\\n        //\\n\\n        if (U_WAD < _U_Optimal_WAD) {\\n            return\\n                _R_base_RAY.add(_R_slope1_RAY.mul(U_WAD).div(_U_Optimal_WAD));\\n        }\\n\\n        // if U >= Uoptimal:\\n        //\\n        //                                           U - Uoptimal\\n        // borrowRate = Rbase + Rslope1 + Rslope2 * --------------\\n        //                                           1 - Uoptimal\\n\\n        return\\n            _R_base_RAY.add(_R_slope1_RAY).add(\\n                _R_slope2_RAY.mul(U_WAD.sub(_U_Optimal_WAD)).div(\\n                    _U_Optimal_inverted_WAD\\n                )\\n            ); // T:[LR-1,2,3]\\n    }\\n\\n    /// @dev Gets model parameters\\n    /// @param U_optimal U_optimal in percentage format: [0;10,000] - percentage plus two decimals\\n    /// @param R_base R_base in RAY format\\n    /// @param R_slope1 R_slope1 in RAY format\\n    /// @param R_slope2 R_slope2 in RAY format\\n    function getModelParameters()\\n        external\\n        view\\n        returns (\\n            uint256 U_optimal,\\n            uint256 R_base,\\n            uint256 R_slope1,\\n            uint256 R_slope2\\n        )\\n    {\\n        U_optimal = _U_Optimal_WAD.percentDiv(WadRayMath.WAD); // T:[LR-4]\\n        R_base = _R_base_RAY; // T:[LR-4]\\n        R_slope1 = _R_slope1_RAY; // T:[LR-4]\\n        R_slope2 = _R_slope2_RAY; // T:[LR-4]\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/math/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.4;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n    uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n    uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n    /**\\n     * @dev Executes a percentage multiplication\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return The percentage of value\\n     **/\\n    function percentMul(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (value == 0 || percentage == 0) {\\n            return 0; // T:[PM-1]\\n        }\\n\\n        require(\\n            value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        ); // T:[PM-1]\\n\\n        return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR; // T:[PM-1]\\n    }\\n\\n    /**\\n     * @dev Executes a percentage division\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return The value divided the percentage\\n     **/\\n    function percentDiv(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO); // T:[PM-2]\\n        uint256 halfPercentage = percentage / 2; // T:[PM-2]\\n\\n        require(\\n            value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        ); // T:[PM-2]\\n\\n        return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/math/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.4;\\n\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * More info https://github.com/aave/aave-protocol/blob/master/contracts/libraries/WadRayMath.sol\\n */\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     */\\n    function ray() internal pure returns (uint256) {\\n        return RAY; // T:[WRM-1]\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     */\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD; // T:[WRM-1]\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     */\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY; // T:[WRM-2]\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     */\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD; // T:[WRM-2]\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0; // T:[WRM-3]\\n        }\\n\\n        require(\\n            a <= (type(uint256).max - halfWAD) / b,\\n            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        ); // T:[WRM-3]\\n\\n        return (a * b + halfWAD) / WAD; // T:[WRM-3]\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO); // T:[WRM-4]\\n        uint256 halfB = b / 2;\\n\\n        require(\\n            a <= (type(uint256).max - halfB) / WAD,\\n            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        ); // T:[WRM-4]\\n\\n        return (a * WAD + halfB) / b; // T:[WRM-4]\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     */\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0; // T:[WRM-5]\\n        }\\n\\n        require(\\n            a <= (type(uint256).max - halfRAY) / b,\\n            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        ); // T:[WRM-5]\\n\\n        return (a * b + halfRAY) / RAY; // T:[WRM-5]\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     */\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, Errors.MATH_DIVISION_BY_ZERO); // T:[WRM-6]\\n        uint256 halfB = b / 2; // T:[WRM-6]\\n\\n        require(\\n            a <= (type(uint256).max - halfB) / RAY,\\n            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        ); // T:[WRM-6]\\n\\n        return (a * RAY + halfB) / b; // T:[WRM-6]\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     */\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2; // T:[WRM-7]\\n        uint256 result = halfRatio + a; // T:[WRM-7]\\n        require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW); // T:[WRM-7]\\n\\n        return result / WAD_RAY_RATIO; // T:[WRM-7]\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     */\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO; // T:[WRM-8]\\n        require(\\n            result / WAD_RAY_RATIO == a,\\n            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        ); // T:[WRM-8]\\n        return result; // T:[WRM-8]\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInterestRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\n\\n/// @title IInterestRateModel interface\\n/// @dev Interface for the calculation of the interest rates\\ninterface IInterestRateModel {\\n\\n    /// @dev Calculated borrow rate based on expectedLiquidity and availableLiquidity\\n    /// @param expectedLiquidity Expected liquidity in the pool\\n    /// @param availableLiquidity Available liquidity in the pool\\n    function calcBorrowRate(uint256 expectedLiquidity, uint256 availableLiquidity)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/helpers/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\n\\nlibrary Constants {\\n    uint256 constant MAX_INT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    // 25% of MAX_INT\\n    uint256 constant MAX_INT_4 =\\n        0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    // REWARD FOR LEAN DEPLOYMENT MINING\\n    uint256 constant ACCOUNT_CREATION_REWARD = 1e5;\\n    uint256 constant DEPLOYMENT_COST = 1e17;\\n\\n    // FEE = 10%\\n    uint256 constant FEE_INTEREST = 1000; // 10%\\n\\n    // FEE + LIQUIDATION_FEE 2%\\n    uint256 constant FEE_LIQUIDATION = 200;\\n\\n    // Liquidation premium 5%\\n    uint256 constant LIQUIDATION_DISCOUNTED_SUM = 9500;\\n\\n    // 100% - LIQUIDATION_FEE - LIQUIDATION_PREMIUM\\n    uint256 constant UNDERLYING_TOKEN_LIQUIDATION_THRESHOLD =\\n        LIQUIDATION_DISCOUNTED_SUM - FEE_LIQUIDATION;\\n\\n    // Seconds in a year\\n    uint256 constant SECONDS_PER_YEAR = 365 days;\\n    uint256 constant SECONDS_PER_ONE_AND_HALF_YEAR = SECONDS_PER_YEAR * 3 /2;\\n\\n    // 1e18\\n    uint256 constant RAY = 1e27;\\n    uint256 constant WAD = 1e18;\\n\\n    // OPERATIONS\\n    uint8 constant OPERATION_CLOSURE = 1;\\n    uint8 constant OPERATION_REPAY = 2;\\n    uint8 constant OPERATION_LIQUIDATION = 3;\\n\\n    // Decimals for leverage, so x4 = 4*LEVERAGE_DECIMALS for openCreditAccount function\\n    uint8 constant LEVERAGE_DECIMALS = 100;\\n\\n    // Maximum withdraw fee for pool in percentage math format. 100 = 1%\\n    uint8 constant MAX_WITHDRAW_FEE = 100;\\n\\n    uint256 constant CHI_THRESHOLD = 9950;\\n    uint256 constant HF_CHECK_INTERVAL_DEFAULT = 4;\\n\\n    uint256 constant NO_SWAP = 0;\\n    uint256 constant UNISWAP_V2 = 1;\\n    uint256 constant UNISWAP_V3 = 2;\\n    uint256 constant CURVE_V1 = 3;\\n    uint256 constant LP_YEARN = 4;\\n\\n    uint256 constant EXACT_INPUT = 1;\\n    uint256 constant EXACT_OUTPUT = 2;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2021\\npragma solidity ^0.7.4;\\n\\n\\n/// @title Errors library\\nlibrary Errors {\\n    //\\n    // COMMON\\n    //\\n\\n    string public constant ZERO_ADDRESS_IS_NOT_ALLOWED = \\\"Z0\\\";\\n    string public constant NOT_IMPLEMENTED = \\\"NI\\\";\\n    string public constant INCORRECT_PATH_LENGTH = \\\"PL\\\";\\n    string public constant INCORRECT_ARRAY_LENGTH = \\\"CR\\\";\\n    string public constant REGISTERED_CREDIT_ACCOUNT_MANAGERS_ONLY = \\\"CP\\\";\\n    string public constant REGISTERED_POOLS_ONLY = \\\"RP\\\";\\n    string public constant INCORRECT_PARAMETER = \\\"IP\\\";\\n\\n    //\\n    // MATH\\n    //\\n\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = \\\"M1\\\";\\n    string public constant MATH_ADDITION_OVERFLOW = \\\"M2\\\";\\n    string public constant MATH_DIVISION_BY_ZERO = \\\"M3\\\";\\n\\n    //\\n    // POOL\\n    //\\n\\n    string public constant POOL_CONNECTED_CREDIT_MANAGERS_ONLY = \\\"PS0\\\";\\n    string public constant POOL_INCOMPATIBLE_CREDIT_ACCOUNT_MANAGER = \\\"PS1\\\";\\n    string public constant POOL_MORE_THAN_EXPECTED_LIQUIDITY_LIMIT = \\\"PS2\\\";\\n    string public constant POOL_INCORRECT_WITHDRAW_FEE = \\\"PS3\\\";\\n    string public constant POOL_CANT_ADD_CREDIT_MANAGER_TWICE = \\\"PS4\\\";\\n\\n    //\\n    // CREDIT MANAGER\\n    //\\n\\n    string public constant CM_NO_OPEN_ACCOUNT = \\\"CM1\\\";\\n    string\\n        public constant CM_ZERO_ADDRESS_OR_USER_HAVE_ALREADY_OPEN_CREDIT_ACCOUNT =\\n        \\\"CM2\\\";\\n\\n    string public constant CM_INCORRECT_AMOUNT = \\\"CM3\\\";\\n    string public constant CM_CAN_LIQUIDATE_WITH_SUCH_HEALTH_FACTOR = \\\"CM4\\\";\\n    string public constant CM_CAN_UPDATE_WITH_SUCH_HEALTH_FACTOR = \\\"CM5\\\";\\n    string public constant CM_WETH_GATEWAY_ONLY = \\\"CM6\\\";\\n    string public constant CM_INCORRECT_PARAMS = \\\"CM7\\\";\\n    string public constant CM_INCORRECT_FEES = \\\"CM8\\\";\\n    string public constant CM_MAX_LEVERAGE_IS_TOO_HIGH = \\\"CM9\\\";\\n    string public constant CM_CANT_CLOSE_WITH_LOSS = \\\"CMA\\\";\\n    string public constant CM_TARGET_CONTRACT_iS_NOT_ALLOWED = \\\"CMB\\\";\\n    string public constant CM_TRANSFER_FAILED = \\\"CMC\\\";\\n    string public constant CM_INCORRECT_NEW_OWNER = \\\"CME\\\";\\n\\n    //\\n    // ACCOUNT FACTORY\\n    //\\n\\n    string public constant AF_CANT_CLOSE_CREDIT_ACCOUNT_IN_THE_SAME_BLOCK =\\n        \\\"AF1\\\";\\n    string public constant AF_MINING_IS_FINISHED = \\\"AF2\\\";\\n    string public constant AF_CREDIT_ACCOUNT_NOT_IN_STOCK = \\\"AF3\\\";\\n    string public constant AF_EXTERNAL_ACCOUNTS_ARE_FORBIDDEN = \\\"AF4\\\";\\n\\n    //\\n    // ADDRESS PROVIDER\\n    //\\n\\n    string public constant AS_ADDRESS_NOT_FOUND = \\\"AP1\\\";\\n\\n    //\\n    // CONTRACTS REGISTER\\n    //\\n\\n    string public constant CR_POOL_ALREADY_ADDED = \\\"CR1\\\";\\n    string public constant CR_CREDIT_MANAGER_ALREADY_ADDED = \\\"CR2\\\";\\n\\n    //\\n    // CREDIT_FILTER\\n    //\\n\\n    string public constant CF_UNDERLYING_TOKEN_FILTER_CONFLICT = \\\"CF0\\\";\\n    string public constant CF_INCORRECT_LIQUIDATION_THRESHOLD = \\\"CF1\\\";\\n    string public constant CF_TOKEN_IS_NOT_ALLOWED = \\\"CF2\\\";\\n    string public constant CF_CREDIT_MANAGERS_ONLY = \\\"CF3\\\";\\n    string public constant CF_ADAPTERS_ONLY = \\\"CF4\\\";\\n    string public constant CF_OPERATION_LOW_HEALTH_FACTOR = \\\"CF5\\\";\\n    string public constant CF_TOO_MUCH_ALLOWED_TOKENS = \\\"CF6\\\";\\n    string public constant CF_INCORRECT_CHI_THRESHOLD = \\\"CF7\\\";\\n    string public constant CF_INCORRECT_FAST_CHECK = \\\"CF8\\\";\\n    string public constant CF_NON_TOKEN_CONTRACT = \\\"CF9\\\";\\n    string public constant CF_CONTRACT_IS_NOT_IN_ALLOWED_LIST = \\\"CFA\\\";\\n    string public constant CF_FAST_CHECK_NOT_COVERED_COLLATERAL_DROP = \\\"CFB\\\";\\n    string public constant CF_SOME_LIQUIDATION_THRESHOLD_MORE_THAN_NEW_ONE =\\n        \\\"CFC\\\";\\n    string public constant CF_ADAPTER_CAN_BE_USED_ONLY_ONCE = \\\"CFD\\\";\\n    string public constant CF_INCORRECT_PRICEFEED = \\\"CFE\\\";\\n    string public constant CF_TRANSFER_IS_NOT_ALLOWED = \\\"CFF\\\";\\n    string public constant CF_CREDIT_MANAGER_IS_ALREADY_SET = \\\"CFG\\\";\\n\\n    //\\n    // CREDIT ACCOUNT\\n    //\\n\\n    string public constant CA_CONNECTED_CREDIT_MANAGER_ONLY = \\\"CA1\\\";\\n    string public constant CA_FACTORY_ONLY = \\\"CA2\\\";\\n\\n    //\\n    // PRICE ORACLE\\n    //\\n\\n    string public constant PO_PRICE_FEED_DOESNT_EXIST = \\\"PO0\\\";\\n    string public constant PO_TOKENS_WITH_DECIMALS_MORE_18_ISNT_ALLOWED = \\\"PO1\\\";\\n    string public constant PO_AGGREGATOR_DECIMALS_SHOULD_BE_18 = \\\"PO2\\\";\\n\\n    //\\n    // ACL\\n    //\\n\\n    string public constant ACL_CALLER_NOT_PAUSABLE_ADMIN = \\\"ACL1\\\";\\n    string public constant ACL_CALLER_NOT_CONFIGURATOR = \\\"ACL2\\\";\\n\\n    //\\n    // WETH GATEWAY\\n    //\\n\\n    string public constant WG_DESTINATION_IS_NOT_WETH_COMPATIBLE = \\\"WG1\\\";\\n    string public constant WG_RECEIVE_IS_NOT_ALLOWED = \\\"WG2\\\";\\n    string public constant WG_NOT_ENOUGH_FUNDS = \\\"WG3\\\";\\n\\n    //\\n    // LEVERAGED ACTIONS\\n    //\\n\\n    string public constant LA_INCORRECT_VALUE = \\\"LA1\\\";\\n    string public constant LA_HAS_VALUE_WITH_TOKEN_TRANSFER = \\\"LA2\\\";\\n    string public constant LA_UNKNOWN_SWAP_INTERFACE = \\\"LA3\\\";\\n    string public constant LA_UNKNOWN_LP_INTERFACE = \\\"LA4\\\";\\n    string public constant LA_LOWER_THAN_AMOUNT_MIN = \\\"LA5\\\";\\n    string public constant LA_TOKEN_OUT_IS_NOT_COLLATERAL = \\\"LA6\\\";\\n\\n    //\\n    // YEARN PRICE FEED\\n    //\\n    string public constant YPF_PRICE_PER_SHARE_OUT_OF_RANGE = \\\"YP1\\\";\\n    string public constant YPF_INCORRECT_LIMITER_PARAMETERS = \\\"YP2\\\";\\n\\n    //\\n    // TOKEN DISTRIBUTOR\\n    //\\n    string public constant TD_WALLET_IS_ALREADY_CONNECTED_TO_VC = \\\"TD1\\\";\\n    string public constant TD_INCORRECT_WEIGHTS = \\\"TD2\\\";\\n    string public constant TD_NON_ZERO_BALANCE_AFTER_DISTRIBUTION = \\\"TD3\\\";\\n    string public constant TD_CONTRIBUTOR_IS_NOT_REGISTERED = \\\"TD4\\\";\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"U_optimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"R_base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"R_slope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"R_slope2\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_R_base_RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_R_slope1_RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_R_slope2_RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_U_Optimal_WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_U_Optimal_inverted_WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"}],\"name\":\"calcBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getModelParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"U_optimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"R_base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"R_slope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"R_slope2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LinearInterestRateModel","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000001b58000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000002710","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}