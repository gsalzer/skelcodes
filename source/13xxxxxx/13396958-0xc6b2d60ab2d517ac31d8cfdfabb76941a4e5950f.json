{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity =0.7.6;\n\npragma experimental ABIEncoderV2;\n\n\n\n\n\ninterface IAsset {\n}\n\ninterface IVault{\n\n    function joinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        JoinPoolRequest memory request\n    ) external payable;\n\n    struct JoinPoolRequest {\n        IAsset[] assets;\n        uint256[] maxAmountsIn;\n        bytes userData;\n        bool fromInternalBalance;\n    }\n\n    function exitPool(\n        bytes32 poolId,\n        address sender,\n        address payable recipient,\n        ExitPoolRequest memory request\n    ) external;\n\n    struct ExitPoolRequest {\n        IAsset[] assets;\n        uint256[] minAmountsOut;\n        bytes userData;\n        bool toInternalBalance;\n    }\n\n    function getPoolTokens(bytes32 poolId)\n    external\n    view\n    returns (\n        address[] memory tokens,\n        uint256[] memory balances,\n        uint256 lastChangeBlock\n    );\n}\n\n\n\n\n\ncontract BalancerV2Helper {\n    IVault public constant vault = IVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\n    string public constant ADDR_MUST_NOT_BE_ZERO = \"Address to which tokens will be sent to can't be burn address\";\n\n    function _getPoolAddress(bytes32 poolId) internal pure returns (address) {\n        // 12 byte logical shift left to remove the nonce and specialization setting. We don't need to mask,\n        // since the logical shift already sets the upper bits to zero.\n        return address(uint256(poolId) >> (12 * 8));\n    }\n}\n\n\n\n\ninterface IPool {\n    function getPoolId() external view returns (bytes32);\n}\n\n\n\n\n\n\ncontract BalancerView is BalancerV2Helper {\n    function getPoolTokens(address _pool) external view returns (\n        address[] memory tokens,\n        uint256[] memory balances\n    ) {\n        bytes32 poolId = IPool(_pool).getPoolId();\n        (tokens, balances, ) = vault.getPoolTokens(poolId); \n    }\n}\n","ABI":"[{\"inputs\":[],\"name\":\"ADDR_MUST_NOT_BE_ZERO\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BalancerView","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}