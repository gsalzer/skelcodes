{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n contract DefisaverLogger {\r\n    event LogEvent(\r\n        address indexed contractAddress,\r\n        address indexed caller,\r\n        string indexed logName,\r\n        bytes data\r\n    );\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function Log(address _contract, address _caller, string memory _logName, bytes memory _data)\r\n        public\r\n    {\r\n        emit LogEvent(_contract, _caller, _logName, _data);\r\n    }\r\n} contract Discount {\r\n    address public owner;\r\n    mapping(address => CustomServiceFee) public serviceFees;\r\n\r\n    uint256 constant MAX_SERVICE_FEE = 400;\r\n\r\n    struct CustomServiceFee {\r\n        bool active;\r\n        uint256 amount;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function isCustomFeeSet(address _user) public view returns (bool) {\r\n        return serviceFees[_user].active;\r\n    }\r\n\r\n    function getCustomServiceFee(address _user) public view returns (uint256) {\r\n        return serviceFees[_user].amount;\r\n    }\r\n\r\n    function setServiceFee(address _user, uint256 _fee) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\r\n    }\r\n\r\n    function disableServiceFee(address _user) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\r\n    }\r\n} abstract contract PipInterface {\r\n    function read() public virtual returns (bytes32);\r\n} abstract contract Spotter {\r\n    struct Ilk {\r\n        PipInterface pip;\r\n        uint256 mat;\r\n    }\r\n\r\n    mapping (bytes32 => Ilk) public ilks;\r\n\r\n    uint256 public par;\r\n\r\n} abstract contract Jug {\r\n    struct Ilk {\r\n        uint256 duty;\r\n        uint256  rho;\r\n    }\r\n\r\n    mapping (bytes32 => Ilk) public ilks;\r\n\r\n    function drip(bytes32) public virtual returns (uint);\r\n} abstract contract Vat {\r\n\r\n    struct Urn {\r\n        uint256 ink;   // Locked Collateral  [wad]\r\n        uint256 art;   // Normalised Debt    [wad]\r\n    }\r\n\r\n    struct Ilk {\r\n        uint256 Art;   // Total Normalised Debt     [wad]\r\n        uint256 rate;  // Accumulated Rates         [ray]\r\n        uint256 spot;  // Price with Safety Margin  [ray]\r\n        uint256 line;  // Debt Ceiling              [rad]\r\n        uint256 dust;  // Urn Debt Floor            [rad]\r\n    }\r\n\r\n    mapping (bytes32 => mapping (address => Urn )) public urns;\r\n    mapping (bytes32 => Ilk)                       public ilks;\r\n    mapping (bytes32 => mapping (address => uint)) public gem;  // [wad]\r\n\r\n    function can(address, address) virtual public view returns (uint);\r\n    function dai(address) virtual public view returns (uint);\r\n    function frob(bytes32, address, address, address, int, int) virtual public;\r\n    function hope(address) virtual public;\r\n    function move(address, address, uint) virtual public;\r\n    function fork(bytes32, address, address, int, int) virtual public;\r\n} abstract contract Gem {\r\n    function dec() virtual public returns (uint);\r\n    function gem() virtual public returns (Gem);\r\n    function join(address, uint) virtual public payable;\r\n    function exit(address, uint) virtual public;\r\n\r\n    function approve(address, uint) virtual public;\r\n    function transfer(address, uint) virtual public returns (bool);\r\n    function transferFrom(address, address, uint) virtual public returns (bool);\r\n    function deposit() virtual public payable;\r\n    function withdraw(uint) virtual public;\r\n    function allowance(address, address) virtual public returns (uint);\r\n} abstract contract DaiJoin {\r\n    function vat() public virtual returns (Vat);\r\n    function dai() public virtual returns (Gem);\r\n    function join(address, uint) public virtual payable;\r\n    function exit(address, uint) public virtual;\r\n} abstract contract Join {\r\n    bytes32 public ilk;\r\n\r\n    function dec() virtual public view returns (uint);\r\n    function gem() virtual public view returns (Gem);\r\n    function join(address, uint) virtual public payable;\r\n    function exit(address, uint) virtual public;\r\n} contract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n} abstract contract DSAuthority {\r\n    function canCall(address src, address dst, bytes4 sig) public virtual view returns (bool);\r\n} contract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n}\r\n\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n} contract DSNote {\r\n    event LogNote(\r\n        bytes4 indexed sig,\r\n        address indexed guy,\r\n        bytes32 indexed foo,\r\n        bytes32 indexed bar,\r\n        uint256 wad,\r\n        bytes fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n} abstract contract DSProxy is DSAuth, DSNote {\r\n    DSProxyCache public cache; // global cache for contracts\r\n\r\n    constructor(address _cacheAddr) public {\r\n        require(setCache(_cacheAddr));\r\n    }\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    receive() external payable {}\r\n\r\n    // use the proxy to execute calldata _data on contract _code\r\n    // function execute(bytes memory _code, bytes memory _data)\r\n    //     public\r\n    //     payable\r\n    //     virtual\r\n    //     returns (address target, bytes32 response);\r\n\r\n    function execute(address _target, bytes memory _data)\r\n        public\r\n        payable\r\n        virtual\r\n        returns (bytes32 response);\r\n\r\n    //set new cache\r\n    function setCache(address _cacheAddr) public virtual payable returns (bool);\r\n}\r\n\r\n\r\ncontract DSProxyCache {\r\n    mapping(bytes32 => address) cache;\r\n\r\n    function read(bytes memory _code) public view returns (address) {\r\n        bytes32 hash = keccak256(_code);\r\n        return cache[hash];\r\n    }\r\n\r\n    function write(bytes memory _code) public returns (address target) {\r\n        assembly {\r\n            target := create(0, add(_code, 0x20), mload(_code))\r\n            switch iszero(extcodesize(target))\r\n                case 1 {\r\n                    // throw if contract failed to deploy\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        bytes32 hash = keccak256(_code);\r\n        cache[hash] = target;\r\n    }\r\n} abstract contract Manager {\r\n    function last(address) virtual public returns (uint);\r\n    function cdpCan(address, uint, address) virtual public view returns (uint);\r\n    function ilks(uint) virtual public view returns (bytes32);\r\n    function owns(uint) virtual public view returns (address);\r\n    function urns(uint) virtual public view returns (address);\r\n    function vat() virtual public view returns (address);\r\n    function open(bytes32, address) virtual public returns (uint);\r\n    function give(uint, address) virtual public;\r\n    function cdpAllow(uint, address, uint) virtual public;\r\n    function urnAllow(address, uint) virtual public;\r\n    function frob(uint, int, int) virtual public;\r\n    function flux(uint, address, uint) virtual public;\r\n    function move(uint, address, uint) virtual public;\r\n    function exit(address, uint, address, uint) virtual public;\r\n    function quit(uint, address) virtual public;\r\n    function enter(address, uint) virtual public;\r\n    function shift(uint, uint) virtual public;\r\n} /// @title Helper methods for MCDSaverProxy\r\ncontract MCDSaverProxyHelper is DSMath {\r\n\r\n    enum ManagerType { MCD, BPROTOCOL }\r\n\r\n    /// @notice Returns a normalized debt _amount based on the current rate\r\n    /// @param _amount Amount of dai to be normalized\r\n    /// @param _rate Current rate of the stability fee\r\n    /// @param _daiVatBalance Balance od Dai in the Vat for that CDP\r\n    function normalizeDrawAmount(uint _amount, uint _rate, uint _daiVatBalance) internal pure returns (int dart) {\r\n        if (_daiVatBalance < mul(_amount, RAY)) {\r\n            dart = toPositiveInt(sub(mul(_amount, RAY), _daiVatBalance) / _rate);\r\n            dart = mul(uint(dart), _rate) < mul(_amount, RAY) ? dart + 1 : dart;\r\n        }\r\n    }\r\n\r\n    /// @notice Converts a number to Rad percision\r\n    /// @param _wad The input number in wad percision\r\n    function toRad(uint _wad) internal pure returns (uint) {\r\n        return mul(_wad, 10 ** 27);\r\n    }\r\n\r\n    /// @notice Converts a number to 18 decimal percision\r\n    /// @param _joinAddr Join address of the collateral\r\n    /// @param _amount Number to be converted\r\n    function convertTo18(address _joinAddr, uint256 _amount) internal view returns (uint256) {\r\n        return mul(_amount, 10 ** (18 - Join(_joinAddr).dec()));\r\n    }\r\n\r\n    /// @notice Converts a uint to int and checks if positive\r\n    /// @param _x Number to be converted\r\n    function toPositiveInt(uint _x) internal pure returns (int y) {\r\n        y = int(_x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\r\n    /// @notice Gets Dai amount in Vat which can be added to Cdp\r\n    /// @param _vat Address of Vat contract\r\n    /// @param _urn Urn of the Cdp\r\n    /// @param _ilk Ilk of the Cdp\r\n    function normalizePaybackAmount(address _vat, address _urn, bytes32 _ilk) internal view returns (int amount) {\r\n        uint dai = Vat(_vat).dai(_urn);\r\n\r\n        (, uint rate,,,) = Vat(_vat).ilks(_ilk);\r\n        (, uint art) = Vat(_vat).urns(_ilk, _urn);\r\n\r\n        amount = toPositiveInt(dai / rate);\r\n        amount = uint(amount) <= art ? - amount : - toPositiveInt(art);\r\n    }\r\n\r\n    /// @notice Gets the whole debt of the CDP\r\n    /// @param _vat Address of Vat contract\r\n    /// @param _usr Address of the Dai holder\r\n    /// @param _urn Urn of the Cdp\r\n    /// @param _ilk Ilk of the Cdp\r\n    function getAllDebt(address _vat, address _usr, address _urn, bytes32 _ilk) internal view returns (uint daiAmount) {\r\n        (, uint rate,,,) = Vat(_vat).ilks(_ilk);\r\n        (, uint art) = Vat(_vat).urns(_ilk, _urn);\r\n        uint dai = Vat(_vat).dai(_usr);\r\n\r\n        uint rad = sub(mul(art, rate), dai);\r\n        daiAmount = rad / RAY;\r\n\r\n        daiAmount = mul(daiAmount, RAY) < rad ? daiAmount + 1 : daiAmount;\r\n    }\r\n\r\n    /// @notice Gets the token address from the Join contract\r\n    /// @param _joinAddr Address of the Join contract\r\n    function getCollateralAddr(address _joinAddr) internal view returns (address) {\r\n        return address(Join(_joinAddr).gem());\r\n    }\r\n\r\n    /// @notice Checks if the join address is one of the Ether coll. types\r\n    /// @param _joinAddr Join address to check\r\n    function isEthJoinAddr(address _joinAddr) internal view returns (bool) {\r\n        // if it's dai_join_addr don't check gem() it will fail\r\n        if (_joinAddr == 0x9759A6Ac90977b93B58547b4A71c78317f391A28) return false;\r\n\r\n        // if coll is weth it's and eth type coll\r\n        if (address(Join(_joinAddr).gem()) == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /// @notice Gets CDP info (collateral, debt)\r\n    /// @param _manager Manager contract\r\n    /// @param _cdpId Id of the CDP\r\n    /// @param _ilk Ilk of the CDP\r\n    function getCdpInfo(Manager _manager, uint _cdpId, bytes32 _ilk) public view returns (uint, uint) {\r\n        address vat = _manager.vat();\r\n        address urn = _manager.urns(_cdpId);\r\n\r\n        (uint collateral, uint debt) = Vat(vat).urns(_ilk, urn);\r\n        (,uint rate,,,) = Vat(vat).ilks(_ilk);\r\n\r\n        return (collateral, rmul(debt, rate));\r\n    }\r\n\r\n    /// @notice Address that owns the DSProxy that owns the CDP\r\n    /// @param _manager Manager contract\r\n    /// @param _cdpId Id of the CDP\r\n    function getOwner(Manager _manager, uint _cdpId) public view returns (address) {\r\n        DSProxy proxy = DSProxy(uint160(_manager.owns(_cdpId)));\r\n\r\n        return proxy.owner();\r\n    }\r\n\r\n    /// @notice Based on the manager type returns the address\r\n    /// @param _managerType Type of vault manager to use\r\n    function getManagerAddr(ManagerType _managerType) public pure returns (address) {\r\n        if (_managerType == ManagerType.MCD) {\r\n            return 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\r\n        } else if (_managerType == ManagerType.BPROTOCOL) {\r\n            return 0x3f30c2381CD8B917Dd96EB2f1A4F96D91324BBed;\r\n        }\r\n    }\r\n} interface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n} library Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n} library SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n} library SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     */\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n} contract AdminAuth {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    address public owner;\r\n    address public admin;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(admin == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = 0xBc841B0dE0b93205e912CFBBd1D0c160A1ec6F00;\r\n        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\r\n    }\r\n\r\n    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\r\n    /// @param _admin Address of multisig that becomes admin\r\n    function setAdminByOwner(address _admin) public {\r\n        require(msg.sender == owner);\r\n        require(admin == address(0));\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to set new admin\r\n    /// @param _admin Address of multisig that becomes new admin\r\n    function setAdminByAdmin(address _admin) public {\r\n        require(msg.sender == admin);\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to change owner\r\n    /// @param _owner Address of new owner\r\n    function setOwnerByAdmin(address _owner) public {\r\n        require(msg.sender == admin);\r\n\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @notice Destroy the contract\r\n    function kill() public onlyOwner {\r\n        selfdestruct(payable(owner));\r\n    }\r\n\r\n    /// @notice  withdraw stuck funds\r\n    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\r\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            payable(owner).transfer(_amount);\r\n        } else {\r\n            ERC20(_token).safeTransfer(owner, _amount);\r\n        }\r\n    }\r\n} contract BotRegistry is AdminAuth {\r\n\r\n    mapping (address => bool) public botList;\r\n\r\n    constructor() public {\r\n        botList[0x776B4a13093e30B05781F97F6A4565B6aa8BE330] = true;\r\n\r\n        botList[0xAED662abcC4FA3314985E67Ea993CAD064a7F5cF] = true;\r\n        botList[0xa5d330F6619d6bF892A5B87D80272e1607b3e34D] = true;\r\n        botList[0x5feB4DeE5150B589a7f567EA7CADa2759794A90A] = true;\r\n        botList[0x7ca06417c1d6f480d3bB195B80692F95A6B66158] = true;\r\n    }\r\n\r\n    function setBot(address _botAddr, bool _state) public onlyOwner {\r\n        botList[_botAddr] = _state;\r\n    }\r\n\r\n} abstract contract TokenInterface {\r\n\taddress public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    \r\n    function allowance(address, address) public virtual returns (uint256);\r\n\r\n    function balanceOf(address) public virtual returns (uint256);\r\n\r\n    function approve(address, uint256) public virtual;\r\n\r\n    function transfer(address, uint256) public virtual returns (bool);\r\n\r\n    function transferFrom(address, address, uint256) public virtual returns (bool);\r\n\r\n    function deposit() public virtual payable;\r\n\r\n    function withdraw(uint256) public virtual;\r\n} interface ExchangeInterfaceV3 {\r\n    function sell(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external payable returns (uint);\r\n\r\n    function buy(address _srcAddr, address _destAddr, uint _destAmount, bytes memory _additionalData) external payable returns(uint);\r\n\r\n    function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external returns (uint);\r\n\r\n    function getBuyRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external returns (uint);\r\n} contract ZrxAllowlist is AdminAuth {\r\n\r\n    mapping (address => bool) public zrxAllowlist;\r\n    mapping(address => bool) private nonPayableAddrs;\r\n\r\n    constructor() public {\r\n        zrxAllowlist[0x6958F5e95332D93D21af0D7B9Ca85B8212fEE0A5] = true;\r\n        zrxAllowlist[0x61935CbDd02287B511119DDb11Aeb42F1593b7Ef] = true;\r\n        zrxAllowlist[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\r\n        zrxAllowlist[0x080bf510FCbF18b91105470639e9561022937712] = true;\r\n\r\n        nonPayableAddrs[0x080bf510FCbF18b91105470639e9561022937712] = true;\r\n    }\r\n\r\n    function setAllowlistAddr(address _zrxAddr, bool _state) public onlyOwner {\r\n        zrxAllowlist[_zrxAddr] = _state;\r\n    }\r\n\r\n    function isZrxAddr(address _zrxAddr) public view returns (bool) {\r\n        return zrxAllowlist[_zrxAddr];\r\n    }\r\n\r\n    function addNonPayableAddr(address _nonPayableAddr) public onlyOwner {\r\n\t\tnonPayableAddrs[_nonPayableAddr] = true;\r\n\t}\r\n\r\n\tfunction removeNonPayableAddr(address _nonPayableAddr) public onlyOwner {\r\n\t\tnonPayableAddrs[_nonPayableAddr] = false;\r\n\t}\r\n\r\n\tfunction isNonPayableAddr(address _addr) public view returns(bool) {\r\n\t\treturn nonPayableAddrs[_addr];\r\n\t}\r\n\r\n}\r\ncontract DFSExchangeData {\r\n\r\n    // first is empty to keep the legacy order in place\r\n    enum ExchangeType { _, OASIS, KYBER, UNISWAP, ZEROX }\r\n\r\n    enum ActionType { SELL, BUY }\r\n\r\n    struct OffchainData {\r\n        address wrapper;\r\n        address exchangeAddr;\r\n        address allowanceTarget;\r\n        uint256 price;\r\n        uint256 protocolFee;\r\n        bytes callData;\r\n    }\r\n\r\n    struct ExchangeData {\r\n        address srcAddr;\r\n        address destAddr;\r\n        uint256 srcAmount;\r\n        uint256 destAmount;\r\n        uint256 minPrice;\r\n        uint256 dfsFeeDivider; // service fee divider\r\n        address user; // user to check special fee\r\n        address wrapper;\r\n        bytes wrapperData;\r\n        OffchainData offchainData;\r\n    }\r\n\r\n    function packExchangeData(ExchangeData memory _exData) public pure returns(bytes memory) {\r\n        return abi.encode(_exData);\r\n    }\r\n\r\n    function unpackExchangeData(bytes memory _data) public pure returns(ExchangeData memory _exData) {\r\n        _exData = abi.decode(_data, (ExchangeData));\r\n    }\r\n} // SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\nabstract contract IFeeRecipient {\r\n    function getFeeAddr() public view virtual returns (address);\r\n    function changeWalletAddr(address _newWallet) public virtual;\r\n} contract DFSExchangeHelper {\r\n\r\n    string public constant ERR_OFFCHAIN_DATA_INVALID = \"Offchain data invalid\";\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant EXCHANGE_WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    IFeeRecipient public constant _feeRecipient = IFeeRecipient(0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A);\r\n\r\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\r\n    address public constant SAVER_EXCHANGE_REGISTRY = 0x25dd3F51e0C3c3Ff164DDC02A8E4D65Bb9cBB12D;\r\n\r\n    address public constant ZRX_ALLOWLIST_ADDR = 0x4BA1f38427b33B8ab7Bb0490200dAE1F1C36823F;\r\n\r\n\r\n    function getDecimals(address _token) internal view returns (uint256) {\r\n        if (_token == KYBER_ETH_ADDRESS) return 18;\r\n\r\n        return ERC20(_token).decimals();\r\n    }\r\n\r\n    function getBalance(address _tokenAddr) internal view returns (uint balance) {\r\n        if (_tokenAddr == KYBER_ETH_ADDRESS) {\r\n            balance = address(this).balance;\r\n        } else {\r\n            balance = ERC20(_tokenAddr).balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function sendLeftover(address _srcAddr, address _destAddr, address payable _to) internal {\r\n        // send back any leftover ether or tokens\r\n        if (address(this).balance > 0) {\r\n            _to.transfer(address(this).balance);\r\n        }\r\n\r\n        if (getBalance(_srcAddr) > 0) {\r\n            ERC20(_srcAddr).safeTransfer(_to, getBalance(_srcAddr));\r\n        }\r\n\r\n        if (getBalance(_destAddr) > 0) {\r\n            ERC20(_destAddr).safeTransfer(_to, getBalance(_destAddr));\r\n        }\r\n    }\r\n\r\n    /// @notice Takes a feePercentage and sends it to wallet\r\n    /// @param _amount Dai amount of the whole trade\r\n    /// @param _user Address of the user\r\n    /// @param _token Address of the token\r\n    /// @param _dfsFeeDivider Dfs fee divider\r\n    /// @return feeAmount Amount in Dai owner earned on the fee\r\n    function getFee(uint256 _amount, address _user, address _token, uint256 _dfsFeeDivider) internal returns (uint256 feeAmount) {\r\n        if (_dfsFeeDivider != 0 && Discount(DISCOUNT_ADDRESS).isCustomFeeSet(_user)) {\r\n            _dfsFeeDivider = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(_user);\r\n        }\r\n\r\n        if (_dfsFeeDivider == 0) {\r\n            feeAmount = 0;\r\n        } else {\r\n            feeAmount = _amount / _dfsFeeDivider;\r\n\r\n            // fee can't go over 10% of the whole amount\r\n            if (feeAmount > (_amount / 10)) {\r\n                feeAmount = _amount / 10;\r\n            }\r\n\r\n            address walletAddr = _feeRecipient.getFeeAddr();\r\n\r\n            if (_token == KYBER_ETH_ADDRESS) {\r\n                payable(walletAddr).transfer(feeAmount);\r\n            } else {\r\n                ERC20(_token).safeTransfer(walletAddr, feeAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\r\n        require(bs.length >= start + 32, \"slicing out of range\");\r\n\r\n        uint256 x;\r\n        assembly {\r\n            x := mload(add(bs, add(0x20, start)))\r\n        }\r\n\r\n        return x;\r\n    }\r\n\r\n        function writeUint256(bytes memory _b, uint256 _index, uint _input) internal pure {\r\n        if (_b.length < _index + 32) {\r\n            revert(ERR_OFFCHAIN_DATA_INVALID);\r\n        }\r\n\r\n        bytes32 input = bytes32(_input);\r\n\r\n        _index += 32;\r\n\r\n        // Read the bytes32 from array memory\r\n        assembly {\r\n            mstore(add(_b, _index), input)\r\n        }\r\n    }\r\n\r\n    /// @notice Converts Kybers Eth address -> Weth\r\n    /// @param _src Input address\r\n    function ethToWethAddr(address _src) internal pure returns (address) {\r\n        return _src == KYBER_ETH_ADDRESS ? EXCHANGE_WETH_ADDRESS : _src;\r\n    }\r\n} contract SaverExchangeRegistry is AdminAuth {\r\n\r\n\tmapping(address => bool) private wrappers;\r\n\r\n\tconstructor() public {\r\n\t\twrappers[0x880A845A85F843a5c67DB2061623c6Fc3bB4c511] = true;\r\n\t\twrappers[0x4c9B55f2083629A1F7aDa257ae984E03096eCD25] = true;\r\n\t\twrappers[0x42A9237b872368E1bec4Ca8D26A928D7d39d338C] = true;\r\n\t}\r\n\r\n\tfunction addWrapper(address _wrapper) public onlyOwner {\r\n\t\twrappers[_wrapper] = true;\r\n\t}\r\n\r\n\tfunction removeWrapper(address _wrapper) public onlyOwner {\r\n\t\twrappers[_wrapper] = false;\r\n\t}\r\n\r\n\tfunction isWrapper(address _wrapper) public view returns(bool) {\r\n\t\treturn wrappers[_wrapper];\r\n\t}\r\n}  \r\n\r\n\r\n\r\nabstract contract OffchainWrapperInterface is DFSExchangeData {\r\n    function takeOrder(\r\n        ExchangeData memory _exData,\r\n        ActionType _type\r\n    ) virtual public payable returns (bool success, uint256);\r\n}  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DFSExchangeCore is DFSExchangeHelper, DSMath, DFSExchangeData {\r\n\r\n    string public constant ERR_SLIPPAGE_HIT = \"Slippage hit\";\r\n    string public constant ERR_DEST_AMOUNT_MISSING = \"Dest amount missing\";\r\n    string public constant ERR_WRAPPER_INVALID = \"Wrapper invalid\";\r\n    string public constant ERR_NOT_ZEROX_EXCHANGE = \"Zerox exchange invalid\";\r\n\r\n    /// @notice Internal method that preforms a sell on 0x/on-chain\r\n    /// @dev Usefull for other DFS contract to integrate for exchanging\r\n    /// @param exData Exchange data struct\r\n    /// @return (address, uint) Address of the wrapper used and destAmount\r\n    function _sell(ExchangeData memory exData) internal returns (address, uint) {\r\n\r\n        address wrapper;\r\n        uint swapedTokens;\r\n        bool success;\r\n\r\n        // if selling eth, convert to weth\r\n        if (exData.srcAddr == KYBER_ETH_ADDRESS) {\r\n            exData.srcAddr = ethToWethAddr(exData.srcAddr);\r\n            TokenInterface(EXCHANGE_WETH_ADDRESS).deposit{value: exData.srcAmount}();\r\n        }\r\n\r\n        exData.srcAmount -= getFee(exData.srcAmount, exData.user, exData.srcAddr, exData.dfsFeeDivider);\r\n\r\n        // Try 0x first and then fallback on specific wrapper\r\n        if (exData.offchainData.price > 0) {\r\n            (success, swapedTokens) = takeOrder(exData, ActionType.SELL);\r\n\r\n            if (success) {\r\n                wrapper = exData.offchainData.exchangeAddr;\r\n            }\r\n        }\r\n\r\n        // fallback to desired wrapper if 0x failed\r\n        if (!success) {\r\n            swapedTokens = saverSwap(exData, ActionType.SELL);\r\n            wrapper = exData.wrapper;\r\n        }\r\n\r\n        // if anything is left in weth, pull it to user as eth\r\n        if (getBalance(EXCHANGE_WETH_ADDRESS) > 0) {\r\n            TokenInterface(EXCHANGE_WETH_ADDRESS).withdraw(\r\n                TokenInterface(EXCHANGE_WETH_ADDRESS).balanceOf(address(this))\r\n            );\r\n        }\r\n\r\n        if (exData.destAddr == EXCHANGE_WETH_ADDRESS) {\r\n            require(getBalance(KYBER_ETH_ADDRESS) >= wmul(exData.minPrice, exData.srcAmount), ERR_SLIPPAGE_HIT);\r\n        } else {\r\n            require(getBalance(exData.destAddr) >= wmul(exData.minPrice, exData.srcAmount), ERR_SLIPPAGE_HIT);\r\n        }\r\n\r\n        return (wrapper, swapedTokens);\r\n    }\r\n\r\n    /// @notice Internal method that preforms a buy on 0x/on-chain\r\n    /// @dev Usefull for other DFS contract to integrate for exchanging\r\n    /// @param exData Exchange data struct\r\n    /// @return (address, uint) Address of the wrapper used and srcAmount\r\n    function _buy(ExchangeData memory exData) internal returns (address, uint) {\r\n\r\n        address wrapper;\r\n        uint swapedTokens;\r\n        bool success;\r\n\r\n        require(exData.destAmount != 0, ERR_DEST_AMOUNT_MISSING);\r\n\r\n        exData.srcAmount -= getFee(exData.srcAmount, exData.user, exData.srcAddr, exData.dfsFeeDivider);\r\n\r\n        // if selling eth, convert to weth\r\n        if (exData.srcAddr == KYBER_ETH_ADDRESS) {\r\n            exData.srcAddr = ethToWethAddr(exData.srcAddr);\r\n            TokenInterface(EXCHANGE_WETH_ADDRESS).deposit{value: exData.srcAmount}();\r\n        }\r\n\r\n        if (exData.offchainData.price > 0) {\r\n            (success, swapedTokens) = takeOrder(exData, ActionType.BUY);\r\n\r\n            if (success) {\r\n                wrapper = exData.offchainData.exchangeAddr;\r\n            }\r\n        }\r\n\r\n        // fallback to desired wrapper if 0x failed\r\n        if (!success) {\r\n            swapedTokens = saverSwap(exData, ActionType.BUY);\r\n            wrapper = exData.wrapper;\r\n        }\r\n\r\n        // if anything is left in weth, pull it to user as eth\r\n        if (getBalance(EXCHANGE_WETH_ADDRESS) > 0) {\r\n            TokenInterface(EXCHANGE_WETH_ADDRESS).withdraw(\r\n                TokenInterface(EXCHANGE_WETH_ADDRESS).balanceOf(address(this))\r\n            );\r\n        }\r\n\r\n        if (exData.destAddr == EXCHANGE_WETH_ADDRESS) {\r\n            require(getBalance(KYBER_ETH_ADDRESS) >= exData.destAmount, ERR_SLIPPAGE_HIT);\r\n        } else {\r\n            require(getBalance(exData.destAddr) >= exData.destAmount, ERR_SLIPPAGE_HIT);\r\n        }\r\n\r\n        return (wrapper, getBalance(exData.destAddr));\r\n    }\r\n\r\n    /// @notice Takes order from 0x and returns bool indicating if it is successful\r\n    /// @param _exData Exchange data\r\n    function takeOrder(\r\n        ExchangeData memory _exData,\r\n        ActionType _type\r\n    ) private returns (bool success, uint256) {\r\n        if (!ZrxAllowlist(ZRX_ALLOWLIST_ADDR).isZrxAddr(_exData.offchainData.exchangeAddr)) {\r\n            return (false, 0);\r\n        }\r\n\r\n        if (!SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.offchainData.wrapper)) {\r\n            return (false, 0);\r\n        }\r\n\r\n        // send src amount\r\n        ERC20(_exData.srcAddr).safeTransfer(_exData.offchainData.wrapper, _exData.srcAmount);\r\n\r\n        return OffchainWrapperInterface(_exData.offchainData.wrapper).takeOrder{value: _exData.offchainData.protocolFee}(_exData, _type);\r\n    }\r\n\r\n    /// @notice Calls wraper contract for exchage to preform an on-chain swap\r\n    /// @param _exData Exchange data struct\r\n    /// @param _type Type of action SELL|BUY\r\n    /// @return swapedTokens For Sell that the destAmount, for Buy thats the srcAmount\r\n    function saverSwap(ExchangeData memory _exData, ActionType _type) internal returns (uint swapedTokens) {\r\n        require(SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.wrapper), ERR_WRAPPER_INVALID);\r\n\r\n        ERC20(_exData.srcAddr).safeTransfer(_exData.wrapper, _exData.srcAmount);\r\n\r\n        if (_type == ActionType.SELL) {\r\n            swapedTokens = ExchangeInterfaceV3(_exData.wrapper).\r\n                    sell(_exData.srcAddr, _exData.destAddr, _exData.srcAmount, _exData.wrapperData);\r\n        } else {\r\n            swapedTokens = ExchangeInterfaceV3(_exData.wrapper).\r\n                    buy(_exData.srcAddr, _exData.destAddr, _exData.destAmount, _exData.wrapperData);\r\n        }\r\n    }\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    receive() external virtual payable {}\r\n}  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Implements Boost and Repay for MCD CDPs\r\ncontract MCDSaverProxy is DFSExchangeCore, MCDSaverProxyHelper {\r\n    uint256 public constant MANUAL_SERVICE_FEE = 400; // 0.25% Fee\r\n    uint256 public constant AUTOMATIC_SERVICE_FEE = 333; // 0.3% Fee\r\n\r\n    bytes32 public constant ETH_ILK =\r\n        0x4554482d41000000000000000000000000000000000000000000000000000000;\r\n\r\n    address public constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address public constant SPOTTER_ADDRESS = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\r\n    address public constant DAI_JOIN_ADDRESS = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\r\n    address public constant JUG_ADDRESS = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n\r\n    address public constant BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B;\r\n\r\n    Vat public constant vat = Vat(VAT_ADDRESS);\r\n    DaiJoin public constant daiJoin = DaiJoin(DAI_JOIN_ADDRESS);\r\n    Spotter public constant spotter = Spotter(SPOTTER_ADDRESS);\r\n\r\n    DefisaverLogger public constant logger =\r\n        DefisaverLogger(0x5c55B921f590a89C1Ebe84dF170E655a82b62126);\r\n\r\n    /// @notice Repay - draws collateral, converts to Dai and repays the debt\r\n    /// @dev Must be called by the DSProxy contract that owns the CDP\r\n    function repay(\r\n        ExchangeData memory _exchangeData,\r\n        uint256 _cdpId,\r\n        uint256 _gasCost,\r\n        address _joinAddr,\r\n        ManagerType _managerType\r\n    ) public payable {\r\n        address managerAddr = getManagerAddr(_managerType);\r\n\r\n        address user = getOwner(Manager(managerAddr), _cdpId);\r\n        bytes32 ilk = Manager(managerAddr).ilks(_cdpId);\r\n\r\n        drawCollateral(managerAddr, _cdpId, _joinAddr, _exchangeData.srcAmount);\r\n\r\n        _exchangeData.user = user;\r\n        _exchangeData.dfsFeeDivider = isAutomation() ? AUTOMATIC_SERVICE_FEE : MANUAL_SERVICE_FEE;\r\n        (, uint256 daiAmount) = _sell(_exchangeData);\r\n\r\n        daiAmount = sub(daiAmount, takeFee(_gasCost, daiAmount));\r\n\r\n        paybackDebt(managerAddr, _cdpId, ilk, daiAmount, user);\r\n\r\n        // if there is some eth left (0x fee), return it to user\r\n        if (address(this).balance > 0) {\r\n            tx.origin.transfer(address(this).balance);\r\n        }\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"MCDRepay\",\r\n            abi.encode(_cdpId, user, _exchangeData.srcAmount, daiAmount)\r\n        );\r\n    }\r\n\r\n    /// @notice Boost - draws Dai, converts to collateral and adds to CDP\r\n    /// @dev Must be called by the DSProxy contract that owns the CDP\r\n    function boost(\r\n        ExchangeData memory _exchangeData,\r\n        uint256 _cdpId,\r\n        uint256 _gasCost,\r\n        address _joinAddr,\r\n        ManagerType _managerType\r\n    ) public payable {\r\n        address managerAddr = getManagerAddr(_managerType);\r\n\r\n        address user = getOwner(Manager(managerAddr), _cdpId);\r\n        bytes32 ilk = Manager(managerAddr).ilks(_cdpId);\r\n\r\n        uint256 daiDrawn = drawDai(managerAddr, _cdpId, ilk, _exchangeData.srcAmount);\r\n\r\n        _exchangeData.user = user;\r\n        _exchangeData.dfsFeeDivider = isAutomation() ? AUTOMATIC_SERVICE_FEE : MANUAL_SERVICE_FEE;\r\n        _exchangeData.srcAmount = sub(daiDrawn, takeFee(_gasCost, daiDrawn));\r\n        (, uint256 swapedColl) = _sell(_exchangeData);\r\n\r\n        addCollateral(managerAddr, _cdpId, _joinAddr, swapedColl);\r\n\r\n        // if there is some eth left (0x fee), return it to the caller\r\n        if (address(this).balance > 0) {\r\n            tx.origin.transfer(address(this).balance);\r\n        }\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"MCDBoost\",\r\n            abi.encode(_cdpId, user, _exchangeData.srcAmount, swapedColl)\r\n        );\r\n    }\r\n\r\n    /// @notice Draws Dai from the CDP\r\n    /// @dev If _daiAmount is bigger than max available we'll draw max\r\n    /// @param _managerAddr Address of the CDP Manager\r\n    /// @param _cdpId Id of the CDP\r\n    /// @param _ilk Ilk of the CDP\r\n    /// @param _daiAmount Amount of Dai to draw\r\n    function drawDai(\r\n        address _managerAddr,\r\n        uint256 _cdpId,\r\n        bytes32 _ilk,\r\n        uint256 _daiAmount\r\n    ) internal returns (uint256) {\r\n        uint256 rate = Jug(JUG_ADDRESS).drip(_ilk);\r\n        uint256 daiVatBalance = vat.dai(Manager(_managerAddr).urns(_cdpId));\r\n\r\n        uint256 maxAmount = getMaxDebt(_managerAddr, _cdpId, _ilk);\r\n\r\n        if (_daiAmount >= maxAmount) {\r\n            _daiAmount = sub(maxAmount, 1);\r\n        }\r\n\r\n        Manager(_managerAddr).frob(\r\n            _cdpId,\r\n            int256(0),\r\n            normalizeDrawAmount(_daiAmount, rate, daiVatBalance)\r\n        );\r\n        Manager(_managerAddr).move(_cdpId, address(this), toRad(_daiAmount));\r\n\r\n        if (vat.can(address(this), address(DAI_JOIN_ADDRESS)) == 0) {\r\n            vat.hope(DAI_JOIN_ADDRESS);\r\n        }\r\n\r\n        DaiJoin(DAI_JOIN_ADDRESS).exit(address(this), _daiAmount);\r\n\r\n        return _daiAmount;\r\n    }\r\n\r\n    /// @notice Adds collateral to the CDP\r\n    /// @param _managerAddr Address of the CDP Manager\r\n    /// @param _cdpId Id of the CDP\r\n    /// @param _joinAddr Address of the join contract for the CDP collateral\r\n    /// @param _amount Amount of collateral to add\r\n    function addCollateral(\r\n        address _managerAddr,\r\n        uint256 _cdpId,\r\n        address _joinAddr,\r\n        uint256 _amount\r\n    ) internal {\r\n        int256 convertAmount = 0;\r\n\r\n        if (isEthJoinAddr(_joinAddr)) {\r\n            Join(_joinAddr).gem().deposit{value: _amount}();\r\n            convertAmount = toPositiveInt(_amount);\r\n        } else {\r\n            convertAmount = toPositiveInt(convertTo18(_joinAddr, _amount));\r\n        }\r\n\r\n        ERC20(address(Join(_joinAddr).gem())).safeApprove(_joinAddr, _amount);\r\n\r\n        Join(_joinAddr).join(address(this), _amount);\r\n\r\n        vat.frob(\r\n            Manager(_managerAddr).ilks(_cdpId),\r\n            Manager(_managerAddr).urns(_cdpId),\r\n            address(this),\r\n            address(this),\r\n            convertAmount,\r\n            0\r\n        );\r\n    }\r\n\r\n    /// @notice Draws collateral and returns it to DSProxy\r\n    /// @param _managerAddr Address of the CDP Manager\r\n    /// @dev If _amount is bigger than max available we'll draw max\r\n    /// @param _cdpId Id of the CDP\r\n    /// @param _joinAddr Address of the join contract for the CDP collateral\r\n    /// @param _amount Amount of collateral to draw\r\n    function drawCollateral(\r\n        address _managerAddr,\r\n        uint256 _cdpId,\r\n        address _joinAddr,\r\n        uint256 _amount\r\n    ) internal returns (uint256) {\r\n        uint256 frobAmount = _amount;\r\n\r\n        uint256 tokenDecimal = Join(_joinAddr).dec();\r\n\r\n        require(tokenDecimal <= 18, \"Token decimals too big\");\r\n\r\n        if (tokenDecimal != 18) {\r\n            frobAmount = _amount * (10**(18 - tokenDecimal));\r\n        }\r\n\r\n        Manager(_managerAddr).frob(_cdpId, -toPositiveInt(frobAmount), 0);\r\n        Manager(_managerAddr).flux(_cdpId, address(this), frobAmount);\r\n\r\n        Join(_joinAddr).exit(address(this), _amount);\r\n\r\n        if (isEthJoinAddr(_joinAddr)) {\r\n            Join(_joinAddr).gem().withdraw(_amount); // Weth -> Eth\r\n        }\r\n\r\n        return _amount;\r\n    }\r\n\r\n    /// @notice Paybacks Dai debt\r\n    /// @param _managerAddr Address of the CDP Manager\r\n    /// @dev If the _daiAmount is bigger than the whole debt, returns extra Dai\r\n    /// @param _cdpId Id of the CDP\r\n    /// @param _ilk Ilk of the CDP\r\n    /// @param _daiAmount Amount of Dai to payback\r\n    /// @param _owner Address that owns the DSProxy that owns the CDP\r\n    function paybackDebt(\r\n        address _managerAddr,\r\n        uint256 _cdpId,\r\n        bytes32 _ilk,\r\n        uint256 _daiAmount,\r\n        address _owner\r\n    ) internal {\r\n        address urn = Manager(_managerAddr).urns(_cdpId);\r\n\r\n        uint256 wholeDebt = getAllDebt(VAT_ADDRESS, urn, urn, _ilk);\r\n\r\n        if (_daiAmount > wholeDebt) {\r\n            ERC20(DAI_ADDRESS).transfer(_owner, sub(_daiAmount, wholeDebt));\r\n            _daiAmount = wholeDebt;\r\n        }\r\n\r\n        if (ERC20(DAI_ADDRESS).allowance(address(this), DAI_JOIN_ADDRESS) == 0) {\r\n            ERC20(DAI_ADDRESS).approve(DAI_JOIN_ADDRESS, uint256(-1));\r\n        }\r\n\r\n        daiJoin.join(urn, _daiAmount);\r\n\r\n        Manager(_managerAddr).frob(_cdpId, 0, normalizePaybackAmount(VAT_ADDRESS, urn, _ilk));\r\n    }\r\n\r\n    /// @notice Gets the maximum amount of collateral available to draw\r\n    /// @param _managerAddr Address of the CDP Manager\r\n    /// @param _cdpId Id of the CDP\r\n    /// @param _ilk Ilk of the CDP\r\n    /// @param _joinAddr Joind address of collateral\r\n    /// @dev Substracts 10 wei to aviod rounding error later on\r\n    function getMaxCollateral(\r\n        address _managerAddr,\r\n        uint256 _cdpId,\r\n        bytes32 _ilk,\r\n        address _joinAddr\r\n    ) public view returns (uint256) {\r\n        uint256 price = getPrice(_ilk);\r\n\r\n        (uint256 collateral, uint256 debt) = getCdpInfo(Manager(_managerAddr), _cdpId, _ilk);\r\n\r\n        (, uint256 mat) = Spotter(SPOTTER_ADDRESS).ilks(_ilk);\r\n\r\n        uint256 maxCollateral = sub(collateral, (div(mul(mat, debt), price)));\r\n\r\n        uint256 tokenDecimal = Join(_joinAddr).dec();\r\n\r\n        require(tokenDecimal <= 18, \"Token decimals too big\");\r\n\r\n        uint256 normalizeMaxCollateral = maxCollateral / (10**(18 - tokenDecimal));\r\n\r\n        // take one percent due to precision issues\r\n        return (normalizeMaxCollateral * 99) / 100;\r\n    }\r\n\r\n    /// @notice Gets the maximum amount of debt available to generate\r\n    /// @param _managerAddr Address of the CDP Manager\r\n    /// @param _cdpId Id of the CDP\r\n    /// @param _ilk Ilk of the CDP\r\n    /// @dev Substracts 10 wei to aviod rounding error later on\r\n    function getMaxDebt(\r\n        address _managerAddr,\r\n        uint256 _cdpId,\r\n        bytes32 _ilk\r\n    ) public view virtual returns (uint256) {\r\n        uint256 price = getPrice(_ilk);\r\n\r\n        (, uint256 mat) = spotter.ilks(_ilk);\r\n        (uint256 collateral, uint256 debt) = getCdpInfo(Manager(_managerAddr), _cdpId, _ilk);\r\n\r\n        return sub(sub(div(mul(collateral, price), mat), debt), 10);\r\n    }\r\n\r\n    /// @notice Gets a price of the asset\r\n    /// @param _ilk Ilk of the CDP\r\n    function getPrice(bytes32 _ilk) public view returns (uint256) {\r\n        (, uint256 mat) = spotter.ilks(_ilk);\r\n        (, , uint256 spot, , ) = vat.ilks(_ilk);\r\n\r\n        return rmul(rmul(spot, spotter.par()), mat);\r\n    }\r\n\r\n    function isAutomation() internal view returns (bool) {\r\n        return BotRegistry(BOT_REGISTRY_ADDRESS).botList(tx.origin);\r\n    }\r\n\r\n    function takeFee(uint256 _gasCost, uint256 _amount) internal returns (uint256) {\r\n        if (_gasCost > 0) {\r\n            uint256 ethDaiPrice = getPrice(ETH_ILK);\r\n            uint256 feeAmount = rmul(_gasCost, ethDaiPrice);\r\n\r\n            if (feeAmount > _amount / 5) {\r\n                feeAmount = _amount / 5;\r\n            }\r\n\r\n            address walletAddr = _feeRecipient.getFeeAddr();\r\n\r\n            ERC20(DAI_ADDRESS).safeTransfer(walletAddr, feeAmount);\r\n\r\n            return feeAmount;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n} interface IFlashLoanReceiver {\r\n    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params) external;\r\n}\r\n\r\nabstract contract ILendingPoolAddressesProvider {\r\n\r\n    function getLendingPool() public view virtual returns (address);\r\n    function setLendingPoolImpl(address _pool) public virtual;\r\n\r\n    function getLendingPoolCore() public virtual view returns (address payable);\r\n    function setLendingPoolCoreImpl(address _lendingPoolCore) public virtual;\r\n\r\n    function getLendingPoolConfigurator() public virtual view returns (address);\r\n    function setLendingPoolConfiguratorImpl(address _configurator) public virtual;\r\n\r\n    function getLendingPoolDataProvider() public virtual view returns (address);\r\n    function setLendingPoolDataProviderImpl(address _provider) public virtual;\r\n\r\n    function getLendingPoolParametersProvider() public virtual view returns (address);\r\n    function setLendingPoolParametersProviderImpl(address _parametersProvider) public virtual;\r\n\r\n    function getTokenDistributor() public virtual view returns (address);\r\n    function setTokenDistributor(address _tokenDistributor) public virtual;\r\n\r\n\r\n    function getFeeProvider() public virtual view returns (address);\r\n    function setFeeProviderImpl(address _feeProvider) public virtual;\r\n\r\n    function getLendingPoolLiquidationManager() public virtual view returns (address);\r\n    function setLendingPoolLiquidationManager(address _manager) public virtual;\r\n\r\n    function getLendingPoolManager() public virtual view returns (address);\r\n    function setLendingPoolManager(address _lendingPoolManager) public virtual;\r\n\r\n    function getPriceOracle() public virtual view returns (address);\r\n    function setPriceOracle(address _priceOracle) public virtual;\r\n\r\n    function getLendingRateOracle() public view virtual returns (address);\r\n    function setLendingRateOracle(address _lendingRateOracle) public virtual;\r\n}\r\n\r\nlibrary EthAddressLib {\r\n\r\n    function ethAddress() internal pure returns(address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n}\r\n\r\nabstract contract FlashLoanReceiverBase is IFlashLoanReceiver {\r\n\r\n    using SafeERC20 for ERC20;\r\n    using SafeMath for uint256;\r\n\r\n    ILendingPoolAddressesProvider public addressesProvider;\r\n\r\n    constructor(ILendingPoolAddressesProvider _provider) public {\r\n        addressesProvider = _provider;\r\n    }\r\n\r\n    receive () external virtual payable {}\r\n\r\n    function transferFundsBackToPoolInternal(address _reserve, uint256 _amount) internal {\r\n\r\n        address payable core = addressesProvider.getLendingPoolCore();\r\n\r\n        transferInternal(core,_reserve, _amount);\r\n    }\r\n\r\n    function transferInternal(address payable _destination, address _reserve, uint256  _amount) internal {\r\n        if(_reserve == EthAddressLib.ethAddress()) {\r\n            //solium-disable-next-line\r\n            _destination.call{value: _amount}(\"\");\r\n            return;\r\n        }\r\n\r\n        ERC20(_reserve).safeTransfer(_destination, _amount);\r\n\r\n\r\n    }\r\n\r\n    function getBalanceInternal(address _target, address _reserve) internal view returns(uint256) {\r\n        if(_reserve == EthAddressLib.ethAddress()) {\r\n\r\n            return _target.balance;\r\n        }\r\n\r\n        return ERC20(_reserve).balanceOf(_target);\r\n\r\n    }\r\n}  \r\n\r\n\r\n\r\n\r\n\r\n/// @title Receiver of Aave flash loan and performs the fl repay/boost logic\r\ncontract MCDSaverFlashLoan is MCDSaverProxy, AdminAuth, FlashLoanReceiverBase {\r\n    ILendingPoolAddressesProvider public LENDING_POOL_ADDRESS_PROVIDER =\r\n        ILendingPoolAddressesProvider(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8);\r\n\r\n    constructor() public FlashLoanReceiverBase(LENDING_POOL_ADDRESS_PROVIDER) {}\r\n\r\n    struct SaverData {\r\n        uint256 cdpId;\r\n        uint256 gasCost;\r\n        uint256 loanAmount;\r\n        uint256 fee;\r\n        address joinAddr;\r\n        ManagerType managerType;\r\n    }\r\n\r\n    function executeOperation(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        uint256 _fee,\r\n        bytes calldata _params\r\n    ) external override {\r\n        (\r\n            bytes memory exDataBytes,\r\n            uint256 cdpId,\r\n            uint256 gasCost,\r\n            address joinAddr,\r\n            bool isRepay,\r\n            uint8 managerType\r\n        ) = abi.decode(_params, (bytes, uint256, uint256, address, bool, uint8));\r\n\r\n        ExchangeData memory exchangeData = unpackExchangeData(exDataBytes);\r\n\r\n        SaverData memory saverData = SaverData({\r\n            cdpId: cdpId,\r\n            gasCost: gasCost,\r\n            loanAmount: _amount,\r\n            fee: _fee,\r\n            joinAddr: joinAddr,\r\n            managerType: ManagerType(managerType)\r\n        });\r\n\r\n        if (isRepay) {\r\n            repayWithLoan(exchangeData, saverData);\r\n        } else {\r\n            boostWithLoan(exchangeData, saverData);\r\n        }\r\n\r\n        transferFundsBackToPoolInternal(_reserve, _amount.add(_fee));\r\n\r\n        // if there is some eth left (0x fee), return it to user\r\n        if (address(this).balance > 0) {\r\n            tx.origin.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function boostWithLoan(ExchangeData memory _exchangeData, SaverData memory _saverData)\r\n        internal\r\n    {\r\n        address managerAddr = getManagerAddr(_saverData.managerType);\r\n        address user = getOwner(Manager(managerAddr), _saverData.cdpId);\r\n\r\n        // Draw users Dai\r\n        uint256 maxDebt = getMaxDebt(\r\n            managerAddr,\r\n            _saverData.cdpId,\r\n            Manager(managerAddr).ilks(_saverData.cdpId)\r\n        );\r\n        uint256 daiDrawn = drawDai(\r\n            managerAddr,\r\n            _saverData.cdpId,\r\n            Manager(managerAddr).ilks(_saverData.cdpId),\r\n            maxDebt\r\n        );\r\n\r\n        // Swap\r\n        _exchangeData.srcAmount = sub(\r\n            add(daiDrawn, _saverData.loanAmount),\r\n            takeFee(_saverData.gasCost, add(daiDrawn, _saverData.loanAmount))\r\n        );\r\n\r\n        _exchangeData.user = user;\r\n        _exchangeData.dfsFeeDivider = isAutomation() ? AUTOMATIC_SERVICE_FEE : MANUAL_SERVICE_FEE;\r\n        (, uint256 swapedAmount) = _sell(_exchangeData);\r\n\r\n        // Return collateral\r\n        addCollateral(managerAddr, _saverData.cdpId, _saverData.joinAddr, swapedAmount);\r\n\r\n        // Draw Dai to repay the flash loan\r\n        drawDai(\r\n            managerAddr,\r\n            _saverData.cdpId,\r\n            Manager(managerAddr).ilks(_saverData.cdpId),\r\n            add(_saverData.loanAmount, _saverData.fee)\r\n        );\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"MCDFlashBoost\",\r\n            abi.encode(_saverData.cdpId, user, _exchangeData.srcAmount, swapedAmount)\r\n        );\r\n    }\r\n\r\n    function repayWithLoan(ExchangeData memory _exchangeData, SaverData memory _saverData)\r\n        internal\r\n    {\r\n        address managerAddr = getManagerAddr(_saverData.managerType);\r\n\r\n        address user = getOwner(Manager(managerAddr), _saverData.cdpId);\r\n        bytes32 ilk = Manager(managerAddr).ilks(_saverData.cdpId);\r\n\r\n        // Draw collateral\r\n        uint256 maxColl = getMaxCollateral(managerAddr, _saverData.cdpId, ilk, _saverData.joinAddr);\r\n        uint256 collDrawn = drawCollateral(\r\n            managerAddr,\r\n            _saverData.cdpId,\r\n            _saverData.joinAddr,\r\n            maxColl\r\n        );\r\n\r\n        // Swap\r\n        _exchangeData.srcAmount = add(_saverData.loanAmount, collDrawn);\r\n        _exchangeData.user = user;\r\n        _exchangeData.dfsFeeDivider = isAutomation() ? AUTOMATIC_SERVICE_FEE : MANUAL_SERVICE_FEE;\r\n        (, uint256 paybackAmount) = _sell(_exchangeData);\r\n\r\n        paybackAmount = sub(paybackAmount, takeFee(_saverData.gasCost, paybackAmount));\r\n\r\n        // Payback the debt\r\n        paybackDebt(managerAddr, _saverData.cdpId, ilk, paybackAmount, user);\r\n\r\n        // Draw collateral to repay the flash loan\r\n        drawCollateral(\r\n            managerAddr,\r\n            _saverData.cdpId,\r\n            _saverData.joinAddr,\r\n            add(_saverData.loanAmount, _saverData.fee)\r\n        );\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"MCDFlashRepay\",\r\n            abi.encode(_saverData.cdpId, user, _exchangeData.srcAmount, paybackAmount)\r\n        );\r\n    }\r\n\r\n    receive() external payable override(FlashLoanReceiverBase, DFSExchangeCore) {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AUTOMATIC_SERVICE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOT_REGISTRY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_JOIN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISCOUNT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_DEST_AMOUNT_MISSING\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_NOT_ZEROX_EXCHANGE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_OFFCHAIN_DATA_INVALID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_SLIPPAGE_HIT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_WRAPPER_INVALID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ILK\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"JUG_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KYBER_ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING_POOL_ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANUAL_SERVICE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAVER_EXCHANGE_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPOTTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZRX_ALLOWLIST_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeRecipient\",\"outputs\":[{\"internalType\":\"contract IFeeRecipient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressesProvider\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exchangeData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_joinAddr\",\"type\":\"address\"},{\"internalType\":\"enum MCDSaverProxyHelper.ManagerType\",\"name\":\"_managerType\",\"type\":\"uint8\"}],\"name\":\"boost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"internalType\":\"contract DaiJoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Manager\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getCdpInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MCDSaverProxyHelper.ManagerType\",\"name\":\"_managerType\",\"type\":\"uint8\"}],\"name\":\"getManagerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_joinAddr\",\"type\":\"address\"}],\"name\":\"getMaxCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getMaxDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Manager\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logger\",\"outputs\":[{\"internalType\":\"contract DefisaverLogger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exData\",\"type\":\"tuple\"}],\"name\":\"packExchangeData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exchangeData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_joinAddr\",\"type\":\"address\"},{\"internalType\":\"enum MCDSaverProxyHelper.ManagerType\",\"name\":\"_managerType\",\"type\":\"uint8\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwnerByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spotter\",\"outputs\":[{\"internalType\":\"contract Spotter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"unpackExchangeData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exData\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract Vat\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MCDSaverFlashLoan","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1a2cf479e908fd9855096af3a224a6ccc54d175af895b69b7b272aaa1b3c93c3"}]}