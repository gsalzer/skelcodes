{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\"},\"ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"IERC721.sol\\\";\\r\\nimport \\\"IERC721Receiver.sol\\\";\\r\\nimport \\\"IERC721Metadata.sol\\\";\\r\\nimport \\\"Address.sol\\\";\\r\\nimport \\\"Context.sol\\\";\\r\\nimport \\\"Strings.sol\\\";\\r\\nimport \\\"ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\r\\n * {ERC721Enumerable}.\\r\\n */\\r\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to owner address\\r\\n    mapping(uint256 =\\u003e address) private _owners;\\r\\n\\r\\n    // Mapping owner address to token count\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 =\\u003e address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        address owner = _owners[tokenId];\\r\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length \\u003e 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overriden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _owners[tokenId] != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[owner] -= 1;\\r\\n        delete _owners[tokenId];\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[from] -= 1;\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver.onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n                } else {\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``\\u0027s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``\\u0027s `tokenId` will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\"},\"ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"ERC721.sol\\\";\\r\\nimport \\\"IERC721Enumerable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\r\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\r\\n * account.\\r\\n */\\r\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\r\\n    // Mapping from owner to list of owned token IDs\\r\\n    mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) private _ownedTokens;\\r\\n\\r\\n    // Mapping from token ID to index of the owner tokens list\\r\\n    mapping(uint256 =\\u003e uint256) private _ownedTokensIndex;\\r\\n\\r\\n    // Array with all token ids, used for enumeration\\r\\n    uint256[] private _allTokens;\\r\\n\\r\\n    // Mapping from token id to position in the allTokens array\\r\\n    mapping(uint256 =\\u003e uint256) private _allTokensIndex;\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\r\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index \\u003c ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\r\\n        return _ownedTokens[owner][index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _allTokens.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index \\u003c ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\r\\n        return _allTokens[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``\\u0027s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``\\u0027s `tokenId` will be burned.\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual override {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        if (from == address(0)) {\\r\\n            _addTokenToAllTokensEnumeration(tokenId);\\r\\n        } else if (from != to) {\\r\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\r\\n        }\\r\\n        if (to == address(0)) {\\r\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\r\\n        } else if (to != from) {\\r\\n            _addTokenToOwnerEnumeration(to, tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to add a token to this extension\\u0027s ownership-tracking data structures.\\r\\n     * @param to address representing the new owner of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\r\\n     */\\r\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\r\\n        uint256 length = ERC721.balanceOf(to);\\r\\n        _ownedTokens[to][length] = tokenId;\\r\\n        _ownedTokensIndex[tokenId] = length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to add a token to this extension\\u0027s token tracking data structures.\\r\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\r\\n     */\\r\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\r\\n        _allTokensIndex[tokenId] = _allTokens.length;\\r\\n        _allTokens.push(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to remove a token from this extension\\u0027s ownership-tracking data structures. Note that\\r\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\r\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\r\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\r\\n     */\\r\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\r\\n        // To prevent a gap in from\\u0027s tokens array, we store the last token in the index of the token to delete, and\\r\\n        // then delete the last slot (swap and pop).\\r\\n\\r\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\r\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\r\\n\\r\\n        // When the token to delete is the last token, the swap operation is unnecessary\\r\\n        if (tokenIndex != lastTokenIndex) {\\r\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\r\\n\\r\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\r\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token\\u0027s index\\r\\n        }\\r\\n\\r\\n        // This also deletes the contents at the last position of the array\\r\\n        delete _ownedTokensIndex[tokenId];\\r\\n        delete _ownedTokens[from][lastTokenIndex];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to remove a token from this extension\\u0027s token tracking data structures.\\r\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\r\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\r\\n     */\\r\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\r\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\r\\n        // then delete the last slot (swap and pop).\\r\\n\\r\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\r\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\r\\n\\r\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\r\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\r\\n        // an \\u0027if\\u0027 statement (like in _removeTokenFromOwnerEnumeration)\\r\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\r\\n\\r\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\r\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token\\u0027s index\\r\\n\\r\\n        // This also deletes the contents at the last position of the array\\r\\n        delete _allTokensIndex[tokenId];\\r\\n        _allTokens.pop();\\r\\n    }\\r\\n}\\r\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\"},\"IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Enumerable is IERC721 {\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens stored by the contract.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\r\\n     * Use along with {balanceOf} to enumerate all of ``owner``\\u0027s tokens.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\r\\n     * Use along with {totalSupply} to enumerate all tokens.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\r\\n}\\r\\n\"},\"IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Metadata is IERC721 {\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\"},\"IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\"},\"LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface LinkTokenInterface {\\r\\n\\r\\n  function allowance(\\r\\n    address owner,\\r\\n    address spender\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256 remaining\\r\\n    );\\r\\n\\r\\n  function approve(\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      bool success\\r\\n    );\\r\\n\\r\\n  function balanceOf(\\r\\n    address owner\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256 balance\\r\\n    );\\r\\n\\r\\n  function decimals()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint8 decimalPlaces\\r\\n    );\\r\\n\\r\\n  function decreaseApproval(\\r\\n    address spender,\\r\\n    uint256 addedValue\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      bool success\\r\\n    );\\r\\n\\r\\n  function increaseApproval(\\r\\n    address spender,\\r\\n    uint256 subtractedValue\\r\\n  ) external;\\r\\n\\r\\n  function name()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      string memory tokenName\\r\\n    );\\r\\n\\r\\n  function symbol()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      string memory tokenSymbol\\r\\n    );\\r\\n\\r\\n  function totalSupply()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256 totalTokensIssued\\r\\n    );\\r\\n\\r\\n  function transfer(\\r\\n    address to,\\r\\n    uint256 value\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      bool success\\r\\n    );\\r\\n\\r\\n  function transferAndCall(\\r\\n    address to,\\r\\n    uint256 value,\\r\\n    bytes calldata data\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      bool success\\r\\n    );\\r\\n\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      bool success\\r\\n    );\\r\\n\\r\\n}\\r\\n\"},\"lotto_mainnet_paid.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"ERC721Enumerable.sol\\\";\\r\\nimport \\\"Ownable.sol\\\";\\r\\nimport \\\"VRFConsumerBase.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\nabstract contract ReentrancyGuard {\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    modifier nonReentrant() {\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n        _status = _ENTERED;\\r\\n        _;\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract RandomEDGE is ERC721Enumerable, Ownable, VRFConsumerBase, ReentrancyGuard {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Constants\\r\\n    // ------------------------------------------------------------------------\\r\\n    uint256 public constant MAX_SUPPLY = 5000;\\r\\n    uint256 public constant PRICE = 0.03 ether;\\r\\n    uint256 internal constant WINNER_CUT = 70;\\r\\n    string internal constant IPFS_UNKNOWN = \\\"Qmbzf9grQq4rN1ZmZvrrjyWg3wC8Hx3BqUv16kpWsPpVLM\\\"; // ***\\r\\n    string internal constant IPFS_WINNER = \\\"QmXyasrdptv9zzGU1iK6uNSth4RpRAxn4r8ga9GK4R68nY\\\"; // ***\\r\\n    string internal constant IPFS_LOSER = \\\"QmZEDgZ8ujyu6gfvU1gHsTfZN2MnKUe57j5qXQ2ePBWKjA\\\"; // ***\\r\\n    string internal constant TOKEN_NAME = \\\"RandomEDGE\\\";\\r\\n    string internal constant TOKEN_SYMBOL = \\\"RE\\\";\\r\\n\\r\\n    // State\\r\\n    // ------------------------------------------------------------------------\\r\\n    bool public isFinished;\\r\\n    bool public isRngRequested;\\r\\n    address public winnerAddress;\\r\\n    uint256 public contributed;\\r\\n    uint256 public startTime;\\r\\n    \\r\\n    // Chainlink\\r\\n    // ------------------------------------------------------------------------\\r\\n    bytes32 internal constant KEY_HASH = 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445; // MAINNET\\r\\n    uint256 internal constant VRF_FEE = 2 * 10 ** 18; // MAINNET\\r\\n    address public constant VRF_COORDINATOR = 0xf0d54349aDdcf704F77AE15b96510dEA15cb7952; // MAINNET\\r\\n    address public constant LINK_TOKEN = 0x514910771AF9Ca656af840dff83E8264EcF986CA; // MAINNET\\r\\n    bytes32 public requestId;\\r\\n    uint256 public randomResult;\\r\\n\\r\\n    // Events\\r\\n    // ------------------------------------------------------------------------\\r\\n    event BaseTokenURIChanged(string baseTokenURI);\\r\\n    event Received(address, uint256);\\r\\n\\r\\n    // Constructor\\r\\n    // ------------------------------------------------------------------------\\r\\n    constructor() VRFConsumerBase(VRF_COORDINATOR, LINK_TOKEN) ERC721(TOKEN_NAME, TOKEN_SYMBOL) {\\r\\n        startTime = block.timestamp + 7 days;\\r\\n    }\\r\\n\\r\\n    // Randomness/state advancing functions\\r\\n    // ------------------------------------------------------------------------\\r\\n    function requestResult() external onlyOwner {\\r\\n        require(totalSupply() \\u003e 0, \\\"NO_TICKETS\\\");\\r\\n        require(!isRngRequested, \\\"ALREADY_REQUESTED\\\");\\r\\n        require(LINK.balanceOf(address(this)) \\u003e= VRF_FEE, \\\"NEED_LINK\\\");\\r\\n        requestId = requestRandomness(KEY_HASH, VRF_FEE);\\r\\n        isRngRequested = true;\\r\\n    }\\r\\n\\r\\n    function fulfillRandomness(bytes32 _requestId, uint256 randomness) internal override {\\r\\n        require(requestId == _requestId, \\\"INVALID_REQUEST\\\");\\r\\n        randomResult = (randomness % totalSupply()) + 1; // 1 to totalSupply() inclusive\\r\\n    }\\r\\n    \\r\\n    function finalize() external onlyOwner {\\r\\n        winnerAddress = ownerOf(randomResult);\\r\\n        require(winnerAddress != address(0), \\\"NO_WINNER\\\");\\r\\n        require(!isFinished, \\\"PAID_OUT\\\");\\r\\n        isFinished = true;\\r\\n        winnerAddress.call{value: winnerCut()}(\\\"\\\");\\r\\n    }\\r\\n    \\r\\n    function winnerCut() public view returns (uint256) {\\r\\n        return contributed * WINNER_CUT / 100;\\r\\n    }\\r\\n    \\r\\n    function isStarted() public view returns (bool) {\\r\\n        return startTime \\u003c block.timestamp;\\r\\n    }\\r\\n    \\r\\n    function setStartTime(uint256 _startTime) external onlyOwner {\\r\\n        require(_startTime \\u003c startTime, \\\"REDUCE_ONLY\\\");\\r\\n        startTime = _startTime;\\r\\n    }\\r\\n\\r\\n    // Mint functions\\r\\n    // ------------------------------------------------------------------------\\r\\n    function mint(uint256 quantity) external payable nonReentrant {\\r\\n        require(isStarted(), \\\"NOT_YET_STARTED\\\");\\r\\n        require(totalSupply() \\u003c MAX_SUPPLY, \\\"SOLD_OUT\\\");\\r\\n        require(!isRngRequested, \\\"LATE_CUTOFF\\\");\\r\\n        require(quantity \\u003e 0, \\\"ZERO_QUANTITY\\\");\\r\\n        require(totalSupply() + quantity \\u003c= MAX_SUPPLY, \\\"EXCEEDS_MAX_SUPPLY\\\");\\r\\n        require(msg.value \\u003e= PRICE * quantity, \\\"INVALID_ETH_AMOUNT\\\");\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c quantity; i++) {\\r\\n            _safeMint(msg.sender, totalSupply() + 1);\\r\\n        }\\r\\n        contributed = contributed + msg.value;\\r\\n    }\\r\\n\\r\\n    // URI Functions\\r\\n    // ------------------------------------------------------------------------\\r\\n    function tokenURI(uint256 tokenId) public view override(ERC721) returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"Cannot query non-existent token\\\");\\r\\n        string memory outStr = string(abi.encodePacked(\\\"data:application/json;utf8,\\\", \\u0027{\\\"name\\\":\\\"\\u0027, TOKEN_NAME, \\u0027 #\\u0027, tokenId.toString(), \\u0027\\\",\\\"image\\\": \\\"ipfs://\\u0027));\\r\\n        string memory attributes = string(abi.encodePacked(\\u0027\\\", \\\"attributes\\\":[{\\\"trait_type\\\": \\\"Winner\\\",\\\"value\\\":\\\"\\u0027));\\r\\n        string memory endJson = \\u0027\\\"}]}\\u0027;\\r\\n        if (randomResult != 0) {\\r\\n            if (randomResult == tokenId) {\\r\\n                outStr = string(abi.encodePacked(outStr, IPFS_WINNER, attributes, \\\"Yes\\\", endJson));\\r\\n            } else {\\r\\n                outStr = string(abi.encodePacked(outStr, IPFS_LOSER, attributes, \\\"No\\\", endJson));\\r\\n            }\\r\\n        } else {\\r\\n            outStr = string(abi.encodePacked(outStr, IPFS_UNKNOWN, attributes, \\\"???\\\", endJson));\\r\\n        }\\r\\n        return outStr;\\r\\n    }\\r\\n\\r\\n    // Receive \\u0026 Withdrawal functions\\r\\n    // ------------------------------------------------------------------------\\r\\n    receive() external payable {\\r\\n        if (!isFinished) {\\r\\n            contributed = contributed + msg.value;\\r\\n        }\\r\\n        emit Received(msg.sender, msg.value);\\r\\n    }\\r\\n    \\r\\n    function teamWithdraw() external onlyOwner {\\r\\n        require(isFinished);\\r\\n        uint256 _teamCut = address(this).balance;\\r\\n        uint256 _aAmount = _teamCut * 31 / 100;\\r\\n        address(0xec90215396Fd13d3e847901580f4085CA097526c).call{value: _aAmount}(\\\"\\\");\\r\\n        address(0xa00810DEe91919FEb293B0af23b19a208488789e).call{value: _aAmount}(\\\"\\\");\\r\\n        address(0xa368B9d05E45D8D39347c25c52De7BEf4d12960c).call{value: _aAmount}(\\\"\\\");\\r\\n        address(0x36Ca2318F22AB822AEf100Ff003B0CaC62cB3813).call{value: address(this).balance}(\\\"\\\");\\r\\n    }\\r\\n    \\r\\n    function withdrawErc20(IERC20 token) external onlyOwner {\\r\\n        require(token.transfer(msg.sender, token.balanceOf(address(this))), \\\"Transfer failed\\\");\\r\\n    }\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp \\u003e\\u003e= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\r\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\r\\n            value \\u003e\\u003e= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\"},\"VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"LinkTokenInterface.sol\\\";\\r\\n\\r\\nimport \\\"VRFRequestIDBase.sol\\\";\\r\\n\\r\\n/** ****************************************************************************\\r\\n * @notice Interface for contracts using VRF randomness\\r\\n * *****************************************************************************\\r\\n * @dev PURPOSE\\r\\n *\\r\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\r\\n * @dev to Vera the verifier in such a way that Vera can be sure he\\u0027s not\\r\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\r\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\r\\n * @dev Reggie, he gives back a value which is computed completely\\r\\n * @dev deterministically from the seed and the secret key.\\r\\n *\\r\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\r\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\r\\n * @dev the output is indistinguishable to her from a uniform random sample\\r\\n * @dev from the output space.\\r\\n *\\r\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\r\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\r\\n * @dev simple access to a verifiable source of randomness.\\r\\n * *****************************************************************************\\r\\n * @dev USAGE\\r\\n *\\r\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\r\\n * @dev initialize VRFConsumerBase\\u0027s attributes in their constructor as\\r\\n * @dev shown:\\r\\n *\\r\\n * @dev   contract VRFConsumer {\\r\\n * @dev     constuctor(\\u003cother arguments\\u003e, address _vrfCoordinator, address _link)\\r\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\r\\n * @dev         \\u003cinitialization with other arguments goes here\\u003e\\r\\n * @dev       }\\r\\n * @dev   }\\r\\n *\\r\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\r\\n * @dev committed to (let\\u0027s call it keyHash), and have told you the minimum LINK\\r\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\r\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\r\\n * @dev want to generate randomness from.\\r\\n *\\r\\n * @dev Once the VRFCoordinator has received and validated the oracle\\u0027s response\\r\\n * @dev to your request, it will call your contract\\u0027s fulfillRandomness method.\\r\\n *\\r\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\r\\n * @dev generated from your seed.\\r\\n *\\r\\n * @dev The requestId argument is generated from the keyHash and the seed by\\r\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\r\\n * @dev requests open, you can use the requestId to track which seed is\\r\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\r\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\r\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\r\\n *\\r\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\r\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\r\\n * @dev next section.)\\r\\n *\\r\\n * *****************************************************************************\\r\\n * @dev SECURITY CONSIDERATIONS\\r\\n *\\r\\n * @dev A method with the ability to call your fulfillRandomness method directly\\r\\n * @dev could spoof a VRF response with any random value, so it\\u0027s critical that\\r\\n * @dev it cannot be directly called by anything other than this base contract\\r\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\r\\n *\\r\\n * @dev For your users to trust that your contract\\u0027s random behavior is free\\r\\n * @dev from malicious interference, it\\u0027s best if you can write it so that all\\r\\n * @dev behaviors implied by a VRF response are executed *during* your\\r\\n * @dev fulfillRandomness method. If your contract must store the response (or\\r\\n * @dev anything derived from it) and use it later, you must ensure that any\\r\\n * @dev user-significant behavior which depends on that stored value cannot be\\r\\n * @dev manipulated by a subsequent VRF request.\\r\\n *\\r\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\r\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\r\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\r\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\r\\n * @dev be used to manipulate your contract\\u0027s user-significant behavior.\\r\\n *\\r\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\r\\n * @dev block in which the request is made, user-provided seeds have no impact\\r\\n * @dev on its economic security properties. They are only included for API\\r\\n * @dev compatability with previous versions of this contract.\\r\\n *\\r\\n * @dev Since the block hash of the block which contains the requestRandomness\\r\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\r\\n * @dev miner could, in principle, fork the blockchain to evict the block\\r\\n * @dev containing the request, forcing the request to be included in a\\r\\n * @dev different block with a different hash, and therefore a different input\\r\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\r\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\r\\n * @dev until it calls responds to a request.\\r\\n */\\r\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\r\\n\\r\\n  /**\\r\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\r\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\r\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\r\\n   * @notice method.\\r\\n   *\\r\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\r\\n   * @dev signature, and will call it once it has verified the proof\\r\\n   * @dev associated with the randomness. (It is triggered via a call to\\r\\n   * @dev rawFulfillRandomness, below.)\\r\\n   *\\r\\n   * @param requestId The Id initially returned by requestRandomness\\r\\n   * @param randomness the VRF output\\r\\n   */\\r\\n  function fulfillRandomness(\\r\\n    bytes32 requestId,\\r\\n    uint256 randomness\\r\\n  )\\r\\n    internal\\r\\n    virtual;\\r\\n\\r\\n  /**\\r\\n   * @dev In order to keep backwards compatibility we have kept the user\\r\\n   * seed field around. We remove the use of it because given that the blockhash\\r\\n   * enters later, it overrides whatever randomness the used seed provides.\\r\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\r\\n   * we have removed it from usage and can now provide a simpler API.\\r\\n   */\\r\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\r\\n\\r\\n  /**\\r\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\r\\n   *\\r\\n   * @dev The fulfillRandomness method receives the output, once it\\u0027s provided\\r\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\r\\n   *\\r\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\r\\n   * @dev the _fee must exceed the fee specified during registration of the\\r\\n   * @dev _keyHash.\\r\\n   *\\r\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\r\\n   * @dev compatibility with older versions. It can\\u0027t *hurt* to mix in some of\\r\\n   * @dev your own randomness, here, but it\\u0027s not necessary because the VRF\\r\\n   * @dev oracle will mix the hash of the block containing your request into the\\r\\n   * @dev VRF seed it ultimately uses.\\r\\n   *\\r\\n   * @param _keyHash ID of public key against which randomness is generated\\r\\n   * @param _fee The amount of LINK to send with the request\\r\\n   *\\r\\n   * @return requestId unique ID for this request\\r\\n   *\\r\\n   * @dev The returned requestId can be used to distinguish responses to\\r\\n   * @dev concurrent requests. It is passed as the first argument to\\r\\n   * @dev fulfillRandomness.\\r\\n   */\\r\\n  function requestRandomness(\\r\\n    bytes32 _keyHash,\\r\\n    uint256 _fee\\r\\n  )\\r\\n    internal\\r\\n    returns (\\r\\n      bytes32 requestId\\r\\n    )\\r\\n  {\\r\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\r\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\r\\n    // the hash of the block containing this request to obtain the seed/input\\r\\n    // which is finally passed to the VRF cryptographic machinery.\\r\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\r\\n    // nonces[_keyHash] must stay in sync with\\r\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\r\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\r\\n    // This provides protection against the user repeating their input seed,\\r\\n    // which would result in a predictable/duplicate output, if multiple such\\r\\n    // requests appeared in the same block.\\r\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\r\\n    return makeRequestId(_keyHash, vRFSeed);\\r\\n  }\\r\\n\\r\\n  LinkTokenInterface immutable internal LINK;\\r\\n  address immutable private vrfCoordinator;\\r\\n\\r\\n  // Nonces for each VRF key from which randomness has been requested.\\r\\n  //\\r\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\r\\n  mapping(bytes32 /* keyHash */ =\\u003e uint256 /* nonce */) private nonces;\\r\\n\\r\\n  /**\\r\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\r\\n   * @param _link address of LINK token contract\\r\\n   *\\r\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\r\\n   */\\r\\n  constructor(\\r\\n    address _vrfCoordinator,\\r\\n    address _link\\r\\n  ) {\\r\\n    vrfCoordinator = _vrfCoordinator;\\r\\n    LINK = LinkTokenInterface(_link);\\r\\n  }\\r\\n\\r\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\r\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\r\\n  // the origin of the call\\r\\n  function rawFulfillRandomness(\\r\\n    bytes32 requestId,\\r\\n    uint256 randomness\\r\\n  )\\r\\n    external\\r\\n  {\\r\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\r\\n    fulfillRandomness(requestId, randomness);\\r\\n  }\\r\\n}\\r\\n\"},\"VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract VRFRequestIDBase {\\r\\n\\r\\n  /**\\r\\n   * @notice returns the seed which is actually input to the VRF coordinator\\r\\n   *\\r\\n   * @dev To prevent repetition of VRF output due to repetition of the\\r\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\r\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\r\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\r\\n   * @dev the final seed, but the nonce does protect against repetition in\\r\\n   * @dev requests which are included in a single block.\\r\\n   *\\r\\n   * @param _userSeed VRF seed input provided by user\\r\\n   * @param _requester Address of the requesting contract\\r\\n   * @param _nonce User-specific nonce at the time of the request\\r\\n   */\\r\\n  function makeVRFInputSeed(\\r\\n    bytes32 _keyHash,\\r\\n    uint256 _userSeed,\\r\\n    address _requester,\\r\\n    uint256 _nonce\\r\\n  )\\r\\n    internal\\r\\n    pure\\r\\n    returns (\\r\\n      uint256\\r\\n    )\\r\\n  {\\r\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the id for this request\\r\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\r\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\r\\n   * @return The id for this request\\r\\n   *\\r\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\r\\n   * @dev contract, but the one generated by makeVRFInputSeed\\r\\n   */\\r\\n  function makeRequestId(\\r\\n    bytes32 _keyHash,\\r\\n    uint256 _vRFInputSeed\\r\\n  )\\r\\n    internal\\r\\n    pure\\r\\n    returns (\\r\\n      bytes32\\r\\n    )\\r\\n  {\\r\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\r\\n  }\\r\\n}\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"}],\"name\":\"BaseTokenURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LINK_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VRF_COORDINATOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRngRequested\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerCut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"RandomEDGE","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"25","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3cd0a1fc955e58c182166d52d9d636c6b3276ca73d6618d505c782bd17f40f57"}]}