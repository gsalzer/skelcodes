{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\r\\n *\\r\\n * These functions can be used to verify that a message was signed by the holder\\r\\n * of the private keys of a given address.\\r\\n */\\r\\nlibrary ECDSA {\\r\\n    enum RecoverError {\\r\\n        NoError,\\r\\n        InvalidSignature,\\r\\n        InvalidSignatureLength,\\r\\n        InvalidSignatureS,\\r\\n        InvalidSignatureV\\r\\n    }\\r\\n\\r\\n    function _throwError(RecoverError error) private pure {\\r\\n        if (error == RecoverError.NoError) {\\r\\n            return; // no error: do nothing\\r\\n        } else if (error == RecoverError.InvalidSignature) {\\r\\n            revert(\\\"ECDSA: invalid signature\\\");\\r\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\r\\n            revert(\\\"ECDSA: invalid signature length\\\");\\r\\n        } else if (error == RecoverError.InvalidSignatureS) {\\r\\n            revert(\\\"ECDSA: invalid signature \\u0027s\\u0027 value\\\");\\r\\n        } else if (error == RecoverError.InvalidSignatureV) {\\r\\n            revert(\\\"ECDSA: invalid signature \\u0027v\\u0027 value\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\r\\n     * `signature` or error string. This address can then be used for verification purposes.\\r\\n     *\\r\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\r\\n     * this function rejects them by requiring the `s` value to be in the lower\\r\\n     * half order, and the `v` value to be either 27 or 28.\\r\\n     *\\r\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\r\\n     * verification to be secure: it is possible to craft signatures that\\r\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\r\\n     * this is by receiving a hash of the original message (which may otherwise\\r\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\r\\n     *\\r\\n     * Documentation for signature generation:\\r\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\r\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\r\\n        // Check the signature length\\r\\n        // - case 65: r,s,v signature (standard)\\r\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\r\\n        if (signature.length == 65) {\\r\\n            bytes32 r;\\r\\n            bytes32 s;\\r\\n            uint8 v;\\r\\n            // ecrecover takes the signature parameters, and the only way to get them\\r\\n            // currently is to use assembly.\\r\\n            assembly {\\r\\n                r := mload(add(signature, 0x20))\\r\\n                s := mload(add(signature, 0x40))\\r\\n                v := byte(0, mload(add(signature, 0x60)))\\r\\n            }\\r\\n            return tryRecover(hash, v, r, s);\\r\\n        } else if (signature.length == 64) {\\r\\n            bytes32 r;\\r\\n            bytes32 vs;\\r\\n            // ecrecover takes the signature parameters, and the only way to get them\\r\\n            // currently is to use assembly.\\r\\n            assembly {\\r\\n                r := mload(add(signature, 0x20))\\r\\n                vs := mload(add(signature, 0x40))\\r\\n            }\\r\\n            return tryRecover(hash, r, vs);\\r\\n        } else {\\r\\n            return (address(0), RecoverError.InvalidSignatureLength);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\r\\n     * `signature`. This address can then be used for verification purposes.\\r\\n     *\\r\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\r\\n     * this function rejects them by requiring the `s` value to be in the lower\\r\\n     * half order, and the `v` value to be either 27 or 28.\\r\\n     *\\r\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\r\\n     * verification to be secure: it is possible to craft signatures that\\r\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\r\\n     * this is by receiving a hash of the original message (which may otherwise\\r\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\r\\n     */\\r\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\r\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\r\\n        _throwError(error);\\r\\n        return recovered;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\r\\n     *\\r\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function tryRecover(\\r\\n        bytes32 hash,\\r\\n        bytes32 r,\\r\\n        bytes32 vs\\r\\n    ) internal pure returns (address, RecoverError) {\\r\\n        bytes32 s;\\r\\n        uint8 v;\\r\\n        assembly {\\r\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\r\\n            v := add(shr(255, vs), 27)\\r\\n        }\\r\\n        return tryRecover(hash, v, r, s);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\r\\n     *\\r\\n     * _Available since v4.2._\\r\\n     */\\r\\n    function recover(\\r\\n        bytes32 hash,\\r\\n        bytes32 r,\\r\\n        bytes32 vs\\r\\n    ) internal pure returns (address) {\\r\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\r\\n        _throwError(error);\\r\\n        return recovered;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\r\\n     * `r` and `s` signature fields separately.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function tryRecover(\\r\\n        bytes32 hash,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal pure returns (address, RecoverError) {\\r\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\r\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\r\\n        // the valid range for s in (301): 0 \\u003c s \\u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\r\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\r\\n        //\\r\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\r\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\r\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\r\\n        // these malleable signatures as well.\\r\\n        if (uint256(s) \\u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\r\\n            return (address(0), RecoverError.InvalidSignatureS);\\r\\n        }\\r\\n        if (v != 27 \\u0026\\u0026 v != 28) {\\r\\n            return (address(0), RecoverError.InvalidSignatureV);\\r\\n        }\\r\\n\\r\\n        // If the signature is valid (and not malleable), return the signer address\\r\\n        address signer = ecrecover(hash, v, r, s);\\r\\n        if (signer == address(0)) {\\r\\n            return (address(0), RecoverError.InvalidSignature);\\r\\n        }\\r\\n\\r\\n        return (signer, RecoverError.NoError);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\r\\n     * `r` and `s` signature fields separately.\\r\\n     */\\r\\n    function recover(\\r\\n        bytes32 hash,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal pure returns (address) {\\r\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\r\\n        _throwError(error);\\r\\n        return recovered;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\r\\n     * produces hash corresponding to the one signed with the\\r\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\r\\n     * JSON-RPC method as part of EIP-191.\\r\\n     *\\r\\n     * See {recover}.\\r\\n     */\\r\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\r\\n        // 32 is the length in bytes of hash,\\r\\n        // enforced by the type signature above\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\r\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\r\\n     * to the one signed with the\\r\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\r\\n     * JSON-RPC method as part of EIP-712.\\r\\n     *\\r\\n     * See {recover}.\\r\\n     */\\r\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\r\\n    }\\r\\n}\"},\"ERC721.sol\":{\"content\":\"/*\\r\\n@HungryBunz Dev flattened version of ERC721 with unneccessary crap removed\\r\\n*/\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./Address.sol\\\";\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\r\\n * {ERC721Enumerable}.\\r\\n * Openzepplen implementation pared down to reflect unused components.\\r\\n */\\r\\ncontract ERC721 is ERC165, IERC721 {\\r\\n    using Address for address;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to owner address\\r\\n    mapping(uint256 =\\u003e address) private _owners;\\r\\n\\r\\n    // Mapping owner address to token count\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 =\\u003e address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    function initERC721(string memory name_, string memory symbol_) internal {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        address owner = _owners[tokenId];\\r\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        require(operator != msg.sender, \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[msg.sender][operator] = approved;\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _owners[tokenId] != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        //_balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        //_balances[owner] -= 1;\\r\\n        delete _owners[tokenId];\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        //_balances[from] -= 1;\\r\\n        //_balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver.onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n                } else {\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n}\"},\"HungryBunz.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\n// HungryBunz Implementation V1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./PaymentSplitter.sol\\\";\\r\\nimport \\\"./ERC721.sol\\\";\\r\\nimport \\\"./ECDSA.sol\\\";\\r\\nimport \\\"./Strings.sol\\\";\\r\\nimport \\\"./Initializable.sol\\\";\\r\\n\\r\\ncontract OwnableDelegateProxy { }\\r\\n\\r\\ncontract ProxyRegistry {\\r\\n    mapping(address =\\u003e OwnableDelegateProxy) public proxies;\\r\\n}\\r\\n\\r\\ninterface ISnax {\\r\\n    function computeMultiplier(address requester, bytes16 targetStats, uint16[] memory team) external view returns (uint256);\\r\\n    function feed(bytes16 stats, uint256 wholeBurn) external view returns (bytes16);\\r\\n}\\r\\n\\r\\ninterface IItem {\\r\\n    function applyProperties(bytes32 properties, uint16 item) external view returns (bytes32);\\r\\n}\\r\\n\\r\\ninterface nom {\\r\\n    function burn(address account, uint256 amount) external;\\r\\n    function unstake(uint16[] memory tokenIds, address targetAccount) external;\\r\\n}\\r\\n\\r\\ninterface IMetadataGen {\\r\\n    function generateStats(address requester, uint16 newTokenId, uint32 password) external view returns (bytes16);\\r\\n    function generateAttributes(address requester, uint16 newTokenId, uint32 password) external view returns (bytes16);\\r\\n}\\r\\n\\r\\ninterface IMetadataRenderer {\\r\\n    function renderMetadata(uint16 tokenId, bytes16 atts, bytes16 stats) external view returns (string memory);\\r\\n}\\r\\n\\r\\ninterface IEvolve {\\r\\n    function evolve(uint8 next1of1, uint16 burntId, address owner, bytes32 t1, bytes32 t2) external view returns(bytes32);\\r\\n}\\r\\n\\r\\ncontract HungryBunz is Initializable, PaymentSplitter, Ownable, ERC721 {\\r\\n    //******************************************************\\r\\n    //CRITICAL CONTRACT PARAMETERS\\r\\n    //******************************************************\\r\\n    using ECDSA for bytes32;\\r\\n    using Strings for uint256;\\r\\n    \\r\\n    bool _saleStarted;\\r\\n    bool _saleEnd;\\r\\n    bool _metadataRevealed;\\r\\n    bool _transferPaused;\\r\\n    bool _bypassMintAuth;\\r\\n    uint8 _season; //Defines rewards season\\r\\n    uint8 _1of1Index; //Next available 1 of 1\\r\\n    uint16 _totalSupply;\\r\\n    uint16 _maxSupply;\\r\\n    uint256 _maxPerWallet;\\r\\n    uint256 _baseMintPrice;\\r\\n    uint256 _nameTagPrice;\\r\\n    //Address rather than interface because this is used as an address\\r\\n    //for sender checks more often than used as interface.\\r\\n    address _nomContractAddress;\\r\\n    //Address rather than interface because this is used as an address\\r\\n    //for sender checks more often than used as interface.\\r\\n    address _xLayerGateway;\\r\\n    address _openSea;\\r\\n    address _signerAddress; //Public address for mint auth signature\\r\\n    \\r\\n    IItem items;\\r\\n    ISnax snax;\\r\\n    IMetadataRenderer renderer;\\r\\n    IMetadataGen generator;\\r\\n    IEvolve _evolver;\\r\\n    ProxyRegistry _osProxies;\\r\\n    \\r\\n    //******************************************************\\r\\n    //GAMEPLAY MECHANICS\\r\\n    //******************************************************\\r\\n    uint8 _maxRank; //Maximum rank setting to allow additional evolutions over time...\\r\\n    mapping(uint8 =\\u003e mapping(uint8 =\\u003e uint16)) _evolveThiccness; //Required thiccness total to evolve by current rank\\r\\n    mapping(uint8 =\\u003e uint8) _1of1Allotted; //Allocated 1 of 1 pieces per season\\r\\n    mapping(uint8 =\\u003e bool) _1of1sOnThisLayer; //Permit 1/1s on this layer and season.\\r\\n    mapping(uint8 =\\u003e uint8) _maxStakeRankBySeason;\\r\\n    \\r\\n    //******************************************************\\r\\n    //ANTI BOT AND FAIR LAUNCH HASH TABLES AND ARRAYS\\r\\n    //******************************************************\\r\\n    mapping(address =\\u003e uint256) tokensMintedByAddress; //Tracks total NFTs minted to limit individual wallets.\\r\\n    \\r\\n    //******************************************************\\r\\n    //METADATA HASH TABLES\\r\\n    //******************************************************\\r\\n    //Bools stored as uint256 to shave a few units off gas fees.\\r\\n    mapping(uint16 =\\u003e bytes32) metadataById; //Stores critical metadata by ID\\r\\n    mapping(uint16 =\\u003e bytes32) _lockedTokens; //Tracks tokens locked for staking\\r\\n    mapping(uint16 =\\u003e uint256) _inactiveOnThisChain; //Tracks which tokens are active on current chain\\r\\n    mapping(bytes16 =\\u003e uint256) _usedCombos; //Stores attribute combo hashes to guarantee uniqueness\\r\\n    mapping(uint16 =\\u003e string) namedBunz; //Stores names for bunz\\r\\n    \\r\\n    //******************************************************\\r\\n    //CONTRACT CONSTRUCTOR AND INITIALIZER FOR PROXY\\r\\n    //******************************************************\\r\\n    constructor() {\\r\\n        //Initialize ownable on implementation\\r\\n        //to prevent any misuse of implementation\\r\\n        //contract.\\r\\n        ownableInit();\\r\\n    }\\r\\n    \\r\\n    function initHungryBunz (\\r\\n        address[] memory payees,\\r\\n        uint256[] memory paymentShares\\r\\n    )  external initializer\\r\\n    {\\r\\n        //Require to prevent users from initializing\\r\\n        //implementation contract\\r\\n        require(owner() == address(0) || owner() == msg.sender,\\r\\n            \\\"No.\\\");\\r\\n        \\r\\n        ownableInit();\\r\\n        initPaymentSplitter(payees, paymentShares);\\r\\n        initERC721(\\\"HungryBunz\\\", \\\"BUNZ\\\");\\r\\n\\r\\n        _maxRank = 2;\\r\\n        _maxStakeRankBySeason[0] = 1;\\r\\n        _transferPaused = true;\\r\\n        _signerAddress = 0xF658480075BA1158f12524409066Ca495b54b0dD;\\r\\n        _baseMintPrice = 0.06 ether;\\r\\n        _maxSupply = 8888;\\r\\n        _maxPerWallet = 5;\\r\\n        _nameTagPrice = 200 * 10**18;\\r\\n        _evolveThiccness[0][1] = 5000;\\r\\n        _evolveThiccness[0][2] = 30000;\\r\\n        //Guesstimate on targets for season 1\\r\\n        _evolveThiccness[1][1] = 15000;\\r\\n        _evolveThiccness[1][2] = 30000;\\r\\n        _1of1Index = 1; //Initialize at 1\\r\\n        \\r\\n        //WL Opensea Proxies for Cheaper Trading\\r\\n        _openSea = 0xa5409ec958C83C3f309868babACA7c86DCB077c1;\\r\\n        _osProxies = ProxyRegistry(_openSea);\\r\\n    }\\r\\n    \\r\\n    //******************************************************\\r\\n    //OVERRIDES TO HANDLE CONFLICTS BETWEEN IMPORTS\\r\\n    //******************************************************\\r\\n    function _burn(uint256 tokenId) internal virtual override(ERC721) {\\r\\n        ERC721._burn(tokenId);\\r\\n        delete metadataById[uint16(tokenId)];\\r\\n        _totalSupply -= 1;\\r\\n    }\\r\\n    \\r\\n    //Access to ERC721 implementation for use within app contracts.\\r\\n    function applicationOwnerOf(uint256 tokenId) public view returns (address) {\\r\\n        return ERC721.ownerOf(tokenId);\\r\\n    }\\r\\n    \\r\\n    //Override ownerOf to accomplish lower cost alternative to lock tokens for staking.\\r\\n    function ownerOf(uint256 tokenId) public view virtual override(ERC721) returns (address) {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        if (lockedForStaking(tokenId)) {\\r\\n            owner = address(uint160(owner) - 1);\\r\\n        } else if (_inactiveOnThisChain[uint16(tokenId)] == 1) {\\r\\n            owner = address(0);\\r\\n        }\\r\\n        return owner;\\r\\n    }\\r\\n    \\r\\n    //Override isApprovedForAll to whitelist user\\u0027s OpenSea proxy accounts to enable gas-less listings.\\r\\n    function isApprovedForAll(\\r\\n        address owner,\\r\\n        address operator\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override(ERC721)\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (address(_osProxies.proxies(owner)) == operator) {\\r\\n            return true;\\r\\n        }\\r\\n        \\r\\n        return ERC721.isApprovedForAll(owner, operator);\\r\\n    }\\r\\n    \\r\\n    //Override for simulated transfers and burns.\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual override(ERC721) returns (bool) {\\r\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        //Transfers not allowed while inactive on this chain. Transfers\\r\\n        //potentially allowed when spender is foraging contract and\\r\\n        //token is locked for staking.\\r\\n        return ((spender == owner || getApproved(tokenId) == spender ||\\r\\n            isApprovedForAll(owner, spender) || spender == address(this)) \\u0026\\u0026\\r\\n            (!lockedForStaking(tokenId) || spender == _nomContractAddress) \\u0026\\u0026\\r\\n            _inactiveOnThisChain[uint16(tokenId)] == 0 \\u0026\\u0026 !_transferPaused);\\r\\n    }\\r\\n    \\r\\n    //******************************************************\\r\\n    //OWNER ONLY FUNCTIONS TO CONNECT CHILD CONTRACTS.\\r\\n    //******************************************************    \\r\\n    function ccNom(address contractAddress) public onlyOwner {\\r\\n        //Not cast to interface as this will need to be cast to address\\r\\n        //more often than not.\\r\\n        _nomContractAddress = contractAddress;\\r\\n    }\\r\\n    \\r\\n    function ccGateway(address contractAddress) public onlyOwner {\\r\\n        //Notably not cast to interface because this contract never calls\\r\\n        //functions on gateway.\\r\\n        _xLayerGateway = contractAddress;\\r\\n    }\\r\\n\\r\\n    function ccSnax(ISnax contractAddress) public onlyOwner {\\r\\n        snax = contractAddress;\\r\\n    }\\r\\n    \\r\\n    function ccItems(IItem contractAddress) public onlyOwner {\\r\\n        items = contractAddress;\\r\\n    }\\r\\n    \\r\\n    function ccGenerator(IMetadataGen contractAddress) public onlyOwner {\\r\\n        generator = contractAddress;\\r\\n    }\\r\\n    \\r\\n    function ccRenderer(IMetadataRenderer newRenderer) public onlyOwner {\\r\\n        renderer = newRenderer;\\r\\n    }\\r\\n    \\r\\n    function ccEvolution(IEvolve newEvolver) public onlyOwner {\\r\\n        _evolver = newEvolver;\\r\\n    }\\r\\n\\r\\n    function getInterfaces() external view returns (bytes memory) {\\r\\n        return abi.encodePacked(\\r\\n            _nomContractAddress,\\r\\n            _xLayerGateway,\\r\\n            address(snax),\\r\\n            address(items),\\r\\n            address(generator),\\r\\n            address(renderer),\\r\\n            address(_evolver)\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    //******************************************************\\r\\n    //OWNER ONLY FUNCTIONS TO MANAGE CRITICAL PARAMETERS\\r\\n    //******************************************************\\r\\n    function startSale() public onlyOwner {\\r\\n        require(_saleEnd == false, \\\"Cannot restart sale.\\\");\\r\\n        _saleStarted = true;\\r\\n    }\\r\\n    \\r\\n    function endSale() public onlyOwner {\\r\\n        _saleStarted = false;\\r\\n        _saleEnd = true;\\r\\n    }\\r\\n\\r\\n    function enableTransfer() public onlyOwner {\\r\\n        _transferPaused = false;\\r\\n    }\\r\\n\\r\\n    //Emergency transfer pause to prevent innapropriate transfer of tokens.\\r\\n    function pauseTransfer() public onlyOwner {\\r\\n        _transferPaused = true;\\r\\n    }\\r\\n    \\r\\n    function changeWalletLimit(uint16 newLimit) public onlyOwner {\\r\\n        //Set to 1 higher than limit for cheaper less than check!\\r\\n        _maxPerWallet = newLimit;\\r\\n    }\\r\\n    \\r\\n    function reduceSupply(uint16 newSupply) public onlyOwner {\\r\\n        require (newSupply \\u003c _maxSupply,\\r\\n            \\\"Can only reduce supply\\\");\\r\\n        require (newSupply \\u003e _totalSupply,\\r\\n            \\\"Cannot reduce below current!\\\");\\r\\n        _maxSupply = newSupply;\\r\\n    }\\r\\n    \\r\\n    function update1of1Index(uint8 oneOfOneIndex) public onlyOwner {\\r\\n        //This function is provided exclusively so that owner may\\r\\n        //update 1of1Index to facilitate creation of 1of1s on L2\\r\\n        //if this is deemed to be a feature of interest to community\\r\\n        _1of1Index = oneOfOneIndex;\\r\\n    }\\r\\n    \\r\\n    function startNewSeason(uint8 oneOfOneCount, bool enabledOnThisLayer, uint8 maxStakeRank) public onlyOwner {\\r\\n        //Require all 1 of 1s for current season claimed before\\r\\n        //starting a new season. L2 seasons will require sync.\\r\\n        require(_1of1Index == _1of1Allotted[_season],\\r\\n            \\\"No.\\\");\\r\\n        _season++;\\r\\n        _1of1Allotted[_season] = oneOfOneCount + _1of1Index;\\r\\n        _1of1sOnThisLayer[_season] = enabledOnThisLayer;\\r\\n        _maxStakeRankBySeason[_season] = maxStakeRank;\\r\\n    }\\r\\n    \\r\\n    function addRank(uint8 newRank) public onlyOwner { //Used to enable third, fourth, etc. evolution levels.\\r\\n        _maxRank = newRank;\\r\\n    }\\r\\n    \\r\\n    function updateEvolveThiccness(uint8 rank, uint8 season, uint16 threshold) public onlyOwner {\\r\\n        //Rank as current. E.G. (1, 10000) sets threshold to evolve to rank 2\\r\\n        //to 10000 pounds or thiccness points\\r\\n        _evolveThiccness[season][rank] = threshold;\\r\\n    }\\r\\n    \\r\\n    function setPriceToName(uint256 newPrice) public onlyOwner {\\r\\n        _nameTagPrice = newPrice;\\r\\n    }\\r\\n    \\r\\n    function reveal() public onlyOwner {\\r\\n        _metadataRevealed = true;\\r\\n    }\\r\\n    \\r\\n    function bypassMintAuth() public onlyOwner {\\r\\n        _bypassMintAuth = true;\\r\\n    }\\r\\n    \\r\\n    //******************************************************\\r\\n    //VIEWS FOR CRITICAL INFORMATION\\r\\n    //******************************************************\\r\\n    function baseMintPrice() public view returns (uint256) {\\r\\n        return _baseMintPrice;\\r\\n    }\\r\\n    \\r\\n    function totalMintPrice(uint8 numberOfTokens) public view returns (uint256) {\\r\\n        return _baseMintPrice * numberOfTokens;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function maxSupply() public view returns (uint256) {\\r\\n        return _maxSupply;\\r\\n    }\\r\\n    \\r\\n    //******************************************************\\r\\n    //ANTI-BOT PASSWORD HANDLERS\\r\\n    //******************************************************\\r\\n    function hashTransaction(address sender, uint256 qty, bytes8 salt) private pure returns(bytes32) {\\r\\n          bytes32 hash = keccak256(abi.encodePacked(\\r\\n            \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\r\\n            keccak256(abi.encodePacked(sender, qty, salt)))\\r\\n          );\\r\\n          \\r\\n          return hash;\\r\\n    }\\r\\n    \\r\\n    function matchAddresSigner(bytes32 hash, bytes memory signature) public view returns(bool) {\\r\\n        return (_signerAddress == hash.recover(signature));\\r\\n    }\\r\\n    \\r\\n    //******************************************************\\r\\n    //TOKENURI OVERRIDE RELOCATED TO BELOW UTILITY FUNCTIONS\\r\\n    //******************************************************\\r\\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"Token Doesn\\u0027t Exist\\\");\\r\\n        //Heavy lifting is done by rendering contract.\\r\\n        bytes16 atts = serializeAtts(uint16(tokenId));\\r\\n        bytes16 stats = serializeStats(uint16(tokenId));\\r\\n        return renderer.renderMetadata(uint16(tokenId), atts, stats);\\r\\n    }\\r\\n    \\r\\n    function _writeSerializedAtts(uint16 tokenId, bytes16 newAtts) internal {\\r\\n        bytes16 currentStats = serializeStats(tokenId);\\r\\n        metadataById[tokenId] = bytes32(abi.encodePacked(newAtts, currentStats));\\r\\n    }\\r\\n    \\r\\n    function writeSerializedAtts(uint16 tokenId, bytes16 newAtts) external {\\r\\n        require(msg.sender == _xLayerGateway,\\r\\n            \\\"Not Gateway!\\\");\\r\\n        _writeSerializedAtts(tokenId, newAtts);\\r\\n    }\\r\\n    \\r\\n    function serializeAtts(uint16 tokenId) public view returns (bytes16) {\\r\\n        return _metadataRevealed ? bytes16(metadataById[tokenId]) : bytes16(0);\\r\\n    }\\r\\n    \\r\\n    function _writeSerializedStats(uint16 tokenId, bytes16 newStats) internal {\\r\\n        bytes16 currentAtts = serializeAtts(tokenId);\\r\\n        metadataById[tokenId] = bytes32(abi.encodePacked(currentAtts, newStats));\\r\\n    }\\r\\n    \\r\\n    function writeSerializedStats(uint16 tokenId, bytes16 newStats) external {\\r\\n        require(msg.sender == _xLayerGateway,\\r\\n            \\\"Not Gateway!\\\");\\r\\n        _writeSerializedStats(tokenId, newStats);\\r\\n    }\\r\\n    \\r\\n    function serializeStats(uint16 tokenId) public view returns (bytes16) {\\r\\n        return _metadataRevealed ? bytes16(metadataById[tokenId] \\u003c\\u003c 128) : bytes16(0);\\r\\n    }\\r\\n    \\r\\n    function propertiesBytes(uint16 tokenId) external view returns(bytes32) {\\r\\n        return metadataById[tokenId];\\r\\n    }\\r\\n    \\r\\n    //******************************************************\\r\\n    //STAKING VIEWS\\r\\n    //******************************************************\\r\\n    function lockedForStaking (uint256 tokenId) public view returns(bool) {\\r\\n        return uint8(bytes1(_lockedTokens[uint16(tokenId)])) == 1;\\r\\n    }\\r\\n\\r\\n    //Check stake checks both staking status and ownership.\\r\\n    function checkStake (uint16 tokenId) external view returns (address) {\\r\\n        return lockedForStaking(tokenId) ? applicationOwnerOf(tokenId) : address(0);\\r\\n    }\\r\\n\\r\\n    //Returns staking timestamp\\r\\n    function stakeStart (uint16 tokenId) public view returns(uint248) {\\r\\n        return uint248(bytes31(_lockedTokens[tokenId] \\u003c\\u003c 8));\\r\\n    }\\r\\n\\r\\n    //******************************************************\\r\\n    //STAKING LOCK / UNLOCK AND TIMESTAMP FUNCTION\\r\\n    //******************************************************\\r\\n    function updateStakeStart (uint16 tokenId, uint248 newTime) external {\\r\\n        uint8 stakeStatus = uint8(bytes1(_lockedTokens[tokenId]));\\r\\n        _lockedTokens[tokenId] = bytes32(abi.encodePacked(stakeStatus, newTime));\\r\\n    }\\r\\n    function lockForStaking (uint16 tokenId) external {\\r\\n        //Nom contract performs owner of check to prevent malicious locking\\r\\n        require(msg.sender == _nomContractAddress,\\r\\n            \\\"Unauthorized\\\");\\r\\n        require(!lockedForStaking(tokenId),\\r\\n            \\\"Already locked!\\\");\\r\\n        //Metadata byte 16 is rank, 17 is season.\\r\\n        require(_maxStakeRankBySeason[uint8(metadataById[tokenId][17])] \\u003e= uint8(metadataById[tokenId][16]),\\r\\n            \\\"Cannot Stake\\\");\\r\\n        bytes31 currentTimestamp = bytes31(_lockedTokens[tokenId] \\u003c\\u003c 8);\\r\\n        //Food coma period will persist after token transfer.\\r\\n        uint248 stakeTimestamp = uint248(currentTimestamp) \\u003c block.timestamp ?\\r\\n            uint248(block.timestamp) : uint248(currentTimestamp);\\r\\n        _lockedTokens[tokenId] = bytes32(abi.encodePacked(uint8(1), stakeTimestamp));\\r\\n        \\r\\n        //Event with ownerOf override clears secondary listings.\\r\\n        emit Transfer(applicationOwnerOf(tokenId), \\r\\n            address(uint160(applicationOwnerOf(tokenId)) - 1),\\r\\n            tokenId);\\r\\n    }\\r\\n    \\r\\n    function unlock (uint16 tokenId, uint248 newTime) external {\\r\\n        //Nom contract performs owner of check to prevent malicious unlocking\\r\\n        require(msg.sender == _nomContractAddress,\\r\\n            \\\"Unauthorized\\\");\\r\\n        require(lockedForStaking(tokenId),\\r\\n            \\\"Not locked!\\\");\\r\\n        _lockedTokens[tokenId] = bytes32(abi.encodePacked(uint8(0), newTime));\\r\\n        \\r\\n        //Event with ownerOf override restores token in marketplace accounts\\r\\n        emit Transfer(address(uint160(applicationOwnerOf(tokenId)) - 1),\\r\\n            applicationOwnerOf(tokenId),\\r\\n            tokenId);\\r\\n    }\\r\\n    \\r\\n    //******************************************************\\r\\n    //L2 FUNCTIONALITY\\r\\n    //******************************************************\\r\\n    function setInactiveOnThisChain(uint16 tokenId) external {\\r\\n        //This can only be called by the gateway contract to prevent exploits.\\r\\n        //Gateway will check ownership, and setting inactive is a pre-requisite\\r\\n        //to issuing the message to mint token on the other chain. By verifying\\r\\n        //that we aren\\u0027t trying to re-teleport here, we save back and forth to\\r\\n        //check the activity status of the token on the gateway contract.\\r\\n        require(msg.sender == _xLayerGateway,\\r\\n            \\\"Not Gateway!\\\");\\r\\n        require(_inactiveOnThisChain[tokenId] == 0,\\r\\n            \\\"Already inactive!\\\");\\r\\n        \\r\\n        //Unstake token to mitigate very minimal exploit by staking then immediately\\r\\n        //bridging to another layer to accrue slightly more tokens in a given time.\\r\\n        uint16[] memory lockedTokens = new uint16[](1);\\r\\n        lockedTokens[0] = tokenId;\\r\\n        nom(_nomContractAddress).unstake(lockedTokens, applicationOwnerOf(tokenId));\\r\\n        _inactiveOnThisChain[tokenId] = 1;\\r\\n        \\r\\n        //Event with ownerOf override clears secondary listings.\\r\\n        emit Transfer(applicationOwnerOf(tokenId), address(0), tokenId);\\r\\n    }\\r\\n    \\r\\n    function setActiveOnThisChain(uint16 tokenId, bytes memory metadata, address sender) external {\\r\\n        require(msg.sender == _xLayerGateway,\\r\\n            \\\"Not Gateway!\\\");\\r\\n        if (_exists(uint256(tokenId))) {\\r\\n            require(_inactiveOnThisChain[tokenId] == 1,\\r\\n                \\\"Already active\\\");\\r\\n        }\\r\\n        _inactiveOnThisChain[tokenId] = 0;\\r\\n        \\r\\n        if(!_exists(uint256(tokenId))) {\\r\\n            _safeMint(sender, tokenId);\\r\\n        } else {\\r\\n            address localOwner = applicationOwnerOf(tokenId);\\r\\n            if (localOwner != sender) {\\r\\n                //This indicates a transaction occurred\\r\\n                //on the other layer. Transfer.\\r\\n                safeTransferFrom(localOwner, sender, tokenId);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        metadataById[tokenId] = bytes32(metadata);\\r\\n        \\r\\n        uint16 burntId = uint16(bytes2(abi.encodePacked(metadata[14], metadata[15])));\\r\\n        if (_exists(uint256(burntId))) {\\r\\n            _burn(burntId);\\r\\n        }\\r\\n        \\r\\n        //Event with ownerOf override restores token in marketplace accounts\\r\\n        emit Transfer(address(0), applicationOwnerOf(tokenId), tokenId);\\r\\n    }\\r\\n    \\r\\n    //******************************************************\\r\\n    //MINT FUNCTIONS\\r\\n    //******************************************************\\r\\n    function _mintToken(address to, uint32 password, uint16 newId) internal {        \\r\\n        //Generate data in mint function to reduce calls. Cost 40k.\\r\\n        //While loop and additional write operation is necessary\\r\\n        //evil to prevent duplicates.\\r\\n        bytes16 newAtts;\\r\\n        while(newAtts == 0 || _usedCombos[newAtts] == 1) {\\r\\n            newAtts = generator.generateAttributes(to, newId, password);\\r\\n            password++;\\r\\n        }\\r\\n        _usedCombos[newAtts] = 1;\\r\\n        \\r\\n        bytes16 newStats = generator.generateStats(to, newId, password);\\r\\n        metadataById[newId] = bytes32(abi.encodePacked(newAtts, newStats));\\r\\n\\r\\n        //Cost 20k.\\r\\n        _safeMint(to, newId);\\r\\n    }\\r\\n    \\r\\n    function publicAccessMint(uint8 numberOfTokens, bytes memory signature, bytes8 salt)\\r\\n        public\\r\\n        payable\\r\\n    {\\r\\n        //Between the use of msg.sender in the tx hash for purchase authorization,\\r\\n        //and the requirements for wallet limiter, saving the salt is an undesirable\\r\\n        //gas add. Users may re-use the same hash for multiple Txs if they prefer,\\r\\n        //instead of maxing out their mint the first time.\\r\\n        bytes32 txHash = hashTransaction(msg.sender, numberOfTokens, salt);\\r\\n        \\r\\n        require(_saleStarted,\\r\\n            \\\"Sale not live.\\\");\\r\\n        if (!_bypassMintAuth) {\\r\\n            require(matchAddresSigner(txHash, signature),\\r\\n                \\\"Unauthorized!\\\");\\r\\n        }\\r\\n        require((numberOfTokens + tokensMintedByAddress[msg.sender] \\u003c _maxPerWallet),\\r\\n            \\\"Exceeded max mint.\\\");\\r\\n        require(_totalSupply + numberOfTokens \\u003c= _maxSupply,\\r\\n            \\\"Not enough supply\\\");\\r\\n        require(msg.value \\u003e= totalMintPrice(numberOfTokens),\\r\\n            \\\"Insufficient funds.\\\");\\r\\n        \\r\\n        //Set tokens minted by address before calling internal mint\\r\\n        //to revert on attempted reentry to bypass wallet limit.\\r\\n        uint16 offset = _totalSupply;\\r\\n        tokensMintedByAddress[msg.sender] += numberOfTokens;\\r\\n        _totalSupply += numberOfTokens; //Set once to save a few k gas\\r\\n\\r\\n        for (uint i = 0; i \\u003c numberOfTokens; i++) {\\r\\n            offset++;\\r\\n            _mintToken(msg.sender, uint32(bytes4(signature)), offset);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    //******************************************************\\r\\n    //BURN NOM FOR STAT BOOSTS\\r\\n    //******************************************************\\r\\n    //Team must be passed as an argument since gas fees to enumerate a\\r\\n    //user\\u0027s collection with Enumerable or similar are too high to justify.\\r\\n    //Sanitization of the input array is done on the snax contract.\\r\\n    function consume(uint16 consumer, uint256 burn, uint16[] memory team) public {\\r\\n        //We only check that a token is active on this chain.\\r\\n        //You may burn NOM to boost friends\\u0027 NFTs if you wish.\\r\\n        //You may also burn NOM to feed currently staked Bunz\\r\\n        require(_inactiveOnThisChain[consumer] == 0,\\r\\n            \\\"Not active on this chain!\\\");\\r\\n        \\r\\n        //Attempt to burn requisite amount of NOM. Will revert if\\r\\n        //balance insufficient. This contract is approved burner\\r\\n        //on NOM contract by default.\\r\\n        nom(_nomContractAddress).burn(msg.sender, burn);\\r\\n        \\r\\n        uint256 wholeBurnRaw = burn / 10 ** 18; //Convert to integer units.\\r\\n        bytes16 currentStats = serializeStats(consumer);\\r\\n        //Computation done in snax contract for upgradability. Stack depth\\r\\n        //limits require us to break the multiplier calc out into a separate\\r\\n        //call to the snax contract.\\r\\n        uint256 multiplier = snax.computeMultiplier(msg.sender, currentStats, team); //Returns BPS\\r\\n        uint256 wholeBurn = (wholeBurnRaw * multiplier) / 10000;\\r\\n        \\r\\n        //Snax contract will take a tokenId, retrieve critical stats\\r\\n        //and then modify stats, primarily thiccness, based on total\\r\\n        //tokens burned. Output bytes are written back to struct.\\r\\n        bytes16 transformedStats = snax.feed(currentStats, wholeBurn);\\r\\n        _writeSerializedStats(consumer, transformedStats);\\r\\n    }\\r\\n    \\r\\n    //******************************************************\\r\\n    //ATTACH ITEM\\r\\n    //******************************************************\\r\\n    function attach(uint16 base, uint16 consumableItem) public {\\r\\n        //This function will call another function on the item\\r\\n        //NFT contract which will burn an item, apply its properties\\r\\n        //to the base NFT, and return these values.\\r\\n        require(msg.sender == applicationOwnerOf(base),\\r\\n            \\\"Don\\u0027t own this token\\\"); //Owner of check performed in item contract\\r\\n        require(_inactiveOnThisChain[base] == 0,\\r\\n            \\\"Not active on this chain!\\\");\\r\\n            \\r\\n        bytes32 transformedProperties = items.applyProperties(metadataById[base], consumableItem);\\r\\n        metadataById[base] = transformedProperties;\\r\\n    }\\r\\n    \\r\\n    //******************************************************\\r\\n    //NAME BUNZ\\r\\n    //******************************************************\\r\\n    function getNameTagPrice() public view returns(uint256) {\\r\\n        return _nameTagPrice;\\r\\n    }\\r\\n    \\r\\n    function name(uint16 tokenId, string memory newName) public {\\r\\n        require(msg.sender == applicationOwnerOf(tokenId),\\r\\n            \\\"Don\\u0027t own this token\\\"); //Owner of check performed in item contract\\r\\n        require(_inactiveOnThisChain[tokenId] == 0,\\r\\n            \\\"Not active on this chain!\\\");\\r\\n            \\r\\n        //Attempt to burn requisite amount of NOM. Will revert if\\r\\n        //balance insufficient. This contract is approved burner\\r\\n        //on NOM contract by default.\\r\\n        nom(_nomContractAddress).burn(msg.sender, _nameTagPrice);\\r\\n        \\r\\n        namedBunz[tokenId] = newName;\\r\\n    }\\r\\n    \\r\\n    //Hook for name not presently used in metadata render contract.\\r\\n    //Provided for future use.\\r\\n    function getTokenName(uint16 tokenId) public view returns(string memory) {\\r\\n        return namedBunz[tokenId];\\r\\n    }\\r\\n    \\r\\n    //******************************************************\\r\\n    //PRESTIGE SYSTEM\\r\\n    //******************************************************\\r\\n    function prestige(uint16[] memory tokenIds) public {\\r\\n        //This is ugly, but the gas savings elsewhere justify this spaghetti.\\r\\n        for(uint16 i = 0; i \\u003c tokenIds.length; i++) {\\r\\n            if (uint8(metadataById[tokenIds[i]][17]) != _season) {\\r\\n                bytes16 currentAtts = serializeAtts(tokenIds[i]);\\r\\n                bytes12 currentStats = bytes12(metadataById[tokenIds[i]] \\u003c\\u003c 160);\\r\\n                \\r\\n                //Atts and rank (byte 16) stay the same. Season (byte 17) and thiccness (bytes 18 and 19) change.\\r\\n                metadataById[tokenIds[i]] = bytes32(abi.encodePacked(\\r\\n                        currentAtts, metadataById[tokenIds[i]][16], bytes1(_season), bytes2(0), currentStats\\r\\n                    ));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    //******************************************************\\r\\n    //EVOLUTION MECHANISM\\r\\n    //******************************************************\\r\\n    function evolve(uint16 firstToken, uint16 secondToken) public {\\r\\n        uint8 rank = uint8(metadataById[firstToken][16]);\\r\\n        require((rank == uint8(metadataById[secondToken][16])) \\u0026\\u0026 (rank \\u003c _maxRank),\\r\\n            \\\"Can\\u0027t evolve these bunz\\\");\\r\\n        uint8 season1 = uint8(metadataById[firstToken][17]);\\r\\n        uint8 season = uint8(metadataById[secondToken][17]) \\u003e season1 ? uint8(metadataById[secondToken][17]) : season1;\\r\\n        uint16 thiccness = uint16(bytes2(abi.encodePacked(metadataById[firstToken][18], metadataById[firstToken][19]))) +\\r\\n            uint16(bytes2(abi.encodePacked(metadataById[secondToken][18], metadataById[secondToken][19])));\\r\\n        \\r\\n        //ownerOf will return the 0 address if tokens are on another layer, and address -1 if staked.\\r\\n        //Forcing unstake before evolve does not add enough to gas fees to justify the complex\\r\\n        //logic to gracefully handle token burn while staked without introducing possible attack\\r\\n        //vectors.\\r\\n        require(ownerOf(firstToken) == msg.sender \\u0026\\u0026 ownerOf(secondToken) == msg.sender, \\r\\n            \\\"Not called by owner.\\\");\\r\\n        require(ownerOf(firstToken) == applicationOwnerOf(firstToken),\\r\\n            \\\"Unlucky\\\");\\r\\n        require(thiccness \\u003e= _evolveThiccness[season][rank],\\r\\n            \\\"Not thicc enough.\\\");\\r\\n        \\r\\n        //Below logic uses the higher season of the two tokens, since otherwise\\r\\n        //tying this to global _season would allow users to earn 1/1s without\\r\\n        //prestiging.\\r\\n        uint8 next1of1 = (_1of1Index \\u003c= _1of1Allotted[season]) \\u0026\\u0026 _1of1sOnThisLayer[season] ? _1of1Index : 0;\\r\\n        bytes32 evolvedToken = _evolver.evolve(next1of1, secondToken, msg.sender, metadataById[firstToken], metadataById[secondToken]);\\r\\n        \\r\\n        if (uint8(evolvedToken[8]) != 0) {\\r\\n            _1of1Index++;\\r\\n        }\\r\\n        \\r\\n        metadataById[firstToken] = evolvedToken;\\r\\n        _burn(secondToken);\\r\\n    }\\r\\n}\"},\"Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since a proxied contract can\\u0027t have a constructor, it\\u0027s common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n */\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     */\\r\\n    bool private _initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private _initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\r\\n\\r\\n        bool isTopLevelCall = !_initializing;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n            _initialized = true;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n        }\\r\\n    }\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initialization\\r\\n     */\\r\\n    function ownableInit() internal {\\r\\n        _setOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == msg.sender, \\\"Caller is not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"},\"PaymentSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title PaymentSplitter\\r\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\r\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\r\\n *\\r\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\r\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\r\\n * an amount proportional to the percentage of total shares they were assigned.\\r\\n *\\r\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\r\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\r\\n * function.\\r\\n */\\r\\ncontract PaymentSplitter {\\r\\n    event PayeeAdded(address account, uint256 shares);\\r\\n    event PaymentReleased(address to, uint256 amount);\\r\\n    event PaymentReceived(address from, uint256 amount);\\r\\n\\r\\n    uint256 private _totalShares;\\r\\n    uint256 private _totalReleased;\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _shares;\\r\\n    mapping(address =\\u003e uint256) private _released;\\r\\n    address[] private _payees;\\r\\n\\r\\n    /**\\r\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\r\\n     * the matching position in the `shares` array.\\r\\n     *\\r\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\r\\n     * duplicates in `payees`.\\r\\n     */\\r\\n    //Openzeppelin implementation makes this payable. Not needed.\\r\\n    function initPaymentSplitter(address[] memory payees, uint256[] memory shares_) internal {\\r\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\r\\n        require(payees.length \\u003e 0, \\\"PaymentSplitter: no payees\\\");\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c payees.length; i++) {\\r\\n            _addPayee(payees[i], shares_[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\r\\n     * reliable: it\\u0027s possible for a contract to receive Ether without triggering this function. This only affects the\\r\\n     * reliability of the events, and not the actual splitting of Ether.\\r\\n     *\\r\\n     * To learn more about this see the Solidity documentation for\\r\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\r\\n     * functions].\\r\\n     */\\r\\n    receive() external payable virtual {\\r\\n        emit PaymentReceived(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the total shares held by payees.\\r\\n     */\\r\\n    function totalShares() public view returns (uint256) {\\r\\n        return _totalShares;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the total amount of Ether already released.\\r\\n     */\\r\\n    function totalReleased() public view returns (uint256) {\\r\\n        return _totalReleased;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of shares held by an account.\\r\\n     */\\r\\n    function shares(address account) public view returns (uint256) {\\r\\n        return _shares[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of Ether already released to a payee.\\r\\n     */\\r\\n    function released(address account) public view returns (uint256) {\\r\\n        return _released[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the address of the payee number `index`.\\r\\n     */\\r\\n    function payee(uint256 index) public view returns (address) {\\r\\n        return _payees[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\r\\n     * total shares and their previous withdrawals.\\r\\n     */\\r\\n    function release(address payable account) public virtual {\\r\\n        require(_shares[account] \\u003e 0, \\\"PaymentSplitter: account has no shares\\\");\\r\\n\\r\\n        uint256 totalReceived = address(this).balance + _totalReleased;\\r\\n        uint256 payment = (totalReceived * _shares[account]) / _totalShares - _released[account];\\r\\n\\r\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\r\\n\\r\\n        _released[account] = _released[account] + payment;\\r\\n        _totalReleased = _totalReleased + payment;\\r\\n\\r\\n        Address.sendValue(account, payment);\\r\\n        emit PaymentReleased(account, payment);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a new payee to the contract.\\r\\n     * @param account The address of the payee to add.\\r\\n     * @param shares_ The number of shares owned by the payee.\\r\\n     */\\r\\n    function _addPayee(address account, uint256 shares_) private {\\r\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\r\\n        require(shares_ \\u003e 0, \\\"PaymentSplitter: shares are 0\\\");\\r\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\r\\n\\r\\n        _payees.push(account);\\r\\n        _shares[account] = shares_;\\r\\n        _totalShares = _totalShares + shares_;\\r\\n        emit PayeeAdded(account, shares_);\\r\\n    }\\r\\n}\\r\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newRank\",\"type\":\"uint8\"}],\"name\":\"addRank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"applicationOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"base\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"consumableItem\",\"type\":\"uint16\"}],\"name\":\"attach\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bypassMintAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEvolve\",\"name\":\"newEvolver\",\"type\":\"address\"}],\"name\":\"ccEvolution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ccGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMetadataGen\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ccGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IItem\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ccItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ccNom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMetadataRenderer\",\"name\":\"newRenderer\",\"type\":\"address\"}],\"name\":\"ccRenderer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISnax\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ccSnax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newLimit\",\"type\":\"uint16\"}],\"name\":\"changeWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"checkStake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"consumer\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"team\",\"type\":\"uint16[]\"}],\"name\":\"consume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"firstToken\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"secondToken\",\"type\":\"uint16\"}],\"name\":\"evolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterfaces\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNameTagPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"getTokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"paymentShares\",\"type\":\"uint256[]\"}],\"name\":\"initHungryBunz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"lockForStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lockedForStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"matchAddresSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"name\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"prestige\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"propertiesBytes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"numberOfTokens\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes8\",\"name\":\"salt\",\"type\":\"bytes8\"}],\"name\":\"publicAccessMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newSupply\",\"type\":\"uint16\"}],\"name\":\"reduceSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"serializeAtts\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"serializeStats\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"setActiveOnThisChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"setInactiveOnThisChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceToName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"stakeStart\",\"outputs\":[{\"internalType\":\"uint248\",\"name\":\"\",\"type\":\"uint248\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"oneOfOneCount\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"enabledOnThisLayer\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"maxStakeRank\",\"type\":\"uint8\"}],\"name\":\"startNewSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"numberOfTokens\",\"type\":\"uint8\"}],\"name\":\"totalMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint248\",\"name\":\"newTime\",\"type\":\"uint248\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"oneOfOneIndex\",\"type\":\"uint8\"}],\"name\":\"update1of1Index\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rank\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"season\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"threshold\",\"type\":\"uint16\"}],\"name\":\"updateEvolveThiccness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint248\",\"name\":\"newTime\",\"type\":\"uint248\"}],\"name\":\"updateStakeStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"bytes16\",\"name\":\"newAtts\",\"type\":\"bytes16\"}],\"name\":\"writeSerializedAtts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"bytes16\",\"name\":\"newStats\",\"type\":\"bytes16\"}],\"name\":\"writeSerializedStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"HungryBunz","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7d16a81164c61d8e678bd1141bb6b2bc8a4c99df466eae7f15f1df0f93695a23"}]}